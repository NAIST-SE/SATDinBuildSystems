{
  "Repository" : "12667592",
  "Revision" : "HEAD",
  "ObjectId" : "eb8ff396b7f0f083e86fd0c7a11ccd4ba28b14a1",
  "CommitTime" : "2019-04-15T13:30:56Z",
  "Files" : {
    "CMake/CommonFindMacros.cmake" : {
      "ObjectId" : "656f5ca57d4b163c1d0f0a8ef0689ec2c2d3275e",
      "LastModified" : "2015-04-16T18:05:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup restricted search paths\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Restore original search paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/FindEigen3.cmake" : {
      "ObjectId" : "1593fb46de05f935c890360cde04719e9bf8e87c",
      "LastModified" : "2016-04-15T20:38:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CMake/FindFFMPEG.cmake" : {
      "ObjectId" : "c45dc17a99df9dd98adf9f3e314c101f71523e3c",
      "LastModified" : "2018-07-16T14:33:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the FFmpeg library\n\n#\n\n# Sets\n\n#   FFMPEG_FOUND.  If false, don't try to use ffmpeg\n\n#   FFMPEG_FOUND_SEVERAL. If true, there are several directories with headers (not only ../ffmpeg/)\n\n#   FFMPEG_INCLUDE_DIR\n\n#   FFMPEG_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindLog4cxx.cmake" : {
      "ObjectId" : "db625bafa8bb955658c53bcc8bcc576aadf2f472",
      "LastModified" : "2018-07-16T14:33:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ckwg +4\n\n# Copyright 2010 2014 by Kitware, Inc. All Rights Reserved. Please refer to\n\n# KITWARE_LICENSE.TXT for licensing information, or contact General Counsel,\n\n# Kitware, Inc., 28 Corporate Drive, Clifton Park, NY 12065.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Locate the system installed Log4cxx\n\n# The following variables will be set:\n\n#\n\n# Log4cxx_FOUND       - Set to true if Log4cxx can be found\n\n# Log4cxx_INCLUDE_DIR - The path to the Log4cxx header files\n\n# Log4cxx_LIBRARY     - The full path to the Log4cxx library\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/FindPROJ.cmake" : {
      "ObjectId" : "ce1fd3c7293af846473098bc3afd59eef6da106f",
      "LastModified" : "2018-07-16T14:33:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find module for PROJ\n\n#\n\n# The following variables will guide the find:\n\n#   PROJ_ROOT        - Set to the install prefix of the PROJ library.\n\n#   PROJ_DIR         - Find the package based on this path to the package's\n\n#                       CMake configuration file. This supersedes the use of\n\n#                       PROJ_ROOT.\n\n#\n\n# The following variables will be set:\n\n#   PROJ_FOUND       - Set to TRUE if PROJ could be found.\n\n#   PROJ_INCLUDE_DIR - Path to the PROJ header files directory\n\n#   PROJ_LIBRARY     - The full path to the PROJ library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the header file was found, use that path as a introspective hint for finding the library\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#message(\"Introspecting library dir from include dir: '${PROJ_INCLUDE_DIR}'\")\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#message(\"Introspected library dir: '${proj_lib_dir}'\")\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "###\n\n# for compatibility\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "CMake/FindSphinx.cmake" : {
      "ObjectId" : "8e74efc51962357f037e33d5f45cffecbb874e34",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Quick and dirty sphinx finder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindTinyXML.cmake" : {
      "ObjectId" : "b0d424ccbaeed9d9f32dc5625078bcfc3ad30536",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ckwg +4\n\n# Copyright 2010,2014 by Kitware, Inc. All Rights Reserved. Please refer to\n\n# KITWARE_LICENSE.TXT for licensing information, or contact General Counsel,\n\n# Kitware, Inc., 28 Corporate Drive, Clifton Park, NY 12065.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Locate the system installed TinyXML\n\n# The following variables will be set:\n\n#\n\n# TinyXML_FOUND       - Set to true of the system TinyXML can be found\n\n# TinyXML_INCLUDE_DIR - The path to the tinyxml header files\n\n# TinyXML_LIBRARY     - The full path to the TinyXML library\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check to see if TinyXML was built with STL support or not\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#The following approach, while unfortunate, is required under certain circumstances.\n\n#CMake always does a try/compile in Debug mode. In Visual Studio >= 2010 we can't\n\n#link against the tinyxml.lib when it's Release, nor can we always decide at CMake config time\n\n#which mode we will run in. Running both modes explicitly and testing whether either succeeds\n\n#will tell us what we need to know\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Determine the TinyXML version found\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Determine version compatibility\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "CMake/Findpybind11.cmake" : {
      "ObjectId" : "26e397cadb44cf2689e99e4e19fb140705717322",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/dashboard-scripts/KWIVER_common.cmake" : {
      "ObjectId" : "506e93b4d493a8c1f8a6f180a2a26d0515be9ab3",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# KWIVER Common Dashboard Script\n\n#\n\n# This script contains basic dashboard driver code common to all clients for\n\n# the KWIVER project.\n\n#\n\n# Put this script in a directory such as \"~/Dashboards/Scripts\" or\n\n# \"C:\\Dashboards\\Scripts\". Create a file next to this script, say\n\n# \"my_dashboard.cmake\", with code of the following form:\n\n#\n\n#   # Client maintainer: me@mydomain.net\n\n#   set(CTEST_SITE \"machine.site\")\n\n#   set(CTEST_BUILD_NAME \"Platform-Compiler\")\n\n#   set(CTEST_CONFIGURATION_TYPE Debug)\n\n#   set(CTEST_CMAKE_GENERATOR \"Unix Makefiles\")\n\n#   include(\"${CTEST_SCRIPT_DIRECTORY}/KWIVER_common.cmake\")\n\n#\n\n# Then run a scheduled task (cron job) with a command line such as:\n\n#\n\n#   ctest -S ~/Dashboards/Scripts/my_dashboard.cmake -V\n\n#\n\n# By default, the source and build trees will be placed in the path\n\n# \"../MyTests/\" relative to your script location.\n\n#\n\n# The following variables may be set before including this script to configure\n\n# it:\n\n#\n\n#   dashboard_model           = Nightly [default] | Experimental | Continuous\n\n#   dashboard_root_name       = Change name of \"MyTests\" directory. This is\n\n#                               ignored if CTEST_DASHBOARD_ROOT is set.\n\n#   dashboard_source_name     = Name of source directory (default: KWIVER)\n\n#   dashboard_binary_name     = Name of binary directory (default: KWIVER-build)\n\n#   dashboard_cache           = Initial CMakeCache.txt file content.\n\n#   dashboard_do_coverage     = True to enable coverage.\n\n#   dashboard_do_memcheck     = True to enable memcheck.\n\n#   dashboard_no_submit       = Skip result submission step.\n\n#   CTEST_CHECKOUT_COMMAND    = Custom source tree checkout comamnd (primarilly\n\n#                               for if the VCS is not git).\n\n#   CTEST_BUILD_FLAGS         = build too arguments (ex: -j2)\n\n#   CTEST_DASHBOARD_ROOT      = Where to put source and build trees\n\n#   CTEST_TEST_CTEST          = Whether to run long CTestTest* tests.\n\n#   CTEST_TEST_TIMEOUT        = Per-test timeout length.\n\n#   CTEST_TEST_ARGS           = ctest_test args (ex: PARALLEL_LEVEL 4)\n\n#   CMAKE_MAKE_PROGRAM        = Path to \"make\" tool to use when using makefile\n\n#                               generator.\n\n#   CTEST_COVERAGE_COMMAND    = Path to the coverage tool to use when testing\n\n#                               coverage (dashboard_do_coverage).\n\n#   CTEST_MEMORYCHECK_COMMAND = Path to the memory check too to use when\n\n#                               testing memory usage (dashboard_do_memcheck).\n\n#\n\n# Options to configure Git:\n\n#   CTEST_GIT_COMMAND         = Path to the git command-line client.\n\n#   dashboard_git_url         = Custom git clone URL (defaults to KWSource).\n\n#   dashboard_git_branch      = Custom remote branch to track (defaults to\n\n#                               master).\n\n#   dashboard_git_crlf        = Value of core.autocrlf for repository.\n\n#\n\n# The following macros will be invoked before the corresponding step if they\n\n# are defined:\n\n#\n\n#   dashboard_hook_init     = End of initialization, before loop\n\n#   dashboard_hook_start    = Start of loop body, before ctest_start\n\n#   dashboard_hook_started  = Start of loop body, after ctest_start\n\n#   dashboard_hook_build    = Before ctest_build\n\n#   dashboard_hook_test     = Before ctest_test\n\n#   dashboard_hook_coverage = Before ctest_coverage, if enabled\n\n#   dashboard_hook_memcheck = Before ctest_memcheck, if enabled\n\n#   dashboard_hook_submit   = Before ctest_submit, if enabled\n\n#   dashboard_hook_end      = End of body loop, after ctest_submit.\n\n#\n\n# For Makefile generators the script may be executed from as environment\n\n# already configured to use the desired compilers. Alternatively, the\n\n# environment may be set at the top of the script:\n\n#\n\n#   set(ENV{CC}   /path/to/cc)  # C compiler\n\n#   set(ENV{CXX}  /path/to/cxx) # C++ compiler\n\n#   set(ENV{FC}   /path/to/fc)  # Fortran Compiler (optional)\n\n#   set(ENV{LD_LIBRARY_PATH /path/to/vendor/lib) # (if necessary)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# CTest properties setup\n\n#\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Select the top dashboard directory\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Select ctest model (Nightly | Experimental | Continuous)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default to debug build configuration if one not provided\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Choosing CTest reporting mode\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Configuring testing\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Selecting Git source to use\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Look for Git command-line tool if not provided\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Selecting source and binary tree directories\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Delete source tree if not compatible with current VCS\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Support initial checkout if necessary\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# generating initial checkout script\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Setup and run Ctest\n\n#\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Send main script as a note to the submission\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check required variables\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Print summary information\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Avoid non-ascii characters in tool output\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Helper macro to write initial cache\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Start with fresh build tree\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CTest 2.6 crashes with message() after ctest_test\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Start a new submission\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Always build if the tree is fresh\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Look for updates\n",
        "Line" : 340,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# checkout on first iteration only\n",
        "Line" : 342,
        "CharPositionInLine" : 30
      },
      "25" : {
        "Text" : "# Delay until at least 5 minutes past START_TIME\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "CMake/dashboard-scripts/VITAL_common.cmake" : {
      "ObjectId" : "11c7b5d361ab2188274a56f815f27ea4f42add51",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VITAL Common Dashboard Script\n\n#\n\n# This script contains basic dashboard driver code common to all clients for\n\n# the VITAL project.\n\n#\n\n# Put this script in a directory such as \"~/Dashboards/Scripts\" or\n\n# \"C:\\Dashboards\\Scripts\". Create a file next to this script, say\n\n# \"my_dashboard.cmake\", with code of the following form:\n\n#\n\n#   # Client maintainer: me@mydomain.net\n\n#   set(CTEST_SITE \"machine.site\")\n\n#   set(CTEST_BUILD_NAME \"Platform-Compiler\")\n\n#   set(CTEST_CONFIGURATION_TYPE Debug)\n\n#   set(CTEST_CMAKE_GENERATOR \"Unix Makefiles\")\n\n#   include(\"${CTEST_SCRIPT_DIRECTORY}/VITAL_common.cmake\")\n\n#\n\n# Then run a scheduled task (cron job) with a command line such as:\n\n#\n\n#   ctest -S ~/Dashboards/Scripts/my_dashboard.cmake -V\n\n#\n\n# By default, the source and build trees will be placed in the path\n\n# \"../MyTests/\" relative to your script location.\n\n#\n\n# The following variables may be set before including this script to configure\n\n# it:\n\n#\n\n#   dashboard_model           = Nightly [default] | Experimental | Continuous\n\n#   dashboard_root_name       = Change name of \"MyTests\" directory. This is\n\n#                               ignored if CTEST_DASHBOARD_ROOT is set.\n\n#   dashboard_source_name     = Name of source directory (default: VITAL)\n\n#   dashboard_binary_name     = Name of binary directory (default: VITAL-build)\n\n#   dashboard_cache           = Initial CMakeCache.txt file content.\n\n#   dashboard_do_coverage     = True to enable coverage.\n\n#   dashboard_do_memcheck     = True to enable memcheck.\n\n#   dashboard_no_submit       = Skip result submission step.\n\n#   CTEST_CHECKOUT_COMMAND    = Custom source tree checkout comamnd (primarilly\n\n#                               for if the VCS is not git).\n\n#   CTEST_BUILD_FLAGS         = build too arguments (ex: -j2)\n\n#   CTEST_DASHBOARD_ROOT      = Where to put source and build trees\n\n#   CTEST_TEST_CTEST          = Whether to run long CTestTest* tests.\n\n#   CTEST_TEST_TIMEOUT        = Per-test timeout length.\n\n#   CTEST_TEST_ARGS           = ctest_test args (ex: PARALLEL_LEVEL 4)\n\n#   CMAKE_MAKE_PROGRAM        = Path to \"make\" tool to use when using makefile\n\n#                               generator.\n\n#   CTEST_COVERAGE_COMMAND    = Path to the coverage tool to use when testing\n\n#                               coverage (dashboard_do_coverage).\n\n#   CTEST_MEMORYCHECK_COMMAND = Path to the memory check too to use when\n\n#                               testing memory usage (dashboard_do_memcheck).\n\n#\n\n# Options to configure Git:\n\n#   CTEST_GIT_COMMAND         = Path to the git command-line client.\n\n#   dashboard_git_url         = Custom git clone URL (defaults to KWSource).\n\n#   dashboard_git_branch      = Custom remote branch to track (defaults to\n\n#                               master).\n\n#   dashboard_git_crlf        = Value of core.autocrlf for repository.\n\n#\n\n# The following macros will be invoked before the corresponding step if they\n\n# are defined:\n\n#\n\n#   dashboard_hook_init     = End of initialization, before loop\n\n#   dashboard_hook_start    = Start of loop body, before ctest_start\n\n#   dashboard_hook_started  = Start of loop body, after ctest_start\n\n#   dashboard_hook_build    = Before ctest_build\n\n#   dashboard_hook_test     = Before ctest_test\n\n#   dashboard_hook_coverage = Before ctest_coverage, if enabled\n\n#   dashboard_hook_memcheck = Before ctest_memcheck, if enabled\n\n#   dashboard_hook_submit   = Before ctest_submit, if enabled\n\n#   dashboard_hook_end      = End of body loop, after ctest_submit.\n\n#\n\n# For Makefile generators the script may be executed from as environment\n\n# already configured to use the desired compilers. Alternatively, the\n\n# environment may be set at the top of the script:\n\n#\n\n#   set(ENV{CC}   /path/to/cc)  # C compiler\n\n#   set(ENV{CXX}  /path/to/cxx) # C++ compiler\n\n#   set(ENV{FC}   /path/to/fc)  # Fortran Compiler (optional)\n\n#   set(ENV{LD_LIBRARY_PATH} /path/to/vendor/lib) # (if necessary)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# CTest properties setup\n\n#\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Select the top dashboard directory\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Select ctest model (Nightly | Experimental | Continuous)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default to debug build configuration if one not provided\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Choosing CTest reporting mode\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Configuring testing\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Selecting Git source to use\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Look for Git command-line tool if not provided\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Selecting source and binary tree directories\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Delete source tree if not compatible with current VCS\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Support initial checkout if necessary\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# generating initial checkout script\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Setup and run Ctest\n\n#\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Send main script as a note to the submission\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check required variables\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Print summary information\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Avoid non-ascii characters in tool output\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Helper macro to write initial cache\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Start with fresh build tree\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CTest 2.6 crashes with message() after ctest_test\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Start a new submission\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Always build if the tree is fresh\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Look for updates\n",
        "Line" : 340,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# checkout on first iteration only\n",
        "Line" : 342,
        "CharPositionInLine" : 30
      },
      "25" : {
        "Text" : "# Delay until at least 5 minutes past START_TIME\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "CMake/future/3.10/FindGTest.cmake" : {
      "ObjectId" : "ecf8038b6d47037b68ed2203f324facac765ca3e",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindGTest\n\n# ---------\n\n#\n\n# Locate the Google C++ Testing Framework.\n\n#\n\n# Imported targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``GTest::GTest``\n\n#   The Google Test ``gtest`` library, if found; adds Thread::Thread\n\n#   automatically\n\n# ``GTest::Main``\n\n#   The Google Test ``gtest_main`` library, if found\n\n#\n\n#\n\n# Result variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n# ``GTEST_FOUND``\n\n#   Found the Google Testing framework\n\n# ``GTEST_INCLUDE_DIRS``\n\n#   the directory containing the Google Test headers\n\n#\n\n# The library variables below are set as normal variables.  These\n\n# contain debug/optimized keywords when a debugging library is found.\n\n#\n\n# ``GTEST_LIBRARIES``\n\n#   The Google Test ``gtest`` library; note it also requires linking\n\n#   with an appropriate thread library\n\n# ``GTEST_MAIN_LIBRARIES``\n\n#   The Google Test ``gtest_main`` library\n\n# ``GTEST_BOTH_LIBRARIES``\n\n#   Both ``gtest`` and ``gtest_main``\n\n#\n\n# Cache variables\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# The following cache variables may also be set:\n\n#\n\n# ``GTEST_ROOT``\n\n#   The root directory of the Google Test installation (may also be\n\n#   set as an environment variable)\n\n# ``GTEST_MSVC_SEARCH``\n\n#   If compiling with MSVC, this variable can be set to ``MT`` or\n\n#   ``MD`` (the default) to enable searching a GTest build tree\n\n#\n\n#\n\n# Example usage\n\n# ^^^^^^^^^^^^^\n\n#\n\n# ::\n\n#\n\n#     enable_testing()\n\n#     find_package(GTest REQUIRED)\n\n#\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo GTest::GTest GTest::Main)\n\n#\n\n#     add_test(AllTestsInFoo foo)\n\n#\n\n#\n\n# Deeper integration with CTest\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# See :module:`GoogleTest` for information on the :command:`gtest_add_tests`\n\n# and :command:`gtest_discover_tests` commands.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For now, at least, only Windows really needs to know the library type\n",
        "Line" : 114,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# If we get here, no determination was made from the above checks\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The provided /MD project files for Google Test add -md suffixes to the\n\n# library names.\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "CMake/future/3.10/GoogleTest.cmake" : {
      "ObjectId" : "186f7b85b60e1b8a1d2dd96f07ede2783ab4dcb8",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nGoogleTest\n----------\n\nThis module defines functions to help use the Google Test infrastructure.  Two\nmechanisms for adding tests are provided. :command:`gtest_add_tests` has been\naround for some time, originally via ``find_package(GTest)``.\n:command:`gtest_discover_tests` was introduced in CMake 3.10.\n\nThe (older) :command:`gtest_add_tests` scans source files to identify tests.\nThis is usually effective, with some caveats, including in cross-compiling\nenvironments, and makes setting additional properties on tests more convenient.\nHowever, its handling of parameterized tests is less comprehensive, and it\nrequires re-running CMake to detect changes to the list of tests.\n\nThe (newer) :command:`gtest_discover_tests` discovers tests by asking the\ncompiled test executable to enumerate its tests.  This is more robust and\nprovides better handling of parameterized tests, and does not require CMake\nto be re-run when tests change.  However, it may not work in a cross-compiling\nenvironment, and setting test properties is less convenient.\n\nMore details can be found in the documentation of the respective functions.\n\nBoth commands are intended to replace use of :command:`add_test` to register\ntests, and will create a separate CTest test for each Google Test test case.\nNote that this is in some cases less efficient, as common set-up and tear-down\nlogic cannot be shared by multiple test cases executing in the same instance.\nHowever, it provides more fine-grained pass/fail information to CTest, which is\nusually considered as more beneficial.  By default, the CTest test name is the\nsame as the Google Test name (i.e. ``suite.testcase``); see also\n``TEST_PREFIX`` and ``TEST_SUFFIX``.\n\n.. command:: gtest_add_tests\n\n  Automatically add tests with CTest by scanning source code for Google Test\n  macros::\n\n    gtest_add_tests(TARGET target\n                    [SOURCES src1...]\n                    [EXTRA_ARGS arg1...]\n                    [WORKING_DIRECTORY dir]\n                    [TEST_PREFIX prefix]\n                    [TEST_SUFFIX suffix]\n                    [SKIP_DEPENDENCY]\n                    [TEST_LIST outVar]\n    )\n\n  ``gtest_add_tests`` attempts to identify tests by scanning source files.\n  Although this is generally effective, it uses only a basic regular expression\n  match, which can be defeated by atypical test declarations, and is unable to\n  fully \"split\" parameterized tests.  Additionally, it requires that CMake be\n  re-run to discover any newly added, removed or renamed tests (by default,\n  this means that CMake is re-run when any test source file is changed, but see\n  ``SKIP_DEPENDENCY``).  However, it has the advantage of declaring tests at\n  CMake time, which somewhat simplifies setting additional properties on tests,\n  and always works in a cross-compiling environment.\n\n  The options are:\n\n  ``TARGET target``\n    Specifies the Google Test executable, which must be a known CMake\n    executable target.  CMake will substitute the location of the built\n    executable when running the test.\n\n  ``SOURCES src1...``\n    When provided, only the listed files will be scanned for test cases.  If\n    this option is not given, the :prop_tgt:`SOURCES` property of the\n    specified ``target`` will be used to obtain the list of sources.\n\n  ``EXTRA_ARGS arg1...``\n    Any extra arguments to pass on the command line to each test case.\n\n  ``WORKING_DIRECTORY dir``\n    Specifies the directory in which to run the discovered test cases.  If this\n    option is not provided, the current binary directory is used.\n\n  ``TEST_PREFIX prefix``\n    Specifies a ``prefix`` to be prepended to the name of each discovered test\n    case.  This can be useful when the same source files are being used in\n    multiple calls to ``gtest_add_test()`` but with different ``EXTRA_ARGS``.\n\n  ``TEST_SUFFIX suffix``\n    Similar to ``TEST_PREFIX`` except the ``suffix`` is appended to the name of\n    every discovered test case.  Both ``TEST_PREFIX`` and ``TEST_SUFFIX`` may\n    be specified.\n\n  ``SKIP_DEPENDENCY``\n    Normally, the function creates a dependency which will cause CMake to be\n    re-run if any of the sources being scanned are changed.  This is to ensure\n    that the list of discovered tests is updated.  If this behavior is not\n    desired (as may be the case while actually writing the test cases), this\n    option can be used to prevent the dependency from being added.\n\n  ``TEST_LIST outVar``\n    The variable named by ``outVar`` will be populated in the calling scope\n    with the list of discovered test cases.  This allows the caller to do\n    things like manipulate test properties of the discovered tests.\n\n  .. code-block:: cmake\n\n    include(GoogleTest)\n    add_executable(FooTest FooUnitTest.cxx)\n    gtest_add_tests(TARGET      FooTest\n                    TEST_SUFFIX .noArgs\n                    TEST_LIST   noArgsTests\n    )\n    gtest_add_tests(TARGET      FooTest\n                    EXTRA_ARGS  --someArg someValue\n                    TEST_SUFFIX .withArgs\n                    TEST_LIST   withArgsTests\n    )\n    set_tests_properties(${noArgsTests}   PROPERTIES TIMEOUT 10)\n    set_tests_properties(${withArgsTests} PROPERTIES TIMEOUT 20)\n\n  For backward compatibility, the following form is also supported::\n\n    gtest_add_tests(exe args files...)\n\n  ``exe``\n    The path to the test executable or the name of a CMake target.\n  ``args``\n    A ;-list of extra arguments to be passed to executable.  The entire\n    list must be passed as a single argument.  Enclose it in quotes,\n    or pass ``\"\"`` for no arguments.\n  ``files...``\n    A list of source files to search for tests and test fixtures.\n    Alternatively, use ``AUTO`` to specify that ``exe`` is the name\n    of a CMake executable target whose sources should be scanned.\n\n  .. code-block:: cmake\n\n    include(GoogleTest)\n    set(FooTestArgs --foo 1 --bar 2)\n    add_executable(FooTest FooUnitTest.cxx)\n    gtest_add_tests(FooTest \"${FooTestArgs}\" AUTO)\n\n.. command:: gtest_discover_tests\n\n  Automatically add tests with CTest by querying the compiled test executable\n  for available tests::\n\n    gtest_discover_tests(target\n                         [EXTRA_ARGS arg1...]\n                         [WORKING_DIRECTORY dir]\n                         [TEST_PREFIX prefix]\n                         [TEST_SUFFIX suffix]\n                         [NO_PRETTY_TYPES] [NO_PRETTY_VALUES]\n                         [PROPERTIES name1 value1...]\n                         [TEST_LIST var]\n    )\n\n  ``gtest_discover_tests`` sets up a post-build command on the test executable\n  that generates the list of tests by parsing the output from running the test\n  with the ``--gtest_list_tests`` argument.  Compared to the source parsing\n  approach of :command:`gtest_add_tests`, this ensures that the full list of\n  tests, including instantiations of parameterized tests, is obtained.  Since\n  test discovery occurs at build time, it is not necessary to re-run CMake when\n  the list of tests changes.\n  However, it requires that :prop_tgt:`CROSSCOMPILING_EMULATOR` is properly set\n  in order to function in a cross-compiling environment.\n\n  Additionally, setting properties on tests is somewhat less convenient, since\n  the tests are not available at CMake time.  Additional test properties may be\n  assigned to the set of tests as a whole using the ``PROPERTIES`` option.  If\n  more fine-grained test control is needed, custom content may be provided\n  through an external CTest script using the :prop_dir:`TEST_INCLUDE_FILES`\n  directory property.  The set of discovered tests is made accessible to such a\n  script via the ``<target>_TESTS`` variable.\n\n  The options are:\n\n  ``target``\n    Specifies the Google Test executable, which must be a known CMake\n    executable target.  CMake will substitute the location of the built\n    executable when running the test.\n\n  ``EXTRA_ARGS arg1...``\n    Any extra arguments to pass on the command line to each test case.\n\n  ``WORKING_DIRECTORY dir``\n    Specifies the directory in which to run the discovered test cases.  If this\n    option is not provided, the current binary directory is used.\n\n  ``TEST_PREFIX prefix``\n    Specifies a ``prefix`` to be prepended to the name of each discovered test\n    case.  This can be useful when the same test executable is being used in\n    multiple calls to ``gtest_discover_tests()`` but with different\n    ``EXTRA_ARGS``.\n\n  ``TEST_SUFFIX suffix``\n    Similar to ``TEST_PREFIX`` except the ``suffix`` is appended to the name of\n    every discovered test case.  Both ``TEST_PREFIX`` and ``TEST_SUFFIX`` may\n    be specified.\n\n  ``NO_PRETTY_TYPES``\n    By default, the type index of type-parameterized tests is replaced by the\n    actual type name in the CTest test name.  If this behavior is undesirable\n    (e.g. because the type names are unwieldy), this option will suppress this\n    behavior.\n\n  ``NO_PRETTY_VALUES``\n    By default, the value index of value-parameterized tests is replaced by the\n    actual value in the CTest test name.  If this behavior is undesirable\n    (e.g. because the value strings are unwieldy), this option will suppress\n    this behavior.\n\n  ``PROPERTIES name1 value1...``\n    Specifies additional properties to be set on all tests discovered by this\n    invocation of ``gtest_discover_tests``.\n\n  ``TEST_LIST var``\n    Make the list of tests available in the variable ``var``, rather than the\n    default ``<target>_TESTS``.  This can be useful when the same test\n    executable is being used in multiple calls to ``gtest_discover_tests()``.\n    Note that this variable is only available in CTest.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Non-keyword syntax, convert to keyword form\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# The non-keyword syntax allows the first argument to be an arbitrary\n\n# executable rather than a target if source files are also provided. In all\n\n# other cases, both forms require a target.\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Parameterized tests have a different signature for the filter\n",
        "Line" : 292,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Make sure tests disabled in GTest get disabled in CTest\n",
        "Line" : 304,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Add the disabled test if CMake is new enough\n\n# Note that this check is to allow backwards compatibility so this\n\n# module can be copied locally in projects to use with older CMake\n\n# versions\n",
        "Line" : 306,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Define rule to generate test list for aforementioned test executable\n",
        "Line" : 364,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set name of our tests include file\n",
        "Line" : 399,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Have we processed this directory yet?\n",
        "Line" : 405,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# If not, remove any old all_tests.cmake...\n",
        "Line" : 411,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# ...and set directory GTEST_TEST_INCLUDE_FILE\n",
        "Line" : 413,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Ensure that our discovered tests will be processed\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# If TEST_INCLUDE_FILE was previously set, include the previously specified\n\n# file in our own include file\n",
        "Line" : 422,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set directory TEST_INCLUDE_FILE\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Add tests to current directory's all_tests list\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "###############################################################################\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "CMake/future/3.10/GoogleTestAddTests.cmake" : {
      "ObjectId" : "40de9e6eb631ed6f29fd35477cb6968e7026f440",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run test executable to get list of available tests\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parse output\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip header\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do we have a module name or a test name?\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Module; remove trailing '.' to get just the name...\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Test name; strip spaces and comments to get just the name...\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# ...and add to script\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Create a list of all discovered tests, which users may use to e.g. set\n\n# properties on the tests\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Write CTest script\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/kwiver-cmake-future.cmake" : {
      "ObjectId" : "59d664b62ef344b4a5857d3b47a9c5c1aa810e3c",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-configcheck.cmake" : {
      "ObjectId" : "73e3a61666b07e808d6c41806dc7d1a12bb335ab",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Checks compiler configuration and features available\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++11 is required\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# See if demangle API is supported\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/kwiver-depends-Boost.cmake" : {
      "ObjectId" : "a9f91c307b449fae5e99449a7815f75b9bb2dcea",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required Boost external dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "####\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-Burn-Out.cmake" : {
      "ObjectId" : "95e9d099acd9bf4281fc03038007df6530217ed4",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure CUDA dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-CUDA.cmake" : {
      "ObjectId" : "49e1eebb3b37e3f696d179d6037f89631e840872",
      "LastModified" : "2019-01-29T21:57:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure CUDA dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-Ceres.cmake" : {
      "ObjectId" : "f7ea900de455d6be265a6093b58046171ec73fb8",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure Ceres dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-Eigen.cmake" : {
      "ObjectId" : "f7d80b27764e59f4f1cd9cf3ee50070f22b6f074",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required Eigen external dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-GDAL.cmake" : {
      "ObjectId" : "4111fd654de14e71e3e3693dfa873d9b4aeb5602",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure GDAL dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need to build the file in a line-by-line fashon because of\n\n# portability with end of line markers.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-Matlab.cmake" : {
      "ObjectId" : "ca9cc3952f8a593045bdd4f5b6e28954611501af",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Find Matlab\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provides  ${Matlab_ENG_LIBRARY}\n\n# Provides  ${Matlab_MX_LIBRARY}\n\n# Provides  ${Matlab_LIBRARIES}\n\n#include_directories( \"${Matlab_INCLUDE_DIRS}\" )\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-OpenCV.cmake" : {
      "ObjectId" : "399ff451e379b8c7b293fe011f6644b6296c9f5e",
      "LastModified" : "2018-08-21T11:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure OpenCV dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-OpenMP.cmake" : {
      "ObjectId" : "3b9a2458ad3dc98f1c50fdc9f62e352c97eea8e8",
      "LastModified" : "2019-01-29T21:57:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally enable OpenMP\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenMP is somewhat broken on macOS and not easily supported until\n\n# CMake 3.12+ is a minimum requirement of KWIVER\n\n# https://cliutils.gitlab.io/modern-cmake/chapters/packages/OpenMP.html\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-PROJ.cmake" : {
      "ObjectId" : "02e3c859e1298579723caa51f70ab7f6a0fed627",
      "LastModified" : "2019-01-29T21:57:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure PROJ dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fletch provides the PROJ4 symbols. We need the PROJ symbols.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-Qt.cmake" : {
      "ObjectId" : "4ea5af032f156894f80f4b0832db166dc6a8e4d6",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure Qt dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-TinyXML.cmake" : {
      "ObjectId" : "d0b28abb1077688afa90e2bbbcf87cbff69e0d35",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if track_oracle is enabled, need to find TinyXML\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-VXL.cmake" : {
      "ObjectId" : "9cb136daa60053f9f458ea90cfc961991eb048e4",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optional find and confgure VXL dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-VisCL.cmake" : {
      "ObjectId" : "7ea7876a8160f941e7ef00d15b45a6ca9c718915",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optionally find and configure VisCL dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-ZeroMQ.cmake" : {
      "ObjectId" : "4dc3416af23ac1b2b152bf721a4d0f910c7b6942",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Optionally find and configure ZeroMQ dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-darknet.cmake" : {
      "ObjectId" : "44fc6c2875a29dcae65327ed7c56b08570d75091",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# external dependency for darknet\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mark this as advanced until Darknet is provided by Fletch\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-ffmpeg.cmake" : {
      "ObjectId" : "06ab9c08e39643dc69a60a9065e74139395a305f",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optional find and confgure VXL dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-kpf.cmake" : {
      "ObjectId" : "859098504547538608983d0c3646d3cad9f9a79e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# external dependency for kpf i/o\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mark this as advanced\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-depends-log4cplus.cmake" : {
      "ObjectId" : "0cbcd16cf83da1642bddde821684e09cd6063e08",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Optionally find and configure log4cplus\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-depends-log4cxx.cmake" : {
      "ObjectId" : "ad2bcc5e6c86c997956c2fd2a2622a0445379d3d",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Optionally find and configure log4cxx\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not supported by all platforms, so this is an advanced option\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find_package (ApacheRunTime REQUIRED)\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# unset ( ApacheRunTime_FOUND       CACHE )\n\n# unset ( ApacheRunTime_INCLUDE_DIR CACHE )\n\n# unset ( ApacheRunTime_LIBRARY     CACHE )\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "CMake/kwiver-depends-uuid.cmake" : {
      "ObjectId" : "baa27ab3a174217ace2544c0696dd8629917e67b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Optionally find uuid library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mark as advanced until UUID is provided in Fletch\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Need some version of uuid library.\n\n# This is not optimal way of enabling/disabling UUID\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CMake/kwiver-depends.cmake" : {
      "ObjectId" : "bb2dafd74ee9cb3c0984e12789d6ea970cac71db",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Central location for KWIVER external dependency declaration and resolution\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Required for Vital\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optional for Vital (loggers)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Required for Sprokit and Track Oracle\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Required for Track Oracle\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Optional for Arrows\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CMake/kwiver-flags-clang.cmake" : {
      "ObjectId" : "56f015336f47bc0ed5385b82e79b0d8601ed716e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Compiler flags specific to use with clang++\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MacOS produces warnings with this flag and doesn't seem to need it\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-flags-gnu.cmake" : {
      "ObjectId" : "42dddbbebedef69d72615432c95023f5bf111469",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Compiler flags specific to use with GCC\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# linker shared object control flags\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General warnings\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Class warnings\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Pointer warnings\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Enumeration warnings\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Formatting warnings\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Casting warnings\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# TODO: Python triggers warnings with this\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Variable naming warnings\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Exception warnings\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Miscellaneous warnings\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "## only in debug mode/config\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# It seems as though the flag isn't detected alone.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "CMake/kwiver-flags-msvc.cmake" : {
      "ObjectId" : "74862ac7f81972bd622b47402495900742e56fcf",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Compiler flags specific to MSVC\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable deprication warnings for standard C and STL functions in VS2005 and\n\n# later.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Prevent namespace pollution\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# You must acknowledge that you understand MSVC\n\n# resolved a byte alignment issue in this compiler.\n\n# We get this due to using Eigen objects and\n\n# allocating those objects with make_shared\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "CMake/kwiver-flags.cmake" : {
      "ObjectId" : "fd6acc84b546c0b107878661e477f4858edc3c7d",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Encapsulation of flags that need to be set for KWIVER under different\n\n# circumstances.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# a copy of our custom flags\n",
        "Line" : 19,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 2
    },
    "CMake/kwiver-install-utils.cmake" : {
      "ObjectId" : "6929ac5f8a21b63cb38d21f160ecbb790c2d93d3",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Installation logic for kwiver CMake utilities\n\n#\n\n# Variables that modify function:\n\n#\n\n#   kwiver_cmake_install_dir\n\n#     - Directory to install files to\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/kwiver-setup-python.cmake" : {
      "ObjectId" : "75c3e0117527fafa9511e2340adcb77c1752cb5b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Finds the python binaries, libs, include, and site-packages paths\n\n#\n\n# The purpose of this file is to export variables that will be used in\n\n# kwiver/CMake/utils/kwiver-utils-python.cmake and\n\n# kwiver/sprokit/conf/sprokit-macro-python.cmake (the latter will eventually be\n\n# consolidated into the former)\n\n#\n\n# User options defined in this file:\n\n#\n\n#    KWIVER_PYTHON_MAJOR_VERSION\n\n#      The major python version to target (either 2 or 3)\n\n#\n\n#\n\n# Calls find_packages to on python interpreter/libraries which defines:\n\n#\n\n#    PYTHON_EXECUTABLE\n\n#    PYTHON_INCLUDE_DIR\n\n#    PYTHON_LIBRARY\n\n#    PYTHON_LIBRARY_DEBUG\n\n#\n\n# Exported variables used by python utility functions are:\n\n#\n\n#    PYTHON_VERSION\n\n#      the major/minor python version\n\n#\n\n#    PYTHON_ABI_FLAGS\n\n#      Python abstract binary interface flags (used internally for defining\n\n#      subsequent variables, but settable by the user as an advanced setting)\n\n#\n\n#    python_site_packages\n\n#      Location where python packages are installed relative to your python\n\n#      install directory. For example:\n\n#        Windows system install: Lib\\site-packages\n\n#        Debian system install: lib/python2.7/dist-packages\n\n#        Debian virtualenv install: lib/python3.5/site-packages\n\n#\n\n#    python_sitename\n\n#      The basename of the python_site_packages directory. This is either\n\n#      site-packages (in most cases) or dist-packages (if your python was\n\n#      configured by a debian package manager). If you are using a python\n\n#      virtualenv (you should be) then this will be site-packages\n\n#\n\n#    kwiver_python_subdir\n\n#      basename of the python lib folder (that contains site-packages).\n\n#      Depends on the python major/minor version and the ABI flags\n\n#      (e.g. python2.7, python3.5m)\n\n#\n\n#    kwiver_python_output_path\n\n#      The location in the build tree to copy/symlink python modules Depends on\n\n#      the value of `kwiver_python_subdir`.\n\n#      (e.g. build/lib/python2.7, build/lib/python3.5m)\n\n#\n\n#    sprokit_python_output_path\n\n#      Similar to `kwiver_python_output_path`. Used by sprokit to define extra\n\n#      python output paths. This may be removed in the future.\n\n#      (e.g. build/lib)\n\n#\n\n#    boost_python_library_var\n\n#      Set to either Boost_PYTHON_LIBRARY or Boost_PYTHON3_LIBRARY.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Private helper function to execute `python -c \"<cmd>\"`\n\n#\n\n# Runs a python command and populates an outvar with the result of stdout.\n\n# Be careful of indentation if `cmd` is multiline.\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove supurflous newlines (artifacts of print)\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "###\n\n# Python major version user option\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Respect the PYTHON_VERSION_MAJOR version if it is set\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n# Detect major version change (part1)\n\n#\n\n# Clear cached variables when the user changes major python versions.\n\n# When this happens, we need to re-find the bin, include, and libs\n\n#\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# but dont clobber initial settings in the instance they are specified via\n\n# commandline (e.g  cmake -DPYTHON_EXECUTABLE=/my/special/python)\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "###\n\n#\n\n# Mark the previous version so we can determine when python versions change\n\n#\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###\n\n# Python interpreter and libraries\n\n#\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# note, 3.4 is a minimum version\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "###\n\n# Python site-packages\n\n#\n\n# Get canonical directory for python site packages (relative to install\n\n# location).  It varys from system to system.\n\n#\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Current usage determines most of the path in alternate ways.\n\n# All we need to supply is the '*-packages' directory name.\n\n# Customers could be converted to accept a larger part of the path from this function.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###\n\n# Python major/minor version\n\n#\n\n# Use the executable to find the major/minor version.\n\n# If you want to change this, then change the executable.\n\n#\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# assert that the right python version was found\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "###\n\n# Python ABI Flags\n\n#\n\n# See PEP 3149 - ABI (application binary interface) version tagged .so files\n\n# https://www.python.org/dev/peps/pep-3149/\n\n#\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# In python 3, we can determine what the ABI flags are\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Not sure if ABI flags are easilly found (or are even used in python2)\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "###\n\n# PyBind11\n\n#\n\n#\n\n#\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###\n\n# Python package build locations\n\n#\n\n# defines paths used to determine where the kwiver/sprokit/vital python\n\n# packages will be generated in the build tree. (TODO: python modules should\n\n# use a setup.py file to install themselves to the right location)\n\n#\n\n#set(kwiver_python_subdir \"python${PYTHON_VERSION}${PYTHON_ABIFLAGS}\")\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Instead of contructing the directory with ABIFLAGS just use what python gives us\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Currently needs to be separate because sprokit may have CONFIGURATIONS that\n\n# are placed between lib and `kwiver_python_subdir`\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "###\n\n# Status string for debugging\n\n#\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "CMake/kwiver-setup-scripts.cmake" : {
      "ObjectId" : "ed3e29ab9a0a2fa69f21356502aeb8f36bfee236",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Configure setup scripts.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create initial setup shell script\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create initial setup batch script\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the bat to use when setting up a test\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# install set up script\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n# Install the basic logger properties file.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "CMake/kwiver-test-setup.cmake" : {
      "ObjectId" : "6266c165dec0a8e9a7c0a93979e7b38a761e0875",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Script to set up testing environment for kwiver components\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Output to a different directory and then use $<CONFIGURATION> in the\n\n# working path when generator expressions are supported in test properties.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This sets the data directory relative to the current \"tests\" directory\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/kwiver-utils.cmake" : {
      "ObjectId" : "167f116ef8d28ba0d1d526142c92a88fe72f6859",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER CMake utilities entry point\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# save this directory so we can find config helper\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/modules/FindPROJ4.cmake" : {
      "ObjectId" : "0f2994f4afa0b66f3093e263d85c48732264958b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find PROJ4 library components\n\n#\n\n# Sets:\n\n#   PROJ4_FOUND       to 0 or 1 depending on the result\n\n#   PROJ4_INCLUDE_DIR to directories required for using libproj4\n\n#   PROJ4_LIBRARY     to libproj4 and any dependent library\n\n#\n\n# If PROJ4_REQUIRED is defined, then a fatal error message will be generated if libproj4 is not found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# uses externally supplied path. Specifically CMAKE_PREFIX_PATH\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/tools/kwiver-configure-git-helper.cmake" : {
      "ObjectId" : "7be8f4c8a5162eb10d7851c3a01dff0349272b0a",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Take in a number of arguments and special arguments ``__OUTPUT_PATH__``,\n\n# ``__SOURCE_PATH__`` and ``__TEMP_PATH__``\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# There are TWO configures here on purpose. The second configure containing\n\n# the COPYONLY flag, only copies the file if the source and dest file are\n\n# different (equivalent to ``cmake -E copy_if_different``). This helps prevent\n\n# files from be touched during a forced configuration when none of the\n\n# contained information changed (prevents rebuilding of dependant targets).\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/tools/kwiver-configure-helper.cmake" : {
      "ObjectId" : "5d7ee879ed1e30a23fa9ce5a44f88d0ef7fc8227",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Take in a number of arguments and special arguments ``__OUTPUT_PATH__``,\n\n# ``__SOURCE_PATH__`` and ``__TEMP_PATH__``\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# There are TWO configures here on purpose. The second configure containing\n\n# the COPYONLY flag, only copies the file if the source and dest file are\n\n# different (equivalent to ``cmake -E copy_if_different``). This helps prevent\n\n# files from be touched during a forced configuration when none of the\n\n# contained information changed (prevents rebuilding of dependant targets).\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/utils/algorithm-utils-targets.cmake" : {
      "ObjectId" : "8fc33d5a54f799cf80236feab4b6fdffa7e9e589",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# ARROWS Target creation and installation support\n\n#\n\n# Variables that affect behavior of functions:\n\n#\n\n#   no_export\n\n#       if set, target will not be exported.\n\n#\n\n#   no_install\n\n#       If set, target will not be installed.\n\n#\n\n#   no_version\n\n#       If set, the target will not have version information added to it.\n\n#\n\n#   component\n\n#     If set, the target will not be installed under this component (the\n\n#     default is 'runtime').\n\n#\n\n#   library_subdir\n\n#     If set, library targets will be placed into the directory with this\n\n#     as a suffix. This is necessary due to the way some systems use\n\n#     CMAKE_BUILD_TYPE as a directory in the output path.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Global collection variables\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Top-level target for plugin targets\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#+\n\n# Generate and add a plug-in library based on another library\n\n#\n\n#   algorithms_create_plugin(base_lib [args ...])\n\n#\n\n# The given base library must link against the core arrows library and provide\n\n# an implementation of the algorithm plugin interface class. If this has not\n\n# been done an error will occur at link time stating that the required class\n\n# symbol can not be found.\n\n#\n\n# This generates a small MODULE library that exposes the required C interface\n\n# function to be picked up by the algorithm plugin manager. This library is set\n\n# to install into the .../arrows subdirectory and adds a _plugin suffix to the\n\n# base library name.\n\n#\n\n# Additional source files may be specified after the base library if the\n\n# registration interface implementation is separate from the base library.\n\n#\n\n# Setting library_subdir or no_export before this function\n\n# has no effect as they are manually specified within this function.\n\n#-\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make a plugin from the supplied files. The name here is largely\n\n# irrelevant since they are discovered at run time.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# create module library given generated source, linked to given library\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Not adding link to known base library because if the base_lib isn't\n\n# linking against it, its either doing something really complex or doing\n\n# something wrong (most likely the wrong).\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# For each library linked to the base library, add the path to the library\n\n# to a list of paths to search later during fixup_bundle.\n\n# Recursively add paths for dependencies of these libraries which are targets.\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add to global collection variables\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "CMake/utils/kwiver-utils-configuration.cmake" : {
      "ObjectId" : "165b15503386f598b3614d6ee2deba66464675de",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Helper functions for CMake configuring files\n\n#\n\n# Variables that affect behavior:\n\n#\n\n#   no_configure_target\n\n#       If defined, configuration actions do not add explicit build targets.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Top level configuration target\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#+\n\n# Configure the given sourcefile to the given destfile\n\n#\n\n#   kwiver_configure_file( name sourcefile destfile [var1 [var2 ...]]\n\n#                         [DEPENDS ...] )\n\n#\n\n# Configure a sourcefile with a given name into the given destfile. Only the\n\n# given variables (var1, var2, etc.) will be considered for replacement during\n\n# configuration.\n\n#\n\n# This functions by generating custom configuration files for each call that\n\n# controls the configuration. Generated files are marked for cleaning.\n\n#\n\n# If \"no_configure_target\" is NOT set, this creates a target of the form\n\n# \"configure-<name>\" for this configuration step.\n\n#\n\n# Additional configuration dependencies may be set with the DEPENDS and are\n\n# passed to the underlying ``add_custom_command``.\n\n#\n\n# The special symbols ``__OUTPUT_PATH__``, ``__TEMP_PATH__``, and\n\n# ``__SOURCE_PATH__`` are reserved by this method for additional configuration\n\n# purposes, so don't use them as configuration variables in the file you are\n\n# trying to configure.\n\n#-\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# touch this status file to force the configuration to always run\n\n# this is needed so that Git will run and detect repository state\n\n# changes\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# also clean the intermediate generated file\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This passes if not defined or a false-evaluating value\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Addding source for IDE purposes\n",
        "Line" : 86,
        "CharPositionInLine" : 28
      },
      "7" : {
        "Text" : "###\n\n#\n\n# Mimics a `kwiver_configure_file`, but will symlink `source` to `dest`\n\n# directly without any configureation. This should only be used for interpreted\n\n# languages like python to prevent the need to re-make the project after making\n\n# small changes to these interpreted files.\n\n#\n\n# SeeAlso:\n\n#     kwiver/CMake/utils/kwiver-utils-python.cmake\n\n#     kwiver/sprokit/conf/sprokit-macro-configure.cmake\n\n#\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If our target it not a symlink, then remove it so we can replace it\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Need to ensure the directory exists before we create a symlink there\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# This passes if not defined or a false-evaluating value\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Adding source for IDE purposes\n",
        "Line" : 137,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 12
    },
    "CMake/utils/kwiver-utils-doxygen.cmake" : {
      "ObjectId" : "ad3410715f56db7f91f8187d4f62ec81209d1abd",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Setup and define KWIVER Doxygen support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#+\n\n# Register a directory to have Doxygen generate documentation.\n\n#\n\n#   kwiver_create_doxygen(name input_dir [tagdep1 [tagdep2 ...]]\n\n#                          [DISPLAY_NAME name]\n\n#                          [VERSION_NUMBER ver])\n\n#\n\n# Create documentation via Doxygen over the given inputdir. The name given is\n\n# used to create the build targets. 'tagdep' arguments should be names of\n\n# other documentation sets (i.e. module names) this set depends on.\n\n#\n\n# Optional argument DISPLAY_NAME sets the name of the project to display.\n\n#\n\n# Optional argument VERSION_NUMBER sets the version number to display.\n\n#\n\n# If Doxygen was not found, this method does nothing as documentation cannot\n\n# be built, period.\n\n#-\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Constants -- could be moved outside this function?\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# current project specific variables\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# fallback to the project name if no display name is given\n",
        "Line" : 56,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Build up tag file and target dependency lists\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Make creating a tag for a docset depend on the completion of the\n\n# entirety of its dependency docset, not just its tags (causes some\n\n# race conditions if just tags).\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Make sure the output directory exists\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Configuring template files and linking known target names\n\n# Make sure targets get made, else this can't connect the dependency chain\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Doxygen generation targets\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# top-level target doxygen project generation\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "CMake/utils/kwiver-utils-flags.cmake" : {
      "ObjectId" : "01c3ee05e306244c16bf44b3f1c37e05e34db2d8",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Function to check validity of compiler flags. If flag is accepted,\n\n# then it is added to the global property.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Helper function for adding compiler flags\n\n# if a list of flags is supplied, the first valid flag is added\n\n# This is useful if you are looking for the highest level of compiler support\n\n# (-std=c++11  -std=c++0x) will set the flag for the highest level of support.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/utils/kwiver-utils-modules.cmake" : {
      "ObjectId" : "3cd1fd76671fa3a13922d90ebe0159cfd412c4dd",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Utility macros and functions dealing with KWIVER modules\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add a directory as a named module.\n\n#\n\n#   kwiver_add_module(name directory [OPTIONAL]\n\n#                    [DEPENDS module1 [module2 ...]])\n\n#\n\n# Register a module to be built. This module must be named in order to\n\n# associate references. Names must be unique across added modules. A module\n\n# may be labeled as OPTIONAL, creating an ENABLE/DISABLE flag for the module\n\n# (disabled by default). Modules may also depend on other modules. This does\n\n# not affect build dependencies, but ensures that the listed modules are\n\n# enabled.\n\n#\n\n# The intended purpose for modules is ... (what is a module? How does\n\n# it differ from a library?) Would this be like adding arrows? or arrows/core?\n\n#\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parsing args\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# else this isn't an optional module, so turn it on!\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check that name is unique among modules registered so far\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Check that each dep is in module enable list\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# suppresses an optional module's enable flag from appearing if we failed above check\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "CMake/utils/kwiver-utils-msvc.cmake" : {
      "ObjectId" : "2fc9267fc900d08fd9dcb36d1e7f363a657262a2",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#define_property(GLOBAL PROPERTY kwiver_msvc_env\n\n#  BRIEF_DOCS \"Values set by setup environment batch files\"\n\n#  FULL_DOCS \"All environment variables needed for running executables through msvc.\"\n\n#  )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#+\n\n# Create a variable with the windows environment for use in MSVC\n\n#\n\n# SETUP_BATCH_FILES is a list of batch scripts on disk to process\n\n#\n\n# Each batch file will be read in and each 'set' of an environment variable\n\n# will be extracted and reformed with the proper values for MSVC\n\n#\n\n# This logic will ignore 'config' variables as that is generally\n\n# used in batch files to signal the build type folder to use in batch scripts\n\n#-\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Addresses problems with the use of IN_LIST below\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#message(STATUS \"Extracting environment from ${setup_batch}\")\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Convert file contents into a CMake list\n\n# Where each element in the list is one line of the file\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Ignore comments (:: and rem)\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Ignore the set config line (a kwiver idiom)\n",
        "Line" : 50,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Is this line setting an env variable?\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#message(STATUS \"I cleaning ${line}\")\n\n# The line format is\n\n# set SOMETHING = VALUE\n\n# So we need to make a 'map' of variable names and their list of values\n\n# Lots of string index manipulation to get the right indexes to chop of 'set' and '=' strings\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# what are we setting?\n",
        "Line" : 70,
        "CharPositionInLine" : 51
      },
      "10" : {
        "Text" : "# what are we setting it to?\n",
        "Line" : 71,
        "CharPositionInLine" : 59
      },
      "11" : {
        "Text" : "# replace batch terms with msvc terms\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# check for any recursive sets\n\n# such as PATH=%something%;%PATH% <-- remove the %PATH%\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# remove recursive sets\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#message(STATUS \"I am setting ${_var} to ${_val}\")\n\n# Keep track of setting the same variable over and over\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# if a recursive variable was found append values, else replace\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Consolidate setting env variables into one line\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#message(STATUS \"processing ${_env_var}\")\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Remove semi-colons at the end of lines\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(STATUS \"Setting MSVC environment to ${MSVC_ENV}\")\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Now loop over all the executable we made and provide a vcxproj file for them\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#message(STATUS \"Create msvc files for these executables : ${executables}\")\n\n# Loop over our 2 lists of the same length at the same time\n\n# So go from 0 to length-1\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# split the exe into name and binary dir\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#message(STATUS \"Setting MSVC environment for ${exe} in ${exe_binary_dir}\")\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 24
    },
    "CMake/utils/kwiver-utils-python.cmake" : {
      "ObjectId" : "1fa2f32f9357f9735fd388e77f852bf4ecc1b7d7",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Python functions for the kwiver project\n\n# The following functions are defined:\n\n#\n\n#   kwiver_add_python_library\n\n#   kwiver_add_python_module\n\n#   kwiver_create_python_init\n\n#\n\n# The following variables may be used to control the behavior of the functions:\n\n#\n\n#   copyright_header\n\n#     The copyright header to place at the top of generated __init__.py files.\n\n#\n\n#   python_both_arch\n\n#     If set, __init__.py file is created for both the archful and pure-Python\n\n#     module paths (if in doubt, you probably don't need this; it's necessary\n\n#     to support CPython and pure Python kwiver plugins).\n\n#\n\n# Their syntax is:\n\n#\n\n#   kwiver_add_python_library(name modpath [source ...])\n\n#     Builds and installs a library to be used as a Python module which may be\n\n#     imported. It is built as a shared library, installed (use no_install to\n\n#     not install the module), placed into the proper subdirectory but not\n\n#     exported. Any other control variables for kwiver_add_library are\n\n#     available.\n\n#\n\n#   kwiver_add_python_module(name modpath module)\n\n#     Installs a pure-Python module into the 'modpath' and puts it into the\n\n#     correct place in the build tree so that it may be used with any built\n\n#     libraries in any build configuration.\n\n#\n\n#   kwiver_create_python_init(modpath [module ...])\n\n#     Creates an __init__.py package file which imports the modules in the\n\n#     arguments for the package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Global collection variables\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Issues arise with the msvc compiler with some projects where it cannot\n\n# compile bindings without the optimizer expanding some inline functions (i.e. debug builds)\n\n# So always have the optimizer expand the inline functions in the python bindings projects\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "###\n\n#\n\n# kwiver_add_python_module(path modpath module)\n\n#\n\n# Installs a pure-Python module into the 'modpath' and puts it into the\n\n# correct place in the build tree so that it may be used with any built\n\n# libraries in any build configuration.\n\n#\n\n# Args:\n\n#     path: Path to the python source (e.g. kwiver_process.py)\n\n#     modpath: Python module path (e.g. kwiver/processes)\n\n#     module: Python module name. This is the name used to import the code.\n\n#         (e.g. kwiver_process)\n\n#\n\n# SeeAlso:\n\n#     kwiver/CMake/utils/kwiver-utils-configuration.cmake\n\n#     ../../sprokit/conf/sprokit-macro-python.cmake\n\n#     ../../vital/bindings/python/vital/CMakeLists.txt\n\n#     ../../sprokit/processes/bindings/python/kwiver/CMakeLists.txt\n\n#     ../../sprokit/processes/bindings/python/kwiver/util/CMakeLists.txt\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# installation path for this module\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# copy and configure the source file into the binary directory\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# install the configured binary to the kwiver python install path\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# this looks recursive\n",
        "Line" : 178,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "###\n\n#   kwiver_create_python_init(modpath [module ...])\n\n#\n\n#     Creates an __init__.py file for a core package which imports the modules\n\n#     in the arguments for the package.\n\n#\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Abolute import is generated only when ARGN is used\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Check for the string before appending\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Installation __init__\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "CMake/utils/kwiver-utils-sphinx.cmake" : {
      "ObjectId" : "3b325513a2b440f17678be260391fb85e43d2811",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Setup and define KWIVER sphinx support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/utils/kwiver-utils-targets.cmake" : {
      "ObjectId" : "36729a23a06a486e5719eb21586bdf108bb2cfd5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER Target creation and installation support\n\n#\n\n# Variables that affect behavior of functions:\n\n#\n\n#   no_export\n\n#       if set, target will not be exported.\n\n#\n\n#   no_install\n\n#       If set, target will not be installed.\n\n#\n\n#   no_version\n\n#       If set, the target will not have version information added to it.\n\n#\n\n#   component\n\n#     If set, the target will not be installed under this component (the\n\n#     default is 'runtime').\n\n#\n\n#   library_subdir\n\n#     If set, library targets will be placed into the directory within the install\n\n#     directory. This is necessary due to the way some systems use\n\n#     CMAKE_BUILD_TYPE as a directory in the output path.\n\n#\n\n#   library_subdir_suffix\n\n#     If set, the suffix will be appended to the subdirectory for the target.\n\n#     This is placed after the CMAKE_BUILD_TYPE subdirectory if necessary.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Global collection variables\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#+\n\n# Helper function to manage export string string generation and the no_export\n\n# flag.\n\n#\n\n# Sets the variable \"exports\" which should be expanded into the install\n\n# command.\n\n#-\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#+\n\n# Wrapper around install(...) that catches ``no_install`` if set\n\n#\n\n#   kwiver_install([args])\n\n#\n\n# All args given to this function are passed directly to install(...),\n\n# provided ``no_install`` is not set. See CMake documentation for\n\n# install(...) usage.\n\n#-\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#+\n\n# Add an executable to KWIVER\n\n#\n\n#   kwiver_add_executable(name [args...])\n\n#\n\n# All args given to this function are passed to CMake's add_executable(...)\n\n# function after providing the name, so refer to CMake's documentation for\n\n# additional valid arguments.\n\n#\n\n# This function will add the executable to the set of targets to be exported\n\n# unless ``no_export`` was set.\n\n#-\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add to global collection variable\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#+\n\n# Add a library to KWIVER\n\n#\n\n#   kwiver_add_library(name [args...])\n\n#\n\n# Remaining arguments passed to this function are given to the underlying\n\n# add_library call, so refer to CMake documentation for additional arguments.\n\n#\n\n# Library version will be set to that of the current PROJECT version.\n\n#\n\n# This function will add the library to the set of targets to be exported\n\n# unless \"no_export\" was set.\n\n#\n\n# An export header will be created unless \"no_export_header\" is set.\n\n#-\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# optional versioning\n",
        "Line" : 183,
        "CharPositionInLine" : 26
      },
      "9" : {
        "Text" : "# LIB_SUFFIX should only apply to installation location, not the build\n\n# locations that properties above this point pertain to.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#+\n\n#   kwiver_export_targets(file [APPEND])\n\n#\n\n# Export all recorded KWIVER targets to the given file in the build tree. If\n\n# there are no targets recorded, this is a no-op. APPEND may be give to tell\n\n# us to append to the given file instead of overwriting it.\n\n#-\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#message(STATUS \"Adding to file to clean: ${file}\")\n\n#set_directory_properties(\n\n#  PROPERTIES\n\n#    ADDITIONAL_MAKE_CLEAN_FILES \"${file}\"\n\n#  )\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#+\n\n#   kwiver_install_headers(header1 [header2 ...] [SUBDIR dir])\n\n#\n\n# Install KWIVER public header files to include/kwiver/...\n\n#\n\n# A SUBDIR may be provided in order to place the header files in a\n\n# subdirectory under that. This path must be relative.\n\n#\n\n# NOPATH can be specified to ignore leading path components on the\n\n# files being installed. This is useful when installing CMake\n\n# generated export headers\n\n#\n\n# If the file name has a leading path component, it is appended to the\n\n# install path to allow installing of headers in subdirectories.\n\n#-\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# use empty subdir/path to file\n",
        "Line" : 291,
        "CharPositionInLine" : 22
      },
      "14" : {
        "Text" : "# for IDE support\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#+\n\n# Add files to the private header source group\n\n#\n\n#   kwiver_private_header_group(file1 [file2 ...])\n\n#\n\n#-\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#+\n\n# Add files to the private template group\n\n#\n\n#   kwiver_private_template_group(file1 [file2 ...])\n\n#\n\n#-\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "####\n\n# This function creates a target for a loadable plugin.\n\n#\n\n# Options are:\n\n# SOURCES - list of source files needed to create the plugin.\n\n# PUBLIC - list of libraries the plugin will publically link against.\n\n# PRIVATE - list of libraries the plugin will privately link against.\n\n# SUBDIR - subdirectory in \"lib\" where plugin will be installed.\n\n#\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# put plugins in this subdir\n",
        "Line" : 352,
        "CharPositionInLine" : 44
      },
      "19" : {
        "Text" : "# do not export this product\n",
        "Line" : 355,
        "CharPositionInLine" : 22
      },
      "20" : {
        "Text" : "# do not version plugins\n",
        "Line" : 356,
        "CharPositionInLine" : 23
      },
      "21" : {
        "Text" : "# Add to global collection variable\n",
        "Line" : 372,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "####\n\n# This function adds the supplied paths to the default set of paths\n\n# searched at **runtime** for modules.\n\n#\n\n# Uses the global option KWIVER_USE_CONFIGURATION_SUBDIRECTORY\n\n# to control adding config specific directories to the path.\n\n#\n\n# Options are:\n\n# SUBDIR - subdirectory in lib where plugin will be installed.\n\n#\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "####\n\n# This macro creates the module directory for the plugin loader based\n\n# on current system and other options. The resulting directory string\n\n# is placed in the \"kwiver_module_path_result\" variable. Note that the\n\n# result may be more than one path.\n\n#\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Other Unix systems\n",
        "Line" : 408,
        "CharPositionInLine" : 10
      },
      "25" : {
        "Text" : "###\n\n# This macro creates a symbolic link from source file to dest file.\n\n#\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "CMake/utils/kwiver-utils-tests.cmake" : {
      "ObjectId" : "17a9ac9442e0c80e7e184abd0f7fcbf5518b3112",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test functions for the kwiver project\n\n# The following functions are defined:\n\n#\n\n#   kwiver_declare_test\n\n#   kwiver_build_test\n\n#   kwiver_add_test\n\n#   kwiver_discover_tests\n\n#   kwiver_discover_gtests\n\n#\n\n# The following variables may be used to control the behavior of the functions:\n\n#\n\n#   KWIVER_TEST_ADD_TARGETS\n\n#     A boolean flag which, if true, adds targets to the build to run the tests\n\n#     in groupings. This is added to the cache as an advanced variable.\n\n#\n\n#   kwiver_test_output_path\n\n#     Where to place test binaries and expect to find them. This must be set.\n\n#\n\n#   kwiver_test_working_path\n\n#     The directory to run tests in. This must be set.\n\n#\n\n#   kwiver_test_runner\n\n#     A top-level executable (possibly with arguments) to run the main\n\n#     test-name executable under. As an example, for any tests which are\n\n#     Python, this should be set to ${PYTHON_EXECUTABLE} since Python files by\n\n#     themselves are not executable on all platforms. For c++ test this symbol\n\n#     is left empty since the test is already executable.\n\n#\n\n#\n\n# Their syntax is:\n\n#\n\n#   kwiver_declare_test(name)\n\n#     Declares a test grouping. Use this when a test is not built using\n\n#     kwiver_build_test.\n\n#\n\n#   kwiver_build_test(name libraryvar [source ...])\n\n#     Builds a test and declares the test as well. The library passed as\n\n#     libraryvar should contain the list of libraries to link.\n\n#\n\n#   kwiver_add_test(name instance [arg ...])\n\n#     Adds a test to run. This runs the executable test-${name} with the\n\n#     arguments ${instance} ${ARGN}. If enabled, it adds a target named\n\n#     test-${name}-${instance} to be run by the build if wanted.\n\n#\n\n#   (RECOMMENDED)\n\n#   kwiver_discover_tests(group libraries file [arg1 [arg2 ...]])\n\n#     Discovers tests declared within the specified ``file`` (test names must\n\n#     be alphanumeric), defining a test target executable that under the given\n\n#     ``group`` name. The executable generated will be linked against the\n\n#     given ``libraries``. Additional arguments and are eventually passed to\n\n#     the ``add_test()`` call under the hood.\n\n#\n\n#   (RECOMMENDED)\n\n#   kwiver_discover_gtests(group name [SOURCES source ...]\n\n#                         [LIBRARIES library ...]\n\n#                         [ARGUMENTS arg ...])\n\n#     Build a test executable that uses Google Test. Tests are discovered and\n\n#     registered automatically. If no sources are listed, guesses that the\n\n#     source file is named ``test_<name>.cxx``. ``LIBRARIES`` may be used to\n\n#     specify a list of libraries that the executable needs to link. Test names\n\n#     will be prefixed with ``group``.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: How to get CTest the full path to the test with config subdir?\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#    set_tests_properties(test-${name}-${instance}\n\n#      PROPERTIES\n\n#      REQUIRED_FILES \"${kwiver_test_output_path}/${CMAKE_CFG_INTDIR}/test-${name}\")\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ------------------------------------------------------------------\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note that this does not handle comments well\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# -----------------------------------------------------------------------------\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "CMakeLists.txt" : {
      "ObjectId" : "adbe389e323a494d537111a25270a4f0d206904e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Top level build script for kwiver-build\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# KWIVER version\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This policy is new in CMake 3.12. The NEW behavior uses the <PackageName>_ROOT variable in\n\n# find_package(<PackageName>) calls.\n\n# See: https://cmake.org/cmake/help/git-stage/policy/CMP0074.html\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n# Look for and use Fletch to find dependencies\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search for libraries in the fletch install root\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "###\n\n# project specific directories\n\n##\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# root directories\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# kwiver module config file.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# prepend our CMake resources\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# import CMake future modules\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ===========================================================================================\n\n# project global includes\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include vital internal headers for private use only\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# kwiversys includes are generated in the binary directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ===========================================================================================\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ===========================================================================================\n\n###\n\n# User options\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if sprokit enabled\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## TODO: How should pytgon and c lib interact?\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# =========================================================================================\n\n###\n\n# KWIVER CMake config\n\n#\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set directories where loadable modules are stored.\n\n# These subdirs are under .../lib/\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##\n\n# System specific compiler flags\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##\n\n# check compiler support\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set the name for our package export\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "###\n\n# External Dependencies and Modules - Most Will be supplied by Fletch\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "###\n\n# Configure setup scripts\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# define which boost we are using\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ===========================================================================================\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ===========================================================================================\n\n###\n\n# Add tests if enabled\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# needed for compatibility with kwiversys\n",
        "Line" : 197,
        "CharPositionInLine" : 28
      },
      "28" : {
        "Text" : "# =============================================================================================\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "###\n\n# Generate vital/version.h. This file is needed by sprokit so must be generated here, before sprokit is included\n\n#---------------------------------------------------------------------\n\n#\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Use Git (if available) to add Git hash info to the version header\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "###\n\n# include as the last subdir\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Generate files to inform msvc of the kwiver runtime environment\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Setup .bat scripts need to be complete and on disk\n",
        "Line" : 264,
        "CharPositionInLine" : 26
      },
      "34" : {
        "Text" : "#############################################################################################\n\n# Marking source root for documentation generation\n\n#\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#############################################################################################\n\n# Top level installation\n\n#\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Install rules for CMake utilities\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Prepare space-separated list of library names for config\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# setup general paths to includes and libs for packages we use/provide\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# since we have fletch, add include and lib dirs to export\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Configure install-tree CMake config file and export associated targets file\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "###\n\n# link compile commands to root of source tree\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# link file to root of source tree\n",
        "Line" : 333,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# ===========================================================================================\n\n# CPack Packaging\n\n#\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#TODO: Define package dependencies\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 45
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "f87abe263362142b4a3fd208ded39c3277ab0eac",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/CMakeLists.txt" : {
      "ObjectId" : "f19932013fa164c8243e0ff342b852ef4c6407fd",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Arrows Algorithms CMake file\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Base plug-in with default implementations\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add Ceres plugin if enabled\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add OpenCV plugin if enabled\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add PROJ plugin if enabled\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add Qt plugin if enabled\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add VXL plugin if enabled\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Super3D depends on VXL\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add super3d plugin if enabled\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Add VisCL plugin if enabled\n\n#  needs VXL\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# if matlab is enabled\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# if darknet is enabled\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if burnout is enabled\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# if kpf is enabled\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# if GDAL is enabled\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if uuid is enabled\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# if python is enabled\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# if FFMPEG is enabled\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "arrows/burnout/CMakeLists.txt" : {
      "ObjectId" : "3fe9b3acdaf5600267944e6a6fc9d24a475c3a05",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build/install plugin for burnout CNN support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/ceres/CMakeLists.txt" : {
      "ObjectId" : "195f0e2146416293968fdc131e14d53eb042ec46",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin containing Ceres algorithm implementations + support\n\n# structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/ceres/tests/CMakeLists.txt" : {
      "ObjectId" : "3fa2f45e69fc93641066433dbe0d073cafa183a1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we need to link tests to GLog becuase they instantiate Ceres templates which\n\n# use GLog.  If Ceres was built with MiniGlog, link to ceres instead to get\n\n# MiniGlog symbols.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################\n\n# Algorithms Ceres tests\n\n##############################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "arrows/core/CMakeLists.txt" : {
      "ObjectId" : "cf41ec8ee755d2c4e44c4cb74c52cfcf2e3d7192",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install Plugin containing core algorithm implementations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Address MSVC fatal error C1128:\n\n# number of sections exceeded object file format limit\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "arrows/core/applets/CMakeLists.txt" : {
      "ObjectId" : "950d8259c2d2bc1ca5acdffeb28cf1c308321825",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake file for the arrows.core.applets\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Add our plugin path to the default list\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Add path to applets so plugin loader can find them\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n# Add applet plugin\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "arrows/core/tests/CMakeLists.txt" : {
      "ObjectId" : "9f828c36629ae5bf3ab3ef20c0e2df15c3350458",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms core plugin tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/cuda/CMakeLists.txt" : {
      "ObjectId" : "d3ad0140afb4f816a5007b17583a2783a5d196c6",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arrows/darknet/CMakeLists.txt" : {
      "ObjectId" : "df23f8325125ab3d23bfa24a38f1f9c6a82f600e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build/install plugin for darknet CNN support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if darknet was built with the GPU support\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# needed by darknet detector\n",
        "Line" : 28,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : "# needed by darknet detector\n",
        "Line" : 33,
        "CharPositionInLine" : 42
      },
      "4" : {
        "Text" : "# Visual Studio links to a static lib of darknet due to the pthread dependency\n\n# So we need to add all libraries to this arrow, if darknet was a dll, we would\n\n# not have this issue, but we need pthreads and it likes static for some reason\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  add_subdirectory(tests)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "arrows/dbow2/CMakeLists.txt" : {
      "ObjectId" : "367f9488719cef8fed34027cc68cd67df3dca7c1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin containing DBoW2 algorithm implementations + support\n\n# structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if (KWIVER_ENABLE_TESTS)\n\n#   add_subdirectory(tests)\n\n# endif()\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "arrows/ffmpeg/CMakeLists.txt" : {
      "ObjectId" : "2157deebd0b1f60adf1e82ad15b7165b993aee03",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin containing ffmpeg algorithm implementations + support\n\n# structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/ffmpeg/tests/CMakeLists.txt" : {
      "ObjectId" : "3f593c1e18d14b0eed8174b87aa67a25cfe90fd1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms ffmpeg tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/gdal/CMakeLists.txt" : {
      "ObjectId" : "f13e9d4b6c0952f68afc38c7abc7525127e1a652",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin containing GDAL algorithm implementations + support\n\n# structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/gdal/tests/CMakeLists.txt" : {
      "ObjectId" : "e4bf74cf423be9200a39dc9d678255bc5e30e60e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms GDAL tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/kpf/CMakeLists.txt" : {
      "ObjectId" : "0d1f91b40bd62223d8bbaa74911e62679d058dcc",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build/install plugin for kpf support for vital objects\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Python Support?\n\n#if( KWIVER_ENABLE_PYTHON )\n\n#  kwiver_create_python_init( kwiver/arrows/kpf )\n\n#\n\n#  kwiver_add_python_module( ${CMAKE_CURRENT_SOURCE_DIR}/generate_headers.py\n\n#    kwiver/arrows/kpf\n\n#    generate_headers )\n\n#endif()\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "arrows/kpf/yaml/CMakeLists.txt" : {
      "ObjectId" : "f4afebe2e30787fdee6aa2e1ab038159d58f8033",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KPF parsing\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/kpf/yaml/tests/CMakeLists.txt" : {
      "ObjectId" : "4b7910496205c3849cc28e437bf67648b6a6aaf5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arrows/matlab/CMakeLists.txt" : {
      "ObjectId" : "665f1cd1cea4932976038e8657653d016778da9c",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# CMake file for matlab bindings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/matlab/tests/CMakeLists.txt" : {
      "ObjectId" : "60f10504cd5e3b89e725c5171b33cb3ff2d492f6",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms Matlab tests\n\n##############################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/ocv/CMakeLists.txt" : {
      "ObjectId" : "4ca22f252a717fc8c05a4a7568b05090690d4eb1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin containing OpenCV algorithm implementations + support\n\n# structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/ocv/tests/CMakeLists.txt" : {
      "ObjectId" : "ae7ff94e4e923cce5c77feb423372c927ec11f80",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms OpenCV tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/proj/CMakeLists.txt" : {
      "ObjectId" : "371a8ffab606d5779ac241dab728b324ef8d923e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# algorithms/proj\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/python/CMakeLists.txt" : {
      "ObjectId" : "ca29b4dfb443efa46905df2482588ed16d8b3479",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arrows/qt/CMakeLists.txt" : {
      "ObjectId" : "bee1d7c23f8d0fd18337b1669412c3746aa671a9",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin containing Qt support structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/qt/tests/CMakeLists.txt" : {
      "ObjectId" : "509f0922529528ebbb8ca0b7c8e2ff07fddba1be",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms Qt tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/serialize/CMakeLists.txt" : {
      "ObjectId" : "2518228ed6a1109edfccc79efc3b4b57261f15b4",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin for serialization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/serialize/json/CMakeLists.txt" : {
      "ObjectId" : "37729434e10a5195394a6143ea6e97ecc6805f98",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin for serialization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/serialize/json/tests/CMakeLists.txt" : {
      "ObjectId" : "3fddcd6cd1d38dbd870c3702390ff8059137e85e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# JSON tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/serialize/protobuf/CMakeLists.txt" : {
      "ObjectId" : "ef1eaf0529cc8eb7b4f392539da439f223a04ce5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin for serialization\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Need to add this include file to the compile because of a defficiency in the protobuf\n\n# compiler. The compiler has the option to insert an export macro into class definitions\n\n# but has no way of defining that macro. as of libprotoc 2.6.1 this is the accepted way\n\n# of defining the export symbols.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "arrows/serialize/protobuf/tests/CMakeLists.txt" : {
      "ObjectId" : "7a65e23687a48162b4683854f4e1b6eb859d3368",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# PROTOBUF tests\n\n##############################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/super3d/CMakeLists.txt" : {
      "ObjectId" : "bda4c38bed2d39693ab6035f1baf6997d6341a95",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arrows/uuid/CMakeLists.txt" : {
      "ObjectId" : "485d8aad709e6f8028e667fa3f0343558f6ccbdd",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install Plugin containing UUID algorithm implementations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/uuid/tests/CMakeLists.txt" : {
      "ObjectId" : "f8f78061e0ceb0e58e6184bf65908ed67e6e855e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms uuid plugin tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/viscl/CMakeLists.txt" : {
      "ObjectId" : "68d8a2f0756fd564bb875d751ad906e0fff7fcf6",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / install plugin containing VisCL algorithm implementations + support\n\n# structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##+ temp\n",
        "Line" : 4,
        "CharPositionInLine" : 20
      },
      "2" : {
        "Text" : "## add_subdirectory(tests)\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "arrows/vxl/CMakeLists.txt" : {
      "ObjectId" : "509e26130c27b67f1403b41a5590e3b1244aadf5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build / Install plugin containing VXL algorithm implementations + support\n\n# structures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arrows/vxl/tests/CMakeLists.txt" : {
      "ObjectId" : "631cef5bba8bc8611973abb2cb84f4e235f51af4",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Algorithms VXL tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This test is really for an algorithm in core, but it's here\n\n# because the test depends on availability of VXL sub-algorithms\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/manuals/Makefile" : {
      "ObjectId" : "81cd5d6126e04af0fc9bdd6532b476cac488cacc",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "ef03069d6d31d0ce4848d6373e4b7b32bf1af9fa",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure all the local example pipe files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/cpp/CMakeLists.txt" : {
      "ObjectId" : "7a9c7163d2de042ae9599454efa3b29785243587",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/kpf/CMakeLists.txt" : {
      "ObjectId" : "bbdd4438071fdc2d88f5a6385a5459f7bfeb2257",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/external/CMakeLists.txt" : {
      "ObjectId" : "71676a1533c65aa1beca8d6f2b23eaf8ae026881",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# External Data\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Any large examples that we need to pull from Girder\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/external/darknet.cmake" : {
      "ObjectId" : "e8bf7adb0ce070fac8e9b6ed6e38eff79bb66240",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make it so user needs to manually pull the data\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extras/CMakeLists.txt" : {
      "ObjectId" : "06b9f207ace31f1ae3f15577ca251978946cae8d",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Extras\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add common include directories to be made available for extras\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "extras/RightTrack/CMakeLists.txt" : {
      "ObjectId" : "ae8cfc28dde6d152777160d7a1137a4dc29a5ce4",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# RightTrack plugin\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Should use find module for this, but RightTrack needs to be upgraded.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "extras/process_instrumentation/CMakeLists.txt" : {
      "ObjectId" : "9079bc4cdcbd5b34e42eaff541ba6797e2e45693",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# process instrumentation plugins\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n#     plugins for plugin explorer\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sprokit/CMakeLists.txt" : {
      "ObjectId" : "0fe06d6a1ee11c14653fa2da26c9a3fee523dbc8",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##?++  temp needed until new macros are used\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Copy options from KWIVER\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## set(sprokit_output_dir         \"${sprokit_binary_dir}\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we need to know if python is enabled\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## TODO replace sprokit macros with kwiver macros if possible\n\n# Sprokit macros\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Support functions.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### TODO This will not work without going to root directory\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Project setup.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "sprokit/CTestConfig.cmake" : {
      "ObjectId" : "711338aa3d310222ad62373ac147b0bb5cf2cb90",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/cmake/snippets/configuration.cmake" : {
      "ObjectId" : "30add68b9e9f1073f8696d3c71ea0e98f2512b8c",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add defines for code that care about configuration types.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_compile_options(\n\n#  \"SPROKIT_CONFIGURATION=\\\"$<CONFIGURATION>\\\"\"\n\n#  \"SPROKIT_CONFIGURATION_L=L\\\"$<CONFIGURATION>\\\"\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# XXX(cmake): 2.8.12\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "sprokit/cmake/snippets/dist.cmake" : {
      "ObjectId" : "9cfbfc9c6d5c404e959a21647b1a34511592f105",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/cmake/snippets/groups.cmake" : {
      "ObjectId" : "68ab20bc2983008dff68f58c9021526abf39a1ec",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set up source groups.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/cmake/support/doxygen.cmake" : {
      "ObjectId" : "04febd95c0075a9598ee46921dce7d66aa1dc3ef",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Doxygen functions for the sprokit project\n\n# The following functions are defined:\n\n#   sprokit_create_doxygen\n\n# Their syntax is:\n\n#   sprokit_create_doxygen(inputdir name [tagdep...])\n\n#     The first argument is the directory to use as the input directory for\n\n#     doxygen. The targets `doxygen-${name}-dir', `doxygen-${name}-doxyfile',\n\n#     `doxygen-${name}-tag', and `doxygen-${name}' will be created. All\n\n#     `tagdep' arguments will be added as dependencies.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Doxyfile.common.in contains sprokit specific stuff\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "sprokit/cmake/support/pkgconfig.cmake" : {
      "ObjectId" : "63509b9045fe0a1b84a69923a4a46f7dcb078ab5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/cmake/support/test.cmake" : {
      "ObjectId" : "cd2d286c1a71da938c3fbe08162419a3136118b5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/conf/CMakeLists.txt" : {
      "ObjectId" : "723906b619d3f644d63d1efa3738b5602b883cc1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure the warning and code coverage suppression file\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Configure dashboard script\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Configure the CMake EXPORT file during installation\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## sprokit_configure_pkgconfig(sprokit)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "sprokit/conf/sprokit-macro-configure.cmake" : {
      "ObjectId" : "11475f4fa5540bbaebc448d77d6764cf7f1871d5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure functions for the sprokit project\n\n# The following functions are defined:\n\n#\n\n#   sprokit_configure_file\n\n#   sprokit_configure_directory\n\n#\n\n# The following variables may be used to control the behavior of the functions:\n\n#\n\n#   sprokit_configure_extra_dests\n\n#     A list of other paths to configure the file into.\n\n#\n\n#   sprokit_configure_cmake_args\n\n#     Extra arguments to pass to CMake when running the generated script.\n\n#\n\n# Their syntax is:\n\n#\n\n#   sprokit_configure_file(name source dest [variable ...])\n\n#     The first argument is the name of the file being configured. The\n\n#     next two parameters are the source and destination paths of the file to\n\n#     be configured. Any variables that need to be replaced in the file\n\n#     should be passed as extra arguments. The file will be added to the\n\n#     list of files to be cleaned.\n\n#\n\n#   sprokit_configure_directory(name sourcedir destdir)\n\n#     Configures an entire directory from ${sourcedir} into ${destdir}. Add\n\n#     a dependency on the configure-${name} to ensure that it is complete\n\n#     before another target.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n#\n\n# Mimics a sprokit_configure_file_w_uid, but will symlink `source` to `dest`\n\n# directly without any configureation. This should only be used for interpreted\n\n# languages like python to prevent the need to re-make the project after making\n\n# small changes to these interpreted files.\n\n#\n\n# TODO: this should be eventually replaced by `kwiver_symlink_file`. Either the\n\n# kwiver version should take a uid, or the uid is not necessary.\n\n#\n\n# SeeAlso:\n\n#     kwiver/CMake/utils/kwiver-utils-configuration.cmake\n\n#\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If our target it not a symlink, then remove it so we can replace it\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Need to ensure the directory exists before we create a symlink there\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "###\n\n# Mirrors sprokit_configure_file. Simply calls sprokit_symlink_file_w_uid with\n\n# the name being the uid\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "sprokit/conf/sprokit-macro-fixes.cmake" : {
      "ObjectId" : "17e42ae0d40625dc64c3baf01181d03cc917d343",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fixes functions for the sprokit project\n\n# The following functions are defined:\n\n#\n\n#   sprokit_use_fixes\n\n#\n\n# Their syntax is:\n\n#\n\n#   sprokit_use_fixes([name ...])\n\n#     Set up future targets to use fixes for Boost used in sprokit.\n\n#     Does not affect parent directories. If called without arguments, all\n\n#     known fixes are used.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/conf/sprokit-macro-python-tests.cmake" : {
      "ObjectId" : "7df31c99276779c4fcb4f0c4b7ee2edd014529df",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions for registering python tests\n\n# The following functions are defined:\n\n#\n\n#     sprokit_build_python_test\n\n#     sprokit_add_python_test\n\n#     sprokit_discover_python_tests\n\n#\n\n# The following variables may be used to control the behavior of the functions:\n\n#\n\n#     The same variables described in ./sprokit-macro-tests.cmake\n\n#         of these `sprokit_test_runner` should be set to some command that\n\n#         runs a python script in\n\n#         kwiver/sprokit/tests/bindings/python/CMakeLists.txt\n\n#\n\n# For specific usage see documentation bellow\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n#\n\n# Registers a python tests and configures it to the ctest bin directory.\n\n#\n\n# Args:\n\n#     group: A key that will point to the input file.\n\n#     input: filename of the test .py file\n\n#\n\n# Notes:\n\n#     The input file is typically the group with the prefix `test-` and the\n\n#     suffix `.py. In other words: `input=\"test-%s.py\" % group`.\n\n#\n\n# SeeAlso:\n\n#     sprokit-macro-tests.cmake\n\n#     sprokit-macro-python.cmake\n\n#     sprokit-macro-configure.cmake\n\n#     ..cmake/support/test.cmake\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Registers a \"built\" python test with ctest\n\n#\n\n# Arg:\n\n#     group: a group key previously registered with `sprokit_build_python_test`\n\n#     instance: the name of the function to be tested.\n\n#\n\n# In most cases you should call sprokit_discover_python_tests instead.  The\n\n# only exception is if you must paramaterizations via the commandline.\n\n# Currently only `test-run` does this. In the future this will be removed in\n\n# favor of pytest paramaterization.\n\n#\n\n# SeeAlso:\n\n#     sprokit/tests/bindings/python/sprokit/pipeline/CMakeLists.txt - uses this func\n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n#\n\n# Searches test .py files for functions that begin with \"test\" and creates a\n\n# separate `ctest` for each.\n\n#\n\n# Arg:\n\n#     group: the test is registered with this ctests group\n\n#     file: filename of the test .py file (includes the extension)\n\n#\n\n# Notes:\n\n#     The `group` argument is typically the name of the module being tested\n\n#     The `file` argument is the actual name of the python file to be tested, which\n\n#     typically looks like `test-<group>.py`\n\n#\n\n# SeeAlso:\n\n#     kwiver/CMake/utils/kwiver-utils-python-tests.cmake - defines kwiver_discover_python_tests\n\n#     kwiver/sprokit/tests/bindings/python/sprokit/pipeline/CMakeLists.txt - uses this function\n\n#\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NOTE: most of this logic can be replaced by\n\n# `parse_python_testables` when PR #302 lands\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "sprokit/conf/sprokit-macro-python.cmake" : {
      "ObjectId" : "4464f2576ea03393d567cb5f8ed57fd9476dae6b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Python functions for the sprokit project\n\n# The following functions are defined:\n\n#\n\n#   sprokit_add_python_module\n\n#   sprokit_create_python_init\n\n#   sprokit_create_python_plugin_init\n\n#\n\n# The following variables may be used to control the behavior of the functions:\n\n#\n\n#   copyright_header\n\n#     The copyright header to place at the top of generated __init__.py files.\n\n#\n\n# Their syntax is:\n\n#\n\n#   sprokit_add_python_module(name modpath module)\n\n#     Installs a pure-Python module into the 'modpath' and puts it into the\n\n#     correct place in the build tree so that it may be used with any built\n\n#     libraries in any build configuration.\n\n#\n\n#   sprokit_create_python_init(modpath [module ...])\n\n#     Creates an __init__.py package file which imports the modules in the\n\n#     arguments for the package.\n\n#\n\n#   sprokit_create_python_plugin_init(modpath)\n\n#     Creates an __init__.py for use as a plugin package (packages for sprokit\n\n#     plugins written in Python must use one of these files as the package\n\n#     __init__.py file and added to the SPROKIT_PYTHON_MODULES environment\n\n#     variable).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Global collection variables\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n#\n\n# SeeAlso:\n\n#     kwiver/CMake/utils/kwiver-utils-python.cmake\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use shorter (but less descript) paths due to 260 char limit on directories on windows\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Force installation of the test into the tests module\n\n# FIXME: (there was a merge conflict between sprokit_install/install, which\n\n# should this be?)\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "###\n\n# Creates a default __init__.py file for a plugin package in the build\n\n# directory.\n\n#\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "sprokit/conf/sprokit-macro-targets.cmake" : {
      "ObjectId" : "b969157a330009f5835f9b0fa3603b877a153dc5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Target management functions for the sprokit project.\n\n# The following functions are defined:\n\n#\n\n#   sprokit_install\n\n#\n\n# The following variables may be used to control the behavior of the functions:\n\n#\n\n#   kwiver_export_name\n\n#     The export target name for installed targets. This is the name used for\n\n#     install(EXPORT ...) calls\n\n#\n\n#   no_export\n\n#     If set, the target will not be exported. See the CMake documentation for\n\n#     what exporting a target means.\n\n#\n\n#   no_install\n\n#     If set, the target will not be installed.\n\n#\n\n#   library_subdir\n\n#     If set, targets will be placed into the directory with this as a suffix.\n\n#     This is necessary due to the way that systems which use the\n\n#     CMAKE_BUILD_TYPE as a directory in the output.\n\n#\n\n#   library_subdir_suffix\n\n#     If set, the suffix will be appended to the subdirectory for the target.\n\n#     This is placed after the CMAKE_BUILD_TYPE subdirectory if necessary.\n\n#\n\n#   component\n\n#     If set, the target will not be installed under this component (the\n\n#     default is 'runtime').\n\n#\n\n#   sprokit_output_dir\n\n#     The base directory to output all targets into.\n\n#\n\n# Their syntax is:\n\n#\n\n#   sprokit_export_targets(file [APPEND])\n\n#     Write target exports to 'file'.\n\n#\n\n#   sprokit_install([args])\n\n#     A wrapper around the install call which recognizes the 'no_install'\n\n#     variable.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n#\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "sprokit/conf/sprokit-macro-tests.cmake" : {
      "ObjectId" : "7391cbb94c801d45099eb43e61a613713f4330e8",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test functions for the sprokit project\n\n# The following functions are defined:\n\n#\n\n#   sprokit_declare_test\n\n#   sprokit_build_test\n\n#   sprokit_add_test\n\n#\n\n# The following variables may be used to control the behavior of the functions:\n\n#\n\n#   SPROKIT_TEST_ADD_TARGETS\n\n#     A boolean flag which, if true, adds targets to the build to run the tests\n\n#     in groupings. This is added to the cache as an advanced variable.\n\n#\n\n#   sprokit_test_output_path\n\n#     Where to place test binaries and expect to find them. This must be set.\n\n#\n\n#   sprokit_test_working_path\n\n#     The directory to run tests in. This must be set.\n\n#\n\n#   sprokit_test_runner\n\n#     A top-level executable (possibly with arguments) to run the main\n\n#     test-name executable under. As an example, for any tests which are\n\n#     Python, this should be set to ${PYTHON_EXECUTABLE} since Python files by\n\n#     themselves are not executable on all platforms.\n\n#\n\n# Their syntax is:\n\n#\n\n#   sprokit_declare_test(name)\n\n#     Declares a test grouping. Use this when a test is not built using\n\n#     sprokit_build_test.\n\n#\n\n#   sprokit_build_test(name libraryvar [source ...])\n\n#     Builds a test and declares the test as well. The library passed as\n\n#     libraryvar should contain the list of libraries to link.\n\n#\n\n#   sprokit_add_test(name instance [arg ...])\n\n#     Adds a test to run. This runs the executable test-${name} with the\n\n#     arguments ${instance} ${ARGN}. If enabled, it adds a target named\n\n#     test-${name}-${instance} to be run by the build if wanted.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: How to get CTest the full path to the test with config subdir?\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "sprokit/extra/CMakeLists.txt" : {
      "ObjectId" : "ba6bc3861ef610e24ae0f3796fd0eadc629eecf9",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/extra/dist/snap-script.cmake" : {
      "ObjectId" : "93020070d4b92fcfb0dc793b0711ca32e3aa6267",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/extra/vim/CMakeLists.txt" : {
      "ObjectId" : "b2913c23e937a0ac9d2113bf726d0b301c22c1fa",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/processes/CMakeLists.txt" : {
      "ObjectId" : "9a3055e1775664ddcb719820bf5f5c04c4c21153",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Kwiver processes\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This policy is new in CMake 3.12. The NEW behavior uses the <PackageName>_ROOT variable in\n\n# find_package(<PackageName>) calls.\n\n# See: https://cmake.org/cmake/help/git-stage/policy/CMP0074.html\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for generated files\n\n# for trait support files\n",
        "Line" : 13,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : "#\n\n# This may need some enable flags as we start to support other\n\n# transports that require support libraries such as zeromq.\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  add_subdirectory(caffe)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n#     plugins for plugin explorer\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "sprokit/processes/adapters/CMakeLists.txt" : {
      "ObjectId" : "d108f15dc84dd3ec631e440db0fd74938a8d8dc3",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER adapter processes\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# library components\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Make external interface library\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n# process components\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n# make processes plugin\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n# add epx_test plugin\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "sprokit/processes/adapters/tests/CMakeLists.txt" : {
      "ObjectId" : "55556cf569a377cced45341532a1b35248128d5d",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############################\n\n# adapter process tests\n\n#############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FIXME: This test probably isn't in the right location\n\n#       but keeping it here makes the deps work out correctly.\n\n#       Previously the test was in sprokit, but required processes to be enabled.\n\n#       That is a less intuative sequence since sprokit doesn't require processes.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sprokit/processes/bindings/CMakeLists.txt" : {
      "ObjectId" : "e2455293c41e79ef9e526deeb87a1e01700390c8",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# requires python\n",
        "Line" : 8,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 2
    },
    "sprokit/processes/bindings/c/CMakeLists.txt" : {
      "ObjectId" : "bcb1d3818c070a7c182aafb8205913b98aa29f20",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# C interface library for Kwiver access\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for generated files\n",
        "Line" : 16,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 2
    },
    "sprokit/processes/bindings/python/CMakeLists.txt" : {
      "ObjectId" : "acc306ee2ab772f080c4d71b12f4736f4f2de5c0",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Kwiver python bindings\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/bindings/python/kwiver/CMakeLists.txt" : {
      "ObjectId" : "0a68acb4a1cbf845e4a8a89596a4c9d35d983a67",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#kwiver_add_python_module( ${CMAKE_CURRENT_SOURCE_DIR}/__init__.py\n\n#  kwiver\n\n#  __init__ )\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/core/CMakeLists.txt" : {
      "ObjectId" : "6de91c064fd789642f24993eb5b8fd3e8eade401",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER processes\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/examples/CMakeLists.txt" : {
      "ObjectId" : "5efda7300e8ee60b6214ad58e0db1b5cdae8c89b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory( call_SMQTK_pipeline )\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "sprokit/processes/examples/call_SMQTK_pipeline/CMakeLists.txt" : {
      "ObjectId" : "3845355323cb447c736888008548d5dc83ea74a6",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake file for callable sprokit pipeline\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/examples/call_SMQTK_pipeline/fletch-precache.cmake" : {
      "ObjectId" : "3c38382e41cfdf25508c77b7b68658f26d24232e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Precache settings for building fletch to support the SMQTK/C++ Bridge\n\n#\n\n# Selects required modules\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/examples/call_SMQTK_pipeline/kwiver-precache.cmake" : {
      "ObjectId" : "59c477cc198f8b74de855593cace273b43cf7233",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Precache settings for building kwiver to support the SMQTK/C++ Bridge\n\n#\n\n# Selects required modules\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/examples/process_template/CMakeLists.txt" : {
      "ObjectId" : "c8334994ec9e1591dd97e8112c0181f5759db089",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake file for process template\n\n#\n\n##++ replace \"template\" with something more meaningful for your project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#++ uncomment the following line if the project has not already included the file.\n\n# include(kwiver-utils) # provides kwiver_* operations\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for generated files\n",
        "Line" : 25,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : "# for trait support files\n",
        "Line" : 26,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : "# needed for generated export header\n",
        "Line" : 28,
        "CharPositionInLine" : 49
      },
      "5" : {
        "Text" : "##++ Find any required packages. OpenCV is include here only as an example\n\n##++ If your process does not need OpenCV, delete the following code and\n\n##++ replace with what is needed.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##++ This builds a plugin containing the specified process(s)\n\n##++ Replace \"template_process\" with the desired name of the plugin file\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##++ The above kwiver_add_plugin operation generates a file \"template_processes_export.h\"\n\n##++ that defines the export related symbols needed in the source code.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "sprokit/processes/flow/CMakeLists.txt" : {
      "ObjectId" : "264d968372237cad5549d2758af605369dbff952",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/processes/matlab/CMakeLists.txt" : {
      "ObjectId" : "11aae5672a6fb97f605c18ccdb2249d58f87d106",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER processes that use matlab\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/ocv/CMakeLists.txt" : {
      "ObjectId" : "b010f316fa10b52af5fc7ac23e3f3d3c16c232c2",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER processes that use OpenCV\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/processes/python/CMakeLists.txt" : {
      "ObjectId" : "801e7f4aaf9771888fbd58863baaa73a3b654e30",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER processes\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add python processes here\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sprokit/processes/transport/CMakeLists.txt" : {
      "ObjectId" : "35dcbc15fec4598015edc0ffab4ca6c008842849",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/processes/vxl/CMakeLists.txt" : {
      "ObjectId" : "10dda446feb752b1c71dc4863fa460703c8fe224",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KWIVER processes\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/src/CMakeLists.txt" : {
      "ObjectId" : "7d8b16dd6774530e43fe64d88cd2b300a20289ba",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/src/bindings/CMakeLists.txt" : {
      "ObjectId" : "10343c243f930bf605d3fc70bc1e3a8c8b3d6936",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/CMakeLists.txt" : {
      "ObjectId" : "0dcb45d05e466f94eb7a6128e5319e98fadc21c9",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sprokit/src/bindings/python/processes/CMakeLists.txt" : {
      "ObjectId" : "134ab2c25ba2d692e759d0c67fd5696f59f22aff",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/processes/test/CMakeLists.txt" : {
      "ObjectId" : "8ef5091d0dcc019e9409e8c4e5b43aec211946bd",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/schedulers/CMakeLists.txt" : {
      "ObjectId" : "d0308357741a51921e2e6d940fdc7ad01951265e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/sprokit/CMakeLists.txt" : {
      "ObjectId" : "ef5579b85ff90e1861f932a4957f3143b6f3c758",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/sprokit/pipeline/CMakeLists.txt" : {
      "ObjectId" : "e3ffd362815b9b9a7802da1208f29572e09a6add",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/sprokit/pipeline_util/CMakeLists.txt" : {
      "ObjectId" : "1d7bcdad1d13765686253976f95666482f7a7d60",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  bake\n\n#  export_\n\n#  load)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/src/bindings/python/test/CMakeLists.txt" : {
      "ObjectId" : "762d9e250c8020bae886f8860563d29f4825d57f",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/test/python/CMakeLists.txt" : {
      "ObjectId" : "8cd8ed85d85ab636b3d5f56cb3cc57be4425dcd5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/bindings/python/test/python/modules/CMakeLists.txt" : {
      "ObjectId" : "637d11a61fb09cc0c19453f950b71bbd901bc0ae",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/fixes/CMakeLists.txt" : {
      "ObjectId" : "0bff72d304884ed9ffc780ab8cd0cde81beb701d",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install the fixes.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/src/fixes/tools.cmake" : {
      "ObjectId" : "ae60439f58cf5aba05263720c5cdc068c9bac89a",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# XXX(Boost): 1.50.0\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Override Boost's value_semantic.hpp\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "sprokit/src/processes/CMakeLists.txt" : {
      "ObjectId" : "71923c9c29f7c880e430225dcf3153f4e91a54df",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/processes/clusters/CMakeLists.txt" : {
      "ObjectId" : "af71a26d95c25bf4f29abcddb1dbb346461beba1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/processes/examples/CMakeLists.txt" : {
      "ObjectId" : "40fd1dc0abed442237c2561a10d3fa8f4a33ae7b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/processes/helpers/CMakeLists.txt" : {
      "ObjectId" : "630951b44dd4812571bd932608860ed05f593094",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/processes/helpers/functions/CMakeLists.txt" : {
      "ObjectId" : "fff4409d363e1b3bb43edbbae2f94ae837868d52",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/schedulers/CMakeLists.txt" : {
      "ObjectId" : "c7f1609d6ea930b308a662fbdcb5bef3932232e8",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# CMake file for building sprokit schedulers.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/src/schedulers/examples/CMakeLists.txt" : {
      "ObjectId" : "07775055751882510609a14d24cfe0bc69622840",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/sprokit/CMakeLists.txt" : {
      "ObjectId" : "6d6873937321ac324804f90da354f98a921c7727",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/src/sprokit/pipeline/CMakeLists.txt" : {
      "ObjectId" : "0e01304e335d3b898f3d3b8a3e00059ea7769f52",
      "LastModified" : "2019-04-12T21:18:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add all paths to the property\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# XXX(Boost): 1.50.0\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install export header\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "sprokit/src/sprokit/pipeline/thread_naming.cmake" : {
      "ObjectId" : "8de91b17d6585b78a6fbe0ba3220eb08dca4f1d2",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/sprokit/pipeline_util/CMakeLists.txt" : {
      "ObjectId" : "4ebf62eb9fae8726b17dbf16d72e9a503de2cd79",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install export header\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sprokit/src/sprokit/python/CMakeLists.txt" : {
      "ObjectId" : "28571dcb9eeea35e2e9514112d50bcb6cff906e4",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/sprokit/python/util/CMakeLists.txt" : {
      "ObjectId" : "e3dc6db5fa9539373a29fd13b7063562845b0eaf",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install export header\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "sprokit/src/sprokit/tools/CMakeLists.txt" : {
      "ObjectId" : "32a85a46a05830c1772388cf416494ecad2e8498",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/src/tools/CMakeLists.txt" : {
      "ObjectId" : "afffeb41d75b5be2cf22dfd91ed76527814be77a",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/tests/CMakeLists.txt" : {
      "ObjectId" : "2d67914587b7035bf67d07257a4af876e99fd78b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Output to a different directory and then use $<CONFIGURATION> in the\n\n# working path when generator expressions are supported in test properties.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "sprokit/tests/bindings/CMakeLists.txt" : {
      "ObjectId" : "1eb5794a356b5a677ac4efa13eec08961003b6e0",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/tests/bindings/python/CMakeLists.txt" : {
      "ObjectId" : "dd88ecd7817257ead418f69d8858be64401cd953",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Use \"$<CONFIGURATION>\" and remove chdir below when generator\n\n# expressions are supported in test properties.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include the python helper functions previously defined here\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sprokit/tests/bindings/python/modules/CMakeLists.txt" : {
      "ObjectId" : "dd3d68780afce349c6eba6e98c6676a89c9850df",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Module tests\n\n##############################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/tests/bindings/python/sprokit/CMakeLists.txt" : {
      "ObjectId" : "e49e09c6c3af5790768676173d28ef88110fd30b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/tests/bindings/python/sprokit/pipeline/CMakeLists.txt" : {
      "ObjectId" : "1742c9bb877b5fab7f42fcc1a0eee0888b590b85",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Simple testables require no pytest paramatarization\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Setup simple tests with no parameters\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# KWIVER_ENABLE_TESTS is always true for now (because we are in the test\n\n# subdir), but the python tests should be moved to the python source dir.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Register individual tests with ctest\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# SeeAlso:\n\n#     # defines sprokit_discover_python_tests\n\n#     sprokit/conf/sprokit-macro-python-tests.cmake\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "###\n\n# Setup tests with parameters\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "sprokit/tests/bindings/python/sprokit/pipeline_util/CMakeLists.txt" : {
      "ObjectId" : "5761bcd83c7f7ff97155c7540bd25502b4b03275",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For now this is always enabled (because we are in the test-dir)\n\n# but the goal is to move python tests into the python source dir soon\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "sprokit/tests/bindings/python/test/CMakeLists.txt" : {
      "ObjectId" : "c4c7a99a3d3cb386a784dfcce2745dbb3069210c",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/tests/sprokit/CMakeLists.txt" : {
      "ObjectId" : "d770a9ebefae4d8ddfec4ec930134dca01973016",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/tests/sprokit/pipeline/CMakeLists.txt" : {
      "ObjectId" : "c6d2163ee1257dabab6b4f7d5928914dda750866",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Datum tests\n\n##############################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################\n\n# Stamp tests\n\n##############################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################\n\n# Edge tests\n\n##############################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################\n\n# Modules tests\n\n##############################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Forcefully dump the plugin to the current binary directory.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "##############################\n\n# Process tests\n\n##############################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##############################\n\n# Process cluster tests\n\n##############################\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##############################\n\n# Scheduler tests\n\n##############################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##############################\n\n# Pipeline tests\n\n##############################\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##############################\n\n# Introspection tests\n\n##############################\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO C++ exceptions get lost in the Python glue code.\n\n#set(sprokit_test_environment \"PYTHONPATH=${test_python_path}\")\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##############################\n\n# Process registry tests\n\n##############################\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################\n\n# Scheduler registry tests\n\n##############################\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##############################\n\n# Running tests\n\n##############################\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "sprokit/tests/sprokit/pipeline_util/CMakeLists.txt" : {
      "ObjectId" : "5c87461aab5c46f5b349add8d33acb4129a52209",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sprokit/tests/sprokit/test/CMakeLists.txt" : {
      "ObjectId" : "a85eac921581c53c7a24d63a055c146914d77216",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "7c1625a5a2086af01ab5cfea2d9c8261df8de57b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#kwiver_apm\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "c23340e187e06135fa7b144f7325452249f14c68",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake file for the vital tools\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Add our plugin path to the default list\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Add path to applets so plugin loader can find them\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n#\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n# built the tool runner\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n# Add applet for tools plugin\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tools/pipeline_viewer/CMakeLists.txt" : {
      "ObjectId" : "e547c8ab39f903243e14696919734a013ddaefa7",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "track_oracle/CMakeLists.txt" : {
      "ObjectId" : "af84cc422d1c2d343c024b3b9b272f2fb546ad45",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## Core track_oracle\n\n##\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## file formats\n\n##\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## Can't build the event_adapter until we have vidtk event types\n\n## via vibrant\n\n##\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "track_oracle/aries_interface/CMakeLists.txt" : {
      "ObjectId" : "077b11c57e26ed8df6e947e138ddaa37cb80927d",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "track_oracle/core/CMakeLists.txt" : {
      "ObjectId" : "8576ae131ae0e8fdedb60d84f99c61df8eaa0ea6",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "track_oracle/data_terms/CMakeLists.txt" : {
      "ObjectId" : "616428996649cd628b689024aa595b17258f4dcd",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# track oracle data terms\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/example/CMakeLists.txt" : {
      "ObjectId" : "71df071d97b7e82bda1d1420d60543f3d1c047f8",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# example using the track oracle\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# example track reader\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# example track writer\n\n#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# example track schema introspection\n\n#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# example user-specified field manipulation\n\n#\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# test the xml tokenizer\n\n#\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# example KPF activity parser\n\n#\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "track_oracle/file_formats/CMakeLists.txt" : {
      "ObjectId" : "0ce9e53171a96078f6d2f68047018b3b3ff8517b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## format base\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/aoi_utils/CMakeLists.txt" : {
      "ObjectId" : "ddbb05fecfaa8737f89ec9158df20dc477a3e07c",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "track_oracle/file_formats/kpf_utils/CMakeLists.txt" : {
      "ObjectId" : "cd1d7b5409273c1cd541e4e229a4d494fa192562",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KPF track_oracle utilities\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_4676/CMakeLists.txt" : {
      "ObjectId" : "43c6f5aa4a74417e44fcaee87aec0421821d0204",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# STANAG 4676 tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_apix/CMakeLists.txt" : {
      "ObjectId" : "294f0e003563d27c9808b7287094c03aba06afc1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# APIX tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_comms_xml/CMakeLists.txt" : {
      "ObjectId" : "6ef0d1192aa64d8fa5f413d7f0e6a9d3b6546f83",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# comms XML tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_csv/CMakeLists.txt" : {
      "ObjectId" : "050188fc64f07a89b40663b1b36e037a1264872e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Generic CSV tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_e2at_callout/CMakeLists.txt" : {
      "ObjectId" : "fba54a5d28e22a2a8549e2d15253047162a5d11e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# e2at callouts\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_filter_kpf_activity/CMakeLists.txt" : {
      "ObjectId" : "648639b9a8b0640593e882dd1df8aa881470c039",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KPF activities\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_filter_kwe/CMakeLists.txt" : {
      "ObjectId" : "ae3d74211a9d6ff8f34477ee31acc7fb8c700342",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# kwe track filter\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_kpf_geom/CMakeLists.txt" : {
      "ObjectId" : "5629f7819bd611217bdc7746c0b2c6b9b5a0be66",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KPF geometry\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_kst/CMakeLists.txt" : {
      "ObjectId" : "db5d07ffdfcb87aadb15bb658a7c5ddedd8dce62",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# kst tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_kw18/CMakeLists.txt" : {
      "ObjectId" : "592299d06df76d9d3dd0223f4c15eec56222c1f2",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# kw18 tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_kwiver/CMakeLists.txt" : {
      "ObjectId" : "a0c7df72f748417a0c346e70e1a6562e57535d47",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# kwiver tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_kwxml/CMakeLists.txt" : {
      "ObjectId" : "feffd6f79cb58f4a981b7c2e97aae9059c8b18e8",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# kwxml tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_mitre_xml/CMakeLists.txt" : {
      "ObjectId" : "85f08bbf2a73996af85ab3770439b264657de000",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# mitre XML tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_scorable_mgrs/CMakeLists.txt" : {
      "ObjectId" : "22abce78aa61bede496137a2fabb523f2b62e7f1",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# the scorable MGRS schema.  Doesn't really exist as a separate track\n\n# file, but included here to simplify the template instances.\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## The scorable_mgrs object\n\n##\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## The corresponding data term\n\n##\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n\n## the track object\n\n##\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "track_oracle/file_formats/track_vatic/CMakeLists.txt" : {
      "ObjectId" : "f7a41d107770e926ce56991e771339fd38d71f18",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# vatic tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_vpd/CMakeLists.txt" : {
      "ObjectId" : "23e47bf3396c7655cf7d34cbe663dcd782850568",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# VIRAT Public Data track / events\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/file_formats/track_xgtf/CMakeLists.txt" : {
      "ObjectId" : "63c0436d412f795523aecfb380fe53ee8eb1655f",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# xgtf tracks\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/tests/CMakeLists.txt" : {
      "ObjectId" : "03eb2fc8e1d591abaa45f4ee19e1108cfd5faa04",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n##\n\n##\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "track_oracle/utils/CMakeLists.txt" : {
      "ObjectId" : "97ba542fef7e15a89f6f5cda6be9b5543b5e967f",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "track_oracle/vibrant_descriptors/CMakeLists.txt" : {
      "ObjectId" : "eacdd2d96e8420ac4b6c6961da8aa4edcb9df441",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vital/CMakeLists.txt" : {
      "ObjectId" : "702cc55b77d22c421c961d7ecdde87d5ab756b56",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Top level build for VITAL\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# KWSys\n\n#---------------------------------------------------------------------\n\n# Create the kwsys library for vital.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Save our custom CXX flags and reset so we pass no special flags to kwiversys.\n\n# Our flags are more strict than expected and causes many warnings and errors.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# force install to standard library directory\n\n# Note that some of the following duplicates what is in kwiver_add_library()\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# restore old CXX flags for our code.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ==================================================================\n\n###\n\n# These headers are installed\n\n#\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----------------------\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install export header\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###\n\n#\n\n# This option adds another directory to the path by appending the configuration type to\n\n# existing directories.\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Other Unix systems\n",
        "Line" : 244,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Build a default set of plugin path dirs\n\n# Provide that list as the default value for the path option.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# add all paths to the property\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# need to retrieve the GLOBAL PROPERTY kwiver_plugin_path and\n\n# formulate the default module path\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# convert list to path string using the system specific path separator\n\n# TODO: The following has a leading ':' that should not be there\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "###\n\n# configure our compiler options\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###\n\n#\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "###\n\n# Add tests if enabled\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "vital/algo/CMakeLists.txt" : {
      "ObjectId" : "255ce9f396fc1b05332da2e0f9106db68099fb07",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Build file for abstract algorithms\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==================================================================\n\n###\n\n# These headers are installed\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# install export header\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n#     plugins for plugin explorer\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "vital/bindings/CMakeLists.txt" : {
      "ObjectId" : "9a554de8d23b4e136b0161e44a55187aafc27d7e",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Bindings for VITAL\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vital/bindings/c/CMakeLists.txt" : {
      "ObjectId" : "7ad0dc62f86e9ad9ad73d8f6169588dec2c307fc",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C interface library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Created by CMake during configuration\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "vital/bindings/python/CMakeLists.txt" : {
      "ObjectId" : "cc0fcc8cb386121db45f88852fb8f513e36cf901",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# KWIVER Python interface support\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vital/bindings/python/vital/CMakeLists.txt" : {
      "ObjectId" : "a441bc13a8eea2667ec1953545e1f22be62a81e5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Python support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add python modules\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##+ do we really need this (maptk application)\n",
        "Line" : 22,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 3
    },
    "vital/bindings/python/vital/algo/CMakeLists.txt" : {
      "ObjectId" : "3a37547f53edfdcc97fcdd0beff5c3a5a6e64536",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vital/bindings/python/vital/algo/py/CMakeLists.txt" : {
      "ObjectId" : "a35660534b402621d48a7b35b0cf4c3d7de253c7",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Python support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add python modules\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#kwiver_add_python_module( ${CMAKE_CURRENT_SOURCE_DIR}/__init__.py\n\n#vital/algo\n\n#__init__ )\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "vital/bindings/python/vital/bin/CMakeLists.txt" : {
      "ObjectId" : "b60568725cd919bdb1c4b4f08258e671cbe14fac",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Python support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## kwiver_create_python_init(vital/bin)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add python modules\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "vital/bindings/python/vital/exceptions/CMakeLists.txt" : {
      "ObjectId" : "2e8321551fbec2c6efcd70947d7e64f997fc5ce0",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Python support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add python modules\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#kwiver_create_python_init( vital/exceptions\n\n#  base\n\n#  config_block_io\n\n#  config_block\n\n#  eigen\n\n#  image\n\n#  )\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "vital/bindings/python/vital/modules/CMakeLists.txt" : {
      "ObjectId" : "ac2e5ed943c5c24f9a7082af11438251e5f1d4fe",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vital/bindings/python/vital/tests/CMakeLists.txt" : {
      "ObjectId" : "ed1131a2a8cc2ba4aee30f0957d6eb01405f698b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Python support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define modules with tests in them\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ImageObjectDetector test requires config bindings in sprokit\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# All python filenames_we in the vital.tests module\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add files to the vital.tests python module\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "vital/bindings/python/vital/types/CMakeLists.txt" : {
      "ObjectId" : "ef86fe796863e39942a4f1df4a9c78acbd288cfd",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vital/bindings/python/vital/util/CMakeLists.txt" : {
      "ObjectId" : "fb9fb33f64153dd86f0648b6c21e8ceab3a92602",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vital/bindings/python/vital/util/py/CMakeLists.txt" : {
      "ObjectId" : "efed425d94226fe6b247ad0835d902d32080333f",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Python support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add python modules\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vital/config/CMakeLists.txt" : {
      "ObjectId" : "6d4d1bf610a40b484b92379385d2aec15a956ae5",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# vital/config library\n\n#\n\n# The config library must built as a separate library because it is\n\n# used by other components that do not need all of the rest of kwiver\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Add tests if enbled\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vital/config/tests/CMakeLists.txt" : {
      "ObjectId" : "8852e4211f6b69411e56de1709f3e7310c135019",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Config Tests\n\n##############################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vital/exceptions/CMakeLists.txt" : {
      "ObjectId" : "0e9fd199352927bffe2c0f588ab6d9352e923e06",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Build for vital exceptions\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install export header\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vital/klv/CMakeLists.txt" : {
      "ObjectId" : "a20c1afa203bb5f71d4b3f718adf2ea9a81a7ff9",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KLV parsing toolkit\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# Add tests if enabled\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vital/klv/tests/CMakeLists.txt" : {
      "ObjectId" : "c583506bbd97c44fec15b510c6b663826a7ce4e6",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# KLV tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO implement this test!\n\n# kwiver_discover_tests(KLV             test_libraries test_klv.cxx)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vital/kwiversys/CMakeLists.txt" : {
      "ObjectId" : "ce7f5635d688f3d28e8d3d4cd750af1471bec3c4",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# KWSys - Kitware System Library\n\n# Copyright 2000-2011 Kitware, Inc., Insight Software Consortium\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Kitware System Library is intended to be included in other\n\n# projects.  It is completely configurable in that the library's\n\n# namespace can be configured and the components that are included can\n\n# be selected invididually.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Typical usage is to import the kwsys directory tree into a\n\n# subdirectory under a parent project and enable the classes that will\n\n# be used.  All classes are disabled by default.  The CMake listfile\n\n# above this one configures the library as follows:\n\n#\n\n#  SET(KWSYS_NAMESPACE foosys)\n\n#  SET(KWSYS_USE_Directory 1)    # Enable Directory class.\n\n#  SUBDIRS(kwsys)\n\n#\n\n# Optional settings are as follows:\n\n#\n\n#  KWSYS_HEADER_ROOT = The directory into which to generate the kwsys headers.\n\n#                      A directory called \"${KWSYS_NAMESPACE}\" will be\n\n#                      created under this root directory to hold the files.\n\n#\n\n#    Example:\n\n#\n\n#      SET(KWSYS_HEADER_ROOT ${PROJECT_BINARY_DIR})\n\n#      INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})\n\n#\n\n# Optional settings to setup install rules are as follows:\n\n#\n\n#  KWSYS_INSTALL_BIN_DIR     = The installation target directories into\n\n#  KWSYS_INSTALL_LIB_DIR       which the libraries and headers from\n\n#  KWSYS_INSTALL_INCLUDE_DIR   kwsys should be installed by a \"make install\".\n\n#                              The values should be specified relative to\n\n#                              the installation prefix and NOT start with '/'.\n\n#  KWSYS_INSTALL_DOC_DIR     = The installation target directory for documentation\n\n#                              such as copyright information.\n\n#\n\n#  KWSYS_INSTALL_COMPONENT_NAME_RUNTIME     = Name of runtime and development\n\n#  KWSYS_INSTALL_COMPONENT_NAME_DEVELOPMENT   installation components.\n\n#                                             If not given the install rules\n\n#                                             will not be in any component.\n\n#\n\n#  KWSYS_INSTALL_EXPORT_NAME = The EXPORT option value for install(TARGETS) calls.\n\n#\n\n#    Example:\n\n#\n\n#      SET(KWSYS_INSTALL_BIN_DIR bin)\n\n#      SET(KWSYS_INSTALL_LIB_DIR lib)\n\n#      SET(KWSYS_INSTALL_INCLUDE_DIR include)\n\n#      SET(KWSYS_INSTALL_COMPONENT_NAME_RUNTIME Runtime)\n\n#      SET(KWSYS_INSTALL_COMPONENT_NAME_DEVELOPMENT Development)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Once configured, kwsys should be used as follows from C or C++ code:\n\n#\n\n#  #include <foosys/Directory.hxx>\n\n#   ...\n\n#  foosys::Directory directory;\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NOTE: This library is intended for internal use by Kitware-driven\n\n# projects.  In order to keep it simple no attempt will be made to\n\n# maintain backward compatibility when changes are made to KWSys.\n\n# When an incompatible change is made Kitware's projects that use\n\n# KWSys will be fixed, but no notification will necessarily be sent to\n\n# any outside mailing list and no documentation of the change will be\n\n# written.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# If a namespace is not specified, use \"kwsys\" and enable testing.\n\n# This should be the case only when kwsys is not included inside\n\n# another project and is being tested.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# The project name is that of the specified namespace.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tell CMake how to follow dependencies of sources in this directory.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Select library components.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Enable all components.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Enforce component dependencies.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup the large file support default.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Specify default 8 bit encoding for Windows\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Enable testing if building standalone.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Include helper macros.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Do full dependency headers.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Use new KWSYS_INSTALL_*_DIR variable names to control installation.\n\n# Take defaults from the old names.  Note that there was no old name\n\n# for the bin dir, so we take the old lib dir name so DLLs will be\n\n# installed in a compatible way for old code.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Setup header install rules.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Setup library install rules.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Install the shared library to the lib directory.\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Assign the shared library to the runtime component.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Install the archive to the lib directory.\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Assign the archive to the development component.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Install the runtime library to the bin directory.\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Assign the runtime library to the runtime component.\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Do not support old KWSYS_*a_INSTALL_DIR variable names.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Generated source files will need this header.\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Select plugin module file name convention.\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# We require ANSI support from the C compiler.  Add any needed flags.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Adjust compiler flags for some platforms.\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# it is known that version 3.85 fails and 6.25 works without these flags\n",
        "Line" : 298,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# use new C++ library and improved template support\n",
        "Line" : 300,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Configure Large File Support.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Large File Support is requested.\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Check for large file support.\n",
        "Line" : 325,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Large File Support is not requested.\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Configure the standard library header wrappers based on compiler's\n\n# capabilities and parent project's request.  Enforce 0/1 as only\n\n# possible values for configuration into Configure.hxx.\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Check existence and uniqueness of long long and __int64.\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Enable the \"long long\" type if it is available.  It is standard in\n\n# C99 and C++03 but not in earlier standards.\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Enable the \"__int64\" type if it is available and unique.  It is not\n\n# standard.\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Look for type size helper macros.\n",
        "Line" : 379,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Determine type sizes at preprocessing time if possible, and\n\n# otherwise fall back to a try-compile.\n",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Use __SIZEOF_${type}__ macro.\n",
        "Line" : 400,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Use __${type}_MAX__ macro.\n",
        "Line" : 404,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# Configure a hard-coded type size.\n",
        "Line" : 418,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# Check signedness of \"char\" type.\n",
        "Line" : 435,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Look for type size helper macros.\n",
        "Line" : 441,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Determine whether iostreams support long long.\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Choose default shared/static build if not specified.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Configure some implementation details.\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Suppress LNK4089: all references to 'PSAPI.DLL' discarded by /OPT:REF\n",
        "Line" : 544,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# check for simple stack trace\n\n# usually it's in libc but on FreeBSD\n\n# it's in libexecinfo\n",
        "Line" : 593,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# we have the backtrace header check if it\n\n# can be used  with this compiler\n",
        "Line" : 603,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "# backtrace is supported by this system and compiler.\n\n# now check for the more advanced capabilities.\n",
        "Line" : 610,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# check for symbol lookup using dladdr\n",
        "Line" : 614,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# we have symbol lookup libraries and headers\n\n# check if they can be used with this compiler\n",
        "Line" : 617,
        "CharPositionInLine" : 10
      },
      "56" : {
        "Text" : "# symbol lookup is supported by this system\n\n# and compiler.\n",
        "Line" : 624,
        "CharPositionInLine" : 12
      },
      "57" : {
        "Text" : "# c++ demangling support\n\n# check for cxxabi headers\n",
        "Line" : 630,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# check if cxxabi can be used with this\n\n# system and compiler.\n",
        "Line" : 634,
        "CharPositionInLine" : 10
      },
      "59" : {
        "Text" : "# c++ demangle using cxxabi is supported with\n\n# this system and compiler\n",
        "Line" : 639,
        "CharPositionInLine" : 12
      },
      "60" : {
        "Text" : "# basic backtrace works better with release build\n\n# don't bother with advanced features for release\n",
        "Line" : 645,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Choose a directory for the generated headers.\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 707,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Assign the license to the runtime component since it must be\n\n# distributed with binary forms of this software.\n",
        "Line" : 709,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Install the license under the documentation directory.\n",
        "Line" : 717,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build a list of classes and headers we need to implement the\n\n# selected components.  Initialize with required components.\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Add selected C++ classes.\n",
        "Line" : 733,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Use the corresponding class.\n",
        "Line" : 740,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Load component-specific CMake code.\n",
        "Line" : 743,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Add selected C components.\n",
        "Line" : 750,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Use the corresponding header file.\n",
        "Line" : 755,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Load component-specific CMake code.\n",
        "Line" : 758,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build a list of sources for the library based on components that are\n\n# included.\n",
        "Line" : 765,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Add the proper sources for this platform's Process implementation.\n",
        "Line" : 771,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Use the Windows implementation.\n",
        "Line" : 774,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# Use the UNIX implementation.\n",
        "Line" : 777,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Add selected C sources.\n",
        "Line" : 782,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Configure headers of C++ classes and construct the list of sources.\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Add this source to the list of source files for the library.\n",
        "Line" : 795,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Configure the header for this class.\n",
        "Line" : 802,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Create an install target for the header.\n",
        "Line" : 807,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Configure C headers.\n",
        "Line" : 815,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Configure the header into the given directory.\n",
        "Line" : 817,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# Create an install target for the header.\n",
        "Line" : 822,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Configure other C++ headers.\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Configure the header into the given directory.\n",
        "Line" : 832,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Create an install target for the header.\n",
        "Line" : 837,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Add the library with the configured name and list of sources.\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# backtrace on FreeBSD is not in libc\n",
        "Line" : 865,
        "CharPositionInLine" : 8
      },
      "89" : {
        "Text" : "# for symbol lookup using dladdr\n",
        "Line" : 869,
        "CharPositionInLine" : 8
      },
      "90" : {
        "Text" : "# Apply user-defined target properties to the library.\n",
        "Line" : 875,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Create an install target for the library.\n",
        "Line" : 882,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# Add a C-only library if requested.\n",
        "Line" : 888,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Apply user-defined target properties to the library.\n",
        "Line" : 893,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Create an install target for the library.\n",
        "Line" : 900,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# For building kwsys itself, we use a macro defined on the command\n\n# line to configure the namespace in the C and C++ source files.\n",
        "Line" : 906,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Disable deprecation warnings for standard C functions.\n",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# Help enforce the use of wide Windows apis.\n",
        "Line" : 921,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# Activate code in \"String.c\".  See the comment in the source.\n",
        "Line" : 926,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Set default 8 bit encoding in \"EndcodingC.c\".\n",
        "Line" : 932,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Setup testing if not being built as part of another project.\n",
        "Line" : 937,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# Compute the location of executables.\n",
        "Line" : 941,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# C tests\n",
        "Line" : 947,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# C++ tests\n",
        "Line" : 967,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# If kwsys contains the DynamicLoader, need extra library\n",
        "Line" : 995,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "# Process tests.\n",
        "Line" : 1054,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# Some Apple compilers produce bad optimizations in this source.\n",
        "Line" : 1067,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# Tell IBM XL not to warn about our test infinite loop\n",
        "Line" : 1071,
        "CharPositionInLine" : 6
      },
      "108" : {
        "Text" : "# Test SharedForward\n",
        "Line" : 1075,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# Configure some test properties.\n",
        "Line" : 1085,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# We expect test to fail\n",
        "Line" : 1087,
        "CharPositionInLine" : 6
      },
      "111" : {
        "Text" : "# Set up ctest custom configuration file.\n",
        "Line" : 1094,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# Suppress known consistent failures on buggy systems.\n",
        "Line" : 1098,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 113
    },
    "vital/kwiversys/CTestConfig.cmake" : {
      "ObjectId" : "3954dd71e4e351901b1dbc6853db13cab4b36783",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# KWSys - Kitware System Library\n\n# Copyright 2000-2012 Kitware, Inc., Insight Software Consortium\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vital/kwiversys/kwsysPlatformTests.cmake" : {
      "ObjectId" : "0da0f635fed6e96a3bf770f14c699949b6f4cc5f",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# KWSys - Kitware System Library\n\n# Copyright 2000-2009 Kitware, Inc., Insight Software Consortium\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that ${var} will be a 0 return value on success.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# KWSYS_PLATFORM_INFO_TEST(lang var description)\n\n#\n\n# Compile test named by ${var} and store INFO strings extracted from binary.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We can implement this macro on CMake 2.6 and above.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Choose a location for the result binary.\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Compile the test binary.\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Parse info strings out of the compiled binary.\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "vital/logger/CMakeLists.txt" : {
      "ObjectId" : "5a24cd0397d85b1187f2c9aa1b0d0aa7d4196cd9",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# vital/logger library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# sources that all plugins need\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Build log4cxx plug-in if configured\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n# Build log4cplus plug-in if configured\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n# Add tests if enbled\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "vital/logger/tests/CMakeLists.txt" : {
      "ObjectId" : "8c26df08e780c18cf490f8c982105448ca091127",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Logger tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vital/plugin_loader/CMakeLists.txt" : {
      "ObjectId" : "b201a98a3efe1eed0f45d3eb04e4fbc13c8b5b8c",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# plugin loader\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n# vital plugin manager\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Add tests if enbled\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "vital/plugin_loader/tests/CMakeLists.txt" : {
      "ObjectId" : "bf9aeca1ebb5d8a27db61092027eee111aac8765",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Loader tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vital/range/CMakeLists.txt" : {
      "ObjectId" : "176d41a5af20808f4b375b63e88ee404240f3e34",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Build vital/range library\n\n#\n\n# A hard requirement for the vital_range library is that it not depend\n\n# on vital library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==================================================================\n\n###\n\n# These headers are installed\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n\n# Add tests if enabled\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "vital/range/tests/CMakeLists.txt" : {
      "ObjectId" : "9e81a8e951a7aeee92404aa45dc596adc6ad7f18",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Range tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vital/tests/CMakeLists.txt" : {
      "ObjectId" : "957369cc737649e8081994810d6caf2242502c47",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Core tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## kwiver_discover_tests(vital_algo               test_libraries test_algo.cxx)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vital/tools/CMakeLists.txt" : {
      "ObjectId" : "e95dae19fee5798631adc9ecb23a674be48bd0a3",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake file fot the vital tools\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# public headers for explorer\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "vital/types/protobuf/CMakeLists.txt" : {
      "ObjectId" : "c0fed0ecceaadc42422599ecb992f4582e625c73",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMake file for building protobuf libraries.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Need to add this include file to the compile because of a defficiency in the protobuf\n\n# compiler. The compiler has the option to insert an export macro into class definitions\n\n# but has no way of defining that macro. as of libprotoc 2.6.1 this is the accepted way\n\n# of defining the export symbols.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vital/util/CMakeLists.txt" : {
      "ObjectId" : "d4b893e1b352057bc8683b67cfcb600c20e33794",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# Build vital/util library\n\n#\n\n# A hard requirement for the vital_util library is that it not depend\n\n# on vital library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==================================================================\n\n###\n\n# These headers are installed\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# install generated header\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n# Add tests if enabled\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "vital/util/tests/CMakeLists.txt" : {
      "ObjectId" : "145b83ed77e7db9eaaacc6da48d17e5f5f59401b",
      "LastModified" : "2019-04-09T19:58:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################\n\n# Util tests\n\n##############################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 248,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 3737
}