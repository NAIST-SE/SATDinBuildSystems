{
  "Repository" : "9754955",
  "Revision" : "HEAD",
  "ObjectId" : "652139d86ae9fd9a19e2c9c0aa40faab3cfcab41",
  "CommitTime" : "2019-04-09T14:02:45Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "5aed5eb2221de37abe3249add8b5c617ec76460c",
      "LastModified" : "2019-02-10T21:27:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set the default build type\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default, use Release mode\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# On 32bit architectures, use RelWithDebInfo\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Ensure dynamic linking with boost unit_test_framework\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add support in Boost::Python for std::shared_ptr\n\n# This is a hack that replaces boost::shared_ptr related code with std::shared_ptr.\n\n# Proper support for std::shared_ptr was added in Boost 1.63.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# on macOS we need to check whether to use libc++ or libstdc++ with clang++\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Numpy is used to convert Eigen matrices/vectors to numpy arrays\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# R is needed for running Planner Arena locally\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# script to install ompl on Ubuntu\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# uninstall target\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# needed for ROS installation\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# install catkin package.xml\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# additional feature info: show which Python modules were found and weren't found\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Create targets for building docker images\n\n# See CMakeModules/OMPLUtils.cmake and scripts/docker for details\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "CMakeModules/CPackSettings.cmake" : {
      "ObjectId" : "1fcefaa247c058f7c2963c65696fd29b4448a26b",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# component list\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# display names for components\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# descriptions of components\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# intercomponent dependencies\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# core library is required\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CMakeModules/CompilerSettings.cmake" : {
      "ObjectId" : "acb5ac5566d38a67a57da93fb5a31cb36ac1fe39",
      "LastModified" : "2019-01-18T17:26:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prepend optimizion flag (in case the default setting doesn't include one)\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# prepend optimizion flag (in case the default setting doesn't include one)\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set rpath, see https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/RPATH-handling\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# no prefix needed for python modules\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMakeModules/FindMORSE.cmake" : {
      "ObjectId" : "b905b334e116ec39c4ff436db9a226de5ea0ab28",
      "LastModified" : "2013-08-09T17:24:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MORSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module finds if the Modular OpenRobots Simulation Engine (MORSE)\n\n# is installed and determines where the include files and libraries\n\n# are. The MORSE_PATH variable (or environment variable) can be set\n\n# to specify where to look for MORSE.\n\n#\n\n# The following variables are set:\n\n#  MORSE_VERSION     = the version of MORSE that was found; empty if morse was not found\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Uncomment the following line to enable debug output\n\n#set(_MORSE_DEBUG_OUTPUT true)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MORSE's version info is written to stderr, not stdout\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# remove newlines and 'morse '\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMakeModules/FindOpenDE.cmake" : {
      "ObjectId" : "ca1b3bd3d83dabe891c230e8796810b8b4324dac",
      "LastModified" : "2012-01-23T03:48:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OPENDE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module finds if Open Dynamics Engine (OPENDE) is\n\n# installed and determines where the include files and libraries\n\n# are. The OPENDE_PATH variable (or environment variable) can be set\n\n# to specify where to look for OPENDE. In addition, OPENDE_LIB_PATH\n\n# and OPENDE_INCLUDE_PATH can be set to specify locations for the ode\n\n# library and include files as well.\n\n#\n\n# The following variables are set:\n\n#  OPENDE_LIBRARY     = location of OPENDE library\n\n#  OPENDE_INCLUDE_DIR = include path for OPENDE\n\n#  OPENDE_DEFINITIONS = defines for OPENDE; such as -DdSINGLE\n\n#  OPENDE_VERSION     = the version of OPENDE that was found; empty if ode-config was not found\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Uncomment the following line to enable debug output\n\n#set(_OPENDE_DEBUG_OUTPUT true)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# remove new line chars\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# split the flags\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# get the defines and include hints only\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# find the include path\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# find the lib\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/FindPython.cmake" : {
      "ObjectId" : "b6c2652ceb45d36cc84fefbf16aa6b331febcb82",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This code sets the following variables:\n\n# PYTHON_FOUND         - boolean that indicates success\n\n# PYTHON_EXEC          - path to python executable\n\n# PYTHON_LIBRARIES     - path to the python library\n\n# PYTHON_INCLUDE_DIRS  - path to where Python.h is found\n\n# PYTHON_SITE_MODULES  - path to site-packages\n\n# PYTHON_ARCH          - name of architecture to be used for platform-specific\n\n#                        binary modules\n\n# PYTHON_VERSION       - version of python\n\n# PYTHON_VERSION_MAJOR - major version number\n\n# PYTHON_VERSION_MAJOR - minor version number\n\n# PYTHON_VERSION_MICRO - micro version number\n\n#\n\n# You can optionally include the version number when using this package\n\n# like so:\n\n#   find_package(python 2.6)\n\n#\n\n# This code defines a helper function find_python_module(). It can be used\n\n# like so:\n\n#   find_python_module(numpy [version] [REQUIRED|QUIET])\n\n# If numpy is found, the variable PY_NUMPY contains the location of the numpy\n\n# module. If a particular minimum version or higher is required, use the\n\n# version argument:\n\n#   find_python_module(numpy 1.9.0)\n\n# If the module is required add the keyword \"REQUIRED\":\n\n#   find_python_module(numpy REQUIRED)\n\n# If no output should be displayed about whether the module is found, use the\n\n# QUIET argument:\n\n#   find_python_module(numpy QUIET)\n\n#\n\n# Finally, this module defines a number of macros:\n\n# - find_boost_python(): Find the version of Boost.Python that matches the python interpreter\n\n# - find_boost_numpy(): Find the version of Boost.Numpy that matches the python interpreter\n\n# - install_python(PROGRAMS ...): Similar to install(PROGRAMS...), but replaces\n\n#   \"#!/usr/bin/env python\" with \"#!${PYTHON_EXEC}\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# allow specifying which Python installation to use\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On macOS the python executable might be symlinked to the \"real\" location\n\n# of the python executable. The header files and libraries are found relative\n\n# to that path.\n\n# For CMake 2.6 and below, the REALPATH option is included in the ABSOLUTE option\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# A module's location is usually a directory, but for binary modules\n\n# it's a .so file.\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# get rid of version prefixes and suffixes so that\n\n# \"v1.0rc2\" becomes \"1.0\"\n",
        "Line" : 146,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# macro to attempt to find the *correct* Boost.Python library (i.e., the\n\n# one that matches the version number of the python interpreter that was\n\n# found).\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# macro to attempt to find the *correct* Boost.Numpy library (i.e., the\n\n# one that matches the version number of the python interpreter that was\n\n# found).\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# macro that is similar to install, but corrects the python interpreter\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/FindTriangle.cmake" : {
      "ObjectId" : "8130dc40a4b39b17ea68aa90284e40a19fe2e4b9",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds if Triangle is installed and determines the locations of the\n\n# include headers and library files.\n\n#\n\n# Written by Matt Maly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/Findcastxml.cmake" : {
      "ObjectId" : "276fd4d27ef24b44a1be98801a355e123a003db5",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# workaround for problem between Xcode and castxml on Mojave\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "CMakeModules/Findflann.cmake" : {
      "ObjectId" : "aa4450c487d90cda5ce75dfc53892c3c677e7615",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find FLANN, a Fast Library for Approximate Nearest Neighbors\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/Findpypy.cmake" : {
      "ObjectId" : "3ccb5f31604a2fe7640de3f06b2cf8158fdc95bd",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PyPy is more than an order of magnitude faster in generating the Python\n\n# bindings than CPython, so use it if available.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/Findspot.cmake" : {
      "ObjectId" : "7ce76a13bb28b1789da243bac52b0914b7b42a9c",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find spot, a platform for LTL and ω-automata manipulation\n\n# See https://spot.lrde.epita.fr\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/OMPLUtils.cmake" : {
      "ObjectId" : "168cbe1058ada327af130523299a9c9a3a85339e",
      "LastModified" : "2019-04-09T14:02:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Computes the link flags and package dependencies for a list of targets. This command:\n\n#\n\n#   target_link_flags(target1 target2 ...)\n\n#\n\n# sets the following variables in the calling context:\n\n#\n\n#   target1_LINK_FLAGS\n\n#   target1_PKG_DEPS\n\n#\n\n# Note that the link flags for *all* targets are combined into two variables.\n\n# The second variable is used for libraries that were found with pkg-config.\n\n# This function is intended for generating pkg-config *.pc files.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add -lfoo to link flags\n",
        "Line" : 43,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# add link flags for dynamic libraries\n",
        "Line" : 47,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# macOS frameworks, which are also dynamic libraries\n",
        "Line" : 52,
        "CharPositionInLine" : 20
      },
      "4" : {
        "Text" : "# libraries found by pkg-config are just returned as \"foo\",\n\n# not \"libfoo.so\".\n",
        "Line" : 56,
        "CharPositionInLine" : 24
      },
      "5" : {
        "Text" : "# the spot and bddx libraries can be pulled in via a dependency on libspot.pc\n",
        "Line" : 61,
        "CharPositionInLine" : 32
      },
      "6" : {
        "Text" : "# do nothing\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "CMakeModules/PythonBindingsUtils.cmake" : {
      "ObjectId" : "570bef0c3f10a11a222cf6f2a6b427caa4efe150",
      "LastModified" : "2019-01-18T17:27:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The python version needs to match the one used to build Boost.Python.\n\n# You can optionally specify the desired version like so:\n\n#   find_package(Python 2.6)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure target is defined only once\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# top-level target for compiling python modules\n",
        "Line" : 15,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# make sure targets are defined only once\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# top-level target for updating all-in-one header file for each module\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# top-level target for regenerating code for all python modules\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# create list of absolute paths to header files, which we\n\n# will add as a list of dependencies for the target\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# target for all-in-one header for module\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# target for regenerating code. Cmake is run so that the list of\n\n# sources for the py_ompl_${module} target (see below) is updated.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# target for each python module\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# If this is built as a 'module', the compiler complains upon link,\n\n# complaining that the symbol WinMain is undefined.\n\n# Python on windows will NOT read this file unless the extension is .pyd\n",
        "Line" : 94,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# put omplapp and MORSE bindings in separate components\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "CMakeModules/generate_header.cmake" : {
      "ObjectId" : "5e8a00a2d5c986d11cc9fe4267619af6c8c14003",
      "LastModified" : "2019-02-08T16:48:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "demos/CMakeLists.txt" : {
      "ObjectId" : "0a85f9a5b2dd542b4aa597eb7d30d86f7e012469",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "f922437bb6b6e469e87294b4c2734d816974817a",
      "LastModified" : "2019-02-08T16:48:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "py-bindings/CMakeLists.txt" : {
      "ObjectId" : "4cf8c772328fde1f124ad383f37c3f037f967ee5",
      "LastModified" : "2019-02-08T16:53:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# omit StateStorage class bindings on Windows;\n\n# Boost.Serialization does nasty things that break the bindings.\n",
        "Line" : 14,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# need to run cmake to regenerate ompl/bindings_generator.py if\n\n# bindings_generator.py.in is changed.\n",
        "Line" : 26,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# put app submodule in omplapp component\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# put morse submodule in morse component\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# blender add-on\n",
        "Line" : 88,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 5
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "c37f64e17045a65ac48daecec0c1575247cfbeb7",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "04625ac2a211fde74809f798f62ea56b0b0286f5",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ompl/CMakeLists.txt" : {
      "ObjectId" : "7424dae403a0d22c00997b940bed571f6f6a99ed",
      "LastModified" : "2019-02-08T16:53:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############################################\n\n# Add enabled extensions to the source code #\n\n#############################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## replace XXX by the extension\n\n#if (OMPL_EXTENSION_XXX)\n\n#    file(GLOB_RECURSE OMPL_XXX_EXTENSION_SOURCE_CODE extensions/XXX/*.cpp)\n\n#    set(OMPL_SOURCE_CODE ${OMPL_SOURCE_CODE} ${OMPL_XXX_EXTENSION_SOURCE_CODE})\n\n#\n\n##    if additional libraries need to be linked, they are added to manifest.xml for ROS\n\n##    or they are added to the list of OMPL_LINK_LIBRARIES\n\n#\n\n#endif()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build the library\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install the library\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "26f87fb1375c96726de745d2803ad1c090d669c6",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test datastructures implementation\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Test utilities\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# optimization flags make this test fail\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Test base code\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Test kinematic motion planners in 2D environments\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Test constrained planning\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Test planning with controls on a 2D map\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Test planning via MORSE extension\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Python unit tests\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# test the python function to std::function conversion utility functions\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 10
    },
    "tests/regression_tests/CMakeLists.txt" : {
      "ObjectId" : "8ddbbbd61036025de0139be198aee88fdd5e7ed9",
      "LastModified" : "2019-01-17T04:13:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 22
  },
  "ElapsedTime" : 4696
}