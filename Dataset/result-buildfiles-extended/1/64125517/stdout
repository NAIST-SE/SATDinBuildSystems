{
  "Repository" : "64125517",
  "Revision" : "HEAD",
  "ObjectId" : "afa2e8b8e9fd8cf67605e15ac8671e996bcc2e2d",
  "CommitTime" : "2019-04-15T05:55:08Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "de9828035bf3ec8f2b7bc5538131bba0004b0b87",
      "LastModified" : "2018-06-14T07:26:23Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#not installed\n",
        "Line" : 31,
        "CharPositionInLine" : 46
      },
      "1" : {
        "Text" : "# This file is problematic for out-of-tree builds if it exists.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/navcoin-qt.pro" : {
      "ObjectId" : "e6d18fd5c9d2044aa065ad1ea0ef3c26b6a6d6bf",
      "LastModified" : "2017-02-22T05:04:10Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "depends/Makefile" : {
      "ObjectId" : "fd5c18fdb77c5fbd44818f35120bf079f9b1438d",
      "LastModified" : "2018-06-27T14:42:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "share/qt/protobuf.pri" : {
      "ObjectId" : "865fe865550ae21f2eec4bb7c8f8c1817bdf1bce",
      "LastModified" : "2017-02-22T05:04:10Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Based on: http://code.google.com/p/ostinato/source/browse/protobuf.pri\n\n#\n\n# Qt qmake integration with Google Protocol Buffers compiler protoc\n\n#\n\n# To compile protocol buffers with qt qmake, specify PROTOS variable and\n\n# include this file\n\n#\n\n# Example:\n\n# PROTOS = a.proto b.proto\n\n# include(protobuf.pri)\n\n#\n\n# Set PROTO_PATH if you need to set the protoc --proto_path search path\n\n# Set PROTOC to the path to the protoc compiler if it is not in your $PATH\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Makefile.am" : {
      "ObjectId" : "7a661c26b238f3db8e782fec5a61711c9e20d1d7",
      "LastModified" : "2019-04-11T15:03:53Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Make is not made aware of per-object dependencies to avoid limiting building parallelization\n\n# But to build the less dependent modules first, we manually select their order here:\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# navcoin core #\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# server: shared between navcoind and navcoin-qt\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# wallet: shared between navcoind and navcoin-qt, but only linked\n\n# when wallet enabled\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# crypto primitives library\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# consensus: shared between all executables that validate any consensus rules.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# common: shared between navcoind, and navcoin-qt and non-server tools\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# util: shared between all executables.\n\n# This library *must* be included to make sure that the glibc\n\n# backward-compatibility objects and their sanity checks are linked.\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# cli: shared between navcoin-cli and navcoin-qt\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# navcoind binary #\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# navcoin-cli binary #\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# navcoin-tx binary #\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# navcoinconsensus library #\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## FIXME: How to get the appropriate modulename_CPPFLAGS in here?\n",
        "Line" : 516,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 18
    },
    "src/leveldb/Makefile" : {
      "ObjectId" : "2bd2cadcddeb9ba912c241fed604f5d4d2136886",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (c) 2011 The LevelDB Authors. All rights reserved.\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------\n\n# Uncomment exactly one of the lines labelled (A), (B), and (C) below\n\n# to switch between compilation modes.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# (A) Production use (optimized mode)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# (B) Debug mode, w/ full line-level debugging symbols\n\n# OPT ?= -g2\n\n# (C) Profiling mode: opt, but w/debugging symbols\n\n# OPT ?= -O2 -g2 -DNDEBUG\n\n#-----------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# detect what platform we're building on\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this file is generated by the previous line to set build flags and sources\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: iOS should probably be using libtool, not ar.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Should we build shared libraries?\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Update db.h if you change these.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# PLATFORM_SHARED_EXT\n",
        "Line" : 98,
        "CharPositionInLine" : 7
      },
      "10" : {
        "Text" : "# For iOS, create universal object files to be used on both the simulator and\n\n# a device.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/secp256k1/Makefile.am" : {
      "ObjectId" : "c071fbe2753c9bda4c8d7b74143dc15878572c4b",
      "LastModified" : "2018-08-30T22:37:49Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/univalue/Makefile.am" : {
      "ObjectId" : "06af415bc714db1c1868db67036e9eedd01b9e8b",
      "LastModified" : "2018-06-14T07:26:23Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "QMAKE" : 2,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 4
  },
  "ElapsedTime" : 2446
}