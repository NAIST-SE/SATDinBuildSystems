{
  "Repository" : "31186839",
  "Revision" : "HEAD",
  "ObjectId" : "8c0497fb10eefb2d6f0284796818a9059cdc0a74",
  "CommitTime" : "2019-03-19T08:07:36Z",
  "Files" : {
    "build.xml" : {
      "ObjectId" : "93a9575374e37a08f02e136eaaed4df37a367c69",
      "LastModified" : "2019-02-25T07:55:58Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " using github.com/google/error-prone-javac is required when running on JDK 8 ",
        "Line" : 41,
        "CharPositionInLine" : 93
      },
      "1" : {
        "Text" : " Add annotation processors and Error Prone custom checks here if needed ",
        "Line" : 52,
        "CharPositionInLine" : 92
      },
      "2" : {
        "Text" : " CatchAndPrintStackTrace - not interesting ",
        "Line" : 60,
        "CharPositionInLine" : 63
      },
      "CommentCount" : 3
    },
    "extra/idlColorTables/aia_lct.pro" : {
      "ObjectId" : "c9f7010b1099e02137fe709ace5d3dd8d49f45b7",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/idlColorTables/fit_gimp.pro" : {
      "ObjectId" : "51ddaca65b058912fa616ff2f1975df63cde8ddd",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/idlColorTables/fit_gimp5.pro" : {
      "ObjectId" : "fb71598f35fe688a7e2e40ecc84a88c81afaa9e9",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/idlColorTables/g_segment.pro" : {
      "ObjectId" : "3768b8b52f8f8c5d0718df98b7dd94da025c0a0e",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/idlColorTables/g_segment_fit.pro" : {
      "ObjectId" : "6b0db71a7f5ceedb49480c6b8f6d1682f554521c",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/idlColorTables/g_segment_table.pro" : {
      "ObjectId" : "75d46cecd77eb9112062ab61d321ab230de180ac",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/idlColorTables/mpfit.pro" : {
      "ObjectId" : "ccc859d2c5f204da5eb6fdbd6b5887ef4bdc4b1c",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#        IPNT       FUNC    DERIV_U    DERIV_N   DIFF_ABS   DIFF_REL\n",
        "Line" : 283,
        "CharPositionInLine" : 5
      },
      "1" : {
        "Text" : "## (ident - 2*(v # v)/total(v * v))  ;; generate matrix\n",
        "Line" : 1731,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "## transpose(r)\n",
        "Line" : 1735,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 3,
      "Errorlog" : "line 3506:67 token recognition error at: '\"'\\n      endif else begin\\n          ;; If parameters were changed (grrr..) then re-tie\\n          if max(abs(xnew0-xnew)) GT 0 then begin\\n              if qanytied then mpfit_tie, xnew, ptied\\n              x = xnew[ifree]\\n          endif\\n      endelse\\n\\n  endif\\n\\n  ;; Initialize the number of parameters pegged at a hard limit value\\n  npegged = 0L\\n  if n_elements(qanylim) GT 0 then if qanylim then begin\\n      wh = where((qulim AND (x EQ ulim)) OR $\\n                 (qllim AND (x EQ llim)), npegged)\\n  endif\\n\\n  if fcn NE '(EXTERNAL)' AND nprint GT 0 AND info GT 0 then begin\\n      catch_msg = 'calling '+fcn\\n      fvec = mpfit_call(fcn, xnew, _EXTRA=fcnargs)\\n      catch_msg = 'in the termination phase'\\n      fnorm = mpfit_enorm(fvec)\\n  endif\\n\\n  if n_elements(fnorm) GT 0 AND n_elements(fnorm1) GT 0 then begin\\n      fnorm = max([fnorm, fnorm1])\\n      fnorm = fnorm^2.\\n  endif\\n\\n  covar = !values.d_nan\\n  ;; (very carefully) set the covariance matrix COVAR\\n  if info GT 0 AND NOT keyword_set(nocovar) $\\n    AND n_elements(n) GT 0 $\\n    AND n_elements(fjac) GT 0 AND n_elements(ipvt) GT 0 then begin\\n      sz = size(fjac)\\n      if n GT 0 AND sz[0] GT 1 AND sz[1] GE n AND sz[2] GE n $\\n        AND n_elements(ipvt) GE n then begin\\n          catch_msg = 'computing the covariance matrix'\\n          if n EQ 1 then $\\n            cv = mpfit_covar(reform([fjac[0,0]],1,1), ipvt[0]) $\\n          else $\\n            cv = mpfit_covar(fjac[0:n-1,0:n-1], ipvt[0:n-1])\\n          cv = reform(cv, n, n, /overwrite)\\n          nn = n_elements(xall)\\n          \\n          ;; Fill in actual covariance matrix, accounting for fixed\\n          ;; parameters.\\n          covar = replicate(zero, nn, nn)\\n          for i = 0L, n-1 do begin\\n              covar[ifree, ifree[i]] = cv[*,i]\\n          end\\n          \\n          ;; Compute errors in parameters\\n          catch_msg = 'computing parameter errors'\\n          i = lindgen(nn)\\n          perror = replicate(abs(covar[0])*0., nn)\\n          wh = where(covar[i,i] GE 0, ct)\\n          if ct GT 0 then $\\n            perror[wh] = sqrt(covar[wh, wh])\\n      endif\\n  endif\\n;  catch_msg = 'returning the result'\\n;  profvals.mpfit = profvals.mpfit + (systime(1) - prof_start)\\n\\n  FINAL_RETURN:\\n  nfev = mpconfig.nfev\\n  if n_elements(xnew) EQ 0 then return, !values.d_nan\\n  return, xnew\\n\\n  \\n  ;; ------------------------------------------------------------------\\n  ;; Alternate ending if the user supplies the function and gradients\\n  ;; externally\\n  ;; ------------------------------------------------------------------\\n\\n  SAVE_STATE:\\n\\n  catch_msg = 'saving MPFIT state'\\n\\n  ;; Names of variables to save\\n  varlist = ['alpha', 'delta', 'diag', 'dwarf', 'factor', 'fnorm', $\\n             'fjac', 'gnorm', 'nfree', 'ifree', 'ipvt', 'iter', $\\n             'm', 'n', 'machvals', 'machep0', 'npegged', $\\n             'whlpeg', 'whupeg', 'nlpeg', 'nupeg', $\\n             'mpconfig', 'par', 'pnorm', 'qtf', $\\n             'wa1', 'wa2', 'wa3', 'xnorm', 'x', 'xnew']\\n  cmd = ''\\n\\n  ;; Construct an expression that will save them\\n  for i = 0L, n_elements(varlist)-1 do begin\\n      ival = 0\\n      dummy = execute('ival = n_elements('+varlist[i]+')')\\n      if ival GT 0 then begin\\n          cmd = cmd + ',' + varlist[i]+':'+varlist[i]\\n      endif\\n  endfor\\n  cmd = 'state = create_struct({'+strmid(cmd,1)+'})'\\n  state = 0\\n\\n  if execute(cmd) NE 1 then $\\n    message, 'ERROR: could not save MPFIT state'\\n\\n  ;; Set STATUS keyword to prepare for next iteration, and reset init\\n  ;; so we do not init the next time\\n  info = 9\\n  extinit = 0\\n\\n  return, xnew\\n\\nend\\n\\n\u0000'\n"
    },
    "extra/idlColorTables/mpfitfun.pro" : {
      "ObjectId" : "3efb4ac4d3e712c74db653dc6782a8bca3e5c121",
      "LastModified" : "2015-03-07T21:53:33Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# PERROR)\n",
        "Line" : 268,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 1
    },
    "extra/samp/idl/idljava.pro" : {
      "ObjectId" : "db7ed659301b9fe6a4fbaeb803e90c95a830eb97",
      "LastModified" : "2018-10-12T14:54:10Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0,
      "Errorlog" : "line 23:21 token recognition error at: '\\P'\nline 23:30 token recognition error at: '\\J'\nline 23:34 token recognition error at: '\\J'\nline 23:57 token recognition error at: '\\S'\nline 23:66 token recognition error at: '\\j'\nline 24:38 token recognition error at: '\\P'\nline 24:47 token recognition error at: '\\J'\nline 24:51 token recognition error at: '\\J'\nline 24:74 token recognition error at: '\\S'\nline 24:83 token recognition error at: '\\I'\n"
    },
    "extra/samp/idl/samp.pro" : {
      "ObjectId" : "29f1e8e2d9b10d6da8c89006953102bae733d786",
      "LastModified" : "2018-10-12T14:54:10Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0,
      "Errorlog" : "line 284:29 token recognition error at: '\" />' \\n    endfor\\n\\n    printf, 1, '<DATA>'\\n    printf, 1, '<TABLEDATA>'\\n    for i=0L,(size(array[*,0]))[1]-1 do begin\\n        printf, 1, '<TR>'\\n\\tfor j=0,(size(array[i,*]))[2]-1 do begin\\n\\t   printf, 1, '<TD>'+strtrim(string(array[i,j]), 1)+'</TD>'\\n\\tendfor\\n        printf, 1, '</TR>'\\n    endfor\\n    printf, 1, '</TABLEDATA>'\\n    printf, 1, '</DATA>'\\n    printf, 1, '</TABLE>'\\n    printf, 1, '</RESOURCE>'\\n    printf, 1, '</VOTABLE>'\\n    CLOSE, 1\\n\\n    return, file\\nEND\\n\\nFUNCTION send_table, v1, v2, v3, v4, v5, v6, v7, v8, v9, COLNAMES=colnames\\n        if keyword_set( v9 ) then begin array = [ [v1], [v2], [v3], [v4], [v5], [v6], [v7], [v8], [v9] ]\\n        endif else if keyword_set( v8 ) then begin array = [ [v1], [v2], [v3], [v4], [v5], [v6], [v7], [v8] ]\\n        endif else if keyword_set( v7 ) then begin array = [ [v1], [v2], [v3], [v4], [v5], [v6], [v7] ]\\n        endif else if keyword_set( v6 ) then begin array = [ [v1], [v2], [v3], [v4], [v5], [v6] ]\\n        endif else if keyword_set( v5 ) then begin array = [ [v1], [v2], [v3], [v4], [v5] ]\\n        endif else if keyword_set( v4 ) then begin array = [ [v1], [v2], [v3], [v4] ]\\n        endif else if keyword_set( v3 ) then begin array = [ [v1], [v2], [v3] ]\\n        endif else if keyword_set( v2 ) then begin array = [ [v1], [v2] ]\\n\\tendif\\n\\n\\n\\n\\treturn, send_votable( URL='file://'+generate_votable(array, colnames))\\nEND\\n\\nPRO select_obj, indexes, id\\n    a = register()    \\n\\n    indexes = strtrim(string(indexes),1)\\n    msg_params  =  '<value><struct>'\\n    msg_params +=  '<member><name>table-id</name>'\\n    msg_params +=  '<value>'+id+'</value></member>'\\n    msg_params +=  '<member><name>row-list</name>'\\n    msg_params +=  '<value>'\\n    msg_params +=  '<array><data>'\\n    for i=0L,(size(indexes))[1]-1 do begin\\n        msg_params += '<value><string>'+indexes[i]+'</string></value>'\\n    endfor\\n    msg_params +=  '</data></array>'\\n    msg_params +=  '</value></member>'\\n    msg_params +=  '</struct></value>'\\n\\n\\n    mtype = 'table.select.rowList'\\n    broadcast_samp_notification, mtype, msg_params, a.privatekey\\n\\n    ; TODO : connexion persistente ??\\n    unregister, a.privatekey\\n\\nEND\\n\u0000'\n"
    },
    "extra/samp/idl/start.pro" : {
      "ObjectId" : "141106220baea13b210bf0c072da358a7c66a915",
      "LastModified" : "2018-10-12T14:54:10Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/samp/idl/utils.pro" : {
      "ObjectId" : "4cf87f2db021c024fff258c39f9809ab53d455f1",
      "LastModified" : "2018-10-18T16:05:42Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "release/build.xml" : {
      "ObjectId" : "47eb0f2c626a0ae763b5e33432950c750b6614da",
      "LastModified" : "2019-01-31T14:44:09Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "release/install4j/build.xml" : {
      "ObjectId" : "a909aa055a72b47444174eed4b933b61d7e741c5",
      "LastModified" : "2018-10-12T14:54:10Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n        To run the deploy target you need install4j installed\n        and download the following files to $HOME_DIR/.install4j/jres/\n        https://files.jabref.org/jres/macosx-amd64-1.8.0_102_unpacked.tar.gz\n        https://files.jabref.org/jres/windows-amd64-1.8.0_102.tar.gz\n    ",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : " set path to install4j installation depending on os",
        "Line" : 10,
        "CharPositionInLine" : 63
      },
      "2" : {
        "Text" : "<property name=\"standalonebuild\" location=\"build/builds/standalone\"/>\n    <property name=\"jarfile\" location= \"${standalonebuild}/JHelioviewer.jar\"/>\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "    <mkdir dir=\"${standalonebuild}\"/>\n        <copy todir=\"${standalonebuild}/lib\">\n            <fileset refid=\"libfiles\"/>\n        </copy>\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "            <fileset dir=\"${standalonebuild}/lib\"> ",
        "Line" : 65,
        "CharPositionInLine" : 59
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "QMAKE" : 12,
    "ANT" : 3
  },
  "ElapsedTime" : 7807
}