{
  "Repository" : "17472",
  "Revision" : "HEAD",
  "ObjectId" : "85d3bcbfc04e3746f20af15a7b19a96317425718",
  "CommitTime" : "2018-04-26T19:24:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b4c2073d1ccee51ac4b3e14b12df9dd11c478808",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Setup cmake enviornment and include custom config overrides\n\n#\n\n#############################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n\n#\n\n# Find all dependencies and report anything missing.\n\n#\n\n#############################################################################\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n\n#\n\n# Validate all required dependencies and terminate on failures.\n\n#\n\n#############################################################################\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\tIF(NOT CMAKE_USE_PTHREADS_INIT)\n\n#\t\tSET(HAVE_REQUIRED_DEPENDENCIES FALSE)\n\n#\t\tMESSAGE(WARNING \" - Could not find POSIX threads\")\n\n#\tENDIF(NOT CMAKE_USE_PTHREADS_INIT)\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n\n#\n\n# Bump version number (if requested) and set up variables with current version\n\n#\n\n#############################################################################\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################################\n\n#\n\n# Setup c/C++ build enviornment and flags\n\n#\n\n#############################################################################\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force to always compile with W4\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Update if necessary\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Compile time constants & make sure our build finds it\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# WHat does this do? INSTALL_FILES(/include FILES ${WCONFIG_H_PATH})\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#############################################################################\n\n#\n\n# Build all included and required libraries\n\n#\n\n#############################################################################\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#############################################################################\n\n#\n\n# Construct the bases for plugins\n\n#\n\n#############################################################################\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#############################################################################\n\n#\n\n# Build everything (not already built lik libraries)!\n\n#\n\n#############################################################################\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#############################################################################\n\n#\n\n# CTest setup and add testcases\n\n#\n\n#############################################################################\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#add_nscp_py_test(nrpe test_nrpe)\n",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Disabled as is is not a unit test per see, since it requires extenal non mocked stimula\n\n#\tadd_nscp_py_test(eventlog test_eventlog)\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#############################################################################\n\n#\n\n# CPacke setup\n\n#\n\n#############################################################################\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#SET(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/docs/readme.txt\")\n\n#SET(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt\")\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "build/cmake/FindCSharp.cmake" : {
      "ObjectId" : "61e628b88138ef1cc1347e1e4011aab59b9773f7",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding and using C# (.NET and Mono).\n\n#\n\n# The following variables are set:\n\n#   CSHARP_FOUND - set to ON if C# is found\n\n#   CSHARP_USE_FILE - the path to the C# use file\n\n#   CSHARP_TYPE - the type of the C# compiler (eg. \".NET\" or \"Mono\")\n\n#   CSHARP_VERSION - the version of the C# compiler (eg. \"v4.0\" or \"2.10.2\")\n\n#   CSHARP_COMPILER - the path to the C# compiler executable (eg. \"C:/Windows/Microsoft.NET/Framework/v4.0.30319/csc.exe\" or \"/usr/bin/gmcs\")\n\n#   CSHARP_INTERPRETER - the path to interpreter needed to run CSharp executables\n\n#   CSHARP_PLATFORM - the C# target platform\n\n#   CSHARP_SDK - the SDK commandline switch (empty for .NET, for Mono eg. \"/sdk:2\" or \"/sdk:4\")\n\n#\n\n# This file is based on the work of GDCM:\n\n#   http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindCSharp.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: ADD ABILITY TO SELECT WHICH C# COMPILER eg. .NET or Mono (if both exist). For the moment, .NET is selected above Mono.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure find package macros are included\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# By default use anycpu platform, allow the user to override\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle WIN32 specific issues\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the USE_FILE path\n\n# http://public.kitware.com/Bug/view.php?id=7757\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "build/cmake/FindCryptoPP.cmake" : {
      "ObjectId" : "fd16c62704f753e0e0b19afb36010129e4c9c1fb",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n\n#\n\n# Find crypto++ library or sources.\n\n#\n\n# Input variables:\n\n#   CRYPTOPP_DIR\t- set this to specify the crypto++ source to be built.\n\n#\n\n# Output variables:\n\n#\n\n#   CRYPTOPP_FOUND\t\t\t- set if library was found\n\n#\tCRYPTOPP_INCLUDE_DIR\t- Set to where include files ar found (or sources)\n\n#\tCRYPTOPP_LIBRARIES\t\t- Set to library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/FindDotNetFrameworkSdk.cmake" : {
      "ObjectId" : "3d84a536c8780dae73ecc6e65831870b40b35e06",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding C# .NET.\n\n#\n\n# The following variables are set:\n\n#   CSHARP_DOTNET_FOUND\n\n#   CSHARP_DOTNET_COMPILER_${version} eg. \"CSHARP_DOTNET_COMPILER_v4.0.30319\"\n\n#   CSHARP_DOTNET_VERSION eg. \"v4.0.30319\"\n\n#   CSHARP_DOTNET_VERSIONS eg. \"v2.0.50727, v3.5, v4.0.30319\"\n\n#   DotNetFrameworkSdk_USE_FILE\n\n#\n\n# Additional references can be found here:\n\n#   .NET SDK 1.1: http://www.microsoft.com/downloads/details.aspx?FamilyID=9b3a2ca6-3647-4070-9f41-a333c6b9181d&displaylang=en\n\n#   .NET SDK 2.0: http://www.microsoft.com/downloads/details.aspx?FamilyID=fe6f2099-b7b4-4f47-a244-c96d69c35dec&displaylang=en\n\n#   .NET SDK 3.5: http://www.microsoft.com/downloads/details.aspx?familyid=333325fd-ae52-4e35-b531-508d977d32a6&displaylang=en\n\n#   C# Compiler options: http://msdn.microsoft.com/en-us/library/2fdbz5xd(v=VS.71).aspx\n\n#\n\n# This file is based on the work of GDCM:\n\n#   http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindDotNETFrameworkSDK.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The .NET compiler has already been found\n\n# It may have been reset by the user, verify it is correct\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear versions\n",
        "Line" : 35,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# Get the framework directory based on platform\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search for .NET versions\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Extract version number (eg. v4.0.30319)\n\n# TODO: Consider using REGEX\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add variable holding executable\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Create a list of supported compiler versions\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We found at least one .NET compiler version\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Report the found versions\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set the compiler version\n\n# Do not force, so that the user can manually select their own version if they wish\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# If available, select .NET v2.0.50727 (this is the minimal version as it supports generics, and allows use of VS2008)\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Select the highest version (first in reverse sorted list)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Set USE_FILE\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "build/cmake/FindGoogleBreakpad.cmake" : {
      "ObjectId" : "2bb8daa83e0ba40565fc2d3476bd838518774218",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find Google BreakPad\n\n# Find the Google BreakPad includes and library\n\n# This module defines\n\n#  BREAKPAD_EXCEPTION_HANDLER_INCLUDE_DIR, where to find exception_handler.h, etc.\n\n#  BREAKPAD_EXCEPTION_HANDLER_LIBRARIES, the libraries needed to use Google BreakPad.\n\n#  BREAKPAD_EXCEPTION_HANDLER_FOUND, If false, do not try to use Google BreakPad.\n\n# also defined, but not for general use are\n\n#  BREAKPAD_EXCEPTION_HANDLER_LIBRARY, where to find the Google BreakPad library.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "build/cmake/FindGoogleProtoBuf.cmake" : {
      "ObjectId" : "31ad70988c724ca9c91313db8b13785bbaac9d40",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find protocol buffers (protobuf)\n\n#\n\n# Use as FIND_PACKAGE(ProtocolBuffers)\n\n#\n\n#  PROTOBUF_FOUND - system has the protocol buffers library\n\n#  PROTOBUF_INCLUDE_DIR - the zip include directory\n\n#  PROTOBUF_LIBRARY - Link this to use the zip library\n\n#  PROTOBUF_PROTOC_EXECUTABLE - executable protobuf compiler\n\n#\n\n# And the following command\n\n#\n\n#  WRAP_PROTO(VAR input1 input2 input3..)\n\n#\n\n# Which will run protoc on the input files and set VAR to the names of the created .cc files,\n\n# ready to be added to ADD_EXECUTABLE/ADD_LIBRARY. E.g,\n\n#\n\n#  WRAP_PROTO(PROTO_SRC myproto.proto external.proto)\n\n#  ADD_EXECUTABLE(server ${server_SRC} {PROTO_SRC})\n\n#\n\n# Author: Esben Mose Hansen <[EMAIL PROTECTED]>, (C) Ange Optimization ApS 2008\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Attempt to find a source folder if we did not find the include oine\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ensure that they are cached\n",
        "Line" : 113,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "build/cmake/FindGoogleTest.cmake" : {
      "ObjectId" : "6471821fac60f9522eab81a284df4ff2d406ccf5",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find google test include folder and libraries\n\n# This module finds tinyxml2 if it is installed and determines where \n\n# the files are. This code sets the following variables:\n\n#\n\n#  GTEST_FOUND             - have google test been found\n\n#  GTEST_INCLUDE_DIR       - path to where tinyxml2.h is found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/FindIconv.cmake" : {
      "ObjectId" : "24cdae340dc72073c8481b34feb513d0cd35d696",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Iconv \n\n# Once done this will define \n\n# \n\n#  ICONV_FOUND - system has Iconv \n\n#  ICONV_INCLUDE_DIR - the Iconv include directory \n\n#  ICONV_LIBRARIES - Link these to use Iconv \n\n#  ICONV_SECOND_ARGUMENT_IS_CONST - the second argument for iconv() is const\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "build/cmake/FindJson_Spirit.cmake" : {
      "ObjectId" : "356f2224a548769a8e0ebbc0d4b3d38f776b5065",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find json-spirit source/include folder\n\n# This module finds json-spirit if it is installed and determines where \n\n# the files are. This code sets the following variables:\n\n#\n\n#  JSON_SPIRIT_FOUND             - have json-spirit been found\n\n#  JSON_SPIRIT_INCLUDE_DIR       - path to where json-spirit is found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/FindLUA.cmake" : {
      "ObjectId" : "b13c5da2dc0e0d1271498dd7f0809accfd370146",
      "LastModified" : "2016-10-17T18:42:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "build/cmake/FindMiniz.cmake" : {
      "ObjectId" : "8eb5c4e06d6f9a0ff02dcc3d333bd6c729a01fbd",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find miniz zip library\n\n#\n\n#  MINIZ_FOUND              - have cpp-netlib been found\n\n#  MINIZ_INCLUDE_DIR        - path to where miniz is found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/FindMkdocs.cmake" : {
      "ObjectId" : "fdec0e86a36105e96b6aee2919a8fd151e5c6aaa",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "build/cmake/FindMongoose.cmake" : {
      "ObjectId" : "e1b43a4bcc8b07e875246f2bf693170916d19442",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mongoose source/include folder\n\n# This module finds mongoose if it is installed and determines where \n\n# the files are. This code sets the following variables:\n\n#\n\n#  MONGOOSE_FOUND             - have mongoose been found\n\n#  MONGOOSE_INCLUDE_DIR       - path to where mongoose/Server.h is found\n\n#  MONGOOSE_LIBRARY           - name of library (project) to add as dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/FindMono.cmake" : {
      "ObjectId" : "ed2d1f46909f315e177048af01007469c992904c",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding Mono.\n\n#\n\n# The following variables are set:\n\n#   CSHARP_MONO_FOUND\n\n#   CSHARP_MONO_COMPILER_${version} eg. \"CSHARP_MONO_COMPILER_2.10.2\"\n\n#   CSHARP_MONO_INTERPRETOR_${version} eg. \"CSHARP_MONO_INTERPRETOR_2.10.2\"\n\n#   CSHARP_MONO_VERSION eg. \"2.10.2\"\n\n#   CSHARP_MONO_VERSIONS eg. \"2.10.2, 2.6.7\"\n\n#\n\n# Additional references can be found here:\n\n#   http://www.mono-project.com/Main_Page\n\n#   http://www.mono-project.com/CSharp_Compiler\n\n#   http://mono-project.com/FAQ:_Technical (How can I tell where the Mono runtime is installed)\n\n#\n\n# This file is based on the work of GDCM:\n\n#   http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindMono.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Mono compiler has already been found\n\n# It may have been reset by the user, verify it is correct\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear versions\n",
        "Line" : 34,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# Search for Mono on Win32 systems\n\n# See http://mono-project.com/OldReleases and http://www.go-mono.com/mono-downloads/download.html\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO: Use HKLM_LOCAL_MACHINE\\Software\\Novell\\Mono\\DefaultCLR to specify default version\n\n# get_filename_component( test \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Novell\\\\Mono;DefaultCLR]\" NAME )\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Extract version number (eg. 2.10.2)\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Add variable holding executable\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Set interpreter\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Create a list of supported compiler versions\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# We found at least one Mono compiler version\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Search for Mono on non-Win32 systems\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# variable is added to the cache, we removed it below\n",
        "Line" : 117,
        "CharPositionInLine" : 25
      },
      "12" : {
        "Text" : "# Determine version\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# variable is added to the cache, we removed it below\n",
        "Line" : 125,
        "CharPositionInLine" : 30
      },
      "14" : {
        "Text" : "# We found Mono compiler\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Remove temp variable from cache\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Report the found versions\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Set USE_FILE\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "build/cmake/FindNetlib.cmake" : {
      "ObjectId" : "eef6db01f888425757bdb02974ac906f0ad4478f",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find c++.netlib source/include folder\n\n# This module finds cpp-netlib if it is installed and determines where \n\n# the files are. This code sets the following variables:\n\n#\n\n#  NETLIB_FOUND             - have cpp-netlib been found\n\n#  NETLIB_INCLUDE_DIR       - path to where cpp-netlib is found\n\n#  NETLIB_LIBRARY           - name of library (project) to add as dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/FindPROTOC_GEN_JSON.cmake" : {
      "ObjectId" : "6f14205708c8b67f27afa966b56733114b73d11a",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "build/cmake/FindPROTOC_GEN_LUA.cmake" : {
      "ObjectId" : "34a6262371770809cc963c24902268616d7f9be3",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "build/cmake/FindProtocGenMd.cmake" : {
      "ObjectId" : "1c4dd403f95395975304437a73819a7402bfce13",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "build/cmake/FindSCP.cmake" : {
      "ObjectId" : "ea02102908ef82a6881763e57afa06a1c3ed0cde",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n\n#\n\n# Find the OpenSSH scp (\"secure copy\") or Putty pscp command.\n\n#\n\n# Input variables:\n\n#   SCP_FIND_REQUIRED - set this if configuration should fail without scp\n\n#\n\n# Output variables:\n\n#\n\n#   SCP_FOUND - set if scp was found\n\n#   SCP_EXECUTABLE - path to scp or pscp executable\n\n#   SCP_BATCH_FLAG - how to put scp/pscp into batch mode\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/FindTinyXML2.cmake" : {
      "ObjectId" : "0f748fd29ef5d03a49eaeb54902db426d0171ffa",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find tinyxml2 source/include folder\n\n# This module finds tinyxml2 if it is installed and determines where \n\n# the files are. This code sets the following variables:\n\n#\n\n#  TINYXML2_FOUND             - have tinyxml2 been found\n\n#  TINYXML2_INCLUDE_DIR       - path to where tinyxml2.h is found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/GoogleBreakpad.cmake" : {
      "ObjectId" : "fccfaa5534bad25c085d7776c0202eecaa427b9d",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/GoogleProtoBuf.cmake" : {
      "ObjectId" : "66467e3b1cd707be52c69ac785434d3ae2a0323f",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find protocol buffers (protobuf)\n\n#\n\n# And the following command\n\n#\n\n#  WRAP_PROTO(VAR input1 input2 input3..)\n\n#\n\n# Which will run protoc on the input files and set VAR to the names of the created .cc files,\n\n# ready to be added to ADD_EXECUTABLE/ADD_LIBRARY. E.g,\n\n#\n\n#  WRAP_PROTO(PROTO_SRC myproto.proto external.proto)\n\n#  ADD_EXECUTABLE(server ${server_SRC} {PROTO_SRC})\n\n#\n\n# Author: Esben Mose Hansen <[EMAIL PROTECTED]>, (C) Ange Optimization ApS 2008\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#configure_file(${ABS_FIL}.h.in ${ABS_FIL}.h)\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "build/cmake/SetMultiThread.cmake" : {
      "ObjectId" : "8756c866715badb7256a2795ecd4eeddd8e77ebf",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SET_MULTITHREAD Macro\n\n# Sets multithread switches for Visual Studio and GNU G++ compilers\n\n# Uses static runtime library on Windows\n\n# Can be used multiple times, but overrides any switches added before the first call\n\n# The /RuntimeLibrary:MT SET switch could be an option, if future CMake versions support it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Threads compatibility\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Maybe future CMake versions will implement this\n\n#SET (\n\n#  CMAKE_CXX_FLAGS_RELEASE\n\n#    \"/RuntimeLibrary:MT ${CMAKE_CXX_FLAGS_RELEASE}\"\n\n#)\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "build/cmake/UseCSharp.cmake" : {
      "ObjectId" : "576b1e2cfd8409c08d11d61c3d25554084ae8f83",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding and using C# (.NET and Mono).\n\n#\n\n# The following global variables are assumed to exist:\n\n#   CSHARP_SOURCE_DIRECTORY - path to C# sources\n\n#   CSHARP_BINARY_DIRECTORY - path to place resultant C# binary files\n\n#\n\n# The following variables are set:\n\n#   CSHARP_TYPE - the type of the C# compiler (eg. \".NET\" or \"Mono\")\n\n#   CSHARP_COMPILER - the path to the C# compiler executable (eg. \"C:/Windows/Microsoft.NET/Framework/v4.0.30319/csc.exe\")\n\n#   CSHARP_VERSION - the version number of the C# compiler (eg. \"v4.0.30319\")\n\n#\n\n# The following macros are defined:\n\n#   CSHARP_ADD_EXECUTABLE( name references [files] [output_dir] ) - Define C# executable with the given name\n\n#   CSHARP_ADD_LIBRARY( name references [files] [output_dir] ) - Define C# library with the given name\n\n#\n\n# Examples:\n\n#   CSHARP_ADD_EXECUTABLE( MyExecutable \"\" \"Program.cs\" )\n\n#   CSHARP_ADD_EXECUTABLE( MyExecutable \"ref1.dll ref2.dll\" \"Program.cs File1.cs\" )\n\n#   CSHARP_ADD_EXECUTABLE( MyExecutable \"ref1.dll;ref2.dll\" \"Program.cs;File1.cs\" )\n\n#\n\n# This file is based on the work of GDCM:\n\n#   http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/UseCSharp.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: ADD SUPPORT FOR LINK LIBRARIES\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check something was found\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include type-based USE_FILE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Private macro\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Step through each argument\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Argument is a dll, add reference\n",
        "Line" : 64,
        "CharPositionInLine" : 7
      },
      "7" : {
        "Text" : "# Argument is a source file\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Perform platform specific actions\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# For dependencies, we need to expand wildcards\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Check we have at least one source\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Add custom target and command\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "build/cmake/UseDotNetFrameworkSdk.cmake" : {
      "ObjectId" : "37fc6a753b4f882aa95173e519f9876dd9923def",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for using C# .NET.\n\n#\n\n# The following variables are set:\n\n# (none)\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/UseDotNETFrameworkSDK.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/UseMono.cmake" : {
      "ObjectId" : "81c706f7cc565a087515936d52e9fd3227e3bd73",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for using Mono.\n\n#\n\n# The following variables are set:\n\n# (none)\n\n#\n\n# Additional references can be found here:\n\n# http://www.mono-project.com/Main_Page\n\n# http://www.mono-project.com/CSharp_Compiler\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindMono.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake/dependencies.cmake" : {
      "ObjectId" : "a72d69c5442f3c474879c931ab5376e248e065ea",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Find all dependencies and report anything missing.\n\n#\n\n#############################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#s\tFIND_PACKAGE(Threads REQUIRED)\n\n#\tFIND_PACKAGE(ICU REQUIRED)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tIF(CMAKE_USE_PTHREADS_INIT)\n\n#\t\tMESSAGE(STATUS \" - POSIX threads found: TODO\")\n\n#\t ELSE(CMAKE_USE_PTHREADS_INIT)\n\n#\t\tMESSAGE(STATUS \" ! POSIX threads not found: TODO\")\n\n#\tENDIF(CMAKE_USE_PTHREADS_INIT)\n\n#\tIF(NOT ICU_FOUND)\n\n#\t\tMESSAGE(STATUS \"ICU package not found.\")\n\n#\tELSE(NOT ICU_FOUND)\n\n#\t\tADD_DEFINITIONS( -DSI_CONVERT_ICU )\n\n#\tENDIF(NOT ICU_FOUND)\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  ICONV_INCLUDE_DIR\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "build/cmake/functions.cmake" : {
      "ObjectId" : "b128f3aa1b4c326e2ce13c3ca3159c8d973ce42e",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MESSAGE(STATUS \" - Copying ${source_file} to ${target_file}...\")\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#MESSAGE(STATUS \" - Copying ${source_file} to ${target_file}...\")\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#ADD_CUSTOM_TARGET(\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "build/cmake/module.cmake" : {
      "ObjectId" : "aa76bab995273477376dc9875fd5a70ad00a2dfd",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "build/cmake/wix.cmake" : {
      "ObjectId" : "229f1c85b6819536f1b43841815df8241d7c6d95",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Windows Installer XML\n\n# See http://wix.sourceforge.net\n\n#\n\n# The follwoing variables are optionally searched for defaults\n\n#  WIX_ROOT_DIR:            Base directory of WIX2 tree to use.\n\n#\n\n# The following are set after configuration is done: \n\n#  WIX_FOUND\n\n#  WIX_ROOT_DIR\n\n#  WIX_CANDLE\n\n#  WIX_LIGHT\n\n# \n\n# 2009/02 Petr Pytelka (pyta at lightcomp.cz)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\t\tMESSAGE(STATUS \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}):\\r\\n ${_MSG}\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# typical root dirs of installations, exactly one of them is used\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# select exactly ONE WIX base directory/tree \n\n# to avoid mixing different version headers and libs\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# Logic selecting required libs and headers\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# display help message\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# make FIND_PACKAGE friendly\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#  MESSAGE(STATUS \"Windows Installer XML found.\")\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#\n\n# Call wix compiler\n\n#\n\n# Parameters:\n\n#  _sources - a list with sources\n\n#  _obj - name of list for target objects\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#\n\n# Call wix heat command for the specified DLLs\n\n#\n\n# Parameters:\n\n#  _sources - name of list with DLLs\n\n#  _obj - name of list for target objects\n\n#\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#\n\n# Link MSI file as post-build action\n\n#\n\n# Parameters\n\n#  _target - Name of target file\n\n#  _sources - A list with sources\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#  _loc_files - A list of localization files\n",
        "Line" : 180,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Add localization\n",
        "Line" : 187,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#\n\n# Create an installer from sourcefiles\n\n#\n\n# Parameters\n\n#  _target - Name of target file\n\n#  _sources - Name of list with sources\n\n#\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "check_deps.cmake" : {
      "ObjectId" : "d8b3f6bcc03446190578c3005cd5d310365a6373",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Setup cmake enviornment and include custom config overrides\n\n#\n\n#############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n\n#\n\n# Find all dependencies and report anything missing.\n\n#\n\n#############################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "clients/nrpe/CMakeLists.txt" : {
      "ObjectId" : "96a1add8ad36fcdd6dd01c9f332eae2d1571f28c",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "clients/nrpe/module.cmake" : {
      "ObjectId" : "90aa6a5b8d6149ad8370a95a0f5780d315ec89fb",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "clients/nscp/CMakeLists.txt" : {
      "ObjectId" : "7c324f7ba053455440c4ba560fb5f355ab10b0b5",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "clients/nscp/module.cmake" : {
      "ObjectId" : "a18b6ee70b79edf6afe160e13d6466f628d053c1",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "626275226e5b1f5587f70597e268c1901a8d5d29",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/gtest/CMakeLists.txt" : {
      "ObjectId" : "57470c84f3af0772c411bbb8bbbb41b515747ecd",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "ext/gtest/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "ext/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "57f7d97cb4b37cb3786556bb4d58ed93cd2af474",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 40,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 109,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "ext/gtest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "ext/gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "files/CMakeLists.txt" : {
      "ObjectId" : "3091106ba3230cb384f1701b90747adbf6d855e3",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 775\n",
        "Line" : 27,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : "# 775\n",
        "Line" : 33,
        "CharPositionInLine" : 104
      },
      "2" : {
        "Text" : "# 775\n",
        "Line" : 38,
        "CharPositionInLine" : 104
      },
      "CommentCount" : 3
    },
    "installers/common/CMakeLists.txt" : {
      "ObjectId" : "be3230c4dea94d22ef8c73ccd14a65ca29381416",
      "LastModified" : "2017-01-15T07:46:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "installers/installer-NSCP/CMakeLists.txt" : {
      "ObjectId" : "7e25fedee48a4e2405cc1211d7874231fa9b022f",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#GET_FILENAME_COMPONENT(_tmp_FILE WixUI_en-us.wxl ABSOLUTE)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set_source_files_properties(${WIXOBJ_LIST} ${WIX_DEST} PROPERTIES GENERATED 1)\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "installers/installer-secondary/CMakeLists.txt" : {
      "ObjectId" : "2a1369394189bc7785ab954c6657b3fc42d31c19",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#GET_FILENAME_COMPONENT(_tmp_FILE WixUI_en-us.wxl ABSOLUTE)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set_source_files_properties(${WIXOBJ_LIST} ${WIX_DEST} PROPERTIES GENERATED 1)\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libs/dotnet-plugin-api/CMakeLists.txt" : {
      "ObjectId" : "76035b337415090145cf153e23bd638dd1487110",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/expression_parser/CMakeLists.txt" : {
      "ObjectId" : "e97f8fd87a7d7be2e247d07118ed2680692dc9f4",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/installer_lib/CMakeLists.txt" : {
      "ObjectId" : "aeb7d251b5431c295e3878edf16684a92b7035aa",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Logger\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "libs/lua/CMakeLists.txt" : {
      "ObjectId" : "660626aa0240eead5cb3bb3334ad48f555f9f289",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/lua_nscp/CMakeLists.txt" : {
      "ObjectId" : "1eba69ff4b202cbae2cbc337a83a95f95aac7d6d",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/minizip/CMakeLists.txt" : {
      "ObjectId" : "ccdb963239059d36710213221c3f93140b60dfcb",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/mongoose-cpp/CMakeLists.txt" : {
      "ObjectId" : "34d307ccda2a36c13eff0dd80bcd976e81dd5071",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adding dl\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adding sockets for Win32\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compiling library\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET_TARGET_PROPERTIES(${TARGET} PROPERTIES FOLDER \"libraries\")\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "libs/nscpcrypt/CMakeLists.txt" : {
      "ObjectId" : "a83d12cf983cbdb22ec5b812cd089ee393bad0d1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/perfconfig_parser/CMakeLists.txt" : {
      "ObjectId" : "eee5c67faba0a87cc6c5c6c69e0b98aa72486c94",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/plugin_api/CMakeLists.txt" : {
      "ObjectId" : "e1bc1966efe08830a78e0f28cdfe1a755db37a18",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/protobuf/CMakeLists.txt" : {
      "ObjectId" : "1f75695b626b6ff4e1d729b6c022df7eaf3530ef",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/protobuf_net/CMakeLists.txt" : {
      "ObjectId" : "746a637801c3105c6d5cd5a9b975a5678ae635db",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/settings_manager/CMakeLists.txt" : {
      "ObjectId" : "5bcf67763dc72048eab95735def6a5359afbd349",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\t${NSCP_INCLUDEDIR}/settings/client/settings_client.cpp\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libs/where_filter/CMakeLists.txt" : {
      "ObjectId" : "fefd1bb05c48b745f223d8d46fec27b08cb85b5f",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/win_sysinfo/CMakeLists.txt" : {
      "ObjectId" : "1c6a6f5ca3622845b2b2a92ae8507aeec27be368",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE_DIRECTORIES(${NSCP_INCLUDEDIR})\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/CSharpSamplePlugin/CMakeLists.txt" : {
      "ObjectId" : "7cbff9c43293cbfb2ed9bb54d4c42010d2a5f8d0",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CSharpSamplePlugin/module.cmake" : {
      "ObjectId" : "fbae0033460ae589843c9a47225259bc23632993",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CauseCrashes/CMakeLists.txt" : {
      "ObjectId" : "1e0703a7db72664034d97b3fbac58f3f17479794",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CauseCrashes/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckDisk/CMakeLists.txt" : {
      "ObjectId" : "f3dacfc110b47d9b76dc07ab1ee40067ae5bd624",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckDisk/module.cmake" : {
      "ObjectId" : "d3dae4881d041f8c7a1e9b4e7ce496d43b2f6666",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckEventLog/CMakeLists.txt" : {
      "ObjectId" : "a46e2c2f8b4f420ba831308dc0f9863005334c97",
      "LastModified" : "2018-03-17T11:46:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckEventLog/module.cmake" : {
      "ObjectId" : "d3dae4881d041f8c7a1e9b4e7ce496d43b2f6666",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckExternalScripts/CMakeLists.txt" : {
      "ObjectId" : "82fe9795c7600817acd11cac27052320d29fe375",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckExternalScripts/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckHelpers/CMakeLists.txt" : {
      "ObjectId" : "6750e5b41c61e6172cee4083bae90e14aea1d3ca",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckHelpers/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckLogFile/CMakeLists.txt" : {
      "ObjectId" : "4b2a13767ff0a0a8e5b673f21e1cc42588c45f3d",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckLogFile/module.cmake" : {
      "ObjectId" : "2c9a86f4d4a1a2b4ea3b1f22d41235419dc0d83e",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckMKClient/CMakeLists.txt" : {
      "ObjectId" : "6876a27d2b6c82a0b8609e291fd5272b2b8eb19e",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckMKClient/module.cmake" : {
      "ObjectId" : "9f51f5f057132d694c3bc9712f51ec4cf6a75d8a",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckMKServer/CMakeLists.txt" : {
      "ObjectId" : "dc97efb8d8aa922764598f67fc4e29f407e05089",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Workaround for bug 0003353 in cmake (aparently not fixed)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/CheckMKServer/module.cmake" : {
      "ObjectId" : "9f51f5f057132d694c3bc9712f51ec4cf6a75d8a",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckNSCP/CMakeLists.txt" : {
      "ObjectId" : "76b873a84d46346e3cc1dc274148c9c2211b1359",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckNSCP/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckNet/CMakeLists.txt" : {
      "ObjectId" : "0afadfad48a852bc0446c9b400221ee91035df1e",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckNet/module.cmake" : {
      "ObjectId" : "f11b8d2e99cd25ce7a02541f215af7942846c6ef",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckSystem/CMakeLists.txt" : {
      "ObjectId" : "edea706805bf860fbd55e1c04b36111be379528b",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckSystem/module.cmake" : {
      "ObjectId" : "869cc75a83f3e1eff544df204b607680993a0b29",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckSystemUnix/CMakeLists.txt" : {
      "ObjectId" : "e7921370b39af0790ccb344a3e12b3bdac7f3fd6",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckSystemUnix/module.cmake" : {
      "ObjectId" : "a53c051698af61d1f60f30501f6949ca12cedc20",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckTaskSched/CMakeLists.txt" : {
      "ObjectId" : "a80031ee37806af4f3321fa0c7ca7ab4809bdad8",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckTaskSched/module.cmake" : {
      "ObjectId" : "75f80637997f29b24e240d0c7f0dc3fa546af269",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckWMI/CMakeLists.txt" : {
      "ObjectId" : "9015cc5b7f12c7ac821b052efa78a8f721003c6c",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CheckWMI/module.cmake" : {
      "ObjectId" : "75f80637997f29b24e240d0c7f0dc3fa546af269",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CollectdClient/CMakeLists.txt" : {
      "ObjectId" : "2d98d2084165c775ea44724d9ce173bd1e3a9938",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CollectdClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CommandClient/CMakeLists.txt" : {
      "ObjectId" : "7d733822b89b321d8d05567b4b563c65ab4a8c35",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CommandClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/DotnetPlugins/CMakeLists.txt" : {
      "ObjectId" : "1def2d17d3c9b12efb6200640e2272fb2e2e5268",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/DotnetPlugins/module.cmake" : {
      "ObjectId" : "d3dae4881d041f8c7a1e9b4e7ce496d43b2f6666",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ElasticClient/CMakeLists.txt" : {
      "ObjectId" : "444d450aeeb9691d4cb34c9b32ea423145b25fbc",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ElasticClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/GraphiteClient/CMakeLists.txt" : {
      "ObjectId" : "916c342ebae80ec924621e084e4940fb63b07d76",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/GraphiteClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/LUAScript/CMakeLists.txt" : {
      "ObjectId" : "7f5ea51399ab745f6d542b092136fca33e457fdb",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/LUAScript/module.cmake" : {
      "ObjectId" : "03b31fff862a042befc7266b46628769a49515b1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NRDPClient/CMakeLists.txt" : {
      "ObjectId" : "bdb62029d735a304a096c5af01f5490411069eb6",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NRDPClient/module.cmake" : {
      "ObjectId" : "42dcd7525788ef7d2ed0667ca2e8d3d559a5a54b",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NRPEClient/CMakeLists.txt" : {
      "ObjectId" : "f9320e91c76a8a1a6703dce2b799c0e9884ace16",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NRPEClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NRPEServer/CMakeLists.txt" : {
      "ObjectId" : "b6b72e4d74ea0d5d843c828d0968604cfc79b218",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NRPEServer/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSCAClient/CMakeLists.txt" : {
      "ObjectId" : "a4423fb3a68fe52f418f791ccacd2aa66a912121",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSCAClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSCAServer/CMakeLists.txt" : {
      "ObjectId" : "ed286ccb067f15694a925fa365212faf673322ce",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSCAServer/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSCPClient/CMakeLists.txt" : {
      "ObjectId" : "52cc5efbaf3075a10a65a260a693dc7f1a546cea",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSCPClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSClientServer/CMakeLists.txt" : {
      "ObjectId" : "f41feb2016be8c2d5748fba6c3c49c7e23e27890",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/NSClientServer/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/Op5Client/CMakeLists.txt" : {
      "ObjectId" : "68b81be29f0cccbd0772a30f1f8a70796bc59ba9",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/Op5Client/module.cmake" : {
      "ObjectId" : "e746dd589e1c2748ebafe7dd3578c58dcf13e1b7",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/PythonScript/CMakeLists.txt" : {
      "ObjectId" : "011e1b9b6794fdc9a9eb583c721eddfa72ccb94d",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/PythonScript/module.cmake" : {
      "ObjectId" : "8c7adbc60c59c1c505af44707188c10f9e8bbf2b",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SMTPClient/CMakeLists.txt" : {
      "ObjectId" : "f94d4ad7a7f48116f16f11fa4427283d0f135ba7",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SMTPClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SamplePluginSimple/CMakeLists.txt" : {
      "ObjectId" : "3a4dbe4b394ada228fb952581f62908f63f20683",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SamplePluginSimple/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/Scheduler/CMakeLists.txt" : {
      "ObjectId" : "0dd2a6ce06bbe932a8eb7dcb3634a4eeb2f73f11",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/Scheduler/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SimpleCache/CMakeLists.txt" : {
      "ObjectId" : "28ce37c0d4c311b361fa408ad9bd938e050f8301",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SimpleCache/module.cmake" : {
      "ObjectId" : "f11b8d2e99cd25ce7a02541f215af7942846c6ef",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SimpleFileWriter/CMakeLists.txt" : {
      "ObjectId" : "4c77cd0b1bc06d3f02eb4ee9907ccf0825fed114",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SimpleFileWriter/module.cmake" : {
      "ObjectId" : "f11b8d2e99cd25ce7a02541f215af7942846c6ef",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SyslogClient/CMakeLists.txt" : {
      "ObjectId" : "2d513f5dc6212b722db4d6d822bebee642cd9912",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SyslogClient/module.cmake" : {
      "ObjectId" : "421460efa2aad28416cf211eb20a2227a2ec58e1",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/WEBServer/CMakeLists.txt" : {
      "ObjectId" : "83ad0431fdc0628e844cfb3e2a159341f5953e3c",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/WEBServer/module.cmake" : {
      "ObjectId" : "d781d4604fdfb5cb9869044eef3f7ce0bf9f3441",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "op5/config/CMakeLists.txt" : {
      "ObjectId" : "250bdc381f6363de58e1eebe7041c09c86db3a8c",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "op5/scripts/CMakeLists.txt" : {
      "ObjectId" : "d3268dae0a996852352cfb60238e3c9b6d0ba9ed",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "patches/gtest-1.6.0/cmake/internal_utils.cmake" : {
      "ObjectId" : "370d6d35e5b89ee670cd4427918d236fadd2c269",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 99,
        "CharPositionInLine" : 32
      },
      "14" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "resources/CMakeLists.txt" : {
      "ObjectId" : "ffe0061dbbdb400aad530602c7159d16c44ef9e4",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "ea0d2d7e00147eeebbac4fc9e6aaa7a9d2bab4fc",
      "LastModified" : "2018-03-12T20:29:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MESSAGE(STATUS \" + ${filename} (${file})\")\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#MESSAGE(STATUS \" + lib - ${filename}\")\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#MESSAGE(STATUS \" + python - ${filename} - ${relpath} - ${alias}\")\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#MESSAGE(STATUS \" + lua - ${filename} - ${relpath} - ${alias}\")\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "scripts/modules/icinga-client/CMakeLists.txt" : {
      "ObjectId" : "a2654669ef7fe56991b933182ca13c273c0ecbda",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/modules/remote-modules/CMakeLists.txt" : {
      "ObjectId" : "a4fb72916d03280ca0a8f4d817b8d841e2cea227",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "service/CMakeLists.txt" : {
      "ObjectId" : "eb62dd67265d3bd4e01fbced6e17c2b76331ece2",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#logger\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Logger\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# logger\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Logger\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add python\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#SOURCE_GROUP(\"Common Files\" REGULAR_EXPRESSION .*include/.*)\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tools/error_reporter/CMakeLists.txt" : {
      "ObjectId" : "1264ddc6dab6a41b122123ca1b8198594bfd9bb5",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/error_reporter/module.cmake" : {
      "ObjectId" : "ef256c2d88bba4a2066a5c50e5ec61018f12841c",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vagrant/files/CPackRPM.cmake" : {
      "ObjectId" : "e4e2d4a46dc17b41b151fd2709aaf513bc6e5523",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPack script for creating RPM package\n\n# Author: Eric Noulard with the help of Alexander Neundorf.\n\n# All variables used by CPackRPM begins with CPACK_RPM_ prefix\n\n#\n\n# Here comes the list of used variables:\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# rpmbuild is the basic command for building RPM package\n\n# it may be a simple (symbolic) link to rpmb command.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If rpmbuild is found \n\n# we try to discover alien since we may be on non RPM distro like Debian.\n\n# In this case we may try to to use more advanced features\n\n# like generating RPM directly from DEB using alien.\n\n# FIXME feature not finished (yet)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# \n\n# Use user-defined RPM specific variables value\n\n# or generate reasonable default value from\n\n# CPACK_xxx generic values.\n\n# The variables comes from the needed (mandatory or not)\n\n# values found in the RPM specification file aka \".spec\" file.\n\n# The variables which may/should be defined are:\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CPACK_RPM_PACKAGE_SUMMARY (mandatory)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if neither var is defined lets use the name as summary\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# CPACK_RPM_PACKAGE_NAME (mandatory)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CPACK_RPM_PACKAGE_VERSION (mandatory)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CPACK_RPM_PACKAGE_ARCHITECTURE (optional)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CPACK_RPM_PACKAGE_RELEASE\n\n# The RPM release is the numbering of the RPM package ITSELF\n\n# this is the version of the PACKAGING and NOT the version\n\n# of the CONTENT of the package.\n\n# You may well need to generate a new RPM package release\n\n# without changing the version of the packaged software.\n\n# This is the case when the packaging is buggy (not) the software :=)\n\n# If not set, 1 is a good candidate\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CPACK_RPM_PACKAGE_LICENSE\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# CPACK_RPM_PACKAGE_GROUP\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# CPACK_RPM_PACKAGE_VENDOR\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# CPACK_RPM_PACKAGE_SOURCE\n\n# The name of the source tarball in case we generate a source RPM\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# CPACK_RPM_PACKAGE_DESCRIPTION\n\n# The variable content may be either\n\n#   - explicitely given by tthe user or\n\n#   - filled with the content of CPACK_PACKAGE_DESCRIPTION_FILE\n\n#     if it is defined\n\n#   - set to a default value\n\n#\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# CPACK_RPM_PACKAGE_REQUIRES\n\n# Placeholder used to specify binary RPM dependencies (if any)\n\n# see http://www.rpm.org/max-rpm/s1-rpm-depend-manual-dependencies.html\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# CPACK_RPM_SPEC_INSTALL_POST\n\n# May be used to define a RPM post intallation script\n\n# for example setting it to \"/bin/true\" may prevent\n\n# rpmbuild from stripping binaries.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# CPACK_RPM_SPEC_MORE_DEFINE\n\n# This is a generated spec rpm file spaceholder\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# CPACK_RPM_USER_BINARY_SPECFILE \n\n# FIXME when this is set then CPack should us the \n\n# user provided file.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Now we may create the RPM build tree structure\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Prepare RPM build tree\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#SET(CPACK_RPM_FILE_NAME \"${CPACK_RPM_PACKAGE_NAME}-${CPACK_RPM_PACKAGE_VERSION}-${CPACK_RPM_PACKAGE_RELEASE}-${CPACK_RPM_PACKAGE_ARCHITECTURE}.rpm\")\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# it seems rpmbuild can't handle spaces in the path\n\n# neither escaping (as below) nor putting quotes around the path seem to help\n\n#STRING(REGEX REPLACE \" \" \"\\\\\\\\ \" CPACK_RPM_DIRECTORY \"${CPACK_TOPLEVEL_DIRECTORY}\")\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# User may have specified SPECFILE just use it\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Note that user provided file is processed for @var replacement\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# No User specified spec file generate a valid one using var values\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Now call rpmbuild using the SPECFILE\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "web/CMakeLists.txt" : {
      "ObjectId" : "433ac34d783cf587825221ff51155a2b3fe6743f",
      "LastModified" : "2018-03-30T11:29:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 143,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 3995
}