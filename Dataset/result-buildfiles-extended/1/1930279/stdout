{
  "Repository" : "1930279",
  "Revision" : "HEAD",
  "ObjectId" : "4ed5b00dcc409405a19e6d8c6478f703153430e1",
  "CommitTime" : "2019-03-29T01:25:29Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "81167267e3064b71ae1a0f18b663f488476c7a5e",
      "LastModified" : "2019-03-29T01:24:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# setup directory where we should look for cmake files\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# list command no longer ignores empty elements\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# old policy do not use MACOSX_RPATH\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# defaults for modules that can be enabled/disabled\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# print actual settings\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# setup compiler settings && dependencies\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# setup output directories\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# setup global include_directories (for backwards compatibility)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# the core framework\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#the stubgenerator\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# setup examples\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# setup test suite\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# create documentation\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# setup uninstall target\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# CMake package\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# packaging stuff\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "Makefile" : {
      "ObjectId" : "9665d751bfc5da563c4094e4db3abe852f4db068",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This file is only used for development for convinience functions as\n\n# quick builds and tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CMakeCompilerSettings.cmake" : {
      "ObjectId" : "67023e7b39cd68c3d01ce6d66499ff43442d2a30",
      "LastModified" : "2017-10-23T22:01:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set necessary compile and link flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress warning C4290: C++ exception specification ignored except to indicate a function is not __declspec(nothrow)\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/CMakeDependencies.cmake" : {
      "ObjectId" : "a4a3dffe4984fddb7acab2d4e0bda8623211008f",
      "LastModified" : "2018-08-25T20:18:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all dependencies that are not directly included in the libjson-rpc-cpp distribution are defined here!\n\n# default search directory for dependencies is ${CMAKE_SOURCE_DIR}/win32-deps (for backwards compatibility)\n\n# if your dependencies directory is different, please run cmake with CMAKE_PREFIX_PATH option eg:\n\n#\n\n# cmake -DCMAKE_PREFIX_PATH=path_to_your_dependencies .\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set default dependencies search path\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakePackaging.cmake" : {
      "ObjectId" : "e8c06a481b575568d5e3cbf830614ae381b5d8bb",
      "LastModified" : "2017-04-21T22:36:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindArgtable.cmake" : {
      "ObjectId" : "9728dbd47cfaa9a1f802cc059b12261126b8a587",
      "LastModified" : "2017-04-21T22:36:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ARGTABLE\r\n\n# Once done this will define\r\n\n#\r\n\n#  ARGTABLE_FOUND - system has ARGTABLE\r\n\n#  ARGTABLE_INCLUDE_DIRS - the ARGTABLE include directory\r\n\n#  ARGTABLE_LIBRARIES - Link these to use ARGTABLE\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# debug library on windows\r\n\n# same naming convention as in qt (appending debug library with d)\r\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JSONCPP_FOUND to TRUE\r\n\n# if all listed variables are TRUE, hide their existence from configuration view\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindCatch.cmake" : {
      "ObjectId" : "472ee6d7abf233f89379c1b42426d4aaa8ee2f9d",
      "LastModified" : "2017-04-21T22:36:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindHiredis.cmake" : {
      "ObjectId" : "79a28a984c9afa4d80eb9f197a78d2f0bfa56040",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Hiredis\n\n# Once done this will define\n\n#\n\n#  HIREDIS_FOUND - system has HIREDIS\n\n#  HIREDIS_INCLUDE_DIRS - the HIREDIS include directory\n\n#  HIREDIS_LIBRARY - Link these to use HIREDIS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindJsoncpp.cmake" : {
      "ObjectId" : "7b2bf1ba19146c233384f9881236d22216d45cf1",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find jsoncpp\n\n#\n\n# Find the jsoncpp includes and library\n\n#\n\n# if you nee to add a custom library search path, do it via via CMAKE_PREFIX_PATH\n\n#\n\n# This module defines\n\n#  JSONCPP_INCLUDE_DIR, where to find header, etc.\n\n#  JSONCPP_LIBRARY, the libraries needed to use jsoncpp.\n\n#  JSONCPP_FOUND, If false, do not try to use jsoncpp.\n\n#  JSONCPP_INCLUDE_PREFIX, include prefix for jsoncpp.\n\n#  jsoncpp_lib_static imported library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in qt (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find JSONCPP_INCLUDE_PREFIX\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JSONCPP_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindMHD.cmake" : {
      "ObjectId" : "23e31c4444f3ee283ff4441ba857a3c7975f743b",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find MHD\n\n# Once done this will define\n\n#\n\n#  MHD_FOUND - system has MHD\n\n#  MHD_INCLUDE_DIRS - the MHD include directory\n\n#  MHD_LIBRARY - Link these to use MHD\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in qt (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n\n# official MHD project actually uses _d suffix\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindSocket.cmake" : {
      "ObjectId" : "f002083dc01d95fd244e43493b863a7b4426a51f",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - This module determines the socket library of the system.\r\n\n# The following variables are set\r\n\n#  Socket_LIBRARIES     - the socket library\r\n\n#  Socket_FOUND\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindThreads.cmake" : {
      "ObjectId" : "0a6e6512f99aa090eeec8c0ba4efdef1619ab275",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - This module determines the thread library of the system.\r\n\n# The following variables are set\r\n\n#  CMAKE_THREAD_LIBS_INIT     - the thread library\r\n\n#  CMAKE_USE_SPROC_INIT       - are we using sproc?\r\n\n#  CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?\r\n\n#  CMAKE_USE_PTHREADS_INIT    - are we using pthreads\r\n\n#  CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads\r\n\n# For systems with multiple thread libraries, caller can set\r\n\n#  CMAKE_THREAD_PREFER_PTHREAD\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2002-2009 Kitware, Inc.\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do we have sproc?\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We have sproc\r\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do we have pthreads?\r\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\r\n\n# We have pthread.h\r\n\n# Let's check for the library now.\r\n\n#\r\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check if pthread functions are in normal C library\r\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Do we have -lpthreads\r\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Ok, how about -lpthread\r\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# On sun also check for -lthread\r\n",
        "Line" : 74,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# If we did not found -lpthread, -lpthread, or -lthread, look for -pthread\r\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Use libcma if it exists and can be used.  It provides more\r\n\n# symbols than the plain pthread library.  CMA threads\r\n\n# have actually been deprecated:\r\n\n#   http://docs.hp.com/en/B3920-90091/ch12s03.html#d0e11395\r\n\n#   http://docs.hp.com/en/947/d8.html\r\n\n# but we need to maintain compatibility here.\r\n\n# The CMAKE_HP_PTHREADS setting actually indicates whether CMA threads\r\n\n# are available.\r\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "cmake/HunterGate.cmake" : {
      "ObjectId" : "8f8fed6f297663add265525fa132210e707a75f1",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013-2017, Ruslan Baratov\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is a gate file to Hunter package manager.\n\n# Include this file using `include` command and add package you need, example:\n\n#\n\n#     cmake_minimum_required(VERSION 3.0)\n\n#\n\n#     include(\"cmake/HunterGate.cmake\")\n\n#     HunterGate(\n\n#         URL \"https://github.com/path/to/hunter/archive.tar.gz\"\n\n#         SHA1 \"798501e983f14b28b10cda16afa4de69eee1da1d\"\n\n#     )\n\n#\n\n#     project(MyProject)\n\n#\n\n#     hunter_add_package(Foo)\n\n#     hunter_add_package(Boo COMPONENTS Bar Baz)\n\n#\n\n# Projects:\n\n#     * https://github.com/hunter-packages/gate/\n\n#     * https://github.com/ruslo/hunter\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# cmake_parse_arguments\n",
        "Line" : 53,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# Set HUNTER_GATE_ROOT cmake variable to suitable value.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check CMake variable\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check environment variable\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check HOME environment variable\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Check SYSTEMDRIVE and USERPROFILE environment variable (windows only)\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# while waiting for lock other instance can do all the job\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# check directory permissions\n",
        "Line" : 260,
        "CharPositionInLine" : 38
      },
      "10" : {
        "Text" : "# Disabling languages speeds up a little bit, reduces noise in the output\n\n# and avoids path too long windows error\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Need to add toolchain file too.\n\n# Otherwise on Visual Studio + MDD this will fail with error:\n\n# \"Could not find an appropriate version of the Windows 10 SDK installed on this machine\"\n",
        "Line" : 297,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# 'toolchain_arg' can't be empty\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Test case: remove Ninja from PATH but set it via CMAKE_MAKE_PROGRAM\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Must be a macro so master file 'cmake/Hunter' can\n\n# apply all variables easily just by 'include' command\n\n# (otherwise PARENT_SCOPE magic needed)\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# variable HUNTER_GATE_DONE set explicitly for external project\n\n# (see `hunter_download`)\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# First HunterGate command will init Hunter, others will be ignored\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Empty function to avoid error \"unknown function\"\n",
        "Line" : 371,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# set HUNTER_GATE_ROOT\n",
        "Line" : 447,
        "CharPositionInLine" : 30
      },
      "19" : {
        "Text" : "# Beautify path, fix probable problems with windows path slashes\n",
        "Line" : 449,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Hunter downloaded manually (e.g. by 'git clone')\n",
        "Line" : 487,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Check Hunter already downloaded by HunterGate\n",
        "Line" : 496,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 22
    },
    "cmake/cross-mingw32-linux.cmake" : {
      "ObjectId" : "650cf462e998813227736ea7b36e6d6fe0f648ee",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Choose an appropriate compiler prefix\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for classical mingw32\n\n# see http://www.mingw.org/\n\n#set(COMPILER_PREFIX \"i586-mingw32msvc\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for 32 or 64 bits mingw-w64\n\n# see http://mingw-w64.sourceforge.net/\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(COMPILER_PREFIX \"x86_64-w64-mingw32\"\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#SET(CMAKE_RC_COMPILER ${COMPILER_PREFIX}-windres)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#SET(CMAKE_C_COMPILER ${COMPILER_PREFIX}-gcc)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#SET(CMAKE_CXX_COMPILER ${COMPILER_PREFIX}-g++)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/libjsonrpccpp-client.pc.cmake" : {
      "ObjectId" : "acad8706c0db602441be569e0bd86112c6ce720b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/libjsonrpccpp-common.pc.cmake" : {
      "ObjectId" : "c43085420a49cfe33e968bdc91dd6c422e8d3c0d",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/libjsonrpccpp-server.pc.cmake" : {
      "ObjectId" : "1c693eeba5480c15d54c282ed6059983acfc4078",
      "LastModified" : "2019-03-29T01:19:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/libjsonrpccpp-stub.pc.cmake" : {
      "ObjectId" : "4555d3e573ce3b18edb6cbd0c17ce7791e82ae81",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docker/Makefile" : {
      "ObjectId" : "90c8436b08a8d5fef1fb8bba05363e3f7b20c3b6",
      "LastModified" : "2018-10-01T18:20:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/catch/CMakeLists.txt" : {
      "ObjectId" : "5e9287144c2d8f978cfb4067d8b72ca1a9501dea",
      "LastModified" : "2019-03-29T01:19:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/examples/CMakeLists.txt" : {
      "ObjectId" : "d84bf57f00ef148f592d94af3778d2baef612072",
      "LastModified" : "2017-08-25T07:23:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/jsonrpccpp/CMakeLists.txt" : {
      "ObjectId" : "acc76133fd0963b21f1f17ca3bc4e1d852a39b90",
      "LastModified" : "2019-03-29T01:19:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# setup common headers and sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setup server headers and sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# setup client headers and sources\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# setup connector variables defaults\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# setup sources for http connectors\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# setup sources for redis connectors\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# setup sources for unix domain socket connectors\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# setup sources for tcp socket connectors\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# configure a header file to pass some of the CMake settings to the source code\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# include required directories\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# setup shared common library\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# setup static common library\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# setup shared client library\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# setup static client library\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# setup shared server library\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# setup static server library\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# setup version\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# install libraries\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# On Windows copy manually installed dependencies unless Hunter is used.\n",
        "Line" : 220,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "#set pkg-config\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "src/stubgenerator/CMakeLists.txt" : {
      "ObjectId" : "155e892dd9c3aba5a35c9a852a683ca62e698afb",
      "LastModified" : "2019-03-29T01:19:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# setup static common library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Generate manpage\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "ae8a508f3011c4302ba0fb995c812839cbb3bee2",
      "LastModified" : "2017-10-23T22:01:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# let's wait for catch files to be downloaded\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 22,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1375
}