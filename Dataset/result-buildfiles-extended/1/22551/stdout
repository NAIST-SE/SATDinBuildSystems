{
  "Repository" : "22551",
  "Revision" : "HEAD",
  "ObjectId" : "278fb3880bb9209c8c76baa3d2cba9725f7ce446",
  "CommitTime" : "2019-04-03T06:23:33Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "a2b7dea8a083ce34cb97b5ba1792d52826baa866",
      "LastModified" : "2019-03-17T17:10:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# install locally\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# remove the broken shit\n",
        "Line" : 15,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# remove the broken shit\n",
        "Line" : 16,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "# enforce use of bundled libsodium\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# python setup.py sdist bdist_wheel --universal\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# upload to our internal deployment system\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cleanup everything\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Learn to love the shell! http://unix.stackexchange.com/a/115869/52500\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# publish to PyPI\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# direct test via pytest (only here because of setuptools test integration)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# test via setuptools command\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#test: flake8 test_twisted test_asyncio\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# test under Twisted\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#WAMP_ROUTER_URL=\"ws://127.0.0.1:8080/ws\" USE_TWISTED=1 trial autobahn\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "#\tcoverage -a -d annotated_coverage\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# test under asyncio\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#WAMP_ROUTER_URL=\"ws://127.0.0.1:8080/ws\" USE_ASYNCIO=1 python -m pytest -rsx\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#\tUSE_TWISTED=1 python -m pytest -s -v autobahn/wamp/test/test_auth.py\n\n#\tUSE_TWISTED=1 python -m pytest -s -v autobahn/wamp/test/test_router.py\n\n#\tUSE_ASYNCIO=1 python -m pytest -s -v autobahn/wamp/test/test_router.py\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\tUSE_TWISTED=1 python -m pytest -s -v autobahn/wamp/test/test_router.py\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\ttrial autobahn\n\n#\ttrial autobahn.websocket.test\n\n#\ttrial autobahn.wamp.test\n\n#\ttrial autobahn.wamp.test.test_component\n\n#\ttrial autobahn.wamp.test.test_message\n\n#\ttrial autobahn.wamp.test.test_protocol\n\n#\ttrial autobahn.wamp.test.test_protocol_peer\n\n#\ttrial autobahn.wamp.test.test_serializer\n\n#\ttrial autobahn.wamp.test.test_uri_pattern\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# run PEP8 check and print statistics\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# run PEP8 check and show source for offending code\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# run autopep8 to automatically transform offending code\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This will run pep8, pyflakes and can skip lines that end with # noqa\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# run PyLint\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# on Unix, check for files with Windows line endings\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# on Windows (Git Bash), check for files with Unix lines endings\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# sudo apt install gource ffmpeg\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\n\n# generate (a special set of) WAMP message classes from FlatBuffers schema\n\n#\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# input .fbs files for schema\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# flatc compiler to use\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# generate schema type library (*.bfbs files)\n",
        "Line" : 227,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# generate schema Python bindings (*.py files)\n",
        "Line" : 231,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# generate schema C++ bindings (*.cpp/hpp files)\n\n# $(FLATC) -o /tmp/gen/ --cpp $(FBSFILES)\n\n# @find /tmp/gen/\n",
        "Line" : 235,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 34
    },
    "docker/Makefile" : {
      "ObjectId" : "27aee41e8ff1c9dcaca9c8850c3f80f64b99d176",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "docker/aarch64/Makefile" : {
      "ObjectId" : "4029b96ef436182149f0ec9313c636ccdef768ca",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\tdocker build \\\n#\t\t--build-arg BUILD_DATE=${BUILD_DATE} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VCS_REF=${AUTOBAHN_PYTHON_VCS_REF} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VERSION=${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-t crossbario/autobahn-python-aarch64:pypy2 \\\n#\t\t-t crossbario/autobahn-python-aarch64:pypy2-${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-f Dockerfile.pypy2 .\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#\tdocker build \\\n#\t\t--build-arg BUILD_DATE=${BUILD_DATE} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VCS_REF=${AUTOBAHN_PYTHON_VCS_REF} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VERSION=${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-t crossbario/autobahn-python-aarch64:pypy3 \\\n#\t\t-t crossbario/autobahn-python-aarch64:pypy3-${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-f Dockerfile.pypy3 .\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tdocker build \\\n#\t\t--build-arg BUILD_DATE=${BUILD_DATE} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VCS_REF=${AUTOBAHN_PYTHON_VCS_REF} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VERSION=${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-t crossbario/autobahn-python-aarch64:cpy2-alpine \\\n#\t\t-t crossbario/autobahn-python-aarch64:cpy2-alpine-${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-f Dockerfile.cpy2-alpine .\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\tdocker build \\\n#\t\t--build-arg BUILD_DATE=${BUILD_DATE} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VCS_REF=${AUTOBAHN_PYTHON_VCS_REF} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VERSION=${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-t crossbario/autobahn-python-aarch64:latest \\\n#\t\t-t crossbario/autobahn-python-aarch64:cpy3-alpine \\\n#\t\t-t crossbario/autobahn-python-aarch64:cpy3-alpine-${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-f Dockerfile.cpy3-alpine .\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\tdocker run -it --rm crossbario/autobahn-python-aarch64:pypy2 uname -a\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:pypy3 uname -a\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:cpy2-alpine uname -a\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:cpy3-alpine uname -a\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tdocker run -it --rm crossbario/autobahn-python-aarch64:pypy2 python -V\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:pypy3 python -V\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:cpy2-alpine python -V\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:cpy3-alpine python -V\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tdocker run -it --rm crossbario/autobahn-python-aarch64:pypy2 python -c \"import autobahn; print('running autobahn-{}'.format(autobahn.__version__))\"\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:pypy3 python -c \"import autobahn; print('running autobahn-{}'.format(autobahn.__version__))\"\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:cpy2-alpine python -c \"import autobahn; print('running autobahn-{}'.format(autobahn.__version__))\"\n\n#\tdocker run -it --rm crossbario/autobahn-python-aarch64:cpy3-alpine python -c \"import autobahn; print('running autobahn-{}'.format(autobahn.__version__))\"\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#docker run -it --rm --link crossbar crossbario/autobahn-python-aarch64:pypy2\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#docker run -it --rm --link crossbar crossbario/autobahn-python-aarch64:pypy3\n",
        "Line" : 138,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# FIXME\n\n#docker run -it --rm --link crossbar crossbario/autobahn-python-aarch64:cpy2-alpine\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# FIXME\n\n#docker run -it --rm --link crossbar crossbario/autobahn-python-aarch64:cpy3-alpine\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#\tdocker push crossbario/autobahn-python-aarch64:pypy2\n\n#\tdocker push crossbario/autobahn-python-aarch64:pypy2-${AUTOBAHN_PYTHON_VERSION}\n\n#\tdocker push crossbario/autobahn-python-aarch64:pypy3\n\n#\tdocker push crossbario/autobahn-python-aarch64:pypy3-${AUTOBAHN_PYTHON_VERSION}\n\n#\tdocker push crossbario/autobahn-python-aarch64:cpy2-alpine\n\n#\tdocker push crossbario/autobahn-python-aarch64:cpy2-alpine-${AUTOBAHN_PYTHON_VERSION}\n\n#\tdocker push crossbario/autobahn-python-aarch64:cpy3-alpine\n\n#\tdocker push crossbario/autobahn-python-aarch64:cpy3-alpine-${AUTOBAHN_PYTHON_VERSION}\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "docker/armhf/Makefile" : {
      "ObjectId" : "03da096ae761e8281a9993a542ab2a5a410b59bd",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\tdocker build \\\n#\t\t--build-arg BUILD_DATE=${BUILD_DATE} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VCS_REF=${AUTOBAHN_PYTHON_VCS_REF} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VERSION=${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-t crossbario/autobahn-python-armhf:pypy3 \\\n#\t\t-t crossbario/autobahn-python-armhf:pypy3-${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-f Dockerfile.pypy3 .\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tdocker build \\\n#\t\t--build-arg BUILD_DATE=${BUILD_DATE} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VCS_REF=${AUTOBAHN_PYTHON_VCS_REF} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VERSION=${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-t crossbario/autobahn-python-armhf:cpy2-alpine \\\n#\t\t-t crossbario/autobahn-python-armhf:cpy2-alpine-${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-f Dockerfile.cpy2-alpine .\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tdocker build \\\n#\t\t--build-arg BUILD_DATE=${BUILD_DATE} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VCS_REF=${AUTOBAHN_PYTHON_VCS_REF} \\\n#\t\t--build-arg AUTOBAHN_PYTHON_VERSION=${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-t crossbario/autobahn-python-armhf:latest \\\n#\t\t-t crossbario/autobahn-python-armhf:cpy3-alpine \\\n#\t\t-t crossbario/autobahn-python-armhf:cpy3-alpine-${AUTOBAHN_PYTHON_VERSION} \\\n#\t\t-f Dockerfile.cpy3-alpine .\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#docker run -it --rm crossbario/autobahn-python-armhf:pypy3 uname -a\n\n#docker run -it --rm crossbario/autobahn-python-armhf:cpy2-alpine uname -a\n\n#docker run -it --rm crossbario/autobahn-python-armhf:cpy3-alpine uname -a\n",
        "Line" : 92,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#docker run -it --rm crossbario/autobahn-python-armhf:pypy3 python -V\n\n#docker run -it --rm crossbario/autobahn-python-armhf:cpy2-alpine python -V\n\n#docker run -it --rm crossbario/autobahn-python-armhf:cpy3-alpine python -V\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#docker run -it --rm crossbario/autobahn-python-armhf:pypy3 python -c \"import autobahn; print('running autobahn-{}'.format(autobahn.__version__))\"\n\n#docker run -it --rm crossbario/autobahn-python-armhf:cpy2-alpine python -c \"import autobahn; print('running autobahn-{}'.format(autobahn.__version__))\"\n\n#docker run -it --rm crossbario/autobahn-python-armhf:cpy3-alpine python -c \"import autobahn; print('running autobahn-{}'.format(autobahn.__version__))\"\n",
        "Line" : 116,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# FIXME\n\n#docker run -it --rm --link crossbar crossbario/autobahn-python-armhf:pypy3\n",
        "Line" : 136,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# FIXME\n\n#docker run -it --rm --link crossbar crossbario/autobahn-python-armhf:cpy2-alpine\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# FIXME\n\n#docker run -it --rm --link crossbar crossbario/autobahn-python-armhf:cpy3-alpine\n",
        "Line" : 144,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#docker push crossbario/autobahn-python-armhf:pypy3\n\n#docker push crossbario/autobahn-python-armhf:pypy3-${AUTOBAHN_PYTHON_VERSION}\n\n#docker push crossbario/autobahn-python-armhf:cpy2-alpine\n\n#docker push crossbario/autobahn-python-armhf:cpy2-alpine-${AUTOBAHN_PYTHON_VERSION}\n\n#docker push crossbario/autobahn-python-armhf:cpy3-alpine\n\n#docker push crossbario/autobahn-python-armhf:cpy3-alpine-${AUTOBAHN_PYTHON_VERSION}\n",
        "Line" : 167,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 10
    },
    "docker/x86_64/Makefile" : {
      "ObjectId" : "5798da2211feef220c9a50490eb89b9b881aaf34",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "docs/Makefile" : {
      "ObjectId" : "f66225b96b232490382f02b65f4c4d3de5ac32ad",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/Makefile" : {
      "ObjectId" : "8235f87e4bbc0e3443568393da763fbf72d59c59",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# run PEP8 check and print statistics\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# run PEP8 check and show source for offending code\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# pep8 --select=E231 --show-source\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This will run pep8, pyflakes and can skip lines that end with # noqa\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\tflake8 --ignore=E501,E901,F401,F403,F811,F821,F841 .\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/twisted/websocket/echo_site/Makefile" : {
      "ObjectId" : "a66820bd39561a3eb38916a2d09df66b06bba125",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/twisted/websocket/echo_variants/Makefile" : {
      "ObjectId" : "13e76d4bb561cc7f8629f62d8d2043a122d4c1f0",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/twisted/websocket/pingpong_keepalive/Makefile" : {
      "ObjectId" : "8d13105501c13b74f57fb0825804f06b683fdfcb",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/twisted/websocket/wrapping/Makefile" : {
      "ObjectId" : "c1f782b6980a4de7da9876e1b0e19f3353e35f7d",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "wstest/Makefile" : {
      "ObjectId" : "43344b9c9e02d7fddf51c2009301234351cda5b8",
      "LastModified" : "2018-04-09T13:34:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# test individual server flavor - note that this will only\n\n# produce a single report each, and it cannot be combined into\n\n# a single report! here is the comment from wstest.py\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# allow overriding servers from command line option, providing 1 server\n\n# this is semi-useful, as you cannot accumulate a combined report for\n\n# multiple servers by running wstest over and over again. the generated\n\n# report is only for the last invocation - it would require a massive\n\n# code restructering / rewriting to change that. no time for that unfort.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# THIS DOES NOT WORK TO PRODUCE THE FINAL COMBINED REPORT FOR ALL SERVERS!\n\n# see above.\n\n#test_server: \\\n#\ttest_tx_server \\\n#\ttest_aio_server\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 12
  },
  "ElapsedTime" : 2595
}