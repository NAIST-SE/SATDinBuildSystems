{
  "Repository" : "30997351",
  "Revision" : "HEAD",
  "ObjectId" : "2a4edac33e4047eef58b9acb7b860514e8786d54",
  "CommitTime" : "2019-03-13T16:57:43Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "3051f28a53d129d63484c7e5dadb8498d258589c",
      "LastModified" : "2019-03-13T16:54:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: the minor version must match the lastest UI version\n",
        "Line" : 12,
        "CharPositionInLine" : 22
      },
      "1" : {
        "Text" : "# PRE-CHECKS\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#else()\n\n#  message (FATAL_ERROR \"Invalid compiler!\")\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OPTIONS\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 1.x had a different default value\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#option (LOCAL_BOOST \"Use local boost headers\" OFF)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#option (OPENSSL_MSVC \"Use MSVC build openssl (only for Windows)\" OFF)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# With clang: http://clang.llvm.org/docs/AddressSanitizer.html\n",
        "Line" : 63,
        "CharPositionInLine" : 50
      },
      "8" : {
        "Text" : "# STATIC/SHARED\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# http://cmake.3232098.n2.nabble.com/Howto-compile-static-executable-td5580269.html\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(STATUS \"CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}\")\n\n#message(STATUS \"CMAKE_EXE_LINK_DYNAMIC_C_FLAGS: ${CMAKE_EXE_LINK_DYNAMIC_C_FLAGS}\")\n\n#message(STATUS \"CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS: ${CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS}\")\n\n#message(STATUS \"CMAKE_SHARED_LIBRARY_C_FLAGS: ${CMAKE_SHARED_LIBRARY_C_FLAGS}\")\n\n#message(STATUS \"CMAKE_SHARED_LIBRARY_CXX_FLAGS: ${CMAKE_SHARED_LIBRARY_CXX_FLAGS}\")\n\n#message(STATUS \"CMAKE_SHARED_LIBRARY_LINK_C_FLAGS: ${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS}\")\n\n#message(STATUS \"CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS: ${CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS}\")\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Boost UUID uses getrandom() kernel call, which is not supported on older platforms (which can't be detected by Boost with static builds)\n\n# https://github.com/boostorg/uuid/issues/91\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "## DEPENDENCIES\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Shared LevelDB libraries are linked against Snappy already\n\n# We need to link against Snappy manually when making portable builds\n\n# (old hash databases wouldn't work otherwise)\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# PATHS\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#find_program(GIT_EXECUTABLE git PATHS /sw/bin)\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#if (GIT_EXECUTABLE)\n\n#\t# Version number for the library naming and UI installation\n\n#\texecute_process (COMMAND ${GIT_EXECUTABLE} describe --tags --abbrev=0\n\n#\t\t\t\t\t\t\t\t\t WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n\n#\t\t\t\t\t\t\t\t\t OUTPUT_VARIABLE GIT_TAG\n\n#\t\t\t\t\t\t\t\t\t ERROR_VARIABLE DUMMYERROR\n\n#\t\t\t\t\t\t\t\t\t OUTPUT_STRIP_TRAILING_WHITESPACE)\n\n#\tif (GIT_TAG)\n\n#\t\tmessage (STATUS \"-- Git tag: ${GIT_TAG}\")\n\n#\t\tset (SOVERSION ${GIT_TAG})\n\n#\tendif(GIT_TAG)\n\n#endif (GIT_EXECUTABLE)\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# SCRIPTS\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Version information for the client\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Generate StringDefs.cpp\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# 1.0.0 and 1.0.1 searched for a wrong command\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# COMPILING DEFINITIONS\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disable ABI change notification spam\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# llvm-symbolizer must be on the path.\n\n# Ubuntu: ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-3.8/bin/llvm-symbolizer ASAN_OPTIONS=suppressions=MyASan.supp\n\n# MyASan.supp: interceptor_via_lib:libminiupnpc.so\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#if (NOT CMAKE_BUILD_TYPE MATCHES \"Debug\" AND NOT ARM_OPTIMIZE_FULL)\n\n#  if (CMAKE_SYSTEM_PROCESSOR STREQUAL \"arm\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"armv7l\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"armv6l\")\n\n#    set (CMAKE_CXX_FLAGS_RELEASE \"-DNDEBUG -Os\")\n\n#    set (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-DNDEBUG -Os -g\")\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#    message (STATUS \"---------------------------------------------------------------------------------------------------------\")\n\n#    message (STATUS \"IMPORTANT\")\n\n#    message (STATUS \"Certain code optimizations are disabled by default on ARM architectures due to possible stability issues\")\n\n#    message (STATUS \"If you want to compile the client with full optimizations enabled, run cmake with the option -DARM_OPTIMIZE_FULL=1 (please report back your findings if there are no issues)\")\n\n#    message (STATUS \"More information: https://github.com/airdcpp-web/airdcpp-webclient/issues/141#issuecomment-233186424\")\n\n#    message (STATUS \"---------------------------------------------------------------------------------------------------------\")\n\n#  endif()\n\n#endif()\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# FILES TO COMPILE\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# REPORT\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# WEB UI\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "airdcpp-core/CMakeLists.txt" : {
      "ObjectId" : "dd68d231a89b1c509ad2986ae4603c8795105adf",
      "LastModified" : "2018-01-16T19:38:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# WINDOWS\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# APPLE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OPTIONAL LIBRARIES\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if (SNAPPY_FOUND)\n\n#  list (APPEND airdcpp_extra_libs ${SNAPPY_LIBRARIES})\n\n#endif (SNAPPY_FOUND)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GENERIC COMPILING PROPERTIES\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# LINKING\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#if (WIN32)\n\n#   set_property(TARGET airdcpp PROPERTY COMPILE_FLAGS)\n\n#else(WIN32)\n\n#   set_property(TARGET airdcpp PROPERTY COMPILE_FLAGS -fPIC)\n\n#endif (WIN32)\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# INSTALLATION\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "airdcpp-webapi/CMakeLists.txt" : {
      "ObjectId" : "b7f2184249e6e5e2c34f1ab99bb738eb0a6a7178",
      "LastModified" : "2018-03-11T11:32:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ######### General setup ##########\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "airdcppd/CMakeLists.txt" : {
      "ObjectId" : "664eebe9dd837ed1c7c69300802e83390997c18c",
      "LastModified" : "2018-11-03T11:17:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# actual target:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if (APPLE)\n\n#  install (FILES ${PROJECT_NAME}.desktop DESTINATION ${PROJECT_NAME_GLOBAL}.app/applications)\n\n#else (APPLE)\n\n#  if (UNIX)\n\n#    install (FILES ${PROJECT_NAME}.desktop DESTINATION ${SHARE_DIR}/applications)\n\n#  endif (UNIX)\n\n#endif (APPLE)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckAtomic.cmake" : {
      "ObjectId" : "b1c2d85a8df6e717d978293362d3d2958e5ba235",
      "LastModified" : "2016-11-19T13:43:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CHECK_CXX_SOURCE_COMPILES(\"int main() { long* temp=0; long ret=__sync_add_and_fetch(temp, 1); return 0; }\" HAS_BUILTIN_SYNC_ADD_AND_FETCH)\n\n# CHECK_CXX_SOURCE_COMPILES(\"int main() { long* temp=0; long ret=__sync_sub_and_fetch(temp, 1); return 0; }\" HAS_BUILTIN_SYNC_SUB_AND_FETCH)\n\n# CHECK_CXX_SOURCE_COMPILES(\"int main() { long *temp = 0; long ret=__sync_val_compare_and_swap(temp, 1, 1); return 0; }\" HAS_BUILTIN_SYNC_VAL_COMPARE_AND_SWAP)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindBacktrace.cmake" : {
      "ObjectId" : "b7d869cbb143172f4992a02e64d14702dcba871c",
      "LastModified" : "2016-11-19T13:43:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindBacktrace\n\n# -------------\n\n#\n\n# Find provider for backtrace(3).\n\n#\n\n# Checks if OS supports backtrace(3) via either libc or custom library.\n\n# This module defines the following variables:\n\n#\n\n# ``Backtrace_HEADER``\n\n#   The header file needed for backtrace(3). Cached.\n\n#   Could be forcibly set by user.\n\n# ``Backtrace_INCLUDE_DIRS``\n\n#   The include directories needed to use backtrace(3) header.\n\n# ``Backtrace_LIBRARIES``\n\n#   The libraries (linker flags) needed to use backtrace(3), if any.\n\n# ``Backtrace_FOUND``\n\n#   Is set if and only if backtrace(3) support detected.\n\n#\n\n# The following cache variables are also available to set or use:\n\n#\n\n# ``Backtrace_LIBRARY``\n\n#   The external library providing backtrace, if any.\n\n# ``Backtrace_INCLUDE_DIR``\n\n#   The directory holding the backtrace(3) header.\n\n#\n\n# Typical usage is to generate of header file using configure_file() with the\n\n# contents like the following::\n\n#\n\n#  #cmakedefine01 Backtrace_FOUND\n\n#  #if Backtrace_FOUND\n\n#  # include <${Backtrace_HEADER}>\n\n#  #endif\n\n#\n\n# And then reference that generated header file in actual source.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2013 Vadim Zhukov\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include(FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List of variables to be provided to find_package_handle_standard_args()\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# First, check if we already have backtrace(), e.g., in libc\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Avoid repeating the message() call below each time CMake is run.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check for external library, for non-glibc systems\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# OpenBSD has libbacktrace renamed to libexecinfo\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# respect user wishes\n",
        "Line" : 87,
        "CharPositionInLine" : 15
      },
      "9" : {
        "Text" : "# Prepend list with library path as it's more common practice\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "cmake/FindIconv.cmake" : {
      "ObjectId" : "b48e3b3b75d7c730ecf0d63fd00b3af8216477c5",
      "LastModified" : "2016-11-19T13:43:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindLevelDB.cmake" : {
      "ObjectId" : "28bae2cf2cfc9a16b56a147f135bdf60b4ac3801",
      "LastModified" : "2016-11-19T13:43:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find libleveldb.a - key/value storage system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_library(LevelDB_LIBRARY NAMES libleveldb.a libleveldb.lib)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindLibNatpmp.cmake" : {
      "ObjectId" : "d988cafdf7bba14e1d7d1c160532f0ffde7de806",
      "LastModified" : "2016-11-19T13:43:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find libnatpmp.a - port mapper\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_library(LibNatpmp_LIBRARY NAMES libnatpmp.a libnatpmp.lib)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindMaxMindDB.cmake" : {
      "ObjectId" : "69e5527f3ad1f960e64ba8c952193d3db9fcd8f6",
      "LastModified" : "2018-11-03T11:17:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find MaxMindDB headers and libraries\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  LIBMAXMINDDB_ROOT_DIR     Set this variable to the root installation of\n\n#                            libmaxminddb if the module has problems finding the\n\n#                            proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  LIBMAXMINDDB_FOUND                   System has GeoIP libraries and headers\n\n#  LIBMAXMINDDB_LIBRARY                 The GeoIP library\n\n#  LIBMAXMINDDB_INCLUDE_DIR             The location of GeoIP headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are just going to prefer static linking for this plugin.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if (LIBMAXMINDDB_FOUND)\n\n#    include(CheckCXXSourceCompiles)\n\n#    set(CMAKE_REQUIRED_INCLUDES ${LIBMAXMINDDB_INCLUDE_DIR})\n\n#    check_cxx_source_compiles(\"\n\n#    #include \"maxminddb.h\"\n\n#    int main() { GEOIP_COUNTRY_EDITION_V6; return 0; }\n\n#    \" HAVE_GEOIP_COUNTRY_EDITION_V6)\n\n#    check_cxx_source_compiles(\"\n\n#    #include <GeoIPCity.h>\n\n#    int main() { GEOIP_CITY_EDITION_REV0_V6; return 0; }\n\n#    \" HAVE_GEOIP_CITY_EDITION_REV0_V6)\n\n#    set(CMAKE_REQUIRED_INCLUDES)\n\n#endif ()\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindMiniupnpc.cmake" : {
      "ObjectId" : "ad36c04354d9d8246faa84b0eb088ce8f73c4641",
      "LastModified" : "2018-11-03T11:17:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindSnappy.cmake" : {
      "ObjectId" : "e9053afc4f79f44da306495429bf3f0e6a7c9d95",
      "LastModified" : "2018-11-03T11:17:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Licensed to the Apache Software Foundation (ASF) under one\n\n# or more contributor license agreements.  See the NOTICE file\n\n# distributed with this work for additional information\n\n# regarding copyright ownership.  The ASF licenses this file\n\n# to you under the Apache License, Version 2.0 (the\n\n# \"License\"); you may not use this file except in compliance\n\n# with the License.  You may obtain a copy of the License at\n\n#\n\n#   http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing,\n\n# software distributed under the License is distributed on an\n\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\n# KIND, either express or implied.  See the License for the\n\n# specific language governing permissions and limitations\n\n# under the License.\n\n#\n\n# Tries to find Snappy headers and libraries.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#  find_package(Snappy)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  SNAPPY_ROOT_DIR  Set this variable to the root installation of\n\n#                    Snappy if the module has problems finding\n\n#                    the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  SNAPPY_FOUND              System has Snappy libs/headers\n\n#  SNAPPY_LIBRARIES          The Snappy libraries\n\n#  SNAPPY_INCLUDE_DIR        The location of Snappy headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindTBB.cmake" : {
      "ObjectId" : "035a84e97067fbdb0c9b7bed557e93cfc0cab03a",
      "LastModified" : "2018-11-03T11:17:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# TBB can be found at http://www.threadingbuildingblocks.org/\n\n# Written by Hannes Hofmann, hannes.hofmann _at_ informatik.uni-erlangen.de\n\n# Adapted by Gino van den Bergen gino _at_ dtecta.com\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n#   e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n#   TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n#   in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# For backwards compatibility, you may explicitly set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE     [ ia32 | em64t | itanium ]\n\n#   which architecture to use\n\n# TBB_COMPILER         e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n#   which compiler to use (detected automatically on Windows)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# lets try in the obvious places first\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8   em64t/vc9\n\n# has ia32/vc7.1  ia32/vc8   ia32/vc9\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# MAC\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# has only one flavor: ia32/cc4.0.1_os10.4.9\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# LINUX\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21  em64t/cc3.3.3_libc2.3.3_kernel2.6.5  em64t/cc3.4.3_libc2.3.4_kernel2.6.9  em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# sanity check\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Undeprecated to allow for Windows use. \n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#-- Look for debug libraries\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 24
    },
    "cmake/Findwebsocketpp.cmake" : {
      "ObjectId" : "8a00bc72546a33687292eac9a025f20d5897a5ab",
      "LastModified" : "2018-11-03T11:17:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find websocketpp\n\n# Once done this will define\n\n#  Websocketpp_FOUND - System has websocketpp\n\n#  Websocketpp_INCLUDE_DIRS - The websocketpp include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set Websocketpp_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "62cd23db987b85040a47799c88a720a5c8e2952d",
      "LastModified" : "2018-11-03T11:17:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2017 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# strict checking for break() command\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 209,
        "CharPositionInLine" : 7
      },
      "19" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# remove from head\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 344,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# option with separate argument\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# remember option\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# option with joined argument\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# flush remembered option\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 422,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# add target compile flags\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# target compile options\n",
        "Line" : 444,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 451,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 462,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 482,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 494,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# platform specific flags\n",
        "Line" : 505,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# default include dirs\n",
        "Line" : 540,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 547,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 559,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# target include directories\n",
        "Line" : 571,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 583,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 591,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 687,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# target export define symbol\n",
        "Line" : 691,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 696,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# target compile definitions\n",
        "Line" : 705,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 714,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 723,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 739,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 894,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 983,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1027,
        "CharPositionInLine" : 3
      },
      "55" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1035,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1038,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# header is outside\n",
        "Line" : 1052,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1063,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# check header file extension\n",
        "Line" : 1073,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1086,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1091,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# GCC like output\n",
        "Line" : 1100,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1116,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1119,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1121,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# then separate lines\n",
        "Line" : 1123,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1126,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1144,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# update stack\n",
        "Line" : 1154,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1170,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1172,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1179,
        "CharPositionInLine" : 5
      },
      "73" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1188,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1200,
        "CharPositionInLine" : 5
      },
      "75" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1238,
        "CharPositionInLine" : 1
      },
      "76" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1254,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1405,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# create empty log file\n",
        "Line" : 1446,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1462,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1499,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# append to list\n",
        "Line" : 1508,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1511,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1515,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# append to list\n",
        "Line" : 1520,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1526,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1533,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# append to list\n",
        "Line" : 1538,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1541,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1546,
        "CharPositionInLine" : 3
      },
      "90" : {
        "Text" : "# append to list\n",
        "Line" : 1555,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1558,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1562,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# append to list\n",
        "Line" : 1567,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1573,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1592,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# append to list\n",
        "Line" : 1603,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1610,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1617,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# append to list\n",
        "Line" : 1626,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1629,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1637,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# append to list\n",
        "Line" : 1649,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1656,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1663,
        "CharPositionInLine" : 3
      },
      "105" : {
        "Text" : "# append to list\n",
        "Line" : 1678,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1689,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1708,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# append to list\n",
        "Line" : 1716,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1722,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1729,
        "CharPositionInLine" : 3
      },
      "111" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1734,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1739,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# append to list\n",
        "Line" : 1744,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1747,
        "CharPositionInLine" : 3
      },
      "116" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1751,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# append to list\n",
        "Line" : 1757,
        "CharPositionInLine" : 3
      },
      "118" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1760,
        "CharPositionInLine" : 3
      },
      "119" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1766,
        "CharPositionInLine" : 3
      },
      "120" : {
        "Text" : "# append to list\n",
        "Line" : 1774,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1780,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1787,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# append to list\n",
        "Line" : 1789,
        "CharPositionInLine" : 5
      },
      "124" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1792,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1797,
        "CharPositionInLine" : 3
      },
      "126" : {
        "Text" : "# append to list\n",
        "Line" : 1810,
        "CharPositionInLine" : 5
      },
      "127" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1818,
        "CharPositionInLine" : 5
      },
      "128" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1827,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# append to list\n",
        "Line" : 1829,
        "CharPositionInLine" : 5
      },
      "130" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1832,
        "CharPositionInLine" : 5
      },
      "131" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1869,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Newer versions of Clang and GCC seem to embed a compilation timestamp into the precompiled header binary,\n\n# which results in \"file has been modified since the precompiled header was built\" errors if ccache is used.\n\n# We work around the problem by disabling ccache upon pre-compiling the prefix header.\n",
        "Line" : 1874,
        "CharPositionInLine" : 3
      },
      "133" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1893,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1897,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1904,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1907,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1946,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1965,
        "CharPositionInLine" : 1
      },
      "139" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 2008,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 2019,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 2022,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2093,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2098,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2101,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2104,
        "CharPositionInLine" : 4
      },
      "146" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2107,
        "CharPositionInLine" : 4
      },
      "147" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2139,
        "CharPositionInLine" : 1
      },
      "148" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2143,
        "CharPositionInLine" : 2
      },
      "149" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2148,
        "CharPositionInLine" : 2
      },
      "150" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2165,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2178,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2203,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2208,
        "CharPositionInLine" : 3
      },
      "154" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2215,
        "CharPositionInLine" : 1
      },
      "155" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2218,
        "CharPositionInLine" : 1
      },
      "156" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2223,
        "CharPositionInLine" : 1
      },
      "157" : {
        "Text" : "# generate target script file\n",
        "Line" : 2246,
        "CharPositionInLine" : 1
      },
      "158" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2251,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2265,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2274,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2276,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2280,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2289,
        "CharPositionInLine" : 3
      },
      "164" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2311,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2316,
        "CharPositionInLine" : 3
      },
      "166" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2323,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2329,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2336,
        "CharPositionInLine" : 3
      },
      "169" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2339,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2346,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2353,
        "CharPositionInLine" : 1
      },
      "172" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2355,
        "CharPositionInLine" : 1
      },
      "173" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2419,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2430,
        "CharPositionInLine" : 3
      },
      "175" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2441,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2449,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2453,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2457,
        "CharPositionInLine" : 3
      },
      "179" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2479,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2485,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2494,
        "CharPositionInLine" : 3
      },
      "182" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2502,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2532,
        "CharPositionInLine" : 1
      },
      "184" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2550,
        "CharPositionInLine" : 1
      },
      "185" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2555,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2580,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2589,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2598,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2605,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2780,
        "CharPositionInLine" : 3
      },
      "191" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2784,
        "CharPositionInLine" : 3
      },
      "192" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2798,
        "CharPositionInLine" : 3
      },
      "193" : {
        "Text" : "# use all available cores\n",
        "Line" : 2818,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2843,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2850,
        "CharPositionInLine" : 1
      },
      "196" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2860,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2865,
        "CharPositionInLine" : 1
      },
      "198" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2867,
        "CharPositionInLine" : 2
      },
      "199" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2876,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2886,
        "CharPositionInLine" : 4
      },
      "201" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2893,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2897,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2925,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2930,
        "CharPositionInLine" : 4
      },
      "205" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2945,
        "CharPositionInLine" : 2
      },
      "206" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2966,
        "CharPositionInLine" : 3
      },
      "207" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2974,
        "CharPositionInLine" : 3
      },
      "208" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2997,
        "CharPositionInLine" : 4
      },
      "209" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 3009,
        "CharPositionInLine" : 1
      },
      "210" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 3019,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 3022,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 3027,
        "CharPositionInLine" : 2
      },
      "213" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 3037,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# generate unity target\n",
        "Line" : 3044,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# depend on original target's automoc target, if it exists\n",
        "Line" : 3051,
        "CharPositionInLine" : 2
      },
      "216" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 3057,
        "CharPositionInLine" : 3
      },
      "217" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3065,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3075,
        "CharPositionInLine" : 3
      },
      "219" : {
        "Text" : "# copy output name\n",
        "Line" : 3100,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3108,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# copy compile features\n",
        "Line" : 3120,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3125,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3133,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3144,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3147,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3153,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3169,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3177,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3182,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3206,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# resolve alias\n",
        "Line" : 3218,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3226,
        "CharPositionInLine" : 1
      },
      "233" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3242,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3247,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3296,
        "CharPositionInLine" : 4
      },
      "236" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3358,
        "CharPositionInLine" : 1
      },
      "237" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3445,
        "CharPositionInLine" : 1
      },
      "238" : {
        "Text" : "# include target script if available\n",
        "Line" : 3457,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3459,
        "CharPositionInLine" : 2
      },
      "240" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3475,
        "CharPositionInLine" : 1
      },
      "241" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3495,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3498,
        "CharPositionInLine" : 3
      },
      "243" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3517,
        "CharPositionInLine" : 3
      },
      "244" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3520,
        "CharPositionInLine" : 3
      },
      "245" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3588,
        "CharPositionInLine" : 3
      },
      "246" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3591,
        "CharPositionInLine" : 3
      },
      "247" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3614,
        "CharPositionInLine" : 1
      },
      "248" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3651,
        "CharPositionInLine" : 3
      },
      "249" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3685,
        "CharPositionInLine" : 2
      },
      "250" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3699,
        "CharPositionInLine" : 3
      },
      "251" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3706,
        "CharPositionInLine" : 1
      },
      "252" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3759,
        "CharPositionInLine" : 1
      },
      "253" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3831,
        "CharPositionInLine" : 1
      },
      "254" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3995,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 255
    }
  },
  "FileTypes" : {
    "CMAKE" : 15
  },
  "ElapsedTime" : 1655
}