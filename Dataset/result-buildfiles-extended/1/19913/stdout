{
  "Repository" : "19913",
  "Revision" : "HEAD",
  "ObjectId" : "93c875e35d9f6ff655ef6efcdf81b54d86f19579",
  "CommitTime" : "2016-09-16T08:24:26Z",
  "Files" : {
    "BuildAQ32/Makefile" : {
      "ObjectId" : "1842d59ce77128c743749b15c6b9f977f90004a0",
      "LastModified" : "2013-01-27T11:26:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hey Emacs, this is a -*- makefile -*-\n\n#----------------------------------------------------------------------------\n\n# WinAVR Makefile Template written by Eric B. Weddington, Jï¿½rg Wunsch, et al.\n\n#\n\n# Released to the Public Domain\n\n#\n\n# Additional material for this makefile was written by:\n\n# Peter Fleury\n\n# Tim Henigan\n\n# Colin O'Flynn\n\n# Reiner Patommel\n\n# Markus Pfaff\n\n# Sander Pool\n\n# Frederik Rouleau\n\n# Carlos Lamas\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging, \n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#BUILDTYPE ?= XMEGA\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#BOARD ?= aeroquad32f1\n\n#BOARD ?= aeroquad32mini\n\n#BOARD\t= discovery_f4\n\n#BOARD ?= freeflight\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ADDITIONALDEFINES = -DSENSORBOARD_ALA42\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MCU name\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#-fshort-double\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Guess the MCU based on the BOARD (can be overridden )\n",
        "Line" : 76,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "##### Uncomment the -nostartfiles if compiling on OS X #####\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set up build rules and some useful templates\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Some target specific things\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Processor frequency.\n\n#     This will define a symbol, F_CPU, in all source code files equal to the \n\n#     processor frequency. You can then use this symbol in your source code to \n\n#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done\n\n#     automatically to create a 32-bit value in your source code.\n\n#     Typical values are:\n\n#         F_CPU =  1000000\n\n#         F_CPU =  1843200\n\n#         F_CPU =  2000000\n\n#         F_CPU =  3686400\n\n#         F_CPU =  4000000\n\n#         F_CPU =  7372800\n\n#         F_CPU =  8000000\n\n#         F_CPU = 11059200\n\n#         F_CPU = 14745600\n\n#         F_CPU = 16000000\n\n#         F_CPU = 18432000\n\n#         F_CPU = 20000000\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Object files directory\n\n#     To put object files in current directory, use a dot (.), do NOT make\n\n#     this an empty or blank macro!\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# added a dummy directory as BASEDIR is ..\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Target file name (without extension).\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# List C++ source files here. (C dependencies are automatically generated.)\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#CPPSRC += #$(SRCDIR)/Median.cpp $(SRCDIR)/Smooth.cpp $(SRCDIR)/MS561101BA.cpp\n\n#CPPSRC += $(SRCDIR)/MS561101BA.cpp\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#CPPSRC += $(LIBDIR)/AQ_Gps/TinyGPS.cpp\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n\n#     Even though the DOS/Win* filesystem matches both .s and .S the same,\n\n#     it will preserve the spelling of the filenames, and gcc itself does\n\n#     care about how the name is spelled on its command-line.\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s]. \n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n\n#EXTRAINCDIRS = arduinoXMega arduinoXMega/Libraries\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Place -D or -U options here for C sources\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Place -D or -U options here for ASM sources\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Place -D or -U options here for C++ sources\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#CPPDEFS += -D__STDC_LIMIT_MACROS\n\n#CPPDEFS += -D__STDC_CONSTANT_MACROS\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#---------------- Compiler Options C ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#CFLAGS += -fpack-struct\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#CFLAGS += -mshort-calls\n\n#CFLAGS += -fno-unit-at-a-time\n\n#CFLAGS += -Wundef\n\n#CFLAGS += -Wunreachable-code\n\n#CFLAGS += -Wsign-compare\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#CFLAGS += -mcall-prologues\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#---------------- Compiler Options C++ ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#CPPFLAGS += -fpack-struct\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# -gdwarf-2 -MD -MP -MT Print.o -MF dep/Print.o.d  -c  ../arduinoXMega/Print.cpp\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#CPPFLAGS += -mshort-calls\n\n#CPPFLAGS += -fno-unit-at-a-time\n\n#CPPFLAGS += -Wstrict-prototypes\n\n#CPPFLAGS += -Wunreachable-code\n\n#CPPFLAGS += -Wsign-compare\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#CPPFLAGS += -mcall-prologues\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#CPPFLAGS += $(CSTANDARD)\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -adhlns:   create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n\n#  -listing-cont-lines: Sets the maximum number of continuation lines of hex \n\n#       dump that will be displayed for a given single line of source input.\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n\n#PRINTF_LIB = \n\n#PRINTF_LIB = $(PRINTF_LIB_MIN)\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# List any extra directories to look for libraries here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#LDFLAGS += -T linker_script.x\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Programming hardware\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# com1 = serial port. Use lpt1 to connect to parallel port.\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Uncomment the following if you want avrdude's erase cycle counter.\n\n# Note that this counter needs to be initialized first using -Yn,\n\n# see avrdude manual.\n\n#AVRDUDE_ERASE_COUNTER = -y\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Increase verbosity level.  Please use this when submitting bug\n\n# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude> \n\n# to submit bug reports.\n\n#AVRDUDE_VERBOSE = -v -v\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when \n\n#     avarice is running on a different computer.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#============================================================================\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Define all object files.\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Default target.\n\n#all: begin gccversion sizebefore build sizeafter end\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Change the build target to build a HEX file or a library.\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#build: lib\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Display size of file.\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Program the device.  \n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Set device fuses  \n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Read device fuses  \n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Un brick the device with a 1 MHz crystal connected to pin7 (XTAL1  \n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set \n\n#     a breakpoint at main().\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Create library from object files.\n",
        "Line" : 692,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#\t@$(CC) $(ALL_CFLAGS) $^ AeroQuad32/libm.a $(RUNTIMELIB) $(LIB_MAPLE_HOME)/build/libmaple/syscalls.o --output $@ $(LDFLAGS)\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Compile: create object files from C source files.\n\n#@$(CC) -c $(ALL_CFLAGS) $< -o $@\n",
        "Line" : 711,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Compile: create object files from C++ source files.\n\n#@$(CC) -c $(ALL_CPPFLAGS) $< -o $@\n\n#$(CC) -c $(ALL_CPPFLAGS) $(abspath $<) -o $@ $(VS_TRIM_ERRORS)\n",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 728,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Compile: create assembler files from C++ source files.\n",
        "Line" : 733,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 745,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 750,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Create object files directory\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "#$(shell mkdir -p $(OBJDIR) $(OBJDIR)/$(SRCDIR) $(OBJDIR)/$(SRCDIRAQ32) $(OBJDIR)/$(MCDIR) $(OBJDIR)/arduinoXMega $(OBJDIR)/arduinoXMega/Libraries $(OBJDIR)/$(LIBDIR)  $(OBJDIR)/$(LIBDIR)/AQ_Gps $(OBJDIR)/$(LIBDIR)/AQ_I2C $(OBJDIR)/$(LIBDIR)/AQ_Math 2>/dev/null)\n",
        "Line" : 767,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 770,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 774,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 100
    },
    "Libmaple/libmaple/Makefile" : {
      "ObjectId" : "6e5e83f422cecc9980670d2d00b2782c0456b1c5",
      "LastModified" : "2013-01-27T11:26:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Try \"make help\" for more information on BOARD and MEMORY_TARGET;\n\n# these default to a Maple Flash build.\n\n#BOARD ?= maple\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#BOARD ?= aeroquad32f1\n\n#BOARD ?= discovery_f4\n\n#BOARD ?= aeroquad32mini\n\n#BOARD ?= freeflight\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#V=1\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n\n## Useful paths, constants, etc.\n\n##\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Support files for linker\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Support files for this Makefile\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# USB ID for DFU upload\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##\n\n## Target-specific configuration.  This determines some compiler and\n\n## linker options/flags.\n\n##\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# $(BOARD)- and $(MEMORY_TARGET)-specific configuration\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##\n\n## Compilation flags\n\n##\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#GLOBAL_FLAGS += -DDISABLEUSB\n\n#GLOBAL_FLAGS += -DUSB_DISC_OD\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##\n\n## Build rules and useful templates\n\n##\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##\n\n## Set all submodules here\n\n##\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Try to keep LIBMAPLE_MODULES a simply-expanded variable\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Official libraries:\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Experimental libraries:\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Call each module's rules.mk:\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##\n\n## Targets\n\n##\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# main target\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Target upload commands\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Conditionally upload to whatever the last build was\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Force a rebuild if the target changed\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "Libmaple/libmaple/contrib/automake/Makefile.am" : {
      "ObjectId" : "58275cfdf5ccb97acfdc24a2ca39b91cde4a1563",
      "LastModified" : "2013-01-27T11:26:15Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Top level Makefile for libmaple\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The main library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tlibwirish.a\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# noinst_PROGRAMS = \\\n# \tmain\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# main_SOURCES = \\\n# \tstartup2.c \\\n# \tmain.cpp\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Main library\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Libmaple/libmaple/support/ld/libcs3_stm32_src/Makefile" : {
      "ObjectId" : "e04ac390bdd7bcd839b70dcb1a3b8784654fb8a2",
      "LastModified" : "2013-01-27T11:26:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# setup environment\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clean\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Libmaple/libmaple/support/ld/libcs4_stm32_src/Makefile" : {
      "ObjectId" : "d3fd2a3a8397811e11b99b9e99cd7fab11a80c7f",
      "LastModified" : "2013-01-27T11:26:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# setup environment\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clean\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Libmaple/maple-bootloader/Makefile" : {
      "ObjectId" : "7c0503d8fc985f497ac50f3927ac38b9cf60373c",
      "LastModified" : "2013-01-27T11:26:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile skeleton adapted from Peter Harrison's - www.micromouse.com\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MCU name and submodel\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CPUCLASS = STM32F1\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#BOARD    = aeroquad32mini\n\n#MEMORY\t = flash128k_ram20k\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#BOARD    = DiscoveryF4\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# toolchain (using code sourcery now)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Target file name (without extension).\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Optimization level [0,1,2,3,s]\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#DEBUG = dwarf-2\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#CFLAGS += -DUSB_DISC_OD\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Assembler Flags\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#,--g$(DEBUG)\n",
        "Line" : 52,
        "CharPositionInLine" : 46
      },
      "12" : {
        "Text" : "# Set the linker script\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --------------------------------------------- #\n\n# file management\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Define all object files.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Display size of file.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# go!\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Create final output file (.hex) from ELF output file.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Create final output file (.bin) from ELF output file.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Create extended listing file from ELF output file.\n\n# testing: option -C\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Compile: create object files from C source files. ARM/Thumb\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Assemble: create object files from assembler source files. ARM/Thumb\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\t$(REMOVE) $(SRC:.c=.s)\n\n#\t$(REMOVE) $(SRC:.c=.d)\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 5,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1116
}