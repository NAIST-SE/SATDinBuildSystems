{
  "Repository" : "50147448",
  "Revision" : "HEAD",
  "ObjectId" : "7dd701c0f44f4750298ad9bc386d75001d867dca",
  "CommitTime" : "2019-04-12T16:38:20Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "06c8ed0ddd6186da022e7c45c367c5f83ff312a7",
      "LastModified" : "2019-01-12T20:36:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Set module options\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We force disable debugging information in release builds - this is so we override settings in the\n\n# kallistios gnu-wrappers which sometimes pick up -g through the default env vars\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For some reason, I need to explicitly specify the shared file\n\n# on Fedora. This is brittle, but I don't know how best to fix it\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Force the new C++ ABI on GCC\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Don't use OpenAL on DC\n",
        "Line" : 90,
        "CharPositionInLine" : 32
      },
      "7" : {
        "Text" : "# Don't use SDL2 on DC\n",
        "Line" : 93,
        "CharPositionInLine" : 29
      },
      "8" : {
        "Text" : "# We build libGL source files into Simulant directly (see simulant/CMakeLists.txt)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# FIXME: Only do this if we're building samples or tests\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Names without .elf extension\n",
        "Line" : 144,
        "CharPositionInLine" : 27
      },
      "11" : {
        "Text" : "## Add `make uninstall` command\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# uninstall target\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake_modules/FindSDL2.cmake" : {
      "ObjectId" : "745c63d03b02ebca05bffb22ba565d73fa2d004b",
      "LastModified" : "2017-11-18T22:23:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 73,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 74,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 75,
        "CharPositionInLine" : 17
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 97,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 134,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 14
    },
    "cmake_modules/FindSOIL.cmake" : {
      "ObjectId" : "a7cfcd662c2561aa9273dbd54559064b1f8bf195",
      "LastModified" : "2017-11-18T22:23:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake_modules/FindTinyXML.cmake" : {
      "ObjectId" : "8c1e06523bdc34a007faa68b0112e7e4b9c986f8",
      "LastModified" : "2017-11-18T22:23:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################################\n\n#\n\n# CMake script for finding TinyXML.\n\n#\n\n# Input variables:\n\n#\n\n# - TinyXML_ROOT_DIR (optional): When specified, header files and libraries will be searched for in\n\n# ${TinyXML_ROOT_DIR}/include\n\n# ${TinyXML_ROOT_DIR}/libs\n\n# respectively, and the default CMake search order will be ignored. When unspecified, the default\n\n# CMake search order is used.\n\n# This variable can be specified either as a CMake or environment variable. If both are set,\n\n# preference is given to the CMake variable.\n\n# Use this variable for finding packages installed in a nonstandard location, or for enforcing\n\n# that one of multiple package installations is picked up.\n\n#\n\n#\n\n# Cache variables (not intended to be used in CMakeLists.txt files)\n\n#\n\n# - TinyXML_INCLUDE_DIR: Absolute path to package headers.\n\n# - TinyXML_LIBRARY: Absolute path to library.\n\n#\n\n#\n\n# Output variables:\n\n#\n\n# - TinyXML_FOUND: Boolean that indicates if the package was found\n\n# - TinyXML_INCLUDE_DIRS: Paths to the necessary header files\n\n# - TinyXML_LIBRARIES: Package libraries\n\n#\n\n#\n\n# Example usage:\n\n#\n\n# find_package(TinyXML)\n\n# if(NOT TinyXML_FOUND)\n\n# # Error handling\n\n# endif()\n\n# ...\n\n# include_directories(${TinyXML_INCLUDE_DIRS} ...)\n\n# ...\n\n# target_link_libraries(my_target ${TinyXML_LIBRARIES})\n\n#\n\n##################################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get package location hint from environment variable (if any)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search path for nonstandard package locations\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Output variables generation\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Enforce case-correctness: Set appropriately cased variable...\n",
        "Line" : 68,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "# ...and unset uppercase variable generated by find_package_handle_standard_args\n",
        "Line" : 69,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 7
    },
    "cmake_modules/simulant-config.cmake" : {
      "ObjectId" : "5de7114eb8f84fe47eecbf8d99285abc7573a294",
      "LastModified" : "2017-11-18T22:23:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This file is for other projects to use, so that they can locate SIMULANT\n\n#using cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/CMakeLists.txt" : {
      "ObjectId" : "560727c206f3369ff30bc522e2e44c6e749b13d2",
      "LastModified" : "2018-11-05T10:28:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "simulant/CMakeLists.txt" : {
      "ObjectId" : "3d8aad2a0060085cf699d7d00d05d4e1f522dff8",
      "LastModified" : "2018-11-05T10:28:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remove all the renderer files so we can add them specifically\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DC build doesn't need glad, GL1 is available directly\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We build in libGL directly for the Dreamcast build because we use a custom fork and this is the easiest\n\n# way to prevent mishaps in linking with the upstream version\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "fd400ae0d78a19d1a8d4e0cb298123dd94dda70f",
      "LastModified" : "2019-04-07T06:53:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the root directory so that we can include from \"simulant/X\" in tests\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchains/Dreamcast.cmake" : {
      "ObjectId" : "b4deffccb2ef454f1d0f9838d2da89ce8e4f723b",
      "LastModified" : "2018-11-21T08:46:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchains/Mingw.cmake" : {
      "ObjectId" : "148cb9fa65e8598941aba3ca0a5a4bdfcf99f53d",
      "LastModified" : "2018-11-05T10:28:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 10
  },
  "ElapsedTime" : 2721
}