{
  "Repository" : "2315796",
  "Revision" : "HEAD",
  "ObjectId" : "56a09f9f2cb628c6af66234ee4d3a2bf082fd302",
  "CommitTime" : "2018-01-11T13:24:57Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f77aceeaa2019bbecf1cf4f50e9af7bd958f02a6",
      "LastModified" : "2018-01-11T12:51:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ====================================\n\n# project name and version\n\n# ====================================\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/BuildBinutils.cmake" : {
      "ObjectId" : "92c8057a7993e41999a5dedf0c3d20b272cd7731",
      "LastModified" : "2015-08-31T17:26:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGMock.cmake" : {
      "ObjectId" : "2f5baec13ec25dd772b87e4484a2d6428981772c",
      "LastModified" : "2012-12-15T08:46:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the Google C++ Mocking Framework.\n\n# (This file is almost an identical copy of the original FindGTest.cmake file,\n\n#  feel free to use it as it is or modify it for your own needs.)\n\n#\n\n#\n\n# Defines the following variables:\n\n#\n\n#   GMOCK_FOUND - Found the Google Testing framework\n\n#   GMOCK_INCLUDE_DIRS - Include directories\n\n#\n\n# Also defines the library variables below as normal\n\n# variables. These contain debug/optimized keywords when\n\n# a debugging library is found.\n\n#\n\n#   GMOCK_BOTH_LIBRARIES - Both libgmock & libgmock-main\n\n#   GMOCK_LIBRARIES - libgmock\n\n#   GMOCK_MAIN_LIBRARIES - libgmock-main\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   GMOCK_ROOT - (as a CMake or environment variable)\n\n#                The root directory of the gmock install prefix\n\n#\n\n#   GMOCK_MSVC_SEARCH - If compiling with MSVC, this variable can be set to\n\n#                       \"MD\" or \"MT\" to enable searching a gmock build tree\n\n#                       (defaults: \"MD\")\n\n#\n\n#-----------------------\n\n# Example Usage:\n\n#\n\n#    find_package(GMock REQUIRED)\n\n#    include_directories(${GMOCK_INCLUDE_DIRS})\n\n#\n\n#    add_executable(foo foo.cc)\n\n#    target_link_libraries(foo ${GMOCK_BOTH_LIBRARIES})\n\n#\n\n#=============================================================================\n\n# This file is released under the MIT licence:\n\n#\n\n# Copyright (c) 2011 Matej Svec\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to\n\n# deal in the Software without restriction, including without limitation the\n\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n\n# sell copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n\n# IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The provided /MD project files for Google Mock add -md suffixes to the\n\n# library names.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindGTest.cmake" : {
      "ObjectId" : "1fd67f039af7943ac369c27bf5b05e2f1e73d47a",
      "LastModified" : "2012-12-15T08:46:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the Google C++ Testing Framework.\n\n#\n\n# Defines the following variables:\n\n#\n\n#   GTEST_FOUND - Found the Google Testing framework\n\n#   GTEST_INCLUDE_DIRS - Include directories\n\n#\n\n# Also defines the library variables below as normal\n\n# variables.  These contain debug/optimized keywords when\n\n# a debugging library is found.\n\n#\n\n#   GTEST_BOTH_LIBRARIES - Both libgtest & libgtest-main\n\n#   GTEST_LIBRARIES - libgtest\n\n#   GTEST_MAIN_LIBRARIES - libgtest-main\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   GTEST_ROOT - (as a CMake or environment variable)\n\n#                The root directory of the gtest install prefix\n\n#\n\n#   GTEST_MSVC_SEARCH - If compiling with MSVC, this variable can be set to\n\n#                       \"MD\" or \"MT\" to enable searching a GTest build tree\n\n#                       (defaults: \"MD\")\n\n#\n\n#-----------------------\n\n# Example Usage:\n\n#\n\n#    enable_testing()\n\n#    find_package(GTest REQUIRED)\n\n#    include_directories(${GTEST_INCLUDE_DIRS})\n\n#\n\n#    add_executable(foo foo.cc)\n\n#    target_link_libraries(foo ${GTEST_BOTH_LIBRARIES})\n\n#\n\n#    add_test(AllTestsInFoo foo)\n\n#\n\n#-----------------------\n\n#\n\n# If you would like each Google test to show up in CTest as\n\n# a test you may use the following macro.\n\n# NOTE: It will slow down your tests by running an executable\n\n# for each test and test fixture.  You will also have to rerun\n\n# CMake after adding or removing tests or test fixtures.\n\n#\n\n# GTEST_ADD_TESTS(executable extra_args ARGN)\n\n#    executable = The path to the test executable\n\n#    extra_args = Pass a list of extra arguments to be passed to\n\n#                 executable enclosed in quotes (or \"\" for none)\n\n#    ARGN =       A list of source files to search for tests & test\n\n#                 fixtures.\n\n#\n\n#  Example:\n\n#     set(FooTestArgs --foo 1 --bar 2)\n\n#     add_executable(FooTest FooUnitTest.cc)\n\n#     GTEST_ADD_TESTS(FooTest \"${FooTestArgs}\" FooUnitTest.cc)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009 Philip Lowman <philip@yhbt.com>\n\n# Copyright 2009 Daniel Blezek <blezek@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# Thanks to Daniel Blezek <blezek@gmail.com> for the GTEST_ADD_TESTS code\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The provided /MD project files for Google Test add -md suffixes to the\n\n# library names.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/FindLibCRPCUT.cmake" : {
      "ObjectId" : "e6f03d1bbb534121bafe1ef39ee7d06fe832314f",
      "LastModified" : "2013-12-26T12:23:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libcrpcut\n\n# Once done this will define\n\n#\n\n#  LIBCRPCUT_FOUND - system has libcrpcut\n\n#  LIBCRPCUT_INCLUDE_DIRS - the libcrpcut include directory\n\n#  LIBCRPCUT_LIBRARIES - Link these to use libcrpcut\n\n#  LIBCRPCUT_DEFINITIONS - Compiler switches required for using libcrpcut\n\n#\n\n# Based on:\n\n#\n\n#  Copyright (c) 2008 Bernhard Walle <bernhard.walle@gmx.de>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBCRPCUT_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindLibCapstone.cmake" : {
      "ObjectId" : "b014f1fcd83595f638100384cacd0749cc3cd6fc",
      "LastModified" : "2015-08-31T17:26:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libcapstone\n\n# Once done this will define\n\n#\n\n#  LIBCAPSTONE_FOUND - system has libcapstone\n\n#  LIBCAPSTONE_INCLUDE_DIRS - the libcapstone include directory\n\n#  LIBCAPSTONE_LIBRARIES - Link these to use libcapstone\n\n#  LIBCAPSTONE_DEFINITIONS - Compiler switches required for using libcapstone\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PATH and INCLUDE will also work\n",
        "Line" : 23,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "# PATH and LIB will also work\n",
        "Line" : 37,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBCAPSTONE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindLibDwarf.cmake" : {
      "ObjectId" : "1fdf020a214dbecd7d1a8a294baee1e41cbdf1fa",
      "LastModified" : "2012-12-21T12:32:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libdwarf\n\n# Once done this will define\n\n#\n\n#  LIBDWARF_FOUND - system has libdwarf\n\n#  LIBDWARF_INCLUDE_DIRS - the libdwarf include directory\n\n#  LIBDWARF_LIBRARIES - Link these to use libdwarf\n\n#  LIBDWARF_DEFINITIONS - Compiler switches required for using libdwarf\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Locate libelf library at first\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PATH and INCLUDE will also work\n",
        "Line" : 27,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "# PATH and LIB will also work\n",
        "Line" : 49,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBDWARF_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindLibElf.cmake" : {
      "ObjectId" : "4a3b78fad74ecdf03c88d10a3f68c34b808b137c",
      "LastModified" : "2012-12-21T12:32:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libelf\n\n# Once done this will define\n\n#\n\n#  LIBELF_FOUND - system has libelf\n\n#  LIBELF_INCLUDE_DIRS - the libelf include directory\n\n#  LIBELF_LIBRARIES - Link these to use libelf\n\n#  LIBELF_DEFINITIONS - Compiler switches required for using libelf\n\n#\n\n#  Copyright (c) 2008 Bernhard Walle <bernhard.walle@gmx.de>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBELF_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindLibGeoIP.cmake" : {
      "ObjectId" : "529886d866bdf7356c6deb7899531ed2fd0f34ab",
      "LastModified" : "2013-12-26T12:23:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GeoIP headers and libraries\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(LibGeoIP)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  LibGeoIP_ROOT_DIR         Set this variable to the root installation of\n\n#                            libGeoIP if the module has problems finding the\n\n#                            proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  LIBGEOIP_FOUND                   System has GeoIP libraries and headers\n\n#  LibGeoIP_LIBRARY                 The GeoIP library\n\n#  LibGeoIP_INCLUDE_DIR             The location of GeoIP headers\n\n#  HAVE_GEOIP_COUNTRY_EDITION_V6    Whether the API support IPv6 country edition\n\n#  HAVE_GEOIP_CITY_EDITION_REV0_V6  Whether the API supports IPv6 city edition\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the static version of the library is preferred on OS X for the\n\n# purposes of making packages (libGeoIP doesn't ship w/ OS X)\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/qt.cmake" : {
      "ObjectId" : "a31a55edad10388b479278b55856800e933eeabf",
      "LastModified" : "2014-01-10T12:17:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "server/CMakeLists.txt" : {
      "ObjectId" : "c90dbc59af1d7c3c575f427adc2a0634efcb624e",
      "LastModified" : "2014-01-10T12:17:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ====================================\n\n# project name and version\n\n# ====================================\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/qt/CMakeLists.txt" : {
      "ObjectId" : "e3137936c2a52df7c1c333466ac787e73c8ac745",
      "LastModified" : "2018-01-11T12:51:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ====================================\n\n# project name and version\n\n# ====================================\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/unit-tests/CMakeLists.txt" : {
      "ObjectId" : "b9dc3865a111ba4a6c1a45218262b3de1c635ef7",
      "LastModified" : "2014-01-10T12:17:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ====================================\n\n# project name and version\n\n# ====================================\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_custom_target (test-binary.mach-o ALL\n\n#  DEPENDS test-binary\n\n#  COMMAND objcopy -O mach-o-i386 ${CMAKE_BINARY_DIR}/test-binary ${CMAKE_BINARY_DIR}/test-binary.mach-o\n\n#)\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "travis/Makefile" : {
      "ObjectId" : "b49173a39242784ef2a0a14da8fdc49c070f770b",
      "LastModified" : "2016-02-09T08:18:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#!/usr/bin/make\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 636
}