{
  "Repository" : "17455557",
  "Revision" : "HEAD",
  "ObjectId" : "95338cf1e4b46e0565d8af95612ca9ec93fcd5b7",
  "CommitTime" : "2019-02-09T14:21:08Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "3f55799ebc592e9019f8852bb46d8bc06da08056",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake cache variables we will augment with out own detected settings\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove the settings we applied from the cached var\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Note: Space after 'part' is important!\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Annoying on MSVC; lots of warnings from inside Boost\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# gcc flags that improve size of binaries\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Default visibility\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Put data into own sections (so the linker discard if unused ones)\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Put functions into own sections (again, so unused ones can be discarded by the linker)\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Clang: Silence this warning\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# gcc, Clang: Aggressively merge constant values\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Force pthreads to be always linked; even if no function as such is used we\n\n# still need thread support to be present.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Use critical sections instead of std::mutex with MSVC\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Build shared libs by default\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The flag is supported, but it may not actually work.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Prefer a static standard lib.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Look for symbolic link options\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Look for section GC options\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Check whether <charconv> supports std::to_chars (..., float)\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Check whether <charconv> supports std::from_chars (..., int)\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Check whether std::string_view is available\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# If we're on a version based off the universal always prefer a dynamic UCRT component\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Automatically make use of 'secure' CRT funtions\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Silence remaining annoyances\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Check for data COMDATs (eq. to gcc's -fdata-sections)\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Check for omission of unused COMDATs\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Apply more optimization flags\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Check for extended optimized build debug info\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# New option in VC 12. Needed when more than one project writes to a PDB\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Interpret source files as UTF-8\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Build everything with -fPIC to allow linking into shared libs\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# LTO configuration\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Set CMAKE_AR/_RANLIB to compiler-specific variants\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Update cache values with config check results\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Save the values we computed for subsequent removal\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Remove some options from default build flags\n\n### FIXME: Also removes user-set options :(\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# More aggressive optimization flags for release configs\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Configuration settings only relevant for building\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Configuration settings exposed to clients\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# All C++ features we require\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# For static builds, require C++ features globally (to avoid conflicts\n\n# between lib and apps due to differing build flags)\n",
        "Line" : 297,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Static linking + static CRT: Need to change flags before building apps\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# S1_PREBUILT: Points to a build tree with an already built libs1, which is then\n\n# used to build s1.\n\n# Useful if the current compiler can't build libs1 itself (due to required\n\n# C++ features not being supported) but s1c should be built nevertheless (e.g.\n\n# to check include files compatibility)\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Make outcome available\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# path to outcome source\n\n# your choice of where to put binaries\n",
        "Line" : 315,
        "CharPositionInLine" : 43
      },
      "44" : {
        "Text" : "# please only lazy build outcome on demand\n",
        "Line" : 317,
        "CharPositionInLine" : 49
      },
      "45" : {
        "Text" : "# Export targets so pointing S1_PREBUILT at build tree works as well\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 46
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "0d80568124ebd60eb1cd4f468de8349827162516",
      "LastModified" : "2017-02-16T19:54:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/examples/CMakeLists.txt" : {
      "ObjectId" : "ae41c62ed49a0c765778eb002745292952501b12",
      "LastModified" : "2017-04-23T13:41:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Target to build all examples\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy s1 lib to S1_EXAMPLES_OUTPUT_DIR\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "### Ideally this would be a add_custom_command() with OUTPUT ${_S1_EXAMPLES_LIB}\n\n### ...but generator expressions are not supported by CMake, so tie to build_examples for now...\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "apps/examples/qml_shader/CMakeLists.txt" : {
      "ObjectId" : "6a24431aa95db1472b9ec16de705df7f08eef850",
      "LastModified" : "2018-09-27T16:15:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/examples/s1c_purec/CMakeLists.txt" : {
      "ObjectId" : "e3f4e82b32944444523cef505c3224cfd768ab2a",
      "LastModified" : "2017-04-17T13:56:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/tools/CMakeLists.txt" : {
      "ObjectId" : "58cf60614735ea7301654e1e88d90de669be3cfb",
      "LastModified" : "2017-02-16T19:54:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/tools/s1c/CMakeLists.txt" : {
      "ObjectId" : "d4c7f15e47b827c3217d878d6f84ad2a68417aff",
      "LastModified" : "2018-10-25T16:17:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detect function attribute syntax to use\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Write configuration files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# s1c built with C++98 to check API compatibility\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Require C++11 features if set globally\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# s1c variant we're 'publishing'. Allow it to utilize C++11 features\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Require C++11 features if set globally\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/s1_add_boost_test.cmake" : {
      "ObjectId" : "45bfa5597a7ded969e6c93d4d6eb44fecff7cc74",
      "LastModified" : "2018-10-25T16:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/s1_add_library.cmake" : {
      "ObjectId" : "185e12534d60a369ecbc6e36d93313e5803290f8",
      "LastModified" : "2018-10-25T18:02:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \"Internal\" library: Library that will be merged into an 'external' library later\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Producing a static library: need to build an object library\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Producing a shared library or executable: can build a static library\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Save dependent libs and targets so S1_GET_DEPENDENCIES can pick them up\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Forward include dirs & defines from lib dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Hack around inability to get MANUALLY_ADDED_DEPENDENCIES property\n\n# Used for s1_headers(_internal) targets\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# \"External\" library: Library eventually shipped to a user\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/s1_boost.cmake" : {
      "ObjectId" : "5af201ff0de45da4eb4dc5c6c08853341536831a",
      "LastModified" : "2018-10-25T18:03:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We have unusual requirements for Boost (requiring it to be built with\n\n# different build flags in different places), so we wrap it's usage.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of all the Boost libs we use anywhere in the source tree\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fail if Boost is not found\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# But it's okay if we don't have the libs\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Dependendencies on Boost libs\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set BOOST_xxx_DEPENDS for other dependencies\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Sources for boost_iostreams\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Sources for boost_unit_test_framework\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use different Boost libs for different runtime libs options\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# runtime_arg contains the initial slash, CMAKE_MATCH_1 doesn't.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Allow specification of source-specific compile definitions\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Add an interface library if we don't have sources\n",
        "Line" : 96,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "cmake/s1_detect_cxx17_charconv.cmake" : {
      "ObjectId" : "55cbeaba0a1646962a75e92c0936601d718650c8",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check whether <charconv> supports conversion from floats to string\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use cached result\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Check whether <charconv> supports conversion to ints from string\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use cached result\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/s1_detect_cxx17_string_view.cmake" : {
      "ObjectId" : "318f13b4b5d293a35d8df0febe9f0e92a346b30d",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check whether std::string_view is available\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use cached result\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/s1_detect_function_attribute.cmake" : {
      "ObjectId" : "09b48bdf005a3878df83cf58060dcd251daa410e",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detect which variant of a C++ function attribute is supported\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use cached result\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/s1_detect_stdlib.cmake" : {
      "ObjectId" : "068439e66a59a42c344d5e7813adefab64fdb850",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVC: Only has one C++ runtime\n",
        "Line" : 3,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "cmake/s1_set_static_msvc_runtime.cmake" : {
      "ObjectId" : "237acadaf265a67b4248aefd813b2cb16f250caf",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use static VC runtime when building an S1 DLL\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/s1_strip_debug.cmake" : {
      "ObjectId" : "ca4c1b0d029cb75a3667ee6c23bd2a00d1f29557",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Strip debug symbols from a binary on Linux\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "a33d910fe168c7dc670af84b84942a7888e6550e",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Merge static+generated headers into a single directory + combine ResultCode headers\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "97079b4c9abd2aababb55814f6e7338bcaf232f0",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Collect Boost.Preprocessor includes, concatenate to one big header, replacing BOOST_PP with _S1BOOSTPP\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Generate Object.h from Object.h.template:\n\n#  Replace BOOST_PP with _S1BOOSTPP\n\n#  Replace #includes with header generated in first step\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use pregenerated headers\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# s1_headers_deps is a workaround for s1_add_library\n\n# as we can't get the dependencies from add_dependencies\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Disable some warnings\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Provide ability to skip test with certain standards,\n\n# if necessary\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Make sure S1 lib is found\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# s1_headers_internal_deps is a workaround for s1_add_library\n\n# as we can't get the dependencies from add_dependencies\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "include/internal/CMakeLists.txt" : {
      "ObjectId" : "da79377940a53ca8e4756956164f8ff5fc1d7543",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate diagnostics headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "include/s1/CMakeLists.txt" : {
      "ObjectId" : "588fe34b99c1745a68b7e7c465847a37350ec8ec",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/API/CMakeLists.txt" : {
      "ObjectId" : "ebdf166e1db757e3d424d98a7c9ccc799dc0d893",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Supply a version script to hide all symbols but our own\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "f63819b2fe23a9391a2ada98b2d75e5f887d5f33",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable some warnings\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Static lib merging doesn't merge debug info, so manually set up a single\n\n# PDB. For convenience, place it in the same dir the lib is put\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "lib/base/CMakeLists.txt" : {
      "ObjectId" : "114fd1cb25f75d6ac2ca5b0d7506b202f6d51b32",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/codegen/CMakeLists.txt" : {
      "ObjectId" : "f9e2436b7228838fd094d8a9e283a7f28ef90890",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/codegen/common/CMakeLists.txt" : {
      "ObjectId" : "c90c4fcd9d7abe3fad5f2d72583a5b8d4d64a3f9",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/codegen/glsl/CMakeLists.txt" : {
      "ObjectId" : "63a6cb7bef66ff97ed40e562853a0d04347f1990",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/codegen/sl/CMakeLists.txt" : {
      "ObjectId" : "0820b47c81a3ec4d7f64471dfa05a3f2602cc3bb",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/compiler/CMakeLists.txt" : {
      "ObjectId" : "63a9642ad25ddf43308b415f15790a3d8a7c3e02",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/diagnostics/CMakeLists.txt" : {
      "ObjectId" : "53b7dd04830bb248e00a37c5156bab5aa6f67093",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/intermediate/CMakeLists.txt" : {
      "ObjectId" : "4d1592553e2260f27d1f5ced6865a186b606cb24",
      "LastModified" : "2019-01-19T18:21:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/intermediate/SequenceOp/CMakeLists.txt" : {
      "ObjectId" : "677c7640b460b5239492b4dcb983baa2003cfe0b",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/intermediate/generator/CMakeLists.txt" : {
      "ObjectId" : "39913aaeb988acf73cd21000c605cdf1d8fe5d84",
      "LastModified" : "2019-01-19T18:21:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/lexer/CMakeLists.txt" : {
      "ObjectId" : "925222d25d03bdac5a5215ea98bf9c5b16235658",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/optimize/CMakeLists.txt" : {
      "ObjectId" : "9dfe8cf2b71ff78d64dfaf2cfd934d26ef19e445",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/parser/CMakeLists.txt" : {
      "ObjectId" : "d9d275772f5d5e74d79af9b1e3ef0b047f8f7eb5",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TEMPORARY to work around dependency issue\n\n# (parser depending on semantics)\n",
        "Line" : 60,
        "CharPositionInLine" : 41
      },
      "1" : {
        "Text" : "# parser\n",
        "Line" : 62,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "lib/semantics/CMakeLists.txt" : {
      "ObjectId" : "ea1ee902fd19cb4f398b2c76a7e92db00bce39f8",
      "LastModified" : "2019-02-09T14:17:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/splitter/CMakeLists.txt" : {
      "ObjectId" : "05979a093998f85970ba1aa59a5a5ff830413443",
      "LastModified" : "2019-01-19T16:03:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 37
  },
  "ElapsedTime" : 1935
}