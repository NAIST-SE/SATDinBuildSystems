{
  "Repository" : "11173744",
  "Revision" : "HEAD",
  "ObjectId" : "4d447c9bf7eadc85fadd2ad48d2e670471fe9430",
  "CommitTime" : "2018-06-01T04:01:23Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "c1feb4cab9f9c5ba13a5f35d93b6d64c2e72254d",
      "LastModified" : "2018-01-09T11:56:55Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#not installed\n",
        "Line" : 24,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 1
    },
    "contrib/cmake/CMakeLists.txt" : {
      "ObjectId" : "cf95db20d093f57842731ef4f2dc7a5fac63ee13",
      "LastModified" : "2018-04-20T17:46:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ECC Build System\n\n#\n\n# This CMakeLists.txt is free software; the Free Software Foundation\n\n# gives unlimited permission to copy and/or distribute it,\n\n# with or without modifications, as long as this notice is preserved.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n\n# PARTICULAR PURPOSE.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fixes\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake version\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include CMake Modules\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set policies\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ENABLE CMP0028: Double colon in target name means ALIAS or IMPORTED target.\n\n# ENABLE CMP0054: Only interpret if() arguments as variables or keywords when unquoted.\n\n# ENABLE CMP0042: MACOSX_RPATH is enabled by default.\n\n# ENABLE CMP0063: Honor visibility properties for all target types.\n",
        "Line" : 26,
        "CharPositionInLine" : 24
      },
      "7" : {
        "Text" : "#\n\n# Generate Project Information\n\n#\n\n# Get git revision\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Meta information about the project\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Project configuration options\n\n#\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Project options\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Declare project\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Generate folders for IDE targets (e.g., VisualStudio solutions)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Declare project\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set output directories\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Create version file\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Compiler settings and options\n\n#\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Configure health check tools\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Check for C++11/14 support\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# MSVC, On by default (if available)\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Append the `src`\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "contrib/cmake/modules/ClangTidy.cmake" : {
      "ObjectId" : "3e01032b9128be70d9032c2327784938e611ea02",
      "LastModified" : "2018-01-09T21:25:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function to register a target for clang-tidy\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/cmake/modules/CompileOptions.cmake" : {
      "ObjectId" : "2fd2577e2e1e32e8e27a00f92bbde655a6849809",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Platform and architecture setup\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get upper case system name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Determine architecture (32/64 bit)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Project options\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Not available before CMake 3.1; see below for manual command line argument addition\n",
        "Line" : 22,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "#\n\n# Include directories\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Libraries\n\n#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Compile definitions\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MSVC compiler options\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Calling any one of the potentially unsafe methods in the Standard C++ Library\n\n# Calling any one of the potentially unsafe methods in the CRT Library\n",
        "Line" : 54,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "#\n\n# Compile options\n\n#\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# MSVC compiler options\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# -> build with multiple processes\n\n# -> warning level 4\n",
        "Line" : 69,
        "CharPositionInLine" : 22
      },
      "13" : {
        "Text" : "# /WX         # -> treat warnings as errors\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# -> disable warning: 'identifier': class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# -> disable warning: 'identifier': symbol will be dynamically initialized (implementation limitation)\n",
        "Line" : 73,
        "CharPositionInLine" : 22
      },
      "15" : {
        "Text" : "# /wd4201     # -> disable warning: nonstandard extension used: nameless struct/union (caused by GLM)\n\n# /wd4127     # -> disable warning: conditional expression is constant (caused by Qt)\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#$<$<CONFIG:Debug>:\n\n#/RTCc         # -> value is assigned to a smaller data type and results in a data loss\n\n#>\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# -> whole program global optimization\n\n# -> buffer security check: no\n\n# -> whole program optimization: enable link-time code generation (disables Zi)\n\n# -> enable string pooling\n",
        "Line" : 83,
        "CharPositionInLine" : 22
      },
      "18" : {
        "Text" : "# No manual c++11 enable for MSVC as all supported MSVC versions for cmake-init have C++11 implicitly enabled (MSVC >=2013)\n",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# GCC and Clang compiler options\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# disable all warnings\n",
        "Line" : 108,
        "CharPositionInLine" : 11
      },
      "21" : {
        "Text" : "#\n\n# Linker options\n\n#\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Use pthreads on mingw and linux\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "contrib/cmake/modules/Cppcheck.cmake" : {
      "ObjectId" : "1f9ac05b17515ff692f7d1dd3aab0f2105d0c813",
      "LastModified" : "2018-01-09T21:25:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function to register a target for cppcheck\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/cmake/modules/Custom.cmake" : {
      "ObjectId" : "5f5bca4bb72ac04e5523d420ea5da078cc99fc07",
      "LastModified" : "2018-01-09T21:25:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ECC Utilities\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set policy if policy is available\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check C++ version\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tests for Clang and GCC\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Tests for MSVC\n\n# Unfortunately, due to various unsupported things in msvc versions,\n\n# this is poor informatiion about actual support\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "contrib/cmake/modules/FindBerkeleyDB.cmake" : {
      "ObjectId" : "7dc783b4bf5d01e8c928020d10a94495e98ced86",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Berkeley DB\n\n# Once done this will define\n\n#\n\n#  BERKELEY_DB_FOUND - system has Berkeley DB\n\n#  BERKELEY_DB_INCLUDE_DIR - the Berkeley DB include directory\n\n#  BERKELEY_DB_LIBRARIES - Link these to use Berkeley DB\n\n#  BERKELEY_DB_DEFINITIONS - Compiler switches required for using Berkeley DB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Dymo, <adymo@kdevelop.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# show the BERKELEY_DB_INCLUDE_DIR and BERKELEY_DB_LIBRARIES variables only in the advanced view\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/cmake/modules/FindGMP.cmake" : {
      "ObjectId" : "84e9fb6ee32c545b4ce6a13a43f4cbeca17712d7",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GMP librairies\n\n# GMP_FOUND - system has GMP lib\n\n# GMP_INCLUDE_DIR - the GMP include directory\n\n# GMP_LIBRARIES - Libraries needed to use GMP\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "contrib/cmake/modules/FindLibEvent.cmake" : {
      "ObjectId" : "fcf5ee0a90bddbcdd5de20f52753805332773e5d",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LibEvent (a cross event library)\n\n# This module defines\n\n# LIBEVENT_INCLUDE_DIR, where to find LibEvent headers\n\n# LIBEVENT_LIB, LibEvent libraries\n\n# LibEvent_FOUND, If false, do not try to use libevent\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/cmake/modules/Findclang_tidy.cmake" : {
      "ObjectId" : "c29dfcdf7af70617f1b150586bdf61ce195f1557",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Findclang_tidy results:\n\n# clang_tidy_FOUND\n\n# clang_tidy_EXECUTABLE\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/cmake/modules/Findcppcheck.cmake" : {
      "ObjectId" : "c90e7cd0752f36546bac5e35c5d69a6bed2323fa",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Findcppcheck results:\n\n# cppcheck_FOUND\n\n# cppcheck_EXECUTABLE\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# work around CMP0053, see http://public.kitware.com/pipermail/cmake/2014-November/059117.html\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/cmake/modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "85eae1562fe2011e9800787819b21f30a8898eb4",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "contrib/cmake/modules/HealthCheck.cmake" : {
      "ObjectId" : "8df8b9a311c58ec5b1417f428067748df0b88940",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function to register a target for enabled health checks\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable or disable cppcheck for health checks\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable or disable clang-tidy for health checks\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure cmake target to check for cmake-init template\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "contrib/cmake/modules/cotire.cmake" : {
      "ObjectId" : "a1e5ef08c8687832b9c816969d875775dd2c9e4d",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2017 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# strict checking for break() command\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 209,
        "CharPositionInLine" : 14
      },
      "19" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 219,
        "CharPositionInLine" : 16
      },
      "20" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 239,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# remove from head\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 344,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# option with separate argument\n",
        "Line" : 368,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# remember option\n",
        "Line" : 372,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# option with joined argument\n",
        "Line" : 375,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# flush remembered option\n",
        "Line" : 379,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 384,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# add target compile flags\n",
        "Line" : 431,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# target compile options\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 451,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 462,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 464,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 482,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 494,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# platform specific flags\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# default include dirs\n",
        "Line" : 540,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 547,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 559,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# target include directories\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 583,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 591,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 641,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 687,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# target export define symbol\n",
        "Line" : 691,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 696,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# target compile definitions\n",
        "Line" : 705,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 714,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 723,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 739,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 894,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 983,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1027,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1035,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1038,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# header is outside\n",
        "Line" : 1052,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1063,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# check header file extension\n",
        "Line" : 1073,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1086,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1091,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : "# GCC like output\n",
        "Line" : 1100,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1116,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1119,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1121,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# then separate lines\n",
        "Line" : 1123,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1126,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1144,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# update stack\n",
        "Line" : 1154,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1170,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1172,
        "CharPositionInLine" : 10
      },
      "72" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1179,
        "CharPositionInLine" : 10
      },
      "73" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1188,
        "CharPositionInLine" : 16
      },
      "74" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1200,
        "CharPositionInLine" : 10
      },
      "75" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1238,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1254,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1405,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# create empty log file\n",
        "Line" : 1446,
        "CharPositionInLine" : 6
      },
      "79" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1462,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1499,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# append to list\n",
        "Line" : 1508,
        "CharPositionInLine" : 6
      },
      "82" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1511,
        "CharPositionInLine" : 6
      },
      "83" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1515,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# append to list\n",
        "Line" : 1520,
        "CharPositionInLine" : 6
      },
      "85" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1526,
        "CharPositionInLine" : 6
      },
      "86" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1533,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# append to list\n",
        "Line" : 1538,
        "CharPositionInLine" : 6
      },
      "88" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1541,
        "CharPositionInLine" : 6
      },
      "89" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1546,
        "CharPositionInLine" : 6
      },
      "90" : {
        "Text" : "# append to list\n",
        "Line" : 1555,
        "CharPositionInLine" : 8
      },
      "91" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1558,
        "CharPositionInLine" : 8
      },
      "92" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1562,
        "CharPositionInLine" : 6
      },
      "93" : {
        "Text" : "# append to list\n",
        "Line" : 1567,
        "CharPositionInLine" : 8
      },
      "94" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1573,
        "CharPositionInLine" : 8
      },
      "95" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1592,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# append to list\n",
        "Line" : 1603,
        "CharPositionInLine" : 6
      },
      "97" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1610,
        "CharPositionInLine" : 6
      },
      "98" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1617,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# append to list\n",
        "Line" : 1626,
        "CharPositionInLine" : 6
      },
      "100" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1629,
        "CharPositionInLine" : 6
      },
      "101" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1637,
        "CharPositionInLine" : 6
      },
      "102" : {
        "Text" : "# append to list\n",
        "Line" : 1649,
        "CharPositionInLine" : 8
      },
      "103" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1656,
        "CharPositionInLine" : 8
      },
      "104" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1663,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "# append to list\n",
        "Line" : 1678,
        "CharPositionInLine" : 8
      },
      "106" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1689,
        "CharPositionInLine" : 8
      },
      "107" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1708,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# append to list\n",
        "Line" : 1716,
        "CharPositionInLine" : 8
      },
      "109" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1722,
        "CharPositionInLine" : 8
      },
      "110" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1729,
        "CharPositionInLine" : 6
      },
      "111" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 8
      },
      "112" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1734,
        "CharPositionInLine" : 8
      },
      "113" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1739,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# append to list\n",
        "Line" : 1744,
        "CharPositionInLine" : 6
      },
      "115" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1747,
        "CharPositionInLine" : 6
      },
      "116" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1751,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# append to list\n",
        "Line" : 1757,
        "CharPositionInLine" : 6
      },
      "118" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1760,
        "CharPositionInLine" : 6
      },
      "119" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1766,
        "CharPositionInLine" : 6
      },
      "120" : {
        "Text" : "# append to list\n",
        "Line" : 1774,
        "CharPositionInLine" : 10
      },
      "121" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1780,
        "CharPositionInLine" : 10
      },
      "122" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1787,
        "CharPositionInLine" : 8
      },
      "123" : {
        "Text" : "# append to list\n",
        "Line" : 1789,
        "CharPositionInLine" : 10
      },
      "124" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1792,
        "CharPositionInLine" : 10
      },
      "125" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1797,
        "CharPositionInLine" : 6
      },
      "126" : {
        "Text" : "# append to list\n",
        "Line" : 1810,
        "CharPositionInLine" : 10
      },
      "127" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1818,
        "CharPositionInLine" : 10
      },
      "128" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1827,
        "CharPositionInLine" : 8
      },
      "129" : {
        "Text" : "# append to list\n",
        "Line" : 1829,
        "CharPositionInLine" : 10
      },
      "130" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1832,
        "CharPositionInLine" : 10
      },
      "131" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1869,
        "CharPositionInLine" : 4
      },
      "132" : {
        "Text" : "# Newer versions of Clang and GCC seem to embed a compilation timestamp into the precompiled header binary,\n\n# which results in \"file has been modified since the precompiled header was built\" errors if ccache is used.\n\n# We work around the problem by disabling ccache upon pre-compiling the prefix header.\n",
        "Line" : 1874,
        "CharPositionInLine" : 6
      },
      "133" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1893,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1897,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1904,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1907,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1946,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1965,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 2008,
        "CharPositionInLine" : 8
      },
      "140" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 2019,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 2022,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2093,
        "CharPositionInLine" : 8
      },
      "143" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2098,
        "CharPositionInLine" : 8
      },
      "144" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2101,
        "CharPositionInLine" : 8
      },
      "145" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2104,
        "CharPositionInLine" : 8
      },
      "146" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2107,
        "CharPositionInLine" : 8
      },
      "147" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2139,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2143,
        "CharPositionInLine" : 4
      },
      "149" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2148,
        "CharPositionInLine" : 4
      },
      "150" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2165,
        "CharPositionInLine" : 2
      },
      "151" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2178,
        "CharPositionInLine" : 2
      },
      "152" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2203,
        "CharPositionInLine" : 2
      },
      "153" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2208,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2215,
        "CharPositionInLine" : 2
      },
      "155" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2218,
        "CharPositionInLine" : 2
      },
      "156" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2223,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# generate target script file\n",
        "Line" : 2246,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2251,
        "CharPositionInLine" : 4
      },
      "159" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2265,
        "CharPositionInLine" : 4
      },
      "160" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2274,
        "CharPositionInLine" : 6
      },
      "161" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2276,
        "CharPositionInLine" : 6
      },
      "162" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2280,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2289,
        "CharPositionInLine" : 6
      },
      "164" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2311,
        "CharPositionInLine" : 4
      },
      "165" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2316,
        "CharPositionInLine" : 6
      },
      "166" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2323,
        "CharPositionInLine" : 6
      },
      "167" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2329,
        "CharPositionInLine" : 6
      },
      "168" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2336,
        "CharPositionInLine" : 6
      },
      "169" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2339,
        "CharPositionInLine" : 4
      },
      "170" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2346,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2353,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2355,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2419,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2430,
        "CharPositionInLine" : 6
      },
      "175" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2441,
        "CharPositionInLine" : 4
      },
      "176" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2449,
        "CharPositionInLine" : 4
      },
      "177" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2453,
        "CharPositionInLine" : 4
      },
      "178" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2457,
        "CharPositionInLine" : 6
      },
      "179" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2479,
        "CharPositionInLine" : 4
      },
      "180" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2485,
        "CharPositionInLine" : 6
      },
      "181" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2494,
        "CharPositionInLine" : 6
      },
      "182" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2502,
        "CharPositionInLine" : 6
      },
      "183" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2532,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2550,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2555,
        "CharPositionInLine" : 4
      },
      "186" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2580,
        "CharPositionInLine" : 4
      },
      "187" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2589,
        "CharPositionInLine" : 4
      },
      "188" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2598,
        "CharPositionInLine" : 4
      },
      "189" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2605,
        "CharPositionInLine" : 4
      },
      "190" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2780,
        "CharPositionInLine" : 6
      },
      "191" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2784,
        "CharPositionInLine" : 6
      },
      "192" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2798,
        "CharPositionInLine" : 6
      },
      "193" : {
        "Text" : "# use all available cores\n",
        "Line" : 2818,
        "CharPositionInLine" : 6
      },
      "194" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2843,
        "CharPositionInLine" : 2
      },
      "195" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2850,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2860,
        "CharPositionInLine" : 2
      },
      "197" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2865,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2867,
        "CharPositionInLine" : 4
      },
      "199" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2876,
        "CharPositionInLine" : 4
      },
      "200" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2886,
        "CharPositionInLine" : 8
      },
      "201" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2893,
        "CharPositionInLine" : 6
      },
      "202" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2897,
        "CharPositionInLine" : 2
      },
      "203" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2925,
        "CharPositionInLine" : 4
      },
      "204" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2930,
        "CharPositionInLine" : 8
      },
      "205" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2945,
        "CharPositionInLine" : 4
      },
      "206" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2966,
        "CharPositionInLine" : 6
      },
      "207" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2974,
        "CharPositionInLine" : 6
      },
      "208" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2997,
        "CharPositionInLine" : 8
      },
      "209" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 3009,
        "CharPositionInLine" : 2
      },
      "210" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 3019,
        "CharPositionInLine" : 2
      },
      "211" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 3022,
        "CharPositionInLine" : 2
      },
      "212" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 3027,
        "CharPositionInLine" : 4
      },
      "213" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 3037,
        "CharPositionInLine" : 2
      },
      "214" : {
        "Text" : "# generate unity target\n",
        "Line" : 3044,
        "CharPositionInLine" : 2
      },
      "215" : {
        "Text" : "# depend on original target's automoc target, if it exists\n",
        "Line" : 3051,
        "CharPositionInLine" : 4
      },
      "216" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 3057,
        "CharPositionInLine" : 6
      },
      "217" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3065,
        "CharPositionInLine" : 2
      },
      "218" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3075,
        "CharPositionInLine" : 6
      },
      "219" : {
        "Text" : "# copy output name\n",
        "Line" : 3100,
        "CharPositionInLine" : 2
      },
      "220" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3108,
        "CharPositionInLine" : 2
      },
      "221" : {
        "Text" : "# copy compile features\n",
        "Line" : 3120,
        "CharPositionInLine" : 2
      },
      "222" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3125,
        "CharPositionInLine" : 2
      },
      "223" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3133,
        "CharPositionInLine" : 2
      },
      "224" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3144,
        "CharPositionInLine" : 2
      },
      "225" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3147,
        "CharPositionInLine" : 2
      },
      "226" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3153,
        "CharPositionInLine" : 2
      },
      "227" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3169,
        "CharPositionInLine" : 2
      },
      "228" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3177,
        "CharPositionInLine" : 2
      },
      "229" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3182,
        "CharPositionInLine" : 2
      },
      "230" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3206,
        "CharPositionInLine" : 2
      },
      "231" : {
        "Text" : "# resolve alias\n",
        "Line" : 3218,
        "CharPositionInLine" : 2
      },
      "232" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3226,
        "CharPositionInLine" : 2
      },
      "233" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3242,
        "CharPositionInLine" : 2
      },
      "234" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3247,
        "CharPositionInLine" : 2
      },
      "235" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3296,
        "CharPositionInLine" : 8
      },
      "236" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3358,
        "CharPositionInLine" : 2
      },
      "237" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3445,
        "CharPositionInLine" : 2
      },
      "238" : {
        "Text" : "# include target script if available\n",
        "Line" : 3457,
        "CharPositionInLine" : 2
      },
      "239" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3459,
        "CharPositionInLine" : 4
      },
      "240" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3475,
        "CharPositionInLine" : 2
      },
      "241" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3495,
        "CharPositionInLine" : 6
      },
      "242" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3498,
        "CharPositionInLine" : 6
      },
      "243" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3517,
        "CharPositionInLine" : 6
      },
      "244" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3520,
        "CharPositionInLine" : 6
      },
      "245" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3588,
        "CharPositionInLine" : 6
      },
      "246" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3591,
        "CharPositionInLine" : 6
      },
      "247" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3614,
        "CharPositionInLine" : 2
      },
      "248" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3651,
        "CharPositionInLine" : 6
      },
      "249" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3685,
        "CharPositionInLine" : 4
      },
      "250" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3699,
        "CharPositionInLine" : 6
      },
      "251" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3706,
        "CharPositionInLine" : 2
      },
      "252" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3759,
        "CharPositionInLine" : 2
      },
      "253" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3831,
        "CharPositionInLine" : 2
      },
      "254" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3995,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 255
    },
    "contrib/cmake/modules/ucm.cmake" : {
      "ObjectId" : "1b534dd1b40ba1ad7758d68d1b26ed4dfd8ed49d",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# ucm.cmake - useful cmake macros\n\n#\n\n# Copyright (c) 2016 Viktor Kirilov\n\n#\n\n# Distributed under the MIT Software License\n\n# See accompanying file LICENSE.txt or copy at\n\n# https://opensource.org/licenses/MIT\n\n#\n\n# The documentation can be found at the library's page:\n\n# https://github.com/onqtam/ucm\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# optionally include cotire - the git submodule might not be inited (or the user might have already included it)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ucm_add_flags\n\n# Adds compiler flags to CMAKE_<LANG>_FLAGS or to a specific config\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# determine to which flags to add\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# clear the old flags\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# add all the passed flags\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# ucm_set_flags\n\n# Sets the CMAKE_<LANG>_FLAGS compiler flags or for a specific config\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ucm_add_linker_flags\n\n# Adds linker flags to CMAKE_<TYPE>_LINKER_FLAGS or to a specific config\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clear the old flags\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# add all the passed flags\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# ucm_set_linker_flags\n\n# Sets the CMAKE_<TYPE>_LINKER_FLAGS linker flags or for a specific config\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ucm_gather_flags\n\n# Gathers all lists of flags for printing or manipulation\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add the main flags without a config\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# handle single config generators - like makefiles/ninja - when CMAKE_BUILD_TYPE is set\n",
        "Line" : 166,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# handle multi config generators (like msvc, xcode)\n",
        "Line" : 177,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# ucm_set_runtime\n\n# Sets the runtime (static/dynamic) for msvc/gcc\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add/replace the flags\n\n# note that if the user has messed with the flags directly this function might fail\n\n# - for example if with MSVC and the user has removed the flags - here we just switch/replace them\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# ucm_print_flags\n\n# Prints all compiler flags for all configurations\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ucm_count_sources\n\n# Counts the number of source files\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ucm_include_file_in_sources\n\n# Includes the file to the source with compiler flags\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# get old flags\n",
        "Line" : 281,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# update flags\n",
        "Line" : 287,
        "CharPositionInLine" : 12
      },
      "22" : {
        "Text" : "# ucm_dir_list\n\n# Returns a list of subdirectories for a given directory\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ucm_trim_front_words\n\n# Trims X times the front word from a string separated with \"/\" and removes\n\n# the front \"/\" characters after that (used for filters for visual studio)\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# removes everything at the front up to a \"/\" character\n",
        "Line" : 321,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# removes all consecutive \"/\" characters from the front\n",
        "Line" : 323,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# ucm_remove_files\n\n# Removes source files from a list of sources (path is the relative path for it to be found)\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# ucm_remove_directories\n\n# Removes all source files from the given directories from the sources list\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ucm_add_files_impl\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# replacing forward slashes with back slashes so filters can be generated (back slash used in parsing...)\n",
        "Line" : 384,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# ucm_add_files\n\n# Adds files to a list of sources\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# ucm_add_dir_impl\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# handle the \"\" and \".\" cases\n",
        "Line" : 413,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# to circumvent some linux/cmake/path issues - barely made it work...\n",
        "Line" : 419,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# since unix is case sensitive - add these valid extensions too\n\n# we don't use \"UNIX\" but instead \"CMAKE_HOST_UNIX\" because we might be cross\n\n# compiling (for example emscripten) under windows and UNIX may be set to 1\n\n# Also OSX is case insensitive like windows...\n",
        "Line" : 426,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# find all sources and set them as result\n",
        "Line" : 444,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# https://gcc.gnu.org/onlinedocs/gcc-4.4.1/gcc/Overall-Options.html#index-file-name-suffix-71\n\n# sources\n",
        "Line" : 446,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# headers\n",
        "Line" : 456,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# set the proper filters\n",
        "Line" : 473,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# replacing forward slashes with back slashes so filters can be generated (back slash used in parsing...)\n",
        "Line" : 475,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# ucm_add_dirs\n\n# Adds all files from directories traversing them recursively to a list of sources\n\n# and generates filters according to their location (accepts relative paths only).\n\n# Also this macro trims X times the front word from the filter string for visual studio filters.\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# ucm_add_target\n\n# Adds a target eligible for cotiring - unity build and/or precompiled header\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# init with the global unity flag\n",
        "Line" : 528,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# check the UNITY argument\n",
        "Line" : 531,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# if target is excluded through the exclusion list\n",
        "Line" : 536,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# unity build only for targets with > 1 source file (otherwise there will be an additional unnecessary target)\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# optimization\n",
        "Line" : 543,
        "CharPositionInLine" : 17
      },
      "47" : {
        "Text" : "# if cotire cannot be used\n",
        "Line" : 552,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# inform the developer that the current target might benefit from a unity build\n",
        "Line" : 557,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# prepare for the unity build\n",
        "Line" : 565,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# the original target will be added with a different name than the requested\n",
        "Line" : 568,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# exclude requested files from unity build of the current target\n",
        "Line" : 571,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# add the original target\n",
        "Line" : 577,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# set the number of unity cpp files to be used for the unity target\n",
        "Line" : 585,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# add a unity target for the original one with the name intended for the original\n",
        "Line" : 597,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# this is the library call that does the magic\n",
        "Line" : 600,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# disable the original target and enable the unity one\n",
        "Line" : 604,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "# also set the name of the target output as the original one\n",
        "Line" : 609,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# reset the folder property so all unity targets dont end up in a single folder in the solution explorer of VS\n",
        "Line" : 612,
        "CharPositionInLine" : 12
      },
      "59" : {
        "Text" : "# print a message if the target was requested to be cotired but it couldn't\n",
        "Line" : 626,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 60
    },
    "contrib/cmake/src/CMakeLists.txt" : {
      "ObjectId" : "ffb991d0a5d6f84066a4db70004d3625f7049b45",
      "LastModified" : "2018-04-20T17:46:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ECC Build System\n\n#\n\n# This CMakeLists.txt is free software; the Free Software Foundation\n\n# gives unlimited permission to copy and/or distribute it,\n\n# with or without modifications, as long as this notice is preserved.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n\n# PARTICULAR PURPOSE.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fixes\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compile the `build.h` Header\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setup Sources\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Boost Dependencies\n\n#\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# OpenSSL Dependencies\n\n#\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# LibEvent Dependencies\n\n#\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# BerkeleyDB\n\n#\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# LevelDB\n\n#\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# GMP\n\n#\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# univalue\n\n#\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# ECCoin\n\n#\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# secp256k1 - uses the original autotools\n\n#\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# setup all the libraries\n\n#\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# send definition headers\n\n#\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n#  CMake's way of creating an executable\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Link the libraries into the binary\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Now the installation stuff below\n\n#--------------------------------------------------------------------------------\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Install the Eccoind application, on Apple, the bundle is at the root of the\n\n# install tree, and on other platforms it'll go into the bin directory.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Use BundleUtilities to get all other dependencies for the application to work.\n\n# It takes a bundle or executable along with possible plugins and inspects it\n\n# for dependencies.  If they are not system dependencies, they are copied.\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\n\n# The quotes are escaped and variables to use at install time have their $ escaped\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\n\n# over.\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To Create a package, one can run \"cpack -G DragNDrop CPackConfig.cmake\" on Mac OS X\n\n# where CPackConfig.cmake is created by including CPack\n\n# And then there's ways to customize this as well\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "contrib/cmake/src/leveldb/CMakeLists.txt" : {
      "ObjectId" : "86b810299dbea7c95fe147432f43fa50b54d4370",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017 The LEVELDB Authors. All rights reserved.\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fixes\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This project can take advantage of C++11.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO(pwnall): See if setting this to ON gives us the *_unlocked functions.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check Operating System\n\n# CMake does not distinguish Linux from other Unices.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Nor *BSD\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Or Solaris. I'm seeing a trend, here\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Windows is easy (for once)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check if it's an Apple OS\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check if it's OS X or another MacOS (that's got to be pretty unlikely)\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# POSIX code is specified separately so we can leave it out in the future.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The headers below are dependencies for leveldb, but aren't needed by users\n\n# that link to the installed version of leveldb and rely on its public API.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# TODO(pwnall): Move the TARGET_OBJECTS generator expressions to the PRIVATE\n\n# section of target_sources when cmake_minimum_required becomes 3.9 or above.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Only CMake 3.3+ supports PUBLIC sources in targets exported by \"install\".\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# TODO(pwnall): This is only needed for port_posix.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "depends/Makefile" : {
      "ObjectId" : "52d272801acde8b43c11372d3ecde340b592c823",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "eccoin-qt.pro" : {
      "ObjectId" : "eca6c2f547d3486ddf5f9817544e604e7926bdee",
      "LastModified" : "2018-04-21T10:33:29Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# UNCOMMENT THIS SECTION TO BUILD ON WINDOWS\n\n# Change paths if needed, these use the foocoin/deps.git repository locations\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for boost 1.37, add -mt to the boost libraries\n\n# use: qmake BOOST_LIB_SUFFIX=-mt\n\n# for boost thread win32 with _win32 sufix\n\n# use: BOOST_THREAD_LIB_SUFFIX=_win32-...\n\n# or when linking against a specific BerkelyDB version: BDB_LIB_SUFFIX=-4.8\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Dependency library locations can be customized with:\n\n#    BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,\n\n#    BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# use: qmake \"RELEASE=1\"\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Mac: compile for maximum compatibility (10.5, 32-bit)\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Linux: static link\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# for extra security against potential buffer overflows: enable GCCs Stack Smashing Protection\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# We need to exclude this for Windows cross compile with MinGW 4.2.x, as it will result in a non-working executable!\n\n# This can be enabled for Windows, when we switch to MinGW >= 4.4.x.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# for extra security on Windows: enable ASLR and DEP via GCC linker flags\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# use: qmake \"USE_QRCODE=1\"\n\n# libqrencode (http://fukuchi.org/works/qrencode/index.en.html) must be installed for support\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# use: qmake \"USE_UPNP=1\" ( enabled by default; default)\n\n#  or: qmake \"USE_UPNP=0\" (disabled by default)\n\n#  or: qmake \"USE_UPNP=-\" (not supported)\n\n# miniupnpc (http://miniupnp.free.fr/files/) must be installed for support\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# use: qmake \"USE_DBUS=1\"\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# use: qmake \"USE_IPV6=1\" ( enabled by default; default)\n\n#  or: qmake \"USE_IPV6=0\" (disabled by default)\n\n#  or: qmake \"USE_IPV6=-\" (not supported)\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# we use QMAKE_CXXFLAGS_RELEASE even without RELEASE=1 because we use RELEASE to indicate linking preferences not -O preferences\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# make an educated guess about what the ranlib command is called\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) OPT=\\\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\\\" libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Gross ugly hack that depends on qmake internals, unfortunately there is no other way to do it.\n\n#QMAKE_CLEAN += $$PWD/src/leveldb/libleveldb.a; $$PWD/src/leveldb ; $(MAKE) clean\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# regenerate src/build.h\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Input\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# organize compiles of cpp files by section, this seems to be a logical order where the files lower down generally depend\n\n# on the ones higher up. also helps to observe how far into the compile process we are\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# platform specific defaults, if not overridden on command line\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# At least qmake's win32-g++-cross profile is missing the -lmingwthrd\n\n# thread-safety flag. GCC has -mthreads to enable this, but it doesn't\n\n# work with static linking. -lmingwthrd must come BEFORE -lmingw, so\n\n# it is prepended to QMAKE_LIBS_QT_ENTRY.\n\n# It can be turned off with MINGW_THREAD_BUGFIX=0, just in case it causes\n\n# any problems on some untested qmake profile now or in the future.\n",
        "Line" : 475,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Set libraries and includes at end, to use platform-defined defaults if not overridden\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# -lgdi32 has to happen after -lcrypto (see  #681)\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Linux: turn dynamic linking back on for c/c++ runtime libraries\n",
        "Line" : 514,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 25
    },
    "share/qt/protobuf.pri" : {
      "ObjectId" : "865fe865550ae21f2eec4bb7c8f8c1817bdf1bce",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Based on: http://code.google.com/p/ostinato/source/browse/protobuf.pri\n\n#\n\n# Qt qmake integration with Google Protocol Buffers compiler protoc\n\n#\n\n# To compile protocol buffers with qt qmake, specify PROTOS variable and\n\n# include this file\n\n#\n\n# Example:\n\n# PROTOS = a.proto b.proto\n\n# include(protobuf.pri)\n\n#\n\n# Set PROTO_PATH if you need to set the protoc --proto_path search path\n\n# Set PROTOC to the path to the protoc compiler if it is not in your $PATH\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Makefile.am" : {
      "ObjectId" : "23dc0aa4f098017aad77a0d89cd8293a4ad9287c",
      "LastModified" : "2018-04-28T21:42:38Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Make is not made aware of per-object dependencies to avoid limiting building parallelization\n\n# But to build the less dependent modules first, we manually select their order here:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bitcoin core #\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# server: shared between bitcoin\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# bitcoin binary #\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# bitcoinconsensus library #\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/leveldb/Makefile" : {
      "ObjectId" : "f7cc7d736c4f20d6cab6e760d43b76e880b80e95",
      "LastModified" : "2018-01-30T17:06:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (c) 2011 The LevelDB Authors. All rights reserved.\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------\n\n# Uncomment exactly one of the lines labelled (A), (B), and (C) below\n\n# to switch between compilation modes.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# (A) Production use (optimized mode)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# (B) Debug mode, w/ full line-level debugging symbols\n\n# OPT ?= -g2\n\n# (C) Profiling mode: opt, but w/debugging symbols\n\n# OPT ?= -O2 -g2 -DNDEBUG\n\n#-----------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# detect what platform we're building on\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this file is generated by the previous line to set build flags and sources\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Put the object files in a subdirectory, but the application at the top of the object dir.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# On Linux may need libkyotocabinet-dev for dependency.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Note: iOS should probably be using libtool, not ar.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Should we build shared libraries?\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Many leveldb test apps use non-exported API's. Only build a subset for testing.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Update db.h if you change these.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# PLATFORM_SHARED_EXT\n",
        "Line" : 140,
        "CharPositionInLine" : 7
      },
      "13" : {
        "Text" : "# For iOS, create universal object libraries to be used on both the simulator and\n\n# a device.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/secp256k1/CMakeLists.txt" : {
      "ObjectId" : "c01ee3fbf45777586e8f811de22018d44e6ecd5c",
      "LastModified" : "2018-04-20T17:46:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017 The Bitcoin developers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libsecp256k1 use a different set of flags.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: change this to include when possible\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For the config\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# The library\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We need to link in GMP\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We make sure __int128 is defined\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If we do not support __int128, we should be falling back\n\n# on 32bits implementations for field and scalar.\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Detect if we are on a 32 or 64 bits plateform and chose\n\n# scalar and filed implementation accordingly\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# 64 bits implementationr require either __int128 or asm support.\n\n# TODO: support asm.\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Recovery module\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#TODO: recovery benchmark\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# ECDH module\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#TODO: ECDH benchmark\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Generate the config\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Tests\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This should not be enabled at the same time as coverage is.\n\n# TODO: support coverage.\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# TODO: emult static precomputation\n\n# TODO: ecdh module\n\n# TODO: RECOVERY module\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "src/secp256k1/Makefile.am" : {
      "ObjectId" : "c071fbe2753c9bda4c8d7b74143dc15878572c4b",
      "LastModified" : "2018-04-20T17:46:06Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/test/Makefile" : {
      "ObjectId" : "87bf73fec98d99ed7421093bfde8528d3ced4ddb",
      "LastModified" : "2018-04-20T17:46:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "QMAKE" : 2,
    "MAKEFILE" : 3,
    "AUTOMAKE" : 3
  },
  "ElapsedTime" : 2087
}