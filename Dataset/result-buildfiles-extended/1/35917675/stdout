{
  "Repository" : "35917675",
  "Revision" : "HEAD",
  "ObjectId" : "6dedeefecb22c725bca835acd397889c27a7e5a4",
  "CommitTime" : "2019-04-18T07:16:55Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "bb3b43f409f3aba5270caa37e782028167b937ad",
      "LastModified" : "2019-03-13T08:42:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cannot use VERSION with patch like \"00\"\n",
        "Line" : 2,
        "CharPositionInLine" : 14
      },
      "1" : {
        "Text" : "# Manually define VERSION\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Default build type\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enable the organisation in folders for generators that support\n\n# it. (E.g. some versions of Visual Studio have 'solution folders')\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Change default install prefix\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove generated CMake files, this prevents CMake from finding packages that\n\n# were disabled (like, unchecked in cmake-gui) after being built once.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Remove generated SofaPython configuration files, to prevent SofaPython from\n\n# adding paths to disabled plugins.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Set the output directories globally\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Environment\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## RPATH\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# RPATH is a field in ELF binaries that is used as a hint by the system\n\n# loader to find needed shared libraries.\n\n#\n\n# In the build directory, cmake creates binaries with absolute paths in\n\n# RPATH.  And by default, it strips RPATH from installed binaries.  Here we\n\n# use CMAKE_INSTALL_RPATH to set a relative RPATH.  By doing so, we avoid\n\n# the need to play with LD_LIBRARY_PATH to get applications to run.\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## Boost (1.54.0 or higher) is now mandatory.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### Dependency pack for Windows\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#define BOOST_ALL_DYN_LINK needed for dynamic linking with boost libraries\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Default\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "### Mask\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### SOFA_DEV_TOOL\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "### Threading\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "### Testing\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Enable testing features of cmake, like the add_test() command.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "## Active or not the use of ccache\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Support Unix Makefiles and Ninja\n\n#TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "### Ninja build pools\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "### Sofa using type double or float or both\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Used in sofa/config.h.in\n",
        "Line" : 172,
        "CharPositionInLine" : 32
      },
      "26" : {
        "Text" : "# Used in sofa/config.h.in\n",
        "Line" : 174,
        "CharPositionInLine" : 32
      },
      "27" : {
        "Text" : "# If you really don't understand the negated logics of SOFA_DOUBLE and\n\n# SOFA_FLOAT please consider using SOFA_WITH_FLOAT and SOFA_WITH_DOUBLE.\n\n# Eg: SOFA_WITH_FLOAT indicate that you need to generate the\n\n# float code and SOFA_WITH_DOUBLE indicates that you\n\n# nedd to generate the double related code.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "### Extlibs\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "### Main Sofa subdirectories\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Depends on SofaSimulation\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "## Modules\n\n## in the consortium convention a module is a similar to a plugin the difference is that\n\n## a module is hosted and managed by the consortium while plugins are hosted and managed by third parties.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# This is all the applications GUI stuff. As there is a dependency to this one\n\n# In scene creator and SofaPython...it is located here.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# SofaTest depends on SofaPython, so we add SofaPython before SofaTest.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "## Scene creator option\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "## Tutorials option\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Activate SceneCreator when required\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Tests : define subdirectories\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Library used to write high level tests involving many components.\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Tests for all the modules, written using SofaTest.\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# SofaPython_test is a special case, because it depends on\n\n# SofaTest, which depends on SofaPython...\n",
        "Line" : 245,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Not sure what is it\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "## Plugins\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "## Packages\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "## Applications\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Tutorial add subdirectory\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "## Build external projects at the same time\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Get the name of the actual directory\n",
        "Line" : 274,
        "CharPositionInLine" : 49
      },
      "49" : {
        "Text" : "### Deprecated components\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "## Custom\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Install configuration\n\n#install(FILES \"${CMAKE_BINARY_DIR}/CMakeCache.txt\" DESTINATION . COMPONENT headers)\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Create build and install versions of etc/sofa.ini:\n\n#   - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs\n\n#   - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "## Install resource files\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#######################\n\n# CPack configuration #\n\n#######################\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "################\n\n# Package config\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# x86\n",
        "Line" : 353,
        "CharPositionInLine" : 11
      },
      "57" : {
        "Text" : "################\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "##################\n\n# CPack components\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "##################\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "######################\n\n# IFW Generator config\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "######################\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#######################\n\n# NSIS Generator config\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# There is a bug in NSIS that does not handle full unix paths properly. Make\n\n# sure there is at least one set of four (4) backslashes.\n",
        "Line" : 481,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "#######################\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#dirty hack to pack component we want (named BundlePack from runSofa for example, and that will install .app + share)\n\n#if not set, it will install everything as usual\n\n#TODO: Redesign of a better architecture about bundling (runSofa ? libraries ? modeler ? other application ?)\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 66
    },
    "SofaAdvanced/CMakeLists.txt" : {
      "ObjectId" : "673b7e990eda9d005f72f54d286b5532a670db99",
      "LastModified" : "2017-12-18T14:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cmakedefine\n",
        "Line" : 8,
        "CharPositionInLine" : 42
      },
      "2" : {
        "Text" : "## Version\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## SofaAdvanced/config.h\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Subdirectories\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# IDE folder\n",
        "Line" : 30,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "SofaGeneral/CMakeLists.txt" : {
      "ObjectId" : "9ffc2f63f954bec4346bcf51a80b205781611b0e",
      "LastModified" : "2019-03-14T10:59:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Send warnings when deprecated CMake project is activated\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Dependencies\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Version\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## SofaGeneral/config.h\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Subdirectories\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# IDE folder\n",
        "Line" : 57,
        "CharPositionInLine" : 67
      },
      "6" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "SofaGui/CMakeLists.txt" : {
      "ObjectId" : "afea566c9c91cf42e028549347b4867dfa12a13f",
      "LastModified" : "2018-09-13T15:45:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Sofa\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Qt GUIs are all based on OpenGL\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Qt5\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Search for Qt to see if we can auto-enable stuff\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "## Thoses variables are used in SofaGuiConfig.cmake.in\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "## Version\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### Sub-projects\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## SofaGuiCommon\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## OpenGL-based GUIs\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cmakedefine\n",
        "Line" : 51,
        "CharPositionInLine" : 42
      },
      "11" : {
        "Text" : "## Qt GUI\n\n# Check if Qt(4/5) is present ; if not, disable ability to compile Qt things\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## Qt GUI options, used in the relevant CMakeLists.txt\n",
        "Line" : 68,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "## QtViewer\n",
        "Line" : 70,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# cmakedefine\n",
        "Line" : 73,
        "CharPositionInLine" : 41
      },
      "15" : {
        "Text" : "## QglViewer\n",
        "Line" : 76,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# cmakedefine\n",
        "Line" : 79,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "## VSync\n",
        "Line" : 83,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# config.h.in\n",
        "Line" : 86,
        "CharPositionInLine" : 39
      },
      "19" : {
        "Text" : "# config.h.in\n",
        "Line" : 88,
        "CharPositionInLine" : 39
      },
      "20" : {
        "Text" : "## QWT\n",
        "Line" : 91,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# cmakedefine\n",
        "Line" : 94,
        "CharPositionInLine" : 37
      },
      "22" : {
        "Text" : "## Qt native menu\n",
        "Line" : 97,
        "CharPositionInLine" : 12
      },
      "23" : {
        "Text" : "# cmakedefine\n",
        "Line" : 108,
        "CharPositionInLine" : 31
      },
      "24" : {
        "Text" : "## SofaGuiMain\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## IDE folder\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# target_include_directories(${TARGET} PUBLIC \"$<BUILD_INTERFACE:${QT_INCLUDES}>\")\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "## SofaGuiConfig/config.h\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "SofaKernel/CMakeLists.txt" : {
      "ObjectId" : "68a1a10df430b927471896f25e02572a0835df11",
      "LastModified" : "2017-12-19T14:01:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Default build type\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Set some policies to avoid warnings from CMake.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake 3.0.2 warns if this is not set.\n",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# CMake 3.0.2 warns if this is not set.\n\n# CMake 3.2.3 warns if this is not set.\n",
        "Line" : 12,
        "CharPositionInLine" : 36
      },
      "4" : {
        "Text" : "# CMake 3.2.3 warns if this is not set.\n",
        "Line" : 16,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "# Enable the organisation in folders for generators that support\n\n# it. (E.g. some versions of Visual Studio have 'solution folders')\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Change default install prefix\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Remove generated CMake files, this prevents CMake from finding packages that\n\n# were disabled (like, unchecked in cmake-gui) after being built once.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Set the output directories globally\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Environment\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# list(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR}/applications/plugins)\n\n# list(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR}/applications/projects)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## RPATH\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# RPATH is a field in ELF binaries that is used as a hint by the system\n\n# loader to find needed shared libraries.\n\n#\n\n# In the build directory, cmake creates binaries with absolute paths in\n\n# RPATH.  And by default, it strips RPATH from installed binaries.  Here we\n\n# use CMAKE_INSTALL_RPATH to set a relative RPATH.  By doing so, we avoid\n\n# the need to play with LD_LIBRARY_PATH to get applications to run.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# C++11 Support\n\n#\n\n# Note for the future: CMake 3.1 has a CMAKE_CXX_STANDARD variable\n\n# that handles versions of the C++ standard...\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# not gcc -> clang?\n",
        "Line" : 92,
        "CharPositionInLine" : 15
      },
      "15" : {
        "Text" : "# TODO detect clang versions ?\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "## Try to find an installed Boost (1.54.0 or higher).\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### Dependency pack for Windows\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#define BOOST_ALL_DYN_LINK needed for dynamic linking with boost libraries\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Default\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "## Copy DLLs to the build tree\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Multi-config generator (MSVC)\n",
        "Line" : 134,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# Single-config generator (nmake)\n",
        "Line" : 138,
        "CharPositionInLine" : 32
      },
      "23" : {
        "Text" : "## Install DLLs\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Create etc/sofa.ini: it contains the paths to share/ and examples/. In the\n\n# build directory, it points to the source tree, whereas in the install\n\n# directory, it contains to relative paths to the installed resource directory.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "### Extlibs\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "### Main Sofa subdirectories\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Custom\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## when installing, keep an eye on options/params/sources used for compilation\n\n## this should be internal and not delivered, but this is definitively useful\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "SofaKernel/SofaBase/CMakeLists.txt" : {
      "ObjectId" : "5a135fbeb1452ccd18a87a3814f1a59e749fbcee",
      "LastModified" : "2017-07-18T11:54:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Version\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## SofaBase/config.h\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Subdirectories\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# IDE folder\n",
        "Line" : 30,
        "CharPositionInLine" : 64
      },
      "5" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "SofaKernel/SofaCommon/CMakeLists.txt" : {
      "ObjectId" : "f84a239e09c4e1fbcc9744d29714add00a53539e",
      "LastModified" : "2017-07-18T11:54:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Version\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## SofaCommon/config.h\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Subdirectories\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# IDE folder\n",
        "Line" : 36,
        "CharPositionInLine" : 66
      },
      "5" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "SofaKernel/SofaFramework/CMakeLists.txt" : {
      "ObjectId" : "2705edc54f19b990962be263f94d8b28c8b87dc8",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clear internal target list (set by the macro sofa_add_generic() )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Options\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Used in sofa/config.h.in\n",
        "Line" : 15,
        "CharPositionInLine" : 67
      },
      "3" : {
        "Text" : "# Used in sofa/config.h.in\n",
        "Line" : 19,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : "### Dependencies\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# OpenGL (glu)\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# no target support for OpenGL on windows yet see\n\n# https://github.com/Kitware/CMake/commit/02e34de2b6c27ee5d367be4fa280ffd3ad1965ba\n\n# it is not too harmful since this particular library gives symbolic names\n\n# that can be consumed upon install on the target system.\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Add GLU to Linux binaries\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "## GLEW\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Windows dependency pack\n",
        "Line" : 85,
        "CharPositionInLine" : 61
      },
      "10" : {
        "Text" : "## tinyxml\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## zlib\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Windows dependency pack\n",
        "Line" : 107,
        "CharPositionInLine" : 57
      },
      "13" : {
        "Text" : "## Boost\n\n# required boost libraries\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Eigen\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## JSON\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Generate & install the different files that contains the defines associated with\n\n## the state of the build option.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# make sure everyone in the build tree can see <sofa/config.h>\n\n#list(APPEND SOFAFRAMEWORK_DEPENDENCY_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR})\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Version\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Subdirectories\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# IDE folder\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# NDEBUG preprocessor macro\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# NDEBUG and _DEBUG are automatically set in the default c/cxx flags of the right configurations\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Increase Number of Sections in .Obj file\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# SSE2 flags\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## CMakeParseLibraryList.cmake\n\n# Build tree\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Install tree\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## SofaMacros.cmake\n\n# Build tree\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Install tree\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "SofaKernel/SofaFramework/CMakeParseLibraryList.cmake" : {
      "ObjectId" : "dd4be5213f28dc3ff9d8e02598704ff3e310a36f",
      "LastModified" : "2016-05-09T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Taken from https://software.lanl.gov/MeshTools/trac/browser/cmake/modules/ParseLibraryList.cmake\n\n# Credits goes to Amanzi open source code https://software.lanl.gov/ascem/trac\n\n#\n\n#      PARSE_LIBRARY_LIST(<lib_list>\n\n#                         FOUND   <out_found_flag>\n\n#                         DEBUG   <out_debug_list>\n\n#                         OPT     <out_opt_list>\n\n#                         GENERAL <out_gen_list>)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake module\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Macro: _print_usage\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Read in args\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# message(\"PARSE_LIBRARY_LIST ${_parse_list}\")\n\n# Now split the list\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Now set output variables\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# If any of the lib lists are defined set flag to TRUE\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "SofaKernel/SofaFramework/SofaMacros.cmake" : {
      "ObjectId" : "e75426ec442600f21657b6c6a66f7a8ac4ddef4a",
      "LastModified" : "2019-03-14T10:59:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Create an imported target from a library path and an include dir path.\n\n#   Handle the special case where LIBRARY_PATH is in fact an existing target.\n\n#   Handle the case where LIBRARY_PATH contains the following syntax supported by cmake:\n\n#                                      \"optimized /usr/lib/foo.lib debug /usr/lib/foo_d.lib\"\n\n#\n\n# sofa_create_imported_target(TARGETNAME LIBRARY_PATH INCLUDE_DIRS)\n\n#  TARGETNAME_Target  - (output) variable which contains the name of the created target.\n\n#                       It is usually contains TARGETNAME with one notable exception.\n\n#                       If LIBRARY_PATH is an existing target, TARGETNAME_Target\n\n#                       contains LIBRARY_PATH instead.\n\n#  TARGETNAME         - (input) the name of the target to create.\n\n#  NAMESPACE          - (input) the namespace where the target is put.\n\n#  LIBRARY_PATH       - (input) the path to the library ( .so or .lib depending on the platform)\n\n#  INCLUDE_DIRS       - (input) include directories associated with the library,\n\n#                       which are added as INTERFACE_INCLUDE_DIRECTORIES for the target.\n\n#\n\n# The typical usage scenario is to convert the absolute paths to a system library that cmake return\n\n# after a find_package call into an imported target. By using the cmake target mechanism, it is\n\n# easier to redistribute a software that depends on system libraries, whose locations are not\n\n# known before hand on the consumer system.\n\n#\n\n# For further reference about this subject :\n\n# http://public.kitware.com/pipermail/cmake-developers/2014-March/009983.html\n\n# Quoted from https://github.com/Kitware/CMake/blob/master/Help/manual/cmake-packages.7.rst\n\n# \"Note that it is not advisable to populate any properties which may contain paths,\n\n#  such as :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` and :prop_tgt:`INTERFACE_LINK_LIBRARIES`,\n\n#  with paths relevnt to dependencies. That would hard-code into installed packages the\n\n#  include directory or library paths for dependencies as found on the machine the package\n\n#  was made on.\"\n\n#\n\n# Example:\n\n#\n\n# add_library( SHARED myLib )\n\n# find_package(PNG REQUIRED)\n\n# sofa_create_target( PNG MyNamespace \"${PNG_LIBRARY}\" \"${PNG_INCLUDE_DIRS}\" )\n\n# target_link_libraries( myLib PUBLIC ${PNG_Target} )\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# message(\"TARGETNAME ${TARGETNAME}\")\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# message(\"LIBRARY_PATH ${LIBRARY_PATH}\")\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# message(\"FOUND ${LIB_FOUND} DEBUG: ${LIB_DEBUG} OPT: ${LIB_OPT} GEN: ${LIB_GEN}\")\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# message(\"${LIBRARY_PATH} is not a TARGET\")\n",
        "Line" : 70,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# message(\"${TARGETNAME} is not a TARGET\")\n",
        "Line" : 72,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# message(\"${NAMESPACE_TARGETNAME} is not a TARGET\")\n",
        "Line" : 75,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "# message(\"${LIBRARY_PATH} is a TARGET\")\n",
        "Line" : 85,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# optional parameter to activate/desactivate the option\n\n#  e.g.  sofa_add_application( path/MYAPP MYAPP APPLICATION ON)\n",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#Check if the target has been successfully added\n",
        "Line" : 112,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# IDE folder\n",
        "Line" : 114,
        "CharPositionInLine" : 74
      },
      "11" : {
        "Text" : "# Add current target in the internal list only if not present already\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# if(NOT ${name} IN_LIST _allTargets) # ONLY CMAKE >= 3.3 and policy to NEW\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "#if(NOT ${option} IN_LIST _allTargetNames)# ONLY CMAKE >= 3.3 and policy to NEW\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "### External projects management\n\n# Thanks to http://crascit.com/2015/07/25/cmake-gtest/\n\n#\n\n# Use this macro (subdirectory or plugin version) to add out-of-repository projects.\n\n# Usage:\n\n# Add repository configuration in MyProjectDir/ExternalProjectConfig.cmake.in\n\n# Call sofa_add_subdirectory_external(MyProjectDir MyProjectName)\n\n# Or sofa_add_plugin_external(MyProjectDir MyProjectName [ON,OFF])\n\n# See plugins/SofaHighOrder for example\n\n#\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# optional parameter to activate/desactivate the option\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Setup temporary directory\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Fetch\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Download and unpack  at configure time\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "#execute script to get src\n",
        "Line" : 224,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# add .gitignore for Sofa\n",
        "Line" : 233,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# Add\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Declare a (unique, TODO?) directory containing the python scripts of\n\n# a plugin.  This macro:\n\n# - creates rules to install all the .py scripts in ${directory} to\n\n#   lib/python2.7/site-packages/${plugin_name}\n\n# - creates a etc/sofa/python.d/${plugin_name} file in the build tree\n\n#   pointing to the source tree\n\n# - creates a etc/sofa/python.d/${plugin_name} file in the install\n\n#   tree, containing a relative path to the installed script directory\n\n#\n\n# Assumes relative path.\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Install python scripts, preserving the file tree\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "## Python configuration file (build tree)\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "## Python configuration file (install tree)\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# - Create a target for a python binding module relying on pybind11\n\n#\n\n# sofa_add_pybind11_module(TARGET OUTPUT SOURCES DEPENDS CYTHONIZE)\n\n#  TARGET             - (input) the name of the generated target.\n\n#  OUTPUT             - (input) the output location.\n\n#  SOURCES            - (input) list of input files. It can be .cpp, .h ...\n\n#  DEPENDS            - (input) set of target the generated target will depends on.\n\n#  NAME               - (input) The actual name of the generated .so file\n\n#                       (most commonly equals to TARGET, without the \"python\" prefix)\n\n#\n\n# The typical usage scenario is to build a python module out of cython binding.\n\n#\n\n# Example:\n\n# find_package(pybind11)\n\n# set(SOURCES_FILES\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/initbindings.cpp\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/binding1.cpp\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/binding2.cpp\n\n#       [...]\n\n#    )\n\n# sofa_add_pybind11_module( TARGET MyModule SOURCES ${SOURCE_FILES}\n\n#                           DEPENDS Deps1 Deps2  OUTPUT ${CMAKE_CURRENT_BIN_DIR}\n\n#                           NAME python_module_name)\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# - Create a target for a mixed python module composed of .py and binding code (in .cpp or .pyx)\n\n#\n\n# sofa_add_python_module(TARGET OUTPUT SOURCES DEPENDS CYTHONIZE)\n\n#  TARGET             - (input) the name of the generated target.\n\n#  OUTPUT             - (input) the output location, if not provided ${CMAKE_CURRENT_SOURCE_DIR} will be used. \n\n#  SOURCES            - (input) list of input files. It can be .py, .pyx, .pxd, .cpp\n\n#                               .cpp are compiled, .pyx can generate .cpp if CYTHONIZE param is set to true\n\n#  DEPENDS            - (input) set of target the generated target will depends on.\n\n#  CYTHONIZE          - (input) boolean indicating wether or not\n\n#                               we need to call cython on the .pyx file to re-generate the .cpp file.\n\n#\n\n# The typical usage scenario is to build a python module out of cython binding.\n\n#\n\n# Example:\n\n# find_package(Cython QUIET)\n\n# set(SOURCES_FILES\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/__init__.py\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/purepython.py\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/binding_withCython.pyx\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/binding_withCython.pxd\n\n#       ${CMAKE_CURRENT_SOURCE_DIR}/ModuleDir/binding_withCPython.cpp\n\n#    )\n\n# sofa_add_python_module( TARGET MyModule SOURCES ${SOURCE_FILES} DEPENDS Deps1 Deps2 CYTHONIZE True OUTPUT ${CMAKE_CURRENT_BIN_DIR})\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Build the .cpp out of the .pyx\n",
        "Line" : 395,
        "CharPositionInLine" : 12
      },
      "29" : {
        "Text" : "# Execute this command,\n",
        "Line" : 397,
        "CharPositionInLine" : 115
      },
      "30" : {
        "Text" : "# The target depens on these files...\n",
        "Line" : 398,
        "CharPositionInLine" : 100
      },
      "31" : {
        "Text" : "# In this working directory\n",
        "Line" : 399,
        "CharPositionInLine" : 82
      },
      "32" : {
        "Text" : "# The implementation of Python deliberately breaks strict-aliasing rules, so we\n\n# compile with -fno-strict-aliasing to prevent the compiler from relying on\n\n# those rules to optimize the code.\n",
        "Line" : 410,
        "CharPositionInLine" : 12
      },
      "33" : {
        "Text" : "##########################################################\n\n#################### INSTALL MACROS ######################\n\n##########################################################\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# non-flat headers install (if no PUBLIC_HEADER and include_install_dir specified)\n",
        "Line" : 450,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# ARGV3 is a non-breaking additional argument to handle INCLUDE_SOURCE_DIR (see sofa_generate_package)\n\n# TODO: add a real argument \"include_source_dir\" to this macro\n",
        "Line" : 456,
        "CharPositionInLine" : 16
      },
      "36" : {
        "Text" : "# will be true if include_source_dir is empty\n",
        "Line" : 461,
        "CharPositionInLine" : 16
      },
      "37" : {
        "Text" : "#message(\"${target}: ${include_source_dir} -> include/${include_install_dir}\")\n",
        "Line" : 464,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "## Default install rules for resources\n",
        "Line" : 476,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# sofa_write_package_config_files(Foo <version> <build-include-dirs>)\n\n#\n\n# Create CMake package configuration files\n\n# - In the build tree:\n\n#   - ${CMAKE_BINARY_DIR}/cmake/FooConfig.cmake\n\n#   - ${CMAKE_BINARY_DIR}/cmake/FooConfigVersion.cmake\n\n# - In the install tree:\n\n#   - lib/cmake/Foo/FooConfigVersion.cmake\n\n#   - lib/cmake/Foo/FooConfig.cmake\n\n#   - lib/cmake/Foo/FooTargets.cmake\n\n#\n\n# This macro factorizes boilerplate CMake code for the different\n\n# packages in Sofa.  It assumes that there is a FooConfig.cmake.in\n\n# file template in the same directory.  For example, if a package Foo\n\n# depends on Bar and Baz, and creates the targets Foo and Qux, here is\n\n# a typical FooConfig.cmake.in:\n\n#\n\n# @PACKAGE_INIT@\n\n#\n\n# find_package(Bar REQUIRED)\n\n# find_package(Baz REQUIRED)\n\n#\n\n# if(NOT TARGET Qux)\n\n# \tinclude(\"${CMAKE_CURRENT_LIST_DIR}/FooTargets.cmake\")\n\n# endif()\n\n#\n\n# check_required_components(Foo Qux)\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "## <package_name>Targets.cmake\n",
        "Line" : 515,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "## <package_name>ConfigVersion.cmake\n",
        "Line" : 518,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "### <package_name>Config.cmake\n",
        "Line" : 525,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# - Create a target for SOFA plugin or module\n\n# - write the package Config, Version & Target files\n\n# - Deploy the headers, resources, scenes & examples\n\n# - Replaces the now deprecated sofa_create_package macro\n\n#\n\n# sofa_generate_package(NAME VERSION TARGETS INCLUDE_INSTALL_DIR INCLUDE_SOURCE_DIR)\n\n#  NAME                - (input) the name of the generated package (usually ${PROJECT_NAME}).\n\n#  VERSION             - (input) the package version (usually ${PROJECT_VERSION}).\n\n#  TARGETS             - (input) list of targets to install. For standard plugins & modules, ${PROJECT_NAME}\n\n#  INCLUDE_INSTALL_DIR - (input) [OPTIONAL] include directory (for Multi-dir install of header files).\n\n#  INCLUDE_SOURCE_DIR  - (input) [OPTIONAL] install headers with same tree structure as source starting from this dir (defaults to ${CMAKE_CURRENT_SOURCE_DIR})\n\n#\n\n# Example:\n\n# project(ExamplePlugin VERSION 1.0)\n\n# find_package(SofaFramework)\n\n# set(SOURCES_FILES  initExamplePlugin.cpp myComponent.cpp )\n\n# set(HEADER_FILES   initExamplePlugin.h myComponent.h )\n\n# add_library( ${PROJECT_NAME} SHARED ${SOURCE_FILES})\n\n# target_link_libraries(${PROJECT_NAME} SofaCore)\n\n# sofa_generate_package(NAME ${PROJECT_NAME} VERSION ${PROJECT_VERSION} TARGETS ${PROJECT_NAME} INCLUDE_INSTALL_DIR \"sofa/custom/install/dir\" INCLUDE_SOURCE_DIR src/${PROJECT_NAME} )\n\n#\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# ARGV4 is a non-breaking additional argument to handle INCLUDE_SOURCE_DIR (see sofa_generate_package)\n\n# TODO: add a real argument \"include_source_dir\" to this macro\n",
        "Line" : 572,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Get path of all library versions (involving symbolic links) for a specified library\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# In \"${LIBREAL_NAME}.\" the dot is a real dot, not a regex symbol\n\n# CMAKE_*_LIBRARY_SUFFIX also start with a dot\n\n# So regex is:\n\n# <library_path> <slash> <library_name> <dot> <dll/so/dylib/...>\n\n# or:\n\n# <library_path> <slash> <library_name> <dot> <anything> <dot> <dll/so/dylib/...>\n",
        "Line" : 587,
        "CharPositionInLine" : 12
      },
      "47" : {
        "Text" : "# libtiff.dll\n",
        "Line" : 594,
        "CharPositionInLine" : 81
      },
      "48" : {
        "Text" : "# libpng16.dll\n",
        "Line" : 596,
        "CharPositionInLine" : 91
      },
      "49" : {
        "Text" : "# libpng.16.dylib\n",
        "Line" : 597,
        "CharPositionInLine" : 83
      },
      "50" : {
        "Text" : "# Multi-config generator (MSVC)\n",
        "Line" : 641,
        "CharPositionInLine" : 42
      },
      "51" : {
        "Text" : "# Single-config generator (nmake)\n",
        "Line" : 645,
        "CharPositionInLine" : 40
      },
      "52" : {
        "Text" : "# Multi-config generator (MSVC)\n",
        "Line" : 655,
        "CharPositionInLine" : 38
      },
      "53" : {
        "Text" : "# Single-config generator (nmake)\n",
        "Line" : 660,
        "CharPositionInLine" : 15
      },
      "54" : {
        "Text" : "## to store which sources have been used for installed binaries\n\n## these should be internal files and not delivered, but this is definitively useful\n\n## when storing backups / demos across several repositories (e.g. sofa + plugins)\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 55
    },
    "SofaKernel/SofaSimulation/CMakeLists.txt" : {
      "ObjectId" : "e77663f60b8ae698f65625ea7effcf70037c575c",
      "LastModified" : "2017-07-18T11:54:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Version\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## sofa/simulation/config.h\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Subdirectories\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For sofa/simulation/config.h\n",
        "Line" : 27,
        "CharPositionInLine" : 98
      },
      "5" : {
        "Text" : "# IDE folder\n",
        "Line" : 29,
        "CharPositionInLine" : 70
      },
      "6" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "SofaKernel/cmake/CompilerOptions.cmake" : {
      "ObjectId" : "17e81d68eeaedaba9021ee79e4cdac829c10532e",
      "LastModified" : "2018-11-29T17:33:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#### Compiler options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## GCC-specific\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Find out the version of g++ (and save it in GCXX_VERSION)\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# CXX=\"ccache g++\"\n",
        "Line" : 6,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "## Disable partial inlining under gcc 4.6 (Why? -> the memory was exploding)\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# stack-protector\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# _FORTIFY_SOURCE\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# ???\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "## GCC/Clang-specific\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Warnings\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "## Windows-specific\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## SOFA_DEBUG preprocessor macro\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Reminder: multi-configuration generators like Visual Studio and XCode do\n\n# not use CMAKE_BUILD_TYPE, as they generate all configurations in the\n\n# project, not just one at a time!\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "## OpenMP\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#    target_compile_options(SofaHelper PUBLIC \"${OpenMP_CXX_FLAGS}\") # it is not enough to declare it for SofaHelper, because a link flag is also expected\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# C++11 is now mandatory\n\n# TODO how to propagate such properties to dependents?\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# An important C++11 feature may be not enabled due to\n\n# the compiler being built without the --enable-libstdcxx-time option.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# hack for clang on old macosx (version < 10.9, such as the dashboard servers)\n\n# that is using, by default at that time, a libstdc++ that did not fully implement c++11\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++abi\")\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "SofaKernel/cmake/Modules/FindEigen3.cmake" : {
      "ObjectId" : "9e2d6c91462aaca91fb0ad20ed6fd3bf93c2833c",
      "LastModified" : "2016-05-09T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# This module reads hints about search locations from variables:\n\n#  EIGEN_ROOT - Preferred installation prefix\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "SofaKernel/cmake/Modules/FindPTHREAD.cmake" : {
      "ObjectId" : "4a0aca28f26fdcf0c09af66effb3f3ce4a162601",
      "LastModified" : "2016-05-09T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find pthread\n\n# Find the native PTHREAD headers and libraries.\n\n#\n\n#  PTHREAD_INCLUDE_DIR -  where to find pthread.h, etc.\n\n#  PTHREAD_LIBRARIES    - List of libraries when using pthread.\n\n#  PTHREAD_FOUND        - True if pthread found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Report the results.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "SofaKernel/cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "288eed3b9aa6a0c74206795f321937f19d1aae32",
      "LastModified" : "2016-05-09T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to find_package().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>]\n\n#                                           [HANDLE_COMPONENTS]\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# If the package supports components, use the HANDLE_COMPONENTS option to enable\n\n# handling them. In this case, find_package_handle_standard_args() will report\n\n# which components have been found and which are missing, and the <NAME>_FOUND\n\n# variable will be set to FALSE if any of the required components (i.e. not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call.  In this case VERSION_VAR will be set\n\n# to <NAME>_VERSION and the macro will automatically check whether the\n\n# Config module was found.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 129,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# exact version required\n",
        "Line" : 240,
        "CharPositionInLine" : 50
      },
      "15" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 248,
        "CharPositionInLine" : 23
      },
      "16" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 259,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# print the result:\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 18
    },
    "SofaKernel/cmake/Modules/FindSOFA.cmake" : {
      "ObjectId" : "a88bf0ddd2c55b64d789a2ce4153f21c2da6ea69",
      "LastModified" : "2018-11-29T17:33:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This Finder allow to find SOFA files for build a project with it.\n\n# In order to use this cmake module, you have to call the find_package(SOFA) command in your CMakeLists.txt\n\n#\n\n# This module defines for use :\n\n# SOFA_LIBRARIES wich contain all LIBRARIES variables in absolute path of Sofa\n\n# SOFA_FOUND, if false, Sofa not found\n\n# SOFA_INCLUDE_DIRS, where to find all the headers\n\n#\n\n# $SOFA_DIR is the entry point of this find package.\n\n# $SOFA_DIR can be set by an environment variable path or in command line\n\n#\n\n# Header files are presumed to be included like\n\n# #include <sofa/defaulttype/Vec.h>\n\n# #include <sofa/defaulttype/Quat.h>\n\n#\n\n# To maintain this script, you just have to :\n\n#  * update if necessary the header file and path to search it to find the framwork/moules/application dirs\n\n#  * update if necessary the include dirs for extlibs\n\n#  * update if necessary name and cmake name of libraries in the corresponding section\n\n#  * update if necessary the paths to search the libs to the find_lib macro\n\n#\n\n# If you have some problem to include this cmake files in your CMake project, be sur you appended CMAKE_MODULE_PATH to the cmake dir :\n\n# list(APPEND CMAKE_MODULE_PATH \"${SOFA_DIR}/cmake\")\n\n#\n\n## TODO :\n\n# In order to have a more flexible FindSOFA.cmake, may be we can allow to use some additional CMAKE variables as input of this cmake module\n\n# to find other specific SOFA lib/include...\n\n#\n\n# Created by Jean-Christophe Lombardo and Jerome Esnault.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## ###########################################################################################\n\n## VERBOSITY SETTINGS\n\n## ###########################################################################################\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ###########################################################################################\n\n## DEFINE SOFA_DIR root path\n\n## ###########################################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Make sur the provided path is a cmake style path with unix /\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Already in cache, be silent\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## ###########################################################################################\n\n## FIND INCLUDE SOFA DIRS\n\n## ###########################################################################################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## ===================== SOFA_INCLUDE_FRAMEWORK_DIR\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#use a file .h looks like important file to find the path directory\n",
        "Line" : 80,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "## comment to allow CMake to search in system environment variables and\n\n## in cmake cache/environment/defined variables\n\n#NO_DEFAULT_PATH\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "## ===================== SOFA_INCLUDE_MODULES_DIR\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#use a file .h looks like important file to find the path directory\n",
        "Line" : 95,
        "CharPositionInLine" : 26
      },
      "11" : {
        "Text" : "## comment to allow CMake to search in system environment variables\n\n## and in cmake cache/environment/defined variables\n\n#NO_DEFAULT_PATH\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## ===================== SOFA_INCLUDE_APPLICATIONS_DIR\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#use a file .h looks like important file to find the path directory\n",
        "Line" : 110,
        "CharPositionInLine" : 23
      },
      "14" : {
        "Text" : "## comment to allow CMake to search in system environment variables and\n\n## in cmake cache/environment/defined variables\n\n#NO_DEFAULT_PATH\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "## ===================== SOFA_INCLUDE_OTHER_DIRS\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#${SOFA_INCLUDE_EXTLIBS}/qwt-5.2.0/src\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#    ${SOFA_INCLUDE_EXTLIBS}/SLC\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "## ###########################################################################################\n\n## FIND LIBRARIES\n\n##\n\n## SOFA group the components by functionality and maturity state.\n\n## 50 new groups are contained in 5 different categories:\n\n## BASE, COMMON, GENERAL, ADVANCED and MISC.\n\n##\n\n## 1- collect all library name to search in the SOFA_LIBS_NAME list splitted into 5 parts\n\n##    * the SOFA LIBS BASE LIST\n\n##    * the SOFA COMMON LIST\n\n##    * THE SOFA GENERAL LIST\n\n##    * THE SOFA ADVANCED LIST\n\n##    * THE SOFA MISC LIST\n\n## 2- for each library :\n\n##    * get it CMAKE_SOFA_LIB_NAME and it associate REAL_SOFA_LIB_NAME\n\n##    * find library and set SOFA_LIBRARIES\n\n## ###########################################################################################\n\n## Put the name of the library SOFA CORE to search and put it associate CMakeName\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#SofaGui             SOFA_LIB_GUI\n\n#SofaTree            SOFA_LIB_TREE\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#SofaModeler         SOFA_LIB_MODELER\n\n#SofaSimulation      SOFA_LIB_SIMULATION\n\n#SofaObjectCreator   SOFA_OBJECT_CREATOR\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#SofaGraph           SOFA_LIB_GRAPH\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "## Put the name of the library SOFA COMPONENT to search and put it associate CMakeName\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#SofaComponent             SOFA_LIB_COMPONENT\n\n#SofaComponentDev          SOFA_LIB_COMPONENT_DEV\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#SofaComponentMiscDev      SOFA_LIB_COMPONENT_MISC_DEV\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#SofaComponentAdvancedDev  SOFA_LIB_COMPONENT_ADVANCED_DEV\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "## Put the name of the library SOFA BASE to search and put it associate CMakeName\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Put the name of the library SOFA COMMON to search and put it associate CMakeName\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Put the name of the library SOFA GENERAL to search and put it associate CMakeName\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Put the name of the library SOFA ADVANCED to search and put it associate CMakeName\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#SofaAdvancedConstraint     SOFA_LIB_ADVANCED_CONSTRAINT\n\n#SofaAdvancedFem            SOFA_LIB_ADVANCED_FEM\n\n#SofaAdvancedInteraction    SOFA_LIB_ADVANCED_INTERACTION\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "#SofaMjedFem                SOFA_LIB_MJED_FEM\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#SofaNonUniformFemDev       SOFA_LIB_NON_UNIFORM_FEM_DEV\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "## Put the name of the library SOFA MISC to search and put it associate CMakeName\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#SofaMiscDev               SOFA_LIB_MISC_DEV\n\n#SofaMiscFemDev            SOFA_LIB_MISC_FEM_DEV\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "#SofaMiscForcefieldDev     SOFA_LIB_MISC_FORCEFIELD_DEV\n",
        "Line" : 308,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#SofaMiscMappingDev        SOFA_LIB_MISC_MAPPING_DEV\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "#SofaMiscSolverDev         SOFA_LIB_MISC_SOLVER_DEV\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "#SofaMiscTopologyDev       SOFA_LIB_MISC_TOPOLOGY_DEV\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "## Put the name of the library EXT to search and put it associate CMakeName\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "## Collect all list of libs names together in one list\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# To use VERBOSE macro (print only if VAR or default VERBOSE_CMAKE is set to true\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#${SOFA_DIR}/bin\n",
        "Line" : 373,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# first default path the find_library command will use\n",
        "Line" : 376,
        "CharPositionInLine" : 52
      },
      "44" : {
        "Text" : "## Take the name of the library to found in the list[n],\n\n## found it full path and place it into the variable of the list[n+1]\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#because of the foreach expression to take namesLib by pair\n",
        "Line" : 381,
        "CharPositionInLine" : 37
      },
      "46" : {
        "Text" : "## Indices to display list in 3 parts\n",
        "Line" : 388,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "## Get the valueName of the searched library\n",
        "Line" : 420,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "## Get the variableName of the coresponding searched library\n",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "## Allow to select library\n\n#    option(SOFA_USE_${CMAKE_SOFA_LIB_NAME} \"Build ${CMAKE_SOFA_LIB_NAME}\" true)\n\n#    if(SOFA_USE_${CMAKE_SOFA_LIB_NAME})\n",
        "Line" : 428,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "## Use the MACRO defined above to find the library with it full path\n",
        "Line" : 432,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# SOFA provide all extlib it need\n",
        "Line" : 445,
        "CharPositionInLine" : 24
      },
      "52" : {
        "Text" : "## Add all libraries (release and then debug) find to one variable\n",
        "Line" : 454,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "#    endif(SOFA_USE_${CMAKE_SOFA_LIB_NAME})\n",
        "Line" : 464,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "## ###########################################################################################\n\n## FINALISE AND CHECK\n\n## ###########################################################################################\n\n## handle the QUIETLY and REQUIRED arguments and set SOFA_FOUND to TRUE if\n\n## all listed variables are TRUE\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#SOFA_LIB_SIMULATION\n\n#SOFA_LIB_COMPONENT\n",
        "Line" : 487,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "## ###########################################################################################\n\n## FIND SOFA DEFINES\n\n## ###########################################################################################\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "## get a list of lines\n",
        "Line" : 497,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "## Add \"-D\" for compatibility with CMake\n",
        "Line" : 503,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 59
    },
    "SofaKernel/cmake/Modules/FindSofaThreads.cmake" : {
      "ObjectId" : "5d1e0cdb7682dbf08bcb1f810d762f9288b0d8ea",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Updated FindThreads.cmake that supports pthread-win32\n\n# Downloaded from http://www.vtk.org/Bug/bug_view_advanced_page.php?bug_id=6399\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - This module determines the thread library of the system.\n\n#\n\n# The following variables are set\n\n#  CMAKE_THREAD_LIBS_INIT     - the thread library\n\n#  CMAKE_USE_SPROC_INIT       - are we using sproc?\n\n#  CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?\n\n#  CMAKE_USE_PTHREADS_INIT    - are we using pthreads\n\n#  CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads\n\n#\n\n# If use of pthreads-win32 is desired, the following variables\n\n# can be set.\n\n#\n\n#  THREADS_USE_PTHREADS_WIN32 -\n\n#    Setting this to true searches for the pthreads-win32\n\n#    port (since CMake 2.8.0)\n\n#\n\n#  THREADS_PTHREADS_WIN32_EXCEPTION_SCHEME\n\n#      C  = no exceptions (default)\n\n#         (NOTE: This is the default scheme on most POSIX thread\n\n#          implementations and what you should probably be using)\n\n#      CE = C++ Exception Handling\n\n#      SE = Structure Exception Handling (MSVC only)\n\n#      (NOTE: Changing this option from the default may affect\n\n#       the portability of your application.  See pthreads-win32\n\n#       documentation for more details.)\n\n#\n\n#======================================================\n\n# Example usage where threading library\n\n# is provided by the system:\n\n#\n\n#   find_package(Threads REQUIRED)\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo ${CMAKE_THREAD_LIBS_INIT})\n\n#\n\n# Example usage if pthreads-win32 is desired on Windows\n\n# or a system provided thread library:\n\n#\n\n#   set(THREADS_USE_PTHREADS_WIN32 true)\n\n#   find_package(Threads REQUIRED)\n\n#   include_directories(${THREADS_PTHREADS_INCLUDE_DIR})\n\n#\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo ${CMAKE_THREAD_LIBS_INIT})\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do we have sproc?\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We have sproc\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Assign the default scheme\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Validate the scheme specified by the user\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Determine the library filename\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Use the include path to help find the library if possible\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Do we have pthreads?\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#\n\n# We have pthread.h\n\n# Let's check for the library now.\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Do we have -lpthreads\n",
        "Line" : 131,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Ok, how about -lpthread\n",
        "Line" : 139,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# On sun also check for -lthread\n",
        "Line" : 148,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# If we did not found -lpthread, -lpthread, or -lthread, look for -pthread\n",
        "Line" : 160,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Use libcma if it exists and can be used.  It provides more\n\n# symbols than the plain pthread library.  CMA threads\n\n# have actually been deprecated:\n\n#   http://docs.hp.com/en/B3920-90091/ch12s03.html#d0e11395\n\n#   http://docs.hp.com/en/947/d8.html\n\n# but we need to maintain compatibility here.\n\n# The CMAKE_HP_PTHREADS setting actually indicates whether CMA threads\n\n# are available.\n",
        "Line" : 210,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 15
    },
    "SofaKernel/cmake/Modules/find_lib.cmake" : {
      "ObjectId" : "52e63fc132c8d6f5de2b1d84ad29eb195610f419",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## CMAKE_DOCUMENTATION_START find_lib\n\n##\n\n##\\\\code\n\n##FIND_LIB( MY_LIBRARY_VARIABLE MY_LIBRARY_REAL_NAME  \\n\n\n##[PATHSLIST_DEBUG    path1 path2 ...]        \\n\n\n##[PATHSLIST_RELEASE  path1 path2 ...]        \\n\n\n##[VERBOSE var]                               \\n\n\n##          [DEBUG_POSTFIX string]                      \\n\n\n##          [RELEASE_POSTFIX string]                    \\n\n\n##          [FORCE_DEBUG]                               \\n\n\n##          [FORCE_RELEASE]                             \\n\n\n## )\n\n##\\\\endcode\n\n## Brief            : Macro to find a single library.   \\\\n\n\n## required         : ParseArgumentsMacro.   \\\\n\n\n## Param 1          : MY_LIBRARY_VARIABLE is the variable you use to contain the lib..   \\\\n\n\n##                      note1: \"${MYLIBRARY}_DEBUG\" is set with the \"${MYLIBRARYNAME}${CMAKE_DEBUG_POSTFIX}\" found.   \\\\n\n\n##                      note2:  \"${MYLIBRARY}\" is set with the \"${MYLIBRARYNAME}${CMAKE_RELEASE_POSTFIX}\" found.   \\\\n\n\n## Param 2          : MY_LIBRARY_REAL_NAME is the name of the library to find (without postfix).   \\\\n\n\n## Optional var 1: PATHSLIST_DEBUG paths     -> list of paths in order to find the debug lib.   \\\\n\n\n## Optional var 2: PATHSLIST_RELEASE paths   -> list of paths in order to find the release lib.   \\\\n\n\n## Optional var 3: VERBOSE var               -> is the variable which allow the printing messages infos.   \\\\n\n\n## Optional var 4: DEBUG_POSTFIX string      -> is default to \"d\".   \\\\n\n\n## Optional var 5: RELEASE_POSTFIX string    -> is default to empty \"\".   \\\\n\n\n## Optional flag 1: FORCE_DEBUG   -> If no DEBUG LIBRARY found, set the debug variable library to the release variable.   \\\\n\n\n## Optional flag 2: FORCE_RELEASE -> If no RELEASE LIBRARY found, set the release variable library to the debug variable.   \\\\n\n\n## Usage 1          : FIND_LIB( ${CMAKE_PROJECT_LIB_NAME} ${REAL_PROJECT_LIB_NAME} ).   \\\\n\n\n## full usage exemple:\n\n##\\\\code\n\n## FIND_LIB(${CMAKE_SOFA_LIB_NAME} ${REAL_SOFA_LIB_NAME}    \\n\n\n##         PATHSLIST_DEBUG                                  \\n\n\n##             ${SEARCH_LIB_PATHS}                          \\n\n\n##             ${PROJECT_DIR}/lib/Debug                     \\n\n\n##             ${PROJECT_DIR}/lib64/Debug                   \\n\n\n##         PATHSLIST_RELEASE                                \\n\n\n##             ${SEARCH_LIB_PATHS}                          \\n\n\n##             ${PROJECT_DIR}/lib/Release                   \\n\n\n##             ${PROJECT_DIR}/lib64/Release                 \\n\n\n##         VERBOSE          ${PROJECT_VERBOSE}              \\n\n\n##         DEBUG_POSTFIX    \"d\"                             \\n\n\n##         RELEASE_POSTFIX  \"\"                             \\n\n\n##         FORCE_DEBUG      true                            \\n\n\n##         FORCE_RELEASE    true                            \\n\n\n## )\n\n##\\\\endcode\n\n##\n\n##CMAKE_DOCUMENTATION_END\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remain args\n\n#message(\"FIND_LIB_UNPARSED_ARGUMENTS = ${FIND_LIB_UNPARSED_ARGUMENTS}\")\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# default VERBOSE\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# default FORCE_DEBUG\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# default FORCE_RELEASE\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# default DEBUG_POSTFIX\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# default RELEASE_POSTFIX\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# search order :\n\n#message(\"CMAKE_LIBRARY_PATH = ${CMAKE_LIBRARY_PATH}\")\n\n#message(\"CMAKE_SYSTEM_LIBRARY_PATH = ${CMAKE_SYSTEM_LIBRARY_PATH}\") # can be skip usging: NO_CMAKE_SYSTEM_PATH\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "## Find debug library\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "## Find release library\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "## Allow to use debug and release version :\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## If no DEBUG LIBRARY found, set the debug variable library to the release variable\n",
        "Line" : 132,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "## If no RELEASE LIBRARY found, set the release variable library to the debug variable\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 13
    },
    "SofaKernel/cmake/doxygen/CMakeLists.txt" : {
      "ObjectId" : "520ab6b52d2841903cc1c1c753c58506eef0d236",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/CMakeLists.txt" : {
      "ObjectId" : "59fca86366296e41ebc231241e951d79bd49de69",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Necessary ones\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++11\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Wno-deprecated-register does not exist in GCC\n",
        "Line" : 26,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 3
    },
    "SofaKernel/extlibs/eigen-3.2.7/CMakeLists.txt" : {
      "ObjectId" : "1df78a919d4eb076b253e73098096b92263567e2",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/CMakeLists.txt" : {
      "ObjectId" : "c326f374d9ee89c953dd9caefbfaffccb905511c",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Cholesky/CMakeLists.txt" : {
      "ObjectId" : "d01488b41a826850277a918f555e3668167dd367",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/CholmodSupport/CMakeLists.txt" : {
      "ObjectId" : "814dfa61313847c0f33538e11c4ac4557ec3e32e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/CMakeLists.txt" : {
      "ObjectId" : "2346fc2bbca4d9bd699efc4c366afd7abd400e3c",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/arch/AltiVec/CMakeLists.txt" : {
      "ObjectId" : "9f8d2e9c46765f4253d6877d040e5c2a90612086",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/arch/CMakeLists.txt" : {
      "ObjectId" : "8456dec1581554a4f7798ebe7d9d292369f21607",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/arch/Default/CMakeLists.txt" : {
      "ObjectId" : "339c091d156100d46f3acbc67ad205749d8f4b3d",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/arch/NEON/CMakeLists.txt" : {
      "ObjectId" : "fd4d4af50cb46dac7e6b29ef8654e70528e1f3ca",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/arch/SSE/CMakeLists.txt" : {
      "ObjectId" : "46ea7cc623c62394c78425b15e100b84126b40a7",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/products/CMakeLists.txt" : {
      "ObjectId" : "21fc94ae38a5574289ae4e304ce087f3ed6897f0",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Core/util/CMakeLists.txt" : {
      "ObjectId" : "a1e2e521fc11124c92768621c4edf784bc10f51f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Eigen2Support/CMakeLists.txt" : {
      "ObjectId" : "7ae41b3cbe9c568f7efdaf45cd1a1ef874bf309b",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Eigen2Support/Geometry/CMakeLists.txt" : {
      "ObjectId" : "c347a8f26228694dc67e0e89ff6d509152dac738",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Eigenvalues/CMakeLists.txt" : {
      "ObjectId" : "193e0268599516e2515318ed04eb6dda37b2dd59",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Geometry/CMakeLists.txt" : {
      "ObjectId" : "f8f728b84faf0e08d91fac04e2986260368b9063",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Geometry/arch/CMakeLists.txt" : {
      "ObjectId" : "1267a79c78767c43d11c529cc84468cbdd1052a2",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Householder/CMakeLists.txt" : {
      "ObjectId" : "ce4937db061bbadb0357ccc45547b141761a70e3",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/IterativeLinearSolvers/CMakeLists.txt" : {
      "ObjectId" : "59ccc0072cc4ed78e6aa783bfab2486aac757fca",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/Jacobi/CMakeLists.txt" : {
      "ObjectId" : "490dac626439ade5e05baaba504689366db22e6d",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/LU/CMakeLists.txt" : {
      "ObjectId" : "e0d8d78c1720abb27432f41aa2ace29ef3f3794f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/LU/arch/CMakeLists.txt" : {
      "ObjectId" : "f6b7ed9ecc3a25e3885c7fece60428481e51c696",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/MetisSupport/CMakeLists.txt" : {
      "ObjectId" : "2bad314163c5044265aa6ac14e3767308dd04ba6",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/OrderingMethods/CMakeLists.txt" : {
      "ObjectId" : "9f4bb275808257ac71d6c04d9c602ce5c0b5be8d",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/PaStiXSupport/CMakeLists.txt" : {
      "ObjectId" : "28c657e9bcf7d3e0ecc800f6d5a11d54020b58cc",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/PardisoSupport/CMakeLists.txt" : {
      "ObjectId" : "a097ab401920ea1b7068f790edcfcf9086b3038b",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/QR/CMakeLists.txt" : {
      "ObjectId" : "96f43d7f5b30fa024b9bd2d9e3a5dacb9d401ecb",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/SPQRSupport/CMakeLists.txt" : {
      "ObjectId" : "4968beaf2c59bcec07fe1861b5d72cb4d6723a6d",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/SVD/CMakeLists.txt" : {
      "ObjectId" : "55efc44b12970d5ec715393cb68cd061203ce941",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/SparseCholesky/CMakeLists.txt" : {
      "ObjectId" : "375a59d7a577877313a1ff2a6bf1c8fac138768b",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/SparseCore/CMakeLists.txt" : {
      "ObjectId" : "d860452a65cb20850a12a120ab1fd3e3fd83dccc",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/SparseLU/CMakeLists.txt" : {
      "ObjectId" : "69729ee8961aa7d4ef514e9f890de0d29f12161f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/SparseQR/CMakeLists.txt" : {
      "ObjectId" : "f9ddf2bdb75878292267c18697d9dedbd69a6611",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/StlSupport/CMakeLists.txt" : {
      "ObjectId" : "0f094f637acd51b0931e58a199c30f550beaa282",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/SuperLUSupport/CMakeLists.txt" : {
      "ObjectId" : "b28ebe5839cf5c664abdb44c186547507ce688d3",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/UmfPackSupport/CMakeLists.txt" : {
      "ObjectId" : "a57de00209d3bc746b050d1b8aa736bccc66f2bc",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/misc/CMakeLists.txt" : {
      "ObjectId" : "a58ffb7457e06a7a69426a21a9d46d07a6a8ee91",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/Eigen/src/plugins/CMakeLists.txt" : {
      "ObjectId" : "1a1d3ffbd724d17e161c40c48ac56c8b1aeb2e1f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/blas/CMakeLists.txt" : {
      "ObjectId" : "a9bc051374a3af8eeb0240d0f077c2b36ae6ae4e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 54,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/blas/testing/CMakeLists.txt" : {
      "ObjectId" : "3ab8026ea3e4dd051697be9303e3ad5a5576d72a",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_custom_target(level1)\n\n# add_dependencies(level1 sblat1)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/EigenConfigureTesting.cmake" : {
      "ObjectId" : "2b11d8360dce751773bc0fd46598326f9c6580e5",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configure the \"site\" and \"buildname\" \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# retrieve and store the build string\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check whether /bin/bash exists\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake/Ctest does not allow us to change the build command,\n\n# so we have to workaround by directly editing the generated DartConfiguration.tcl file\n\n# save CMAKE_MAKE_PROGRAM\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# and set a fake one\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This call activates testing and generates the DartConfiguration.tcl\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Overwrite default DartConfiguration.tcl such that ctest can build our unit tests.\n\n# Recall that our unit tests are not in the \"all\" target, so we have to explicitely ask ctest to build our custom 'buildtests' target.\n\n# At this stage, we can also add custom flags to the build tool through the user defined EIGEN_TEST_BUILD_FLAGS variable.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try to grab the default flags\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# some documentation of this function would be nice\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# configure Eigen related testing options\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/EigenDetermineOSVersion.cmake" : {
      "ObjectId" : "3c48d4c3740b549da322258024368b9fee1466f1",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The utility function DetermineOSVersion aims at providing an\n\n# improved version of the CMake variable ${CMAKE_SYSTEM} on Windows\n\n# machines.\n\n#\n\n# Usage:\n\n#  include(EigenDetermineOSVersion)\n\n#  DetermineOSVersion(OS_VERSION)\n\n#  message(\"OS: ${OS_VERSION}\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - A little helper variable which should not be directly called\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/EigenDetermineVSServicePack.cmake" : {
      "ObjectId" : "8e5546a851f2fbd23ee614fd390d7fd66bc7a8ac",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code is almost identical to the CMake version. The only difference is that we remove\n\n# _DetermineVSServicePack_FastCheckVersionWithCompiler which lead to errors on some systems.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Call helper function to determine VS version\n",
        "Line" : 18,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 2
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/EigenTesting.cmake" : {
      "ObjectId" : "cbe12d51b8b43abc022909adcfff07f8e672b9a3",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#internal. See documentation of ei_add_test for details.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# let the user pass flags.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# it could be that some cmake module provides a bad library string \" \"  (just spaces),\n\n# and that severely breaks target_link_libraries (\"can't link to -l-lstdc++\" errors).\n\n# so we check for strings containing only spaces.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# notice: no double quotes around ${libs_to_link} here. It may be a list.\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Specify target and test labels accoirding to EIGEN_CURRENT_SUBPROJECT\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Macro to add a test\n\n#\n\n# the unique mandatory parameter testname must correspond to a file\n\n# <testname>.cpp which follows this pattern:\n\n#\n\n# #include \"main.h\"\n\n# void test_<testname>() { ... }\n\n#\n\n# Depending on the contents of that file, this macro can have 2 behaviors,\n\n# see below.\n\n#\n\n# The optional 2nd parameter is libraries to link to.\n\n#\n\n# A. Default behavior\n\n#\n\n# this macro adds an executable <testname> as well as a ctest test\n\n# named <testname> too.\n\n#\n\n# On platforms with bash simply run:\n\n#   \"ctest -V\" or \"ctest -V -R <testname>\"\n\n# On other platform use ctest as usual\n\n#\n\n# B. Multi-part behavior\n\n#\n\n# If the source file matches the regexp\n\n#    CALL_SUBTEST_[0-9]+|EIGEN_TEST_PART_[0-9]+\n\n# then it is interpreted as a multi-part test. The behavior then depends on the\n\n# CMake option EIGEN_SPLIT_LARGE_TESTS, which is ON by default.\n\n#\n\n# If EIGEN_SPLIT_LARGE_TESTS is OFF, the behavior is the same as in A (the multi-part\n\n# aspect is ignored).\n\n#\n\n# If EIGEN_SPLIT_LARGE_TESTS is ON, the test is split into multiple executables\n\n#   test_<testname>_<N>\n\n# where N runs from 1 to the greatest occurence found in the source file. Each of these\n\n# executables is built passing -DEIGEN_TEST_PART_N. This allows to split large tests\n\n# into smaller executables.\n\n#\n\n# Moreover, targets <testname> are still generated, they\n\n# have the effect of building all the parts of the test.\n\n#\n\n# Again, ctest -R allows to run all matching tests.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# adds a failtest, i.e. a test that succeed if the program fails to compile\n\n# note that the test runner for these is CMake itself, when passed -DEIGEN_FAILTEST=ON\n\n# so here we're just running CMake commands immediately, we're not adding any targets.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# print a summary of the different options\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# vectorization / alignment options\n",
        "Line" : 266,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# uncomment anytime you change the ei_get_compilerver_from_cxx_version_string macro\n\n# ei_test_get_compilerver_from_cxx_version_string()\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# if the sitename is not yet set, try to set it\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# in case it is already set, enforce lower case\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# on windows system, we use a modified CMake script  \n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# on all other system we rely on ${CMAKE_CXX_COMPILER}\n\n# supporting a \"--version\" or \"/version\" flag\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Extract compiler name and version from a raw version string\n\n# WARNING: if you edit thid macro, then please test it by  uncommenting\n\n# the testing macro call in ei_init_testing() of the EigenTesting.cmake file.\n\n# See also the ei_test_get_compilerver_from_cxx_version_string macro at the end of the file\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# extract possible compiler names  \n",
        "Line" : 348,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# combine them\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# extract possible version numbers\n\n# first try to extract 3 isolated numbers:\n",
        "Line" : 368,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# try to extract 2 isolated ones:\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# try to extract 3:\n",
        "Line" : 375,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# try to extract 2:\n",
        "Line" : 378,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# helper macro for testing ei_get_compilerver_from_cxx_version_string\n\n# STR: raw version string\n\n# REFNAME: expected compiler name\n\n# REFVER: expected compiler version\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# macro for testing ei_get_compilerver_from_cxx_version_string\n\n# feel free to add more version strings\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindAdolc.cmake" : {
      "ObjectId" : "1a7ff3628a1aa6bd0a033b75edf23bbdc587d899",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindBLAS.cmake" : {
      "ObjectId" : "68c4e072417b9bc434895d1feb6e89e3bc7e5548",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find BLAS library\n\n#\n\n# This module finds an installed library that implements the BLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/).\n\n# The list of libraries searched for is mainly taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface\n\n#    is found\n\n#  BLAS_INCLUDE_DIR - Directories containing the BLAS header files\n\n#  BLAS_DEFINITIONS - Compilation options to use BLAS\n\n#  BLAS_LINKER_FLAGS - Linker flags to use BLAS (excluding -l\n\n#    and -L).\n\n#  BLAS_LIBRARIES_DIR - Directories containing the BLAS libraries.\n\n#     May be null if BLAS_LIBRARIES contains libraries name using full path.\n\n#  BLAS_LIBRARIES - List of libraries to link against BLAS interface.\n\n#     May be null if the compiler supports auto-link (e.g. VC++).\n\n#  BLAS_USE_FILE - The name of the cmake module to include to compile\n\n#     applications or libraries using BLAS.\n\n#\n\n# This module was modified by CGAL team:\n\n# - find libraries for a C++ compiler, instead of Fortran\n\n# - added BLAS_INCLUDE_DIR, BLAS_DEFINITIONS and BLAS_LIBRARIES_DIR\n\n# - removed BLAS95_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# check_function_exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found and DEFINITIONS to the required definitions.\n\n# Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"DEBUG: check_fortran_libraries(${_list} in ${_path})\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check for the existence of the libraries given by _list\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# search first in ${_path}\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# if not found, search in environment variables and system\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Test this combination of libraries with the Fortran/f2c interface.\n\n# We test the Fortran interface first as it is well standardized.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some C++ linkers require the f2c library to link with Fortran libraries.\n\n# I do not know which ones, thus I just add the f2c library if it is available.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_DEFINITIONS = ${CMAKE_REQUIRED_DEFINITIONS}\")\n\n#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n\n# Check if function exists with f2c calling convention (ie a trailing underscore)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# If not found, test this combination of libraries with a C interface.\n\n# A few implementations (ie ACML) provide a C interface. Unfortunately, there is no standard.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# on failure\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(\"DEBUG: ${DEFINITIONS} = ${${DEFINITIONS}}\")\n\n#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# main\n\n#\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# reset variables\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#\n\n# If Unix, search for BLAS function in possible libraries\n\n#\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Extra linker flag\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# BLAS in IBM ESSL library? (requires generic BLAS lib, too)\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "### windows version of intel mkl 10?\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "#older versions of intel mkl libs\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# BLAS in intel mkl library? (shared)\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#BLAS in intel mkl library? (static, 32bit)\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "#BLAS in intel mkl library? (static, em64t 64bit)\n",
        "Line" : 317,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 330,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Generic BLAS library?\n\n# This configuration *must* be the last try as this library is notably slow.\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Add variables to cache\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#message(\"DEBUG: BLAS_INCLUDE_DIR = ${BLAS_INCLUDE_DIR}\")\n\n#message(\"DEBUG: BLAS_DEFINITIONS = ${BLAS_DEFINITIONS}\")\n\n#message(\"DEBUG: BLAS_LINKER_FLAGS = ${BLAS_LINKER_FLAGS}\")\n\n#message(\"DEBUG: BLAS_LIBRARIES = ${BLAS_LIBRARIES}\")\n\n#message(\"DEBUG: BLAS_LIBRARIES_DIR = ${BLAS_LIBRARIES_DIR}\")\n\n#message(\"DEBUG: BLAS_FOUND = ${BLAS_FOUND}\")\n",
        "Line" : 412,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 37
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindCholmod.cmake" : {
      "ObjectId" : "23239c300f1b2004794e9968a825a45fa5bb5ccd",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cholmod lib usually requires linking to a blas and lapack library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindEigen2.cmake" : {
      "ObjectId" : "a834b887286045fcdc381633ec95bf204834aadf",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen2 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen2 2.0.3)\n\n# to require version 2.0.3 to newer of Eigen2.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN2_FOUND - system has eigen lib with correct version\n\n#  EIGEN2_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN2_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindEigen3.cmake" : {
      "ObjectId" : "9c546a05d859b18c49554d7ee7221cc486b7760e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindFFTW.cmake" : {
      "ObjectId" : "6c4dc9ab495d5ab56b6b3943b2c53200b35c5ee8",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the FFTW library\n\n#\n\n# Usage:\n\n#   find_package(FFTW [REQUIRED] [QUIET] )\n\n#     \n\n# It sets the following variables:\n\n#   FFTW_FOUND               ... true if fftw is found on the system\n\n#   FFTW_LIBRARIES           ... full path to fftw library\n\n#   FFTW_INCLUDES            ... fftw include directory\n\n#\n\n# The following variables will be checked by the function\n\n#   FFTW_USE_STATIC_LIBS    ... if true, only static libraries are found\n\n#   FFTW_ROOT               ... if set, the libraries are exclusively searched\n\n#                               under this path\n\n#   FFTW_LIBRARY            ... fftw library to use\n\n#   FFTW_INCLUDE_DIR        ... fftw include directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#If environment variable FFTWDIR is specified, it has same effect as FFTW_ROOT\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check if we can use PkgConfig\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Determine from PKG\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Check whether to search static or dynamic libs\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#find libs\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#find includes\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindGLEW.cmake" : {
      "ObjectId" : "54da20f12bdba627f0d90fb8d225e4995b92ea7c",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2009 Boudewijn Rempt <boud@valdyas.org>                                                                                          \n\n#                                                                                                                                                \n\n# Redistribution and use is allowed according to the terms of the BSD license.                                                                   \n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file. \n\n# \n\n# - try to find glew library and include files\n\n#  GLEW_INCLUDE_DIR, where to find GL/glew.h, etc.\n\n#  GLEW_LIBRARIES, the libraries to link against\n\n#  GLEW_FOUND, If false, do not try to use GLEW.\n\n# Also defined, but not for general use are:\n\n#  GLEW_GLEW_LIBRARY = the full path to the glew library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These values for Apple could probably do with improvement.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Is -lXi and -lXmu required on all platforms that have it?\n\n# If not, we need some way to figure out what platform we are on.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#The following deprecated settings are for backwards compatibility with CMake1.4\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindGMP.cmake" : {
      "ObjectId" : "1f0273960142810512c933c53e2ff8de7ab9d428",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GNU Multiple Precision Arithmetic Library (GMP)\n\n# See http://gmplib.org/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindGSL.cmake" : {
      "ObjectId" : "bf411a7f9814843a67465198cb61c82e59c4beff",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find gnu scientific library GSL\n\n# See \n\n# http://www.gnu.org/software/gsl/  and\n\n# http://gnuwin32.sourceforge.net/packages/gsl.htm\n\n#\n\n# Once run this will define: \n\n# \n\n# GSL_FOUND       = system has GSL lib\n\n#\n\n# GSL_LIBRARIES   = full path to the libraries\n\n#    on Unix/Linux with additional linker flags from \"gsl-config --libs\"\n\n# \n\n# CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially \"`gsl-config --cxxflags`\"\n\n#\n\n# GSL_INCLUDE_DIR      = where to find headers \n\n#\n\n# GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix\n\n# GSL_EXE_LINKER_FLAGS = rpath on Unix\n\n#\n\n# Felix Woelk 07/2004\n\n# Jan Woetzel\n\n#\n\n# www.mip.informatik.uni-kiel.de\n\n# --------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# JW tested with gsl-1.8, Windows XP, MSVS 7.1\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#MESSAGE(\"DBG\\n\"\n\n#  \"GSL_GSL_LIBRARY=${GSL_GSL_LIBRARY}\\n\"\n\n#  \"GSL_GSLCBLAS_LIBRARY=${GSL_GSLCBLAS_LIBRARY}\\n\"\n\n#  \"GSL_LIBRARIES=${GSL_LIBRARIES}\")\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# MESSAGE(\"DBG GSL_CONFIG ${GSL_CONFIG}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# set CXXFLAGS to be fed into CXX_FLAGS by the user:\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# set INCLUDE_DIRS to prefix+include\n",
        "Line" : 100,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# set link libraries and link flags\n\n#SET(GSL_LIBRARIES \"`${GSL_CONFIG} --libs`\")\n",
        "Line" : 106,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# extract link dirs for rpath  \n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# extract version\n",
        "Line" : 117,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# split version as major/minor\n",
        "Line" : 122,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# split off the link dirs (for rpath)\n\n# use regular expression to match wildcard equivalent \"-L*<endchar>\"\n\n# with <endchar> is a space or a semicolon\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES_WITH_PREFIX=${GSL_LINK_DIRECTORIES_WITH_PREFIX}\")\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# remove prefix -L because we need the pure directory for LINK_DIRECTORIES\n",
        "Line" : 136,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#      MESSAGE(\"DBG  GSL_LINK_DIRECTORIES=${GSL_LINK_DIRECTORIES}\")\n\n#      MESSAGE(\"DBG  GSL_EXE_LINKER_FLAGS=${GSL_EXE_LINKER_FLAGS}\")\n",
        "Line" : 142,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#      ADD_DEFINITIONS(\"-DHAVE_GSL\")\n\n#      SET(GSL_DEFINITIONS \"-DHAVE_GSL\")\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 15
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindGoogleHash.cmake" : {
      "ObjectId" : "f6a81a02ce9dbac0710ef2b5e46eb8b9c5aa5999",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# let's make sure it compiles with the current compiler\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindLAPACK.cmake" : {
      "ObjectId" : "2fcae2199f5f55f707089108301eb2c0a350671d",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find LAPACK library\n\n#\n\n# This module finds an installed library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n# The approach follows mostly that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface\n\n#    is found\n\n#  LAPACK_INCLUDE_DIR - Directories containing the LAPACK header files\n\n#  LAPACK_DEFINITIONS - Compilation options to use LAPACK\n\n#  LAPACK_LINKER_FLAGS - Linker flags to use LAPACK (excluding -l\n\n#    and -L).\n\n#  LAPACK_LIBRARIES_DIR - Directories containing the LAPACK libraries.\n\n#     May be null if LAPACK_LIBRARIES contains libraries name using full path.\n\n#  LAPACK_LIBRARIES - List of libraries to link against LAPACK interface.\n\n#     May be null if the compiler supports auto-link (e.g. VC++).\n\n#  LAPACK_USE_FILE - The name of the cmake module to include to compile\n\n#     applications or libraries using LAPACK.\n\n#\n\n# This module was modified by CGAL team:\n\n# - find libraries for a C++ compiler, instead of Fortran\n\n# - added LAPACK_INCLUDE_DIR, LAPACK_DEFINITIONS and LAPACK_LIBRARIES_DIR\n\n# - removed LAPACK95_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# check_function_exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found and DEFINITIONS to the required definitions.\n\n# Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"DEBUG: check_lapack_libraries(${_list} in ${_path} with ${_blas})\")\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check for the existence of the libraries given by _list\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# search first in ${_path}\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# if not found, search in environment variables and system\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Test this combination of libraries with the Fortran/f2c interface.\n\n# We test the Fortran interface first as it is well standardized.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some C++ linkers require the f2c library to link with Fortran libraries.\n\n# I do not know which ones, thus I just add the f2c library if it is available.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_DEFINITIONS = ${CMAKE_REQUIRED_DEFINITIONS}\")\n\n#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n\n# Check if function exists with f2c calling convention (ie a trailing underscore)\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# If not found, test this combination of libraries with a C interface.\n\n# A few implementations (ie ACML) provide a C interface. Unfortunately, there is no standard.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# on failure\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(\"DEBUG: ${DEFINITIONS} = ${${DEFINITIONS}}\")\n\n#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# main\n\n#\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# LAPACK requires BLAS\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# reset variables\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# unused (yet)\n",
        "Line" : 158,
        "CharPositionInLine" : 32
      },
      "18" : {
        "Text" : "#\n\n# If Unix, search for LAPACK function in possible libraries\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#intel mkl lapack?\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#acml lapack?\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Apple LAPACK library?\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Generic LAPACK library?\n\n# This configuration *must* be the last try as this library is notably slow.\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Add variables to cache\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#message(\"DEBUG: LAPACK_INCLUDE_DIR = ${LAPACK_INCLUDE_DIR}\")\n\n#message(\"DEBUG: LAPACK_DEFINITIONS = ${LAPACK_DEFINITIONS}\")\n\n#message(\"DEBUG: LAPACK_LINKER_FLAGS = ${LAPACK_LINKER_FLAGS}\")\n\n#message(\"DEBUG: LAPACK_LIBRARIES = ${LAPACK_LIBRARIES}\")\n\n#message(\"DEBUG: LAPACK_LIBRARIES_DIR = ${LAPACK_LIBRARIES_DIR}\")\n\n#message(\"DEBUG: LAPACK_FOUND = ${LAPACK_FOUND}\")\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 25
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindMPFR.cmake" : {
      "ObjectId" : "aa4c2cd7d29c65f88dd63b5507b9f1aeeeb3f7a6",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MPFR library\n\n# See http://www.mpfr.org/\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(MPFR 2.3.0)\n\n# to require version 2.3.0 to newer of MPFR.\n\n#\n\n# Once done this will define\n\n#\n\n#  MPFR_FOUND - system has MPFR lib with correct version\n\n#  MPFR_INCLUDES - the MPFR include directory\n\n#  MPFR_LIBRARIES - the MPFR library\n\n#  MPFR_VERSION - MPFR version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2010 Jitse Niesen, <jitse@maths.leeds.ac.uk>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set MPFR_INCLUDES\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set MPFR_FIND_VERSION to 1.0.0 if no minimum version is specified\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set MPFR_VERSION\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check whether found version exceeds minimum version\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set MPFR_LIBRARIES\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Epilogue\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindMetis.cmake" : {
      "ObjectId" : "6a0ce790cb31f98bd4997c3609500bd001a512b2",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pastix requires METIS or METIS (partitioning and reordering tools)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindPastix.cmake" : {
      "ObjectId" : "e2e6c810d3cf985eb5faca6d87768e42a81e89ea",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pastix lib requires linking to a blas library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n\n# Pastix requires SCOTCH or METIS (partitioning and reordering tools) as well\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindSPQR.cmake" : {
      "ObjectId" : "1e958c3c1b7210602e2cdb4c4e92d42187f58156",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPQR lib usually requires linking to a blas and lapack library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SPQR lib requires Cholmod, colamd and amd as well. \n\n# FindCholmod.cmake can be used to find those packages before finding spqr\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindScotch.cmake" : {
      "ObjectId" : "530340b16fb3ef7da5507a9e8c6e667270e1a0a3",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pastix requires SCOTCH or METIS (partitioning and reordering tools)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindStandardMathLibrary.cmake" : {
      "ObjectId" : "711b0e4b4f1d82323123088b4ef04cd0836b5f9f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find how to link to the standard math library, if anything at all is needed to do.\n\n# On most platforms this is automatic, but for example it's not automatic on QNX.\n\n#\n\n# Once done this will define\n\n#\n\n#  STANDARD_MATH_LIBRARY_FOUND - we found how to successfully link to the standard math library\n\n#  STANDARD_MATH_LIBRARY - the name of the standard library that one has to link to.\n\n#                            -- this will be left empty if it's automatic (most platforms).\n\n#                            -- this will be set to \"m\" on platforms where one must explicitly\n\n#                               pass the \"-lm\" linker flag.\n\n#\n\n# Copyright (c) 2010 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# a little test program for c++ math functions.\n\n# notice the std:: is required on some platforms such as QNX\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first try compiling/linking the test program without any linker flags\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the test program linked successfully without any linker flag.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# the test program did not link successfully without any linker flag.\n\n# This is a very uncommon case that so far we only saw on QNX. The next try is the\n\n# standard name 'm' for the standard math library.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# the test program linked successfully when linking to the 'm' library\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# the test program still doesn't link successfully\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindSuperLU.cmake" : {
      "ObjectId" : "8a3df36668defb6ef511872de33729a474f9e792",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Umfpack lib usually requires linking to a blas library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/FindUmfpack.cmake" : {
      "ObjectId" : "53cf0b49b2e23d3b8e8334e2ee53e69e313f6fbd",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Umfpack lib usually requires linking to a blas library.\n\n# It is up to the user of this module to find a BLAS and link to it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/RegexUtils.cmake" : {
      "ObjectId" : "b59dfc340f524d25add382306ba143e662baabdb",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/cmake/language_support.cmake" : {
      "ObjectId" : "231f7ff70351da6342309b1a42b8fc012640a431",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake/modules/language_support.cmake\n\n#\n\n# Temporary additional general language support is contained within this\n\n# file.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This additional function definition is needed to provide a workaround for\n\n# CMake bug 9220.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On debian testing (cmake 2.6.2), I get return code zero when calling \n\n# cmake the first time, but cmake crashes when running a second time\n\n# as follows:\n\n#\n\n#  -- The Fortran compiler identification is unknown\n\n#  CMake Error at /usr/share/cmake-2.6/Modules/CMakeFortranInformation.cmake:7 (GET_FILENAME_COMPONENT):\n\n#    get_filename_component called with incorrect number of arguments\n\n#  Call Stack (most recent call first):\n\n#    CMakeLists.txt:3 (enable_language)\n\n#\n\n# My workaround is to invoke cmake twice.  If both return codes are zero, \n\n# it is safe to invoke ENABLE_LANGUAGE(Fortran OPTIONAL)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"DEBUG: language = ${language}\")\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Second run\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Temporary tests of the above function.\n\n#workaround_9220(CXX CXX_language_works)\n\n#message(\"CXX_language_works = ${CXX_language_works}\")\n\n#workaround_9220(CXXp CXXp_language_works)\n\n#message(\"CXXp_language_works = ${CXXp_language_works}\")\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "SofaKernel/extlibs/eigen-3.2.7/lapack/CMakeLists.txt" : {
      "ObjectId" : "9883d4c72d8fdcaa1599c468553281daf5008b65",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Download lapack and install sources and testing at the right place\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The following comes from lapack/TESTING/CMakeLists.txt\n\n# Get Python\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  string(REPLACE \"/STACK:10000000\" \"/STACK:900000000000000000\"\n\n#    CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}\")\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# ======== SINGLE RFP LIN TESTS ========================\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n#\n\n# ======== SINGLE EIG TESTS ===========================\n\n#\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\n\n# ======== DOUBLE LIN TESTS ===========================\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#\n\n# ======== DOUBLE RFP LIN TESTS ========================\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\n\n# ======== DOUBLE EIG TESTS ===========================\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\n\n# ======== COMPLEX RFP LIN TESTS ========================\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#\n\n# ======== COMPLEX EIG TESTS ===========================\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#\n\n# ======== COMPLEX16 LIN TESTS ========================\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#\n\n# ======== COMPLEX16 RFP LIN TESTS ========================\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#\n\n# ======== COMPLEX16 EIG TESTS ===========================\n",
        "Line" : 361,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# ======== SINGLE-DOUBLE PROTO LIN TESTS ==============\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\n\n# ======== COMPLEX-COMPLEX16 LIN TESTS ========================\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/CMakeLists.txt" : {
      "ObjectId" : "4fef40a86c6d17dd8cc792a5e4f9e8d65abcdf58",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# can't do EXCLUDE_FROM_ALL here, breaks CTest\n",
        "Line" : 4,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/CMakeLists.txt" : {
      "ObjectId" : "e1fbf97e2b211d87ebe9a10746c1e3ea653c5b98",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/AutoDiff/CMakeLists.txt" : {
      "ObjectId" : "ad91fd9c4628cd921b2efedc59b093218dc34064",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/BVH/CMakeLists.txt" : {
      "ObjectId" : "b377d865cb1f9d2db01426f0b599929a4fa6458a",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/CMakeLists.txt" : {
      "ObjectId" : "d8b9f406817331bde83fb03628a6ea383cdfb4b5",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/Eigenvalues/CMakeLists.txt" : {
      "ObjectId" : "1d4387c82432970b48168d8d96c5a3d4d76e79a2",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/FFT/CMakeLists.txt" : {
      "ObjectId" : "edcffcb189c872b5339f345aa32d772cda3f8bf0",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/IterativeSolvers/CMakeLists.txt" : {
      "ObjectId" : "7986afc5ed4ecf09fa871c726a0c2ab1945e8559",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/KroneckerProduct/CMakeLists.txt" : {
      "ObjectId" : "4daefebee6f676c073f5ecacf9e8781aa5d673c2",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/LevenbergMarquardt/CMakeLists.txt" : {
      "ObjectId" : "d9690854db3d8f757642055cc80d1c92457a8bc4",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/MatrixFunctions/CMakeLists.txt" : {
      "ObjectId" : "cdde64d2cd45b59bee6b55d6590f2fcd7827d52c",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/MoreVectorization/CMakeLists.txt" : {
      "ObjectId" : "1b887cc8e3447b27bb9d289274eeb1ee0b5e71e0",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/NonLinearOptimization/CMakeLists.txt" : {
      "ObjectId" : "9322ddadf0364cc12cd9a77fdf0b48e2cbe49f85",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/NumericalDiff/CMakeLists.txt" : {
      "ObjectId" : "1199aca2f7073703a946344a922e0adec1e22b3e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/Polynomials/CMakeLists.txt" : {
      "ObjectId" : "51f13f3cb91ea44bc113178d58ab26db47369d25",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/SVD/CMakeLists.txt" : {
      "ObjectId" : "b40baf09210610f0c605ac4a3079700f9b447bd4",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/Skyline/CMakeLists.txt" : {
      "ObjectId" : "3bf1b0dd46a7d1fa7cf90884e2284c0c06c4e8a5",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/SparseExtra/CMakeLists.txt" : {
      "ObjectId" : "7ea32ca5e26bf653f5814ce780c63c078ee83e29",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/eigen-3.2.7/unsupported/Eigen/src/Splines/CMakeLists.txt" : {
      "ObjectId" : "55c6271e96328c14e32ae6252521182e3051f713",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/json/CMakeLists.txt" : {
      "ObjectId" : "c2885472c74ed7a1f6d524cc3b27572c022eb380",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/extlibs/newmat/CMakeLists.txt" : {
      "ObjectId" : "080ecff5f2a634e0d85b844e25eb1a05df03584c",
      "LastModified" : "2019-03-14T10:59:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/extlibs/tinyxml/CMakeLists.txt" : {
      "ObjectId" : "869e19142ffe5fb7f76c3cc6281b022b755d32a5",
      "LastModified" : "2019-02-11T09:16:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/CMakeLists.txt" : {
      "ObjectId" : "4008fce777ef196329108696853d0b1182f6b8d7",
      "LastModified" : "2019-04-09T08:42:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Plugin tests\n\n#add_subdirectory(plugin-system) ## TODO: check if deprecated or... ?\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_dependencies(${PROJECT_NAME} PluginA PluginB PluginC PluginD PluginE PluginF)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${PROJECT_NAME} COMMENT \"-> Running unit tests...\" VERBATIM)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "SofaKernel/framework/framework_test/plugin-system/CMakeLists.txt" : {
      "ObjectId" : "e6baf671e75d5dd4877dc98d3b9d605dc58cc13e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugin-system/PluginA/CMakeLists.txt" : {
      "ObjectId" : "db37d6f70b09ea16e2abc25a715fce4b103477b3",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugin-system/PluginB/CMakeLists.txt" : {
      "ObjectId" : "255dfbfea742b90b0a4217f0c0e47d9babb0921b",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugin-system/PluginC/CMakeLists.txt" : {
      "ObjectId" : "0aa2040f9722e789431677b56cf6e3592467a039",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugin-system/PluginD/CMakeLists.txt" : {
      "ObjectId" : "b8d7b8f4b056d0ee1c082eeff825f08d67b77868",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugin-system/PluginE/CMakeLists.txt" : {
      "ObjectId" : "b8ad92a1989ed116f655b8fbb6a403be365b2e23",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugin-system/PluginF/CMakeLists.txt" : {
      "ObjectId" : "771cbd06c2e661c2145c52f9e141ae4db8917ff0",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugin-system/PluginMonitor/CMakeLists.txt" : {
      "ObjectId" : "50293f978ddb7d9c8d386473e20bba24f95fd8fc",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/framework_test/plugins/CMakeLists.txt" : {
      "ObjectId" : "ea23a98e3f0afc094d47ec0c0d142fe45eb1847f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#dont use sofa_add_plugin as it will add an option in CMake\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SofaKernel/framework/framework_test/plugins/TestPlugin/CMakeLists.txt" : {
      "ObjectId" : "bcda16ed2ba3b1aa04d1e1bd96970e53a88ca66e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/framework/sofa/core/CMakeLists.txt" : {
      "ObjectId" : "f365375e477161613afe6aa7df3f0b5be59253d9",
      "LastModified" : "2019-04-09T08:42:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Plugin.cpp\n\n# PluginManager.cpp\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# # TODO?\n\n# if(SOFA-MISC_SUPPORT_MOVING_FRAMES)\n\n#     list(APPEND HEADER_FILES behavior/InertiaForce.h)\n\n# endif()\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Installing ICU libraries the hard way (dirty)\n",
        "Line" : 274,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# force link with ICU\n",
        "Line" : 282,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 4
    },
    "SofaKernel/framework/sofa/defaulttype/CMakeLists.txt" : {
      "ObjectId" : "274f883811d7ddf425e131dc2c40c24e3a81f03e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# RigidInertia.h\n\n# RigidInertia.inl\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# SparseConstraintTypes.h\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# RigidInertia.cpp\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "SofaKernel/framework/sofa/helper/CMakeLists.txt" : {
      "ObjectId" : "4a8598d9a9eb029a7ddf0c6a25e04871dc373b10",
      "LastModified" : "2019-04-09T08:42:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows library, used in system::FileSystem\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# X11 functions are used in glfont.cpp\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# on macOS, -framework CoreServices is needed for FileMonitor\n",
        "Line" : 357,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# For generated files, like sofa/config.h\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The default binary suffix for libraries/plugins is \"_d\" when using a debug build.\n\n# since this is configuration specific it is a bit more convenient to put it as a debug compile definition for \n\n# PluginManager.cpp, at the expense of being much less visible compare to having it in the generated \n\n# SofaFramework/config.h\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "SofaKernel/framework/sofa/simulation/CMakeLists.txt" : {
      "ObjectId" : "54dc9fab2f3100c2224a77f664dde3e4b4009ca5",
      "LastModified" : "2019-04-09T08:42:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# is this a compiler/linker version specific problem?\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# target_link_options is  available from CMake 3.13\n\n# target_link_options(${PROJECT_NAME} PUBLIC \"-pthread\")\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "SofaKernel/modules/SofaBaseCollision/CMakeLists.txt" : {
      "ObjectId" : "a6951e740500141c4ea4aa30af01f0d56d90b7af",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/CMakeLists.txt" : {
      "ObjectId" : "6d09eb60628967878d19cb4c9e4f866067ee995a",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseLinearSolver/CMakeLists.txt" : {
      "ObjectId" : "c64ec3def4bd0fbf6b2dad1101e57c36c011f307",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseLinearSolver/SofaBaseLinearSolver_test/CMakeLists.txt" : {
      "ObjectId" : "5481eafb8592b975103bca20c7a9d3d4cd7d35bc",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseMechanics/CMakeLists.txt" : {
      "ObjectId" : "4b462b016b6772c38658636aa31cd59b3ed9edda",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseMechanics/SofaBaseMechanics_test/CMakeLists.txt" : {
      "ObjectId" : "4e32b0d0114e1de19520d495903319080fafd040",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseTopology/CMakeLists.txt" : {
      "ObjectId" : "fd5e0963e606db08b4fbc051b5f9862f02a17f24",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseTopology/SofaBaseTopology_test/CMakeLists.txt" : {
      "ObjectId" : "58b06309ae52fe74e8c13a802085e61b0aa71d50",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseVisual/CMakeLists.txt" : {
      "ObjectId" : "e5165c01f167cc05d45fa0be416a881b2362cd2f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaBaseVisual/SofaBaseVisual_test/CMakeLists.txt" : {
      "ObjectId" : "4e277348e6cb07fe5b4f1b464b069d71db635e0c",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaComponentBase/CMakeLists.txt" : {
      "ObjectId" : "62dcdf3fbeb03f24a20db4b9ee0d73f56427c9bb",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaComponentBase/SofaComponentBase_test/CMakeLists.txt" : {
      "ObjectId" : "a05777be85fb74fe55a2aae380d62d7eb85f9e42",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaComponentCommon/CMakeLists.txt" : {
      "ObjectId" : "ac524cdad8505fd0c9aa653452fbc97e9d12497f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaDeformable/CMakeLists.txt" : {
      "ObjectId" : "33740ea63f42e39a957c1991c0d62582ee422dde",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaDeformable/SofaDeformable_test/CMakeLists.txt" : {
      "ObjectId" : "46ce0548591cad97011474c6310eec2ebeadbd1f",
      "LastModified" : "2019-04-09T08:42:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaEigen2Solver/CMakeLists.txt" : {
      "ObjectId" : "2cb3dc14e1f662841d86ea10ae544803dea3546d",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EigenSparseSquareMatrix.h\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "SofaKernel/modules/SofaEngine/CMakeLists.txt" : {
      "ObjectId" : "85a0d72962c82f18c7612cdd78c99b3df95e5b1f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaEngine/SofaEngine_test/CMakeLists.txt" : {
      "ObjectId" : "d8e7904c71f3e4b70e784116e982ff4606ee931b",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaExplicitOdeSolver/CMakeLists.txt" : {
      "ObjectId" : "160f3938dad8bb3042ad7d0ba8a76cd1da9b324e",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaExplicitOdeSolver/SofaExplicitOdeSolver_test/CMakeLists.txt" : {
      "ObjectId" : "351d7288a378666b22f33f9db401cf767ee69056",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaImplicitOdeSolver/CMakeLists.txt" : {
      "ObjectId" : "a4cfea293831e0f90594d6c4b2bf5fc6885aa45c",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/CMakeLists.txt" : {
      "ObjectId" : "4fefc82697ba9718a943f175d3ef6bceb0366b9f",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaLoader/CMakeLists.txt" : {
      "ObjectId" : "3e0ce53be8737b4e510f28dc4e2d1d97587b29b1",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaLoader/SofaLoader_test/CMakeLists.txt" : {
      "ObjectId" : "d7408d2b82ae7d866a4e19cc81876869770535fe",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaMeshCollision/CMakeLists.txt" : {
      "ObjectId" : "637fbea66e5e8048528037a07188b5efd5c65b37",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaMeshCollision/SofaMeshCollision_test/CMakeLists.txt" : {
      "ObjectId" : "e62016d93f28e1612e259930e17739a1324e38df",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaObjectInteraction/CMakeLists.txt" : {
      "ObjectId" : "399adb4c6a30cd26e227936bbd24d52bba07958a",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaRigid/CMakeLists.txt" : {
      "ObjectId" : "37e426e485ba8fd9250e0e8bb983707c2944ba6a",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaRigid/SofaRigid_test/CMakeLists.txt" : {
      "ObjectId" : "0e5c2fe7ed52536435e0dfd9e41041e1aebabb1a",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaSimpleFem/CMakeLists.txt" : {
      "ObjectId" : "ec11c728a0d91c0c62df7a599afda8d627c7b823",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaSimpleFem/SofaSimpleFem_test/CMakeLists.txt" : {
      "ObjectId" : "57b4a1f8bd532adb6cefb68903406148c4d37413",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaSimulationCommon/CMakeLists.txt" : {
      "ObjectId" : "6e83ea8db3cac86766a928b13f98cb0e539bcca8",
      "LastModified" : "2019-02-05T11:01:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaSimulationGraph/CMakeLists.txt" : {
      "ObjectId" : "56be5d70704ae16095a033a979268a587f71e88a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaSimulationGraph/SofaSimulationGraph_test/CMakeLists.txt" : {
      "ObjectId" : "d4dee41752054b3eb1cc77ee736fb1466eac8e31",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/SofaSimulationTree/CMakeLists.txt" : {
      "ObjectId" : "4b966407eeb2c70e4d6addd15705791c37a9030e",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/sofa/frameworkextra/frameworkextra_test/CMakeLists.txt" : {
      "ObjectId" : "ce66cfd8be55d4ad3066c1c2693bcf915c10dc40",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaKernel/modules/sofa/simulation/simulation_test/CMakeLists.txt" : {
      "ObjectId" : "3e4d93dca37016e09cb46287b24b195109716d11",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SofaMisc/CMakeLists.txt" : {
      "ObjectId" : "c1bce0919250fc2a8bf0d9b2e5154f413ab7d8fa",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Version\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## SofaMisc/config.h\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Subdirectories\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# IDE folder\n",
        "Line" : 33,
        "CharPositionInLine" : 64
      },
      "5" : {
        "Text" : "## CMake package configurations files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "applications/packages/CMakeLists.txt" : {
      "ObjectId" : "e9eb7b056d37ffa46ac418dcec686d9127be9ec9",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/packages/SofaAllCommonComponents/CMakeLists.txt" : {
      "ObjectId" : "5205739e2196fa5a8ab4bff989e987cc356c0f35",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(\"${CMAKE_CURRENT_SOURCE_DIR}/..\")\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/ARTrack/CMakeLists.txt" : {
      "ObjectId" : "dd2d182d50d88ad5f829ce3248dbd69b581425fc",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/BulletCollisionDetection/BulletCollisionDetection_test/CMakeLists.txt" : {
      "ObjectId" : "f9026ef1312fa7e2f26fd9e66949a7ab8ed5c0ef",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/BulletCollisionDetection/CMakeLists.txt" : {
      "ObjectId" : "6152fb73aaebdd1cc8d8ebe358042cc9f73acaf9",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#WARNING, when installing bullet write in the bullet CMakeLists.txt the line add_definitions(-DBULLET_TRIANGLE_COLLISION)\n\n# todo: is it possible to do a platform check for BULLET_TRIANGLE_COLLISION?\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/CGALPlugin/CGALGeneratorSpecificSettings.cmake" : {
      "ObjectId" : "541d7d3c5592937421988e6ee6b3654a61e873fd",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# message( STATUS \"CGAL settings: targetting ${CMAKE_GENERATOR}\")\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# message( STATUS \"CGAL settings: using VC11 compiler.\" )\n",
        "Line" : 13,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# message( STATUS \"CGAL settings: using VC10 compiler.\" )\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# message( STATUS \"CGAL settings: using VC90 compiler.\" )\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# message( STATUS \"CGAL settings: using VC80 compiler.\" )\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# message( STATUS \"CGAL settings: using VC71 compiler.\" )\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# else()\n\n#     message( STATUS \"CGAL settings: using ${CMAKE_CXX_COMPILER} compiler.\" )\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# From james Bigler, in the cmake users list.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# message(STATUS \"CGAL settings: DARWIN_VERSION=${DARWIN_VERSION}\")\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# set(CGAL_APPLE_LEOPARD 1)\n",
        "Line" : 38,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 10
    },
    "applications/plugins/CGALPlugin/CGALPlugin_test/CMakeLists.txt" : {
      "ObjectId" : "b5b81f11cb36a3a5fd59fa6c118baf24d3d7292c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Compliant_test.h\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    MeshGenerationFromImage_test.cpp\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# IMPORTANT NOTICE:\n\n# the following 4 lines must be put outside of the \"if\" section as soon as there is another source file added to the project\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "applications/plugins/CGALPlugin/CMakeLists.txt" : {
      "ObjectId" : "55695deb886dd16edc60126d33b94c51d1b0b77f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Dependencies\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## CGAL dependencies\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if CGAL >= 4.10\n",
        "Line" : 52,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "## CGALPlugin/config.h\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add library dir as it is not added automatically on Windows (?)\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# # Copy CGAL dlls\n\n# file(GLOB sharedObjects \"${CGAL_INSTALL_PREFIX}/bin/*.dll\")\n\n# foreach(sharedObject ${sharedObjects})\n\n#     file(COPY ${sharedObject} DESTINATION \"${SOFA_BIN_DIR}\")\n\n# endforeach()\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# We suppose that the auxiliary DLLS for CGAL are always used from the CGAL package\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "## Copy DLLs to the build tree\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Multi-config generator (MSVC)\n",
        "Line" : 74,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : "# Single-config generator (nmake)\n",
        "Line" : 79,
        "CharPositionInLine" : 32
      },
      "10" : {
        "Text" : "## Install DLLs\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## Install rules for the library and the headers; CMake package configurations files\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "applications/plugins/CGALPlugin/FindCGAL.cmake" : {
      "ObjectId" : "b71bbb1dfcd2117b08da6ac93ddb43f034eb8270",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The following module is based on FindVTK.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find a CGAL installation or binary tree.\n\n# The following variables are set if CGAL is found.  If CGAL is not\n\n# found, CGAL_FOUND is set to false.\n\n#\n\n#  CGAL_FOUND         - Set to true when CGAL is found.\n\n#  CGAL_USE_FILE      - CMake file to use CGAL.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Construct consitent error messages for use below.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get the system search path as a list.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Construct a set of paths relative to the system search path.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n# Look for an installation or build tree.\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Look for an environment variable CGAL_DIR.\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Look in places relative to the system executable search path.\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Look in standard UNIX install locations.\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Read from the CMakeSetup registry entries.  It is likely that\n\n# CGAL will have been recently built.\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# try to find the paths manually...\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "applications/plugins/CGALPlugin/FindGMP.cmake" : {
      "ObjectId" : "20794d3da8da3a16086664a613c4e3dbea26cf92",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the GMP libraries\n\n# This module defines:\n\n#  GMP_FOUND             - system has GMP lib\n\n#  GMP_INCLUDE_DIR       - the GMP include directory\n\n#  GMP_LIBRARIES_DIR     - directory where the GMP libraries are located\n\n#  GMP_LIBRARIES         - Link these to use GMP\n\n#  GMP_IN_CGAL_AUXILIARY - TRUE if the GMP found is the one distributed with CGAL in the auxiliary folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: support MacOSX\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Attempt to load a user-defined configuration for GMP if couldn't be found\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "applications/plugins/CGALPlugin/FindMPFR.cmake" : {
      "ObjectId" : "0ad6468c17b613f17e68b2162731642f3979324f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MPFR libraries\n\n# MPFR_FOUND - system has MPFR lib\n\n# MPFR_INCLUDE_DIR - the MPFR include directory\n\n# MPFR_LIBRARIES_DIR - Directory where the MPFR libraries are located\n\n# MPFR_LIBRARIES - the MPFR libraries\n\n# MPFR_IN_CGAL_AUXILIARY - TRUE if the MPFR found is the one distributed with CGAL in the auxiliary folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: support MacOSX\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Attempt to load a user-defined configuration for MPFR if couldn't be found\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "applications/plugins/CImgPlugin/CImgPlugin_test/CMakeLists.txt" : {
      "ObjectId" : "ae9b76cb3b72be81bd61c0dcec97e09090af0340",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/CImgPlugin/CMakeLists.txt" : {
      "ObjectId" : "8145abe43255ee63ba9e5b78a5e2bf2c1078388d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),\r\n\n# it will allow to use those instead of those present in XCode's frameworks\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Configure Paths according to detected packages\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Windows dll -> bin\r\n",
        "Line" : 37,
        "CharPositionInLine" : 53
      },
      "3" : {
        "Text" : "# prevent INT32 redefinition on Windows (see jmorecfg.h)\r\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Windows dll -> bin\r\n",
        "Line" : 56,
        "CharPositionInLine" : 47
      },
      "5" : {
        "Text" : "# PNG requires ZLIB\r\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409)\r\n",
        "Line" : 74,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Windows dll -> bin\r\n",
        "Line" : 81,
        "CharPositionInLine" : 55
      },
      "8" : {
        "Text" : "#Remove CImg sys calls\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Install rules for the library; CMake package configurations files\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "applications/plugins/CImgPlugin/extlibs/CImg/CMakeLists.txt" : {
      "ObjectId" : "999b0a6e0542e67d394325164e7eebe6ee7787b6",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### CImgConfig.cmake\n\n## Build tree\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install tree\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/CImgPlugin/extlibs/CImg/examples/CMakeLists.txt" : {
      "ObjectId" : "162029541cdfe11d9ecb795b9ed921ef0de0c51d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  File        : CMakeLists.txt\n\n#                ( Configuration file for 'cmake' utility )\n\n#\n\n#  Description : CMakeLists.txt configuration file for compiling CImg-based code.\n\n#                This file is a part of the CImg Library project.\n\n#                ( http://cimg.eu )\n\n#\n\n#  Copyright   : Antonio Albiol\n\n#                ( http://personales.upv.es/~aalbiol/ )\n\n#\n\n#  License     : CeCILL v2.0\n\n#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )\n\n#\n\n#  This software is governed by the CeCILL  license under French law and\n\n#  abiding by the rules of distribution of free software.  You can  use,\n\n#  modify and/ or redistribute the software under the terms of the CeCILL\n\n#  license as circulated by CEA, CNRS and INRIA at the following URL\n\n#  \"http://www.cecill.info\".\n\n#\n\n#  As a counterpart to the access to the source code and  rights to copy,\n\n#  modify and redistribute granted by the license, users are provided only\n\n#  with a limited warranty  and the software's author,  the holder of the\n\n#  economic rights,  and the successive licensors  have only  limited\n\n#  liability.\n\n#\n\n#  In this respect, the user's attention is drawn to the risks associated\n\n#  with loading,  using,  modifying and/or developing or reproducing the\n\n#  software by the user in light of its specific status of free software,\n\n#  that may mean  that it is complicated to manipulate,  and  that  also\n\n#  therefore means  that it is reserved for developers  and  experienced\n\n#  professionals having in-depth computer knowledge. Users are therefore\n\n#  encouraged to load and test the software's suitability as regards their\n\n#  requirements in conditions enabling the security of their systems and/or\n\n#  data to be ensured and,  more generally, to use and operate it in the\n\n#  same conditions as regards security.\n\n#\n\n#  The fact that you are presently reading this means that you have had\n\n#  knowledge of the CeCILL license and that you accept its terms.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent compilation in-source\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To use PKG_CHECK_MODULES to find some optional packages\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#    Tell CMake where to leave executables\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Path of CImg.h file relative to this file path\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ### CIMG related stuff\n\n# Flags to enable fast image display, using the XSHM library.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags to enable screen mode switching, using the XRandr library.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Flags to enable native support for JPEG image files, using the JPEG library.\n\n# ( http://www.ijg.org/ )\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Flags to enable native support for TIFF image files, using the TIFF library.\n\n# ( http://www.libtiff.org/ )\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Flags to enable native support for PNG image files, using the PNG library.\n\n# ( http://www.libpng.org/ )\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Flags to enable OPENCV support (Camera)\n\n# ( http://www.opencv.org/ )\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Flags to enable native support for EXR image files, using the OpenEXR library.\n\n# ( http://www.openexr.com/ )\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Flags to enable native support for various video files, using the FFMPEG library.\n\n# ( http://www.ffmpeg.org/ )\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to enable native support of most classical image file formats, using the Magick++ library.\n\n# ( http://www.imagemagick.org/Magick++/ )\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Flags to enable faster Discrete Fourier Transform computation, using the FFTW3 library\n\n# ( http://www.fftw.org/ )\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ### Search Additional Libraries ##########\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# PKG_CHECK_MODULES(LIBAVCODEC libavcodec)\n\n# PKG_CHECK_MODULES(LIBAVFORMAT libavformat)\n\n# PKG_CHECK_MODULES(LIBSWSCALE libswscale)\n\n# PKG_CHECK_MODULES(LIBAVUTIL libavutil)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# #### End of additional libraries search ##########\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "### Configure Paths according to detected packages\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# PNG requires ZLIB\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Add CIMG Flags to Compilation Flags\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "applications/plugins/CImgPlugin/extlibs/CImg/examples/Makefile" : {
      "ObjectId" : "8265bca29fa15229cc16b43568763229d4561fa8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  File        : Makefile\n\n#                ( Makefile for GNU 'make' utility )\n\n#\n\n#  Description : Makefile for compiling CImg-based code on Unix.\n\n#                This file is a part of the CImg Library project.\n\n#                ( http://cimg.eu )\n\n#\n\n#  Copyright   : David Tschumperle\n\n#                ( http://tschumperle.users.greyc.fr/ )\n\n#\n\n#  License     : CeCILL v2.0\n\n#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )\n\n#\n\n#  This software is governed by the CeCILL  license under French law and\n\n#  abiding by the rules of distribution of free software.  You can  use,\n\n#  modify and/ or redistribute the software under the terms of the CeCILL\n\n#  license as circulated by CEA, CNRS and INRIA at the following URL\n\n#  \"http://www.cecill.info\".\n\n#\n\n#  As a counterpart to the access to the source code and  rights to copy,\n\n#  modify and redistribute granted by the license, users are provided only\n\n#  with a limited warranty  and the software's author,  the holder of the\n\n#  economic rights,  and the successive licensors  have only  limited\n\n#  liability.\n\n#\n\n#  In this respect, the user's attention is drawn to the risks associated\n\n#  with loading,  using,  modifying and/or developing or reproducing the\n\n#  software by the user in light of its specific status of free software,\n\n#  that may mean  that it is complicated to manipulate,  and  that  also\n\n#  therefore means  that it is reserved for developers  and  experienced\n\n#  professionals having in-depth computer knowledge. Users are therefore\n\n#  encouraged to load and test the software's suitability as regards their\n\n#  requirements in conditions enabling the security of their systems and/or\n\n#  data to be ensured and,  more generally, to use and operate it in the\n\n#  same conditions as regards security.\n\n#\n\n#  The fact that you are presently reading this means that you have had\n\n#  knowledge of the CeCILL license and that you accept its terms.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------\n\n# Define the list of files to be compiled\n\n# (name of the source files without the .cpp extension)\n\n#-------------------------------------------------------\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Files which do not necessarily require external libraries to run.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Files which requires external libraries to run.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------\n\n# Set correct variables and paths\n\n#---------------------------------\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------\n\n# Set compilation flags allowing to customize CImg\n\n#--------------------------------------------------\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags to enable strict code standards\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Flags to enable code debugging.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Flags to enable color output messages.\n\n# (requires a VT100 compatible terminal)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Flags to enable code optimization by the compiler.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Flags to enable OpenMP support.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-Dcimg_use_openmp -openmp -i-static    # -> Seems to bug the compiler!\n",
        "Line" : 142,
        "CharPositionInLine" : 21
      },
      "12" : {
        "Text" : "# Flags to enable OpenCV support.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags used to disable display capablities of CImg\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Flags to enable the use of the X11 library.\n\n# (X11 is used by CImg to handle display windows)\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Flags to enable fast image display, using the XSHM library (when using X11).\n\n# !!! Seems to randomly crash when used on MacOSX and 64bits systems, so use it only when necessary !!!\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# -Dcimg_use_xshm `pkg-config --cflags xcb-shm`\n",
        "Line" : 167,
        "CharPositionInLine" : 19
      },
      "17" : {
        "Text" : "# `pkg-config --libs xcb-shm || echo -L$(USR)/X11R6/lib -lXext`\n",
        "Line" : 168,
        "CharPositionInLine" : 17
      },
      "18" : {
        "Text" : "# Flags to enable GDI32 display (Windows native).\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Flags to enable screen mode switching, using the XRandr library (when using X11).\n\n# ( http://www.x.org/wiki/Projects/XRandR )\n\n# !!! Not supported by the X11 server on MacOSX, so do not use it on MacOSX !!!\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Flags to enable native support for PNG image files, using the PNG library.\n\n# ( http://www.libpng.org/ )\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Flags to enable native support for JPEG image files, using the JPEG library.\n\n# ( http://www.ijg.org/ )\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Flags to enable native support for TIFF image files, using the TIFF library.\n\n# ( http://www.libtiff.org/ )\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Flags to enable native support for MINC2 image files, using the MINC2 library.\n\n# ( http://en.wikibooks.org/wiki/MINC/Reference/MINC2.0_Users_Guide )\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Flags to enable native support for EXR image files, using the OpenEXR library.\n\n# ( http://www.openexr.com/ )\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Flags to enable native support for various video files, using the FFMPEG library.\n\n# ( http://www.ffmpeg.org/ )\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Flags to enable native support for compressed .cimgz files, using the Zlib library.\n\n# ( http://www.zlib.net/ )\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Flags to enable native support for downloading files from the network.\n\n# ( http://curl.haxx.se/libcurl/ )\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Flags to enable native support of most classical image file formats, using the Magick++ library.\n\n# ( http://www.imagemagick.org/Magick++/ )\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Flags to enable faster Discrete Fourier Transform computation, using the FFTW3 library\n\n# ( http://www.fftw.org/ )\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Flags to enable the use of LAPACK routines for matrix computation\n\n# ( http://www.netlib.org/lapack/ )\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Flags to enable the use of the Board library\n\n# ( http://libboard.sourceforge.net/ )\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Flags to compile on Sun Solaris\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Flags to compile GIMP plug-ins.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#-------------------------\n\n# Define Makefile entries\n\n#-------------------------\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Custom user-defined target\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Linux/BSD/Mac OSX targets, with X11 display.\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#A target for Travis-CI\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Sun Solaris targets, with X11 display.\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# MacOsX targets, with X11 display.\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Windows targets, with GDI32 display.\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#-----------------\n\n# End of makefile\n\n#-----------------\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "applications/plugins/CMakeLists.txt" : {
      "ObjectId" : "5502685a1fa381e3c04b5a84a720dc05d94b34b8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ON by default and first as it is used by other plugins.\n",
        "Line" : 5,
        "CharPositionInLine" : 42
      },
      "1" : {
        "Text" : "# Contains DefaultCollisionGroupManager\n",
        "Line" : 8,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : "##TRANSITIONAL DEPEND ON DISTANCEGRID & IMPLICIT\n",
        "Line" : 11,
        "CharPositionInLine" : 56
      },
      "3" : {
        "Text" : "# Depends on CImagePlugin, soft dependency to MultiThreading\n",
        "Line" : 13,
        "CharPositionInLine" : 39
      },
      "4" : {
        "Text" : "# Depends on image\n\n# Depends on image & CImagePlugin\n",
        "Line" : 15,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "# Depends on image, SofaPython, SofaSimpleGUI and #SOFADISTANCEGRID\n",
        "Line" : 17,
        "CharPositionInLine" : 43
      },
      "6" : {
        "Text" : "# Depends on Compliant\n",
        "Line" : 18,
        "CharPositionInLine" : 67
      },
      "7" : {
        "Text" : "# Depends on Flexible and image\n",
        "Line" : 19,
        "CharPositionInLine" : 55
      },
      "8" : {
        "Text" : "# Depends on Flexible and Compliant\n",
        "Line" : 20,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "# sofa_add_plugin(SofaPML SofaPML)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SOFA_WITH_EXPERIMENTAL_FEATURES_17_12\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# SofaPardisoSolver is only available under linux with gcc\n",
        "Line" : 52,
        "CharPositionInLine" : 57
      },
      "12" : {
        "Text" : "# SofaCUDA plugin can't work without OPENGL\n\n# SofaSimpleGUI plugin can't work without OPENGL\n",
        "Line" : 58,
        "CharPositionInLine" : 49
      },
      "13" : {
        "Text" : "# VolumetricRendering plugin can't work without OPENGL\n",
        "Line" : 60,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 14
    },
    "applications/plugins/ColladaSceneLoader/CMakeLists.txt" : {
      "ObjectId" : "82596d75783aedea5de7715ad54839d11a01aa1c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy Assimp DLLs on Windows\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Multi-config generator (MSVC)\n",
        "Line" : 58,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Single-config generator (nmake)\n",
        "Line" : 62,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 3
    },
    "applications/plugins/ColladaSceneLoader/FindAssimp.cmake" : {
      "ObjectId" : "6a7e6582a0ffa192ae3c59c57528134ccdbac4c1",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Assimp\n\n# This module defines\n\n#  ASSIMP_FOUND        - Assimp was found\n\n#  ASSIMP_INCLUDE_DIR  - Assimp include directories\n\n#  ASSIMP_LIBRARIES    - the Assimp library\n\n# And on Windows:\n\n#  ASSIMP_DLLS         - the DLL of Assimp\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use the version provided with the plugin.\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "applications/plugins/Compliant/CMakeLists.txt" : {
      "ObjectId" : "9c782d7fc5d5e8a8bc2316937e2333743107768f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# note: need to fix assembled solver in python before removing\n",
        "Line" : 254,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Config files and install rules for pythons scripts\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "## Compliant/config.h\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# linking explicitly with rt looks necessary on some posix (e.g. CentOS)\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Hand-crafted install rules for the headers, to preserve the directory structure\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "applications/plugins/Compliant/Compliant_gui/CMakeLists.txt" : {
      "ObjectId" : "6792110ff4df81b2d1454cc0314fbf870c074ecf",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/Compliant/Compliant_test/CMakeLists.txt" : {
      "ObjectId" : "5ddb51f64474db770d481d9b59d311f9eb680593",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/DEPRECATED/PhysicsBasedInteractiveModeler/CMakeLists.txt" : {
      "ObjectId" : "8ae96110cb703a1445f5359c1cdf3177d1500257",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TriangularMeshRefiner / SofaCGALPlugin\n",
        "Line" : 45,
        "CharPositionInLine" : 304
      },
      "CommentCount" : 1
    },
    "applications/plugins/DEPRECATED/QtOgreViewer/CMakeLists.txt" : {
      "ObjectId" : "01084f354bdb66459dc68e1a85b6db6524d1e2da",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/DEPRECATED/SofaVRPNClient/CMakeLists.txt" : {
      "ObjectId" : "e519ecab565f813d1fc2cee6f253e9a0ad99b0f5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ContactWarning.h \n\n#ContactDisabler.h \n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#ContactWarning.cpp \n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#ContactDisabler.cpp \n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "applications/plugins/DEPRECATED/frame/CMakeLists.txt" : {
      "ObjectId" : "032a5dbcc6a0bd9cfd96cc17d58d5659b5ab5f64",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##plugin external dependencies\n\n#find_package( REQUIRED)\n\n#include_directories(${})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TetrahedronFEMForceFieldWithExternalMaterial.h \n\n#TetrahedronFEMForceFieldWithExternalMaterial.inl\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#TetrahedronFEMForceFieldWithExternalMaterial.cpp\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#    list(APPEND HEADER_FILES \"HexaRemover.h\")\n\n#    list(APPEND HEADER_FILES \"HexaRemover.inl\")\n\n#    list(APPEND SOURCE_FILES \"HexaRemover.cpp\")\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "applications/plugins/EmptyCmakePlugin/CMakeLists.txt" : {
      "ObjectId" : "5a0c4d39eb05f599ace1468fd01db1de7197107e",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/ExternalBehaviorModel/CMakeLists.txt" : {
      "ObjectId" : "72c2ecb41e4e927d52080e3ee61203cf58a102ec",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/Flexible/CMakeLists.txt" : {
      "ObjectId" : "30cbf34ecfb9cf7a599d63d492f29d301eb7bb5d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_package(SofaHighOrderTopology QUIET)\n\n#if(SofaHighOrderTopology_FOUND)\n\n# @warning SofaHighOrderTopology is an external plugin that cannot be defined previously to Flexible that is an interal plugin\n\n# so it must require to run cmake two times\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Flexible/config.h\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Config files and install rules for pythons scripts\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# link_directories(${SOFA-EXTERNAL_MGDIFFUSI0N_PATH}/mgdiffusion/DiffusionSolver/)\n\n# target_link_libraries(${PROJECT_NAME} \"DiffusionSolver\")\n\n# link_directories(${SOFA-EXTERNAL_MGDIFFUSI0N_PATH}/PhysBAM/build/nocona/release/Public_Library/)\n\n# link_directories(${SOFA-EXTERNAL_MGDIFFUSI0N_PATH}/PhysBAM/build/nocona/release/Common_Libraries/)\n\n# target_link_libraries(${PROJECT_NAME} \"PhysBAM_PhysBAM_Tools\" \"Threading_Tools\")\n",
        "Line" : 257,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# TODO fix this!\n\n# link_directories does not add a -Lpath to the link command so I found this workaround for now\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#if(UNIX)\n\n#    target_link_libraries(${PROJECT_NAME} pthread)\n\n#endif()\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#if(SofaHighOrderTopology_FOUND)\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Hand-crafted install rules for the headers, to preserve the directory structure\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "applications/plugins/Flexible/Flexible_test/CMakeLists.txt" : {
      "ObjectId" : "5437f827bdfc4105233d3159188c3bef0c90f6e6",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# #Needed by python test\n\n# AddCompilerDefinitions(\"SOFA_SRC_DIR=${SOFA_SRC_DIR}\")\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/Geomagic/CMakeLists.txt" : {
      "ObjectId" : "48817785b7ddb6a601b0ec97d849f66c6e7006ec",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/Haption/CMakeLists.txt" : {
      "ObjectId" : "950192fe8e4818038820d8428d7fe87e87485f5d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/InvertibleFVM/CMakeLists.txt" : {
      "ObjectId" : "acfebef1b1d3a21f1efc33347a5e6c1c16655453",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/LeapMotion/CMakeLists.txt" : {
      "ObjectId" : "8376806badbb492710f81b52045326b3be4adb6c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/LeapMotion/cmake/FindLeap.cmake" : {
      "ObjectId" : "9d25f7c7ace31656e39ad0efa2f2377f7dfe4dba",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Leap\n\n#\n\n# Finds the libraries and header files for the Leap SDK for Leap Motion's\n\n# hand tracker.\n\n#\n\n# This module defines\n\n# LEAP_FOUND       - Leap was found\n\n# LEAP_INCLUDE_DIR - Directory containing LEAP header files\n\n# LEAP_LIBRARY     - Library name of Leap library\n\n# LEAP_INCLUDE_DIRS- Directories required by CMake convention\n\n# LEAP_LIBRARIES   - Libraries required by CMake convention\n\n#\n\n# Based on the FindFMODEX.cmake of Team Pantheon.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Don't be verbose if previously run successfully\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set locations to search\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#WIN32\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Set name of the Leap library to use\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO Different libraries are provided for compile and runtime\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Search for header files\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for library\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "applications/plugins/ManifoldTopologies/CMakeLists.txt" : {
      "ObjectId" : "a52b11d23145e492636e187b0e5f56dbf60d08ba",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/ManualMapping/CMakeLists.txt" : {
      "ObjectId" : "359ca1dcb845f4a60af318da9041b28a4e41d0b3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/MeshSTEPLoader/CMakeLists.txt" : {
      "ObjectId" : "ae8fb357a6209ea5760605ce27901265185146a2",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# required for OpenCASCADE\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Copy OpenCascade DLLs\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "applications/plugins/MeshSTEPLoader/FindOpenCascade.cmake" : {
      "ObjectId" : "0400a92ad4886017068477c7578bcd962615d7b1",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the OpenCascade headers and libraries.\n\n#\n\n#  OPENCASCADE_FOUND        - true if OpenCascade found.\n\n#  OPENCASCADE_LIBRARIES    - the OpenCascade libraries\n\n#  OPENCASCADE_INCLUDE_DIR  - where to find BRep_Toolbox.hxx, etc.\n\n#\n\n# On Windows, we also define \n\n#  OPENCASCADE_DLLS         - the OpenCascade DLLS\n\n#\n\n# If set, SOFA_OPENCASCADE_ROOT will be searched as well as standard locations.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Report the results.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/MultiThreading/CMakeLists.txt" : {
      "ObjectId" : "34da0176fb68d9f2b51e4b9648e00fa4ac9f738e",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/MultiThreading/test/CMakeLists.txt" : {
      "ObjectId" : "60e11500bc8dcfe732ef650ae4cc9be42f139601",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/OpenCTMPlugin/CMakeLists.txt" : {
      "ObjectId" : "6bde5eae8775d87744705b1f8aa57b04d3dd6018",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/OptiTrackNatNet/CMakeLists.txt" : {
      "ObjectId" : "f8587590affc30c32409cc81101920c86230573d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Seems to be required by boost::asio\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/PSL/CMakeLists.txt" : {
      "ObjectId" : "0d18c831d8ae48f70475f4f62680ffd7e42fbe32",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Plugin dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Config files and install rules for pythons scripts\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add test project\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/plugins/PSL/PSL_test/CMakeLists.txt" : {
      "ObjectId" : "4c8b74aa79d3ea5153a2d0a437f42f6682e698f3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/PersistentContact/CMakeLists.txt" : {
      "ObjectId" : "b6362264623758fd3c3bbf88d32b7e4a5abbdd32",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/PluginExample/CMakeLists.txt" : {
      "ObjectId" : "0ca5fa596790e0adb4317590f6e498d45bb58a77",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/PreassembledMass/CMakeLists.txt" : {
      "ObjectId" : "eb4f961918b83a79c7501549e3e91d1322dd1e18",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/Registration/CMakeLists.txt" : {
      "ObjectId" : "86afb4455260dfa11eed1a6038eaf2ef9c67ef04",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Registration/config.h\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Config files and install rules for pythons scripts\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/plugins/Registration/Registration_test/CMakeLists.txt" : {
      "ObjectId" : "730d9416efb68b6766f0f289f84f5b8c7d621f67",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FF temporarily deactivated InertiaAlign_test, as well as add_executable since it does not accept 0 parameter\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# InertiaAlign_test.cpp\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# add_executable(${PROJECT_NAME} ${SOURCE_FILES})\n\n# target_link_libraries(${PROJECT_NAME} Registration SofaTest SofaGTestMain)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME})\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "applications/plugins/RigidScale/CMakeLists.txt" : {
      "ObjectId" : "2f0bd7972ee6af941d1fb7b6a9cd7e2e187da648",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Component which can be added only if the flexible plugin if founded\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the compliant plugin is added\r\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "## Install rules for the library; CMake package configurations files\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/plugins/RigidScale/RigidScale_test/CMakeLists.txt" : {
      "ObjectId" : "bfd7e69a91166ebc7a0917cf0cdd612a58025625",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#RigidScaleToRigidMultiMapping_test.cpp # this line is comment for the moment because this test does nit work yet.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# #Needed by python test\r\n\n# AddCompilerDefinitions(\"SOFA_SRC_DIR=${SOFA_SRC_DIR}\")\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/SceneCreator/CMakeLists.txt" : {
      "ObjectId" : "0ff73f8a760050dfb9084f0d0da640a523201c74",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## SceneCreator/config.h\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add example project to use sceneCreator\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Add test project\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "applications/plugins/SceneCreator/SceneCreator_test/CMakeLists.txt" : {
      "ObjectId" : "01faea1ffd641000c8ad8c47f6039b19bd8ed6fb",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SceneCreator/sceneCreatorExamples/CMakeLists.txt" : {
      "ObjectId" : "a736beb2feabeccf2d4d19132e495e89a0bac8b1",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/Sensable/CMakeLists.txt" : {
      "ObjectId" : "6cf8295ac982a75a5d877bb6efba65d0600af248",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/Sensable/FindOpenHaptics.cmake" : {
      "ObjectId" : "33642a61918aae7a7cbf9c066a61e96e4d238ed3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenHaptics\n\n# Find the native OPENHAPTICS headers and libraries.\n\n#\n\n#  OPENHAPTICS_INCLUDE_DIR -  where to find OpenHaptics.h, etc.\n\n#  OPENHAPTICS_UTIL_INCLUDE_DIR - where to find HDU/hdu.h, etc.\n\n#  OPENHAPTICS_LIBRARIES    - List of libraries when using OpenHaptics.\n\n#  OPENHAPTICS_FOUND        - True if OpenHaptics found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 35,
        "CharPositionInLine" : 67
      },
      "3" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 36,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 37,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 39,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# OpenHaptics 2.0\n\n# OpenHaptics 3.0\n",
        "Line" : 42,
        "CharPositionInLine" : 56
      },
      "7" : {
        "Text" : "# TODO: Add conditional checking for x64 system\n\n# Look for the library.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 60,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "10" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 62,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 63,
        "CharPositionInLine" : 52
      },
      "12" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 65,
        "CharPositionInLine" : 66
      },
      "13" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 66,
        "CharPositionInLine" : 75
      },
      "14" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Report the results.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "applications/plugins/SensableEmulation/CMakeLists.txt" : {
      "ObjectId" : "c2fef1aded34fa2e114fb213cbbf7712e6b17da3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Seems to be required by boost::asio\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/SixenseHydra/CMakeLists.txt" : {
      "ObjectId" : "f81490e611b3d39c4d9a681cbaad3ad34787257e",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SixenseHydra/cmake/FindSixense.cmake" : {
      "ObjectId" : "879b51ca4f0c3309a13ae935ffbd402facba067f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the Sixense SDK\n\n# ------------------------------------\n\n#\n\n# usage:\n\n# find_package(Sixense ...)\n\n#\n\n# searches in SIXENSE_ROOT and usual locations\n\n#\n\n# Sets SIXENSE_INCLUDE_DIR, SIXENSE_LIBRARY_STATIC and SIXENSE_LIBRARY_DYNAMIC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 24,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 25,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 26,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# user installation\n",
        "Line" : 29,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "#prefix is filename, case matters\n",
        "Line" : 72,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 6
    },
    "applications/plugins/SofaAssimp/CMakeLists.txt" : {
      "ObjectId" : "a4f46edbf658568521d4419130bc90823362b107",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Assimp dependencies\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Dependencies\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#TODO\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#   add_subdirectory(CGALPlugin_test)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "applications/plugins/SofaAssimp/cmake/FindAssimp.cmake" : {
      "ObjectId" : "24cb66702bb96c30077e4e43e514507e66c4eb84",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaCUDA/CMakeLists.txt" : {
      "ObjectId" : "e943dfd717845bb17e7eb4cf9bb3e3df192931cb",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# quick and dirty fix for nvcc compatibility with -fno-partial-inlining flag\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sofa/gpu/cuda/CudaTetrahedronTLEDForceField.inl\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# #cmakedefine\n",
        "Line" : 252,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : "# #cmakedefine\n",
        "Line" : 259,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "# Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# #cmakedefine\n",
        "Line" : 265,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "# #cmakedefine\n",
        "Line" : 270,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : "# Note: with SOFA_GPU_CUDA_PRECISE and SOFA_GPU_CUDA_DOUBLE you get IEEE\n\n# 754-compliant floating point operations for addition and multiplication only.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# #cmakedefine\n",
        "Line" : 279,
        "CharPositionInLine" : 46
      },
      "9" : {
        "Text" : "# nvcc uses a \"host code compiler\" to compile CPU code, specified by CUDA_HOST_COMPILER.\n\n# With some versions of CMake, CUDA_HOST_COMPILER defaults to CMAKE_C_COMPILER,\n\n# but few host compilers are actually supported. Workarounds should go here.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# quick and dirty fix for nvcc compatibility with -fno-partial-inlining flag\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Make the compiler definitions available to nvcc\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Give include directories to nvcc compiler.\n\n# Note: keep cuda_include_directories() before cuda_add_library().\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## SofaCUDANvccFlags.cmake\n\n# Build tree\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Install tree\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "applications/plugins/SofaCUDA/FindCUDASparse.cmake" : {
      "ObjectId" : "a9ae0601dd913d285575b0f8efb9efcc70cb8d9b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The script defines the following variables:\n\n#\n\n##############################################################################\n\n# Cutil library: CUDA_SPARSE_LIBRARY\n\n##############################################################################\n\n#\n\n#\n\n# CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA toolkit. As the sparse library is\n\n# part of the CUDA toolkit, this suffices to find the\n\n# library.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCUDASparse.cmake\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/plugins/SofaCUDA/SofaCUDANvccFlags.cmake" : {
      "ObjectId" : "54b1601bfc5535b5d7ea28247e40afeed80c686a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaCarving/CMakeLists.txt" : {
      "ObjectId" : "1883431f8944ecd4cd63813308930195ec20893a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/SofaCarving/SofaCarving_test/CMakeLists.txt" : {
      "ObjectId" : "5df6825a8f423eaf98db732309d955b7c602e042",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaDistanceGrid/CMakeLists.txt" : {
      "ObjectId" : "f34237602becfabe7d42fa08ba1ad7ba23bdc376",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/SofaDistanceGrid/SofaDistanceGrid_test/CMakeLists.txt" : {
      "ObjectId" : "83269ff0aadd3fed69d461b5f40706d9d29da879",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaEulerianFluid/CMakeLists.txt" : {
      "ObjectId" : "548769bff177ab251ce447b6eccc4bfc2ac2b9f5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(${PROJECT_NAME} PUBLIC \"$<INSTALL_INTERFACE:include>\")\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include_directories(\"${CMAKE_CURRENT_SOURCE_DIR}/..\")\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n\n#sofa_create_package(SofaEulerianFluid ${SOFATEST_VERSION} ${PROJECT_NAME} SofaEulerianFluid)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/plugins/SofaHAPI/CMakeLists.txt" : {
      "ObjectId" : "d874473e6e2b72ce81644002bd18c802c02dd42d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy HAPI DLLs\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# The variables set here must be set by the CMakeLists.txt that sets H3D_USE_DEPENDENCIES_ONLY to true.\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# file(COPY \"${HAPI_DIR}/bin/HAPI_*.dll\" DESTINATION ${SOFA_BIN_DIR})\n\n# file(COPY \"${HAPI_DIR}/bin/H3DUtil_*.dll\" DESTINATION ${SOFA_BIN_DIR})\n\n# file(COPY \"${HAPI_DIR}/External/bin/pthreadVC2.dll\" DESTINATION ${SOFA_BIN_DIR})\n\n# file(COPY \"${HAPI_DIR}/External/bin/FreeImage.dll\" DESTINATION ${SOFA_BIN_DIR})\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "## SofaHAPI/config.h\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Install rules for the library and the header; CMake package configurations files\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "applications/plugins/SofaImplicitField/CMakeLists.txt" : {
      "ObjectId" : "8bfe2e42cd017406b1e78d5489521f454d14f42c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is backward compatibility\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# This is a backward compatibility file toward ScalarField\n\n# This is a backward compatibility file toward DiscreteridField\n",
        "Line" : 15,
        "CharPositionInLine" : 45
      },
      "2" : {
        "Text" : "## This is a backward compatibility..\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "applications/plugins/SofaImplicitField/SofaImplicitField_test/CMakeLists.txt" : {
      "ObjectId" : "34b3d460fae21e961afa07b69e91356f79f76aa6",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaMiscCollision/CMakeLists.txt" : {
      "ObjectId" : "2ef6902abefd6a90c10d50e880a9af989782d5c5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaOpenCL/CMakeLists.txt" : {
      "ObjectId" : "b5a7bb3baa5bd4a103fa943f9c942370ef081bc9",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# taucs taucs_mt system-taucs)\n",
        "Line" : 105,
        "CharPositionInLine" : 122
      },
      "1" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/SofaPML/CMakeLists.txt" : {
      "ObjectId" : "99e47ff819d01d5f330d4cfe9a0e0c9251235a08",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaPardisoSolver/CMakeLists.txt" : {
      "ObjectId" : "ff3d7a1031eb8c3135995a4ad2f32e5fb6cbc389",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/SofaPardisoSolver/cmake/CheckOpenMP.cmake" : {
      "ObjectId" : "32beb08d81d64e0e89734ab777dcb5bdad950492",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Multi precision toolbox for Scilab\n\n# Copyright (C) 2009 - Jonathan Blanchard\n\n#\n\n# This file must be used under the terms of the CeCILL.\n\n# This source file is licensed as described in the file COPYING, which\n\n# you should have received as part of this distribution.  The terms\n\n# are also available at\n\n# http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if the compiler supports OpenMP and attempts to identify the required compiler flags.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to use GOMP the gnu OpenMP implementation of GCC.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Try to use GOMP the gnu OpenMP implementation of GCC with explicit linking of libgomp.\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Try to use the Sun Studio OpenMP implementation.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Try to use the Intel Compiler OpenMP implementation.\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "applications/plugins/SofaPardisoSolver/cmake/FindBLAS.cmake" : {
      "ObjectId" : "68c4e072417b9bc434895d1feb6e89e3bc7e5548",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find BLAS library\n\n#\n\n# This module finds an installed library that implements the BLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/).\n\n# The list of libraries searched for is mainly taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface\n\n#    is found\n\n#  BLAS_INCLUDE_DIR - Directories containing the BLAS header files\n\n#  BLAS_DEFINITIONS - Compilation options to use BLAS\n\n#  BLAS_LINKER_FLAGS - Linker flags to use BLAS (excluding -l\n\n#    and -L).\n\n#  BLAS_LIBRARIES_DIR - Directories containing the BLAS libraries.\n\n#     May be null if BLAS_LIBRARIES contains libraries name using full path.\n\n#  BLAS_LIBRARIES - List of libraries to link against BLAS interface.\n\n#     May be null if the compiler supports auto-link (e.g. VC++).\n\n#  BLAS_USE_FILE - The name of the cmake module to include to compile\n\n#     applications or libraries using BLAS.\n\n#\n\n# This module was modified by CGAL team:\n\n# - find libraries for a C++ compiler, instead of Fortran\n\n# - added BLAS_INCLUDE_DIR, BLAS_DEFINITIONS and BLAS_LIBRARIES_DIR\n\n# - removed BLAS95_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# check_function_exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found and DEFINITIONS to the required definitions.\n\n# Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"DEBUG: check_fortran_libraries(${_list} in ${_path})\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check for the existence of the libraries given by _list\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# search first in ${_path}\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# if not found, search in environment variables and system\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Test this combination of libraries with the Fortran/f2c interface.\n\n# We test the Fortran interface first as it is well standardized.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some C++ linkers require the f2c library to link with Fortran libraries.\n\n# I do not know which ones, thus I just add the f2c library if it is available.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_DEFINITIONS = ${CMAKE_REQUIRED_DEFINITIONS}\")\n\n#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n\n# Check if function exists with f2c calling convention (ie a trailing underscore)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# If not found, test this combination of libraries with a C interface.\n\n# A few implementations (ie ACML) provide a C interface. Unfortunately, there is no standard.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# on failure\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(\"DEBUG: ${DEFINITIONS} = ${${DEFINITIONS}}\")\n\n#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\n\n# main\n\n#\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Is it already configured?\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# reset variables\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#\n\n# If Unix, search for BLAS function in possible libraries\n\n#\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Extra linker flag\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# BLAS in IBM ESSL library? (requires generic BLAS lib, too)\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "### windows version of intel mkl 10?\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "#older versions of intel mkl libs\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# BLAS in intel mkl library? (shared)\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#BLAS in intel mkl library? (static, 32bit)\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "#BLAS in intel mkl library? (static, em64t 64bit)\n",
        "Line" : 317,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 330,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Generic BLAS library?\n\n# This configuration *must* be the last try as this library is notably slow.\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Add variables to cache\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#message(\"DEBUG: BLAS_INCLUDE_DIR = ${BLAS_INCLUDE_DIR}\")\n\n#message(\"DEBUG: BLAS_DEFINITIONS = ${BLAS_DEFINITIONS}\")\n\n#message(\"DEBUG: BLAS_LINKER_FLAGS = ${BLAS_LINKER_FLAGS}\")\n\n#message(\"DEBUG: BLAS_LIBRARIES = ${BLAS_LIBRARIES}\")\n\n#message(\"DEBUG: BLAS_LIBRARIES_DIR = ${BLAS_LIBRARIES_DIR}\")\n\n#message(\"DEBUG: BLAS_FOUND = ${BLAS_FOUND}\")\n",
        "Line" : 412,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 37
    },
    "applications/plugins/SofaPardisoSolver/cmake/FindGFortran.cmake" : {
      "ObjectId" : "b7f85f2042f04b82071b63f0676e4532a4ccfabd",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaPython/CMakeLists.txt" : {
      "ObjectId" : "2a628f3c31bb5ee059922f3a6e684797c7f8d266",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Binding_MechanicalObject.h\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Binding_SubsetMultiMapping.h\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    Binding_MechanicalObject.cpp\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#    Binding_SubsetMultiMapping.cpp\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Get rid of absolute paths in SofaPython\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# SofaPython/config.h\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Config files and install rules for pythons scripts\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The implementation of Python deliberately breaks strict-aliasing rules, so we\n\n# compile with -fno-strict-aliasing to prevent the compiler from relying on\n\n# those rules to optimize the code.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# dlopen() is used on Linux for a workaround (see PythonEnvironnement.cpp)\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "applications/plugins/SofaPython/SofaPython_test/CMakeLists.txt" : {
      "ObjectId" : "c8023f4915b1f783e7b2f9054207091d91ca5332",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaSimpleGUI/CMakeLists.txt" : {
      "ObjectId" : "8db68fbf81e0322c6e6a5347ab6ec6593b885605",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/SofaSphFluid/CMakeLists.txt" : {
      "ObjectId" : "8136159dedb0237ed58eb3cf67bca8876aeba754",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaStereo/CMakeLists.txt" : {
      "ObjectId" : "ec7770a23b460948ddb4a543d6f246862bd33c91",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## RPATH\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/SofaTest/CMakeLists.txt" : {
      "ObjectId" : "a1eea7afa8c373b7f82a3303d88a2e2298f10276",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#LogMessage.h\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Config files and install rules for pythons scripts\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/plugins/SofaTest/SofaTest_test/CMakeLists.txt" : {
      "ObjectId" : "1f4e0d667bd22b039fca67df69a08adb87959629",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/SofaVolumetricData/CMakeLists.txt" : {
      "ObjectId" : "1207c887b9522f4cb2887701c396c01535b7c43f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/THMPGSpatialHashing/CMakeLists.txt" : {
      "ObjectId" : "56a24792ef98278134d09ebb913d65c578c255c4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/THMPGSpatialHashing/THMPGSpatialHashing_test/CMakeLists.txt" : {
      "ObjectId" : "b1092678a0b9b6de13f623ba6d38cea0d24d37c8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/VolumetricRendering/CMakeLists.txt" : {
      "ObjectId" : "63298baae868e86ccc0ebd78d377f9a408393aec",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Force includes to be like <VolumetricRendering/xxxxxx.h>\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/plugins/Xitact/CMakeLists.txt" : {
      "ObjectId" : "dce9c3a8a2ca2543cbe0c74e835b76dfc9b6c4c4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/image/CMakeLists.txt" : {
      "ObjectId" : "daa88af95953e722515191df1d81f14aed66385c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Config files and install rules for pythons scripts\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# todo?\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if(SOFA-EXTERNAL_OPENCV)\n\n# AddLinkerDependencies(\"ml\")\n\n# AddLinkerDependencies(\"cvaux\")\n\n# AddLinkerDependencies(\"highgui\")\n\n# AddLinkerDependencies(\"cv\")\n\n# AddLinkerDependencies(\"cxcore\")\n\n# endif()\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OpenMP is bugged in image, forcing it to be single threaded for now\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Install rules for the library and headers; CMake package configurations files\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Install rules for the resources\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "applications/plugins/image/FindFreenect.cmake" : {
      "ObjectId" : "ffc5319bf3e3dea384181d3a387f2e9df8c46a34",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the libfreenect includes and library\n\n# This module defines\n\n# FREENECT_INCLUDE_DIR, path to libfreenect.h, etc.\n\n# FREENECT_LIBRARIES, the libraries required to use FREENECT.\n\n# FREENECT_FOUND, If false, do not try to use FREENECT.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/image/extlibs/DiffusionSolver/CMakeLists.txt" : {
      "ObjectId" : "8734ede26cf275c8d9a124194df777b8238ff9cc",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# no need for openmp in debug\n",
        "Line" : 10,
        "CharPositionInLine" : 73
      },
      "1" : {
        "Text" : "# imageConfigVersion.cmake\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DiffusionSolverConfig.cmake\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DiffusionSolverTargets.cmake\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "applications/plugins/image/image_gui/CMakeLists.txt" : {
      "ObjectId" : "65dfe72f1807cc7afa3054deae9d7a5ca910b2e1",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: install rules\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/plugins/image/image_test/CMakeLists.txt" : {
      "ObjectId" : "6a3069b7f15129c581e9a0b8035e04568b111ca2",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/plugins/image/imagetoolbox/imagetoolbox.cmake" : {
      "ObjectId" : "ed7658c1c01e26b225898559f5fe5da008e9f5a1",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# these header files need MOCcing\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# these header files does not need MOCcing\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/projects/CMakeLists.txt" : {
      "ObjectId" : "4523b06ef678dee052296b5662a49c2bdee744ab",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if Qt(4/5) is present\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/projects/GenerateRigid/CMakeLists.txt" : {
      "ObjectId" : "9c62fec4008c5a166f537de91dbba571924bc82c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/Modeler/CMakeLists.txt" : {
      "ObjectId" : "1fa110ea215093b861d2889fb5e0141556cc4ce4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/Modeler/exec/CMakeLists.txt" : {
      "ObjectId" : "fa63d875985ec1e57d28cc344421ab7d551b98f3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/Modeler/lib/CMakeLists.txt" : {
      "ObjectId" : "e5c43ca5e9cc9ddaa5f71b197ef5e12def086376",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/SofaFlowVR/CMakeLists.txt" : {
      "ObjectId" : "40ec865721e413e2368860b44d0d95dade29bc46",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/SofaGuiGlut/CMakeLists.txt" : {
      "ObjectId" : "615e3a10b1bf52c8a627b00fb2761617c299b380",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Workaround: on OS X, \"${GLUT_glut_LIBRARY}\" is not a target (it is\n\n# actually \"-framework GLUT\"), so we use find_library to find\n\n# something better (like /System/Library/Frameworks/GLUT.framework.)\n\n# (Fun fact: FindGLUT.cmake litterally reads \"These values for Apple\n\n# could probably do with improvement.)\"\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "applications/projects/SofaPhysicsAPI/CMakeLists.txt" : {
      "ObjectId" : "57df195085bdf39a4bae4f7ebe7cd72d03066cd9",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# main.cpp\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "## Install rules and CMake package configurations files\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/projects/findAlias/CMakeLists.txt" : {
      "ObjectId" : "24c51292d48bd0aa6b79ec2dc18c61f509dd2f3c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/generateDoc/CMakeLists.txt" : {
      "ObjectId" : "85ee5ddb5017d706c54066ad8dc00a340be9214d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/generateTypedefs/CMakeLists.txt" : {
      "ObjectId" : "c454b05e4dadf350213cd288c02dace9a11b280d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/getDeprecatedComponents/CMakeLists.txt" : {
      "ObjectId" : "cb7bdcaccf220148f13997d2438e69a211541a23",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/projects/glutOnePick/CMakeLists.txt" : {
      "ObjectId" : "423121134aec603cc0996f28b12e22b042a91c1b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/meshconv/CMakeLists.txt" : {
      "ObjectId" : "a038826575b96e2feae22fb9a0cd24ca7fc1315d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/myCfExport/CMakeLists.txt" : {
      "ObjectId" : "5246e29b62bb471edaeb8db11798b184d8ad4d21",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if(UNIX)\n\n#     target_link_libraries(${PROJECT_NAME} dl)\n\n# endif()\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/projects/qtSofa/CMakeLists.txt" : {
      "ObjectId" : "5b1557807df8835ab2fec9c240177346fbc6212f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/runSofa/CMakeLists.txt" : {
      "ObjectId" : "fc166a41941f3f89bfd2d66052570095de6f409a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if MSVC then plugins are located in bin/ instead of lib/ on Mac and Linux\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create build and install versions of .ini file for resources finding\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/projects/runSofa/cmake/GeneratePluginConfig.cmake" : {
      "ObjectId" : "3507e59fb958afb345fe61b5bc8dd9f0f982fd1b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate default list of plugins (according to the options)\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# only useful for devs working directly with a build version (not installed)\n\n# With Win/MVSC, we can only know $CONFIG at build time\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# does not exist if using MSVC without Visual Studio IDE\n",
        "Line" : 34,
        "CharPositionInLine" : 66
      },
      "CommentCount" : 3
    },
    "applications/projects/runSofa/cmake/bundle-post.cmake" : {
      "ObjectId" : "ec76191ea238fb6ac22f776fc541e124192b519b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/runSofa/cmake/bundle.cmake" : {
      "ObjectId" : "6559ce1fd94ca2cf820d9c8bcb806456603054e8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Now the installation stuff below\n\n#--------------------------------------------------------------------------------\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Install the  application, on Apple, the bundle is at the root of the\n\n# install tree, and on other platforms it'll go into the bin directory.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Install resource files\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Install python scripts, preserving the file tree\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "## Python configuration file (install tree)\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Own way to get plugins dir\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# to get SOFA_HAVE_GLUT\n",
        "Line" : 58,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Install needed Qt plugins by copying directories from the qt installation\n\n# One can cull what gets copied by using 'REGEX \"...\" EXCLUDE'\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# install a qt.conf file\n\n# this inserts some cmake code into the install script to write the file\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Use BundleUtilities to get all other dependencies for the application to work.\n\n# It takes a bundle or executable along with possible plugins and inspects it\n\n# for dependencies.  If they are not system dependencies, they are copied.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\n\n# The quotes are escaped and variables to use at install time have their $ escaped\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\n\n# over.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# To Create a package, one can run \"cpack -G DragNDrop CPackConfig.cmake\" on Mac OS X\n\n# where CPackConfig.cmake is created by including CPack\n\n# And then there's ways to customize this as well\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# include(CPack)\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "applications/projects/runSofa/runSofa_test/CMakeLists.txt" : {
      "ObjectId" : "9f6f889b36e59cd03cda74a356a8e167997fa4f4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/sofaBatch/CMakeLists.txt" : {
      "ObjectId" : "4dcbc8c4f8fc5000cf0aedb42df12edcf523500a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/sofaInfo/CMakeLists.txt" : {
      "ObjectId" : "77f30c9fc43f263d06be9d4cbc9786cb160b7081",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/sofaInitTimer/CMakeLists.txt" : {
      "ObjectId" : "d702269f1292e757867d4a1e9edc470598999eee",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/sofaOPENCL/CMakeLists.txt" : {
      "ObjectId" : "0a7de4e452a9bd008414029710179c73676be67b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/sofaProjectExample/CMakeLists.txt" : {
      "ObjectId" : "91251d316cc83296579132de5baba87dcae75f7b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/sofaTypedefs/CMakeLists.txt" : {
      "ObjectId" : "c48d30a20a29bcc515c918de38ca9212e9a8e4d4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/projects/xmlconvert-displayflags/CMakeLists.txt" : {
      "ObjectId" : "fb017477382c80f2e9aa64725df1f3dec15b90f6",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/sofa/gui/SofaGuiCommon/CMakeLists.txt" : {
      "ObjectId" : "a82f5de00b7ec7896a9b02f29bd010e66b9d49e5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/sofa/gui/SofaGuiMain/CMakeLists.txt" : {
      "ObjectId" : "7d1c7607094eaf84decefd19f669ed7149c322ae",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/sofa/gui/headlessRecorder/CMakeLists.txt" : {
      "ObjectId" : "eca86ad8198277e3812293ba0d3857b0f4b83431",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FFMPEG\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# X11\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/sofa/gui/qt/CMakeLists.txt" : {
      "ObjectId" : "02ef07133f1dc3275aaf7576b1c322abfef3ced0",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# these header files do not need MOCcing\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QtViewer\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# QGLViewer\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# target_include_directories(${EXT_QT_INCLUDES})\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# QT INSTALL (dirty)\n\n# Get Qt libraries dir\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Get Qt plugins dir\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Try to guess QT_PLUGINS_DIR\n",
        "Line" : 188,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Install Qt plugins\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Install Qt XCB libraries\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Install Qt ICU libraries\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# For files generated by the moc\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# target_compile_definitions(${PROJECT_NAME} PUBLIC \"SOFA_QT4\")\n\n# target_compile_definitions(${PROJECT_NAME} PUBLIC \"QT3_SUPPORT\")\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Create build and install versions of .ini file for resources finding\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "applications/tutorials/CMakeLists.txt" : {
      "ObjectId" : "221e0cd28a7a5a1c7cfeb55eb2a666d96d6435e0",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No CMakeLists.txt\n\n# anatomyModelling\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#compositeObject\n\n#houseOfCards\n\n#mixedPendulum\n\n#oneParticle\n\n# Needs SofaTypedefs\n\n# oneParticleWithSofaTypedefs\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# IDE folder\n",
        "Line" : 18,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 3
    },
    "applications/tutorials/chainHybrid/CMakeLists.txt" : {
      "ObjectId" : "f4aa0c01f221f8e5aec470f45a54809d631dd4cb",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SofaGui\n",
        "Line" : 15,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# SofaGeneral\n",
        "Line" : 16,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : "# SofaCommon\n",
        "Line" : 17,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : "# SofaBase\n",
        "Line" : 18,
        "CharPositionInLine" : 39
      },
      "4" : {
        "Text" : "# SofaSimulation\n",
        "Line" : 19,
        "CharPositionInLine" : 23
      },
      "5" : {
        "Text" : "# SofaFramework\n",
        "Line" : 20,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 6
    },
    "applications/tutorials/compositeObject/CMakeLists.txt" : {
      "ObjectId" : "bd892021df77587747d0534fb09afbe964655bef",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/tutorials/houseOfCards/CMakeLists.txt" : {
      "ObjectId" : "f45e4240a18aba57c8d263decdffcc230bf3f7f8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/tutorials/mixedPendulum/CMakeLists.txt" : {
      "ObjectId" : "b2384da67e0d1f3055d423a7c527115401bcc9f3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/tutorials/oneParticle/CMakeLists.txt" : {
      "ObjectId" : "b712b5e4376c3bb37a5e407889002ebf7bcd3bd5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/tutorials/oneParticleWithSofaTypedefs/CMakeLists.txt" : {
      "ObjectId" : "6f2753d3ac05ee8b5c963c2e7d7d23ff3895d916",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/tutorials/oneTetrahedron/CMakeLists.txt" : {
      "ObjectId" : "a591aeeb509ce16f558c7647f3ecb5e4c2b114d4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindCUDASparse.cmake" : {
      "ObjectId" : "a9ae0601dd913d285575b0f8efb9efcc70cb8d9b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The script defines the following variables:\n\n#\n\n##############################################################################\n\n# Cutil library: CUDA_SPARSE_LIBRARY\n\n##############################################################################\n\n#\n\n#\n\n# CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA toolkit. As the sparse library is\n\n# part of the CUDA toolkit, this suffices to find the\n\n# library.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCUDASparse.cmake\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindCython.cmake" : {
      "ObjectId" : "8c395a05cf8a561cf672931aac4c67feae431fb0",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Cython compiler.\n\n#\n\n# This code sets the following variables:\n\n#\n\n#  CYTHON_EXECUTABLE\n\n#\n\n# See also UseCython.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#=============================================================================\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use the Cython executable that lives next to the Python executable\n\n# if it is a local installation.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindFFMPEG.cmake" : {
      "ObjectId" : "516bc06007fae07eb75a66fa152b3363b16e4373",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ffmpeg libraries (libavcodec, libavformat and libavutil)\n\n# Once done this will define\n\n#\n\n# FFMPEG_FOUND - system has ffmpeg or libav\n\n# FFMPEG_INCLUDE_DIR - the ffmpeg include directory\n\n# FFMPEG_LIBRARIES - Link these to use ffmpeg\n\n# FFMPEG_LIBAVCODEC\n\n# FFMPEG_LIBAVFORMAT\n\n# FFMPEG_LIBAVUTIL\n\n#\n\n# Copyright (c) 2008 Andreas Schneider <mail@cynapses.org>\n\n# Modified for other libraries by Lasse Kärkkäinen <tronic>\n\n# Modified for Hedgewars by Stepik777\n\n#\n\n# Redistribution and use is allowed according to the terms of the New\n\n# BSD license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindH3DUtil.cmake" : {
      "ObjectId" : "adebf864b1da439ebb94021b9fddb5c76bcffcc8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find H3DUtil\n\n# Find the native H3DUTIL headers and libraries.\n\n#\n\n# H3DUTIL_INCLUDE_DIR - where to find H3DUtil.h, etc.\n\n# H3DUTIL_LIBRARIES - List of libraries when using H3DUtil.\n\n# H3DUTIL_FOUND - True if H3DUtil found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#pthread is required for using the H3DUtil library\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Report the results.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindHAPI.cmake" : {
      "ObjectId" : "9be4a27b85a197dc46e02f7f3c140c58db20ecf5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find HAPI\n\n# Find the native HAPI headers and libraries.\n\n#\n\n#  HAPI_INCLUDE_DIR -  where to find HAPI.h, etc.\n\n#  HAPI_LIBRARIES    - List of libraries when using HAPI.\n\n#  HAPI_FOUND        - True if HAPI found.\n\n#  HAPI_DIR - where External files are found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Report the results.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindICU.cmake" : {
      "ObjectId" : "59dd891afaacc26235bcff4ec8e71350ac415f6c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module can find the International Components for Unicode (ICU) libraries\n\n#\n\n# Requirements:\n\n# - CMake >= 2.8.3 (for new version of find_package_handle_standard_args)\n\n#\n\n# The following variables will be defined for your use:\n\n#   - ICU_FOUND             : were all of your specified components found?\n\n#   - ICU_INCLUDE_DIRS      : ICU include directory\n\n#   - ICU_LIBRARIES         : ICU libraries\n\n#   - ICU_VERSION           : complete version of ICU (x.y.z)\n\n#   - ICU_VERSION_MAJOR     : major version of ICU\n\n#   - ICU_VERSION_MINOR     : minor version of ICU\n\n#   - ICU_VERSION_PATCH     : patch version of ICU\n\n#   - ICU_<COMPONENT>_FOUND : were <COMPONENT> found? (FALSE for non specified component if it is not a dependency)\n\n#\n\n# For windows or non standard installation, define ICU_ROOT_DIR variable to point to the root installation of ICU. Two ways:\n\n#   - run cmake with -DICU_ROOT_DIR=<PATH>\n\n#   - define an environment variable with the same name before running cmake\n\n# With cmake-gui, before pressing \"Configure\":\n\n#   1) Press \"Add Entry\" button\n\n#   2) Add a new entry defined as:\n\n#     - Name: ICU_ROOT_DIR\n\n#     - Type: choose PATH in the selection list\n\n#     - Press \"...\" button and select the root installation of ICU\n\n#\n\n# Example Usage:\n\n#\n\n#   1. Copy this file in the root of your project source directory\n\n#   2. Then, tell CMake to search this non-standard module in your project directory by adding to your CMakeLists.txt:\n\n#     set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n\n#   3. Finally call find_package() once, here are some examples to pick from\n\n#\n\n#   Require ICU 4.4 or later\n\n#     find_package(ICU 4.4 REQUIRED)\n\n#\n\n#   if(ICU_FOUND)\n\n#      add_executable(myapp myapp.c)\n\n#      include_directories(${ICU_INCLUDE_DIRS})\n\n#      target_link_libraries(myapp ${ICU_LIBRARIES})\n\n#      # with CMake >= 3.0.0, the last two lines can be replaced by the following\n\n#      target_link_libraries(myapp ICU::ICU)\n\n#   endif(ICU_FOUND)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########## <ICU finding> ##########\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########## Private ##########\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prefix for all ICU relative public variables\n",
        "Line" : 50,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# Prefix for all ICU relative internal variables\n",
        "Line" : 53,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Prefix for all pkg-config relative internal variables\n",
        "Line" : 56,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# <deprecated>\n\n# for future removal\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# </deprecated>\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# <icu component name> <library name 1> ... <library name N>\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Common and Data libraries\n\n# Internationalization library\n\n# Stream and I/O Library\n\n# Layout library\n\n# Paragraph Layout library\n",
        "Line" : 86,
        "CharPositionInLine" : 43
      },
      "10" : {
        "Text" : "########## Public ##########\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# may be done in the _icu_declare_component macro\n",
        "Line" : 105,
        "CharPositionInLine" : 85
      },
      "12" : {
        "Text" : "# Check components\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# uc required at least\n",
        "Line" : 109,
        "CharPositionInLine" : 45
      },
      "14" : {
        "Text" : "# if pkg-config is available check components dependencies and append `pkg-config icu-<component> --variable=prefix` to hints\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list(APPEND ${ICU_PRIVATE_VAR_NS}_HINTS ENV ICU_ROOT_DIR)\n\n# message(\"${ICU_PRIVATE_VAR_NS}_HINTS = ${${ICU_PRIVATE_VAR_NS}_HINTS}\")\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Includes\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########## <part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# ICU >= 4.4\n",
        "Line" : 156,
        "CharPositionInLine" : 71
      },
      "19" : {
        "Text" : "# ICU [2;4.4[\n",
        "Line" : 158,
        "CharPositionInLine" : 76
      },
      "20" : {
        "Text" : "# ICU [1.4;2[\n",
        "Line" : 160,
        "CharPositionInLine" : 74
      },
      "21" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 162,
        "CharPositionInLine" : 66
      },
      "22" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 168,
        "CharPositionInLine" : 105
      },
      "23" : {
        "Text" : "# [1.3;1.4[ as #define ICU_VERSION \"3\" (no patch version, ie all 1.3.X versions will be detected as 1.3.0)\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "#\n\n# Since version 4.9.1, ICU release version numbering was totaly changed, see:\n\n# - http://site.icu-project.org/download/49\n\n# - http://userguide.icu-project.org/design#TOC-Version-Numbers-in-ICU\n\n#\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# ICU [1.4;1.8[\n",
        "Line" : 182,
        "CharPositionInLine" : 125
      },
      "26" : {
        "Text" : "# [1.4;1.8[ as #define U_ICU_VERSION \"1.4.1.2\" but it seems that some 1.4.[12](?:\\.\\d)? have releasing error and appears as 1.4.0\n",
        "Line" : 183,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# copy CMAKE_MATCH_1, no longer valid on the following if\n",
        "Line" : 184,
        "CharPositionInLine" : 67
      },
      "28" : {
        "Text" : "########## </part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Check libraries\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Try to find out compiler flags\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Check find_package arguments\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# <deprecated>\n\n# for compatibility with previous versions, alias old ICU_(MAJOR|MINOR|PATCH)_VERSION to ICU_VERSION_$1\n",
        "Line" : 272,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# </deprecated>\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "#             set_target_properties(\"ICU::${${ICU_PRIVATE_VAR_NS}_UPPER_COMPONENT}\" PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"${${ICU_PUBLIC_VAR_NS}_INCLUDE_DIR}\")\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "########## </ICU finding> ##########\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "########## <resource bundle support> ##########\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "########## Private ##########\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "########## Public ##########\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n# Prototype:\n\n#   icu_generate_resource_bundle([NAME <name>] [PACKAGE] [DESTINATION <location>] [FILES <list of files>])\n\n#\n\n# Common arguments:\n\n#   - NAME <name>                      : name of output package and to create dummy targets\n\n#   - FILES <file 1> ... <file N>      : list of resource bundles sources\n\n#   - DEPENDS <target1> ... <target N> : required to package as library (shared or static), a list of cmake parent targets to link to\n\n#                                        Note: only (PREVIOUSLY DECLARED) add_executable and add_library as dependencies\n\n#   - DESTINATION <location>           : optional, directory where to install final binary file(s)\n\n#   - FORMAT <name>                    : optional, one of none (ICU4C binary format, default), java (plain java) or xliff (XML), see below\n\n#\n\n# Arguments depending on FORMAT:\n\n#   - none (default):\n\n#       * PACKAGE     : if present, package all resource bundles together. Default is to stop after building individual *.res files\n\n#       * TYPE <name> : one of :\n\n#           + common or archive (default) : archive all ressource bundles into a single .dat file\n\n#           + library or dll              : assemble all ressource bundles into a separate and loadable library (.dll/.so)\n\n#           + static                      : integrate all ressource bundles to targets designed by DEPENDS parameter (as a static library)\n\n#       * NO_SHARED_FLAGS                 : only with TYPE in ['library', 'dll', 'static'], do not append ICU_C(XX)_SHARED_FLAGS to targets given as DEPENDS argument\n\n#   - JAVA:\n\n#       * BUNDLE <name> : required, prefix for generated classnames\n\n#   - XLIFF:\n\n#       (none)\n\n#\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n# For an archive, the idea is to generate the following dependencies:\n\n#\n\n#   root.txt => root.res \\\n\n#                        |\n\n#   en.txt   => en.res   |\n\n#                        | => pkglist.txt => application.dat\n\n#   fr.txt   => fr.res   |\n\n#                        |\n\n#   and so on            /\n\n#\n\n# Lengend: 'A => B' means B depends on A\n\n#\n\n# Steps (correspond to arrows):\n\n#   1) genrb (from .txt to .res)\n\n#   2) generate a file text (pkglist.txt) with all .res files to put together\n\n#   3) build final archive (from *.res/pkglist.txt to .dat)\n\n#\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "##### <check for pkgdata/genrb availability> #####\n",
        "Line" : 373,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "##### </check for pkgdata/genrb availability> #####\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "##### <constants> #####\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "##### </constants> #####\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "##### <hash constants> #####\n\n# filename extension of built resource bundle (without dot)\n",
        "Line" : 392,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# alias: none (default) = common = archive ; dll = library ; static\n",
        "Line" : 397,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# filename prefix of built package\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# filename extension of built package (with dot)\n",
        "Line" : 408,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# pkgdata option mode specific\n",
        "Line" : 412,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# cmake library type for output package\n",
        "Line" : 416,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "##### </hash constants> #####\n",
        "Line" : 420,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# output variable name\n",
        "Line" : 424,
        "CharPositionInLine" : 20
      },
      "53" : {
        "Text" : "# options (true/false) (default value: false)\n",
        "Line" : 425,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# univalued parameters (default value: \"\")\n",
        "Line" : 427,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# multivalued parameters (default value: \"\")\n",
        "Line" : 429,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# assert(${PARSED_ARGS_NAME} != \"\")\n",
        "Line" : 434,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# assert(length(PARSED_ARGS_FILES) > 0)\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# assert(${UPPER_FORMAT} in ['', 'java', 'xlif'])\n",
        "Line" : 446,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# assert(${PARSED_ARGS_BUNDLE} != \"\")\n",
        "Line" : 452,
        "CharPositionInLine" : 8
      },
      "60" : {
        "Text" : "# assert(${PARSED_ARGS_FORMAT} == \"\")\n",
        "Line" : 459,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "# assert(${UPPER_MODE} in ['', 'common', 'archive', 'dll', library'])\n",
        "Line" : 465,
        "CharPositionInLine" : 8
      },
      "62" : {
        "Text" : "# Package name: strip file extension if present\n",
        "Line" : 472,
        "CharPositionInLine" : 8
      },
      "63" : {
        "Text" : "# Target name to build package\n",
        "Line" : 474,
        "CharPositionInLine" : 8
      },
      "64" : {
        "Text" : "# Target name to build intermediate list file\n",
        "Line" : 476,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "# Directory (absolute) to set as \"current directory\" for genrb (does not include package directory, -p)\n\n# We make our \"cook\" there to prevent any conflict\n",
        "Line" : 478,
        "CharPositionInLine" : 8
      },
      "66" : {
        "Text" : "# CMake < 2.8.10\n",
        "Line" : 480,
        "CharPositionInLine" : 44
      },
      "67" : {
        "Text" : "# CMake >= 2.8.10\n",
        "Line" : 482,
        "CharPositionInLine" : 46
      },
      "68" : {
        "Text" : "# Directory (absolute) where resource bundles are built: concatenation of RESOURCE_GENRB_CHDIR_DIR and package name\n",
        "Line" : 485,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# Output (relative) path for built package\n",
        "Line" : 487,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# Output (absolute) path for the list file\n",
        "Line" : 493,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "#         set(RESOURCE_GENRB_CHDIR_DIR \"UNUSED\")\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "##### <templates> #####\n",
        "Line" : 518,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "##### </templates> #####\n",
        "Line" : 532,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# build <locale>.txt from <locale>.res\n",
        "Line" : 534,
        "CharPositionInLine" : 8
      },
      "75" : {
        "Text" : "# dummy target (ICU+RB+<name>+<locale>) for each locale to build the <locale>.res file from its <locale>.txt by the add_custom_command above\n",
        "Line" : 548,
        "CharPositionInLine" : 8
      },
      "76" : {
        "Text" : "# convert semicolon separated list to a space separated list\n\n# NOTE: if the pkglist.txt file starts (or ends?) with a whitespace, pkgdata add an undefined symbol (named <package>_) for it\n",
        "Line" : 564,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# create a text file (pkglist.txt) with the list of the *.res to package together\n",
        "Line" : 569,
        "CharPositionInLine" : 8
      },
      "78" : {
        "Text" : "# run pkgdata from pkglist.txt\n",
        "Line" : 575,
        "CharPositionInLine" : 8
      },
      "79" : {
        "Text" : "# assert(${PARSED_ARGS_DEPENDS} != \"\")\n",
        "Line" : 583,
        "CharPositionInLine" : 12
      },
      "80" : {
        "Text" : "# http://www.mail-archive.com/cmake-commits@cmake.org/msg01135.html\n",
        "Line" : 606,
        "CharPositionInLine" : 12
      },
      "81" : {
        "Text" : "# dummy intermediate target (ICU+PKG+<name>+DUMMY) to link the package to the produced library by running pkgdata (see add_custom_command above)\n",
        "Line" : 608,
        "CharPositionInLine" : 12
      },
      "82" : {
        "Text" : "# dummy target (ICU+PKG+<name>) to run pkgdata (see add_custom_command above)\n",
        "Line" : 616,
        "CharPositionInLine" : 12
      },
      "83" : {
        "Text" : "# dummy target (ICU+PKG+<name>+PKGLIST) to build the file pkglist.txt\n",
        "Line" : 623,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# package => pkglist.txt\n",
        "Line" : 629,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "# pkglist.txt => *.res\n",
        "Line" : 631,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "########## </resource bundle support> ##########\n",
        "Line" : 641,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "########## <debug> ##########\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# IN (args)\n",
        "Line" : 655,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# OUT\n\n# Found\n",
        "Line" : 661,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# Flags\n",
        "Line" : 664,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Linking\n",
        "Line" : 671,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Version\n",
        "Line" : 674,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# <COMPONENT>_(FOUND|LIBRARY)\n",
        "Line" : 679,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "########## </debug> ##########\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 95
    },
    "cmake/Modules/FindOpenCL.cmake" : {
      "ObjectId" : "b30bd1b8cbb5d98e3789f941ad6dbd7728525b53",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find OpenCL\n\n# This module tries to find an OpenCL implementation on your system. It supports\n\n# AMD / ATI, Apple and NVIDIA implementations, but should work, too.\n\n#\n\n# To set manually the paths, define these environment variables:\n\n# OpenCL_INCPATH    - Include path (e.g. OpenCL_INCPATH=/opt/cuda/4.0/cuda/include)\n\n# OpenCL_LIBPATH    - Library path (e.h. OpenCL_LIBPATH=/usr/lib64/nvidia)\n\n#\n\n# Once done this will define\n\n#  OPENCL_FOUND        - system has OpenCL\n\n#  OPENCL_INCLUDE_DIRS  - the OpenCL include directory\n\n#  OPENCL_LIBRARIES    - link these to use OpenCL\n\n#\n\n# WIN32 should work, but is untested\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# need to convert path in the cmake style ?\n",
        "Line" : 43,
        "CharPositionInLine" : 52
      },
      "2" : {
        "Text" : "# On Win32 search relative to the library\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Unix style platforms\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# The AMD SDK currently does not place its headers\n\n# in /usr/include, therefore also search relative\n\n# to the library\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# This is often the same, so clean up\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindOpenCTM.cmake" : {
      "ObjectId" : "2b9e37d188e14cf37c29aaa6ffc4dd5a8c539bbf",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find openCTM library and include path.\n\n# Once done this will define\n\n#\n\n# OPENCTM_FOUND\n\n# OPENCTM_INCLUDE_PATH\n\n# OPENCTM_LIBRARY\n\n# \n\n# lib directory of OpenCTM library should be linked to on of the path below under teh directory openctm\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include( Common )\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindOpenHaptics.cmake" : {
      "ObjectId" : "d1e78e095841c1c57f155b62854a826205e2bc60",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenHaptics\n\n# Find the native OPENHAPTICS headers and libraries.\n\n#\n\n#  OPENHAPTICS_INCLUDE_DIR -  where to find OpenHaptics.h, etc.\n\n#  OPENHAPTICS_UTIL_INCLUDE_DIR - where to find HDU/hdu.h, etc.\n\n#  OPENHAPTICS_LIBRARIES    - List of libraries when using OpenHaptics.\n\n#  OPENHAPTICS_FOUND        - True if OpenHaptics found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 34,
        "CharPositionInLine" : 67
      },
      "3" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 35,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 36,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 37,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# OpenHaptics 2.0\n\n# OpenHaptics 3.0\n",
        "Line" : 40,
        "CharPositionInLine" : 56
      },
      "7" : {
        "Text" : "# TODO: Add conditional checking for x64 system\n\n# Look for the library.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 58,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 59,
        "CharPositionInLine" : 53
      },
      "10" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 60,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 61,
        "CharPositionInLine" : 52
      },
      "12" : {
        "Text" : "# OpenHaptics 2.0\n",
        "Line" : 62,
        "CharPositionInLine" : 66
      },
      "13" : {
        "Text" : "# OpenHaptics 3.0\n",
        "Line" : 63,
        "CharPositionInLine" : 75
      },
      "14" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Report the results.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/Modules/FindOptiX.cmake" : {
      "ObjectId" : "8f93c447ad33ebf798325e99b8e895bec72736a4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The distribution contains both 32 and 64 bit libraries.  Adjust the library search path\n\n# based on the bit-ness of the build.  (i.e. 64: bin64, lib64; 32: bin, lib).\n\n# The Apple distribution does not contain a 64 bit version so it should not be set.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the libraries.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#find_library(${name}_LIBRARY\n\n#  NAMES ${name}.${version} ${name}\n\n#  )\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#find_file(${name}_DLL\n\n#  NAMES ${name}.${version}.dll\n\n#  )\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Include\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check to make sure we found what we were looking for\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Macro for setting up dummy targets\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create imported target\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Import target \"optix\" for configuration \"Debug\"\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#IMPORTED_LINK_INTERFACE_LIBRARIES \"glu32;opengl32\"\n",
        "Line" : 94,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "#IMPORTED_LINK_INTERFACE_LIBRARIES \"glu32;opengl32\"\n",
        "Line" : 100,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# We don't have versioned filenames for now, and it may not even matter.\n\n#IMPORTED_SONAME \"${optix_soname}\"\n",
        "Line" : 102,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Unknown system, but at least try and provide the minimum required\n\n# information.\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Sets up a dummy target\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Since liboptix.1.dylib is built with an install name of @rpath, we need to\n\n# compile our samples with the rpath set to where optix exists.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# optixu and optix are in different paths.  Make sure there isn't an optixu next to\n\n# the optix library.\n",
        "Line" : 133,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 17
    },
    "doc/src_examples/example1/example1.pro" : {
      "ObjectId" : "73cd42cec7793f73a589f015ec625f107eb2fe80",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "doc/src_examples/example2/example2.pro" : {
      "ObjectId" : "73cd42cec7793f73a589f015ec625f107eb2fe80",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "doc/src_examples/example3/example3.pro" : {
      "ObjectId" : "55d83603a9e256c6be1ebc5bb2c2148d497c8d66",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "doc/src_examples/example4/example4.pro" : {
      "ObjectId" : "eaac20eea3d2c5a2da20f7108f8d1ab394725ae9",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "doc/src_examples/src_examples.pro" : {
      "ObjectId" : "41880fb1de78e482499ed0e29ce33ff54ce3232b",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extlibs/ARTrack/CMakeLists.txt" : {
      "ObjectId" : "a46ba7743965c3b647e3431dfc14efb9bb74304d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/CMakeLists.txt" : {
      "ObjectId" : "11752d24db8146a952bbc98676d729c390097152",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Necessary ones\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Optional ones\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "extlibs/LML/CMakeLists.txt" : {
      "ObjectId" : "6b52a64b12ea098ffacec2f8f60964b73b135ac9",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/PML/CMakeLists.txt" : {
      "ObjectId" : "82cb0154083c96265f62d3d44a556a732a16575f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/SuiteSparse/CMakeLists.txt" : {
      "ObjectId" : "1e51c9afe088905f6305dffd828ce7d9e436de87",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# # I think we don't need this, because nobody actually ever\n\n# # includes a cholmod file in SOFA\n\n# file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/cholmod/Include/*.h\")\n\n# install(FILES ${headers} DESTINATION include)\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Copy libraries to the build tree\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Multi-config generator (MSVC)\n",
        "Line" : 15,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# Single-config generator (nmake)\n",
        "Line" : 19,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "# Copy libraries to the install directory\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "extlibs/csparse/CMakeLists.txt" : {
      "ObjectId" : "799014178db18ebbb668962c473349f79b425606",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/gtest/CMakeLists.txt" : {
      "ObjectId" : "b33b9760103e4165d5217246ccd3786771dcd2d3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Options\n\n# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Config\n\n# Define helper functions and macros used by Google Test.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 16,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# make the gtest library as a shared library.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# In Visual Studio 2012 (VC11) _VARIADIC_MAX is by default defined as\n\n# 5, which is not enough for gtest.  So we ensure that everything that\n\n# links against gtest defines _VARIADIC_MAX=10\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "extlibs/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "6448918f8e463dfea84b102dfbfd894974a61ff2",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 66,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 76,
        "CharPositionInLine" : 33
      },
      "14" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 85,
        "CharPositionInLine" : 39
      },
      "16" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Generate debug library name with a postfix.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 193,
        "CharPositionInLine" : 48
      },
      "31" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 254,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 262,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 270,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 41
    },
    "extlibs/libQGLViewer-2.7.1/QGLViewer/CMakeLists.txt" : {
      "ObjectId" : "fa01a6c4f4a4758b5f171ad525b07cb3a3f25381",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QT INSTALL (dirty)\n\n# Get Qt libraries dir\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Get Qt plugins dir\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Try to guess QT_PLUGINS_DIR\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Install Qt plugins\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Install Qt XCB libraries\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Install Qt ICU libraries\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# These header files don't need to be processed by the moc.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In CMake 2.8.11 and later versions, this command automatically adds appropriate include directories, compile definitions, the position-independent-code flag, and links to the qtmain.lib library on Windows.\n\n# target_include_directories(${PROJECT_NAME} PRIVATE ${EXT_QT_INCLUDES})\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Contains the files generated by the Qt MOC.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "extlibs/metis-5.1.0/CMakeLists.txt" : {
      "ObjectId" : "1f2012399230d1b7b99d9305850f3154e3bcc10f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/metis-5.1.0/GKlib/GKlibSystem.cmake" : {
      "ObjectId" : "4e4b61de92b2817530e393c7f11cbf8e49d7e9ec",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup options.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add compiler flags.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GCC opts.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GCC warnings.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sun insists on -xc99.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find OpenMP if it is requested.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add various definitions.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add various options\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check for features.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Custom check for TLS.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This if checks if that value is cached or not.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# if(HAVE_THREADLOCALSTORAGE)\n\n#   message(STATUS \"checking for thread-local storage - found\")\n\n# else()\n\n#   message(STATUS \"checking for thread-local storage - not found\")\n\n# endif()\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Finally set the official C flags.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Find GKlib sources.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "extlibs/miniFlowVR/CMakeLists.txt" : {
      "ObjectId" : "658894147894ac78b5e5057f29f1248d4b99d121",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The code must be relocatable if we want to link a shared library against it\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/qwt-6.1.2/src/CMakeLists.txt" : {
      "ObjectId" : "32a251262552bf2013d964373a7d42e8a5f5ce90",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Header files containing Q_OBJECT declarations\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#./qwt_plot_svgitem.h\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Header files containing Q_OBJECT declarations\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#qwt_plot_svgitem.cpp\n",
        "Line" : 209,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "extlibs/qwt-6.1.2/src/src.pri" : {
      "ObjectId" : "65d79a397eb5c0661e2acfd3261a37b623802a01",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "################################################################\n\n# Qwt Widget Library\n\n# Copyright (C) 1997   Josef Wilgen\n\n# Copyright (C) 2002   Uwe Rathmann\n\n#\n\n# This library is free software; you can redistribute it and/or\n\n# modify it under the terms of the Qwt License, Version 1.0\n\n################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "extlibs/qwt-6.1.2/src/src.pro" : {
      "ObjectId" : "a352b9921dbcc372090f7a7a538867773d0a0742",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "################################################################\n\n# Qwt Widget Library\n\n# Copyright (C) 1997   Josef Wilgen\n\n# Copyright (C) 2002   Uwe Rathmann\n\n#\n\n# This library is free software; you can redistribute it and/or\n\n# modify it under the terms of the Qwt License, Version 1.0\n\n################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# qmake project file for building the qwt libraries\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install directives\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# there is no QMAKE_PKGCONFIG_FILE fo Qt4\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "modules/CMakeLists.txt" : {
      "ObjectId" : "7dd5249bbdda151af442bbf1d3f1d96ec0cb9ea4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### These are real modules. If you need components from there you\n\n### need to first add find_package(XXX) in your CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# depends on SofaSparseSolver\n",
        "Line" : 4,
        "CharPositionInLine" : 59
      },
      "2" : {
        "Text" : "### All the other targets visible in \"modules\" are not real module\n\n### and are contained in the SofaGeneral, SofaMisc, SofaAdvanced\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "modules/SofaBoundaryCondition/CMakeLists.txt" : {
      "ObjectId" : "ab08571ca21971e2183068d47ca018bf70c14368",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaBoundaryCondition/SofaBoundaryCondition_test/CMakeLists.txt" : {
      "ObjectId" : "2c81ca1c917d7b9b0b0d3ebe54415b34fb3eece1",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaComponentAdvanced/CMakeLists.txt" : {
      "ObjectId" : "66e309ba763d2041dbbde42dc8c6247034b165a6",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaComponentGeneral/CMakeLists.txt" : {
      "ObjectId" : "96eca08307d92793f3bc2733277ca4ee98e42753",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaComponentMisc/CMakeLists.txt" : {
      "ObjectId" : "9dd457d5800eb1a30393f43332576fbde888fd62",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaConstraint/CMakeLists.txt" : {
      "ObjectId" : "6c312ddc8baf1e5f3dbb4130a846803c327dbe7d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaConstraint/SofaConstraint_test/CMakeLists.txt" : {
      "ObjectId" : "12e3591f4bc12faf461b949ec82ed8874d63bad3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#LocalMinDistance_test.cpp\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "modules/SofaDenseSolver/CMakeLists.txt" : {
      "ObjectId" : "101b8486f0884accf75ff156892b4328bbb76518",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaExporter/CMakeLists.txt" : {
      "ObjectId" : "ada68f4a1eaf3e7a40922c4c002782ee82d60117",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SofaGeneralLinearSolver\n",
        "Line" : 4,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 1
    },
    "modules/SofaExporter/SofaExporter_test/CMakeLists.txt" : {
      "ObjectId" : "a1080a702be359efe11a4003f0da2fd05b923c3d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralAnimationLoop/CMakeLists.txt" : {
      "ObjectId" : "9fcef0f788f61447ae0e1966f7a3f455961193b8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralDeformable/CMakeLists.txt" : {
      "ObjectId" : "2af98b8db058b41a1ad5d0a1d8c92b6a9ad26100",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralDeformable/SofaGeneralDeformable_test/CMakeLists.txt" : {
      "ObjectId" : "81c021ab2b8a5101bbb5411071288ce7804bcbc6",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralEngine/CMakeLists.txt" : {
      "ObjectId" : "55e209cca4606a74732b2931a8d6c09365f36087",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralEngine/SofaGeneralEngine_test/CMakeLists.txt" : {
      "ObjectId" : "b98b771fafcaf9bd213572981cdf68cc681d8e3a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralExplicitOdeSolver/CMakeLists.txt" : {
      "ObjectId" : "3504dd1761e374c09934ad8f5a3c53f131ccbc7c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralExplicitOdeSolver/SofaGeneralExplicitOdeSolver_test/CMakeLists.txt" : {
      "ObjectId" : "d078b149520073099aeddcdf920995bc63bd8c3c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralImplicitOdeSolver/CMakeLists.txt" : {
      "ObjectId" : "a1442d219f39b585c51b4bc05b06dcd7fc91a999",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralImplicitOdeSolver/SofaGeneralImplicitOdeSolver_test/CMakeLists.txt" : {
      "ObjectId" : "4d6d96b3e1cd7d8643b036e82c15c4df3db8093e",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralLinearSolver/CMakeLists.txt" : {
      "ObjectId" : "c8772b1b51b5c58bf16d8baaaae169cdf36ad02e",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralLinearSolver/SofaGeneralLinearSolver_test/CMakeLists.txt" : {
      "ObjectId" : "bf7715fcafe14cc1077d55f514aece965064dbd4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralLoader/CMakeLists.txt" : {
      "ObjectId" : "fff28cea8f2aac2049f587fda7b445769124cda4",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralLoader/SofaGeneralLoader_test/CMakeLists.txt" : {
      "ObjectId" : "a6b90f86e35e673b94908b0f562dd9e4c1ae158c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralMeshCollision/CMakeLists.txt" : {
      "ObjectId" : "9542aa3175f34c9f2529bfa7c69366390728200c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# IntrTriangleOBB.h\n\n# IntrTriangleOBB.inl\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# RigidContactMapper.h\n\n# RigidContactMapper.inl\n\n# SubsetContactMapper.h\n\n# SubsetContactMapper.inl\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# IntrTriangleOBB.cpp\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# RigidContactMapper.cpp\n\n# SubsetContactMapper.cpp\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "modules/SofaGeneralMeshCollision/SofaGeneralMeshCollision_test/CMakeLists.txt" : {
      "ObjectId" : "2cdbf642e7ed137edb31af1249e4b78da3a4ae31",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralObjectInteraction/CMakeLists.txt" : {
      "ObjectId" : "ab2f3a14f196477090668ed91cfac5b7a7c9071a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralRigid/CMakeLists.txt" : {
      "ObjectId" : "7e021742ae0482872fa253efc3d71482f844f6d5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralRigid/SofaGeneralRigid_test/CMakeLists.txt" : {
      "ObjectId" : "15d72337941eaecf3f011be85bcd06b328d5d58a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralSimpleFem/CMakeLists.txt" : {
      "ObjectId" : "5ffbc0c8b31a1c4eb7b94659e7b47bff38f70deb",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralSimpleFem/SofaGeneralSimpleFem_test/CMakeLists.txt" : {
      "ObjectId" : "83a5c89e8b1512cd875ef5f9cc9e4492963adeb8",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralTopology/CMakeLists.txt" : {
      "ObjectId" : "a9439a6b9575a0247d29d1cc5cfe497cdd27c049",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralTopology/SofaGeneralTopology_test/CMakeLists.txt" : {
      "ObjectId" : "3dfffa12dbcc946a22f923b2c71d8e8ba5dbd0d1",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#BezierTetrahedronTopology_test.cpp\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "modules/SofaGeneralVisual/CMakeLists.txt" : {
      "ObjectId" : "2abf620a22486efe9cdc58f3969d508e36d78034",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGeneralVisual/SofaGeneralVisual_test/CMakeLists.txt" : {
      "ObjectId" : "124104d57fc2cec45aa4425e5b3011ecc0e41ef3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGraphComponent/CMakeLists.txt" : {
      "ObjectId" : "5cddd1ed995a55b25e9ef4a2947857b241d7c65e",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaGraphComponent/SofaGraphComponent_test/CMakeLists.txt" : {
      "ObjectId" : "05af72b2b2c27dd2502d372353e2ee5af1d91749",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_definitions(\"-DSOFAGENERALTOPOLOGY_TEST_SCENES_DIR=\\\"${CMAKE_CURRENT_SOURCE_DIR}/scenes\\\"\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/SofaHaptics/CMakeLists.txt" : {
      "ObjectId" : "2c9faacdee0702402b8c7ab9e3e633a096193ed7",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To have SofaConstraint\n",
        "Line" : 4,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 1
    },
    "modules/SofaMisc/CMakeLists.txt" : {
      "ObjectId" : "ac5aa4e17abe1b1c2b11523a8d0321d152048a1d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMisc/SofaMisc_test/CMakeLists.txt" : {
      "ObjectId" : "63621ac858b1c6e7d01aa3b87fc8f367dd097f76",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscEngine/CMakeLists.txt" : {
      "ObjectId" : "13214d255de0c37c7a0cfa7ccdc06756aa9610e3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscFem/CMakeLists.txt" : {
      "ObjectId" : "adb2ae1e2dc075763e2e79f63e86a81599ce3252",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/SofaMiscFem/SofaMiscFem_test/CMakeLists.txt" : {
      "ObjectId" : "74f9e9068b826864b90b731defbda7f5a48f612f",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit test TODO (htalbot): improve the parameters and initialization\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Test of regression for hyperelasticity (MooneyRivlin)\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "modules/SofaMiscForceField/CMakeLists.txt" : {
      "ObjectId" : "4d30fc52e98d881c087525b6f207d8aa7739fe0d",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscForceField/SofaMiscForceField_test/CMakeLists.txt" : {
      "ObjectId" : "e3e22f206d909f613b16e785e8dc941d5688281c",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscMapping/CMakeLists.txt" : {
      "ObjectId" : "d3e319bb038de657a118b689a2469269e358d382",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscMapping/SofaMiscMapping_test/CMakeLists.txt" : {
      "ObjectId" : "edae8d52c170f9574ba6764346e35d2d9861cbde",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscSolver/CMakeLists.txt" : {
      "ObjectId" : "10c32b051d735641d1a6188eeab14cc35910ed61",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscSolver/SofaMiscSolver_test/CMakeLists.txt" : {
      "ObjectId" : "ff366ded5e5553b283dbfd585465446226b8ba34",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscTopology/CMakeLists.txt" : {
      "ObjectId" : "09194073ead4c899d290732ba3a491e5bf45daa3",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaMiscTopology/SofaMiscTopology_test/CMakeLists.txt" : {
      "ObjectId" : "c96da19b6febfe04571ce3ff16f1d5d63ca1ed4a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaNonUniformFem/CMakeLists.txt" : {
      "ObjectId" : "c65c9231397c2cadc3ba7e36eac9618efc000086",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NonUniformHexahedronFEMForceFieldDensity.h\n\n# NonUniformHexahedronFEMForceFieldDensity.inl\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# NonUniformHexahedronFEMForceFieldDensity.cpp\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "modules/SofaOpenglVisual/CMakeLists.txt" : {
      "ObjectId" : "c53326349064094d14b45b48359cc14c5db1ee14",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaOpenglVisual/SofaOpenglVisual_test/CMakeLists.txt" : {
      "ObjectId" : "99877c1cd25537546b089e89e0da2676d8cde88a",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## MAC-OS crash when we are testing opengl feature.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/SofaPreconditioner/CMakeLists.txt" : {
      "ObjectId" : "50cf8c940e1775a7a435a78571feaa041f718a34",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SofaImplicitOdeSolver SofaSimpleFem\n",
        "Line" : 5,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# SofaGeneralLinearSolver\n",
        "Line" : 6,
        "CharPositionInLine" : 35
      },
      "3" : {
        "Text" : "# Config\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Sources\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "modules/SofaSparseSolver/CMakeLists.txt" : {
      "ObjectId" : "42a5cc1625a5640faeb2094e635bf7c32147c5e0",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SofaGeneralLinearSolver\n",
        "Line" : 5,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# SofaImplicitOdeSolver SofaSimpleFem\n",
        "Line" : 6,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# SofaGeneralLinearSolver\n",
        "Line" : 7,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "# Config\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sources\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Metis solvers\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CSparse solvers\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "modules/SofaTopologyMapping/CMakeLists.txt" : {
      "ObjectId" : "18b877f3edebf0b1e304638e09935ee67c582731",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/SofaUserInteraction/CMakeLists.txt" : {
      "ObjectId" : "1e32619e01315b027bb8ff7286ed467bb7105599",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AddFramePerformer.h\n\n# AddFramePerformer.inl\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# AddFramePerformer.cpp\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "modules/SofaValidation/CMakeLists.txt" : {
      "ObjectId" : "4f9ef814c60ff68b41725f11ab78b2a84b613b08",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Add test project\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/SofaValidation/SofaValidation_test/CMakeLists.txt" : {
      "ObjectId" : "1f256b268e9e17dccaa56ab99c93942c74bab990",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/tests/CMakeLists.txt" : {
      "ObjectId" : "7557c76facc7115e14cb5bfc073e63ea2e1fc8f5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(${SOFA_EXT_MODULES_SOURCE_DIR}/SofaGeneralDeformable/SofaGeneralDeformable_test tests/SofaGeneralDeformable)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(${SOFA_EXT_MODULES_SOURCE_DIR}/SofaGeneralLinearSolver/SofaGeneralLinearSolver_test tests/SofaGeneralLinearSolver)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_subdirectory(${SOFA_EXT_MODULES_SOURCE_DIR}/SofaGeneralMeshCollision/SofaGeneralMeshCollision_test tests/SofaGeneralMeshCollision)\n\n# add_subdirectory(${SOFA_EXT_MODULES_SOURCE_DIR}/SofaGeneralRigid/SofaGeneralRigid_test tests/SofaGeneralRigid)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "package.cmake" : {
      "ObjectId" : "0ad314db503608181f361bc29368e92dfda6cd68",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################\n\n# Wrapper macro to set boolean value to a variable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "######################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set all plugins/modules OFF\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set some plugins/modules ON\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Copy resources files (etc/, share/, examples/) when installing \n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install GTest even if SOFA_BUILD_TESTS=OFF\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tools/SofaGTestMain/CMakeLists.txt" : {
      "ObjectId" : "9998cb7e95a7f07cd6d082c24269f7caa0449dd5",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Version\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Install rules for the library; CMake package configurations files\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/stylechecker/CMakeLists.txt" : {
      "ObjectId" : "34a9beef663d001f8ca1683d4a7e03f9d163d0b0",
      "LastModified" : "2019-04-17T13:57:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable warnings for Stylecheck\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Suppress ''destructor'' : destructor never returns, potential memory leak\n",
        "Line" : 36,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Put project in solution folder\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Disable RTTI to be compatible with LLVM/Clang libraries.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Clang dependencies.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# LLVM dependencies.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#LLVMSupport\n\n#LLVMTransformUtils\n\n#LLVMMC # Object, Support\n\n#LLVMMCParser # MC, Support\n\n#LLVMObject # Support\n\n#LLVMCore # Support\n\n#LLVMBitReader\n\n#LLVMScalarOpts\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Platform dependencies.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    }
  },
  "FileTypes" : {
    "CMAKE" : 385,
    "QMAKE" : 7,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 11333
}