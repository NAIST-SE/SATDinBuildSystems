{
  "Repository" : "18303319",
  "Revision" : "HEAD",
  "ObjectId" : "f67b34f7474704f3109620d5414a09c27c59b617",
  "CommitTime" : "2018-08-13T20:14:30Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f6e43de47cd7727ea2845a1c0e512a28db67979c",
      "LastModified" : "2018-07-17T00:41:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add to path in order to pick up the FindXXX.cmake files included in this project\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default build shared libraries but allow the user to change if desired\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Installation section\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/ExternalProject_star-vertex.cmake" : {
      "ObjectId" : "90578f16b1467d0f68a380496254df38f9257873",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Should be a portable command but gives a warning\n\n# warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#INSTALL_COMMAND $(MAKE) install\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add prefix and suffix to each library\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/ExternalProject_trackml.cmake" : {
      "ObjectId" : "3b5c09e26bc9d75db296b7b5cf4baba94e5841ee",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add prefix and suffix to each library\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ExternalProject_travex.cmake" : {
      "ObjectId" : "511f1be53725beb38209fdf4e94f64255a38e050",
      "LastModified" : "2018-07-17T00:41:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add prefix and suffix to each library\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindBoost.cmake" : {
      "ObjectId" : "f855599bff3d79e68a41a5cab94a8f1c3aabd402",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindBoost\n\n# ---------\n\n#\n\n# Find Boost include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n\n#     [REQUIRED]             # Fail with error if Boost is not found\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\n\n#\n\n# This module finds headers and requested component libraries OR a CMake\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\n\n# case results are reported in variables::\n\n#\n\n#   Boost_FOUND            - True if headers and requested libraries were found\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n\n#                            target_link_libraries debug/optimized keywords)\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n\n#                          - Pass to add_definitions() to have diagnostic\n\n#                            information about Boost's automatic linking\n\n#                            displayed during compilation\n\n#\n\n# This module reads hints about search locations from variables::\n\n#\n\n#   BOOST_ROOT             - Preferred installation prefix\n\n#    (or BOOSTROOT)\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n\n#                            specified by these hint variables. Default is OFF.\n\n#   Boost_ADDITIONAL_VERSIONS\n\n#                          - List of Boost versions not known to this module\n\n#                            (Boost install locations may contain the version)\n\n#\n\n# and saves search results persistently in CMake cache entries::\n\n#\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\n\n#   Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\n\n#   Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   Boost::boost                  - Target for header-only dependencies\n\n#                                   (Boost include directory)\n\n#   Boost::<C>                    - Target for specific component dependency\n\n#                                   (shared or static library); <C> is lower-\n\n#                                   case\n\n#   Boost::diagnostic_definitions - interface target to enable diagnostic\n\n#                                   information about Boost's automatic linking\n\n#                                   during compilation (adds BOOST_LIB_DIAGNOSTIC)\n\n#   Boost::disable_autolinking    - interface target to disable automatic\n\n#                                   linking with MSVC (adds BOOST_ALL_NO_LIB)\n\n#   Boost::dynamic_linking        - interface target to enable dynamic linking\n\n#                                   linking with MSVC (adds BOOST_ALL_DYN_LINK)\n\n#\n\n# Implicit dependencies such as Boost::filesystem requiring\n\n# Boost::system will be automatically detected and satisfied, even\n\n# if system is not specified when using find_package and if\n\n# Boost::system is not added to target_link_libraries.  If using\n\n# Boost::thread, then Thread::Thread will also be added automatically.\n\n#\n\n# It is important to note that the imported targets behave differently\n\n# than variables created by this module: multiple calls to\n\n# find_package(Boost) in the same directory or sub-directories with\n\n# different options (e.g. static or shared) will not override the\n\n# values of the targets created by the first call.\n\n#\n\n# Users may set these hints or results as cache entries.  Projects\n\n# should not read these entries directly but instead use the above\n\n# result variables.  Note that some hint names start in upper-case\n\n# \"BOOST\".  One may specify these as environment variables if they are\n\n# not specified as CMake variables or cache entries.\n\n#\n\n# This module first searches for the Boost header files using the above\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\n\n# and the library name configuration settings below.  It saves the\n\n# library directories in Boost_LIBRARY_DIR_DEBUG and\n\n# Boost_LIBRARY_DIR_RELEASE and individual library\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\n\n# When one changes settings used by previous searches in the same build\n\n# tree (excluding environment variables) this module discards previous\n\n# search results affected by the changes and searches again.\n\n#\n\n# Boost libraries come in many variants encoded in their file name.\n\n# Users or projects may tell this module which variant to find by\n\n# setting variables::\n\n#\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n\n#                              libraries ('mt' tag).  Default is ON.\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n\n#                              libraries.  Default is OFF.\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n\n#                              libraries linked statically to the C++ runtime\n\n#                              ('s' tag).  Default is platform dependent.\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n\n#                              libraries linked to the MS debug C++ runtime\n\n#                              ('g' tag).  Default is ON.\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n\n#                              debug Python build ('y' tag). Default is OFF.\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n\n#                              STLPort ('p' tag).  Default is OFF.\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                            - Set to ON to use libraries compiled with\n\n#                              STLPort deprecated \"native iostreams\"\n\n#                              ('n' tag).  Default is OFF.\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\n\n#                              for the C++ compiler in use.\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\n\n#                              such as \"pthread\" or \"win32\".  Names with\n\n#                              and without this suffix will both be tried.\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\n\n#                              e.g. if set to \"myboost\", will search for\n\n#                              myboost_thread instead of boost_thread.\n\n#\n\n# Other variables one may set to control this module are::\n\n#\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n\n#                              Please enable this before filing any bug report.\n\n#   Boost_DETAILED_FAILURE_MSG\n\n#                            - Set to ON to add detailed information to the\n\n#                              failure message even when the REQUIRED option\n\n#                              is not given to the find_package call.\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n\n#                              libraries to assist with packaging.  For example,\n\n#                              the \"system\" component library may be resolved to\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\n\n#                              affect linking and should not be enabled unless\n\n#                              the user needs this information.\n\n#   Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n\n#                              Boost_LIBRARY_DIR_DEBUG.\n\n#\n\n# On Visual Studio and Borland compilers Boost headers request automatic\n\n# linking to corresponding libraries.  This requires matching libraries\n\n# to be linked explicitly or available in the link library search path.\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\n\n# dynamic linking.  Boost automatic linking typically requests static\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\n\n#\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#\n\n# to ask Boost to report information about automatic linking requests.\n\n#\n\n# Example to find Boost headers only::\n\n#\n\n#   find_package(Boost 1.36.0)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n# Example to find Boost libraries and use imported targets::\n\n#\n\n#   find_package(Boost 1.56 REQUIRED COMPONENTS\n\n#                date_time filesystem iostreams)\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo Boost::date_time Boost::filesystem\n\n#                             Boost::iostreams)\n\n#\n\n# Example to find Boost headers and some *static* libraries::\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON) # only find static libs\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n# Boost CMake\n\n# ^^^^^^^^^^^\n\n#\n\n# If Boost was built using the boost-cmake project it provides a package\n\n# configuration file for use with find_package's Config mode.  This\n\n# module looks for the package configuration file called\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\n\n# and this module returns with no further action.  See documentation of\n\n# the Boost CMake package configuration for details on what it provides.\n\n#\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2012 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2012 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is available, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 280,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 285,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 289,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Make variables changeable to the advanced user\n",
        "Line" : 318,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Detect changes in used variables.\n\n# Compares the current variable value with the last one.\n\n# In short form:\n\n# v != v_LAST                      -> CHANGED = 1\n\n# v is defined, v_LAST not         -> CHANGED = 1\n\n# v is not defined, but v_LAST is  -> CHANGED = 1\n\n# otherwise                        -> CHANGED = 0\n\n# CHANGED is returned in variable named ${changed_var}\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Find the given library (var).\n\n# Use 'build_type' to support different lib paths for RELEASE or DEBUG builds\n\n#\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 370,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is known then search only there.\n",
        "Line" : 374,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\n\n# Returns the guess by setting the variable pointed to by _ret\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Good luck!\n",
        "Line" : 459,
        "CharPositionInLine" : 18
      },
      "26" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 460,
        "CharPositionInLine" : 32
      },
      "27" : {
        "Text" : "# Good luck!\n",
        "Line" : 461,
        "CharPositionInLine" : 18
      },
      "28" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 462,
        "CharPositionInLine" : 32
      },
      "29" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 471,
        "CharPositionInLine" : 36
      },
      "30" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 479,
        "CharPositionInLine" : 36
      },
      "31" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 482,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 486,
        "CharPositionInLine" : 14
      },
      "33" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 490,
        "CharPositionInLine" : 14
      },
      "34" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 495,
        "CharPositionInLine" : 12
      },
      "35" : {
        "Text" : "# TODO at least Boost_DEBUG here?\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#\n\n# Get component dependencies.  Requires the dependencies to have been\n\n# defined for the Boost release version.\n\n#\n\n# component - the component to check\n\n# _ret - list of library dependencies\n\n#\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Note: to add a new Boost release, run\n\n#\n\n#   % cmake -DBOOST_DIR=/path/to/boost/source -P Utilities/Scripts/BoostScanDeps.cmake\n\n#\n\n# The output may be added in a new block below.  If it's the same as\n\n# the previous release, simply update the version range of the block\n\n# for the previous release.  Also check if any new components have\n\n# been added, and add any new components to\n\n# _Boost_COMPONENT_HEADERS.\n\n#\n\n# This information was originally generated by running\n\n# BoostScanDeps.cmake against every boost release to date supported\n\n# by FindBoost:\n\n#\n\n#   % for version in /path/to/boost/sources/*\n\n#     do\n\n#       cmake -DBOOST_DIR=$version -P Utilities/Scripts/BoostScanDeps.cmake\n\n#     done\n\n#\n\n# The output was then updated by search and replace with these regexes:\n\n#\n\n# - Strip message(STATUS) prefix dashes\n\n#   s;^-- ;;\n\n# - Indent\n\n#   s;^set(;    set(;;\n\n# - Add conditionals\n\n#   s;Scanning /path/to/boost/sources/boost_\\(.*\\)_\\(.*\\)_\\(.*);  elseif(NOT Boost_VERSION VERSION_LESS \\10\\20\\3 AND Boost_VERSION VERSION_LESS xxxx);\n\n#\n\n# This results in the logic seen below, but will require the xxxx\n\n# replacing with the following Boost release version (or the next\n\n# minor version to be released, e.g. 1.59 was the latest at the time\n\n# of writing, making 1.60 the next, so 106000 is the needed version\n\n# number).  Identical consecutive releases were then merged together\n\n# by updating the end range of the first block and removing the\n\n# following redundant blocks.\n\n#\n\n# Running the script against all historical releases should be\n\n# required only if the BoostScanDeps.cmake script logic is changed.\n\n# The addition of a new release should only require it to be run\n\n# against the new release.\n",
        "Line" : 519,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# message(STATUS \"Dependencies for Boost::${component}: ${_boost_DEPS_STRING}\")\n",
        "Line" : 755,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#\n\n# Get component headers.  This is the primary header (or headers) for\n\n# a given component, and is used to check that the headers are present\n\n# as well as the library itself as an extra sanity check of the build\n\n# environment.\n\n#\n\n# component - the component to check\n\n# _hdrs\n\n#\n",
        "Line" : 758,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Note: new boost components will require adding here.  The header\n\n# must be present in all versions of Boost providing a library.\n",
        "Line" : 768,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# message(STATUS \"Headers for Boost::${component}: ${_boost_HDRS_STRING}\")\n",
        "Line" : 816,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#\n\n# Determine if any missing dependencies require adding to the component list.\n\n#\n\n# Sets _Boost_${COMPONENT}_DEPENDENCIES for each required component,\n\n# plus _Boost_IMPORTED_TARGETS (TRUE if imported targets should be\n\n# defined; FALSE if dependency information is unavailable).\n\n#\n\n# componentvar - the component list variable name\n\n# extravar - the indirect dependency list variable name\n\n#\n\n#\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# _boost_unprocessed_components - list of components requiring processing\n\n# _boost_processed_components - components already processed (or currently being processed)\n\n# _boost_new_components - new components discovered for future processing\n\n#\n",
        "Line" : 831,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 864,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 869,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# If the user sets Boost_LIBRARY_DIR, use it as the default for both\n\n# configurations.\n",
        "Line" : 874,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 890,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n\n#\n\n# Note: When adding a new Boost release, also update the dependency\n\n# information in _Boost_COMPONENT_DEPENDENCIES and\n\n# _Boost_COMPONENT_HEADERS.  See the instructions at the top of\n\n# _Boost_COMPONENT_DEPENDENCIES.\n",
        "Line" : 902,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 923,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 926,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 929,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 935,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 940,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 946,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Supply Boost_LIB_DIAGNOSTIC_DEFINITIONS as a convenience target. It\n\n# will only contain any interface definitions on WIN32, but is created\n\n# on all platforms to keep end user code free from platform dependent\n\n# code.  Also provide convenience targets to disable autolinking and\n\n# enable dynamic linking.\n",
        "Line" : 961,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 972,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 981,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 985,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\n",
        "Line" : 1002,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\n",
        "Line" : 1015,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1037,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1043,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n\n# Build a list of path suffixes for each version.\n",
        "Line" : 1073,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 1078,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 1083,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1110,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1118,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\n\n# It will be updated below for component libraries.\n",
        "Line" : 1122,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n",
        "Line" : 1130,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Set Boost_FOUND based on requested version.\n",
        "Line" : 1156,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 1169,
        "CharPositionInLine" : 6
      },
      "73" : {
        "Text" : "# Caller will accept any Boost version.\n",
        "Line" : 1182,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Prefix initialization\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1191,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1205,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 1222,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 1230,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\n",
        "Line" : 1250,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 1255,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 1262,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 1270,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 1274,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 1276,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n",
        "Line" : 1282,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1295,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Clear Boost_LIBRARY_DIR_${c} if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1304,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is set, prefer its value.\n",
        "Line" : 1310,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 1350,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 1360,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 1372,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 1386,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Additional components may be required via component dependencies.\n\n# Add any missing components to the list.\n",
        "Line" : 1394,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# If thread is required, get the thread libs as a dependency\n",
        "Line" : 1398,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\n",
        "Line" : 1405,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Compute component-specific hints.\n",
        "Line" : 1424,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Consolidate and report component-specific hints.\n",
        "Line" : 1437,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 1447,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1451,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 1463,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# if Boost_LIBRARY_DIR_RELEASE is not defined,\n\n# but Boost_LIBRARY_DIR_DEBUG is, look there first for RELEASE libs\n",
        "Line" : 1488,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1494,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 1504,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# if Boost_LIBRARY_DIR_DEBUG is not defined,\n\n# but Boost_LIBRARY_DIR_RELEASE is, look there first for DEBUG libs\n",
        "Line" : 1530,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1536,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1555,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1560,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\n\n# Update it for the requested component libraries.\n",
        "Line" : 1576,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# The headers were found.  Check for requested component libs.\n",
        "Line" : 1579,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Optional indirect dependencies are not counted as missing.\n",
        "Line" : 1591,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1601,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1627,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\n",
        "Line" : 1630,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1640,
        "CharPositionInLine" : 6
      },
      "114" : {
        "Text" : "# Boost headers were not found so no components were found.\n",
        "Line" : 1660,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Add imported targets\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1667,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# For header-only libraries\n",
        "Line" : 1672,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Even if Boost_USE_STATIC_LIBS is OFF, we might have static\n\n# libraries as a result.\n",
        "Line" : 1688,
        "CharPositionInLine" : 10
      },
      "118" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Notification to end user about what was found\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1731,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in its requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1757,
        "CharPositionInLine" : 6
      },
      "120" : {
        "Text" : "# Configure display of cache entries in GUI.\n",
        "Line" : 1770,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "# Record last used values of input variables so we can\n\n# detect on the next run if the user changed them.\n",
        "Line" : 1785,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\n\n# the last flush.\n",
        "Line" : 1798,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 123
    },
    "cmake/FindLog4Cxx.cmake" : {
      "ObjectId" : "b46ddaaa79a98ba5b6f78de3c3a4bf7c921f70da",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the liblog4cxx libraries\n\n# Once done this will define\n\n#\n\n# Log4cxx_FOUND - system has liblog4cxx\n\n# LOG4CXX_INCLUDE_DIR - the liblog4cxx include directory\n\n# LOG4CXX_LIBRARIES - liblog4cxx library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#remove last /log4cxx string\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindMySQL.cmake" : {
      "ObjectId" : "38dffb4b6158847ac59b573feafc60d01a5888a5",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mysqlclient\n\n# Find the native MySQL includes and library\n\n#\n\n#  MYSQL_INCLUDE_DIRS - where to find mysql.h, etc.\n\n#  MYSQL_LIBRARIES   - mysqlclient library.\n\n#  MYSQL_FOUND       - True if mysqlclient is found.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MYSQL_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindROOT.cmake" : {
      "ObjectId" : "0ab2a1f8a8ccbc13dd476b4dc56829167bd0402f",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds ROOT instalation\n\n# This module sets up ROOT information\n\n# It defines:\n\n# ROOT_FOUND             If the ROOT is found\n\n# ROOT_INCLUDE_DIR       PATH to the include directory\n\n# ROOT_INCLUDE_DIRS      PATH to the include directories (not cached)\n\n# ROOT_LIBRARIES         Most common libraries\n\n# ROOT_<name>_LIBRARY    Full path to the library <name>\n\n# ROOT_LIBRARY_DIR       PATH to the library directory\n\n# ROOT_ETC_DIR           PATH to the etc directory\n\n# ROOT_DEFINITIONS       Compiler definitions\n\n# ROOT_CXX_FLAGS         Compiler flags to used by client packages\n\n# ROOT_C_FLAGS           Compiler flags to used by client packages\n\n# ROOT_EXE_LINKER_FLAGS  Linker flags to used by client packages\n\n#\n\n# Updated by K. Smith (ksmith37@nd.edu) to properly handle\n\n#  dependencies in ROOT_GENERATE_DICTIONARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function ROOT_GENERATE_DICTIONARY( dictionary\n\n#                                    header1 header2 ...\n\n#                                    LINKDEF linkdef1 ...\n\n#                                    OPTIONS opt1...)\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Is this header a globbing expression?\n",
        "Line" : 119,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "# skip LinkDefs from globbing result\n",
        "Line" : 122,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "#---Get LinkDef.h file------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#---call rootcling------------------------------------------\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function REFLEX_GENERATE_DICTIONARY(dictionary\n\n#                                     header1 header2 ...\n\n#                                     SELECTION selectionfile ...\n\n#                                     OPTIONS opt1...)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#---Get Selection file------------------------------------\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#---Get preprocessor definitions--------------------------\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#---Nanes and others---------------------------------------\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#set(gccxmlopts \"--gccxmlopt=\\'--gccxml-cxxflags -m64 \\'\")\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#set(rootmapname ${dictionary}Dict.rootmap)\n\n#set(rootmapopts --rootmap=${rootmapname} --rootmap-lib=${libprefix}${dictionary}Dict)\n\n#---Check GCCXML and get path-----------------------------\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#---Actual command----------------------------------------\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cmake/FindSTAR.cmake" : {
      "ObjectId" : "368d1f68e9a940f3e198f56857964d0589eb4493",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find star soft include directories and libraries\n\n#\n\n#  STAR_FOUND\n\n#  STAR_INCLUDE_DIRS\n\n#  STAR_LIBRARIES\n\n#  STAR_LIBRARY_DIRS\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make use of the $STAR_HOST_SYS evironment variable. If it is set use it as the\n\n# typical STAR installation prefix\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These paths should point to where the STAR soft is installed\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# The following is just a workaround for the STAR code design\n\n# disrespecting the file hierarchy in the installed directory\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Set STAR_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/StarCommon.cmake" : {
      "ObjectId" : "325be22fbce6bd8f261178b7b21d726a1a230043",
      "LastModified" : "2018-07-17T00:16:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Load this cmake file only once\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default build shared libraries but allow the user to change if desired\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Special treatment of linker options for MacOS X to get a linux-like behavior for gcc\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define common STAR_ and CMAKE_ variables used to build the STAR code\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -D_UCMLOGGER_ required by StStarLogger\n\n# -DNEW_DAQ_READER required by StTofHitMaker\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove dependency of \"install\" target on \"all\" target. This allows to\n\n# build and install individual libraries\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make use of the $STAR_HOST_SYS evironment variable. If it is set use it as the\n\n# typical STAR installation prefix\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# library built from StarVMC/Geometry\n",
        "Line" : 55,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : "# library built from StarVMC/Geometry\n",
        "Line" : 60,
        "CharPositionInLine" : 27
      },
      "9" : {
        "Text" : "# requires subdir processing\n\n# blacklisted in cons\n\n# missing from lib/\n\n# requires qt4/include/QtGui\n\n# fortran error\n\n# blacklisted in cons\n",
        "Line" : 65,
        "CharPositionInLine" : 27
      },
      "10" : {
        "Text" : "# needs FindFastJet.cmake\n\n# blacklisted due to error in fortran code\n\n# blacklisted in cons\n\n# missing from lib/\n",
        "Line" : 72,
        "CharPositionInLine" : 27
      },
      "11" : {
        "Text" : "#\n\n# Generates a list of header files from which a ROOT dictionary can be created for\n\n# a given subdirectory `star_lib_dir`. The list is put into the `headers_for_dict`\n\n# variable that is returned to the parent scope. Only *.h and *.hh files\n\n# are selected while any LinkDef files are ignored.\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Get all header files in 'star_lib_dir'\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Create an empty list\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# star_lib_dir_headers should containd absolute paths to globed headers\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Skip LinkDef files from globbing result\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#\n\n# Generates ${star_lib_dir}_LinkDef.h and ${star_lib_dir}_DictInc.h header files\n\n# used in ROOT dictionary generation by rootcint/rootcling. Only header files\n\n# passed in LINKDEF_HEADERS argument are used. The user can optionally pass an\n\n# existing LinkDef file in LINKDEF argument to be incorporated in the generated\n\n# ${star_lib_dir}_LinkDef.h\n\n#\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set default name for LinkDef file\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Pass both files to get_likdef.sh as -o arguments\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Generate the above files to be used in dictionary generation by ROOT\n",
        "Line" : 136,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "#\n\n# Generates a ROOT dictionary for `star_lib_dir` in ${STAR_SRC}.\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Search for default LinkDef if not specified\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Get the first LinkDef from the list\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# If the user provided header files use them in addition to automatically\n\n# collected ones.\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# This is a hack for the call to this function from STAR_ADD_LIBRARY_GEOMETRY() where the\n\n# headers are generated at runtime and cannot be globbed. So, we can specify them by hand.\n",
        "Line" : 167,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Generate a basic LinkDef file and, if available, merge with the one\n\n# provided by the user\n",
        "Line" : 173,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Prepare include directories to be used during ROOT dictionary generation.\n\n# These directories are tied to the `star_lib_name` target via the\n\n# INCLUDE_DIRECTORIES property.\n",
        "Line" : 177,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Generate ROOT dictionary using the *_LinkDef.h and *_DictInc.h files\n",
        "Line" : 183,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "#\n\n# Adds a target to build a library from all source files (*.cxx, *.cc, and *.cpp)\n\n# recursively found in the specified subdirectory `star_lib_dir`. It is possible\n\n# to EXCLUDE some files matching an optional pattern.\n\n#\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Get first optional unnamed parameter\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Deal with sources\n",
        "Line" : 211,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# XXX The hardcoded .cxx extension below should be defined by cmake?\n",
        "Line" : 238,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Output the library to the respecitve subdirectory in the binary directory\n",
        "Line" : 241,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Generate the _dict.cxx file for the library\n",
        "Line" : 250,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# Starting cmake 3.6 one can simply use list( FILTER ... )\n\n#list( FILTER sources EXCLUDE REGEX \"${ARG_EXCLUDE}\" )\n",
        "Line" : 268,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Return list of regex'es to exclude from globbed paths for target `star_lib_name`\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Builds a list of subdirectories with complete path found in the\n\n# 'directories'\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Include the parent directory in the list\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#\n\n# From the path provided by the user (`star_lib_dir`) extracts the library\n\n# target name (`lib_name`), an absolute path to the library source code\n\n# (`path_abs`), and the corresponding output path where the generated or built\n\n# code can be placed (`path_out`). The input path `star_lib_dir` can be either\n\n# absolute or relative to ${STAR_SRC}\n\n#\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# First check that the path exists\n",
        "Line" : 368,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# special cases\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n# Flattens the hierarchy of header files found in select subdirectories in\n\n# `${STAR_SRC}` by copying them to `destination_dir` at the same level\n\n#\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Collect files from some subdirectiries\n",
        "Line" : 426,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "#\n\n# Creates ROOT TGeo geometries from xml files\n\n#\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Change the name of the library/target and output directory if an\n\n# optional unnamed parameter is provided by the user\n",
        "Line" : 453,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# Create a string by replacing ; with gcc compiler options\n",
        "Line" : 489,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# Special treatment required for the aggregate geometry file\n",
        "Line" : 492,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# Generate the _dict.cxx file for the library\n",
        "Line" : 503,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# Get relative path for the generated headers to be used at installation\n\n# stage\n",
        "Line" : 508,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "#\n\n# Creates a library from fortran sources without doing any preprocessing\n\n#\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Change the name of the library/target and output directory if an\n\n# optional unnamed parameter is provided by the user\n",
        "Line" : 525,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# Builds a ${star_lib_name}_Tables library from ${star_lib_dir}/idl/*.idl files\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Build customized library StGenericVertexMakerNoSti based on StGenericVertexMaker\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Output the library to the respecitve subdirectory in the binary directory\n",
        "Line" : 597,
        "CharPositionInLine" : 1
      },
      "54" : {
        "Text" : "# Generate ROOT dictionary using the *_LinkDef.h and *_DictInc.h files\n",
        "Line" : 608,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# Generate source from idl files\n",
        "Line" : 623,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# For the file and variable names we closely follow the convention in mgr/Conscript-standard\n",
        "Line" : 656,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# For the file and variable names we closely follow the convention in mgr/Conscript-standard\n",
        "Line" : 700,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 58
    }
  },
  "FileTypes" : {
    "CMAKE" : 10
  },
  "ElapsedTime" : 759
}