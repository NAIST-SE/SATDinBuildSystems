{
  "Repository" : "65997354",
  "Revision" : "HEAD",
  "ObjectId" : "50a7e7e3b7b0ffe8cf10ff370c54982f109f6a28",
  "CommitTime" : "2019-04-15T12:22:25Z",
  "Files" : {
    "bindings/qt/megachat.pri" : {
      "ObjectId" : "1e32ee169c9e06e9a7daebe9a59ad74c59879f99",
      "LastModified" : "2019-01-11T14:31:00Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# include the configuration for MEGA SDK\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/QtCreator/MEGAChatQt/MEGAChatQt.pro" : {
      "ObjectId" : "070d6ffd0c1d52d0f49c59b703c3853ccafafd0d",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------\n\n#\n\n# Project created by QtCreator 2018-02-05T17:49:14\n\n#\n\n#-------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The following define makes your compiler emit warnings if you use\n\n# any feature of Qt which has been marked as deprecated (the exact warnings\n\n# depend on your compiler). Please consult the documentation of the\n\n# deprecated API in order to know how to port your code away from it.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# You can also make your code fail to compile if you use deprecated APIs.\n\n# In order to do so, uncomment the following line.\n\n# You can also select to disable deprecated APIs only up to a certain version of Qt.\n\n#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/QtCreator/MEGAchat.pro" : {
      "ObjectId" : "bf13b8a441a3eda7f2aa4b3bf45675f6d8ccf317",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "contrib/QtCreator/MEGAchatTests/MEGAchatTests.pro" : {
      "ObjectId" : "a4532a85d22c8b6aae5d4ace989ee7fe430827d8",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# there are symbols duplicated in libwebrtc.a. Discarded for the moment\n",
        "Line" : 12,
        "CharPositionInLine" : 26
      },
      "CommentCount" : 1
    },
    "contrib/QtCreator/MEGAclc/MEGAclc.pro" : {
      "ObjectId" : "491fd01c88dc37b657d17896975677dc0417549d",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "contrib/cmake/CMakeLists.txt" : {
      "ObjectId" : "6fbfdf2fa13b379969b20dd3c8996d57bfda26cc",
      "LastModified" : "2019-03-27T20:31:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# At this stage, this file is intended for building MEGAChat library directly on windows with Visual Studio (just for chat so far), and/or exploring the chat API with example app MEGAclc\n\n# Build chat and the SDK with CURL and OPENSSL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create these cache variables first, these must be on for MEGAchat.  The default in the SDK is off, but it will see they are already on in the CMakeCache.txt\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# to use libwebrtc on windows with checked iterators turned off in the debug VC++ runtime, modify your stl headers first to disable that, and then build it\n",
        "Line" : 22,
        "CharPositionInLine" : 45
      },
      "3" : {
        "Text" : "#specify where 3rd party libraries are available\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#todo: figure out if we can have debug/release at the same path\n",
        "Line" : 33,
        "CharPositionInLine" : 66
      },
      "5" : {
        "Text" : "# this line points to the MEGA SDK repo that you want to build MEGAChat against\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# additional directories used in this project, after the main one incluced by the MEGA SDK\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "examples/qtmegachatapi/CMakeLists.txt" : {
      "ObjectId" : "bc9816ac14bae709ce632872a42c0c08c5def185",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We need cmake 3.0 or later because of the autouic, autorcc reatures for Qt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#need to include also headers with Q_OBJECTs so that automoc knows to parse them\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#==\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# defined by Karere\n",
        "Line" : 34,
        "CharPositionInLine" : 66
      },
      "5" : {
        "Text" : "#enable ASAN\n",
        "Line" : 35,
        "CharPositionInLine" : 75
      },
      "6" : {
        "Text" : "#    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# AND (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Release\"))\n",
        "Line" : 71,
        "CharPositionInLine" : 11
      },
      "8" : {
        "Text" : "#    INSTALL(CODE\n\n#    \"\n\n#        include(BundleUtilities)\n\n#        set(BU_CHMOD_BUNDLE_ITEMS ON)\n\n#        set(plugins\n\n#            ${CMAKE_INSTALL_PREFIX}/QtPlugins/platforms/libqxcb.so\n\n#            ${CMAKE_INSTALL_PREFIX}/QtPlugins/imageformats/libqsvg.so\n\n#        )\n\n#        fixup_bundle(\\\"\\${CMAKE_INSTALL_PREFIX}/rtctestapp\\\" \\\"\\${plugins}\\\" \\\"\\\")\n\n#    \"\n\n#    COMPONENT Runtime)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "495f7ee9bdd7410a60b038c7a11b9d4300a0b287",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#force Mega headers to enable cryptopp stuff\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#tell mpenc to use the karere logger\n",
        "Line" : 26,
        "CharPositionInLine" : 104
      },
      "2" : {
        "Text" : "#===\n\n# The public variables, such as KARERE_INCLIDE_DIRS should not contain relative paths, as they\n\n# can be used outside of this context, and the base directory would be another one.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# all Karere symbols can be used by the application\n\n# FIXME: This causes linker warnings about different visibility settings\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/FindCares.cmake" : {
      "ObjectId" : "1f664d71c0e6bbeca48155a1ec7754102e92cbdd",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBSODIUM_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/FindCryptopp.cmake" : {
      "ObjectId" : "f7b9dab566e15d224e5c90e34a52b288397da326",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find cryptopp\n\n# Find the native CRYPTOPP headers and libraries.\n\n#\n\n#  CRYPTOPP_INCLUDE_DIRS - where to find include files\n\n#  CRYPTOPP_LIBRARIES    - List of libraries when using cryptopp.\n\n#  CRYPTOPP_FOUND        - True if cryptopp found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The library is called 'crypto++' on Linux, on OS/X it is called 'cryptopp'.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CRYPTOPP_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/FindMega.cmake" : {
      "ObjectId" : "25d8740acb34886c0b68b12f66021f6b5e5ff870",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find Mega SDK and its dependencies\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For the libs that don't have FindXXX cmake modules\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#look in the standard paths, can be set on the commandline via -DCMAKE_PREFIX_PATH=... or -DCMAKE_FIND_ROOT=...\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# lib header found in standard paths, possibly in CMAKE_PREFIX_PATH,\n\n# so it should work out of the box as long as we add CMAKE_PREFIX_PATH\n\n# to the include and library dirs that are passed to the compiler.\n\n# No need to set ${varprefix}_INCLUDE_DIRS\n\n# quite possibly, lib files will also be in standard paths,\n\n# so we just put their names without paths\n",
        "Line" : 29,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "#Under MSVC we can't build cryptopp as a dll\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#needed for thumbnail generation, we don't use freeimage on these platforms\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#linux\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#if (ANDROID) #android does not have glob.h in /usr/include\n\n#    list(APPEND MEGASDK_INCLUDES ../third_party/glob) #temporary hack until code in the sdk depending on glob.h is removed from android build\n\n#endif()\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/FindSodium.cmake" : {
      "ObjectId" : "37a33f0ebb9bf21fc659caacd0ada0078650f34e",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBSODIUM_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/FindSqlite3.cmake" : {
      "ObjectId" : "620f7902f976abceebc5737de1bffa29c5eb9f67",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Sqlite3\n\n# ~~~~~~~~~~~~\n\n# Copyright (c) 2007, Martin Dobias <wonder.sk at gmail.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# CMake module to search for Sqlite3 library\n\n#\n\n# If it's found it sets SQLITE3_FOUND to TRUE\n\n# and following variables are set:\n\n#    SQLITE3_INCLUDE_DIR\n\n#    SQLITE3_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIND_PATH and FIND_LIBRARY normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing. \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# try to use framework on mac\n\n# want clean framework path, not unix compatibility path\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#FIND_PATH(SQLITE3_INCLUDE_DIR SQLite3/sqlite3.h)\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# FIND_PATH doesn't add \"Headers\" for a framework\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "src/Findlibsodium.cmake" : {
      "ObjectId" : "1bc8ae5ac567aba91855453f242fe1a8d2f70236",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBSODIUM_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/base/CMakeLists.txt" : {
      "ObjectId" : "11eb3dd20d22096461816229125178367f782235",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    set(SYSLIBS zlib)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need to export getAppDataDir() from the app executable back to the logger lib,\n\n# so that the logger knows where to create the log file.\n\n# If the logger and the app are in the same module, no special processing is needed.\n\n# But if the logger is in another module (i.e. libservices is a shared lib),\n\n# then we need to do it via a weak symbol\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put the application-provided std::string karere::getAppDir() function\n\n# (declared as a weak symbol in loggerChannelConfig.h) in the import table\n\n# of the libservices shared object instead of looking for its definition\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/genDbSchema.cmake" : {
      "ObjectId" : "29697f30d6c5413e8b99ef03d68a316b41fcabb9",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/rtcModule/CMakeLists.txt" : {
      "ObjectId" : "b8a0579477dd10bc5848672d731e51a4305b186c",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-Wno-unused-local-typedefs suppresses a lot of warning form webrtc headers from COMPILE_ASSERT: see https://code.google.com/p/chromium/issues/detail?id=227506\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-fvisibility=hidden\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#enable ASAN\n",
        "Line" : 36,
        "CharPositionInLine" : 75
      },
      "3" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/utils.cmake" : {
      "ObjectId" : "ed34787beadf97f75ee63749ce6c8076c7ac20d7",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake utility functions and macros\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We have 2 versions of variable ${varname} - the local copy, and the parent scope's\n\n# Since the local copy is not updated when we update the parent scope,\n\n# to be able to do a next append, we must have the local copy to be in sync with the\n\n# parent copy. This is why we first append to the local copy and then sync it with\n\n# the parent \n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# macro(topinclude)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# topappend(1 dep_includes ${ARGN})\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# endmacro(topinclude)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# macro(topinclude_nochg)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# topappend(0 dep_includes ${ARGN})\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# endmacro(topinclude_nochg)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# macro (topdefine)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# topappend(0 dep_defined ${ARGN})\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# endmacro(topdefine)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add real iOS detection\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#    listToSpacedString(thisval str_thisval)    \n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We need this to be macro because we query the current source dir\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#    message(\"stripped defines: '${defs}'\")\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#This doesn't work as there is no LINK_DIRECTORIES property on targets\n\n#function(targetExportLinkdirs target)\n\n#    editTargetProp(\"${target}\" DEP_LINKDIRS ADD ${ARGN})\n\n#endfunction(targetExportLinkdirs)\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "tests/sdk_test/CMakeLists.txt" : {
      "ObjectId" : "3f330849cd3eb768fb58b1a5e84c132227f229e0",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "webrtc-build/CMakeLists.txt" : {
      "ObjectId" : "1711a881b7de719907318b0ede33a5a703f3ec31",
      "LastModified" : "2019-01-15T19:24:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#also on windows?\n",
        "Line" : 39,
        "CharPositionInLine" : 24
      },
      "1" : {
        "Text" : "#new defs\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    -D_FORTIFY_SOURCE=2 #conflicts with ASAN, which defines it internally\n\n#===\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#arm\n",
        "Line" : 84,
        "CharPositionInLine" : 24
      },
      "4" : {
        "Text" : "#Override the system openssl\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#arm\n",
        "Line" : 184,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "#this applies only for obj-cxx, but cmake does not have flags specially for obj-c++\n",
        "Line" : 214,
        "CharPositionInLine" : 27
      },
      "7" : {
        "Text" : "#Clear cache entry because it will get duplicated otherwise\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# appendArchStuff(X86)\n",
        "Line" : 313,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#appendArchStuff(ARM)\n",
        "Line" : 317,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#linux really\n",
        "Line" : 319,
        "CharPositionInLine" : 13
      },
      "11" : {
        "Text" : "# Tell ld to not rely on library order to resolve symbols\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "QMAKE" : 5
  },
  "ElapsedTime" : 3541
}