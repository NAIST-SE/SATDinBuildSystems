{
  "Repository" : "8378784",
  "Revision" : "HEAD",
  "ObjectId" : "0091a8c91c9e5559e97593ee7c3788f28de4d5a5",
  "CommitTime" : "2019-04-15T03:48:40Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b9bf69aedfe97c65422421bad9c8ce76d0f6a017",
      "LastModified" : "2019-04-13T12:50:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(COOLPROP_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install_root)\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#######################################\n\n#           BUILD OPTIONS             #\n\n#-------------------------------------#\n\n# These options are available to be   #\n\n# modified in the build process.      #\n\n# packages may want to modify these   #\n\n# to suit, or just leave as defaults. #\n\n#######################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#option (DARWIN_USE_LIBCPP\n\n#        \"On Darwin systems, compile and link with -std=libc++ instead of the default -std=libstdc++\"\n\n#        ON)\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# see \n\n# https://stackoverflow.com/questions/52509602/cant-compile-c-program-on-a-mac-after-upgrade-to-mojave\n\n# https://support.enthought.com/hc/en-us/articles/204469410-OS-X-GCC-Clang-and-Cython-in-10-9-Mavericks\n\n# https://github.com/pandas-dev/pandas/pull/24274/files\n\n# https://github.com/explosion/thinc/pull/84/files\n\n# https://github.com/jlfaucher/builder/commit/d144d3a695949f90c5e2acff4dfd94fdcf8dcdfa\n\n# https://github.com/CoolProp/CoolProp/issues/1778\n\n# https://gitlab.kitware.com/cmake/cmake/issues/18396\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default is 10.7\n",
        "Line" : 104,
        "CharPositionInLine" : 91
      },
      "5" : {
        "Text" : "#if(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Darwin\")\n\n#  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}${OSX_COMPILE_FLAGS}\")\n\n#  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}${OSX_COMPILE_FLAGS}\")\n\n#endif()\n\n# Alternatively you could use \n\n# set_target_properties(TARGET_NAME PROPERTIES APPEND_STRING PROPERTY COMPILE_FLAGS \"-mmacosx-version-min=10.5\")\n\n# set_target_properties(TARGET_NAME PROPERTIES APPEND_STRING PROPERTY LINK_FLAGS \"-mmacosx-version-min=10.5\")\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#######################################\n\n#         PROJECT INFORMATION         #\n\n#-------------------------------------#\n\n# This CMakeLists.txt file is for the #\n\n# CoolProp thermodynamic library      #\n\n# written by Ian Bell. The following  #\n\n# section contains project and        #\n\n# version information.                #\n\n#######################################\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Project name\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Project version\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#set ( COOLPROP_YEAR \"2010-2016\" )\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add definitions to silence warnings in MSVC2017 related to shared ptr code.\n\n#if (MSVC_VERSION GREATER_EQUAL 1910 AND MSVC_VERSION LESS_EQUAL 1919) # OR MSVC_TOOLSET_VERSION EQUAL 141) # This requuires CMake >= 3.7\n\n#  add_definitions(-D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)\n\n#endif (MSVC_VERSION GREATER_EQUAL 1910 AND MSVC_VERSION LESS_EQUAL 1919)\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#ELSEIF (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n\n#  IF(\"${COOLPROP_VERSION_REVISION}\" STREQUAL \"dev\")\n\n#    SET(CMAKE_BUILD_TYPE Debug)\n\n#  ELSE ()\n\n#    SET(CMAKE_BUILD_TYPE Release)\n\n#  ENDIF()\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# order matters \"/MXd\" before \"/MX\"\n",
        "Line" : 201,
        "CharPositionInLine" : 49
      },
      "13" : {
        "Text" : "#######################################\n\n#         FIND ALL SOURCES            #\n\n#-------------------------------------#\n\n# The project is organised with       #\n\n# split includes and source folders   #\n\n# this makes it easier for developers #\n\n# to quickly find relevant includes.  #\n\n# This section finds all sources,     #\n\n# headers and corresponding dirs.     #\n\n#######################################\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# These backends will be compiled in\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get everything in the src/ directory (always), but not recursive\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# For each enabled backend, grab its files\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## You can exclude this file, in case you want to run your own tests or use Catch\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## This file is only needed for the library, normal builds do not need it.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# should be deprecated\n",
        "Line" : 237,
        "CharPositionInLine" : 78
      },
      "20" : {
        "Text" : "#######################################\n\n#         REQUIRED MODULES            #\n\n#-------------------------------------#\n\n# CoolProp requires some standard OS  #\n\n# features, these include:            #\n\n# DL (CMAKE_DL_LIBS) for REFPROP      #\n\n#######################################\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Is found since it is in the module path.\n",
        "Line" : 268,
        "CharPositionInLine" : 23
      },
      "22" : {
        "Text" : "# Use a macro to avoid a new scope\n",
        "Line" : 269,
        "CharPositionInLine" : 41
      },
      "23" : {
        "Text" : "# add a space\n\n# add a space\n",
        "Line" : 271,
        "CharPositionInLine" : 49
      },
      "24" : {
        "Text" : "# Use a macro to avoid a new scope\n",
        "Line" : 276,
        "CharPositionInLine" : 39
      },
      "25" : {
        "Text" : "# add a space\n\n# add a space\n",
        "Line" : 278,
        "CharPositionInLine" : 47
      },
      "26" : {
        "Text" : "# Use a macro to avoid a new scope\n",
        "Line" : 283,
        "CharPositionInLine" : 38
      },
      "27" : {
        "Text" : "#if(MSVC)\n\n#  add_compiler_flag_release(\"/EHsc\")\n\n#  add_compiler_flag_debug(\"/EHsc\")\n\n#endif()\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#######################################\n\n#                 BITNESS             #\n\n#-------------------------------------#\n\n#        Calculate if 32 or 64        #\n\n#######################################\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#######################################\n\n#         MAKE ARTEFACTS              #\n\n#-------------------------------------#\n\n# In this section we define the       #\n\n# artefacts (exes, libs) that will be #\n\n# made for CoolProp, these include    #\n\n# customisation from earlier options. #\n\n#######################################\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###     FLUIDS, MIXTURES JSON       ###\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "###      Library options            ###\n\n# We already know the bitness from the earlier\n\n# settings. Let us rely on that and only handle\n\n# calling conventions and shared/static issues.\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Rule out cases that do not make sense\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Project name\n",
        "Line" : 417,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Object, static or shared?\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Add postfix for debugging\n",
        "Line" : 428,
        "CharPositionInLine" : 5
      },
      "36" : {
        "Text" : "# Note that the default is not used if ${COOLPROP_MSVC_REL} or ${COOLPROP_MSVC_DBG} is set\n",
        "Line" : 431,
        "CharPositionInLine" : 31
      },
      "37" : {
        "Text" : "# Now all the compiler specific settings for Visual Studio\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Add postfix for debugging\n",
        "Line" : 443,
        "CharPositionInLine" : 5
      },
      "39" : {
        "Text" : "# No lib prefix for the shared library\n",
        "Line" : 446,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# Note that the default is not used if ${COOLPROP_MSVC_REL} or ${COOLPROP_MSVC_DBG} is set\n",
        "Line" : 448,
        "CharPositionInLine" : 31
      },
      "41" : {
        "Text" : "# For Linux\n",
        "Line" : 454,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# For windows systems, bug workaround for Eigen\n",
        "Line" : 465,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# For mac systems, explicitly set the c++ libraries\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Name mangling settings\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "### All options are set, we are building a library ###\n",
        "Line" : 485,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "#\n",
        "Line" : 487,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Add target include directories for easy linking with other applications\n",
        "Line" : 489,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Set the bitness\n",
        "Line" : 493,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# ADD -fPIC flag if needed\n",
        "Line" : 502,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "#\n\n# calling conventions\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "#MESSAGE(STATUS \"Skipping unknown calling convention.\")\n",
        "Line" : 510,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "#\n\n#set_property(SOURCE MyFile.cpp APPEND_STRING PROPERTY COMPILE_FLAGS \" -msse4.1 \")\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "#\n",
        "Line" : 525,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "#\n",
        "Line" : 530,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Set the Base SDK (only change the SDKVER value, if for instance, you are building for iOS 5.0):\n",
        "Line" : 535,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Will resolve to \"Standard (armv6 armv7)\" on Xcode 4.0.2 and to \"Standard (armv7)\" on Xcode 4.2:\n",
        "Line" : 545,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# seamless toggle between device and simulator\n",
        "Line" : 548,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# EES is only compiled for 32bit Windows\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Prepare the sources\n",
        "Line" : 644,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Modify the target and add dependencies\n",
        "Line" : 649,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Creates \"COOLPROP_EES.dlf\"\n",
        "Line" : 653,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# etc for the other available configuration types (MinSizeRel, RelWithDebInfo)\n",
        "Line" : 660,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# copy required files\n",
        "Line" : 662,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# install the generated library and the other files\n",
        "Line" : 671,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Windows package\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Setting some basic build paths\n",
        "Line" : 682,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# Pointers to the sources\n",
        "Line" : 689,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Generator for DLLs\n",
        "Line" : 692,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# Configure variables like version number and build year\n",
        "Line" : 694,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Find the installer generator executable\n",
        "Line" : 696,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# ******************************************************************\n\n# Add the targets that prepare the build directory for the subbuilds\n\n# ******************************************************************\n",
        "Line" : 706,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# Prepare directories\n",
        "Line" : 710,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} ARGS \"-E\" \"remove_directory\" \"${COOLPROP_WINDOWS_PACKAGE_TMP_DIR}/deploy\"\n",
        "Line" : 719,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} ARGS \"-E\" \"remove_directory\" \"${COOLPROP_WINDOWS_PACKAGE_TMP_DIR}/bin\"\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# Delete directories\n",
        "Line" : 728,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# **************************************************************\n\n# Add the target for the shared libraries, 3x 32bit and 1x 64bit\n\n# **************************************************************\n",
        "Line" : 739,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Copy the header file\n",
        "Line" : 744,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# # Build the 32bit DLLs\n\n# add_custom_command(TARGET COOLPROP_WINDOWS_PACKAGE_SHARED_LIBRARIES PRE_BUILD\n\n#   COMMAND ${CMAKE_COMMAND} ARGS \"-G${COOLPROP_WINDOWS_PACKAGE_DLL_GEN}\" \"${CMAKE_CURRENT_SOURCE_DIR}\" \"-DCOOLPROP_SHARED_LIBRARY=ON\"\n\n#   COMMAND ${CMAKE_COMMAND} ARGS \"--build\" \".\" \"--target\" \"CoolProp\" \"--config\" \"Release\"\n\n#   COMMAND ${CMAKE_COMMAND} ARGS \"-E\" \"copy\" \"${COOLPROP_WINDOWS_PACKAGE_32B_DIR}/Release/CoolProp.dll\" \"${COOLPROP_WINDOWS_PACKAGE_TMP_DIR}/source/CoolProp_x86.dll\"\n\n#   WORKING_DIRECTORY ${COOLPROP_WINDOWS_PACKAGE_32B_DIR}\n\n#   COMMENT \"Building the 32bit shared library with default settings\"\n\n#   VERBATIM )\n",
        "Line" : 750,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Build the 64bit DLL\n",
        "Line" : 772,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# *************************************************************\n\n# Add the target for EES and populate it with custom commands\n\n# *************************************************************\n",
        "Line" : 781,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# *************************************************************\n\n# Add the target for Excel and populate it with custom commands\n\n# *************************************************************\n",
        "Line" : 794,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Copy the Excel files\n",
        "Line" : 799,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# *******************************************************************\n\n# Add the target for Inno Script and populate it with custom commands\n\n# *******************************************************************\n",
        "Line" : 813,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Copy the ISS files\n",
        "Line" : 818,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# *****************************************************************************\n\n# Add the target for the installer package and populate it with custom commands\n\n# *****************************************************************************\n",
        "Line" : 825,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Build the installer and copy it to the bin directory\n",
        "Line" : 835,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# Must have SWIG and Octave\n",
        "Line" : 850,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# Make a src directory to deal with file permissions problem with MinGW makefile\n",
        "Line" : 855,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# Set the include folders\n",
        "Line" : 858,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "#disable internal error catching and allow swig to do the error catching itself\n",
        "Line" : 865,
        "CharPositionInLine" : 39
      },
      "91" : {
        "Text" : "# We need to see which library to link with on OSX - clang++ or stdc++\n",
        "Line" : 877,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Must have SWIG and C#\n",
        "Line" : 927,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Make a src directory to deal with file permissions problem with MinGW makefile\n",
        "Line" : 932,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Define which headers the CoolProp wrapper is dependent on\n",
        "Line" : 939,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# Set properties before adding module\n",
        "Line" : 946,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "#disable internal error catching and allow swig to do the error catching itself\n",
        "Line" : 952,
        "CharPositionInLine" : 39
      },
      "97" : {
        "Text" : "# Note that the default is not used if ${COOLPROP_MSVC_REL} or ${COOLPROP_MSVC_DBG} is set\n",
        "Line" : 957,
        "CharPositionInLine" : 31
      },
      "98" : {
        "Text" : "# Copy the shared object to the folder with the executable - no idea like java.library.path in C#\n",
        "Line" : 980,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Must have SWIG and C#\n",
        "Line" : 999,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# Make a src directory to deal with file permissions problem with MinGW makefile\n",
        "Line" : 1004,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Define which headers the CoolProp wrapper is dependent on\n",
        "Line" : 1012,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Set properties before adding module\n",
        "Line" : 1019,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "#disable internal error catching and allow swig to do the error catching itself\n",
        "Line" : 1025,
        "CharPositionInLine" : 39
      },
      "104" : {
        "Text" : "# Must have SWIG\n",
        "Line" : 1059,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# Define which headers the swig wrapper is dependent on\n",
        "Line" : 1063,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "#disable internal error catching and allow swig to do the error catching itself\n",
        "Line" : 1075,
        "CharPositionInLine" : 41
      },
      "107" : {
        "Text" : "# Set properties before adding module\n",
        "Line" : 1077,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# No lib prefix for the shared library\n",
        "Line" : 1084,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# Must have SWIG and Java\n",
        "Line" : 1104,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Make a src directory to deal with file permissions problem with MinGW makefile\n",
        "Line" : 1110,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "#disable internal error catching and allow swig to do the error catching itself\n",
        "Line" : 1126,
        "CharPositionInLine" : 39
      },
      "112" : {
        "Text" : "# Note that the default is not used if ${COOLPROP_MSVC_REL} or ${COOLPROP_MSVC_DBG} is set\n",
        "Line" : 1134,
        "CharPositionInLine" : 31
      },
      "113" : {
        "Text" : "# Install all the generated java files\n",
        "Line" : 1153,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# A module for Android\n",
        "Line" : 1171,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# For now, these must be changed manually\n",
        "Line" : 1178,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# or blah.di.blah.CoolProp\n",
        "Line" : 1180,
        "CharPositionInLine" : 39
      },
      "117" : {
        "Text" : "# Must have SWIG\n",
        "Line" : 1182,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Must have SWIG\n",
        "Line" : 1222,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "#disable internal error catching and allow swig to do the error catching itself\n",
        "Line" : 1241,
        "CharPositionInLine" : 39
      },
      "120" : {
        "Text" : "#fixes escaping\n",
        "Line" : 1269,
        "CharPositionInLine" : 64
      },
      "121" : {
        "Text" : "# set paths for LibreOffice tools\n",
        "Line" : 1311,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# set version strings for LibreOffice extension\n",
        "Line" : 1316,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# copy source files to build directory\n",
        "Line" : 1322,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# rebuild the registry database file (rdb)\n",
        "Line" : 1325,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# download and bundle latest Python certifi package (py2.py3, platform independent)\n",
        "Line" : 1329,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# add license file\n",
        "Line" : 1332,
        "CharPositionInLine" : 4
      },
      "127" : {
        "Text" : "# package complete folder to extension\n",
        "Line" : 1335,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# copy example spreadsheet file\n",
        "Line" : 1337,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# cmake -DCOOLPROP_JAVASCRIPT_MODULE=ON\n\n#       -DCMAKE_TOOLCHAIN_FILE=${EMSCRIPTEN}/cmake/Platform/Emscripten.cmake\n\n#       ../..\n",
        "Line" : 1346,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Toolchain MUST be defined in the call to CMake\n",
        "Line" : 1350,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# If you want a monolithic file with no async memory loading, define EMSCRIPTEN_NO_MEMORY_INIT_FILE\n",
        "Line" : 1362,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "#install (TARGETS coolprop DESTINATION ${CMAKE_INSTALL_PREFIX}/Javascript)\n",
        "Line" : 1377,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "#install (FILES \"${CMAKE_CURRENT_BINARY_DIR}/install_manifest.txt\" DESTINATION ${CMAKE_INSTALL_PREFIX}/Javascript)\n",
        "Line" : 1380,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# Note that the default is not used if ${COOLPROP_MSVC_REL} or ${COOLPROP_MSVC_DBG} is set\n",
        "Line" : 1387,
        "CharPositionInLine" : 29
      },
      "135" : {
        "Text" : "# Use like cmake ..\\CoolProp.git -DCOOLPROP_MY_MAIN=dev/coverity/main.cxx\n",
        "Line" : 1443,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "# Allow you to independently add back the testing CPP files\n",
        "Line" : 1456,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "###      COOLPROP TESTING APP       ###\n",
        "Line" : 1481,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "# CATCH TEST, compile everything with catch and set test entry point\n",
        "Line" : 1488,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# C++ Documentation Test\n",
        "Line" : 1507,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# Make the static library with which the snippets will be linked\n",
        "Line" : 1519,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# Collect all the snippets\n",
        "Line" : 1524,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# etc for the other available configuration types (MinSizeRel, RelWithDebInfo)\n",
        "Line" : 1545,
        "CharPositionInLine" : 8
      },
      "143" : {
        "Text" : "# Run it and save the output to a file with .output appended\n",
        "Line" : 1553,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# CATCH TEST, compile everything with catch and set test entry point\n",
        "Line" : 1566,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "# See also http://stackoverflow.com/a/16536401 (detailed guide on using gcov with cmake)\n",
        "Line" : 1593,
        "CharPositionInLine" : 4
      },
      "146" : {
        "Text" : "# TODO: check relevance of http://www.cmake.org/Wiki/BuildingWinDLL\n",
        "Line" : 1602,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "#include_directories(\"${CMAKE_CURRENT_SOURCE_DIR}/CoolProp\")\n\n#FILE(GLOB coolprop_files \"${CMAKE_CURRENT_SOURCE_DIR}/CoolProp/*.cpp\")\n\n#add_library(coolprop STATIC ${coolprop_files})\n",
        "Line" : 1604,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 148
    },
    "Web/Makefile" : {
      "ObjectId" : "036e4ff27134ee9416d0c8b6cdc85f34841725c0",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n\n#\n\n############################################################\n\n# These are the sphinx targets, looks like matplotlib :-)  #\n\n############################################################\n\n#\n\n# You can set these variables from the command line.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Internal variables.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dev/cmake/Modules/FindCsharp.cmake" : {
      "ObjectId" : "6efd8becd6036d2f97fc66f94967ceb30cd0d955",
      "LastModified" : "2014-07-06T13:40:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding and using C# (.NET and Mono).\n\n#\n\n# The following variables are set:\n\n#   CSHARP_FOUND - set to ON if C# is found\n\n#   CSHARP_USE_FILE - the path to the C# use file\n\n#   CSHARP_TYPE - the type of the C# compiler (eg. \".NET\" or \"Mono\")\n\n#   CSHARP_VERSION - the version of the C# compiler (eg. \"v4.0\" or \"2.10.2\")\n\n#   CSHARP_COMPILER - the path to the C# compiler executable (eg. \"C:/Windows/Microsoft.NET/Framework/v4.0.30319/csc.exe\" or \"/usr/bin/gmcs\")\n\n#   CSHARP_INTERPRETER - the path to interpreter needed to run CSharp executables\n\n#   CSHARP_PLATFORM - the C# target platform\n\n#   CSHARP_SDK - the SDK commandline switch (empty for .NET, for Mono eg. \"/sdk:2\" or \"/sdk:4\")\n\n#\n\n# This file is based on the work of GDCM:\n\n#   http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindCSharp.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: ADD ABILITY TO SELECT WHICH C# COMPILER eg. .NET or Mono (if both exist). For the moment, .NET is selected above Mono.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure find package macros are included\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# By default use anycpu platform, allow the user to override\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle WIN32 specific issues\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the USE_FILE path\n\n# http://public.kitware.com/Bug/view.php?id=7757\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "dev/cmake/Modules/FindDotNetFrameworkSdk.cmake" : {
      "ObjectId" : "3d84a536c8780dae73ecc6e65831870b40b35e06",
      "LastModified" : "2014-06-09T22:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding C# .NET.\n\n#\n\n# The following variables are set:\n\n#   CSHARP_DOTNET_FOUND\n\n#   CSHARP_DOTNET_COMPILER_${version} eg. \"CSHARP_DOTNET_COMPILER_v4.0.30319\"\n\n#   CSHARP_DOTNET_VERSION eg. \"v4.0.30319\"\n\n#   CSHARP_DOTNET_VERSIONS eg. \"v2.0.50727, v3.5, v4.0.30319\"\n\n#   DotNetFrameworkSdk_USE_FILE\n\n#\n\n# Additional references can be found here:\n\n#   .NET SDK 1.1: http://www.microsoft.com/downloads/details.aspx?FamilyID=9b3a2ca6-3647-4070-9f41-a333c6b9181d&displaylang=en\n\n#   .NET SDK 2.0: http://www.microsoft.com/downloads/details.aspx?FamilyID=fe6f2099-b7b4-4f47-a244-c96d69c35dec&displaylang=en\n\n#   .NET SDK 3.5: http://www.microsoft.com/downloads/details.aspx?familyid=333325fd-ae52-4e35-b531-508d977d32a6&displaylang=en\n\n#   C# Compiler options: http://msdn.microsoft.com/en-us/library/2fdbz5xd(v=VS.71).aspx\n\n#\n\n# This file is based on the work of GDCM:\n\n#   http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindDotNETFrameworkSDK.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The .NET compiler has already been found\n\n# It may have been reset by the user, verify it is correct\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear versions\n",
        "Line" : 35,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# Get the framework directory based on platform\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search for .NET versions\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Extract version number (eg. v4.0.30319)\n\n# TODO: Consider using REGEX\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add variable holding executable\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Create a list of supported compiler versions\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We found at least one .NET compiler version\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Report the found versions\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set the compiler version\n\n# Do not force, so that the user can manually select their own version if they wish\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# If available, select .NET v2.0.50727 (this is the minimal version as it supports generics, and allows use of VS2008)\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Select the highest version (first in reverse sorted list)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Set USE_FILE\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "dev/cmake/Modules/FindMatlab.cmake" : {
      "ObjectId" : "b21c1cea9fc9b0f0b5b5acf7a1b6a9f13f806c65",
      "LastModified" : "2014-08-01T20:06:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - this module looks for Matlab\n\n# Defines:\n\n#  MATLAB_INCLUDE_DIR: include path for mex.h\n\n#  MATLAB_LIBRARIES:   required libraries: libmex, libmx\n\n#  MATLAB_MEX_LIBRARY: path to libmex\n\n#  MATLAB_MX_LIBRARY:  path to libmx\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dev/cmake/Modules/FindMono.cmake" : {
      "ObjectId" : "bd819ca72e58945afd1d0ee6284448fa67973a58",
      "LastModified" : "2014-07-06T11:59:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding Mono.\n\n#\n\n# The following variables are set:\n\n#   CSHARP_MONO_FOUND\n\n#   CSHARP_MONO_COMPILER_${version} eg. \"CSHARP_MONO_COMPILER_2.10.2\"\n\n#   CSHARP_MONO_INTERPRETOR_${version} eg. \"CSHARP_MONO_INTERPRETOR_2.10.2\"\n\n#   CSHARP_MONO_VERSION eg. \"2.10.2\"\n\n#   CSHARP_MONO_VERSIONS eg. \"2.10.2, 2.6.7\"\n\n#\n\n# Additional references can be found here:\n\n#   http://www.mono-project.com/Main_Page\n\n#   http://www.mono-project.com/CSharp_Compiler\n\n#   http://mono-project.com/FAQ:_Technical (How can I tell where the Mono runtime is installed)\n\n#\n\n# This file is based on the work of GDCM:\n\n#   http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindMono.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Mono compiler has already been found\n\n# It may have been reset by the user, verify it is correct\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear versions\n",
        "Line" : 34,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# Search for Mono on Win32 systems\n\n# See http://mono-project.com/OldReleases and http://www.go-mono.com/mono-downloads/download.html\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO: Use HKLM_LOCAL_MACHINE\\Software\\Novell\\Mono\\DefaultCLR to specify default version\n\n# get_filename_component( test \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Novell\\\\Mono;DefaultCLR]\" NAME )\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Extract version number (eg. 2.10.2)\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Add variable holding executable\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Set interpreter\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Create a list of supported compiler versions\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# We found at least one Mono compiler version\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Search for Mono on non-Win32 systems\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# variable is added to the cache, we removed it below\n",
        "Line" : 117,
        "CharPositionInLine" : 25
      },
      "12" : {
        "Text" : "# Determine version\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# variable is added to the cache, we removed it below\n",
        "Line" : 125,
        "CharPositionInLine" : 30
      },
      "14" : {
        "Text" : "# We found Mono compiler\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Remove temp variable from cache\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Report the found versions\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Set USE_FILE\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "dev/cmake/Modules/FindOctave.cmake" : {
      "ObjectId" : "345e1d1eedd5b787ab8d89afd706e714ff9c09fa",
      "LastModified" : "2019-01-10T05:34:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the build flags to compile octave shared objects (oct and mex files)\n\n# Once done this will define\n\n#\n\n# OCTAVE_VERSION - Version of Octave\n\n# OCTAVE_FOUND - if Coin3d is found\n\n# OCTAVE_CXXFLAGS - extra flags\n\n# OCTAVE_INCLUDE_DIRS - include directories\n\n# OCTAVE_LINK_DIRS - link directories\n\n# OCTAVE_LIBRARY_RELEASE - the release version\n\n# OCTAVE_LIBRARY_DEBUG - the debug version\n\n# OCTAVE_LIBRARY - a default library, with priority debug.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use mkoctfile\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#~   string(REGEX MATCHALL \"(^| )-L([./+-_\\\\a-zA-Z]*)\" _mkoctfile_ldirs \"${_mkoctfile_ldirs}\")\n\n#~   string(REGEX REPLACE \"(^| )-L\" \"\" _mkoctfile_ldirs \"${_mkoctfile_ldirs}\")\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#string(REGEX REPLACE \"~\" \" \" ITR ${ITR})\n",
        "Line" : 94,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#string(REGEX REPLACE \"~\" \" \" ITR ${ITR})\n",
        "Line" : 102,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# use octave_config\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "dev/cmake/Modules/FindR.cmake" : {
      "ObjectId" : "16d28433c89d718768f312b052e8e3356bd1f870",
      "LastModified" : "2018-08-15T05:06:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find R\n\n# This module finds the libraries corresponding to the R program\n\n# It is based on the code from http://github.com/usnistgov/REFPROP-wrappers which is in the public domain\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This code sets the following variables:\n\n#\n\n#  R_LIBRARY             - path to the R shared library\n\n#  R_INCLUDE_DIRS        - include directory(ies)\n\n#  R_BIN_DIR             - directory that contains the R executable being used\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parse the output of the R path command, removing whitespace\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# see http://www.cmake.org/pipermail/cmake/2008-November/025423.html\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "dev/cmake/Modules/Finddl.cmake" : {
      "ObjectId" : "1689e4c7fbe33386615a79cae2cd572c87adfc78",
      "LastModified" : "2014-06-09T22:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libdl\n\n# Find the native LIBDL includes and library\n\n#\n\n#  LIBDL_INCLUDE_DIR - where to find dlfcn.h, etc.\n\n#  LIBDL_LIBRARIES   - List of libraries when using libdl.\n\n#  LIBDL_FOUND       - True if libdl found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBDL_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "dev/cmake/Modules/FlagFunctions.cmake" : {
      "ObjectId" : "3fc88622e557ea34c95a84b819f37214238cb297",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Functions to handle compiler flags\n\n# This module provides functions to modify the compiler flags. It simplifies\n\n# working with these flags, but it should be used with caution.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n\n# http://stackoverflow.com/questions/18233513/cmake-g-set-cxx-flags-02-but-03-is-still-there\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################\n\n#        FUNCTION DEFINITIONS         #\n\n#-------------------------------------#\n\n# Define some macros that simplify    #\n\n# working with the CMakeLists file.   #\n\n# We really should use subfolders to  #\n\n# slim this file, but for now macros  #\n\n# can help us a little.               #\n\n#######################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#function(modify_compiler_flag_release flag_old flag_new flag_def)\n\n#  if(${flag_new})\n\n#    replace_compiler_flag(${flag_old} ${flag_new})\n\n#  elseif(${flag_def})\n\n#    replace_compiler_flag(${flag_old} ${flag_def})\n\n#  else()\n\n#    MESSAGE(FATAL_ERROR \"You did not provide a proper replacement for ${flag_old}.\")\n\n#  endif()\n\n#endfunction()\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "dev/cmake/Toolchains/linux_mingw_windows32.cmake" : {
      "ObjectId" : "3169c69917ee8680b8e47fa9295566bc9ad7b770",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# run with cmake -DCMAKE_TOOLCHAIN_FILE=...\n\n# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################\n\n# Choose an appropriate compiler prefix\n\n#######################################\n\n#\n\n# for classical mingw32\n\n# see http://www.mingw.org/\n\n#set(COMPILER_PREFIX \"i586-mingw32msvc\")\n\n#\n\n# for 32 or 64 bits mingw-w64\n\n# see http://mingw-w64.sourceforge.net/\n\n#set(COMPILER_PREFIX   \"i686-w64-mingw32\")\n\n#set(COMPILER_PREFIX \"x86_64-w64-mingw32\")\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#######################################\n\n# which compilers to use for C and C++\n\n#######################################\n\n#\n\n# Either search for the compiler ...\n\n#find_program(CMAKE_RC_COMPILER NAMES ${COMPILER_PREFIX}-windres)\n\n# \n\n# ... or rely on the system path\n\n#SET(CMAKE_RC_COMPILER ${COMPILER_PREFIX}-windres)\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\n\n#######################################\n\n# Where to look for target binaries\n\n#######################################\n\n#\n\n# here is the target environment located\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "dev/cmake/Toolchains/linux_mingw_windows64.cmake" : {
      "ObjectId" : "25c0ad7d30d8bc79fee9be67c7243f84db89be03",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# run with cmake -DCMAKE_TOOLCHAIN_FILE=...\n\n# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################\n\n# Choose an appropriate compiler prefix\n\n#######################################\n\n#\n\n# for classical mingw32\n\n# see http://www.mingw.org/\n\n#set(COMPILER_PREFIX \"i586-mingw32msvc\")\n\n#\n\n# for 32 or 64 bits mingw-w64\n\n# see http://mingw-w64.sourceforge.net/\n\n#set(COMPILER_PREFIX   \"i686-w64-mingw32\")\n\n#set(COMPILER_PREFIX \"x86_64-w64-mingw32\")\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#######################################\n\n# which compilers to use for C and C++\n\n#######################################\n\n#\n\n# Either search for the compiler ...\n\n#find_program(CMAKE_RC_COMPILER NAMES ${COMPILER_PREFIX}-windres)\n\n# \n\n# ... or rely on the system path\n\n#SET(CMAKE_RC_COMPILER ${COMPILER_PREFIX}-windres)\n\n#\n\n#find_program(CMAKE_RC_COMPILER NAMES ${COMPILER_PREFIX}-windres)\n\n#find_program(CMAKE_C_COMPILER NAMES ${COMPILER_PREFIX}-gcc)\n\n#find_program(CMAKE_CXX_COMPILER NAMES ${COMPILER_PREFIX}-g++)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\n\n#######################################\n\n# Where to look for target binaries\n\n#######################################\n\n#\n\n# here is the target environment located\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "dev/cmake/Toolchains/powerpc-vxworks-crio.cmake" : {
      "ObjectId" : "df73f24acb0140286460f8384076b74660e3b46f",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# run with cmake -DCMAKE_TOOLCHAIN_FILE=...\n\n# the name of the target operating system\n\n# Based on http://www.cmake.org/Wiki/CMake_Cross_Compiling\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### CONFIGURATION ###\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assume usual configuration\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#gccdist ignore\n",
        "Line" : 32,
        "CharPositionInLine" : 101
      },
      "4" : {
        "Text" : "#see README\n",
        "Line" : 33,
        "CharPositionInLine" : 93
      },
      "5" : {
        "Text" : "### CONFIGURATION BELOW SHOULD NOT NEED TO BE CHANGED ###\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### TOOLCHAIN SPECIFIC CONFIGURATION ###\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### CONFIGURATION FOR GCCDIST ONLY ###\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "### CONFIGURATION FOR NON-GCCDIST TOOLCHAINS ONLY ###\n\n#locations of libraries so we can use nm to find their symbols\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#libgcc's location changes based on gcc, so ask compiler where it is\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#the above command leaves a newline at the end of VXWORKS_LIBGCC.\n\n#This triggers a bug in cmake's link script execution which will\n\n#segfault because it sees a blank line and passes an empty string to\n\n#execvp().  For now, workaround: use regex to strip trailing newline\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#link flags for standard libraries\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#TODO: Do we want libsupc++?\n",
        "Line" : 66,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "### END TOOLCHAIN SPECIFIC CONFIGURATION ###\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "### END CONFIGURATION ###\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# (embedded) targets without operating system usually don't support shared libraries\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# is this true?  We can add a dependency on another kernel module, but it's crufty\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# To help the find_xxx() commands, set at least the following so CMAKE_FIND_ROOT_PATH\n\n# works at least for some simple cases:\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# search for programs in the build host directories\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# for libraries and headers in the target directories\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#System Headers\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#modern build toolchains do not presently require additional includes\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "#build flags\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#Set CFLAGS, LDFLAGS\n\n#Note that we use -nostdlib and then link with the standard library\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#should be equivalent to -nostdlib -Wl,-X,-r -static but I don't want to mess...\n",
        "Line" : 111,
        "CharPositionInLine" : 58
      },
      "25" : {
        "Text" : "#Set toolchain definitions\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#CXX: Use c++11 by default now\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#link rules for C++:\n\n#TODO:  This will NOT work on win32!\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\tDo a partial link.\n\n#\t- The first line compiles the partial image - NOTE: we link static libraries at this point so that all of\n\n#\t\tthe symbols that are pulled into the module (and only those symbols) will be munched in the next step\n\n#\t- The second line \"munches\" the executable to generate a file (<TARGET>_ctdt.c) that contains all of the\n\n#\t\tstatic constructors and destructors in an array so that the kernel can call them at the appropriate times.\n\n#\t- The third line compiles the ctor/dtor file.\n\n#\t- The fourth line links the partial image together with the ctor/dtor object to create the finished executable\n\n#\t- The last line cleans up all these generated files (which will have to be regenerated later anyway)\n\n#\n\n#\tNOTE: We don't link the standard library here as we'll get the kernel's copy when we get loaded in\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\tHere's the crazy part...\n\n#\t- The first line compiles the partial image - NOTE: notice we also link the standard library at this point\n\n#\t- We munch the executable, which now contains the standard library as well\n\n#\t- The third line compiles the ctor/dtor file as above.\n\n#\t- The fourth line links the partial image together with the ctor/dtor object to create another partial image\n\n#\t- The fifth line localizes the symbols from the misc. standard libraries.  This is needed because if they are global\n\n#\t\tsymbols then we'll get conflicts with the kernel's standard libraries as we share address space.  This is\n\n#\t\twhat sucks about sharing address space with the kernel...\n\n#\t- The last line cleans up again.\n\n#\n\n#\tNOTE: We need to link in our own standard library, both to get its features and because there might be some conflicts\n\n#\t\tin what symbols are defined, inline functions, and other internals between the kernel's stdlib (which is a whole\n\n#\t\tmajor version old!) and the one we have.  Even if its just the headers, something might break.  The gccdist link \n\n#\t\tcommand might work, but I don't recommend it.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "wrappers/Fortran/detailed_example/CMakeLists.txt" : {
      "ObjectId" : "3e23a1e13391bf5d36f852d6b19e21ca61b4b871",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add CoolProp dependency\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add main code\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link it to its dependent libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "wrappers/Labview/vxWorks/simple_example_crosscompiled/Makefile" : {
      "ObjectId" : "e8005c15b896c2a01e11e2ae3cccf4a9dfdec38c",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name of the final output library (written to OUTFILE.out)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# hostname or IP address of the target, if automatically transferring binary via FTP.\n\n# To automatically transfer via FTP, uncomment the FTP section below.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# directory to write the output library on the target, if automatically transferring via FTP.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These variables control the compiler and linker flags. Change them as\n\n# appropriate.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Expects NAME.c or NAME.cpp, and produces OBJDIR/NAME.o\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is the name of the output shared library.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If you have other VxWorks .a files to reference, list them here.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This basic rule compiles a .c file into a .o file. It can be adapted to\n\n# all other source files that gcc can compile, including assembly (.s) and\n\n# C++ (.cpp, .cc, .C, .cxx) files. To enable support for those extensions,\n\n# copy this rule and modify its extension and compile flags for the\n\n# required source file type.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Adapted rule for .cpp files\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# FTP the output file to the target (uncomment if desired)\n\n#\t@echo \n\n#\t@echo Transferring $(OUTFILE).out to target $(TARGET) via FTP...\n\n#\t@echo user anonymous anonymous > $(OBJ_DIR)/ftpCommands.txt\n\n#\t@echo binary >> $(OBJ_DIR)/ftpCommands.txt\n\n#\t@echo send $(OBJ_DIR)/$(OUTFILE).out $(TARGET_DIR)/$(OUTFILE).out >> $(OBJ_DIR)/ftpCommands.txt\n\n#\t@echo quit >> $(OBJ_DIR)/ftpCommands.txt\n\n#\t@ftp -n -i -s:$(OBJ_DIR)/ftpCommands.txt $(TARGET)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "wrappers/Lua/Makefile" : {
      "ObjectId" : "863c3888e4952c2d694a00628d72d13f244b3ee8",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "wrappers/Python/pybind11/CMakeLists.txt" : {
      "ObjectId" : "8b16e86edf640b758e349d67fc60a032e16cf349",
      "LastModified" : "2017-11-14T09:49:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the standard for C++ to c++11\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add core CoolProp dependency to get the list of files\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------\n\n# Build pybind11 python module\n\n# ----------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 14,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 3426
}