{
  "Repository" : "27426341",
  "Revision" : "HEAD",
  "ObjectId" : "437ab942adbc13f25c83ef4bca6d04ad033aa8fc",
  "CommitTime" : "2019-04-11T02:14:28Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4052701eb7df02b4aa8734e840fd6521242d2606",
      "LastModified" : "2019-03-28T19:24:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that CMAKE_BUILD_TYPE is either Debug or Release:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Boost.multiprecision build segfaults if -O3 optimization is on\n\n#which it is by default for cmake Release mode. Remove -O3 from flags.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable C++11 support in all compilers. SymEngine will not compile unless\n\n# the C++11 support is enabled.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# pgcpp\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add proper -fPIC and MINGW handling\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check c++11 support\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check if linker supports exclude-libs\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC doesn't have cxxabi.h\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# MSVC only supports __func__ in a C++ mode, not a C mode\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# MSVC does not support =default for constructors\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Cotire\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Virtual TypeID\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Piranha\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# FLINT\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Boost\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# GMP\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check gmpxx\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Use CMake 3.4 feature\n",
        "Line" : 229,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# ECM\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# PRIMESIEVE\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ARB\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# MPFR\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# MPC\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Virtual TypeID\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Parser\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Workaround for https://github.com/fredrik-johansson/arb/issues/24\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Workaround for https://github.com/fredrik-johansson/arb/issues/24\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# PTHREAD\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# PTHREAD\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# LLVM\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# BENCHMARKS\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# BFD\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# TCMalloc\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Doxygen\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# SYMENGINE_ASSERT\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# SYMENGINE_RCP\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# SYMENGINE_THREAD_SAFE\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# TESTS\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Teuchos\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# OpenMp\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# In Debug mode we use Teuchos::RCP and enable debugging checks that make\n\n# the usage 100% safe, as long as the Teuchos guidelines are followed.\n",
        "Line" : 552,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Use the Teuchos::RCP\n",
        "Line" : 554,
        "CharPositionInLine" : 31
      },
      "42" : {
        "Text" : "# Enable safety checks\n",
        "Line" : 555,
        "CharPositionInLine" : 32
      },
      "43" : {
        "Text" : "# Enable safety checks\n",
        "Line" : 556,
        "CharPositionInLine" : 49
      },
      "44" : {
        "Text" : "# Also enable assertions\n",
        "Line" : 558,
        "CharPositionInLine" : 35
      },
      "45" : {
        "Text" : "## References:\n\n## cmake  --help-policy CMP0042\n",
        "Line" : 570,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "## References:\n\n## https://cmake.org/Wiki/CMake_RPATH_handling#Mac_OS_X_and_the_RPATH\n",
        "Line" : 576,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# ... for the build tree\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# ... for the install tree\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#include(CMakePackageConfigHelpers)\n\n#write_basic_package_version_file(\n\n#    \"${CMAKE_CURRENT_BINARY_DIR}/SymEngineConfigVersion.cmake\"\n\n#    VERSION ${SYMENGINE_VERSION}\n\n#    COMPATIBILITY AnyNewerVersion\n\n#)\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#cmake/FindFLINT.cmake\n\n#cmake/FindARB.cmake\n\n#cmake/FindBFD.cmake\n\n#cmake/FindECM.cmake\n\n#cmake/FindEXECINFO.cmake\n\n#cmake/FindFLINT.cmake\n\n#cmake/FindGMP.cmake\n\n#cmake/FindLINKH.cmake\n\n#cmake/FindMPC.cmake\n\n#cmake/FindMPFR.cmake\n\n#cmake/FindPIRANHA.cmake\n\n#cmake/FindPRIMESIEVE.cmake\n\n#cmake/FindPTHREAD.cmake\n\n#cmake/FindTCMALLOC.cmake\n\n#cmake/LibFindMacros.cmake\n",
        "Line" : 643,
        "CharPositionInLine" : 14
      },
      "52" : {
        "Text" : "# At the end we print a nice summary\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "fb93750ffdfe49e42113d0063fecd02aef4abc78",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindARB.cmake" : {
      "ObjectId" : "770da31330c1866ba3377854f4ed821b3bfe330d",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindBFD.cmake" : {
      "ObjectId" : "19698c0d11d251e3f6f6d5c19a6bdfa2a2ff97d4",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindECM.cmake" : {
      "ObjectId" : "0fcef8231e3b349a3877a86b8774ca6a3de07b24",
      "LastModified" : "2015-08-09T19:04:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindEXECINFO.cmake" : {
      "ObjectId" : "72426b05a2231b317947e8babf67d1a24421f732",
      "LastModified" : "2015-08-09T19:04:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindFLINT.cmake" : {
      "ObjectId" : "ebd1224afef88bf2387d0fbbae391e2e805cb054",
      "LastModified" : "2015-08-09T19:04:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGMP.cmake" : {
      "ObjectId" : "7359cd9cfe9b3b6d582e0d856b52e669d2e83e15",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindLINKH.cmake" : {
      "ObjectId" : "fe6ebffa49887c5420667c8571df083ff098d519",
      "LastModified" : "2015-08-09T19:04:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindMPC.cmake" : {
      "ObjectId" : "e1c1d8bde2dc5f18a62df9ac1c1517a952a92b47",
      "LastModified" : "2015-08-09T19:04:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindMPFR.cmake" : {
      "ObjectId" : "33d1e7cdbdee82a6573d1bce00dfaabc78afd2ea",
      "LastModified" : "2015-08-09T19:04:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPIRANHA.cmake" : {
      "ObjectId" : "4ce2ddeee5c164576fa419f32134da4e66db7451",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPRIMESIEVE.cmake" : {
      "ObjectId" : "3d155322454cf18bd94a387446979162bf57b0f5",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPTHREAD.cmake" : {
      "ObjectId" : "e140a27cfe3c2dd70d5ea4da7ad564c5149974d3",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindTCMALLOC.cmake" : {
      "ObjectId" : "cb0d5d8153453281101d4d8c641efd251df42ae2",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/LibFindMacros.cmake" : {
      "ObjectId" : "68fcaa42650733a7a46f0ba265a6fd8edff66446",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macros for finding external libraries\n\n#\n\n# Example usage:\n\n#\n\n#     include(LibFindMacros)\n\n#     libfind_include(gmpxx.h gmp)\n\n#     libfind_library(gmpxx gmp)\n\n#     libfind_library(gmp gmp)\n\n#     set(GMP_LIBRARIES ${GMPXX_LIBRARY} ${GMP_LIBRARY})\n\n#     set(GMP_INCLUDE_DIRS ${GMP_INCLUDE_DIR})\n\n#     include(FindPackageHandleStandardArgs)\n\n#     find_package_handle_standard_args(GMP DEFAULT_MSG GMP_LIBRARIES\n\n#         GMP_INCLUDE_DIRS)\n\n#     mark_as_advanced(GMP_INCLUDE_DIR GMPXX_LIBRARY GMP_LIBRARY)\n\n#\n\n# The result of the Find*.cmake (e.g. FindGMP.cmake) module should be two\n\n# variables GMP_LIBRARIES and GMP_INCLUDE_DIRS, that the user then uses in the\n\n# following way:\n\n#\n\n#     find_package(GMP REQUIRED)\n\n#     include_directories(${GMP_INCLUDE_DIRS})\n\n#     set(LIBS ${LIBS} ${GMP_LIBRARIES})\n\n#     # LIBS is later used in target_link_libraries()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/UserOverride.cmake" : {
      "ObjectId" : "2813cf09b88efdb3bf5a6720e818c6ae03edd6df",
      "LastModified" : "2018-10-06T06:58:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This overrides the default CMake Debug and Release compiler options.\n\n# The user can still specify different options by setting the\n\n# CMAKE_CXX_FLAGS_[RELEASE,DEBUG] variables (on the command line or in the\n\n# CMakeList.txt). This files serves as better CMake defaults and should only be\n\n# modified if the default values are to be changed. Project specific compiler\n\n# flags should be set in the CMakeList.txt by setting the CMAKE_CXX_FLAGS_*\n\n# variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# g++\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# icpc\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# clang\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# pgcpp\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "741d6901f157bd038741a523ddda099440159d0b",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2016 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 441,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 452,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 473,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 485,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# platform specific flags\n",
        "Line" : 496,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# default include dirs\n",
        "Line" : 531,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 538,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 550,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# target include directories\n",
        "Line" : 562,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 574,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 582,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 659,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# target export define symbol\n",
        "Line" : 663,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 668,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# target compile definitions\n",
        "Line" : 677,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 686,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 695,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 711,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 863,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 952,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 996,
        "CharPositionInLine" : 3
      },
      "52" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1004,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# header is outside\n",
        "Line" : 1021,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1032,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# check header file extension\n",
        "Line" : 1042,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1055,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1060,
        "CharPositionInLine" : 3
      },
      "59" : {
        "Text" : "# GCC like output\n",
        "Line" : 1069,
        "CharPositionInLine" : 3
      },
      "60" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1085,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1088,
        "CharPositionInLine" : 1
      },
      "62" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1090,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# then separate lines\n",
        "Line" : 1092,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1095,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1113,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# update stack\n",
        "Line" : 1123,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1139,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1141,
        "CharPositionInLine" : 5
      },
      "69" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1148,
        "CharPositionInLine" : 5
      },
      "70" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1157,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1169,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1207,
        "CharPositionInLine" : 1
      },
      "73" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1223,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1371,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# create empty log file\n",
        "Line" : 1412,
        "CharPositionInLine" : 3
      },
      "76" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1428,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1464,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# append to list\n",
        "Line" : 1473,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1476,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1480,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# append to list\n",
        "Line" : 1485,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1491,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1498,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# append to list\n",
        "Line" : 1503,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1506,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1511,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# append to list\n",
        "Line" : 1520,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1523,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1527,
        "CharPositionInLine" : 3
      },
      "90" : {
        "Text" : "# append to list\n",
        "Line" : 1532,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1538,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1557,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# append to list\n",
        "Line" : 1568,
        "CharPositionInLine" : 3
      },
      "94" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1575,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1582,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# append to list\n",
        "Line" : 1591,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1594,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1602,
        "CharPositionInLine" : 3
      },
      "99" : {
        "Text" : "# append to list\n",
        "Line" : 1614,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1621,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1628,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# append to list\n",
        "Line" : 1639,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1648,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1665,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# append to list\n",
        "Line" : 1673,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1679,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1686,
        "CharPositionInLine" : 3
      },
      "108" : {
        "Text" : "# append to list\n",
        "Line" : 1688,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1691,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1696,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# append to list\n",
        "Line" : 1701,
        "CharPositionInLine" : 3
      },
      "112" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1704,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1708,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# append to list\n",
        "Line" : 1714,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1717,
        "CharPositionInLine" : 3
      },
      "116" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1723,
        "CharPositionInLine" : 3
      },
      "117" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 5
      },
      "118" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1737,
        "CharPositionInLine" : 5
      },
      "119" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1744,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# append to list\n",
        "Line" : 1746,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1749,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1754,
        "CharPositionInLine" : 3
      },
      "123" : {
        "Text" : "# append to list\n",
        "Line" : 1763,
        "CharPositionInLine" : 5
      },
      "124" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1769,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1776,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# append to list\n",
        "Line" : 1778,
        "CharPositionInLine" : 5
      },
      "127" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1781,
        "CharPositionInLine" : 5
      },
      "128" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1818,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1834,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1838,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1845,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1848,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1866,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1885,
        "CharPositionInLine" : 1
      },
      "135" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1928,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1939,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1942,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2013,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2018,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2021,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2024,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2027,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2059,
        "CharPositionInLine" : 1
      },
      "144" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2063,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2068,
        "CharPositionInLine" : 2
      },
      "146" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2085,
        "CharPositionInLine" : 1
      },
      "147" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2098,
        "CharPositionInLine" : 1
      },
      "148" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2123,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2128,
        "CharPositionInLine" : 3
      },
      "150" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2135,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2138,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2143,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# generate target script file\n",
        "Line" : 2166,
        "CharPositionInLine" : 1
      },
      "154" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2171,
        "CharPositionInLine" : 2
      },
      "155" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2185,
        "CharPositionInLine" : 2
      },
      "156" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2194,
        "CharPositionInLine" : 3
      },
      "157" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2196,
        "CharPositionInLine" : 3
      },
      "158" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2200,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2227,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2232,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2239,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2245,
        "CharPositionInLine" : 3
      },
      "163" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2252,
        "CharPositionInLine" : 3
      },
      "164" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2255,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2262,
        "CharPositionInLine" : 1
      },
      "166" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2269,
        "CharPositionInLine" : 1
      },
      "167" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2271,
        "CharPositionInLine" : 1
      },
      "168" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2335,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2346,
        "CharPositionInLine" : 3
      },
      "170" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2357,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2365,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2369,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2373,
        "CharPositionInLine" : 3
      },
      "174" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2395,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2401,
        "CharPositionInLine" : 3
      },
      "176" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2410,
        "CharPositionInLine" : 3
      },
      "177" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2418,
        "CharPositionInLine" : 3
      },
      "178" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2462,
        "CharPositionInLine" : 1
      },
      "179" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2467,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2492,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2501,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2510,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2517,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2690,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2694,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2708,
        "CharPositionInLine" : 3
      },
      "187" : {
        "Text" : "# use all available cores\n",
        "Line" : 2728,
        "CharPositionInLine" : 3
      },
      "188" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2753,
        "CharPositionInLine" : 1
      },
      "189" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2760,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2770,
        "CharPositionInLine" : 1
      },
      "191" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2775,
        "CharPositionInLine" : 1
      },
      "192" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2777,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2786,
        "CharPositionInLine" : 2
      },
      "194" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2796,
        "CharPositionInLine" : 4
      },
      "195" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2803,
        "CharPositionInLine" : 3
      },
      "196" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2807,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2835,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2840,
        "CharPositionInLine" : 4
      },
      "199" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2855,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2866,
        "CharPositionInLine" : 3
      },
      "201" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2874,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2888,
        "CharPositionInLine" : 4
      },
      "203" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2900,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2910,
        "CharPositionInLine" : 1
      },
      "205" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2913,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2918,
        "CharPositionInLine" : 2
      },
      "207" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2923,
        "CharPositionInLine" : 1
      },
      "208" : {
        "Text" : "# generate unity target\n",
        "Line" : 2930,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2937,
        "CharPositionInLine" : 2
      },
      "210" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2940,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2950,
        "CharPositionInLine" : 3
      },
      "212" : {
        "Text" : "# copy output name\n",
        "Line" : 2975,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2983,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# copy compile features\n",
        "Line" : 2994,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2999,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3007,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3017,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3020,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3026,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3040,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3048,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3053,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3077,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# resolve alias\n",
        "Line" : 3089,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3097,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3113,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3118,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3161,
        "CharPositionInLine" : 4
      },
      "229" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3221,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3308,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# include target script if available\n",
        "Line" : 3320,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3322,
        "CharPositionInLine" : 2
      },
      "233" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3338,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3358,
        "CharPositionInLine" : 3
      },
      "235" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3361,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3380,
        "CharPositionInLine" : 3
      },
      "237" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3383,
        "CharPositionInLine" : 3
      },
      "238" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3451,
        "CharPositionInLine" : 3
      },
      "239" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3454,
        "CharPositionInLine" : 3
      },
      "240" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3477,
        "CharPositionInLine" : 1
      },
      "241" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3514,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3548,
        "CharPositionInLine" : 2
      },
      "243" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3562,
        "CharPositionInLine" : 3
      },
      "244" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3569,
        "CharPositionInLine" : 1
      },
      "245" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3622,
        "CharPositionInLine" : 1
      },
      "246" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3694,
        "CharPositionInLine" : 1
      },
      "247" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3858,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 248
    },
    "doc/Makefile" : {
      "ObjectId" : "c9c29545e7b5b1d7afab228df5a8599a49f81e52",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "symengine/CMakeLists.txt" : {
      "ObjectId" : "93aa8fe2d10007062c590600098ffaad3e44c8a3",
      "LastModified" : "2019-03-28T19:24:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include Teuchos headers:\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Include Teuchos config file (generated per build):\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Needed for \"make install\"\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure SymEngine using our CMake options:\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include the config file:\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include the source directory\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# throws if CMAKE_VERSION < 2.8.12\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# make install\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "symengine/tests/CMakeLists.txt" : {
      "ObjectId" : "693fdea20def684d3a447dc7c761160bdfed7c06",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include Catch headers:\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "symengine/tests/basic/CMakeLists.txt" : {
      "ObjectId" : "239f18369fe1cdafbee06e041161ec666c2cb3a4",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/cwrapper/CMakeLists.txt" : {
      "ObjectId" : "5ec6525a665edb4c6d956c4f67cd1042be401d5a",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/eval/CMakeLists.txt" : {
      "ObjectId" : "f4da91a942850dfaff3485c70af1d5ecf28595f3",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/expression/CMakeLists.txt" : {
      "ObjectId" : "58239d454583bf8505f2ec6dd836f43619415788",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/finitediff/CMakeLists.txt" : {
      "ObjectId" : "15a23896572ebfb8a49cb3199f6895364dd80948",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/logic/CMakeLists.txt" : {
      "ObjectId" : "27aa23fa18f5622a2ad8456c8338ae05a4c537e9",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/matrix/CMakeLists.txt" : {
      "ObjectId" : "d789ab3487bd1590525ea64b222bd67c8129bc55",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/ntheory/CMakeLists.txt" : {
      "ObjectId" : "89ee8551861dad5b68325eb3cfcd2e0d9c29b7f4",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/polynomial/CMakeLists.txt" : {
      "ObjectId" : "8abba457d4e823c957ad88dc01e198a1da88c53a",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/printing/CMakeLists.txt" : {
      "ObjectId" : "b6ccc542195cd2b9f3b45cf8f89210c499eaaaa9",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/tests/rcp/CMakeLists.txt" : {
      "ObjectId" : "6d37e5bd3e679dcb0052ae22455966691f98fd7b",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/utilities/catch/CMakeLists.txt" : {
      "ObjectId" : "bab4f182161050b4878883adef645274699a174c",
      "LastModified" : "2018-07-22T04:57:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/utilities/matchpycpp/CMakeLists.txt" : {
      "ObjectId" : "468a7dd1ef11313471044c351ca5de6fff85b17b",
      "LastModified" : "2019-03-11T14:22:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/utilities/matchpycpp/autogen_tests/CMakeLists.txt" : {
      "ObjectId" : "5b3674034b4107da6264352556db65bc4aaa5584",
      "LastModified" : "2019-03-11T14:22:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/utilities/matchpycpp/tests/CMakeLists.txt" : {
      "ObjectId" : "8e9ef397df80fe0d15cc16e64a1f7184e03c7a5d",
      "LastModified" : "2019-03-11T14:22:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/utilities/matchpycpp/tests/bipartite/CMakeLists.txt" : {
      "ObjectId" : "13f9f5329f10b99fe089ee772cdedc1367e7f5c3",
      "LastModified" : "2019-03-11T14:22:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/utilities/matchpycpp/tests/hopcroft_karp/CMakeLists.txt" : {
      "ObjectId" : "1c28f45391468d39ea3b153e3e37ada72d6a1812",
      "LastModified" : "2019-03-11T14:22:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "symengine/utilities/teuchos/CMakeLists.txt" : {
      "ObjectId" : "e4f9ea8237d8a5649c66f1b25aa66e4b19d23282",
      "LastModified" : "2019-03-11T14:22:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Must suppress strick aliasing warnings for this file!\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Configure Teuchos using our CMake options:\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include the config file:\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 38,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1543
}