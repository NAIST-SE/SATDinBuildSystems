{
  "Repository" : "40453918",
  "Revision" : "HEAD",
  "ObjectId" : "44087be025cff970bab5778e4a36d4100bdf8cf3",
  "CommitTime" : "2019-04-17T20:21:49Z",
  "Files" : {
    "modules/aruco/CMakeLists.txt" : {
      "ObjectId" : "568a10a1653888ab4dfc216f2051614bf2c431fe",
      "LastModified" : "2016-08-05T13:48:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/bgsegm/CMakeLists.txt" : {
      "ObjectId" : "74ce51ff4c5ecdf0db3ba995b62d2a7a132c79b0",
      "LastModified" : "2018-01-19T12:30:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/bioinspired/CMakeLists.txt" : {
      "ObjectId" : "b0599a671fc7115d04c8fb00a0418d8d976459ed",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ccalib/CMakeLists.txt" : {
      "ObjectId" : "f803322ba9ba1ab7873b15d5300fa94e2d1560c3",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cnn_3dobj/CMakeLists.txt" : {
      "ObjectId" : "c00f64f5a13fb74abd90ebc91528dd6b725b217a",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Must be disabled by default - requires custom build of Caffe.\n",
        "Line" : 1,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 1
    },
    "modules/cnn_3dobj/FindCaffe.cmake" : {
      "ObjectId" : "21fa95c47d07628d5ed746d28067a117d942a269",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Caffe package for CNN Triplet training\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/cnn_3dobj/FindGlog.cmake" : {
      "ObjectId" : "b4093930af092c5cbfda8e33ce483d0816ee086b",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Glog package for CNN Triplet training\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/cudaarithm/CMakeLists.txt" : {
      "ObjectId" : "d552bb4ebe97d8806cd890fb335ed226f10d1355",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudabgsegm/CMakeLists.txt" : {
      "ObjectId" : "ffc6a628aeac35468ae66cba58c8b56fcaf3d464",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudacodec/CMakeLists.txt" : {
      "ObjectId" : "071404ecc76a2852345cf79539fe73ee5a8531d1",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudafeatures2d/CMakeLists.txt" : {
      "ObjectId" : "aba40283dd924de1856ea65b974d9324398492a5",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudafilters/CMakeLists.txt" : {
      "ObjectId" : "08281c135ceecbe212278c5d48e42c5b9744e76d",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudaimgproc/CMakeLists.txt" : {
      "ObjectId" : "8d06804ddcc50776c4a6d8a77bdaff9e00590d30",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudalegacy/CMakeLists.txt" : {
      "ObjectId" : "7fe342e11cb0ad6fbcd6eada6ca8a029d79c1d11",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudaobjdetect/CMakeLists.txt" : {
      "ObjectId" : "0001afaffd0a605bebbc2db0c22d2619f71d4f92",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudaoptflow/CMakeLists.txt" : {
      "ObjectId" : "88c98b044d4cbae150ea73345ee3a398dd5cd79b",
      "LastModified" : "2018-11-10T10:35:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudastereo/CMakeLists.txt" : {
      "ObjectId" : "c02086913cfd978db43d3b060f05c3b5c907fb64",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudawarping/CMakeLists.txt" : {
      "ObjectId" : "6370189b75cac6406e410ff71751886680a10c6a",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudev/CMakeLists.txt" : {
      "ObjectId" : "742f7c8ae55107f6936de3cddd3c4aed08ff4b88",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/cudev/test/CMakeLists.txt" : {
      "ObjectId" : "3a321c6409d257e95591f88835d8a645fec384df",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Additional target properties\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "modules/cvv/CMakeLists.txt" : {
      "ObjectId" : "709464ee89668b4a9b4ab9d625cbd176eff0c0e9",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Qt5\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/datasets/CMakeLists.txt" : {
      "ObjectId" : "56ca9e3100cea1234fbe7226ae0814dbc0a19efe",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GCC\n",
        "Line" : 5,
        "CharPositionInLine" : 85
      },
      "1" : {
        "Text" : "# Clang\n",
        "Line" : 7,
        "CharPositionInLine" : 98
      },
      "2" : {
        "Text" : "# flann, Win64\n\n# tinyxml2.cpp\n",
        "Line" : 13,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 3
    },
    "modules/dnn_objdetect/CMakeLists.txt" : {
      "ObjectId" : "895bffbeddb6a8c392e17f1a67bed5ab237c98a5",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# samples\n",
        "Line" : 4,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 1
    },
    "modules/dpm/CMakeLists.txt" : {
      "ObjectId" : "4d6a302b73b2cc4439cdc118c1c6a556ac4c0403",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# disable warning on Win64\n",
        "Line" : 5,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 1
    },
    "modules/face/CMakeLists.txt" : {
      "ObjectId" : "ce3d88874e6083da99faa69dec589d5e1ce86868",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# estimateAffinePartial2D() (trainFacemark)\n\n# seamlessClone() (face_swap sample)\n",
        "Line" : 5,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : "# NOTE: objdetect module is needed for one of the samples\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/face/samples/CMakeLists.txt" : {
      "ObjectId" : "cc8a75c5a61b1d07885c3cf22836398a783d5cd5",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(OpenCV_DIR /path/to/your/opencv/installation)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# packages\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# http://opencv.org\n",
        "Line" : 9,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "# probably you should loop through the sample files here\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "modules/freetype/CMakeLists.txt" : {
      "ObjectId" : "f188dc3547aea92ec2bd0f49eadcbca2b8ce730d",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/fuzzy/CMakeLists.txt" : {
      "ObjectId" : "e4e9ca60221b60622a5a1b09d47647e057b88c68",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/hdf/CMakeLists.txt" : {
      "ObjectId" : "2a1ae68bdf8a45f4b0c2904f747edb2d21393c50",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# windows cmake internal lookups are broken for now\n\n# will lookup for headers and shared libs given HDF_DIR env\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# iOS build should not reuse OSX package\n",
        "Line" : 19,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# no return\n",
        "Line" : 25,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 3
    },
    "modules/hfs/CMakeLists.txt" : {
      "ObjectId" : "1ffa2a55a67241ce62bee9d06749aeb11ed4ceed",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/hfs/samples/CMakeLists.txt" : {
      "ObjectId" : "e872c88890538802bfbd2ca7b5c323f08639ddc0",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/img_hash/CMakeLists.txt" : {
      "ObjectId" : "3231b3a9f176796e4722bfa34d82372a6f1a5eb6",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/line_descriptor/CMakeLists.txt" : {
      "ObjectId" : "0c18edf7d4aae8a6016e50245a1dea3b86ea2a10",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/matlab/CMakeLists.txt" : {
      "ObjectId" : "011a81cbd5586bae215073a68bf997dc383bbeca",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for Matlab/Octave support\n\n#\n\n#  Matlab code generation and compilation is broken down into two distinct\n\n#  stages: configure time and build time. The idea is that we want to give\n\n#  the user reasonable guarantees that once they type 'make', wrapper\n\n#  generation is unlikely to fail. Therefore we run a series of tests at\n\n#  configure time to check the working status of the core components.\n\n#\n\n#  Configure Time\n\n#  During configure time, the script attempts to ascertain whether the\n\n#  generator and mex compiler are working for a given architecture.\n\n#  Currently this involves:\n\n#   1) Generating a simple CV_EXPORTS_W symbol and checking whether a file\n\n#      of the symbol name is generated\n\n#   2) Compiling a simple mex gateway to check that Bridge.hpp and mex.h\n\n#      can be found, and that a file with the mexext is produced\n\n#\n\n#  Build Time\n\n#  If the configure time tests pass, then we assume Matlab wrapper generation\n\n#  will not fail during build time. We simply glob all of the symbols in\n\n#  the OpenCV module headers, generate intermediate .cpp files, then compile\n\n#  them with mex.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Architecture checks\n\n# ----------------------------------------------------------------------------\n\n# make sure we're on a supported architecture with Matlab and Python (with jinja2) installed\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Bindings generator requires Jinja2 python package\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# PREPEND\n\n# Given a list of strings IN and a TOKEN, prepend the token to each string\n\n# and append to OUT. This is used for passing command line \"-I\", \"-L\" and \"-l\"\n\n# arguments to mex. e.g.\n\n# prepend(\"-I\" OUT /path/to/include/dir) --> -I/path/to/include/dir\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# WARN_MIXED_PRECISION\n\n# Formats a warning message if the compiler and Matlab bitness is different\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the user built OpenCV as X-bit, but they have a Y-bit version of Matlab,\n\n# attempting to link to OpenCV during binding generation will fail, since\n\n# mixed precision pointers are not allowed. Disable the bindings.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If it's MSVC, warn the user that bindings will only be built in Release mode.\n\n# Debug mode seems to cause issues...\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Configure time components\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# get the commit information\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# set the path to the C++ header and doc parser, and template engine\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set mex compiler options\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# intersection of available modules and optional dependencies\n\n# 1. populate the command-line include directories (-I/path/to/module/header, ...)\n\n# 2. populate the command-line link libraries (-lopencv_core, ...) for Debug and Release\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add extra headers by hand\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# pass the OPENCV_CXX_EXTRA_FLAGS through to the mex compiler\n\n# remove the visibility modifiers, so the mex gateway is visible\n\n# TODO: get mex working without warnings\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Configure checks\n\n# Check to see whether the generator and the mex compiler are working.\n\n# The checks currently test:\n\n#   - whether the python generator can be found\n\n#   - whether the python generator correctly outputs a file for a definition\n\n#   - whether the mex compiler can find the required headers\n\n#   - whether the mex compiler can compile a trivial definition\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# attempt to generate a gateway for a function\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# attempt to compile a gateway using mex\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# if we make it here, mex works!\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Build time components\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# proxies\n\n# these proxies are used to trigger the add_custom_commands\n\n# (which do the real work) only when they're outdated\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TODO: Remove following line before merging with master\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# generate\n\n# call the python executable to generate the Matlab gateways\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# compile\n\n# call the mex compiler to compile the gateways\n\n# because we don't know the source files at configure-time, this\n\n# has to be executed in a separate script in cmake's script processing mode\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# targets\n\n# opencv_matlab_sources --> opencv_matlab\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Install time components\n\n# ----------------------------------------------------------------------------\n\n# NOTE: Trailing slashes on the DIRECTORY paths are important!\n\n# TODO: What needs to be done with rpath????\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# install the +cv directory verbatim\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# update the custom mex compiler to point to the install locations\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "modules/matlab/cmake/OpenCVFindMatlab.cmake" : {
      "ObjectId" : "5f13dff6b95d7be77ff69310d9bca408af119330",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----- Find Matlab/Octave -----\n\n#\n\n# OpenCVFindMatlab.cmake attempts to locate the install path of Matlab in order\n\n# to extract the mex headers, libraries and shell scripts. If found\n\n# successfully, the following variables will be defined\n\n#\n\n#   MATLAB_FOUND:       true/false\n\n#   MATLAB_ROOT_DIR:    Root of Matlab installation\n\n#   MATLAB_BIN:         The main Matlab \"executable\" (shell script)\n\n#   MATLAB_MEX_SCRIPT:  The mex script used to compile mex files\n\n#   MATLAB_INCLUDE_DIRS:Path to \"mex.h\"\n\n#   MATLAB_LIBRARY_DIRS:Path to mex and matrix libraries\n\n#   MATLAB_LIBRARIES:   The Matlab libs, usually mx, mex, mat\n\n#   MATLAB_MEXEXT:      The mex library extension. It will be one of:\n\n#                         mexwin32, mexwin64,  mexglx, mexa64, mexmac,\n\n#                         mexmaci,  mexmaci64, mexsol, mexs64\n\n#   MATLAB_ARCH:        The installation architecture. It is **usually**\n\n#                       the MEXEXT with the preceding \"mex\" removed,\n\n#                       though it's different for linux distros.\n\n#\n\n# There doesn't appear to be an elegant way to detect all versions of Matlab\n\n# across different platforms. If you know the matlab path and want to avoid\n\n# the search, you can define the path to the Matlab root when invoking cmake:\n\n#\n\n#   cmake -DMATLAB_ROOT_DIR='/PATH/TO/ROOT_DIR' ..\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----- set_library_presuffix -----\n\n#\n\n# Matlab tends to use some non-standard prefixes and suffixes on its libraries.\n\n# For example, libmx.dll on Windows (Windows does not add prefixes) and\n\n# mkl.dylib on OS X (OS X uses \"lib\" prefixes).\n\n# On some versions of Windows the .dll suffix also appears to not be checked.\n\n#\n\n# This function modifies the library prefixes and suffixes used by\n\n# find_library when finding Matlab libraries. It does not affect scopes\n\n# outside of this file.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----- locate_matlab_root -----\n\n#\n\n# Attempt to find the path to the Matlab installation. If successful, sets\n\n# the absolute path in the variable MATLAB_ROOT_DIR\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --- UNIX/APPLE ---\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# possible root locations, in order of likelihood\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# sort in order from highest to lowest\n\n# normally it's in the format MATLAB_R[20XX][A/B]\n\n# TODO: numerical rather than lexicographic sort. However,\n\n# CMake does not support floating-point MATH(EXPR ...) at this time.\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# --- WINDOWS ---\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# 1. search the path environment variable\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# get the root directory from the full path\n\n# /path/to/matlab/rootdir/bin/matlab.exe\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# 2. search the registry\n\n# determine the available Matlab versions\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# select the highest version\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# request the MATLABROOT from the registry\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# ----- locate_matlab_components -----\n\n#\n\n# Given a directory MATLAB_ROOT_DIR, attempt to find the Matlab components\n\n# (include directory and libraries) under the root. If everything is found,\n\n# sets the variable MATLAB_FOUND to TRUE\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# get the mex extension\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# map the mexext to an architecture extension\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# get the path to the libraries\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# get the libraries\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# get the include path\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# get the mex shell script\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# get the Matlab executable\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# export into parent scope\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# FIND MATLAB COMPONENTS\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# attempt to find the Matlab root folder\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# given the matlab root folder, find the library locations\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "modules/matlab/cmake/hooks/STATUS_DUMP_EXTRA.cmake" : {
      "ObjectId" : "2546dcc8903800e25a9e7cd8b3ec7750cea3293b",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ========================= matlab =========================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/matlab/cmake/init.cmake" : {
      "ObjectId" : "e3adccd112094d86e99dfd7381a1dc2aa41c42ef",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- Matlab/Octave ---\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# publish vars for status() dumper\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "modules/matlab/compile.cmake" : {
      "ObjectId" : "6801ca2f04057efbbb45b67b2d3619b8869ff5c4",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LISTIFY\n\n# Given a string of space-delimited tokens, reparse as a string of\n\n# semi-colon delimited tokens, which in CMake land is exactly equivalent\n\n# to a list\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# listify multiple-argument inputs\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if it's MSVC building a Debug configuration, don't build bindings\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Compile\n\n# -----------------------------------------------------------------------------\n\n# for each generated source file:\n\n# 1. check if the file has already been compiled\n\n# 2. attempt compile if required\n\n# 3. if the compile fails, throw an error and cancel compilation\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# strip out the filename\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# compile the source file using mex\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# TODO: If a mex file fails to compile, should we error out?\n\n# TODO: Warnings are currently treated as errors...\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "modules/matlab/test/CMakeLists.txt" : {
      "ObjectId" : "c8c5177faad8b995db1a967591fb384e2be979cb",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate\n\n# call the python executable to generate the Matlab gateways\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# targets\n\n# opencv_matlab_sources --> opencv_matlab\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# run the matlab test suite\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "modules/optflow/CMakeLists.txt" : {
      "ObjectId" : "e4232749ea20ba903bb68d5e34bef68c79bda43b",
      "LastModified" : "2018-12-30T10:10:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ovis/CMakeLists.txt" : {
      "ObjectId" : "870e95d4c9d9325ec70b56e947411b5ab77b5565",
      "LastModified" : "2019-01-10T09:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we need C++11 for OGRE 1.11\n",
        "Line" : 11,
        "CharPositionInLine" : 42
      },
      "CommentCount" : 1
    },
    "modules/phase_unwrapping/CMakeLists.txt" : {
      "ObjectId" : "906e86afbc870d6a153b1a9e09846841ed03af08",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/plot/CMakeLists.txt" : {
      "ObjectId" : "db5ff1f1de6c4bb31031cfe3c66e4d70dde904d9",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/quality/CMakeLists.txt" : {
      "ObjectId" : "0c259ba86cc65f1f71cb6d7dc1a7051931d564e9",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/reg/CMakeLists.txt" : {
      "ObjectId" : "cb928cf886d5f6dcfc8d15d27c7a71dd7c49d378",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/reg/samples/CMakeLists.txt" : {
      "ObjectId" : "6d190483db19cc06991ca290366b02829ab42474",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/rgbd/CMakeLists.txt" : {
      "ObjectId" : "7f2f6a672573a86a42d413fb88f919382a175290",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/saliency/CMakeLists.txt" : {
      "ObjectId" : "f9bbffc9177d67fc1d7ebde72908e2ff75523443",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/sfm/CMakeLists.txt" : {
      "ObjectId" : "53a8d4378a9f346d8a52825a06cead3630dee92c",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### LIBMV LIGHT EXTERNAL DEPENDENCIES ###\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Looks like Ceres find glog on the own, so separate search isn't necessary\n",
        "Line" : 9,
        "CharPositionInLine" : 21
      },
      "2" : {
        "Text" : "### LIBMV LIGHT DEFINITIONS ###\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### COMPILE WITH C++11 IF CERES WAS COMPILED WITH C++11\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### DEFINE OPENCV SFM MODULE DEPENDENCIES ###\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### CREATE OPENCV SFM MODULE ###\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# source files\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# define the header files (make the headers appear in IDEs.)\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# build libmv_light\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# See ocv_target_include_directories() implementation\n",
        "Line" : 121,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : "### CREATE OPENCV SFM TESTS ###\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### CREATE OPENCV SFM SAMPLES ###\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "modules/sfm/cmake/FindGflags.cmake" : {
      "ObjectId" : "d3b45dae572f7c6b1ff49d4e9ee609824f54a6ae",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2015 Google Inc. All rights reserved.\n\n# http://ceres-solver.org/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindGflags.cmake - Find Google gflags logging library.\n\n#\n\n# This module will attempt to find gflags, either via an exported CMake\n\n# configuration (generated by gflags >= 2.1 which are built with CMake), or\n\n# by performing a standard search for all gflags components.  The order of\n\n# precedence for these two methods of finding gflags is controlled by:\n\n# GFLAGS_PREFER_EXPORTED_GFLAGS_CMAKE_CONFIGURATION.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# GFLAGS_FOUND: TRUE iff gflags is found.\n\n# GFLAGS_INCLUDE_DIRS: Include directories for gflags.\n\n# GFLAGS_LIBRARIES: Libraries required to link gflags.\n\n# GFLAGS_NAMESPACE: The namespace in which gflags is defined.  In versions of\n\n#                   gflags < 2.1, this was google, for versions >= 2.1 it is\n\n#                   by default gflags, although can be configured when building\n\n#                   gflags to be something else (i.e. google for legacy\n\n#                   compatibility).\n\n#\n\n# The following variables control the behaviour of this module when an exported\n\n# gflags CMake configuration is not found.\n\n#\n\n# GFLAGS_PREFER_EXPORTED_GFLAGS_CMAKE_CONFIGURATION: TRUE/FALSE, iff TRUE then\n\n#                           then prefer using an exported CMake configuration\n\n#                           generated by gflags >= 2.1 over searching for the\n\n#                           gflags components manually.  Otherwise (FALSE)\n\n#                           ignore any exported gflags CMake configurations and\n\n#                           always perform a manual search for the components.\n\n#                           Default: TRUE iff user does not define this variable\n\n#                           before we are called, and does NOT specify either\n\n#                           GFLAGS_INCLUDE_DIR_HINTS or GFLAGS_LIBRARY_DIR_HINTS\n\n#                           otherwise FALSE.\n\n# GFLAGS_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                           search for gflags includes, e.g: /timbuktu/include.\n\n# GFLAGS_LIBRARY_DIR_HINTS: List of additional directories in which to\n\n#                           search for gflags libraries, e.g: /timbuktu/lib.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# GFLAGS_INCLUDE_DIR: Include directory for gflags, not including the\n\n#                     include directory of any dependencies.\n\n# GFLAGS_LIBRARY: gflags library, not including the libraries of any\n\n#                 dependencies.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reset CALLERS_CMAKE_FIND_LIBRARY_PREFIXES to its value when FindGflags was\n\n# invoked, necessary for MSVC.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Called if we failed to find gflags or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Do not use unset, as we want to keep GFLAGS_NAMESPACE in the cache,\n\n# but simply clear its value.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Make results of search visible in the CMake GUI if gflags has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Verify that all variable names passed as arguments are defined (can be empty\n\n# but must be defined) or raise a fatal error.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use check_cxx_source_compiles() to compile trivial test programs to determine\n\n# the gflags namespace.  This works on all OSs except Windows.  If using Visual\n\n# Studio, it fails because msbuild forces check_cxx_source_compiles() to use\n\n# CMAKE_BUILD_TYPE=Debug for the test project, which usually breaks detection\n\n# because MSVC requires that the test project use the same build type as gflags,\n\n# which would normally be built in Release.\n\n#\n\n# Defines: GFLAGS_NAMESPACE in the caller's scope with the detected namespace,\n\n#          which is blank (empty string, will test FALSE is CMake conditionals)\n\n#          if detection failed.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Verify that all required variables are defined.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Ensure that GFLAGS_NAMESPACE is always unset on completion unless\n\n# we explicitly set if after having the correct namespace.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Setup include path & link library for gflags for CHECK_CXX_SOURCE_COMPILES.\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# First try the (older) google namespace.  Note that the output variable\n\n# MUST be unique to the build type as otherwise the test is not repeated as\n\n# it is assumed to have already been performed.\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Try (newer) gflags namespace instead.  Note that the output variable\n\n# MUST be unique to the build type as otherwise the test is not repeated as\n\n# it is assumed to have already been performed.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Use regex on the gflags headers to attempt to determine the gflags namespace.\n\n# Checks both gflags.h (contained namespace on versions < 2.1.2) and\n\n# gflags_declare.h, which contains the namespace on versions >= 2.1.2.\n\n# In general, this method should only be used when\n\n# GFLAGS_CHECK_GFLAGS_NAMESPACE_USING_TRY_COMPILE() cannot be used, or has\n\n# failed.\n\n#\n\n# Defines: GFLAGS_NAMESPACE in the caller's scope with the detected namespace,\n\n#          which is blank (empty string, will test FALSE is CMake conditionals)\n\n#          if detection failed.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Verify that all required variables are defined.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Ensure that GFLAGS_NAMESPACE is always undefined on completion unless\n\n# we explicitly set if after having the correct namespace.\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Scan gflags.h to identify what namespace gflags was built with.  On\n\n# versions of gflags < 2.1.2, gflags.h was configured with the namespace\n\n# directly, on >= 2.1.2, gflags.h uses the GFLAGS_NAMESPACE #define which\n\n# is defined in gflags_declare.h, we try each location in turn.\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Found valid gflags namespace from gflags.h.\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Failed to find gflags namespace from gflags.h, gflags is likely a new\n\n# version, check gflags_declare.h, which in newer versions (>= 2.1.2) contains\n\n# the GFLAGS_NAMESPACE #define, which is then referenced in gflags.h.\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Found valid gflags namespace from gflags.h.\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# -----------------------------------------------------------------\n\n# By default, if the user has expressed no preference for using an exported\n\n# gflags CMake configuration over performing a search for the installed\n\n# components, and has not specified any hints for the search locations, then\n\n# prefer a gflags exported configuration if available.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Wrap into function because gflags_report_not_found() uses \"return\" statement\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Try to find an exported CMake configuration for gflags, as generated by\n\n# gflags versions >= 2.1.\n\n#\n\n# We search twice, s/t we can invert the ordering of precedence used by\n\n# find_package() for exported package build directories, and installed\n\n# packages (found via CMAKE_SYSTEM_PREFIX_PATH), listed as items 6) and 7)\n\n# respectively in [1].\n\n#\n\n# By default, exported build directories are (in theory) detected first, and\n\n# this is usually the case on Windows.  However, on OS X & Linux, the install\n\n# path (/usr/local) is typically present in the PATH environment variable\n\n# which is checked in item 4) in [1] (i.e. before both of the above, unless\n\n# NO_SYSTEM_ENVIRONMENT_PATH is passed).  As such on those OSs installed\n\n# packages are usually detected in preference to exported package build\n\n# directories.\n\n#\n\n# To ensure a more consistent response across all OSs, and as users usually\n\n# want to prefer an installed version of a package over a locally built one\n\n# where both exist (esp. as the exported build directory might be removed\n\n# after installation), we first search with NO_CMAKE_PACKAGE_REGISTRY which\n\n# means any build directories exported by the user are ignored, and thus\n\n# installed directories are preferred.  If this fails to find the package\n\n# we then research again, but without NO_CMAKE_PACKAGE_REGISTRY, so any\n\n# exported build directories will now be detected.\n\n#\n\n# To prevent confusion on Windows, we also pass NO_CMAKE_BUILDS_PATH (which\n\n# is item 5) in [1]), to not preferentially use projects that were built\n\n# recently with the CMake GUI to ensure that we always prefer an installed\n\n# version if available.\n\n#\n\n# [1] http://www.cmake.org/cmake/help/v2.8.11/cmake.html#command:find_package\n",
        "Line" : 292,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Failed to find an installed version of gflags, repeat search allowing\n\n# exported build directories.\n",
        "Line" : 330,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Again pass NO_CMAKE_BUILDS_PATH, as we know that gflags is exported and\n\n# do not want to treat projects built with the CMake GUI preferentially.\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# gflags v2.1 - 2.1.2 shipped with a bug in their gflags-config.cmake [1]\n\n# whereby gflags_LIBRARIES = \"gflags\", but there was no imported target\n\n# called \"gflags\", they were called: gflags[_nothreads]-[static/shared].\n\n# As this causes linker errors when gflags is not installed in a location\n\n# on the current library paths, detect if this problem is present and\n\n# fix it.\n\n#\n\n# [1] https://github.com/gflags/gflags/issues/110\n",
        "Line" : 346,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# NOTE: This is not written as additional conditions in the outer\n\n#       if (gflags_FOUND) as the NOT TARGET \"${gflags_LIBRARIES}\"\n\n#       condition causes problems if gflags is not found.\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Ordering here expresses preference for detection, specifically we do not\n\n# want to use the _nothreads variants if the full library is available.\n",
        "Line" : 365,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# gflags does not export the namespace in their CMake configuration, so\n\n# use our function to determine what it should be, as it can be either\n\n# gflags or google dependent upon version & configuration.\n\n#\n\n# NOTE: We use the regex method to determine the namespace here, as\n\n#       check_cxx_source_compiles() will not use imported targets, which\n\n#       is what gflags will be in this case.\n",
        "Line" : 406,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Either failed to find an exported gflags CMake configuration, or user\n\n# told us not to use one.  Perform a manual search for all gflags components.\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Handle possible presence of lib prefix for libraries on MSVC, see\n\n# also GFLAGS_RESET_FIND_LIBRARY_PREFIX().\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Preserve the caller's original values for CMAKE_FIND_LIBRARY_PREFIXES\n\n# s/t we can set it back before returning.\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# The empty string in this list is important, it represents the case when\n\n# the libraries have no prefix (shared libraries / DLLs).\n",
        "Line" : 445,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Mac OS X\n",
        "Line" : 454,
        "CharPositionInLine" : 32
      },
      "37" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 455,
        "CharPositionInLine" : 37
      },
      "38" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 459,
        "CharPositionInLine" : 19
      },
      "39" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 460,
        "CharPositionInLine" : 21
      },
      "40" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 464,
        "CharPositionInLine" : 28
      },
      "41" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 468,
        "CharPositionInLine" : 15
      },
      "42" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 469,
        "CharPositionInLine" : 17
      },
      "43" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# gflags typically requires a threading library (which is OS dependent), note\n\n# that this defines the CMAKE_THREAD_LIBS_INIT variable.  If we are able to\n\n# detect threads, we assume that gflags requires it.\n",
        "Line" : 497,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# On Windows (including MinGW), the Shlwapi library is used by gflags if\n\n# available.\n",
        "Line" : 502,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Mark internally as found, then verify. GFLAGS_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 512,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Identify what namespace gflags was built with.\n",
        "Line" : 516,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# To handle Windows peculiarities / CMake bugs on MSVC we try two approaches\n\n# to detect the gflags namespace:\n\n#\n\n# 1) Try to use check_cxx_source_compiles() to compile a trivial program\n\n#    with the two choices for the gflags namespace.\n\n#\n\n# 2) [In the event 1) fails] Use regex on the gflags headers to try to\n\n#    determine the gflags namespace.  Whilst this is less robust than 1),\n\n#    it does avoid any interaction with msbuild.\n",
        "Line" : 518,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Failed to determine gflags namespace using check_cxx_source_compiles()\n\n# method, try and obtain it using regex on the gflags headers instead.\n",
        "Line" : 530,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# Make the GFLAGS_NAMESPACE a cache variable s/t the user can view it, and could\n\n# overwrite it in the CMake GUI.\n",
        "Line" : 545,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# gflags does not seem to provide any record of the version in its\n\n# source tree, thus cannot extract version.\n",
        "Line" : 550,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Catch case when caller has set GFLAGS_NAMESPACE in the cache / GUI\n\n# with an invalid value.\n",
        "Line" : 553,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Catch case when caller has set GFLAGS_INCLUDE_DIR in the cache / GUI and\n\n# thus FIND_[PATH/LIBRARY] are not called, but specified locations are\n\n# invalid, otherwise we would report the library as found.\n",
        "Line" : 562,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# TODO: This regex for gflags library is pretty primitive, we use lowercase\n\n#       for comparison to handle Windows using CamelCase library names, could\n\n#       this check be better?\n",
        "Line" : 572,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments.\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Only mark internal variables as advanced if we found gflags, otherwise\n\n# leave them visible in the standard GUI for the user to set manually.\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Autogenerated by find_package(gflags)\n",
        "Line" : 605,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 59
    },
    "modules/sfm/cmake/FindGlog.cmake" : {
      "ObjectId" : "3057b312d230a4ba539dfbe2196fe2868a3a3034",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2015 Google Inc. All rights reserved.\n\n# http://ceres-solver.org/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindGlog.cmake - Find Google glog logging library.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# GLOG_FOUND: TRUE iff glog is found.\n\n# GLOG_INCLUDE_DIRS: Include directories for glog.\n\n# GLOG_LIBRARIES: Libraries required to link glog.\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# GLOG_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                         search for glog includes, e.g: /timbuktu/include.\n\n# GLOG_LIBRARY_DIR_HINTS: List of additional directories in which to\n\n#                         search for glog libraries, e.g: /timbuktu/lib.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# GLOG_INCLUDE_DIR: Include directory for glog, not including the\n\n#                   include directory of any dependencies.\n\n# GLOG_LIBRARY: glog library, not including the libraries of any\n\n#               dependencies.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reset CALLERS_CMAKE_FIND_LIBRARY_PREFIXES to its value when\n\n# FindGlog was invoked.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Called if we failed to find glog or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make results of search visible in the CMake GUI if glog has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Handle possible presence of lib prefix for libraries on MSVC, see\n\n# also GLOG_RESET_FIND_LIBRARY_PREFIX().\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Preserve the caller's original values for CMAKE_FIND_LIBRARY_PREFIXES\n\n# s/t we can set it back before returning.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The empty string in this list is important, it represents the case when\n\n# the libraries have no prefix (shared libraries / DLLs).\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Mac OS X\n",
        "Line" : 114,
        "CharPositionInLine" : 30
      },
      "12" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 115,
        "CharPositionInLine" : 35
      },
      "13" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 127,
        "CharPositionInLine" : 26
      },
      "15" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Mark internally as found, then verify. GLOG_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Glog does not seem to provide any record of the version in its\n\n# source tree, thus cannot extract version.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Catch case when caller has set GLOG_INCLUDE_DIR in the cache / GUI and\n\n# thus FIND_[PATH/LIBRARY] are not called, but specified locations are\n\n# invalid, otherwise we would report the library as found.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TODO: This regex for glog library is pretty primitive, we use lowercase\n\n#       for comparison to handle Windows using CamelCase library names, could\n\n#       this check be better?\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Only mark internal variables as advanced if we found glog, otherwise\n\n# leave them visible in the standard GUI for the user to set manually.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "modules/sfm/src/libmv_light/CMake/Installation.cmake" : {
      "ObjectId" : "0c8afec3e18a7f6d1782b947f1fc914c10e76b0b",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Install macro for libmv libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/sfm/src/libmv_light/CMakeLists.txt" : {
      "ObjectId" : "ec7d47e8f75feb0be3d4a5ebdbdcb00618972a84",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# installation rules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Force static libs for 3rdparty dependencies\n",
        "Line" : 4,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 2
    },
    "modules/sfm/src/libmv_light/libmv/CMakeLists.txt" : {
      "ObjectId" : "103b72882630bc747a5f707849d706bb151d232f",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/sfm/src/libmv_light/libmv/base/CMakeLists.txt" : {
      "ObjectId" : "5c54b13649ed5d9d67772c2dd488ff2992a7777a",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define the source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the header files (make the headers appear in IDEs.)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/sfm/src/libmv_light/libmv/correspondence/CMakeLists.txt" : {
      "ObjectId" : "5aac7bab6fc1745e38d45b9e27968abf731aa50e",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define the source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the header files (make the headers appear in IDEs.)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/sfm/src/libmv_light/libmv/multiview/CMakeLists.txt" : {
      "ObjectId" : "b99ffbe0a7b93e3c81f357d92f855e78fcf7145f",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define the source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the header files (make the headers appear in IDEs.)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/sfm/src/libmv_light/libmv/numeric/CMakeLists.txt" : {
      "ObjectId" : "5ecd541ccee3451e4bc7328a8f1f7f5ae0e7b029",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define the source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the header files (make the headers appear in IDEs.)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/sfm/src/libmv_light/libmv/simple_pipeline/CMakeLists.txt" : {
      "ObjectId" : "42e379198001025b3c7da8a78074500e88d21e91",
      "LastModified" : "2018-10-13T15:08:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the header files so that they appear in IDEs.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/shape/CMakeLists.txt" : {
      "ObjectId" : "61beeb66078ce02c33d0d80fb0671634c044511b",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/stereo/CMakeLists.txt" : {
      "ObjectId" : "25412b6a12bd5e8edcd2304256c6ea25d33b57c2",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/structured_light/CMakeLists.txt" : {
      "ObjectId" : "ca06f1aee63d6025c0db8ade5f2a8f5ebed9be88",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/superres/CMakeLists.txt" : {
      "ObjectId" : "2979ef0fb878c2a8d81ad85893c4dce7128e3a06",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/surface_matching/CMakeLists.txt" : {
      "ObjectId" : "8887bbcd763961995c1439cf7e33b522f2e7bbfc",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/text/CMakeLists.txt" : {
      "ObjectId" : "20f9cd7528ce14161f41a46b3e2695e5dce339a5",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/text/cmake/FindTesseract.cmake" : {
      "ObjectId" : "5bdbe24361621dc9d1ee213341f5ca3e8d094647",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tesseract OCR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/tracking/CMakeLists.txt" : {
      "ObjectId" : "6fa88af29cb75f06ef008154a338d8de6e18c6ef",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videostab/CMakeLists.txt" : {
      "ObjectId" : "c31fcfceb5ff3eff813018782dffdce50aee81f8",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/viz/CMakeLists.txt" : {
      "ObjectId" : "5ccca7c84758cecef893985886024b7635cbbb2b",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We observed conflict between builtin 3rdparty libraries and\n\n# system-wide similar libraries (but with different versions) from VTK dependencies\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "modules/xfeatures2d/CMakeLists.txt" : {
      "ObjectId" : "84c8f10560964bd101fb2b601e5a1b2a8dc0044c",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use common files from features2d tests\n",
        "Line" : 17,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 1
    },
    "modules/xfeatures2d/cmake/download_boostdesc.cmake" : {
      "ObjectId" : "87bedf98f371c7a134336b676d43198ca03b1d6c",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/xfeatures2d/cmake/download_vgg.cmake" : {
      "ObjectId" : "67e1f8f041a621eb55eb5dc3b7d3b948e4080497",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ximgproc/CMakeLists.txt" : {
      "ObjectId" : "f6f88bec66dc13f3daac0bacee878c74e0b043e8",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ximgproc/samples/CMakeLists.txt" : {
      "ObjectId" : "aa6d6a6da04285398a2c3ec856894a711ab6a7e9",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/xobjdetect/CMakeLists.txt" : {
      "ObjectId" : "1727a42b75b7557120ca6231ee2bed16c11a6d6a",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/xobjdetect/tools/CMakeLists.txt" : {
      "ObjectId" : "5c40af12ee7135e29b9de15e599ef77603e2165f",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/xobjdetect/tools/waldboost_detector/CMakeLists.txt" : {
      "ObjectId" : "8ed7eb6dbcec295d7d61832d97312b986503ce4a",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/xphoto/CMakeLists.txt" : {
      "ObjectId" : "a05848d389f5d754fb7517324f3e4a785cbd900b",
      "LastModified" : "2019-03-18T18:53:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 78
  },
  "ElapsedTime" : 5145
}