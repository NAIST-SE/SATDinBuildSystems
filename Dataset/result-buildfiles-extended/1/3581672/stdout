{
  "Repository" : "3581672",
  "Revision" : "HEAD",
  "ObjectId" : "0500649f2b3bcb97e6489b6d223b11a625a28b4c",
  "CommitTime" : "2019-04-04T09:56:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "eb0a78657f999d1b43bf20ec2cf54cc17d80aff4",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set up project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# general stuff\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#find dune-common and set the module path\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include the dune macros\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# start a dune project with information from dune.module\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use a  custom section to export path to the grid examples.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# finalize the dune project, e.g. generating config.h etc.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/AddAlbertaFlags.cmake" : {
      "ObjectId" : "89137145614bb60e1df55153f16514577eaff1c5",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module providing convenience methods for compile binaries with Alberta support.\n\n#\n\n# .. cmake_function:: add_dune_alberta_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       The targets to add the Alberta flags to.\n\n#\n\n#    .. cmake_param:: OBJECT|SOURCE_ONLY\n\n#       :option:\n\n#\n\n#       TODO: doc me\n\n#\n\n#    .. cmake_param:: USE_GENERIC\n\n#       :option:\n\n#\n\n#       TODO doc me\n\n#\n\n#    .. cmake_param:: GRIDDIM\n\n#       :single:\n\n#\n\n#       The dimension of the grid, defaults to 2.\n\n#\n\n#    .. cmake_param:: WORLDDIM\n\n#       :single:\n\n#\n\n#       The dimension of the world space, defaults to :code:`GRIDDIM`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link to ALBERTA libraries\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/modules/AddAmiraMeshFlags.cmake" : {
      "ObjectId" : "e0dde8725fe2e26541b88fe524206382cfe1605f",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module providing convenience methods for compile binaries with AmiraMesh support.\n\n#\n\n# .. cmake_function:: add_dune_amiramesh_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :single:\n\n#       :positional:\n\n#       :required:\n\n#\n\n#       The targets to add the amiramesh flags to.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddPsurfaceFlags.cmake" : {
      "ObjectId" : "47b4551b009919cc9013c039defd7583362fdcf2",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module providing convenience methods for compile binaries with psurface support.\n\n#\n\n# .. cmake_function:: add_dune_psurface_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       the targets to add the Psurface flags to.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "3c858bdd787bd32e1f919213ee0b335054dcd064",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/DuneGridMacros.cmake" : {
      "ObjectId" : "940abe1c873fa5e82ab46bb218e769f7724d9f50",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    This modules content is executed whenever a module required or suggests dune-grid!\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindAlberta.cmake" : {
      "ObjectId" : "6f56e49ca76583fa7a48f2ca30f44e825555d819",
      "LastModified" : "2018-11-08T14:56:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that checks whether the Alberta grid manager is available and usable.\n\n#\n\n#    Variables used by this module which you may want to set:\n\n#\n\n#    :ref:`ALBERTA_ROOT`\n\n#       Path list to search for psurface\n\n#\n\n#    Sets the follwing variables:\n\n#\n\n#    :code:`ALBERTA_FOUND`\n\n#       True if Alberta available and usable.\n\n#\n\n#    :code:`ALBERTA_VERSION`\n\n#       The version number of the found Alberta package\n\n#\n\n#    TODO: document this more, there was 0 doc before!\n\n#\n\n# .. cmake_variable:: ALBERTA_ROOT\n\n#\n\n#    You may set this variable to have :ref:`FindAlberta` look\n\n#    for the Alberta package in the given path before inspecting\n\n#    system paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check for ltdl\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# look for header alberta/alberta.h\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check version, Alberta 2 or 3\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# look for libraries\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# check for which dimensions are supported Alberta installation\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(CMAKE_REQUIRED_LIBRARIES ${_CMAKE_REQUIRED_LIBRARIES_OLD} ${ALBERTA_${dim}D_LIB} ${ALBERTA_UTIL_LIB} ${DUNE_LIBS})\n",
        "Line" : 122,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindAmiraMesh.cmake" : {
      "ObjectId" : "dfae86c0c13f0f37ed177b1352ec121f702c70bf",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that checks whether AmiraMesh is available and usable.\n\n#\n\n#    Variables used by this module which you may want to set:\n\n#\n\n#    :ref:`AMIRAMESH_ROOT`\n\n#       Path list to search for AmiraMesh\n\n#\n\n#    Sets the follwing variable:\n\n#\n\n#    :code:`AMIRAMESH_FOUND`\n\n#       True if AmiraMesh available and usable.\n\n#\n\n#    :code:`AMIRAMESH_INCLUDE_DIRS`\n\n#       Path to the AmiraMesh include dirs.\n\n#\n\n#    :code:`AMIRAMESH_LIBRARIES`\n\n#       Name to the AmiraMesh library.\n\n#\n\n# .. cmake_variable:: AMIRAMESH_ROOT\n\n#\n\n#    You may set this variable to have :ref:`FindAmiraMesh` look\n\n#    for the AmiraMesh package in the given path before inspecting\n\n#    system paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindPsurface.cmake" : {
      "ObjectId" : "0768a7285fc42f0d7dc6eddce6ca8a51bee6dacf",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that checks whether psurface is available and usable.\n\n#\n\n#    Variables used by this module which you may want to set:\n\n#\n\n#    :ref:`PSURFACE_ROOT`\n\n#       Path list to search for psurface\n\n#\n\n#    Sets the follwing variables:\n\n#\n\n#    :code:`PSURFACE_FOUND`\n\n#       True if PSurface available and usable.\n\n#\n\n#    :code:`PSURFACE_INCLUDE_DIRS`\n\n#       Path to the PSurface include dirs.\n\n#\n\n#    :code:`PSURFACE_LIBRARIES`\n\n#       Name to the PSurface library.\n\n#\n\n# .. cmake_variable:: PSURFACE_ROOT\n\n#\n\n#    You may set this variable to have :ref:`FindPsurface` look\n\n#    for the Psurface package in the given path before inspecting\n\n#    system paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# look for header files, only at positions given by the user\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# look for header files, including default paths\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# look for library, only at positions given by the user\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# look for library files, including default paths\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# check version specific macros\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Try to find psurface with pkg-config (for psurface 2.0 or newer)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# first only at positions given by the user\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# including default paths\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# try again with path temporarilly added to PKG_CONFIG_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# re-set PKG_CONFIG_PATH\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if both headers and library are found, store results\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# log result\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# log errornous result\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# set HAVE_PSURFACE for config.h\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# register all psurface related flags\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/modules/GridType.cmake" : {
      "ObjectId" : "84d8b3a3b3801d112e87f3122eb9a149e8722992",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Implement the GRIDTYPE preprocessor magic\n\n#\n\n# .. cmake_function:: dune_define_gridtype\n\n#\n\n#    .. cmake_param:: output\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       String variable grid definition is written to.\n\n#\n\n#    .. cmake_param:: GRIDTYPE\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The name of the grid type to register, .e.g. YASPGRID.\n\n#\n\n#    .. cmake_param:: DUNETYPE\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The C++ type of the grid to be used for the typedef, e.g. YaspGrid< dimgrid >.\n\n#\n\n#    .. cmake_param:: ASSERTION\n\n#       :single:\n\n#\n\n#       Condition to be checked by the preprocessor, e.g. GRIDDIM == WORLDDIM for grids like YaspGrid.\n\n#\n\n#    .. cmake_param:: HEADERS\n\n#       :multi:\n\n#       :required:\n\n#\n\n#       The header files that need to be included when using this grid.\n\n#\n\n#    This function registers a new type for the GRIDTYPE magic.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# option to enable GridSelector\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if disabled print message how to enable\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/UseUG.cmake" : {
      "ObjectId" : "902761faa021635896d77e9d6b58a543d6c0105c",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If dune-uggrid was found this module adds the dgf magic to config.h\n\n# and makes add_dune_ug_flags available.\n\n#\n\n# .. cmake_function:: add_dune_ug_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :single:\n\n#       :positional:\n\n#       :required:\n\n#\n\n#       The targets to add the UG flags to.\n\n#\n\n#    .. cmake_param:: SOURCE_ONLY\n\n#       :option:\n\n#\n\n#       TODO doc me\n\n#       old doc: indicates that the targets are source files.\n\n#\n\n#    .. cmake_param:: OBJECT\n\n#       :option:\n\n#\n\n#       TODO doc me\n\n#       old doc: indicates that the targets are object libraries.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add dgf magic to config.h and register flags\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add flags to targets\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add compiler flags\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add mpi flags.\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "config.h.cmake" : {
      "ObjectId" : "a4f5c337939bcc57c7c0efe1acf85f70706c1e6c",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* begin dune-grid\n   put the definitions for config.h specific to\n   your project here. Everything above will be\n   overwritten\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* begin private */\n/* Name of package */",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to the one symbol short name of this package. */",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to the home page for this package. */",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* end private */",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to the version of dune-grid */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to the major version of dune-grid */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to the minor version of dune-grid */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to the revision of dune-grid */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* If this is set, public access to the implementation of facades like Entity, Geometry, etc. is granted. (deprecated) */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define to 1 if psurface library is found */",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define to 1 if AmiraMesh library is found */",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* The namespace prefix of the psurface library (deprecated) */",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to 1 if you have at least psurface version 2.0 */",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Alberta version found by configure, either 0x200 for 2.0 or 0x300 for 3.0 */",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* This is only true if alberta-library was found by configure _and_ if the\n   application uses the ALBERTA_CPPFLAGS */",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* This is only true if UG was found by configure _and_ if the application\n   uses the UG_CPPFLAGS */",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to 1 if you have mkstemp function */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* begin bottom */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Grid type magic for DGF parser */",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* end bottom */",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* end dune-grid */",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "b0ab325e96c4bc8b616374789df54536edffe8a0",
      "LastModified" : "2013-02-08T12:19:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/doxygen/CMakeLists.txt" : {
      "ObjectId" : "f7b8ea5c993424d9524394428ec8f2ca9160b66a",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# shortcut for creating the Doxyfile.in and Doxyfile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/grids/CMakeLists.txt" : {
      "ObjectId" : "4a486c7817f0f634b8fb01d03eb67d67d8379937",
      "LastModified" : "2012-08-16T19:49:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/grids/amc/CMakeLists.txt" : {
      "ObjectId" : "1d55e5c252080b8c57c5ee72e9582bd775cda321",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/grids/amiramesh/CMakeLists.txt" : {
      "ObjectId" : "514a0f27a22749f13f549e750fa1ec25e9a2afcc",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/grids/dgf/CMakeLists.txt" : {
      "ObjectId" : "0685aedaf052968723e7fb8098a4f0e2b85303b9",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/grids/gmsh/CMakeLists.txt" : {
      "ObjectId" : "24842ec8e53430d9e589cc084b7037bbb2792128",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/grids/gridfactory/CMakeLists.txt" : {
      "ObjectId" : "1fe31a3f4d92e2d4ce14457df71fd9ff6651995d",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/grids/starcd/CMakeLists.txt" : {
      "ObjectId" : "dacfc59a33f6a7cef362529c1a14d78fbf5eb376",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/CMakeLists.txt" : {
      "ObjectId" : "de133bf8d9b874df5d7240fc9d4e5bcef259e587",
      "LastModified" : "2012-08-16T19:49:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/CMakeLists.txt" : {
      "ObjectId" : "488e77c5ece2ac3422c1aade474ff78e15513282",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/albertagrid/CMakeLists.txt" : {
      "ObjectId" : "25e5de60bc9d9ebf1315b4de7a5575dffdf8c069",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create dimension dependent alberta libraries\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#install header\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dune/grid/albertagrid/test/CMakeLists.txt" : {
      "ObjectId" : "39e55c37131fe69b44a9e70bd7eefcaacb4b0849",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/common/CMakeLists.txt" : {
      "ObjectId" : "8084a55d5bb646dccd8c8d6fc8cb2e3d64ca8a40",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/common/test/CMakeLists.txt" : {
      "ObjectId" : "f3d1cc47d14eb51f54c3afe0c0915be848f7e9da",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/geometrygrid/CMakeLists.txt" : {
      "ObjectId" : "ed715a89a8673c785e8b69c4f4a8589c64639895",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/identitygrid/CMakeLists.txt" : {
      "ObjectId" : "156f98d3c4eca4de34dfcaa82142ade4be960c57",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/CMakeLists.txt" : {
      "ObjectId" : "e90c00347b2d1abe8a6ff95ed2002826deb70dcb",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/file/CMakeLists.txt" : {
      "ObjectId" : "4d534b5dcdd8943bae3fe6d25fedf4b5eb8f0497",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/file/amiramesh/CMakeLists.txt" : {
      "ObjectId" : "5f5893c5cd1bfb842c7cc2f950fa1e4ead723271",
      "LastModified" : "2012-08-16T19:49:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/file/dgfparser/CMakeLists.txt" : {
      "ObjectId" : "139f259e5605ac82cce519588b7a26b82b1a4b28",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/file/dgfparser/blocks/CMakeLists.txt" : {
      "ObjectId" : "066b8b3663f979619fa9866a2ad6481167755cf4",
      "LastModified" : "2018-11-20T13:11:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_dune_mpi_flags(dgfparserblocks)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dune/grid/io/file/dgfparser/test/CMakeLists.txt" : {
      "ObjectId" : "07746b11b3cb7a6e76a2719d28a925b839b10a69",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/file/dgfparser/utils/CMakeLists.txt" : {
      "ObjectId" : "efbf863a7fe3e3f0ce3ab82ce653fdb41236c4fd",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/file/gnuplot/CMakeLists.txt" : {
      "ObjectId" : "bef4a958afb9bcac070230600bfc4c3175773aca",
      "LastModified" : "2012-08-16T19:49:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/io/file/test/CMakeLists.txt" : {
      "ObjectId" : "2cdcdd4496526890fc7161ced01b4bcc256728ab",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO when porting this file to dune_add_test, the GMSH test needed to be adapted.\n\n# It previously relied on the flags added to the executable to switch different grid types.\n\n# I have adapted it quickly by adding a preprocesor variable. This could be and should\n\n# be done more nicely.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the gmsh tests\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dune/grid/io/file/vtk/CMakeLists.txt" : {
      "ObjectId" : "6ea28bf942e6098d63720d99574d06eb217bbb12",
      "LastModified" : "2015-10-15T13:26:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/onedgrid/CMakeLists.txt" : {
      "ObjectId" : "d821b005c14eaad153a212e43fa8f79b0c37365a",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some of the OnedGrid headers do not pass make headercheck,\n\n# and they don't need to necessarily. Remove this line when headers are fixed\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dune/grid/test/CMakeLists.txt" : {
      "ObjectId" : "88b19331331baef1776a2dc325778801bedb93e6",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The alberta tests are only alibi-ported, until the  grid and world dimension\n\n# are configuretime parameters and we can treat alberta just as any other grid manager\n\n# - buildsystemwise. PLEASE DON'T LOOK AT THIS IF YOU WANT TO KNOW HOW TO WRITE TESTS.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install the test tools as we want to support testing 3rdparty grids with installed dune-grid\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clean up additional files during make clean. Unfortunately it is not possible with\n\n# cmake to use search patterns here. Automake wanted to clean the following files:\n\n# *.gcda *.gcno semantic.cache simplex-testgrid*.dgf.* cube-testgrid*.dgf.* dgfparser.log\n\n# add files to the list as they appear.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "dune/grid/test/yasp/CMakeLists.txt" : {
      "ObjectId" : "533ce8789f94558281da4853ac625ab827821abc",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add all tests without deprecations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dune/grid/uggrid/CMakeLists.txt" : {
      "ObjectId" : "f2f1425acbab2a6e03a8bab852ce89f61d40fdc7",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tricks like undefAllMacros.pl don't have to be shipped, have they?\n\n# Oliver Sander: It depends. undefAllMacros.pl creates the file ug_undefs.hh\n\n# which contains an undef line for each macro encountered in the UG\n\n# headers which DUNE includes.  This should be redone every time UG\n\n# changes, and currently I do it and then check in the new ug_undefs.hh.\n\n# An alternative would be to have the DUNE-build system call undefAllMacros\n\n# for the UG it is configured with.  Then it needed to be shipped.\")\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dune/grid/utility/CMakeLists.txt" : {
      "ObjectId" : "f92979ea12ef45ff3b299b0572ab18a9a7dddef3",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/utility/test/CMakeLists.txt" : {
      "ObjectId" : "e38ead5fc14df94419d18599e40b79928bf966a3",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/grid/yaspgrid/CMakeLists.txt" : {
      "ObjectId" : "4371cb3627fe1fc4fe7395c91a158317acd80917",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "8d5b2c8475159daf447374eaedc81da9d6ee018b",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OBJECT is needed since CMake 3.0.0\n\n# but it conflicts with shared libs\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "ff91a0e1f63226530e045096a9ee71d57222139c",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gridinfo-gmsh/CMakeLists.txt" : {
      "ObjectId" : "2cab9cb8c0fdb773d71a4da4bb1bd7c74da36cf0",
      "LastModified" : "2018-01-02T14:15:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 48,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 2913
}