{
  "Repository" : "29977318",
  "Revision" : "HEAD",
  "ObjectId" : "d6b8abb75635ac0fbadb445e67fc50ccb8b19945",
  "CommitTime" : "2019-02-14T13:31:22Z",
  "Files" : {
    "abm/SimBurglarMason/build.xml" : {
      "ObjectId" : "6140fe3ca39fad3c86974dc48995c940f24930f8",
      "LastModified" : "2016-04-27T21:18:38Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"SimBurglarMason-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "abm/resources/mason/contrib/geomason/Makefile" : {
      "ObjectId" : "3a50e863aa445e51ebfb2a474aff3abb2f1b735f",
      "LastModified" : "2016-04-27T21:18:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# GeoMason make file\n\n#\n\n# Note that you will have to uncomment the GeoTools and/or OGR support\n\n# in the jar file rule if you want support for those importers.\n\n#\n\n# To create jar file of GeoMason component:\n\n# make jar\n\n#\n\n# To make the demos:\n\n# make demos \n\n#\n\n# See other make options:\n\n# make help\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GeoMason supports Java 5; note that MASON proper only supports Java 4.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that we do not restrict demos to Java 1.4 as is this case with MASON\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Delete all the class files, checkpoints, and other various garbage\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Build all the classdocs\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Indent to your preferred brace format using emacs.  MASON's default\n\n# format is Whitesmiths at 4 spaces.  Yes, I know.  Idiosyncratic.\n\n# Anyway, beware that this is quite slow.  But it works!\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All the main GeoMason source files\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Optional GDAL based importer\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Optional GeoTool based importer\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Optional GDAL/OGR based importer\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add GDAL_FILES, GEOTOOL_FILES and/or OGR_FILES if you want support for those\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# $(GDAL_FILES) $(GEOTOOL_FILES) $(OGR_FILES)\n",
        "Line" : 124,
        "CharPositionInLine" : 27
      },
      "12" : {
        "Text" : "#Print a help message\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "abm/resources/mason/contrib/jung/Makefile" : {
      "ObjectId" : "f77354d8468c14035f51321e3a1eb04bdfe4d128",
      "LastModified" : "2016-04-27T21:18:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#### MASON Jung Makefile\n\n#### By Sean Luke\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Relevant Stuff:\n\n#### To see all your make options:  type   make help\n\n#### To switch from jikes to javac:  change the JAVAC variable below\n\n#### To add flags (like -O) to javac:  change the FLAGS variable below\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#JAVAC = jikes ${JIKESFLAGS}\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Main java files, not including the 3D stuff\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make the main code\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Delete all jmf gunk, checkpoints, backup emacs gunk classfiles,\n\n# documentation, and odd MacOS X poops\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build the class docs.  They're located in docs/classdocs\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build a distribution.  Cleans, builds 3d, then builds docs, then\n\n# removes CVS directories\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Indent to your preferred brace format using emacs.  MASON's default\n\n# format is Whitesmiths at 4 spaces.  Yes, I know.  Idiosyncratic.\n\n# Anyway, beware that this is quite slow.  But it works!\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9,
      "Errorlog" : "line 73:73 token recognition error at: '\"\\n\\t@ echo\\n\\t@ echo MASON uses IBM\\'s jikes compiler by default.  You can always use javac instead:\\n\\t@ echo just change the JAVAC variable in the Makefile.  If you\\'d like to try jikes\\n\\t@ echo but don\\'t have it, you can download it at   http://www.research.ibm.com/jikes/\\n\\t@ echo\\n\\n\u0000'\n"
    },
    "abm/resources/mason/contrib/physics2d/Makefile" : {
      "ObjectId" : "72ecdf482d136f5e2d7f72af92a5175a576afec2",
      "LastModified" : "2016-04-27T21:18:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#### 2D Rigid Body Physics Makefile\n\n#### By Sean Luke\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Relevant Stuff:\n\n#### To see all your make options:  type   make help\n\n#### To add flags (like -O) to javac:  change the FLAGS variable below\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Main java files, not including the 3D stuff\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make the main code\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# documentation, and odd MacOS X poops\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build the class docs.  They're located in docs/classdocs\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build a distribution.  Cleans, builds 3d, then builds docs, then\n\n# removes CVS directories\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build an applet jar file.  Note this collects ALL .class, .png, .jpg, index.html, and simulation.classes\n\n# files.  you'll probably want to strip this down some.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Indent to your preferred brace format using emacs.  MASON's default\n\n# format is Whitesmiths at 4 spaces.  Yes, I know.  Idiosyncratic.\n\n# Anyway, beware that this is quite slow.  But it works!\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9,
      "Errorlog" : "line 96:73 token recognition error at: '\"\\n\\t@ echo\\n\\t@ echo MASON uses IBM\\'s jikes compiler by default.  You can always use javac instead:\\n\\t@ echo just change the JAVAC variable in the Makefile.  If you\\'d like to try jikes\\n\\t@ echo but don\\'t have it, you can download it at   http://www.research.ibm.com/jikes/\\n\\t@ echo\\n\\n\u0000'\n"
    },
    "abm/resources/mason/contrib/socialnets/Makefile" : {
      "ObjectId" : "d498702f54adcc29127e1ac9b79b02076bf82961",
      "LastModified" : "2016-04-27T21:18:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#### Social Networks Makefile\n\n#### By Sean Luke\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Relevant Stuff:\n\n#### To see all your make options:  type   make help\n\n#### To switch from jikes to javac:  change the JAVAC variable below\n\n#### To add flags (like -O) to javac:  change the FLAGS variable below\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#JAVAC = jikes ${JIKESFLAGS}\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Main java files, not including the 3D stuff\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make the main code\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Delete all jmf gunk, checkpoints, backup emacs gunk classfiles,\n\n# documentation, and odd MacOS X poops\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build the class docs.  They're located in docs/classdocs\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build an applet jar file.  Note this collects ALL .class, .png, .jpg, index.html, and simulation.classes\n\n# files.  you'll probably want to strip this down some.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build a distribution.  Cleans, builds 3d, then builds docs, then\n\n# removes SVN directories\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Indent to your preferred brace format using emacs.  MASON's default\n\n# format is Whitesmiths at 4 spaces.  Yes, I know.  Idiosyncratic.\n\n# Anyway, beware that this is quite slow.  But it works!\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10,
      "Errorlog" : "line 89:73 token recognition error at: '\"\\n\\t@ echo\\n\\t@ echo MASON uses IBM\\'s jikes compiler by default.  You can always use javac instead:\\n\\t@ echo just change the JAVAC variable in the Makefile.  If you\\'d like to try jikes\\n\\t@ echo but don\\'t have it, you can download it at   http://www.research.ibm.com/jikes/\\n\\t@ echo\\n\\n\u0000'\n"
    },
    "abm/resources/mason/mason/Makefile" : {
      "ObjectId" : "a6edbd04f37ff6ab15d07850b0d38fa8e2da1532",
      "LastModified" : "2016-04-27T21:18:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "### MASON Makefile\n\n#### By Sean Luke\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Relevant Stuff:\n\n#### To see all your make options:  type   make help\n\n#### To add flags (like -O) to javac:  change the FLAGS variable below\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Main java files, not including the 3D stuff\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The additional 3D java files\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make the main MASON code, not including 3D code\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make the main MASON code AND the 3D code\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Delete all jmf gunk, checkpoints, backup emacs gunk classfiles,\n\n# documentation, and odd MacOS X poops\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build the class docs.  They're located in docs/classdocs\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build an applet jar file.  Note this collects ALL .class, .png, .jpg, index.html, and simulation.classes\n\n# files.  you'll probably want to strip this down some.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build a distribution.  Cleans, builds 3d, then builds docs, then\n\n# removes SVN directories\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Indent to your preferred brace format using emacs.  MASON's default\n\n# format is Whitesmiths at 4 spaces.  Yes, I know.  Idiosyncratic.\n\n# Anyway, beware that this is quite slow.  But it works!\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11,
      "Errorlog" : "line 162:79 token recognition error at: '\"\\n\\n\u0000'\n"
    },
    "projects/BreezeRoutes/json2gpx/node_modules/togpx/Makefile" : {
      "ObjectId" : "a20f0d6a0a0ecbf969e79909c3d4159cca12df0b",
      "LastModified" : "2016-07-10T23:25:39Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 6,
    "ANT" : 1
  },
  "ElapsedTime" : 3142
}