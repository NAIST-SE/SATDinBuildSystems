{
  "Repository" : "17106183",
  "Revision" : "HEAD",
  "ObjectId" : "9bf56333f008f56bc10a5e85927cb617ccc30b0f",
  "CommitTime" : "2019-01-11T16:52:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "bb69bcaba0962ee7f8aad1f39e9feff157fd7782",
      "LastModified" : "2018-01-15T10:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed for CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS support\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# libsmu versioning\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# determine a more descriptive project version using git info if available\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# determine if the current revision is a tag\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# if the current revision isn't a tag, add git revision info\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# write version info to file -- used for CI artifact versioning\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# support creating some basic binpkgs via `make package`\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# generate version header\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# don't complain about extra format args for g++\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# build a shared library by default\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# build python support by default\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# build command line smu application by default\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# don't build examples by default\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# don't build tests by default\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# install udev rules\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# don't generate docs by default\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# set default install path to /usr\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# handle RPATH issues on OS X\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# windows installer file\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# install pkgconfig file\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# install udev rules on Linux\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# generate API docs with doxygen\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# create a package build script for OS X\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "bindings/python/CMakeLists.txt" : {
      "ObjectId" : "373094475ec39f2ba51b6012b9f1a8fd92c3d0b0",
      "LastModified" : "2017-02-07T11:05:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "2f285343fdb17f253e6053692655f0e2c46c0fb3",
      "LastModified" : "2017-12-11T09:59:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use internal getopt implementation\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e8b5218dd9620b8d00f5784b1b4aca7bf059f726",
      "LastModified" : "2019-01-11T15:12:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build universal binaries by default\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# use pkg-config for everything that's not Windows\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Classify libusb headers as system headers to suppress various warnings,\n\n# e.g. http://www.libusb.org/ticket/2.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# only boost headers are needed, no runtime libraries\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# build static library if requested\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# force outputted library name for Visual Studio\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/cli/CMakeLists.txt" : {
      "ObjectId" : "335dc0e831f75aac2d349bdada8a1de2b9fe463f",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use internal getopt implementation\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "c70d616d731a066c2916bc99e843998529c3cf63",
      "LastModified" : "2017-02-07T11:05:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# download and build gtest on Windows and OS X\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Prevent gtest from overriding our compiler/linker options\n\n# when building with Visual Studio\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# When using CMake 2.8.11 or later, header path dependencies\n\n# are automatically added to the gtest and gmock targets.\n\n# For earlier CMake versions, we have to explicitly add the\n\n# required directories to the header search path ourselves.\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# determine all tests from existing sources\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# pull the test name from the .cpp file name without the extension\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# create the test application\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# add test to the test list\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# don't run any tests in parallel\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add support for `make check` to build/run tests\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/CMakeModules/DownloadProject.cmake" : {
      "ObjectId" : "eb021026b822adab48b8f079bcdd5b0c5dc69273",
      "LastModified" : "2017-02-07T11:05:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(download_project.cmake)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 7
  },
  "ElapsedTime" : 1068
}