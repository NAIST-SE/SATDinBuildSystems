{
  "Repository" : "9690910",
  "Revision" : "HEAD",
  "ObjectId" : "f49f9a28f778a3eaad8e9cc6c98996983327dd8f",
  "CommitTime" : "2019-04-17T08:57:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "192291e4e904e4687d3c0de7249e23d32efcf0e0",
      "LastModified" : "2018-08-25T08:08:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#OSX上强制生成so后缀的动态库而不是dylib后缀动态库\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# message(STATUS \"SolutionDir=\" ${SolutionDir})\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"Build Type:\"${CMAKE_BUILD_TYPE} ${CMAKE_CXX_FLAGS})\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MAC不需要这一行\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "Dependencies/CMakeLists.txt" : {
      "ObjectId" : "0eb11d9feddd8fbdabb2ba276724337b1a1679ed",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(protobuf)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory(libevent)\n\n#add_subdirectory(Theron)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Dependencies/googletest-release-1.8.0/CMakeLists.txt" : {
      "ObjectId" : "8d2b552ef7ad9f18d6d3293efedfea7c9964324f",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Dependencies/googletest-release-1.8.0/googlemock/CMakeLists.txt" : {
      "ObjectId" : "beb259a2e9dbb5dcb50f61c7a779f563528983f6",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 56,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 62,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 163,
        "CharPositionInLine" : 43
      },
      "23" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "Dependencies/googletest-release-1.8.0/googlemock/Makefile.am" : {
      "ObjectId" : "9adbc5163dd7191a14a887a384fb5d6d2956b44d",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Script for diagnosing compiler errors in programs that use Google\n\n# Mock.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "Dependencies/googletest-release-1.8.0/googlemock/make/Makefile" : {
      "ObjectId" : "7c13e05fa961dd3a37ee05def12de08ce0e86a88",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building both Google Mock and Google Test and\n\n# using them in user tests.  This file is self-contained, so you don't\n\n# need to use the Makefile in Google Test's source tree.  Please tweak\n\n# it to suit your environment and project.  You may want to move it to\n\n# your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use\n\n# in your own targets but shouldn't modify.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file, or if you want to use\n\n# a copy of Google Test at a different location.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Points to the root of Google Mock, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test and Google Mock's header directories as system\n\n# directories, such that the compiler doesn't generate warnings in\n\n# these headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All Google Mock headers. Note that all Google Test headers are\n\n# included here too, as they are #included by Google Mock headers.\n\n# Usually you shouldn't change this definition.\t\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builds gmock.a and gmock_main.a.  These libraries contain both\n\n# Google Mock and Google Test.  A test should link with either gmock.a\n\n# or gmock_main.a, depending on whether it defines its own main()\n\n# function.  It's fine if your test only uses features from Google\n\n# Test (and not Google Mock).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For simplicity and to avoid depending on implementation details of\n\n# Google Mock and Google Test, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Mock and\n\n# Google Test compile fast and for ordinary users their source rarely\n\n# changes.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Builds a sample test.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "Dependencies/googletest-release-1.8.0/googletest/CMakeLists.txt" : {
      "ObjectId" : "621d0f0421543eba41e1d69f497814104bb9c6a7",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 210,
        "CharPositionInLine" : 43
      },
      "22" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 232,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "Dependencies/googletest-release-1.8.0/googletest/Makefile.am" : {
      "ObjectId" : "29797e4e9de4e1d5e5f93bba14288de87f623946",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "Dependencies/googletest-release-1.8.0/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "777b91ed4b8caa226ea55cfa61fe7ec433ffb452",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 83,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 126,
        "CharPositionInLine" : 32
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "Dependencies/googletest-release-1.8.0/googletest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Dependencies/googletest-release-1.8.0/googletest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/hiredis/hiredis_linux/hiredis/Makefile" : {
      "ObjectId" : "cff2a84ceb9c70699df2df2b4e4bebc62cf01a21",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hiredis Makefile\n\n# Copyright (C) 2010-2011 Salvatore Sanfilippo <antirez at gmail dot com>\n\n# Copyright (C) 2010-2011 Pieter Noordhuis <pcnoordhuis at gmail dot com>\n\n# This file is released under the BSD license, see the COPYING file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Installation related variables and target\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# redis-server configuration used for testing\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fallback to gcc when $CC is not in $PATH.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Platform-specific overrides\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Deps (use make dep to generate this)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Binaries:\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/hiredis/hiredis_win/hiredis/Makefile" : {
      "ObjectId" : "16b8767b1478ae612ae882551379f1ae9fa0a5ef",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hiredis Makefile\n\n# Copyright (C) 2010-2011 Salvatore Sanfilippo <antirez at gmail dot com>\n\n# Copyright (C) 2010-2011 Pieter Noordhuis <pcnoordhuis at gmail dot com>\n\n# This file is released under the BSD license, see the COPYING file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fallback to gcc when $CC is not in $PATH.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Platform-specific overrides\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Deps (use make dep to generate this)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Binaries:\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Installation related variables and target\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Dependencies/libevent/Makefile.am" : {
      "ObjectId" : "c8354c32b10b5decb99cbc8fb53d331a65c8252e",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Makefile.am for libevent\n\n# Copyright 2000-2007 Niels Provos\n\n# Copyright 2007-2012 Niels Provos and Nick Mathewson\n\n#\n\n# See LICENSE for copying information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 'foreign' means that we're not enforcing GNU package rules strictly.\n\n# '1.9' means that we need automake 1.9 or later (and we do).\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is the \"Release\" of the Libevent ABI.  It takes precedence over\n\n# the VERSION_INFO, so that two versions of Libevent with the same\n\n# \"Release\" are never binary-compatible.\n\n#\n\n# This number incremented once for the 2.0 release candidate, and\n\n# will increment for each series until we revise our interfaces enough\n\n# that we can seriously expect ABI compatibility between series.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is the version info for the libevent binary API.  It has three\n\n# numbers:\n\n#   Current  -- the number of the binary API that we're implementing\n\n#   Revision -- which iteration of the implementation of the binary\n\n#               API are we supplying?\n\n#   Age      -- How many previous binary API versions do we also\n\n#               support?\n\n#\n\n# To increment a VERSION_INFO (current:revision:age):\n\n#    If the ABI didn't change:\n\n#        Return (current:revision+1:age)\n\n#    If the ABI changed, but it's backward-compatible:\n\n#        Return (current+1:0:age+1)\n\n#    If the ABI changed and it isn't backward-compatible:\n\n#        Return (current+1:0:0)\n\n#\n\n# Once an RC is out, DO NOT MAKE ANY ABI-BREAKING CHANGES IN THAT SERIES\n\n# UNLESS YOU REALLY REALLY HAVE TO.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# History:          RELEASE    VERSION_INFO\n\n#  2.0.1-alpha --     2.0        1:0:0\n\n#  2.0.2-alpha --                2:0:0\n\n#  2.0.3-alpha --                2:0:0  (should have incremented; didn't.)\n\n#  2.0.4-alpha --                3:0:0\n\n#  2.0.5-beta  --                4:0:0\n\n#  2.0.6-rc    --     2.0        2:0:0\n\n#  2.0.7-rc    --     2.0        3:0:1\n\n#  2.0.8-rc    --     2.0        4:0:2\n\n#  2.0.9-rc    --     2.0        5:0:0 (ABI changed slightly)\n\n#  2.0.10-stable--    2.0        5:1:0 (No ABI change)\n\n#  2.0.11-stable--    2.0        6:0:1 (ABI changed, backward-compatible)\n\n#  2.0.12-stable--    2.0        6:1:1 (No ABI change)\n\n#  2.0.13-stable--    2.0        6:2:1 (No ABI change)\n\n#  2.0.14-stable--    2.0        6:3:1 (No ABI change)\n\n#  2.0.15-stable--    2.0        6:3:1 (Forgot to update :( )\n\n#  2.0.16-stable--    2.0        6:4:1 (No ABI change)\n\n#  2.0.17-stable--    2.0        6:5:1 (No ABI change)\n\n#  2.0.18-stable--    2.0        6:6:1 (No ABI change)\n\n#  2.0.19-stable--    2.0        6:7:1 (No ABI change)\n\n#  2.0.20-stable--    2.0        6:8:1 (No ABI change)\n\n#  2.0.21-stable--    2.0        6:9:1 (No ABI change)\n\n#\n\n# For Libevent 2.1:\n\n#  2.1.1-alpha --     2.1        1:0:0\n\n#  2.1.2-alpha --     2.1        1:0:0 (should have been 2:0:1)\n\n#  2.1.3-alpha --     2.1        3:0:0 (ABI changed slightly)\n\n#  2.1.4-alpha --     2.1        4:0:0 (ABI changed slightly)\n\n#  2.1.5-beta  --     2.1        5:0:0 (ABI changed slightly)\n\n#  2.1.6-beta  --     2.1        6:0:0 (ABI changed slightly)\n\n#  2.1.7-beta  --     2.1        6:1:0 (ABI changed slightly)\n\n#  2.1.8-stable--     2.1        6:2:0 (ABI changed slightly)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ABI version history for this package effectively restarts every time\n\n# we change RELEASE.  Version 1.4.x had RELEASE of 1.4.\n\n#\n\n# Ideally, we would not be using RELEASE at all; instead we could just\n\n# use the VERSION_INFO field to label our backward-incompatible ABI\n\n# changes, and those would be few and far between.  Unfortunately,\n\n# Libevent still exposes far too many volatile structures in its\n\n# headers, so we pretty much have to assume that most development\n\n# series will break ABI compatibility.  For now, it's simplest just to\n\n# keep incrementing the RELEASE between series and resetting VERSION_INFO.\n\n#\n\n# Eventually, when we get to the point where the structures in the\n\n# headers are all non-changing (or not there at all!), we can shift to\n\n# a more normal worldview where backward-incompatible ABI changes are\n\n# nice and rare.  For the next couple of years, though, 'struct event'\n\n# is user-visible, and so we can pretty much guarantee that release\n\n# series won't be binary-compatible.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# These sources are conditionally added by configure.ac or conditionally\n\n# included from other files.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/lua/Makefile" : {
      "ObjectId" : "119110d2f01054adddec43ea75dba1a744e7e5f8",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "Dependencies/lua/src/Makefile" : {
      "ObjectId" : "64c78f775ba0eddb6e3a98c74bfebb2252f382ac",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Dependencies/navigation/CMakeLists.txt" : {
      "ObjectId" : "d3848124488cb61926e96adaa4263fb5b84d0de0",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/BUILD" : {
      "ObjectId" : "19f07c548d970e13ff7cc7afedcc22babbf9f30c",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel (http://bazel.io/) BUILD file for Protobuf.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n# Java 9 configuration\n################################################################################",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n# Protobuf Runtime Library\n################################################################################",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -Wno-sign-compare\n# -Wno-unused-function",
        "Line" : 24,
        "CharPositionInLine" : 15
      },
      "4" : {
        "Text" : "# Prevents ISO C++ const string assignment warnings for pyext sources.",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Android and MSVC builds do not need to link in a separate pthread library.",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# AUTOGEN(protobuf_lite_srcs)",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# AUTOGEN(protobuf_srcs)",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# This provides just the header files for use in projects that need to build\n# shared libraries for dynamic loading. This target is available until Bazel\n# adds native support for such use cases.\n# TODO(keveman): Remove this target once the support gets added to Bazel.",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Map of all well known protos.\n# name => (include path, imports)",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################################################################################\n# Well Known Types Proto Library Rules\n#\n# These proto_library rules can be used with one of the language specific proto\n# library rules i.e. java_proto_library:\n#\n# java_proto_library(\n#   name = \"any_java_proto\",\n#   deps = [\"@com_google_protobuf//:any_proto],\n# )\n################################################################################",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################\n# Protocol Buffers Compiler\n################################################################################",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# AUTOGEN(protoc_lib_srcs)",
        "Line" : 263,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "################################################################################\n# Tests\n################################################################################",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# AUTOGEN(lite_test_protos)",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# AUTOGEN(test_protos)",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# AUTOGEN(common_test_srcs)",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# AUTOGEN(test_plugin_srcs)",
        "Line" : 450,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# AUTOGEN(test_srcs)",
        "Line" : 475,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Files for csharp_bootstrap_unittest.cc.",
        "Line" : 554,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "################################################################################\n# Java support\n################################################################################",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "################################################################################\n# Python support\n################################################################################",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Copy the builtin proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly since they are all part of the same Python\n# package.",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python in srcs.",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Copy the test proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly by the tests since they are all part of the\n# same Python package.",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python_test in srcs.",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "Dependencies/protobuf/Makefile.am" : {
      "ObjectId" : "ae4ac858cd2917e04151081dba9b232b867487b1",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always include third_party directories in distributions.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build gmock before we build protobuf tests.  We don't add gmock to SUBDIRS\n\n# because then \"make check\" would also build and run all of gmock's own tests,\n\n# which takes a lot of time and is generally not useful to us.  Also, we don't\n\n# want \"make install\" to recurse into gmock since we don't want to overwrite\n\n# the installed version of gmock if there is one.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We would like to clean gmock when \"make clean\" is invoked.  But we have to\n\n# be careful because clean-local is also invoked during \"make distclean\", but\n\n# \"make distclean\" already recurses into gmock because it's listed among the\n\n# DIST_SUBDIRS.  distclean will delete gmock/Makefile, so if we then try to\n\n# cd to the directory again and \"make clean\" it will fail.  So, check that the\n\n# Makefile exists before recursing.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Deletes all the files generated by autogen.sh.\n",
        "Line" : 1067,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Dependencies/protobuf/benchmarks/Makefile.am" : {
      "ObjectId" : "3ae14ffbcdcba8ba3b4c0a4ef633cc66f5fefbc4",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############# CPP RULES ##############\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Explicit deps because BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n\n# See: https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "############ CPP RULES END ############\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "############# JAVA RULES ##############\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############# JAVA RULES END ##############\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "############# PYTHON RULES ##############\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############# PYTHON RULES END ##############\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "############# GO RULES BEGIN ##############\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "############# GO RULES END ##############\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "############# GOGO RULES BEGIN ############\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Explicit deps because BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n\n# See: https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12,
      "Errorlog" : "line 416:18 token recognition error at: '\"s/b\\.Run(\\\"\\(.*\\)\\\"/b.Run(\\\"\\1'\nline 432:74 token recognition error at: '\"; done' >> gogo-benchmark\\n\\t@echo 'go test -bench=. -- $$all_data' >> gogo-benchmark\\n\\t@echo 'cd ../..' >> gogo-benchmark\\n\\t@chmod +x gogo-benchmark\\n\\ngo_no_group: go_no_group_protoc_middleman generate_gogo_data generate_all_gogo_benchmark_code gogo-benchmark\\n\\t./gogo-benchmark go_no_group $(gogo_data)\\n\\t\\ngogofast: gogofast_protoc_middleman generate_gogo_data gogo-benchmark generate_all_gogo_benchmark_code \\n\\t./gogo-benchmark gogofast $(gogo_data)\\n\\t\\ngogofaster: gogofaster_protoc_middleman  generate_gogo_data gogo-benchmark generate_all_gogo_benchmark_code\\n\\t./gogo-benchmark gogofaster $(gogo_data)\\n\\ngogoslick: gogoslick_protoc_middleman  generate_gogo_data gogo-benchmark generate_all_gogo_benchmark_code\\n\\t./gogo-benchmark gogoslick $(gogo_data)\\n\\n\\n############# GOGO RULES END ############\\n\\n \\n############ UTIL RULES BEGIN ############\\n\\nbin_PROGRAMS += protoc-gen-gogoproto gogo-data-scrubber\\n\\nprotoc_gen_gogoproto_LDADD = $(top_srcdir)/src/libprotobuf.la $(top_srcdir)/src/libprotoc.la\\nprotoc_gen_gogoproto_SOURCES = util/protoc-gen-gogoproto.cc\\nprotoc_gen_gogoproto_CPPFLAGS = -I$(top_srcdir)/src -I$(srcdir)/cpp -I$(srcdir)/util\\n\\ngogo_data_scrubber_LDADD = $(top_srcdir)/src/libprotobuf.la\\ngogo_data_scrubber_SOURCES = util/gogo_data_scrubber.cc\\ngogo_data_scrubber_CPPFLAGS = -I$(top_srcdir)/src -I$(srcdir)/cpp -I$(srcdir)/util\\nutil/gogo_data_scrubber-gogo_data_scrubber.$(OBJEXT): $(benchmarks_protoc_outputs) $(benchmarks_protoc_outputs_proto2) $(benchmarks_protoc_outputs_header) $(benchmarks_protoc_outputs_proto2_header)\\nnodist_gogo_data_scrubber_SOURCES =                                        \\\\n\\t$(benchmarks_protoc_outputs)                                             \\\\n\\t$(benchmarks_protoc_outputs_proto2)                                      \\\\n\\t$(benchmarks_protoc_outputs_proto2_header)                               \\\\n\\t$(benchmarks_protoc_outputs_header)\\n\\t\\n############ UTIL RULES END ############\\n\\nMAINTAINERCLEANFILES =                                                     \\\\n\\tMakefile.in\\n\\nCLEANFILES =                                                               \\\\n\\t$(benchmarks_protoc_outputs)                                             \\\\n\\t$(benchmarks_protoc_outputs_header)                                      \\\\n\\t$(benchmarks_protoc_outputs_proto2)                                      \\\\n\\t$(benchmarks_protoc_outputs_proto2_header)                               \\\\n\\tinitialize_submodule                                                     \\\\n\\tmake_tmp_dir                                                             \\\\n\\tprotoc_middleman                                                         \\\\n\\tprotoc_middleman2                                                        \\\\n\\tjavac_middleman                                                          \\\\n\\tjava-benchmark                                                           \\\\n\\tpython_cpp_proto_library                                                 \\\\n\\tpython-pure-python-benchmark                                             \\\\n\\tpython-cpp-reflection-benchmark                                          \\\\n\\tpython-cpp-generated-code-benchmark                                      \\\\n\\tgo-benchmark                                                             \\\\n\\tgo_protoc_middleman                                                      \\\\n\\tmake_tmp_dir_gogo                                                        \\\\n\\tgogo_proto_middleman                                                     \\\\n\\tgenerate_gogo_data                                                       \\\\n\\tgo_no_group_protoc_middleman                                             \\\\n\\tgo_no_group                                                              \\\\n\\tgo-no-group-benchmark                                                    \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs_header)                         \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs)                                \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs_proto2_header)                  \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs_proto2)                         \\\\n\\tgenerate_all_gogo_benchmark_code                                         \\\\n\\tgenerate-gogo-benchmark-code                                             \\\\n\\tcpp_no_group_protoc_middleman                                            \\\\n\\tgenerate_cpp_no_group_benchmark_code                                     \\\\n\\tgenerate_gogo_benchmark_code                                             \\\\n\\tgogofast_protoc_middleman                                                \\\\n\\tgogofast                                                                 \\\\n\\tgogofaster_protoc_middleman                                              \\\\n\\tgogofaster                                                               \\\\n\\tgogoslick_protoc_middleman                                               \\\\n\\tgogoslick                                                                \\\\n\\tgogo-benchmark                                                           \\\\n\\tgogo/cpp_no_group/cpp_benchmark.* \\n\\t\\n\\nclean-local:\\n\\t-rm -rf tmp/*\\n\u0000'\n"
    },
    "Dependencies/protobuf/cmake/CMakeLists.txt" : {
      "ObjectId" : "02174e96aa3a0a3eeefe22e773d3019318631fb4",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake policies\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Project\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add c++11 flags\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Options\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# User options\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Path to main configure script\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Parse configure script\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Description\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Version\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Contact\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Parse version tweaks\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Package version\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# FindZLIB module define ZLIB_INCLUDE_DIRS variable\n\n# Set ZLIB_INCLUDE_DIRECTORIES for compatible\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Using imported target if exists\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Explicitly set these to empty (override NOT_FOUND) so cmake doesn't\n\n# complain when we use them later.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# In case we are building static libraries, link also the runtime library statically\n\n# so that MSVCR*.DLL is not required at runtime.\n\n# https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx\n\n# This is achieved by replacing msvc option /MD with /MT and /MDd with /MTd\n\n# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Build with multiple processes\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# MSVC warning suppressions\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# 'expression' : signed/unsigned mismatch\n\n# switch statement contains 'default' but no 'case' labels\n\n# unary minus operator applied to unsigned type, result still unsigned\n\n# 'conversion' conversion from 'type1' to 'type2', possible loss of data\n\n# 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# 'var' : conversion from 'size_t' to 'type', possible loss of data\n\n# 'identifier' : truncation from 'type1' to 'type2'\n\n# 'operator' : integral constant overflow\n\n# 'conversion' : truncation of constant value\n\n# 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)\n\n# 'this' : used in base member initializer list\n\n# no definition for inline function 'function'\n\n# 'type' : forcing value to bool 'true' or 'false' (performance warning)\n\n# The compiler encountered a deprecated declaration.\n",
        "Line" : 150,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# Allow big object\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Suppress linker warnings about files with no symbols defined.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Add the \"lib\" prefix for generated .lib outputs.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# When building with \"make\", \"lib\" prefix will be added automatically by\n\n# the build tool.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "Dependencies/protobuf/cmake/examples.cmake" : {
      "ObjectId" : "e5cad63f67650db353a1f3a0e8b349e8cf0db32f",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal utility function: Create a custom target representing a build of examples with custom options.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Skip\n",
        "Line" : 20,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Add examples as an external project.\n\n# sub_directory cannot be used because the find_package(protobuf) call would cause failures with redefined targets.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Build using the legacy compatibility module.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#Build using the installed library.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Build using the installed library in legacy compatibility mode.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "Dependencies/protobuf/cmake/install.cmake" : {
      "ObjectId" : "82036cb6878c58deaccbb06f2b12b365388e1161",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal function for parsing auto tools scripts\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install well-known type proto files\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install configuration\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allows the build directory to be used as a find directory.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Dependencies/protobuf/cmake/libprotobuf-lite.cmake" : {
      "ObjectId" : "911fce5e5d348c384db3c288ce763fcf8f166c80",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/cmake/libprotobuf.cmake" : {
      "ObjectId" : "65d05c194453bc8d9dfe23cca9c80cf9bf5497c0",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/cmake/libprotoc.cmake" : {
      "ObjectId" : "58568bb2fc009bda162e385a2b6e69c50e0fc57a",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/cmake/protobuf-lite.pc.cmake" : {
      "ObjectId" : "cbe5426afa43872424fdb140c0f34f4268b55b13",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/cmake/protobuf-options.cmake" : {
      "ObjectId" : "47fb15825752e544fda411db01c8a4391ed4dd38",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verbose output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindProtobuf module compatibel\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Dependencies/protobuf/cmake/protobuf.pc.cmake" : {
      "ObjectId" : "d33e98cca8f05e95343576d01ee959c22f1b7d78",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/cmake/protoc.cmake" : {
      "ObjectId" : "5777b16ed21d257bf59b33ff28bf45fa2c0c17f5",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/cmake/tests.cmake" : {
      "ObjectId" : "ec790e339fd50cf024adb883a92f8190644ff860",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/conformance/Makefile.am" : {
      "ObjectId" : "e51ab80af9e23aed4a8b6d536436319741d11148",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# proto2 input files, should be separated with proto3, as we\n\n# can't generate proto2 files for ruby, php and objc\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lite/com/google/protobuf/Any.java                            \\\n  # lite/com/google/protobuf/AnyOrBuilder.java                   \\\n  # lite/com/google/protobuf/AnyProto.java                       \\\n  # lite/com/google/protobuf/BoolValue.java                      \\\n  # lite/com/google/protobuf/BoolValueOrBuilder.java             \\\n  # lite/com/google/protobuf/BytesValue.java                     \\\n  # lite/com/google/protobuf/BytesValueOrBuilder.java            \\\n  # lite/com/google/protobuf/conformance/Conformance.java        \\\n  # lite/com/google/protobuf/DoubleValue.java                    \\\n  # lite/com/google/protobuf/DoubleValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Duration.java                       \\\n  # lite/com/google/protobuf/DurationOrBuilder.java              \\\n  # lite/com/google/protobuf/DurationProto.java                  \\\n  # lite/com/google/protobuf/FieldMask.java                      \\\n  # lite/com/google/protobuf/FieldMaskOrBuilder.java             \\\n  # lite/com/google/protobuf/FieldMaskProto.java                 \\\n  # lite/com/google/protobuf/FloatValue.java                     \\\n  # lite/com/google/protobuf/FloatValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int32Value.java                     \\\n  # lite/com/google/protobuf/Int32ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int64Value.java                     \\\n  # lite/com/google/protobuf/Int64ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/ListValue.java                      \\\n  # lite/com/google/protobuf/ListValueOrBuilder.java             \\\n  # lite/com/google/protobuf/NullValue.java                      \\\n  # lite/com/google/protobuf/StringValue.java                    \\\n  # lite/com/google/protobuf/StringValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Struct.java                         \\\n  # lite/com/google/protobuf/StructOrBuilder.java                \\\n  # lite/com/google/protobuf/StructProto.java                    \\\n  # lite/com/google/protobuf/Timestamp.java                      \\\n  # lite/com/google/protobuf/TimestampOrBuilder.java             \\\n  # lite/com/google/protobuf/TimestampProto.java                 \\\n  # lite/com/google/protobuf/UInt32Value.java                    \\\n  # lite/com/google/protobuf/UInt32ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/UInt64Value.java                    \\\n  # lite/com/google/protobuf/UInt64ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Value.java                          \\\n  # lite/com/google/protobuf/ValueOrBuilder.java                 \\\n  # lite/com/google/protobuf/WrappersProto.java\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# All source files excepet C++/Objective-C ones should be explicitly listed\n\n# here because the autoconf tools don't include files of other languages\n\n# automatically.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Explicit deps beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On travis, the build fails without the isysroot because whatever system\n\n# headers are being found don't include generics support for\n\n# NSArray/NSDictionary, the only guess is their image at one time had an odd\n\n# setup for Xcode and old frameworks are being found.\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_objc\" could fail if parallel enough.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# JavaScript well-known types are expected to be in a directory called\n\n# google-protobuf, because they are usually in the google-protobuf npm\n\n# package.  But we want to use the sources from our tree, so we recreate\n\n# that directory structure here.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Some implementations include pre-generated versions of well-known types.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## $(PROTOC) -I$(srcdir) -I$(top_srcdir) --java_out=lite:lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs)\n",
        "Line" : 260,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## @mkdir -p lite\n\n## oldpwd=`pwd` && ( cd $(srcdir) && $$oldpwd/../src/protoc$(EXEEXT) -I. -I$(top_srcdir)/src --java_out=lite:$$oldpwd/lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs) )\n",
        "Line" : 272,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Currently the conformance code is alongside the rest of the C#\n\n# source, as it's easier to maintain there. We assume we've already\n\n# built that, so we just need a script to run it.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Targets for actually running tests.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# These depend on library paths being properly set up.  The easiest way to\n\n# run them is to just use \"tox\" from the python dir.\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "Dependencies/protobuf/examples/BUILD" : {
      "ObjectId" : "d5d5d9a56b25b3460164be63c99b6b9e352374fc",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This BUILD file shows how to use protobuf with bazel. Before you can use\n# proto_library/<lang>_proto_library rules in a BUILD file, you need to\n# include protobuf repo as remote repositories in your WORKSPACE file. See\n# the WORKSPACE file in the same directory with this BUILD file for an\n# example.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For each .proto file, a proto_library target should be defined. This target\n# is not bound to any particular language. Instead, it defines the dependency\n# graph of the .proto files (i.e., proto imports) and serves as the provider\n# of .proto source files to the protocol compiler.\n#\n# Remote repository \"com_google_protobuf\" must be defined to use this rule.",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The cc_proto_library rule generates C++ code for a proto_library rule. It\n# must have exactly one proto_library dependency. If you want to use multiple\n# proto_library targets, create a separate cc_proto_library target for each\n# of them.\n#\n# Remote repository \"com_google_protobuf_cc\" must be defined to use this rule.",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cc_library/cc_binary targets can depend on cc_proto_library targets.",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Similar to cc_proto_library but for Java.\n#\n# Remote repository \"com_google_protobuf_java\" must be defined to use this rule.",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Java lite.\n#\n# Remote repository \"com_google_protobuf_javalite\" must be defined to use this\n# rule.",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Java lite API is a subset of the regular Java API so if you only uses this\n# subset in your code, you can actually compile your code against both (i.e.,\n# share code between server build and Android build).\n#\n# The lite version has a smaller code size, and you can see that by comparing\n# the resulted .jar file:\n#\n#   $ bazel build :add_person_java_deploy.jar :add_person_java_lite_deploy.jar\n#   $ ls -l bazel-bin/*_deploy.jar\n#   -r-xr-xr-x 1 xiaofeng eng 1230797 Sep  8 12:24 bazel-bin/add_person_java_deploy.jar\n#   -r-xr-xr-x 1 xiaofeng eng  236166 Sep  8 12:24 bazel-bin/add_person_java_lite_deploy.jar\n#\n# In the above example, the lite .jar file is 6 times smaller. With proper\n# proguard inlining/stripping, the difference can be much more larger than\n# that.",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/protobuf/examples/CMakeLists.txt" : {
      "ObjectId" : "3e8e65414e1d55fb67dbeec784bd50ce765c03b7",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find required protobuf package\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Code Generation\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Legacy Support\n",
        "Line" : 32,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "#Executable setup\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#Legacy mode\n",
        "Line" : 40,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 8
    },
    "Dependencies/protobuf/examples/Makefile" : {
      "ObjectId" : "1ff7fa7fc5c25a381de9ca626b35d11640a764e0",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# See README.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make directory for go package\n",
        "Line" : 29,
        "CharPositionInLine" : 19
      },
      "2" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 34,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 38,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 4
    },
    "Dependencies/protobuf/protobuf.bzl" : {
      "ObjectId" : "78f19c621a3642d2ae91f410bd5c3e036607aa85",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel 0.4.4 and older have genfiles paths that look like:\n#   bazel-out/local-fastbuild/genfiles/external/repo/foo\n# After the exec root rearrangement, they look like:\n#   ../repo/bazel-out/local-fastbuild/genfiles/foo",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# We are using the fact that Bazel 0.4.4+ provides repository-relative paths\n# for ctx.genfiles_dir.",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This means that we're either in the old version OR the new version in the local repo.\n# Either way, appending the source path to the genfiles dir works.",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "\"\"\"General implementation for generating protos\"\"\"",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "\"\"\"Generates codes from Protocol Buffers definitions.\n\nThis rule helps you to implement Skylark macros specific to the target\nlanguage. You should prefer more specific `cc_proto_library `,\n`py_proto_library` and others unless you are adding such wrapper macros.\n\nArgs:\n  srcs: Protocol Buffers definition files (.proto) to run the protocol compiler\n    against.\n  deps: a list of dependency labels; must be other proto libraries.\n  includes: a list of include paths to .proto files.\n  protoc: the label of the protocol compiler to generate the sources.\n  plugin: the label of the protocol compiler plugin to be passed to the protocol\n    compiler.\n  plugin_language: the language of the generated sources\n  plugin_options: a list of options to be passed to the plugin\n  gen_cc: generates C++ sources in addition to the ones from the plugin.\n  gen_py: generates Python sources in addition to the ones from the plugin.\n  outs: a list of labels of the expected outputs from the protocol compiler.\n\"\"\"",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "\"\"\"Bazel rule to create a C++ protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the cc_proto_library.\n    srcs: the .proto files of the cc_proto_library.\n    deps: a list of dependency labels; must be cc_proto_library.\n    cc_libs: a list of other cc_library targets depended by the generated\n        cc_library.\n    include: a string indicating the include path of the .proto files.\n    protoc: the label of the protocol compiler to generate the sources.\n    internal_bootstrap_hack: a flag indicate the cc_proto_library is used only\n        for bootstraping. When it is set to True, no files will be generated.\n        The rule will simply be a provider for .proto files, so that other\n        cc_proto_library can depend on it.\n    use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin\n        when processing the proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated cc_library target.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For pre-checked-in generated files, we add the internal_bootstrap_hack\n# which will skip the codegen action.",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# An empty cc_library to make rule dependency consistent.",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "\"\"\"Bazel rule to generate the gen_well_known_protos_java genrule\n\n  Args:\n    srcs: the well known protos\n  \"\"\"",
        "Line" : 264,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "\"\"\"Macro to copy files to a different directory and then create a filegroup.\n\n  This is used by the //:protobuf_python py_proto_library target to work around\n  an issue caused by Python source files that are part of the same Python\n  package being in separate directories.\n\n  Args:\n    srcs: The source files to copy and add to the filegroup.\n    strip_prefix: Path to the root of the files to copy.\n    dest: The directory to copy the source files into.\n    **kwargs: extra arguments that will be passesd to the filegroup.\n  \"\"\"",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "\"\"\"Bazel rule to create a Python protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the py_proto_library.\n    srcs: the .proto files of the py_proto_library.\n    deps: a list of dependency labels; must be py_proto_library.\n    py_libs: a list of other py_library targets depended by the generated\n        py_library.\n    py_extra_srcs: extra source files that will be added to the output\n        py_library. This attribute is used for internal bootstrapping.\n    include: a string indicating the include path of the .proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated py_library target.\n    protoc: the label of the protocol compiler to generate the sources.\n    use_grpc_plugin: a flag to indicate whether to call the Python C++ plugin\n        when processing the proto files.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Note: Generated grpc code depends on Python grpc module. This dependency\n# is not explicitly listed in py_libs. Instead, host system is assumed to\n# have grpc installed.",
        "Line" : 359,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "\"\"\"Bazel rules to create batch tests for protobuf internal.\n\n  Args:\n    name: the name of the rule.\n    modules: a list of modules for tests. The macro will create a py_test for\n        each of the parameter with the source \"google/protobuf/%s.py\"\n    kargs: extra parameters that will be passed into the py_test.\n\n  \"\"\"",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "\"\"\"For WORKSPACE files, to check the installed version of bazel.\n\n  This ensures bazel supports our approach to proto_library() depending on a\n  copied filegroup. (Fixed in bazel 0.5.4)\n  \"\"\"",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "Dependencies/protobuf/src/Makefile.am" : {
      "ObjectId" : "4bb77452f203519f8b4b532610acc5345882d30e",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Turn on all warnings except for sign comparison (we ignore sign comparison\n\n# in Google so our code base have tons of such warnings).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If I say \"dist_include_DATA\", automake complains that $(includedir) is not\n\n# a \"legitimate\" directory for DATA.  Screw you, automake.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you are adding new files here, also remember to change the build files for\n\n# all other languages, //protoc-artifacts/build-zip.sh and run\n\n# //update_file_list.sh for bazel.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Not sure why these don't get cleaned automatically.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Disable optimization for tests unless the user explicitly asked for it,\n\n# since test_util.cc takes forever to compile with optimization (with GCC).\n\n# See configure.ac for more info.\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Run cpp_unittest again with PROTOBUF_TEST_NO_DESCRIPTORS defined.\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build lite_unittest separately, since it doesn't use gtest. It can't\n\n# depend on gtest because our internal version of gtest depend on proto\n\n# full runtime and we want to make sure this test builds without full\n\n# runtime.\n",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# lite_arena_unittest depends on gtest because teboring@ found that without\n\n# gtest when building the test internally our memory sanitizer doesn't detect\n\n# memory leaks (don't know why).\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Test plugin binary.\n",
        "Line" : 849,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This test target is to ensure all our public header files and generated\n\n# code is free from warnings. We have to be more pedantic about these\n\n# files because they are compiled by users with different compiler flags.\n",
        "Line" : 867,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Dependencies/protobuf/third_party/googletest/CMakeLists.txt" : {
      "ObjectId" : "f8a97faaeb8a843e76b3664d73fa0f5d91345143",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Dependencies/protobuf/third_party/googletest/Makefile.am" : {
      "ObjectId" : "433eefeb08026fa46e702db9e853e8a4efdfc989",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Dependencies/protobuf/third_party/googletest/googlemock/CMakeLists.txt" : {
      "ObjectId" : "21d61b130cf1bb5362934edac9b1c0c34c0c9412",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 61,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 67,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# configure and install pkgconfig files\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 186,
        "CharPositionInLine" : 43
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "Dependencies/protobuf/third_party/googletest/googlemock/Makefile.am" : {
      "ObjectId" : "9adbc5163dd7191a14a887a384fb5d6d2956b44d",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Script for diagnosing compiler errors in programs that use Google\n\n# Mock.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "Dependencies/protobuf/third_party/googletest/googlemock/make/Makefile" : {
      "ObjectId" : "7c13e05fa961dd3a37ee05def12de08ce0e86a88",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building both Google Mock and Google Test and\n\n# using them in user tests.  This file is self-contained, so you don't\n\n# need to use the Makefile in Google Test's source tree.  Please tweak\n\n# it to suit your environment and project.  You may want to move it to\n\n# your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use\n\n# in your own targets but shouldn't modify.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file, or if you want to use\n\n# a copy of Google Test at a different location.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Points to the root of Google Mock, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test and Google Mock's header directories as system\n\n# directories, such that the compiler doesn't generate warnings in\n\n# these headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All Google Mock headers. Note that all Google Test headers are\n\n# included here too, as they are #included by Google Mock headers.\n\n# Usually you shouldn't change this definition.\t\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builds gmock.a and gmock_main.a.  These libraries contain both\n\n# Google Mock and Google Test.  A test should link with either gmock.a\n\n# or gmock_main.a, depending on whether it defines its own main()\n\n# function.  It's fine if your test only uses features from Google\n\n# Test (and not Google Mock).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For simplicity and to avoid depending on implementation details of\n\n# Google Mock and Google Test, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Mock and\n\n# Google Test compile fast and for ordinary users their source rarely\n\n# changes.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Builds a sample test.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "Dependencies/protobuf/third_party/googletest/googletest/CMakeLists.txt" : {
      "ObjectId" : "77b55cae8c92e1d279aa68354cec1823c7b55c25",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Visibility\n",
        "Line" : 57,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 73,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# configure and install pkgconfig files\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 236,
        "CharPositionInLine" : 43
      },
      "23" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 258,
        "CharPositionInLine" : 46
      },
      "27" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 28
    },
    "Dependencies/protobuf/third_party/googletest/googletest/Makefile.am" : {
      "ObjectId" : "b6c7232dd4cf4f096b85c0b2d465110558c3ef80",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Build rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Also verify that libgtest works by itself.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "Dependencies/protobuf/third_party/googletest/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "c54bc94fe298fe16d4513315f19ed82beacaa6ff",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 66,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 76,
        "CharPositionInLine" : 33
      },
      "14" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 85,
        "CharPositionInLine" : 39
      },
      "16" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 186,
        "CharPositionInLine" : 48
      },
      "30" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 247,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 255,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 263,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 40
    },
    "Dependencies/protobuf/third_party/googletest/googletest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Dependencies/protobuf/third_party/googletest/googletest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/protobuf/util/python/BUILD" : {
      "ObjectId" : "3ac03856690e43bba992ea8e5a1047e6435eed61",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This is a placeholder for python headers. Projects needing to use\n# fast cpp protos in protobuf's python interface should build with\n# --define=use_fast_cpp_protos=true, and in addition, provide\n# //external:python_headers dependency that in turn provides Python.h.\n#\n# Projects that include protobuf using a Bazel external repository will need to\n# add a workspace rule to their WORKSPACE files to add an external workspace\n# that includes the Python headers. For example, the protobuf WORKSPACE file\n# includes the following local_repository rule that points to this directory:\n#\n# new_local_repository(\n#   name = \"python\",\n#   path = __workspace_dir__ + \"/util/python\",\n# )",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/3.8.0/CMakeCCompiler.cmake" : {
      "ObjectId" : "e408a126b1a4f4c1f26bb2ab7ff9ee8a4421d5c3",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Save compiler ABI information.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/3.8.0/CMakeCXXCompiler.cmake" : {
      "ObjectId" : "1f9e2d9bcf9a7a785cfd983c10dde4ffbf84e245",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Save compiler ABI information.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/3.8.0/CMakeRCCompiler.cmake" : {
      "ObjectId" : "0f61961035f9ba276959420f53b5034125dba7f8",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/3.8.0/CMakeSystem.cmake" : {
      "ObjectId" : "d49f395bba32d49f4e94c62854aa43eeebcd2d49",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/Export/cmake/protobuf-targets-debug.cmake" : {
      "ObjectId" : "b5432914107fc4364d14045c59b1caa5fe0c84ac",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file for configuration \"Debug\".\n\n#----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"Debug\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"Debug\"\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"Debug\"\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"Debug\"\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/Export/cmake/protobuf-targets-minsizerel.cmake" : {
      "ObjectId" : "cec3986a26aadb1f68bb5d9b44b5a0cc1589c8f2",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file for configuration \"MinSizeRel\".\n\n#----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"MinSizeRel\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"MinSizeRel\"\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"MinSizeRel\"\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"MinSizeRel\"\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/Export/cmake/protobuf-targets-release.cmake" : {
      "ObjectId" : "fc6e12803ff77e2e5ea24dee152cc00fed8ca871",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file for configuration \"Release\".\n\n#----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"Release\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"Release\"\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"Release\"\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"Release\"\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/Export/cmake/protobuf-targets-relwithdebinfo.cmake" : {
      "ObjectId" : "ca02ff5392faa1eb1f89b46f5f82a50d55aa013e",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file for configuration \"RelWithDebInfo\".\n\n#----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Dependencies/protobuf/vsprojects/CMakeFiles/Export/cmake/protobuf-targets.cmake" : {
      "ObjectId" : "3d3435c81e58bb8d7ecad493075db01ba24730d3",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generated by CMake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file.\n\n#----------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Protect against multiple inclusion, which would fail when already imported targets are added once more.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compute the installation prefix relative to this file.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create imported target protobuf::libprotobuf-lite\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create imported target protobuf::libprotobuf\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create imported target protobuf::libprotoc\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create imported target protobuf::protoc\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Load information for each installed configuration.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Cleanup temporary variables.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Loop over all imported files and verify that they actually exist\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This file does not depend on other imported targets which have\n\n# been exported from the same project but in a separate export set.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "Dependencies/protobuf/vsprojects/cmake/protobuf-config-version.cmake" : {
      "ObjectId" : "45938dd91c33587856b5c817332c944d0bde5fb4",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prerelease versions cannot be passed in directly via the find_package command,\n\n# so we allow users to specify it in a variable\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VERSION_EQUAL ignores the prerelease strings, so we use STREQUAL.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Assume true until shown otherwise\n",
        "Line" : 18,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "#Only perform version checks if one is given\n",
        "Line" : 20,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : "# Do not match prerelease versions to non-prerelease version requests.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Not robustly SemVer compliant, but protobuf never uses '.' separated prerelease identifiers.\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check and save build options used to create this package\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check that the installed version has the same 32/64bit-ness as the one which is currently searching:\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "Dependencies/protobuf/vsprojects/cmake/protobuf-config.cmake" : {
      "ObjectId" : "c895892aa5901fe263482da905781ea1582901c5",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# User options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Depend packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Imported targets\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# CMake FindProtobuf module compatible file\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Dependencies/protobuf/vsprojects/cmake/protobuf-module.cmake" : {
      "ObjectId" : "ab305230513388f720bf1b5f025195ac152ccd99",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains backwards compatibility patches for various legacy functions and variables\n\n# Functions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Environment\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Backwards compatibility\n\n# Define camel case versions of input variables\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal function: search for normal library as well as a debug one\n\n#    if the debug one is specified also include debug/optimized keywords\n\n#    in *_LIBRARIES variable\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use result recorded by a previous call.\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Honor cache entry used by CMake 3.5 and lower.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Internal function: find threads library\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Main.\n\n#\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc\n\n# for each directory where a proto file is referenced.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The Protobuf library\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The Protobuf Lite library\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The Protobuf Protoc Library\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set the include directory\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set the protoc Executable\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Version info variable\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Backwards compatibility\n\n# Define upper case versions of output variables\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "Dependencies/protobuf/vsprojects/cmake/protobuf-options.cmake" : {
      "ObjectId" : "47fb15825752e544fda411db01c8a4391ed4dd38",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verbose output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindProtobuf module compatibel\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Dependencies/protobuf/vsprojects/cmake/protobuf-targets.cmake" : {
      "ObjectId" : "97c6f9b0bca076036c30f5768da3747043032101",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generated by CMake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file.\n\n#----------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Protect against multiple inclusion, which would fail when already imported targets are added once more.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create imported target protobuf::libprotobuf-lite\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create imported target protobuf::libprotobuf\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create imported target protobuf::libprotoc\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create imported target protobuf::protoc\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"Debug\"\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"Debug\"\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"Debug\"\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"Debug\"\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"Release\"\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"Release\"\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"Release\"\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"Release\"\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"MinSizeRel\"\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"MinSizeRel\"\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"MinSizeRel\"\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"MinSizeRel\"\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Import target \"protobuf::libprotobuf-lite\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Import target \"protobuf::libprotobuf\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Import target \"protobuf::libprotoc\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Import target \"protobuf::protoc\" for configuration \"RelWithDebInfo\"\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This file does not depend on other imported targets which have\n\n# been exported from the same project but in a separate export set.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "Dependencies/protobuf/vsprojects/cmake_install.cmake" : {
      "ObjectId" : "bf66aff11a2240fdd531afd4fd24ee744854f3c5",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install script for directory: D:/Documents/Downloads/protobuf-cpp-3.6.1/protobuf-3.6.1/cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the install prefix\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the install configuration name.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the component getting installed.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "NFComm/CMakeLists.txt" : {
      "ObjectId" : "83c0b2dc70c509b4f1568c496b14e799734661dc",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFActorPlugin/CMakeLists.txt" : {
      "ObjectId" : "81af98fd414254eaed1ddea34771d30e2a6599f1",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFConfigPlugin/CMakeLists.txt" : {
      "ObjectId" : "5883fae79445f42809d504792a278a80045ccd05",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFCore/CMakeLists.txt" : {
      "ObjectId" : "55a731ee4ee82a36f6619fa51c3c5f8b21f27250",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFKernelPlugin/CMakeLists.txt" : {
      "ObjectId" : "b60f40d338fd0cfc55235a39facec98969b2c816",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFLogPlugin/CMakeLists.txt" : {
      "ObjectId" : "0abf01fd686336b0def1e1278c487908bec6be86",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFLuaScriptPlugin/CMakeLists.txt" : {
      "ObjectId" : "7b3562965906e8ca951c5614010811b9bb639e91",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFMessageDefine/CMakeLists.txt" : {
      "ObjectId" : "7facd81965be960b7d320b0c8e2ff04e2a34e404",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFNavigationPlugin/CMakeLists.txt" : {
      "ObjectId" : "77f92d4d897f1e43b6f36f790e4505f213ec3a6b",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFNetPlugin/CMakeLists.txt" : {
      "ObjectId" : "2e5ea550a34a203e16aa0f5cb29f50cca174a85d",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Exclude this file\n\n#file(GLOB RemoveItems_Cpp TestClient.cpp TestServer.cpp)\n\n#list(REMOVE_ITEM NFNet_ROOT_Cpp ${RemoveItems_Cpp})\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries(NFNetPlugin libevent_openssl.a)\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#target_link_libraries(NFNetPlugin libssl.a)\n\n#target_link_libraries(NFNetPlugin libcrypto.a)\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#target_link_libraries(NFNetPlugin libevent_openssl.a)\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#target_link_libraries(NFNetPlugin libssl.a)\n\n#target_link_libraries(NFNetPlugin libcrypto.a)\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "NFComm/NFNetPluginCli/CMakeLists.txt" : {
      "ObjectId" : "827ea316e719929db4987aaf18cccccc4f4da7c6",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(NFNetCli libevent_openssl.a)\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#target_link_libraries(NFNetCli libssl.a)\n\n#target_link_libraries(NFNetCli libcrypto.a)\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#target_link_libraries(NFNetCli libevent_openssl.a)\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#target_link_libraries(NFNetCli libssl.a)\n\n#target_link_libraries(NFNetCli libcrypto.a)\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "NFComm/NFNetPluginSvr/CMakeLists.txt" : {
      "ObjectId" : "df1c0709d7524f6d769cf4e01a83126941ac2ad3",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(NFNetSvr libevent_openssl.a)\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#target_link_libraries(NFNetSvr libssl.a)\n\n#target_link_libraries(NFNetSvr libcrypto.a)\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#target_link_libraries(NFNetSvr libevent_openssl.a)\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#target_link_libraries(NFNetSvr libssl.a)\n\n#target_link_libraries(NFNetSvr libcrypto.a)\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "NFComm/NFNoSqlPlugin/CMakeLists.txt" : {
      "ObjectId" : "a468ff7a2a7021e7b669a9dc757b7def83b67903",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFPluginLoader/CMakeLists.txt" : {
      "ObjectId" : "eebe4ee80081955771a6735cb61ad2056849d67e",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#link_NFSDK(\"NFPluginLoader\")\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_definitions(-D_X64 -D_CONSOLE -DNF_DYNAMIC_PLUGIN)",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "NFComm/NFScalePlugin/CMakeLists.txt" : {
      "ObjectId" : "94c4983e698a8b06c5f896f2fb07786668b1704c",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFSecurityPlugin/CMakeLists.txt" : {
      "ObjectId" : "2086f1b57bb225e9a36aaf058f64933d4de89066",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFComm/NFTestPlugin/CMakeLists.txt" : {
      "ObjectId" : "8b1cc90ed29be1671dac13f6ec2f6300e5b8ff78",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/CMakeLists.txt" : {
      "ObjectId" : "f43de7c157dd8eff810699abefca0a06ad5b01ac",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFAOIPlugin/CMakeLists.txt" : {
      "ObjectId" : "88cb7cab3dbaa4929004393a45019cea7f7cb466",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFChatPlugin/CMakeLists.txt" : {
      "ObjectId" : "8d53fb39b9a6b391f600a717b44b1847d7c08a16",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFFriendPlugin/CMakeLists.txt" : {
      "ObjectId" : "04d03dcd731d588d5c134ca16ca3e5b99e63445c",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFGuildPlugin/CMakeLists.txt" : {
      "ObjectId" : "7a5fb6eacc45b843b6523fd04cb82c92c144d4ca",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFHeroPlugin/CMakeLists.txt" : {
      "ObjectId" : "45898d35947ca27cd1aa99c3587d8eeef4d14c73",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFItemBagPlugin/CMakeLists.txt" : {
      "ObjectId" : "ff50a7f3110fd2d3d606fee9a391b8f6f5b19163",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFMailPlugin/CMakeLists.txt" : {
      "ObjectId" : "dcc84910e6d153a898fbc4277fafb8bc64db59a0",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFRankPlugin/CMakeLists.txt" : {
      "ObjectId" : "3ec02b718a42a6672e16551f435bd8366b5fade0",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFShopPlugin/CMakeLists.txt" : {
      "ObjectId" : "635da789614d1480721ab2904a7c44e1a29d5d8d",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFSkillPlugin/CMakeLists.txt" : {
      "ObjectId" : "89a531d105b85fb968e141149e2295972d564a81",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFTaskPlugin/CMakeLists.txt" : {
      "ObjectId" : "8e24bbe6b45466445f799f58cb56eee49f0e253e",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFMidWare/NFUserGiftPlugin/CMakeLists.txt" : {
      "ObjectId" : "e655d01646d5277b92d081b0fb403c1c5e74df00",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/CMakeLists.txt" : {
      "ObjectId" : "500b1a23b8ef72956ee1b3845dc2bd7e98420767",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFDBLogicPlugin/CMakeLists.txt" : {
      "ObjectId" : "fdd4954dd21a8202ca3712a64314ccca815604db",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFDBNet_ClientPlugin/CMakeLists.txt" : {
      "ObjectId" : "dae90971e1b23597ead221748b68195d69347ad4",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFDBNet_ServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "003e551ec13539fdceb15d2e53b20cbe2cf8fad1",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFGameLogicPlugin/CMakeLists.txt" : {
      "ObjectId" : "fcc6b01e6cf62cb6ed28110c3872fd63db38efa6",
      "LastModified" : "2019-02-17T09:52:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Exclude this file\n\n#file(GLOB RemoveItems_Cpp NFPVPModule.cpp NFTileMapModule.cpp NFTileModule.cpp NFSurvivalModule.cpp NFTileMapModule.cpp)\n\n#list(REMOVE_ITEM NFGameLogicPlugin_ROOT_Cpp ${RemoveItems_Cpp})\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "NFServer/NFGameServerNet_ClientPlugin/CMakeLists.txt" : {
      "ObjectId" : "9b15dba7dbe655e8523b276bd7801931aac9cc85",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFGameServerNet_ServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "c37f07e21b6f7af596593f5ca9207f86a3de6094",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFGameServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "9b1419720f266260709807aec2c0a885bd94a86e",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFLoginLogicPlugin/CMakeLists.txt" : {
      "ObjectId" : "d2ba77bc5df56281047f80412eff1bb1ccaa4b74",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFLoginNet_ClientPlugin/CMakeLists.txt" : {
      "ObjectId" : "e3b17a72259aafee756607e19e6082656a6a1b6f",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFLoginNet_HttpServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "d4f17ea1db82dd66ec3a99ee2e21cf5d6bfc8fd7",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFLoginNet_ServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "b8e5f33785f0a7f7d97e940a39416497aa9f65fb",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFMasterNet_HttpServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "b249f67a2d8d2415b83335ec359a364275de403d",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFMasterNet_ServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "72654bcb8d5540cfc293d64ed242b4cb451e0034",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFMasterServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "3457dadbea15bcc537a2a7be14d2089ab796ba97",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFProxyLogicPlugin/CMakeLists.txt" : {
      "ObjectId" : "06ad007c1771add3bd37a819250e9fd5ec42eb0d",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFProxyServerNet_ClientPlugin/CMakeLists.txt" : {
      "ObjectId" : "341cd5ef0180aeafe5266861213f0430aad65230",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFProxyServerNet_ServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "7bf35979db5be2ca53418a3fd11b0352e6fd1774",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFWorldLogicPlugin/CMakeLists.txt" : {
      "ObjectId" : "766301dbb65165f0608d42d8a629ae0d215d2561",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFWorldNet_ClientPlugin/CMakeLists.txt" : {
      "ObjectId" : "a04783fa1695ec737dbe47cdd3fe1fc5a4a48935",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFServer/NFWorldNet_ServerPlugin/CMakeLists.txt" : {
      "ObjectId" : "6115f99b7ae1273c8cc0fff9e409f745caf51d72",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFTools/CMakeLists.txt" : {
      "ObjectId" : "b923ce895e44e91e2a3a53649b533ec6b33a81c6",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/CMakeLists.txt" : {
      "ObjectId" : "429e77e37b54e0dcab098e507faf74c81f07a0f4",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/minizip/Makefile" : {
      "ObjectId" : "876686135c64c3af7348817b2c96d3902c632d76",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/minizip/Makefile.am" : {
      "ObjectId" : "d83fee7d5b5e3b79542be2eb62ef2c37bcc2e95a",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/minizip/aes/Makefile" : {
      "ObjectId" : "5340a2d93a18afe10a6563f6c8290190b73e23ef",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/zlib/CMakeLists.txt" : {
      "ObjectId" : "0c0247cc516b4493bb9a9b66f743a6110139a2b5",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clear variable\n",
        "Line" : 47,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we're doing an out of source build and the user has a zconf.h\n\n# in their source tree...\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If present will override custom build rule below.\n",
        "Line" : 128,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This property causes shared libraries on Linux to have the full version\n\n# encoded into their final filename.  We disable this on Cygwin because\n\n# it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\n# seems to be the default.\n\n#\n\n# This has no effect with MSVC, on that platform the version info for\n\n# the DLL comes from the resource file win32/zlib1.rc\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# On unix-like platforms the library is almost always called libz\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Creates zlib1.dll when building shared library version\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#============================================================================\n\n# Example binaries\n\n#============================================================================\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "NFTools/NFFileProcess/zlib/Makefile" : {
      "ObjectId" : "6bba86c73fca2abda416baa1a7cf883b3494fb29",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/zlib/contrib/blast/Makefile" : {
      "ObjectId" : "9be80bafe050eed57029ef2e690f36677a3003c0",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/zlib/contrib/minizip/Makefile" : {
      "ObjectId" : "84eaad20d4fb19b00965268dd75d7e9b66c8cc21",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/zlib/contrib/minizip/Makefile.am" : {
      "ObjectId" : "d343011ebc3b3fd78d2bc3a29801a083c038cf0c",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/zlib/contrib/puff/Makefile" : {
      "ObjectId" : "0e2594c80885c0dbea13c6d22b2e60e9fb82b51f",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# puff full coverage test (should say 100%)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "NFTools/NFFileProcess/zlib/contrib/untgz/Makefile" : {
      "ObjectId" : "b54266fba20a167a1d83b7afd503dfd2f849ca57",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "NFTools/NFFileProcess/zlib/nintendods/Makefile" : {
      "ObjectId" : "21337d01ab2fe20743682125994666e20af6b7e7",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# TARGET is the name of the output\n\n# BUILD is the directory where object files & intermediate files will be placed\n\n# SOURCES is a list of directories containing source code\n\n# DATA is a list of directories containing data files\n\n# INCLUDES is a list of directories containing header files\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# options for code generation\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# list of directories containing libraries, this must be the top level containing\n\n# include and lib\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# no real need to edit anything past this point unless you need to add additional\n\n# rules for different file extensions\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# use CXX for linking C++ projects, CC for standard C\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# main targets\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#---------------------------------------------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#---------------------------------------------------------------------------------------\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "Tutorial/CMakeLists.txt" : {
      "ObjectId" : "997b9e2d02688d0976349bc4df51aaf28bb98974",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tutorial/Tutorial1/CMakeLists.txt" : {
      "ObjectId" : "0910dacf39310e762a4902bddfbaf26860eb9c0e",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tutorial/Tutorial2/CMakeLists.txt" : {
      "ObjectId" : "f7b368deec03da59c2b52c23a831530f64cd5a51",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tutorial/Tutorial3/CMakeLists.txt" : {
      "ObjectId" : "de5f0299bd0f4fa390ba844939219ac5daef6c31",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tutorial/Tutorial4/CMakeLists.txt" : {
      "ObjectId" : "9cbccd63696ff225f1e06bcbe37ac92e63761d79",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tutorial/Tutorial5/CMakeLists.txt" : {
      "ObjectId" : "bec26581f3db0e59de344758ccc0d95f135fba9a",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tutorial/Tutorial6/CMakeLists.txt" : {
      "ObjectId" : "c3ffd7214b2c99ffa9196b190ad6ac19890c3683",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tutorial/Tutorial7/CMakeLists.txt" : {
      "ObjectId" : "19f6b057f6924657cb160db2e20a7df60b5cfe67",
      "LastModified" : "2018-11-08T08:06:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 100,
    "MAKEFILE" : 19,
    "AUTOMAKE" : 12,
    "BAZEL" : 4
  },
  "ElapsedTime" : 2422
}