{
  "Repository" : "19688811",
  "Revision" : "HEAD",
  "ObjectId" : "a357f94eeff8ef2a30794a1039882c6fd206131f",
  "CommitTime" : "2019-03-16T17:16:05Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d58ac909550777d3bb70daa59e87fa5e1aa371f1",
      "LastModified" : "2019-03-04T20:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-populate version:\n\n# from https://stackoverflow.com/questions/47066115/cmake-get-version-from-multi-line-text-file\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "## Set the standard required compile flags\n\n# Nov 18th --- removed -DHAVE_CONFIG_H\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n# Sanitizers BEGIN\n\n###\n\n#list(APPEND TGT_COMPILE_FLAGS \"-fsanitize=address\")\n\n#list(APPEND TGT_COMPILE_FLAGS \"-fsanitize=undefined\")\n\n#set(CMAKE_LINK_FLAGS \"-fsanitize=address\")\n\n#list(APPEND CMAKE_LINK_FLAGS \"-fsanitize=undefined\")\n\n###\n\n# Sanitizers END\n\n###\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Prefer static to dynamic libraries\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Do we require all these components?  Any others?\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "##\n\n# OSX is strange (some might say, stupid in this regard).  Deal with it's quirkines here.\n\n##\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# To allow ourselves to build a dynamic library, we have to tell the compiler\n\n# that, yes, the symbols will be around at runtime.\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# In order to \"think different\", we also have to use non-standard suffixes\n\n# for our shared libraries\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# We're in sane linux world\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "## this get's set differently below if we\n\n## are on clang & apple\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##\n\n# Let us check the sha sum of our pacakges if we have the right tools\n\n##\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##\n\n# Compiler-specific C++11/14 activation.\n\n# http://stackoverflow.com/questions/10984442/how-to-detect-c11-support-of-a-compiler-with-cmake\n\n##\n\n##\n\n# First take care of what to do if we have gcc\n\n##\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If we're on OSX\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Put complete static linking on hold for the time-being\n\n# If we're not on OSX, make an attempt to compile everything statically\n\n#if(NOT APPLE)\n\n#set(CMAKE_EXE_LINK_FLAGS \"-static\")\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#endif()\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# If we're on Linux (i.e. not OSX) and we're using\n\n# gcc, then set the -static-libstdc++ flag\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Tentatively, we support clang now\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# If we have libc++, then try and use it\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Otherwise, use libstdc++ (and make it static)\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# There's currently a bug with clang-3.4 & Boost 1.55 -- this hack fixes it\n\n# but we should do something better (does this break things if CPU doesn't\n\n# have 128-bit support)?\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "## TODO: Figure out how to detect this automatically\n\n# If the \"assembler\" is too old, tell TBB not to compile\n\n# with -mrtm\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##\n\n# Record this top-level path\n\n##\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Have CMake tell us what it's doing\n\n# set(CMAKE_VERBOSE_MAKEFILE true)\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###\n\n#\n\n#  Grab RapMap sources for quasi-mapping code --- DURING CONFIGURE TIME!\n\n#\n\n####\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##\n\n# Super-secret override\n\n##\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##\n\n# We want static, multithreaded boost libraries\n\n##\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#set(Boost_USE_STATIC_RUNTIME OFF)\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "##\n",
        "Line" : 315,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "#URL http://tukaani.org/xz/xz-5.2.2.tar.gz\n\n#URL_HASH SHA1=14663612422ab61386673be78fbb2556f50a1f08\n\n##\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Tell cmake that the external project generated a library so we can\n\n# add dependencies here instead of later\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#URL http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz\n\n#URL_HASH SHA1=3f89f861209ce81a6bab1fd1998c0ef311712002\n",
        "Line" : 350,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Tell cmake that the external project generated a library so we can\n\n# add dependencies here instead of later\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "##\n\n# Set the latest version and look for what we need\n\n##\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "##\n\n#  If we had to fetch Boost, the reconfigure step will re-run cmake.  The second configuration\n\n#  pass is executed with the BOOST_RECONFIGURE flag set. This should allow our newly\n\n#  installed Boost to be found by CMake.\n\n##\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "##\n\n# Either inform the user of how to obtain Boost, or, if they passed in the FETCH_BOOST\n\n# option, go and grab it for them.\n\n##\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "## Let the rest of the build process know we're going to be fetching boost\n",
        "Line" : 417,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#PATCH_COMMAND patch -p2 < ${CMAKE_CURRENT_SOURCE_DIR}/external/boost156.patch\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "##\n\n# After we've installed boost,\n\n##\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "##\n\n# If we're fetching boost and we need to have dummy paths for these variables\n\n# so that CMake won't complain\n\n##\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Note: This zip comes from the fetched rapmap.zip, whose SHA we check\n\n# so we souldn't need to check this one separately.\n",
        "Line" : 488,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#UPDATE_COMMAND sh -c \"mkdir -p <SOURCE_DIR>/build\"\n",
        "Line" : 492,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "##\n\n#URL https://github.com/USCiLab/cereal/archive/v1.2.2.tar.gz\n\n#DOWNLOAD_NAME cereal-v1.2.2.tar.gz\n\n#TLS_VERIFY FALSE\n\n#URL_HASH SHA1=ffddf5fc5313cfbb893e07823ca8c473084eebca\n\n##\n",
        "Line" : 513,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "#UPDATE_COMMAND sh -c \"mkdir -p <SOURCE_DIR>/build\"\n",
        "Line" : 521,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "## Try and find TBB first\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "##\n\n#\n\n# Fetch and build Intel's Threading Building Blocks library.\n\n#\n\n##\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Set the appropriate compiler\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# These are useful for the custom install step we'll do later\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "## Don't know why it's a problem yet, but if we're using\n\n## GCC, get rid of the DO_ITT_NOTIFY flag\n",
        "Line" : 558,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "##\n\n#URL https://github.com/01org/tbb/archive/2018_U3.tar.gz\n\n#DOWNLOAD_NAME 2018_U3.tar.gz\n\n#URL_HASH SHA1=d6cf16a42ece60aad6a722b369e1a2aa753347b4\n\n#TLS_VERIFY FALSE\n\n##\n",
        "Line" : 570,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "##\n\n# If we're fetching tbb, we need to have dummy paths for these variables\n\n# so that CMake won't complain\n\n##\n",
        "Line" : 597,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#set(TBB_LIBRARIES tbb tbbmalloc)\n",
        "Line" : 604,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "##\n\n#  Similar to the Boost trick above, the libtbb reconfigure should force this code\n\n#  to be run on the second configuration pass, where it should appropriately set the\n\n#  TBB_INSTALL_DIR variable.\n\n##\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "##\n\n#URL https://github.com/COMBINE-lab/libgff/archive/v1.1.tar.gz\n\n#DOWNLOAD_NAME libff.tgz\n\n#URL_HASH SHA1=37b3147d78391d1fabbe6a0df313fbf516abbc6f\n\n#TLS_VERIFY FALSE\n\n##\n",
        "Line" : 635,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "#UPDATE_COMMAND sh -c \"mkdir -p <SOURCE_DIR>/build\"\n",
        "Line" : 642,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Because of the way that Apple has changed SIP\n\n# in el capitan, some headers may be in a new location\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# See if we have Jemalloc\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "##\n\n# Don't be so stringent about the version yet\n\n##\n\n#if (NOT (${JEMALLOC_VERSION} VERSION_LESS 5.1.0))\n",
        "Line" : 692,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "#else()\n\n#  message(\"Fond Jemalloc version ${JEMALLOC_VERSION}, but require >= 5.1.0. Downloading newer version\")\n\n#endif()\n",
        "Line" : 699,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "###\n\n#\n\n# Done building external dependencies.\n\n#\n\n###\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Recurse into Salmon source directory\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#add_dependencies(salmon RapMap)\n\n# build a CPack driven installer package\n",
        "Line" : 771,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 63
    },
    "cmake/Modules/FindJellyfish.cmake" : {
      "ObjectId" : "e12b30a8de88ec22b8436c2dda0615a9882b3ac8",
      "LastModified" : "2016-03-11T20:41:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Find Jellyfish \n\n#\n\n# This sets the following variables:\n\n# JELLYFISH_FOUND - True if Jellyfish was found.\n\n# JELLYFISH_INCLUDE_DIRS - Directories containing the Jellyfish include files.\n\n# JELLYFISH_DEFINITIONS - Compiler flags for Jellyfish.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(\"Required Jellyfish version ${Jellyfish_FIND_VERSION}\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindJemalloc.cmake" : {
      "ObjectId" : "9141467fef970cfbb30220a1e043cb95b7f3dc03",
      "LastModified" : "2018-06-07T16:11:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From: https://raw.githubusercontent.com/STEllAR-GROUP/hpx/master/cmake/FindJemalloc.cmake\n\n# Copyright (c)      2014 Thomas Heller\n\n# Copyright (c) 2007-2012 Hartmut Kaiser\n\n# Copyright (c) 2010-2011 Matt Anderson\n\n# Copyright (c) 2011      Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JEMALLOC_FOUND to TRUE\n\n# if all listed variables are TRUE and the requested version matches.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindTBB.cmake" : {
      "ObjectId" : "c8b3eb531734b7304997c931c914e204e5d7fe28",
      "LastModified" : "2018-06-07T16:11:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The MIT License (MIT)\n\n#\n\n# Copyright (c) 2015 Justus Calvin\n\n# \n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n# \n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n# \n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# FindTBB\n\n# -------\n\n#\n\n# Find TBB include directories and libraries.\n\n#\n\n# Usage:\n\n#\n\n#  find_package(TBB [major[.minor]] [EXACT]\n\n#               [QUIET] [REQUIRED]\n\n#               [[COMPONENTS] [components...]]\n\n#               [OPTIONAL_COMPONENTS components...]) \n\n#\n\n# where the allowed components are tbbmalloc and tbb_preview. Users may modify \n\n# the behavior of this module with the following variables:\n\n#\n\n# * TBB_ROOT_DIR          - The base directory the of TBB installation.\n\n# * TBB_INCLUDE_DIR       - The directory that contains the TBB headers files.\n\n# * TBB_LIBRARY           - The directory that contains the TBB library files.\n\n# * TBB_<library>_LIBRARY - The path of the TBB the corresponding TBB library. \n\n#                           These libraries, if specified, override the \n\n#                           corresponding library search results, where <library>\n\n#                           may be tbb, tbb_debug, tbbmalloc, tbbmalloc_debug,\n\n#                           tbb_preview, or tbb_preview_debug.\n\n# * TBB_USE_DEBUG_BUILD   - The debug version of tbb libraries, if present, will\n\n#                           be used instead of the release version.\n\n#\n\n# Users may modify the behavior of this module with the following environment\n\n# variables:\n\n#\n\n# * TBB_INSTALL_DIR \n\n# * TBBROOT\n\n# * LIBRARY_PATH\n\n#\n\n# This module will set the following variables:\n\n#\n\n# * TBB_FOUND             - Set to false, or undefined, if we haven’t found, or\n\n#                           don’t want to use TBB.\n\n# * TBB_<component>_FOUND - If False, optional <component> part of TBB sytem is\n\n#                           not available.\n\n# * TBB_VERSION           - The full version string\n\n# * TBB_VERSION_MAJOR     - The major version\n\n# * TBB_VERSION_MINOR     - The minor version\n\n# * TBB_INTERFACE_VERSION - The interface version number defined in \n\n#                           tbb/tbb_stddef.h.\n\n# * TBB_<library>_LIBRARY_RELEASE - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n# * TBB_<library>_LIBRARY_DEGUG - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n#\n\n# The following varibles should be used to build and link with TBB:\n\n#\n\n# * TBB_INCLUDE_DIRS        - The include directory for TBB.\n\n# * TBB_LIBRARIES           - The libraries to link against to use TBB.\n\n# * TBB_LIBRARIES_RELEASE   - The release libraries to link against to use TBB.\n\n# * TBB_LIBRARIES_DEBUG     - The debug libraries to link against to use TBB.\n\n# * TBB_DEFINITIONS         - Definitions to use when compiling code that uses\n\n#                             TBB.\n\n# * TBB_DEFINITIONS_RELEASE - Definitions to use when compiling release code that\n\n#                             uses TBB.\n\n# * TBB_DEFINITIONS_DEBUG   - Definitions to use when compiling debug code that\n\n#                             uses TBB.\n\n#\n\n# This module will also create the \"tbb\" target that may be used when building\n\n# executables and libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################\n\n# Check the build type\n\n##################################\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##################################\n\n# Set the TBB search directories\n\n##################################\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Define search paths based on user input and environment variables\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Define the search directories based on the current platform\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set the target architecture\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Set the TBB search library path search suffix based on the version of VC\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add the library path search suffix for the VC independent version of TBB\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# OS X\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# TODO: Check to see which C++ library is being used by the compiler.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# The default C++ library on OS X 10.9 and later is libc++\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Linux\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# TODO: Check compiler version to see the suffix should be <arch>/gcc4.1 or\n\n#       <arch>/gcc4.1. For now, assume that the compiler is more recent than\n\n#       gcc 4.4.x or later.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "##################################\n\n# Find the TBB include dir\n\n##################################\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "##################################\n\n# Set version strings\n\n##################################\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "##################################\n\n# Find TBB components\n\n##################################\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Find each component\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Search for the libraries\n",
        "Line" : 211,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Mark internal variables as advanced\n",
        "Line" : 238,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "##################################\n\n# Set compile flags and libraries\n\n##################################\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "##################################\n\n# Create targets\n\n##################################\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/Modules/FindTcmalloc.cmake" : {
      "ObjectId" : "96727ef5d3104d38fa15e3515034c63d2a274f8d",
      "LastModified" : "2016-03-11T20:41:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Tcmalloc\n\n# Find the native Tcmalloc includes and library\n\n#\n\n#  Tcmalloc_INCLUDE_DIR - where to find Tcmalloc.h, etc.\n\n#  Tcmalloc_LIBRARIES   - List of libraries when using Tcmalloc.\n\n#  Tcmalloc_FOUND       - True if Tcmalloc found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/PostInstall.cmake" : {
      "ObjectId" : "9a447685d0310d16e6e53ae0b1ae06a07711e331",
      "LastModified" : "2018-06-07T16:11:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n# Print some post install messages for the user\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if (${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n\n#\tmessage(\"Fixing library names with install_name_tool\")\n\n#\texecute_process(COMMAND install_name_tool -add_rpath ${CMAKE_INSTALL_PREFIX}/bin ${CMAKE_INSTALL_PREFIX}/bin/salmon)\n\n#\texecute_process(COMMAND install_name_tool -add_rpath ${CMAKE_INSTALL_PREFIX}/lib ${CMAKE_INSTALL_PREFIX}/bin/salmon)\n\n#\texecute_process(COMMAND install_name_tool -add_rpath @executable_path ${CMAKE_INSTALL_PREFIX}/bin/salmon) \n\n#endif()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/SimpleTest.cmake" : {
      "ObjectId" : "c24f8c61de9ee8494b7d83b7cf1e8d342d796342",
      "LastModified" : "2016-03-11T20:41:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TestSalmonFMD.cmake" : {
      "ObjectId" : "ff40e4ab9ce6b10fa4d0d5a027a8912d9ff144aa",
      "LastModified" : "2016-03-11T20:41:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TestSalmonQuasi.cmake" : {
      "ObjectId" : "39befcd9184a118396c6c029365d3ebceef8ec53",
      "LastModified" : "2018-07-27T18:51:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/UnitTests.cmake" : {
      "ObjectId" : "b3ae54c2f408b5d934206d5f77b06b65eeb7d1e8",
      "LastModified" : "2019-03-04T20:23:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/Makefile" : {
      "ObjectId" : "89a4147e3ca81db96707dee7e75d43e0c8547a92",
      "LastModified" : "2016-03-11T20:41:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "f43bb80653402abba366fe6b61b1e7cf7ff6dd34",
      "LastModified" : "2019-03-04T20:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${GAT_SOURCE_DIR}/external/install/include/bwa\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check if we know how to do IPO\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the ksw2pp library\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the RPATH\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# use, i.e. do not skip the full RPATH for the build tree\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# the RPATH to be used when installing\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# don't add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Build the Salmon library\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build the Alevin library\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build the salmon executable\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_executable(salmon-read ${SALMON_READ_SRCS})\n\n#set_target_properties(salmon-read PROPERTIES COMPILE_FLAGS \"${CMAKE_CXX_FLAGS} -DHAVE_LIBPTHREAD -D_PBGZF_USE -fopenmp\"\n\n#    LINK_FLAGS \"-DHAVE_LIBPTHREAD -D_PBGZF_USE -fopenmp\")\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#set_target_properties(salmon_core salmon PROPERTIES LINK_SEARCH_END_STATIC TRUE)\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# our suffix array construction libraries\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Link the executable\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#${GAT_SOURCE_DIR}/external/install/lib/libbwa.a\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#asan\n\n#ubsan\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Link the executable\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#${GAT_SOURCE_DIR}/external/install/lib/libbwa.a\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#asan\n\n#ubsan\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "##\n\n# External dependencies of salmon_core and salmon\n\n##\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#add_dependencies(salmon_core libbwa)\n\n#add_dependencies(salmon libbwa)\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "### No need for this, I think\n\n##  This ensures that the salmon executable should work with or without `make install`\n\n###\n\n## Grumble grumble . . . OSX\n\n#if (APPLE)\n\n#    # only attempt install_name_tool for tbb if we installed it\n\n#    if (${TBB_LIBRARY_DIRS} MATCHES ${GAT_SOURCE_DIR}/external/install/lib)\n\n#        add_custom_command(TARGET salmon\n\n#            POST_BUILD\n\n#            COMMAND install_name_tool -change libtbb.dylib @rpath/libtbb.dylib ${GAT_SOURCE_DIR}/build/src/salmon\n\n#            COMMAND install_name_tool -change libtbbmalloc.dylib @rpath/libtbbmalloc.dylib ${GAT_SOURCE_DIR}/build/src/salmon\n\n#            COMMAND install_name_tool -change libtbbmalloc_proxy.dylib @rpath/libtbbmalloc_proxy.dylib ${GAT_SOURCE_DIR}/build/src/salmon\n\n#            COMMAND install_name_tool -add_rpath  ${GAT_SOURCE_DIR}/external/install/lib ${GAT_SOURCE_DIR}/build/src/salmon\n\n#            )\n\n#        add_custom_command(TARGET unitTests\n\n#            POST_BUILD\n\n#            COMMAND install_name_tool -change libtbb.dylib @rpath/libtbb.dylib ${GAT_SOURCE_DIR}/build/src/unitTests\n\n#            COMMAND install_name_tool -change libtbbmalloc.dylib @rpath/libtbbmalloc.dylib ${GAT_SOURCE_DIR}/build/src/unitTests\n\n#            COMMAND install_name_tool -change libtbbmalloc_proxy.dylib @rpath/libtbbmalloc_proxy.dylib ${GAT_SOURCE_DIR}/build/src/unitTests\n\n#            COMMAND install_name_tool -add_rpath  ${GAT_SOURCE_DIR}/external/install/lib ${GAT_SOURCE_DIR}/build/src/unitTests\n\n#            )\n\n#    endif()\n\n#else()\n\n#    # related to complete static linking --- on hold    \n\n#    set (BOOST_THREAD_LIBRARY)\n\n#endif()\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#if (APPLE)\n\n#\tadd_custom_command(TARGET salmon\n\n#\t\tPOST_BUILD\n\n#\t\tCOMMAND install_name_tool -add_rpath ${GAT_SOURCE_DIR}/external/install/lib salmon\n\n#\tCOMMAND install_name_tool -add_rpath @executable_path/../lib salmon\n\n#\t\t)\n\n#endif()\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##### ======================================\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# install(FILES ${Boost_LIBRARIES}\n\n# \t           DESTINATION ${INSTALL_LIB_DIR})\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Remove this test since we are removing support for the FMD index. \n\n# add_test( NAME salmon_read_test_fmd COMMAND ${CMAKE_COMMAND} -DTOPLEVEL_DIR=${GAT_SOURCE_DIR} -P ${GAT_SOURCE_DIR}/cmake/TestSalmonFMD.cmake )\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    }
  },
  "FileTypes" : {
    "CMAKE" : 11,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2865
}