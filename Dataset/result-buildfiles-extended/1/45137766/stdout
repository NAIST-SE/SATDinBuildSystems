{
  "Repository" : "45137766",
  "Revision" : "HEAD",
  "ObjectId" : "48bb24b893a9fb5d7aa0ae03e1714c8b067890f3",
  "CommitTime" : "2019-04-12T14:14:32Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a4a66f61c41355c8e97ba0587bf4561a001a1e3e",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(Roel): WT_NO_STD_WSTRING/WT_NO_STD_LOCALE?\n",
        "Line" : 56,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "#\n\n# Ubuntu patched this compiler to hell\n\n# gcc (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Various things that must be configured by the user or packager ...\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# required for all that uses boost.asio\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# See http://svn.boost.org/trac/boost/ticket/3465\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Fixup Windows declspec stuff\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Default is to use cmake's boost discovery. The default will use wt's own\n\n# boost detection mechanism if one of the following is true:\n\n# - cmake version is too old (prior to 2.6 series)\n\n# - BOOST_COMPILER or BOOST_VERSION was defined (compatibility with existing\n\n#   build scripts)\n\n# - USE_BOOST_FRAMEWORK: we've adapted the vintage boost cmake find\n\n#   script to locate a boost.framework\n\n#\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# There's no decent boost discovery prior to cmake 2.6\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Pau says: 2.6.0 and 2.6.1 are not very good\n",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Does not apply to win32\n",
        "Line" : 199,
        "CharPositionInLine" : 25
      },
      "10" : {
        "Text" : "# If the user specifies the standard CMAKE_PREFIX_PATH to find packages,\n\n# honour it.\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Deprecated <= 3.1.3\n",
        "Line" : 237,
        "CharPositionInLine" : 25
      },
      "12" : {
        "Text" : "# Deprecated <= 3.1.3\n",
        "Line" : 253,
        "CharPositionInLine" : 22
      },
      "13" : {
        "Text" : "# decide on GraphicsMagick vs skia\n\n# todo: set default to whatever was found\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Boost is used nearly everywhere, so we can put these here\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# You could expect that this is the default when BOOST_ALL_DYN_LINK\n\n# is not set, but this is problematic for cygwin\n",
        "Line" : 485,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# we enable rpath support for APPLE, this probably goes against policy\n\n# linux distributions?\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Compile time constants & make sure our build finds it\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Generate wt_config.xml from wt_config.xml.in\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake package configuration\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "WtInstall.cmake" : {
      "ObjectId" : "c65cb33b6ae5488af422ecf0668b2d12a27e0d17",
      "LastModified" : "2009-02-16T14:31:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindSqlite3.cmake" : {
      "ObjectId" : "bc5dfa8ddb8e656af04cfc113d428468828c0e57",
      "LastModified" : "2010-08-12T15:06:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We define:\n\n# - SQLITE3_INCLUDE_DIR - Where to find Sqlite 3 header files (directory)\n\n# - SQLITE3_LIBRARIES - Sqlite 3 libraries\n\n# - SQLITE3_LIBRARY_RELEASE - Where the release library is\n\n# - SQLITE3_LIBRARY_DEBUG - Where the debug library is\n\n# - SQLITE3_FOUND - Set to TRUE if we found everything \n\n#   (library, includes and executable)\n\n# Taking into account:\n\n# - SQLITE3_PREFIX\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2010 Pau Garcia i Quiles, <pgquiles@elpauer.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "6d48f0efe8faad4127d0725be0e1535859c65264",
      "LastModified" : "2018-09-13T14:29:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Normally, this is not a toplevel CMakeLists.txt file. Except when it is\n\n# used in combination with the Windows SDK, then it is prefixed with the\n\n# required configuration settings to allow building the examples of the\n\n# binary Wt distribution as a standalone project.\n\n#\n\n# This CMakeLists.txt is complex because it supports all different modes\n\n# of building Wt on all supported platforms. Your own CMakeLists.txt can\n\n# be much simpler. For example (for Windows):\n\n#\n\n# CMAKE_MINIMUM_REQUIRED(VERSION 2.4)\n\n# Project(myproject)\n\n#\n\n# INCLUDE_DIRECTORIES(c:/wt-installation-path/include)\n\n# LINK_DIRECTORIES(c:/wt-installation-path/lib)\n\n#\n\n# ADD_DEFINITIONS(-DHPDF_DLL)\n\n#\n\n# ADD_EXECUTABLE(myprog.wt\n\n#   MyProg1.cpp\n\n#   OtherFile.cpp\n\n#   AndEvenMoreCode.cpp\n\n# )\n\n#\n\n# TARGET_LINK_LIBRARIES(myprog.wt\n\n#   debug wtd      optimized wt\n\n#   debug wthttpd  optimized wthttp\n\n#   debug libhpdfd optimized libhpdf # only required for if you write pdfs\n\n# )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# preamble to make this a toplevel CMakeLists.txt for Windows, intended\n\n# for being used \n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We ship libharu as DLL. Compiling/linking against libharu DLL requires\n\n# this definition to be set.\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Windows SDK is always multithreaded\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Normal example CMakeLists.txt starts here\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The WT_ADD_EXAMPLE function builds a DLL in case of ISAPI, and an executable\n\n# in case of FCGI or HTTPD connectors. It also makes sure that the example\n\n# links to the proper libraries (connector + wt).\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Finding the directory where to install the binary and the wrapper/runner script is tricky \n\n# because examples do not use project(...), or there is more than one example in one subdirectory\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "examples/blog/CMakeLists.txt" : {
      "ObjectId" : "ea66c9125f1ec161e7339e35bfaaf90f00c2c4ca",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test whether crypt(3) is provided by libc. If it's not, check if\n\n# libcrypt exists and if it provides crypt(3).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/chart3D/CMakeLists.txt" : {
      "ObjectId" : "c088bf2aecdbaeb796bbda41165e6b2ba4acb9c5",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The ADD_EXAMPLE macro (defined in examples/CMakeLists.txt) ensures that\n\n# the example is correctly built for the requested connector. It is equivalent\n\n# to the following two lines:\n\n#   ADD_EXECUTABLE(hello.wt hello.C)\n\n#   TARGET_LINK_LIBRARIES(hello.wt ${EXAMPLES_CONNECTOR})\n\n# except when the ISAPI (for Microsoft IIS) connector is used, where it will\n\n# build a DLL with the proper symbols exported.\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/charts/CMakeLists.txt" : {
      "ObjectId" : "b49895d4e123f68200f7134a59cc00d65ddfb20d",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/codeview/CMakeLists.txt" : {
      "ObjectId" : "52518a6915cf0ede547c4c6946065cfae75edf17",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/composer/CMakeLists.txt" : {
      "ObjectId" : "0d19e6c25c3086e25a13491aa662ec5ae90ce022",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/dialog/CMakeLists.txt" : {
      "ObjectId" : "8f4b3232ee026f05b6433649b3231f0e91cd1ba9",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/dragdrop/CMakeLists.txt" : {
      "ObjectId" : "382896552a9b0d98cd9b5775c2fe86d56b89bdd7",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/CMakeLists.txt" : {
      "ObjectId" : "f34c094dd1f26eedf1e5be578028194462bf2aa7",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/auth1/CMakeLists.txt" : {
      "ObjectId" : "d8f0d87a529f6d03376a4df08eae660f0a3f727a",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/auth2/CMakeLists.txt" : {
      "ObjectId" : "ca1c78a49fbf3ed0dd34017e8b2eddc52dc07724",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/broadcast/CMakeLists.txt" : {
      "ObjectId" : "fed02b6822c0e76a3601ddf6c6ec32b5b88dbc4b",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "examples/feature/client-ssl-auth/CMakeLists.txt" : {
      "ObjectId" : "49d0b65575b3347bbca1fa4b8d2dfa50d5630009",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/dbo/CMakeLists.txt" : {
      "ObjectId" : "44be8c555087a947141439657f93bd608e936426",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF (MULTI_THREADED)\n\n#  SET(tutorial_libs ${tutorial_libs} ${BOOST_THREAD_LIB})\n\n#ENDIF (MULTI_THREADED)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/dbo/tutorial9/CMakeLists.txt" : {
      "ObjectId" : "5140c3fc35d62f4ac1e263f9cdba86098e95843f",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF (MULTI_THREADED)\n\n#  SET(tutorial_libs ${tutorial_libs} ${BOOST_THREAD_LIB})\n\n#ENDIF (MULTI_THREADED)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/locale/CMakeLists.txt" : {
      "ObjectId" : "3af17ccb54be51a3fcb715521b7e487b5a38c19c",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/mediaplayer/CMakeLists.txt" : {
      "ObjectId" : "317e0784ebdcaae2255a4a15b1edb7623fd09ff6",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/miniwebgl/CMakeLists.txt" : {
      "ObjectId" : "5dd6859a111a3342b9ea06a1e16c2915dc78a6da",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/multiple_servers/CMakeLists.txt" : {
      "ObjectId" : "e84674f15d777f91528314a4cdbda6c71a6a17f3",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/oauth/CMakeLists.txt" : {
      "ObjectId" : "e967c65e78655a70ee349b32871b81ebdcbcaa58",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/oidc/CMakeLists.txt" : {
      "ObjectId" : "2854cf49cfeac00de0765e506f044ccf4aa1cefd",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/paypal/CMakeLists.txt" : {
      "ObjectId" : "9eb486902a699e184630a718dcf0b72bde0581ec",
      "LastModified" : "2017-09-18T14:49:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/postall/CMakeLists.txt" : {
      "ObjectId" : "45d0f42e635e6585a3467ee0f38014d3a2caae2c",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/scrollvisibility/CMakeLists.txt" : {
      "ObjectId" : "4fe9909e6c334e781a0bd861eadc981003c500a6",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/serverpush/CMakeLists.txt" : {
      "ObjectId" : "b5e9ca2133d9717957952d2067e564fd84002130",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "examples/feature/socketnotifier/CMakeLists.txt" : {
      "ObjectId" : "4b509f9cd9effafca21086274e7022f833a748a0",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/feature/suggestionpopup/CMakeLists.txt" : {
      "ObjectId" : "dddd5ec84db5f4269ea60d7899cfacf81d2e3cfe",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/template-fun/CMakeLists.txt" : {
      "ObjectId" : "9c9364c986265522c1c31676996cb2a65d5bdd83",
      "LastModified" : "2018-05-22T08:41:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/urlparams/CMakeLists.txt" : {
      "ObjectId" : "c61ac0203dc09b04eb3f79452a4d30a28b5973ca",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/feature/video/CMakeLists.txt" : {
      "ObjectId" : "e85a9320c327fc868ef8e726ae87303e49f35605",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/feature/widgetset/CMakeLists.txt" : {
      "ObjectId" : "2ea3c49b2ffa815b5e532ed7d32d4c035be10bce",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "examples/filedrop/CMakeLists.txt" : {
      "ObjectId" : "a39c7af75fd73b85d06176abb012454ca4b25929",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The ADD_EXAMPLE macro (defined in examples/CMakeLists.txt) ensures that\n\n# the example is correctly built for the requested connector. It is equivalent\n\n# to the following two lines:\n\n#   ADD_EXECUTABLE(hello.wt hello.C)\n\n#   TARGET_LINK_LIBRARIES(hello.wt ${EXAMPLES_CONNECTOR})\n\n# except when the ISAPI (for Microsoft IIS) connector is used, where it will\n\n# build a DLL with the proper symbols exported.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/filetreetable/CMakeLists.txt" : {
      "ObjectId" : "c0c941004f74055a37da2dca55bd68e0bc258bcf",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/form/CMakeLists.txt" : {
      "ObjectId" : "7f184ed80fab740093b8ed381c8107c13d20ae33",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/gitmodel/CMakeLists.txt" : {
      "ObjectId" : "ed557d1f467ac13ce45c8f3305a45dfb3ca15b85",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/hangman/CMakeLists.txt" : {
      "ObjectId" : "d4fa92e1f75486d83e4bfd09233f44112cb5683f",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test whether crypt(3) is provided by libc. If it's not, check if\n\n# libcrypt exists and if it provides crypt(3).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/hello/CMakeLists.txt" : {
      "ObjectId" : "4701e0bd8956402bf9c3412d74d8ebee0c4d4080",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The ADD_EXAMPLE macro (defined in examples/CMakeLists.txt) ensures that\n\n# the example is correctly built for the requested connector. It is equivalent\n\n# to the following two lines:\n\n#   ADD_EXECUTABLE(hello.wt hello.C)\n\n#   TARGET_LINK_LIBRARIES(hello.wt ${EXAMPLES_CONNECTOR})\n\n# except when the ISAPI (for Microsoft IIS) connector is used, where it will\n\n# build a DLL with the proper symbols exported.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/javascript/CMakeLists.txt" : {
      "ObjectId" : "c9051f0fe2a3acf2424b219f5fc1f6f263cdf958",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/mandelbrot/CMakeLists.txt" : {
      "ObjectId" : "cd5f13363f4bac03c38c6d901c9250a7537c9592",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/mission/CMakeLists.txt" : {
      "ObjectId" : "5b6ecdc15559ad039b5ca4c7cce6fb636d5adcf4",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/wt/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/onethread/CMakeLists.txt" : {
      "ObjectId" : "193d9f53dcf15607584be6bbd7b9a94115038692",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/painting/CMakeLists.txt" : {
      "ObjectId" : "0a09a4b8dc3879d12345c7f29c7a3895a92c0b92",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/planner/CMakeLists.txt" : {
      "ObjectId" : "47a7095dd4c10895b3d9098d25a5b66586c43ccc",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/qrlogin/CMakeLists.txt" : {
      "ObjectId" : "d3725a57d0df028674ab4f6d6246538361042e08",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/run-example.bat.cmake" : {
      "ObjectId" : "e39308df92d87c9915f0ec38b488ee3054da43cf",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0,
      "Errorlog" : "line 5:5 token recognition error at: '\\l'\nline 5:9 token recognition error at: '\\W'\nline 5:12 token recognition error at: '\\e'\nline 7:122 token recognition error at: '\\s'\nline 7:128 token recognition error at: '\\W'\n"
    },
    "examples/run-example.cmake" : {
      "ObjectId" : "c3c682e099898d04a35e929441d8b7b275635387",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#!/bin/sh\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##*/})\n",
        "Line" : 3,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 2
    },
    "examples/simplechat/CMakeLists.txt" : {
      "ObjectId" : "61160aadeff3c962707f37e214f7974dd4f7a5d6",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "examples/style/CMakeLists.txt" : {
      "ObjectId" : "72c437fc4e5210c6d85e4c6ab6bd89370fd55fa0",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/te-benchmark/CMakeLists.txt" : {
      "ObjectId" : "df07d247c5f17dcafd086e15eda53ed54333494c",
      "LastModified" : "2018-09-13T14:29:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/treelist/CMakeLists.txt" : {
      "ObjectId" : "c6baf5e5f727660e69e57c9284eb9162facd12bb",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/treeview-dragdrop/CMakeLists.txt" : {
      "ObjectId" : "ea6cb28c4f1a10b5a456f2b19abf96fd85bc44be",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/treeview/CMakeLists.txt" : {
      "ObjectId" : "c5cf9f97fc2f356f0aebe167df327aff4c42da34",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/webgl/CMakeLists.txt" : {
      "ObjectId" : "9d56fb341619ea321e35b04297399c6b7da6e8c5",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The ADD_EXAMPLE macro (defined in examples/CMakeLists.txt) ensures that\n\n# the example is correctly built for the requested connector. It is equivalent\n\n# to the following two lines:\n\n#   ADD_EXECUTABLE(hello.wt hello.C)\n\n#   TARGET_LINK_LIBRARIES(hello.wt ${EXAMPLES_CONNECTOR})\n\n# except when the ISAPI (for Microsoft IIS) connector is used, where it will\n\n# build a DLL with the proper symbols exported.\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/widgetgallery/CMakeLists.txt" : {
      "ObjectId" : "a703c3d68bc7558ea1d7433c92906738ccddbc6c",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EmwebLoadingIndicator.C\n\n# EventsDemo.C\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Services.C\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ../charts/ChartsExample.C\n\n# ../charts/ChartConfig.C\n\n# ../charts/CsvUtil.C\n\n# ../charts/PanelList.C\n\n# ../dragdrop/Character.C\n\n# ../dragdrop/DragExample.C\n\n# ../painting/PaintExample.C\n\n# ../painting/ShapesWidget.C\n\n# ../treeview/TreeViewExample.C\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# no popen on windows\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/wt-homepage/CMakeLists.txt" : {
      "ObjectId" : "513bc570015abc719cf2e3575949c63953db2f12",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test whether crypt(3) is provided by libc. If it's not, check if\n\n# libcrypt exists and if it provides crypt(3).\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/wtwithqt/CMakeLists.txt" : {
      "ObjectId" : "ab56acb0cdfcf5254e6ac40a5be8602676360ce9",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/wt/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "examples/wtwithqt/lib/CMakeLists.txt" : {
      "ObjectId" : "b8528e57fdb5677e0000773f9ef6987c2d3d06b8",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If you have Wt installed somehwere, you should use the\n\n# installed Wt header files for your own Wt projects.\n\n# e.g. INCLUDE_DIRECTORIES(/usr/local/wt/include)\n\n# instead of the following:\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "3a588a0f7c0007ed48360231c7417813825fcc52",
      "LastModified" : "2019-04-12T07:08:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for WConfig.h\n",
        "Line" : 7,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# for sqlite3.h\n",
        "Line" : 9,
        "CharPositionInLine" : 30
      },
      "2" : {
        "Text" : "#experimental/any.cpp\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# How to include x86.S ?\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check if we need -lrt, used in boost::chrone::steady_clock::now()\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/Wt/Auth/CMakeLists.txt" : {
      "ObjectId" : "35b939c788256d2d5973cf685481f2a934b56154",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Auth/Dbo/CMakeLists.txt" : {
      "ObjectId" : "0896995192d9f9422e21fd75865fe54b144d1a82",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/CMakeLists.txt" : {
      "ObjectId" : "c3c76a07def6bb50a1d4f1e4e791dfb635bc81ff",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL(\n\n#  FILES\n\n#    \"^W.*[^C~]$\"\n\n#    ${WCONFIG_H_PATH}\n\n#  DESTINATION include\n\n#)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Wt/Chart/CMakeLists.txt" : {
      "ObjectId" : "bdff0182c2b26459372f58ac9051c92fd97050cc",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Chart/scripts/Makefile" : {
      "ObjectId" : "fce2e65fb8b6132d30cc02441b5aae66015d0dd2",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Wt/Core/CMakeLists.txt" : {
      "ObjectId" : "7fa5d2b49403557f0fa41c57a77e2588586c3d03",
      "LastModified" : "2018-05-29T10:52:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Date/CMakeLists.txt" : {
      "ObjectId" : "a9df4eee4189efadba57e7ac21f3aad20dde1626",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Dbo/CMakeLists.txt" : {
      "ObjectId" : "88841ad3910ba5251b6ddb5c1381f5130f1263e9",
      "LastModified" : "2019-02-19T10:34:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#win32 links automatically against boost libs; specifying too much causes\n\n#trouble\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/Wt/Dbo/backend/CMakeLists.txt" : {
      "ObjectId" : "fd3d0705e4e1a53cef979caa43c8498941b96f26",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Http/CMakeLists.txt" : {
      "ObjectId" : "598d6dd276a68e31cf1fd5468b1b9c11756bf870",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Json/CMakeLists.txt" : {
      "ObjectId" : "a62fa11e71f13ea521999ab84d2ff9d5d62823bc",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Mail/CMakeLists.txt" : {
      "ObjectId" : "cd37e1155b2dce6066acc518810aa58dd41b6f3b",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Payment/CMakeLists.txt" : {
      "ObjectId" : "f839d4e54eae4aee1f361fff326834fc3601c70c",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Render/CMakeLists.txt" : {
      "ObjectId" : "cca1df32930dcd5add9d725ba404ed636d89e0d2",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Signals/CMakeLists.txt" : {
      "ObjectId" : "7d21e72b22868c2d79e41133201ad6d1340d7651",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Wt/Test/CMakeLists.txt" : {
      "ObjectId" : "ec545a4cc1b2767c44321d95d879efe8fd790adf",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/fcgi/CMakeLists.txt" : {
      "ObjectId" : "c5925a557300c79f3d0191e20e821e9834af8534",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/filetostring.cmake" : {
      "ObjectId" : "245fde7b390ac4ffbc31df79af1e910d7bd1b5a1",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Max size for MSVC is 65K, but we're adding CRLFs here too.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/http/CMakeLists.txt" : {
      "ObjectId" : "1ae5f34c956067534305d0ac79cd91e6827a5b05",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Wt uses strstrcase for case insensitive ASCII string\n\n# comparisons on Linux for performance reasons. This function is however\n\n# not supported on many platforms (windows, solaris)\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# boost asio has a serious bug causing subtle data corruption\n\n# https://svn.boost.org/trac/boost/ticket/8935\n\n# https://svn.boost.org/trac/boost/ticket/8933\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/isapi/CMakeLists.txt" : {
      "ObjectId" : "ca5809c4b8e9e88fabc07aa78f9bd8f1c52e5ad8",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/web/CMakeLists.txt" : {
      "ObjectId" : "e3392a5176803f5a5fad5f02f993928116d93b57",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "target/android/toolchain-android-arm.cmake" : {
      "ObjectId" : "b302e84633c454948632a65daf2254e4f224b090",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adapt the pathnames in this file to suit your needs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The path to the directory that contains your cross-compiled dependency\n\n# libraries (boost, and optionally others such as graphicsmagick, ssl, ...)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The path to your Android SDK installation\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The ID of the target must be compatible with the NDK used to build Wt.\n\n# Target ID's are specific to your installation; to discover your target ID,\n\n# use 'android list target'. The default value of 99 is chosen to ensure\n\n# that you will verify this.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The path to your standalone toolchain directory.\n\n# See docs/STANDALONE-TOOLCHAIN.html in your ndk's installation dir\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Below is the normal contents of a cmake toolchain file, you'll\n\n# probably not need to modify it.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this one is important\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#this one not so much\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# specify the cross compiler\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# where is the target environment\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# search for programs in the build host directories\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# for libraries and headers in the target directories\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "4275330af07a51455097c8abb51104f583820f84",
      "LastModified" : "2019-01-15T13:42:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test all dbo backends\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 83,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 9017
}