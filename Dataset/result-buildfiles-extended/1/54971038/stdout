{
  "Repository" : "54971038",
  "Revision" : "HEAD",
  "ObjectId" : "e65de5a7c268129acffcdb03034efd8d256d025c",
  "CommitTime" : "2018-05-18T10:32:48Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4e8b85449ff101ee150a5ab994f66b65165f4951",
      "LastModified" : "2018-05-09T14:32:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HACK: An ugly hack to provide default compilation type.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MinGW is not supported because of C++14 problems (and many others).\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Use C++14\n",
        "Line" : 41,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : "# All warnings\n",
        "Line" : 47,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : "# For clang-tidy\n",
        "Line" : 48,
        "CharPositionInLine" : 56
      },
      "6" : {
        "Text" : "# FreeBSD support\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link BSD threading.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Uncomment this line to use instrumentation in Visual Studio.\n\n# set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /Profile\")\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Set exception handling mode and linking mode.\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Build with multiple processes.\n\n# see: https://docs.microsoft.com/en-us/cpp/build/reference/mp-build-with-multiple-processes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For clang-tidy\n",
        "Line" : 69,
        "CharPositionInLine" : 56
      },
      "12" : {
        "Text" : "# Overwrite default Debug/Release/RelWithDebInfo/MinSizeRel application directory.\n\n# We can't use CMAKE_RUNTIME_OUTPUT_DIRECTORY, because it appends config type to the path.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Sources\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Resources\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Don't create console window on non-debug builds.\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Exe: Main executable\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Post-build: linting\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# On Windows, cmd.exe limits commands to 8192 characters.\n\n# Please be *very* cautious when editing this code: when command length\n\n# exceeds 8192 characters, the 8192th character is silently dropped and the\n\n# rest is glued together (sic!).\n\n# We pass arguments via a file to overcome the limit.\n",
        "Line" : 402,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Generate 'lint' target.\n\n# Currently we have to run clang-tidy by hand. Please fix this code if you\n\n# know a better solution.\n\n# Other unsuitable alternatives:\n\n#   - Use LLVM/share/clang/run-clang-tidy.py: We can't do it because it needs\n\n#     compile_commands.json file, which CMake can generate only for Make and\n\n#     ninja.\n\n#   - Use CMAKE_CXX_CLANG_TIDY: Requires CMake 3.6+ which isn't available on\n\n#     current Ubuntu LTS. This flag also seemed to have no effect on Windows.\n",
        "Line" : 425,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Don't lint kaitai-generated code, it contains too many issues.\n\n# TODO(mkow): Use FILTER after moving to CMake >= 3.6 (not supported in\n\n# Ubuntu 16.04 LTS).\n\n# list(FILTER LINT_ALL_SOURCE_FILES EXCLUDE REGEX \".*/kaitai/.*\")\n",
        "Line" : 438,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Get includes from the main file.\n",
        "Line" : 448,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# macOS hack - remove surplus include directories\n\n# TODO(mkow): Use FILTER (requires CMake >= 3.6):\n\n# list(FILTER LINT_INC_DIRS EXCLUDE REGEX \"Qt[^/]+\\\\.framework$\")\n",
        "Line" : 454,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Remove duplicates.\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Use this hack, so that cmake will not escape space characters when passing\n\n# the list to COMMAND, for example by using \"-I$<JOIN:${LINT_INC_DIRS}, -I>\"\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Parse CMAKE_CXX_FLAGS to list, so spaces will not be escaped in COMMANDs.\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# As an alternative - we could use:\n\n#   list(APPEND LINT_CHECKS \"google-*\")\n\n#   list(APPEND LINT_CHECKS \"performance-*\")\n\n#   string(REPLACE \";\" \",\" LINT_CHECKS_STR \"${LINT_CHECKS}\")\n\n#   set(CMAKE_CXX_CLANG_TIDY clang-tidy;-style=google;-checks=${LINT_CHECKS_STR}\")\n\n# and then all the magic should happen at compile time.\n\n# CMake 3.6+ is required for this (Ubuntu 18.04 LTS).\n",
        "Line" : 475,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# This target is needed so dependencies are not built for each clang-tidy call.\n",
        "Line" : 485,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# foreach is needed so maximum command line length is not reached.\n\n# Create intermediary targets to allow parallel checks with -jN.\n",
        "Line" : 493,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Test dir has some headers inside, don't skip them.\n",
        "Line" : 503,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "# Don't know how to force CMake to invoke compiler with -fPIC.\n",
        "Line" : 509,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# Nasty hack to set -iframework flag for Qt on macOS\n",
        "Line" : 511,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "# Post-build packaging\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Unix paths\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Windows\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Run winddeployqt if it can be found\n",
        "Line" : 547,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Copy winddeployqt output to the directory with the main UI binary.\n",
        "Line" : 555,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Apple\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Finding MacDeployQt\n",
        "Line" : 593,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Few common CPack settings\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "cmake/FindGMock.cmake" : {
      "ObjectId" : "2ad9221290bff8f27d79ab53090ddf5d789067a4",
      "LastModified" : "2016-12-19T15:55:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the Google C++ Mocking Framework.\n\n# (This file is almost an identical copy of the original FindGTest.cmake file,\n\n#  feel free to use it as it is or modify it for your own needs.)\n\n#\n\n#\n\n# Defines the following variables:\n\n#\n\n#   GMOCK_FOUND - Found the Google Testing framework\n\n#   GMOCK_INCLUDE_DIRS - Include directories\n\n#\n\n# Also defines the library variables below as normal\n\n# variables. These contain debug/optimized keywords when\n\n# a debugging library is found.\n\n#\n\n#   GMOCK_BOTH_LIBRARIES - Both libgmock & libgmock-main\n\n#   GMOCK_LIBRARIES - libgmock\n\n#   GMOCK_MAIN_LIBRARIES - libgmock-main\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   GMOCK_ROOT - (as a CMake or environment variable)\n\n#                The root directory of the gmock install prefix\n\n#\n\n#   GMOCK_MSVC_SEARCH - If compiling with MSVC, this variable can be set to\n\n#                       \"MD\" or \"MT\" to enable searching a gmock build tree\n\n#                       (defaults: \"MD\")\n\n#\n\n#-----------------------\n\n# Example Usage:\n\n#\n\n#    find_package(GMock REQUIRED)\n\n#    include_directories(${GMOCK_INCLUDE_DIRS})\n\n#\n\n#    add_executable(foo foo.cc)\n\n#    target_link_libraries(foo ${GMOCK_BOTH_LIBRARIES})\n\n#\n\n#=============================================================================\n\n# This file is released under the MIT licence:\n\n#\n\n# Copyright (c) 2011 Matej Svec\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to\n\n# deal in the Software without restriction, including without limitation the\n\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n\n# sell copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n\n# IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The provided /MD project files for Google Mock add -md suffixes to the\n\n# library names.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/cppgen.cmake" : {
      "ObjectId" : "459efcafbd0b490ef27de0d50d389d8ad3db254c",
      "LastModified" : "2017-08-08T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/googletest.cmake" : {
      "ObjectId" : "48945bee92ff4d963540d3b7f70ea1e8a33dbde9",
      "LastModified" : "2017-08-08T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Google Test\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/msgpack.cmake" : {
      "ObjectId" : "cb2b29162054d5088875244669fdbeaeb877c928",
      "LastModified" : "2017-08-08T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/openssl.cmake" : {
      "ObjectId" : "c1ca482a511ae60f423463c2cf4823f3c8411dbe",
      "LastModified" : "2017-08-08T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/qt.cmake" : {
      "ObjectId" : "c56676ee799819ad80f7b295349259315491f126",
      "LastModified" : "2017-08-08T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Qt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/server.cmake" : {
      "ObjectId" : "2b87cac059c3838e3eb32fc820dd5a77b6883638",
      "LastModified" : "2017-08-08T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# assume that at least six is present in python/requirements.txt\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# create venv with dependencies after installation and remove it when removing package\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Prepare server environment only in `install` target.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/zlib.cmake" : {
      "ObjectId" : "ef2ebf31056cf72063f270775f4bed78d62aeff7",
      "LastModified" : "2018-01-26T15:07:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# zlib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only to satisfy dependencies\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# An external project for zlib\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# `ExternalProject_Add` currently doesn't support anything other than MD5.\n",
        "Line" : 29,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 9
  },
  "ElapsedTime" : 1221
}