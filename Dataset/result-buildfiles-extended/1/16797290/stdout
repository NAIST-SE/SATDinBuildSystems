{
  "Repository" : "16797290",
  "Revision" : "HEAD",
  "ObjectId" : "7996e2ada87524e052554bfacdfa7c8e9372d8c0",
  "CommitTime" : "2018-02-22T23:54:21Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "bcebb09e50e9ec4469c8b524e19439e1ca473ae4",
      "LastModified" : "2018-02-18T06:13:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DUSE_ARDUINO=ON <project_folder> to compile to Arduino.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# User options\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use cmake -DJENKINS_BUILD=ON <project_folder> to use XML format rather than the default.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add all of the CMakeLists.txt for the sub projects.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_subdirectory(examples)\n\n#add_subdirectory(examples/CppWrapper)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Makefile" : {
      "ObjectId" : "812abc3ac76c7c62904739818dbf589df5da209b",
      "LastModified" : "2016-07-23T01:36:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "################################################################################\n\n###\tMakefile wrapper for common repository actions.\n\n###\tAuthor: Graeme Douglas\n\n###\t\n\n###\tCopyright 2016 The University of British Columbia, Graeme Douglas\n\n###\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\n###\tyou may not use this file except in compliance with the License.\n\n###\tYou may obtain a copy of the License at\n\n###\t\n\n###\t\thttp://www.apache.org/licenses/LICENSE-2.0\n\n###\t\n\n###\tUnless required by applicable law or agreed to in writing,\n\n###\tsoftware distributed under the License is distributed on an\n\n###\t\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\n###\teither express or implied. See the License for the specific\n\n###\tlanguage governing permissions and limitations under the\n\n###\tLicense.\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Configurables ###############################################################\n\n# External commands.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Targets/Actions #############################################################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Utility goals for scripts and such.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/ArduinoToolchain.cmake" : {
      "ObjectId" : "acda9cf87604d10dcb87db41340c525284726b56",
      "LastModified" : "2016-05-24T18:36:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# Author: Tomasz Bogdal (QueezyTheGreat)\n\n# Home:   https://github.com/queezythegreat/arduino-cmake\n\n#\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n\n# License, v. 2.0. If a copy of the MPL was not distributed with this file,\n\n# You can obtain one at http://mozilla.org/MPL/2.0/.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add current directory to CMake Module path automatically\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n#                         System Paths                                        #\n\n#=============================================================================#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 28,
        "CharPositionInLine" : 56
      },
      "4" : {
        "Text" : "# MacPorts\n",
        "Line" : 29,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "#=============================================================================#\n\n#                         Detect Arduino SDK                                  #\n\n#=============================================================================#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Platform/Arduino.cmake" : {
      "ObjectId" : "63e8c7677f51327df174cafb2ed0712b9d38bedd",
      "LastModified" : "2017-06-07T03:58:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# generate_arduino_firmware(name\n\n#      [BOARD board_id]\n\n#      [SKETCH sketch_path |\n\n#       SRCS  src1 src2 ... srcN]\n\n#      [HDRS  hdr1 hdr2 ... hdrN]\n\n#      [LIBS  lib1 lib2 ... libN]\n\n#      [PORT  port]\n\n#      [SERIAL serial_cmd]\n\n#      [PROGRAMMER programmer_id]\n\n#      [AFLAGS flags]\n\n#      [NO_AUTOLIBS]\n\n#      [MANUAL])\n\n#\n\n#=============================================================================#\n\n#\n\n#   generaters firmware and libraries for Arduino devices\n\n#\n\n# The arguments are as follows:\n\n#\n\n#      name           # The name of the firmware target         [REQUIRED]\n\n#      BOARD          # Board name (such as uno, mega2560, ...) [REQUIRED]\n\n#      SKETCH         # Arduino sketch [must have SRCS or SKETCH]\n\n#      SRCS           # Sources        [must have SRCS or SKETCH]\n\n#      HDRS           # Headers\n\n#      LIBS           # Libraries to link\n\n#      ARDLIBS        # Arduino libraries to link (Wire, Servo, SPI, etc)\n\n#      PORT           # Serial port (enables upload support)\n\n#      SERIAL         # Serial command for serial target\n\n#      PROGRAMMER     # Programmer id (enables programmer support)\n\n#      AFLAGS         # Avrdude flags for target\n\n#      NO_AUTOLIBS    # Disables Arduino library detection\n\n#      MANUAL         # (Advanced) Only use AVR Libc/Includes\n\n#\n\n# Here is a short example for a target named test:\n\n#\n\n#       generate_arduino_firmware(\n\n#           NAME test\n\n#           SRCS test.cpp\n\n#                test2.cpp\n\n#           HDRS test.h test2.h\n\n#           BOARD uno)\n\n#\n\n# Alternatively you can specify the option by variables:\n\n#\n\n#       set(test_SRCS test.cpp test2.cpp)\n\n#       set(test_HDRS test.h test2.h\n\n#       set(test_BOARD uno)\n\n#\n\n#       generate_arduino_firmware(test)\n\n#\n\n# All variables need to be prefixed with the target name (${TARGET_NAME}_${OPTION}).\n\n#\n\n#=============================================================================#\n\n# generate_avr_firmware(name\n\n#      [BOARD board_id]\n\n#       SRCS  src1 src2 ... srcN]\n\n#      [HDRS  hdr1 hdr2 ... hdrN]\n\n#      [LIBS  lib1 lib2 ... libN]\n\n#      [PORT  port]\n\n#      [SERIAL serial_cmd]\n\n#      [PROGRAMMER programmer_id]\n\n#      [AFLAGS flags])\n\n#=============================================================================#\n\n#\n\n#   generaters firmware and libraries for AVR devices\n\n#   it simply calls generate_arduino_firmware() with NO_AUTOLIBS and MANUAL\n\n#\n\n# The arguments are as follows:\n\n#\n\n#      name           # The name of the firmware target         [REQUIRED]\n\n#      BOARD          # Board name (such as uno, mega2560, ...) [REQUIRED]\n\n#      SRCS           # Sources                                 [REQUIRED]\n\n#      HDRS           # Headers\n\n#      LIBS           # Libraries to link\n\n#      PORT           # Serial port (enables upload support)\n\n#      SERIAL         # Serial command for serial target\n\n#      PROGRAMMER     # Programmer id (enables programmer support)\n\n#      AFLAGS         # Avrdude flags for target\n\n#\n\n# Here is a short example for a target named test:\n\n#\n\n#       generate_avr_firmware(\n\n#           NAME test\n\n#           SRCS test.cpp\n\n#                test2.cpp\n\n#           HDRS test.h test2.h\n\n#           BOARD uno)\n\n#\n\n# Alternatively you can specify the option by variables:\n\n#\n\n#       set(test_SRCS test.cpp test2.cpp)\n\n#       set(test_HDRS test.h test2.h\n\n#       set(test_BOARD uno)\n\n#\n\n#       generate_avr_firmware(test)\n\n#\n\n# All variables need to be prefixed with the target name (${TARGET_NAME}_${OPTION}).\n\n#\n\n#=============================================================================#\n\n# generate_arduino_library(name\n\n#      [BOARD board_id]\n\n#      [SRCS  src1 src2 ... srcN]\n\n#      [HDRS  hdr1 hdr2 ... hdrN]\n\n#      [LIBS  lib1 lib2 ... libN]\n\n#      [NO_AUTOLIBS]\n\n#      [MANUAL])\n\n#=============================================================================#\n\n#   generaters firmware and libraries for Arduino devices\n\n#\n\n# The arguments are as follows:\n\n#\n\n#      name           # The name of the firmware target         [REQUIRED]\n\n#      BOARD          # Board name (such as uno, mega2560, ...) [REQUIRED]\n\n#      SRCS           # Sources                                 [REQUIRED]\n\n#      HDRS           # Headers\n\n#      LIBS           # Libraries to link\n\n#      NO_AUTOLIBS    # Disables Arduino library detection\n\n#      MANUAL         # (Advanced) Only use AVR Libc/Includes\n\n#\n\n# Here is a short example for a target named test:\n\n#\n\n#       generate_arduino_library(\n\n#           NAME test\n\n#           SRCS test.cpp\n\n#                test2.cpp\n\n#           HDRS test.h test2.h\n\n#           BOARD uno)\n\n#\n\n# Alternatively you can specify the option by variables:\n\n#\n\n#       set(test_SRCS test.cpp test2.cpp)\n\n#       set(test_HDRS test.h test2.h\n\n#       set(test_BOARD uno)\n\n#\n\n#       generate_arduino_library(test)\n\n#\n\n# All variables need to be prefixed with the target name (${TARGET_NAME}_${OPTION}).\n\n#\n\n#=============================================================================#\n\n# generate_avr_library(name\n\n#      [BOARD board_id]\n\n#      [SRCS  src1 src2 ... srcN]\n\n#      [HDRS  hdr1 hdr2 ... hdrN]\n\n#      [LIBS  lib1 lib2 ... libN])\n\n#=============================================================================#\n\n#   generaters firmware and libraries for AVR devices\n\n#   it simply calls generate_arduino_library() with NO_AUTOLIBS and MANUAL\n\n#\n\n# The arguments are as follows:\n\n#\n\n#      name           # The name of the firmware target         [REQUIRED]\n\n#      BOARD          # Board name (such as uno, mega2560, ...) [REQUIRED]\n\n#      SRCS           # Sources                                 [REQUIRED]\n\n#      HDRS           # Headers\n\n#      LIBS           # Libraries to link\n\n#\n\n# Here is a short example for a target named test:\n\n#\n\n#       generate_avr_library(\n\n#           NAME test\n\n#           SRCS test.cpp\n\n#                test2.cpp\n\n#           HDRS test.h test2.h\n\n#           BOARD uno)\n\n#\n\n# Alternatively you can specify the option by variables:\n\n#\n\n#       set(test_SRCS test.cpp test2.cpp)\n\n#       set(test_HDRS test.h test2.h\n\n#       set(test_BOARD uno)\n\n#\n\n#       generate_avr_library(test)\n\n#\n\n# All variables need to be prefixed with the target name (${TARGET_NAME}_${OPTION}).\n\n#\n\n#=============================================================================#\n\n# generate_arduino_example(name\n\n#                          LIBRARY library_name\n\n#                          EXAMPLE example_name\n\n#                          [BOARD  board_id]\n\n#                          [PORT port]\n\n#                          [SERIAL serial command]\n\n#                          [PORGRAMMER programmer_id]\n\n#                          [AFLAGS avrdude_flags])\n\n#=============================================================================#\n\n#\n\n#        name         - The name of the library example        [REQUIRED]\n\n#        LIBRARY      - Library name                           [REQUIRED]\n\n#        EXAMPLE      - Example name                           [REQUIRED]\n\n#        BOARD        - Board ID\n\n#        PORT         - Serial port [optional]\n\n#        SERIAL       - Serial command [optional]\n\n#        PROGRAMMER   - Programmer id (enables programmer support)\n\n#        AFLAGS       - Avrdude flags for target\n\n#\n\n# Creates a example from the specified library.\n\n#\n\n#\n\n#=============================================================================#\n\n# print_board_list()\n\n#=============================================================================#\n\n#\n\n# Print list of detected Arduino Boards.\n\n#\n\n#=============================================================================#\n\n# print_programmer_list()\n\n#=============================================================================#\n\n#\n\n# Print list of detected Programmers.\n\n#\n\n#=============================================================================#\n\n# print_programmer_settings(PROGRAMMER)\n\n#=============================================================================#\n\n#\n\n#        PROGRAMMER - programmer id\n\n#\n\n# Print the detected Programmer settings.\n\n#\n\n#=============================================================================#\n\n# print_board_settings(ARDUINO_BOARD)\n\n#=============================================================================#\n\n#\n\n#        ARDUINO_BOARD - Board id\n\n#\n\n# Print the detected Arduino board settings.\n\n#\n\n#=============================================================================#\n\n# register_hardware_platform(HARDWARE_PLATFORM_PATH)\n\n#=============================================================================#\n\n#\n\n#        HARDWARE_PLATFORM_PATH - Hardware platform path\n\n#\n\n# Registers a Hardware Platform path.\n\n# See: http://code.google.com/p/arduino/wiki/Platforms\n\n#\n\n# This enables you to register new types of hardware platforms such as the\n\n# Sagnuino, without having to copy the files into your Arduion SDK.\n\n#\n\n# A Hardware Platform is a directory containing the following:\n\n#\n\n#        HARDWARE_PLATFORM_PATH/\n\n#            |-- bootloaders/\n\n#            |-- cores/\n\n#            |-- variants/\n\n#            |-- boards.txt\n\n#            `-- programmers.txt\n\n#\n\n#  The board.txt describes the target boards and bootloaders. While\n\n#  programmers.txt the programmer defintions.\n\n#\n\n#  A good example of a Hardware Platform is in the Arduino SDK:\n\n#\n\n#        ${ARDUINO_SDK_PATH}/hardware/arduino/\n\n#\n\n#=============================================================================#\n\n# Configuration Options\n\n#=============================================================================#\n\n#\n\n# ARDUINO_SDK_PATH            - Arduino SDK Path\n\n# ARDUINO_AVRDUDE_PROGRAM     - Full path to avrdude programmer\n\n# ARDUINO_AVRDUDE_CONFIG_PATH - Full path to avrdude configuration file\n\n#\n\n# ARDUINO_C_FLAGS             - C compiler flags\n\n# ARDUINO_CXX_FLAGS           - C++ compiler flags\n\n# ARDUINO_LINKER_FLAGS        - Linker flags\n\n#\n\n# ARDUINO_DEFAULT_BOARD      - Default Arduino Board ID when not specified.\n\n# ARDUINO_DEFAULT_PORT       - Default Arduino port when not specified.\n\n# ARDUINO_DEFAULT_SERIAL     - Default Arduino Serial command when not specified.\n\n# ARDUINO_DEFAULT_PROGRAMMER - Default Arduino Programmer ID when not specified.\n\n#\n\n#\n\n# ARDUINO_FOUND       - Set to True when the Arduino SDK is detected and configured.\n\n# ARDUINO_SDK_VERSION - Set to the version of the detected Arduino SDK (ex: 1.0)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================#\n\n# Author: Tomasz Bogdal (QueezyTheGreat)\n\n# Home:   https://github.com/queezythegreat/arduino-cmake\n\n#\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n\n# License, v. 2.0. If a copy of the MPL was not distributed with this file,\n\n# You can obtain one at http://mozilla.org/MPL/2.0/.\n\n#=============================================================================#\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n#                           User Functions\n\n#=============================================================================#\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n#\n\n# print_board_list()\n\n#\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n#\n\n# print_programmer_list()\n\n#\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n#\n\n# print_programmer_settings(PROGRAMMER)\n\n#\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# [PUBLIC/USER]\n\n#\n\n# print_board_settings(ARDUINO_BOARD)\n\n#\n\n# see documentation at top\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 364,
        "CharPositionInLine" : 64
      },
      "9" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 420,
        "CharPositionInLine" : 64
      },
      "11" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 464,
        "CharPositionInLine" : 72
      },
      "13" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 542,
        "CharPositionInLine" : 64
      },
      "15" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 593,
        "CharPositionInLine" : 72
      },
      "17" : {
        "Text" : "#=============================================================================#\n\n# [PUBLIC/USER]\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#=============================================================================#\n\n#                        Internal Functions\n\n#=============================================================================#\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# parse_generator_arguments(TARGET_NAME PREFIX OPTIONS ARGS MULTI_ARGS [ARG1 ARG2 .. ARGN])\n\n#\n\n#         PREFIX     - Parsed options prefix\n\n#         OPTIONS    - List of options\n\n#         ARGS       - List of one value keyword arguments\n\n#         MULTI_ARGS - List of multi value keyword arguments\n\n#         [ARG1 ARG2 .. ARGN] - command arguments [optional]\n\n#\n\n# Parses generator options from either variables or command arguments\n\n#\n\n#=============================================================================#\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# load_generator_settings(TARGET_NAME PREFIX [SUFFIX_1 SUFFIX_2 .. SUFFIX_N])\n\n#\n\n#         TARGET_NAME - The base name of the user settings\n\n#         PREFIX      - The prefix name used for generator settings\n\n#         SUFFIX_XX   - List of suffixes to load\n\n#\n\n#  Loads a list of user settings into the generators scope. User settings have\n\n#  the following syntax:\n\n#\n\n#      ${BASE_NAME}${SUFFIX}\n\n#\n\n#  The BASE_NAME is the target name and the suffix is a specific generator settings.\n\n#\n\n#  For every user setting found a generator setting is created of the follwoing fromat:\n\n#\n\n#      ${PREFIX}${SUFFIX}\n\n#\n\n#  The purpose of loading the settings into the generator is to not modify user settings\n\n#  and to have a generic naming of the settings within the generator.\n\n#\n\n#=============================================================================#\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# get_arduino_flags(COMPILE_FLAGS LINK_FLAGS BOARD_ID MANUAL)\n\n#\n\n#       COMPILE_FLAGS_VAR -Variable holding compiler flags\n\n#       LINK_FLAGS_VAR - Variable holding linker flags\n\n#       BOARD_ID - The board id name\n\n#       MANUAL - (Advanced) Only use AVR Libc/Includes\n\n#\n\n# Configures the the build settings for the specified Arduino Board.\n\n#\n\n#=============================================================================#\n",
        "Line" : 791,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Normalize version (remove all periods)\n",
        "Line" : 812,
        "CharPositionInLine" : 83
      },
      "23" : {
        "Text" : "# output\n",
        "Line" : 831,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# output\n",
        "Line" : 865,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_core(VAR_NAME BOARD_ID PROCESSOR)\n\n#\n\n#        VAR_NAME    - Variable name that will hold the generated library name\n\n#        BOARD_ID    - Arduino board id\n\n#        PROCESSOR   - CPU type\n\n#\n\n# Creates the Arduino Core library for the specified board,\n\n# each board gets it's own version of the library.\n\n#\n\n#=============================================================================#\n",
        "Line" : 874,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Debian/Ubuntu fix\n",
        "Line" : 894,
        "CharPositionInLine" : 12
      },
      "27" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# find_arduino_libraries(VAR_NAME SRCS ARDLIBS)\n\n#\n\n#      VAR_NAME - Variable name which will hold the results\n\n#      SRCS     - Sources that will be analized\n\n#      ARDLIBS  - Arduino libraries identified by name (e.g., Wire, SPI, Servo)\n\n#\n\n#     returns a list of paths to libraries found.\n\n#\n\n#  Finds all Arduino type libraries included in sources. Available libraries\n\n#  are ${ARDUINO_SDK_PATH}/libraries and ${CMAKE_CURRENT_SOURCE_DIR}.\n\n#\n\n#  Also adds Arduino libraries specifically names in ALIBS.  We add \".h\" to the\n\n#  names and then process them just like the Arduino libraries found in the sources.\n\n#\n\n#  A Arduino library is a folder that has the same name as the include header.\n\n#  For example, if we have a include \"#include <LibraryName.h>\" then the following\n\n#  directory structure is considered a Arduino library:\n\n#\n\n#     LibraryName/\n\n#          |- LibraryName.h\n\n#          `- LibraryName.c\n\n#\n\n#  If such a directory is found then all sources within that directory are considred\n\n#  to be part of that Arduino library.\n\n#\n\n#=============================================================================#\n",
        "Line" : 906,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Skipping generated files. They are, probably, not exist yet.\n",
        "Line" : 941,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# Workaround for sketches, which are marked as generated\n",
        "Line" : 943,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Property Scope\n",
        "Line" : 964,
        "CharPositionInLine" : 47
      },
      "31" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_library(VAR_NAME BOARD_ID LIB_PATH COMPILE_FLAGS LINK_FLAGS)\n\n#\n\n#        VAR_NAME    - Vairable wich will hold the generated library names\n\n#        BOARD_ID    - Board ID\n\n#        LIB_PATH    - Path of the library\n\n#        COMPILE_FLAGS - Compile flags\n\n#        LINK_FLAGS    - Link flags\n\n#\n\n# Creates an Arduino library, with all it's library dependencies.\n\n#\n\n#      ${LIB_NAME}_RECURSE controls if the library will recurse\n\n#      when looking for source files.\n\n#\n\n#=============================================================================#\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# For known libraries can list recurse here\n",
        "Line" : 1013,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Detect if recursion is needed\n",
        "Line" : 1034,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "#        message(\"LIB PATH: ${LIB_PATH}\")\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#            foreach(L ${LIB_SRCS})\n\n#                message(\"LIB_SRC: ${L}\")\n\n#            endforeach()\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#            message(\"DEP_LIB_SRC: ${DEP_LIB_SRCS} : ${LIB_DEPS}\")\n",
        "Line" : 1056,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#                message(${TARGET_LIB_NAME} : ${LIB_DEP})\n",
        "Line" : 1058,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Do not link to this library. DEP_LIB_SRCS will always be only one entry\n\n# if we are looking at the same library.\n",
        "Line" : 1064,
        "CharPositionInLine" : 16
      },
      "39" : {
        "Text" : "# Target already exists, skiping creating\n",
        "Line" : 1086,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_libraries(VAR_NAME BOARD_ID SRCS COMPILE_FLAGS LINK_FLAGS)\n\n#\n\n#        VAR_NAME    - Vairable wich will hold the generated library names\n\n#        BOARD_ID    - Board ID\n\n#        SRCS        - source files\n\n#        COMPILE_FLAGS - Compile flags\n\n#        LINK_FLAGS    - Linker flags\n\n#\n\n# Finds and creates all dependency libraries based on sources.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1096,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#    foreach(L ${TARGET_LIBS})\n\n#        message(\"DEP PATH: ${L}\")\n\n#    endforeach()\n",
        "Line" : 1116,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Create static library instead of returning sources\n",
        "Line" : 1121,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "#    foreach(L ${LIB_TARGETS})\n\n#        message(\"LIB TARGETS: ${L}\")\n\n#    endforeach()\n",
        "Line" : 1131,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_target(TARGET_NAME ALL_SRCS ALL_LIBS COMPILE_FLAGS LINK_FLAGS MANUAL)\n\n#\n\n#        TARGET_NAME - Target name\n\n#        BOARD_ID    - Arduino board ID\n\n#        ALL_SRCS    - All sources\n\n#        ALL_LIBS    - All libraries\n\n#        COMPILE_FLAGS - Compile flags\n\n#        LINK_FLAGS    - Linker flags\n\n#        MANUAL - (Advanced) Only use AVR Libc/Includes\n\n#\n\n# Creates an Arduino firmware target.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1140,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Convert firmware image to ASCII HEX format\n",
        "Line" : 1186,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Display target size\n",
        "Line" : 1195,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Create ${TARGET_NAME}-size target\n",
        "Line" : 1205,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_upload(BOARD_ID TARGET_NAME PORT)\n\n#\n\n#        BOARD_ID    - Arduino board id\n\n#        TARGET_NAME - Target name\n\n#        PORT        - Serial port for upload\n\n#        PROGRAMMER_ID - Programmer ID\n\n#        AVRDUDE_FLAGS - avrdude flags\n\n#\n\n# Create an upload target (${TARGET_NAME}-upload) for the specified Arduino target.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1217,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Add programmer support if defined\n",
        "Line" : 1234,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_bootloader_upload(TARGET_NAME BOARD_ID PORT)\n\n#\n\n#      TARGET_NAME - target name\n\n#      BOARD_ID    - board id\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#\n\n# Set up target for upload firmware via the bootloader.\n\n#\n\n# The target for uploading the firmware is ${TARGET_NAME}-upload .\n\n#\n\n#=============================================================================#\n",
        "Line" : 1242,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Global upload target\n",
        "Line" : 1280,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_programmer_burn(TARGET_NAME BOARD_ID PROGRAMMER PORT AVRDUDE_FLAGS)\n\n#\n\n#      TARGET_NAME - name of target to burn\n\n#      BOARD_ID    - board id\n\n#      PROGRAMMER  - programmer id\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#\n\n# Sets up target for burning firmware via a programmer.\n\n#\n\n# The target for burning the firmware is ${TARGET_NAME}-burn .\n\n#\n\n#=============================================================================#\n",
        "Line" : 1288,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_bootloader_burn(TARGET_NAME BOARD_ID PROGRAMMER PORT AVRDUDE_FLAGS)\n\n#\n\n#      TARGET_NAME - name of target to burn\n\n#      BOARD_ID    - board id\n\n#      PROGRAMMER  - programmer id\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#\n\n# Create a target for burning a bootloader via a programmer.\n\n#\n\n# The target for burning the bootloader is ${TARGET_NAME}-burn-bootloader\n\n#\n\n#=============================================================================#\n",
        "Line" : 1329,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Erase the chip\n",
        "Line" : 1374,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Set unlock bits and fuses (because chip is going to be erased)\n",
        "Line" : 1377,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Set bootloader image\n",
        "Line" : 1386,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Set lockbits\n",
        "Line" : 1389,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Create burn bootloader target\n",
        "Line" : 1392,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_programmer_args(BOARD_ID PROGRAMMER TARGET_NAME PORT AVRDUDE_FLAGS OUTPUT_VAR)\n\n#\n\n#      BOARD_ID    - board id\n\n#      PROGRAMMER  - programmer id\n\n#      TARGET_NAME - target name\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#      OUTPUT_VAR  - name of output variable for result\n\n#\n\n# Sets up default avrdude settings for burning firmware via a programmer.\n\n#=============================================================================#\n",
        "Line" : 1400,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Set programmer\n",
        "Line" : 1431,
        "CharPositionInLine" : 60
      },
      "61" : {
        "Text" : "# Set USB as port\n",
        "Line" : 1434,
        "CharPositionInLine" : 42
      },
      "62" : {
        "Text" : "# Set port\n",
        "Line" : 1436,
        "CharPositionInLine" : 46
      },
      "63" : {
        "Text" : "# Set baud rate\n",
        "Line" : 1438,
        "CharPositionInLine" : 65
      },
      "64" : {
        "Text" : "# Set force\n",
        "Line" : 1443,
        "CharPositionInLine" : 39
      },
      "65" : {
        "Text" : "# Set delay\n",
        "Line" : 1447,
        "CharPositionInLine" : 61
      },
      "66" : {
        "Text" : "# MCU Type\n",
        "Line" : 1450,
        "CharPositionInLine" : 78
      },
      "67" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_bootloader_args(BOARD_ID TARGET_NAME PORT AVRDUDE_FLAGS OUTPUT_VAR)\n\n#\n\n#      BOARD_ID    - board id\n\n#      TARGET_NAME - target name\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#      OUTPUT_VAR  - name of output variable for result\n\n#\n\n# Sets up default avrdude settings for uploading firmware via the bootloader.\n\n#=============================================================================#\n",
        "Line" : 1457,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# avrdude config\n",
        "Line" : 1482,
        "CharPositionInLine" : 44
      },
      "69" : {
        "Text" : "# MCU Type\n",
        "Line" : 1483,
        "CharPositionInLine" : 62
      },
      "70" : {
        "Text" : "# Programmer\n",
        "Line" : 1486,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Baud rate\n",
        "Line" : 1503,
        "CharPositionInLine" : 32
      },
      "72" : {
        "Text" : "# Serial port\n\n# Dont erase\n",
        "Line" : 1504,
        "CharPositionInLine" : 44
      },
      "73" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# find_sources(VAR_NAME LIB_PATH RECURSE)\n\n#\n\n#        VAR_NAME - Variable name that will hold the detected sources\n\n#        LIB_PATH - The base path\n\n#        RECURSE  - Whether or not to recurse\n\n#\n\n# Finds all C/C++ sources located at the specified path.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1513,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_serial_target(TARGET_NAME CMD)\n\n#\n\n#         TARGET_NAME - Target name\n\n#         CMD         - Serial terminal command\n\n#\n\n# Creates a target (${TARGET_NAME}-serial) for launching the serial termnial.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1546,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# detect_arduino_version(VAR_NAME)\n\n#\n\n#       VAR_NAME - Variable name where the detected version will be saved\n\n#\n\n# Detects the Arduino SDK Version based on the lib/versions.txt file. The\n\n# following variables will be generated:\n\n#\n\n#    ${VAR_NAME}         -> the full version (major.minor.patch)\n\n#    ${VAR_NAME}_MAJOR   -> the major version\n\n#    ${VAR_NAME}_MINOR   -> the minor version\n\n#    ${VAR_NAME}_PATCH   -> the patch version\n\n#\n\n#=============================================================================#\n",
        "Line" : 1564,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# load_arduino_style_settings(SETTINGS_LIST SETTINGS_PATH)\n\n#\n\n#      SETTINGS_LIST - Variable name of settings list\n\n#      SETTINGS_PATH - File path of settings file to load.\n\n#\n\n# Load a Arduino style settings file into the cache.\n\n#\n\n#  Examples of this type of settings file is the boards.txt and\n\n# programmers.txt files located in ${ARDUINO_SDK}/hardware/arduino.\n\n#\n\n# Settings have to following format:\n\n#\n\n#      entry.setting[.subsetting] = value\n\n#\n\n# where [.subsetting] is optional\n\n#\n\n# For example, the following settings:\n\n#\n\n#      uno.name=Arduino Uno\n\n#      uno.upload.protocol=stk500\n\n#      uno.upload.maximum_size=32256\n\n#      uno.build.mcu=atmega328p\n\n#      uno.build.core=arduino\n\n#\n\n# will generate the follwoing equivalent CMake variables:\n\n#\n\n#      set(uno.name \"Arduino Uno\")\n\n#      set(uno.upload.protocol     \"stk500\")\n\n#      set(uno.upload.maximum_size \"32256\")\n\n#      set(uno.build.mcu  \"atmega328p\")\n\n#      set(uno.build.core \"arduino\")\n\n#\n\n#      set(uno.SETTINGS  name upload build)              # List of settings for uno\n\n#      set(uno.upload.SUBSETTINGS protocol maximum_size) # List of sub-settings for uno.upload\n\n#      set(uno.build.SUBSETTINGS mcu core)               # List of sub-settings for uno.build\n\n#\n\n#  The ${ENTRY_NAME}.SETTINGS variable lists all settings for the entry, while\n\n# ${ENTRY_NAME}.SUBSETTINGS variables lists all settings for a sub-setting of\n\n# a entry setting pair.\n\n#\n\n#  These variables are generated in order to be able to  programatically traverse\n\n# all settings (for a example see print_board_settings() function).\n\n#\n\n#=============================================================================#\n",
        "Line" : 1606,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Settings file split into lines\n",
        "Line" : 1656,
        "CharPositionInLine" : 49
      },
      "78" : {
        "Text" : "# Add entry to settings list if it does not exist\n",
        "Line" : 1667,
        "CharPositionInLine" : 12
      },
      "79" : {
        "Text" : "# Add entry to main list\n",
        "Line" : 1671,
        "CharPositionInLine" : 16
      },
      "80" : {
        "Text" : "# Add entry setting to entry settings list if it does not exist\n",
        "Line" : 1675,
        "CharPositionInLine" : 12
      },
      "81" : {
        "Text" : "# Add setting to entry\n",
        "Line" : 1693,
        "CharPositionInLine" : 10
      },
      "82" : {
        "Text" : "# Add entry sub-setting to entry sub-settings list if it does not exists\n",
        "Line" : 1702,
        "CharPositionInLine" : 12
      },
      "83" : {
        "Text" : "# Save setting value\n",
        "Line" : 1715,
        "CharPositionInLine" : 12
      },
      "84" : {
        "Text" : "#=============================================================================#\n\n# print_settings(ENTRY_NAME)\n\n#\n\n#      ENTRY_NAME - name of entry\n\n#\n\n# Print the entry settings (see load_arduino_syle_settings()).\n\n#\n\n#=============================================================================#\n",
        "Line" : 1728,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# print_list(SETTINGS_LIST)\n\n#\n\n#      SETTINGS_LIST - Variables name of settings list\n\n#\n\n# Print list settings and names (see load_arduino_syle_settings()).\n\n#=============================================================================#\n",
        "Line" : 1755,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_example(TARGET_NAME LIBRARY_NAME EXAMPLE_NAME OUTPUT_VAR)\n\n#\n\n#      TARGET_NAME  - Target name\n\n#      LIBRARY_NAME - Library name\n\n#      EXAMPLE_NAME - Example name\n\n#      OUTPUT_VAR   - Variable name to save sketch path.\n\n#\n\n# Creates a Arduino example from a the specified library.\n\n#=============================================================================#\n",
        "Line" : 1785,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Property Scope\n",
        "Line" : 1801,
        "CharPositionInLine" : 31
      },
      "88" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_sketch(TARGET_NAME SKETCH_PATH OUTPUT_VAR)\n\n#\n\n#      TARGET_NAME - Target name\n\n#      SKETCH_PATH - Path to sketch directory\n\n#      OUTPUT_VAR  - Variable name where to save generated sketch source\n\n#\n\n# Generates C++ sources from Arduino Sketch.\n\n#=============================================================================#\n",
        "Line" : 1819,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Sketch directory specified, try to find main sketch...\n",
        "Line" : 1838,
        "CharPositionInLine" : 12
      },
      "90" : {
        "Text" : "# Sketch file specified, assuming parent directory as sketch directory\n",
        "Line" : 1849,
        "CharPositionInLine" : 12
      },
      "91" : {
        "Text" : "# Find all sketch files\n",
        "Line" : 1855,
        "CharPositionInLine" : 8
      },
      "92" : {
        "Text" : "# Regenerate build system if sketch changes\n",
        "Line" : 1862,
        "CharPositionInLine" : 8
      },
      "93" : {
        "Text" : "# Mark file that it exists for find_file\n",
        "Line" : 1869,
        "CharPositionInLine" : 8
      },
      "94" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# generate_cpp_from_sketch(MAIN_SKETCH_PATH SKETCH_SOURCES SKETCH_CPP)\n\n#\n\n#         MAIN_SKETCH_PATH - Main sketch file path\n\n#         SKETCH_SOURCES   - Setch source paths\n\n#         SKETCH_CPP       - Name of file to generate\n\n#\n\n# Generate C++ source file from Arduino sketch files.\n\n#=============================================================================#\n",
        "Line" : 1879,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# remove comments\n",
        "Line" : 1894,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# find first statement\n",
        "Line" : 1897,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "#message(STATUS \"FIRST STATEMENT: ${FIRST_STATEMENT}\")\n\n#message(STATUS \"FIRST STATEMENT POSITION: ${HEAD_LENGTH}\")\n",
        "Line" : 1903,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "#arduino_debug_msg(\"SKETCH_HEAD:\\n${SKETCH_HEAD}\")\n",
        "Line" : 1908,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# find the body of the main pde\n",
        "Line" : 1910,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "#arduino_debug_msg(\"BODY:\\n${SKETCH_BODY}\")\n",
        "Line" : 1913,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# write the file head\n",
        "Line" : 1915,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# Count head line offset (for GCC error reporting)\n",
        "Line" : 1918,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# add arduino include header\n\n#file(APPEND ${SKETCH_CPP} \"\\n#line 1 \\\"autogenerated\\\"\\n\")\n",
        "Line" : 1923,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# add function prototypes\n",
        "Line" : 1932,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# Write function prototypes\n",
        "Line" : 1952,
        "CharPositionInLine" : 8
      },
      "106" : {
        "Text" : "# \" else if(var == other) {\" shoudn't be listed as prototype\n",
        "Line" : 1958,
        "CharPositionInLine" : 12
      },
      "107" : {
        "Text" : "# Write Sketch CPP source\n",
        "Line" : 1969,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_size_script(OUTPUT_VAR)\n\n#\n\n#        OUTPUT_VAR - Output variable that will contain the script path\n\n#\n\n# Generates script used to display the firmware size.\n\n#=============================================================================#\n",
        "Line" : 1982,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n#  arduino_debug_on()\n\n#\n\n# Enables Arduino module debugging.\n\n#=============================================================================#\n",
        "Line" : 2075,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n#  arduino_debug_off()\n\n#\n\n# Disables Arduino module debugging.\n\n#=============================================================================#\n",
        "Line" : 2087,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# arduino_debug_msg(MSG)\n\n#\n\n#        MSG - Message to print\n\n#\n\n# Print Arduino debugging information. In order to enable printing\n\n# use arduino_debug_on() and to disable use arduino_debug_off().\n\n#=============================================================================#\n",
        "Line" : 2099,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# remove_comments(SRC_VAR OUT_VAR)\n\n#\n\n#        SRC_VAR - variable holding sources\n\n#        OUT_VAR - variable holding sources with no comments\n\n#\n\n# Removes all comments from the source code.\n\n#=============================================================================#\n",
        "Line" : 2115,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "#message(STATUS \"removing comments from: ${FILE}\")\n\n#file(WRITE \"${CMAKE_BINARY_DIR}/${FILE}_pre_remove_comments.txt\" ${SRC})\n\n#message(STATUS \"\\n${SRC}\")\n",
        "Line" : 2130,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# remove all comments\n",
        "Line" : 2134,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "#file(WRITE \"${CMAKE_BINARY_DIR}/${FILE}_post_remove_comments.txt\" ${SRC})\n\n#message(STATUS \"\\n${SRC}\")\n",
        "Line" : 2137,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# get_num_lines(DOCUMENT OUTPUT_VAR)\n\n#\n\n#        DOCUMENT   - Document contents\n\n#        OUTPUT_VAR - Variable which will hold the line number count\n\n#\n\n# Counts the line number of the document.\n\n#=============================================================================#\n",
        "Line" : 2144,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# required_variables(MSG msg VARS var1 var2 .. varN)\n\n#\n\n#        MSG  - Message to be displayed in case of error\n\n#        VARS - List of variables names to check\n\n#\n\n# Ensure the specified variables are not empty, otherwise a fatal error is emmited.\n\n#=============================================================================#\n",
        "Line" : 2160,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "#=============================================================================#\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# error_for_unparsed(PREFIX)\n\n#\n\n#        PREFIX - Prefix name\n\n#\n\n# Emit fatal error if there are unparsed argument from cmake_parse_arguments().\n\n#=============================================================================#\n",
        "Line" : 2180,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "#=============================================================================#\n\n#                              C Flags\n\n#=============================================================================#\n",
        "Line" : 2201,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "#=============================================================================#\n\n#                             C++ Flags\n\n#=============================================================================#\n",
        "Line" : 2213,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "#=============================================================================#\n\n#                       Executable Linker Flags                               #\n\n#=============================================================================#\n",
        "Line" : 2225,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "#=============================================================================#\n\n#=============================================================================#\n\n#                       Shared Lbrary Linker Flags                            #\n\n#=============================================================================#\n",
        "Line" : 2235,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "#=============================================================================#\n\n#                         Arduino Settings\n\n#=============================================================================#\n",
        "Line" : 2252,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "#=============================================================================#\n\n#                          Initialization\n\n#=============================================================================#\n",
        "Line" : 2260,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "# Ensure that all required paths are found\n",
        "Line" : 2311,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "#print_board_list()\n\n#print_programmer_list()\n",
        "Line" : 2342,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 127
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "ad7d9505eefe16037b273b04ea58c59d963770e2",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CppWrapper/CMakeLists.txt" : {
      "ObjectId" : "5ab76a78bf12528572a439a0f543f7cb12a1de4b",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp_wrapper/CMakeLists.txt" : {
      "ObjectId" : "65af59b568a9eaeb72eea3947fefda69ddd965bf",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dictionary/bpp_tree/CMakeLists.txt" : {
      "ObjectId" : "7e244227902aa484fa1721bc244640d29550f0b8",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##    if(DEBUG)\n\n#        set(${PROJECT_NAME}_SRCS\n\n#            \"${${PROJECT_NAME}_SRCS}\"\n\n#            ../../serial/printf_redirect.h\n\n#            ../../serial/serial_c_iface.h\n\n#            ../../serial/serial_c_iface.cpp)\n\n##    endif()\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/dictionary/flat_file/CMakeLists.txt" : {
      "ObjectId" : "e003df56ba95bc7bbfa43559e2dd49fd2a174687",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    if(DEBUG)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    endif()\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/dictionary/linear_hash/CMakeLists.txt" : {
      "ObjectId" : "13741186547fa8f6113a4755869898423be5bc2d",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    if(DEBUG)\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#    endif()\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/dictionary/open_address_file_hash/CMakeLists.txt" : {
      "ObjectId" : "23332f81689b227f52de29fa1d55a172f5c26475",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/dictionary/open_address_hash/CMakeLists.txt" : {
      "ObjectId" : "c2c4b50fb8334b12b8a14313f307be8fbab3ca6b",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/dictionary/skip_list/CMakeLists.txt" : {
      "ObjectId" : "712947afa45db881da36aee5fca1ca679311441a",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/iinq/CMakeLists.txt" : {
      "ObjectId" : "4d5c8292a5f2e04b8b951a65ed88b78db46fd402",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/CMakeLists.txt" : {
      "ObjectId" : "904b58c56566b91fc0be68f7441f0678a9e4a7b9",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# PlanckUnit option: cmake -DJENKINS_BUILD=ON <project_folder> to use XML format rather than the default.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tests/behaviour/dictionary/CMakeLists.txt" : {
      "ObjectId" : "f50d0b8be63f4b4090af0bda7ec7df94e9134e84",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tests/behaviour/dictionary/bpp_tree/CMakeLists.txt" : {
      "ObjectId" : "3c0f46ac40c5ff4ff47a1543f7b5213d73b25644",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tests/behaviour/dictionary/flat_file/CMakeLists.txt" : {
      "ObjectId" : "0448e2b124775c8e4da57094f18dc5c3f32fad8d",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tests/behaviour/dictionary/linear_hash/CMakeLists.txt" : {
      "ObjectId" : "ec07a82a6c93ad012dbb079c576b8ac76497eb6d",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tests/behaviour/dictionary/open_address_file_hash/CMakeLists.txt" : {
      "ObjectId" : "7abab5f0e948d7bad066e01df0b95e5e000ab966",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tests/behaviour/dictionary/open_address_hash/CMakeLists.txt" : {
      "ObjectId" : "552bdb2f028032611c429ed82c7664271b350447",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tests/behaviour/dictionary/skip_list/CMakeLists.txt" : {
      "ObjectId" : "09ae622065b9948e247d8749cb53d688663465a8",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/tests/integration/cpp_wrapper/CMakeLists.txt" : {
      "ObjectId" : "27c9151491394c6fd34f54cbfbd711ed79c1e7a7",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/unit/cpp_wrapper/test1/CMakeLists.txt" : {
      "ObjectId" : "08e4acb311c212710dbc1d667008f35b06f8c56e",
      "LastModified" : "2018-02-03T21:30:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/cpp_wrapper/test2/CMakeLists.txt" : {
      "ObjectId" : "51beeef3fbb95fa53c926ce86ba113e84cfaebfd",
      "LastModified" : "2018-02-03T21:30:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/cpp_wrapper/test3/CMakeLists.txt" : {
      "ObjectId" : "a993374e627a98508e48271b82eb6edf47d19aeb",
      "LastModified" : "2018-02-17T07:35:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/cpp_wrapper/test4/CMakeLists.txt" : {
      "ObjectId" : "2cf80b43cfca3359bafb5419f7652b9b2e893701",
      "LastModified" : "2018-02-17T20:35:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/dictionary/CMakeLists.txt" : {
      "ObjectId" : "badc73c5ea74c4b3b8d76ac68a421e1d3911d6ca",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/dictionary/bpp_tree/CMakeLists.txt" : {
      "ObjectId" : "b08d6de5777049f95b0eb11084e08325d6ad8873",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/dictionary/flat_file/CMakeLists.txt" : {
      "ObjectId" : "1d9d4ddb51336102f51377ea284d677e85c1eaf9",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/dictionary/linear_hash/CMakeLists.txt" : {
      "ObjectId" : "a03557560d45f405814dfd7962aeb6f9a42382bb",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/dictionary/open_address_file_hash/CMakeLists.txt" : {
      "ObjectId" : "eaf7a0cc59e8ca855e1e52c3259b23ab6baaeba5",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/dictionary/open_address_hash/CMakeLists.txt" : {
      "ObjectId" : "8c3c6335deb1cef13fe6fa1e2bfddedd90666cb3",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/dictionary/skip_list/CMakeLists.txt" : {
      "ObjectId" : "76e0381ab2d05426580260e4c9cde9d085db64d9",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit/iinq/CMakeLists.txt" : {
      "ObjectId" : "296699763fd42b0035a4eb54ae3632fe72d35c70",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use cmake -DCOVERAGE_TESTING=ON to include coverage testing information.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/util/lfsr/CMakeLists.txt" : {
      "ObjectId" : "75125e4a2ec8fb0d34950637493277972d9392dd",
      "LastModified" : "2017-07-06T18:03:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 35,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2075
}