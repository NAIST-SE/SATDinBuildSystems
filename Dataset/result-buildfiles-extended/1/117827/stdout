{
  "Repository" : "117827",
  "Revision" : "HEAD",
  "ObjectId" : "a62ab4a2ef884ecc072247bce56b601a3583257d",
  "CommitTime" : "2019-03-25T01:08:17Z",
  "Files" : {
    "Allgemeines/JDBC/pom.xml" : {
      "ObjectId" : "5f4884ea7ccb001351a217d1b5710b7d9b3d913a",
      "LastModified" : "2014-06-29T02:08:38Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n            ********************************************************************\n                SLF4J AND LOG4J 2. See: http://logging.apache.org/log4j/2.x/\n            ********************************************************************\n        ",
        "Line" : 41,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "\n            1/2 Required dependency for log4j 2 with slf4j: binding\n        ",
        "Line" : 44,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "\n            2/2 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin\n        ",
        "Line" : 52,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : " I just have the source code for this version ",
        "Line" : 71,
        "CharPositionInLine" : 66
      },
      "CommentCount" : 4
    },
    "Allgemeines/MapStruct/pom.xml" : {
      "ObjectId" : "2f3213f7a77227f71e40817a5cf2fdef4c2ec6ef",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " use mapstruct-jdk8 for Java 8 or higher ",
        "Line" : 31,
        "CharPositionInLine" : 96
      },
      "1" : {
        "Text" : "\n        <dependency>\n            <groupId>org.mapstruct</groupId>\n            <artifactId>mapstruct-processor</artifactId>\n            <version>${org.mapstruct.version}</version>\n        </dependency>\n        ",
        "Line" : 40,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 2
    },
    "Allgemeines/RxJava/pom.xml" : {
      "ObjectId" : "6d6fb59a23c04716410183763a7990266a86283a",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " 1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n            2 and slf4j ",
        "Line" : 27,
        "CharPositionInLine" : 28
      },
      "1" : {
        "Text" : " 2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n            (it is the log4j 2 implementation) ",
        "Line" : 35,
        "CharPositionInLine" : 51
      },
      "2" : {
        "Text" : " 3/3 Required dependency for getting rid of commons logging. This is \n            the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n            and whatever I am using for logging (in this case I am using log4j 2) See: \n            http://www.slf4j.org/legacy.html We need exclusions in every dependency using \n            Jakarta Commons Logging (see Spring dependencies below) ",
        "Line" : 46,
        "CharPositionInLine" : 72
      },
      "CommentCount" : 3
    },
    "CAS/4.1.0/CAS-MANAGEMENT/pom.xml" : {
      "ObjectId" : "bc205687f73476537bcf05bc61ec3fb7dbefeac8",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "CAS/4.1.0/CAS/pom.xml" : {
      "ObjectId" : "28e4714259e660e5a9447d9bd10f3ec4fa5f95bb",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "CAS/5.1.x/CAS-MANAGEMENT/pom.xml" : {
      "ObjectId" : "41ec8f4ee3e675a2304bc0abe9e2cef161c0168d",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Service Registry: the same as the one used by CAS ",
        "Line" : 25,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " <warName>cas-management</warName> ",
        "Line" : 40,
        "CharPositionInLine" : 63
      },
      "2" : {
        "Text" : " <finalName>cas-management</finalName> ",
        "Line" : 66,
        "CharPositionInLine" : 55
      },
      "CommentCount" : 3
    },
    "CAS/5.1.x/CAS/pom.xml" : {
      "ObjectId" : "028c24662171676ad026bf0bd6b676f089f85898",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " app.server could be -jetty, -undertow, -tomcat, or blank if you plan to provide appserver ",
        "Line" : 14,
        "CharPositionInLine" : 107
      },
      "1" : {
        "Text" : " Service Registry: the same as the one used by CAS-MANAGEMENT ",
        "Line" : 28,
        "CharPositionInLine" : 71
      },
      "2" : {
        "Text" : " Ticket Registry ",
        "Line" : 35,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : " Webflow Session ",
        "Line" : 42,
        "CharPositionInLine" : 26
      },
      "4" : {
        "Text" : " Throttling Authentication Attempts ",
        "Line" : 49,
        "CharPositionInLine" : 45
      },
      "5" : {
        "Text" : " Events ",
        "Line" : 61,
        "CharPositionInLine" : 17
      },
      "6" : {
        "Text" : " <warName>cas</warName> ",
        "Line" : 91,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : " <finalName>cas</finalName> ",
        "Line" : 118,
        "CharPositionInLine" : 37
      },
      "CommentCount" : 8
    },
    "JavaPOS/KeyBoardDriver/pom.xml" : {
      "ObjectId" : "1d33d36e87fa8453e6801501fdef811ccc9354df",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "MyBatis/MyBatis-Spring-ReuseBatchExecutor/pom.xml" : {
      "ObjectId" : "f398c1955ef1461c12857707e3b5755363577066",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " \n            Required dependency for getting rid of commons logging and use my own logging library\n            (in my case I decided to use log4j 2 under slf4j)\n        ",
        "Line" : 23,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " \n            Required dependency for getting rid of commons logging and use my own logging library\n            (in my case I decided to use log4j 2 under slf4j)\n        ",
        "Line" : 38,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "\n        1/3 Required dependency for log4j 2 with slf4j: binding between log4j 2 and slf4j\n    ",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n        2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin (it is the log4j 2 implementation)\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : " \n        3/3 Required dependency for getting rid of commons logging.\n        This is the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) and whatever\n        I am using for logging (in this case I am using log4j 2)\n        See: http://www.slf4j.org/legacy.html\n        \n        We need exclusions in every dependency using Jakarta Commons Logging (see Spring dependencies below)\n     ",
        "Line" : 105,
        "CharPositionInLine" : 9
      },
      "5" : {
        "Text" : "\n        <plugin>\n            <groupId>org.mybatis.generator</groupId>\n            <artifactId>mybatis-generator-maven-plugin</artifactId>\n            <version>1.3.2</version>\n            <executions>\n                <execution>\n                    <id>Generate MyBatis Artifacts</id>\n                    <goals>\n                        <goal>generate</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>\n                <jdbcDriver>com.mysql.jdbc.Driver</jdbcDriver>\n                <jdbcPassword>root</jdbcPassword>\n                <jdbcURL>jdbc:mysql://localhost:3306/mybatis_example</jdbcURL>\n                <jdbcUserId>root</jdbcUserId>\n                <outputDirectory>${mybatis.generator.outputdirectory}</outputDirectory>\n                <overwrite>true</overwrite>\n                <verbose>true</verbose>\n            </configuration>\n        </plugin>\n        ",
        "Line" : 156,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : " Required to work with m2e plugin for Eclipse (there is an available connector for this plugin but no for mybatis-generator-maven-plugin) ",
        "Line" : 157,
        "CharPositionInLine" : 154
      },
      "CommentCount" : 7
    },
    "MyBatis/MyBatis-Spring/pom.xml" : {
      "ObjectId" : "dfa59f92395f0b05f600287d58ba2fa718499f16",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required to work with m2e plugin for Eclipse (there is an available connector for this plugin but no for mybatis-generator-maven-plugin) ",
        "Line" : 110,
        "CharPositionInLine" : 154
      },
      "CommentCount" : 1
    },
    "MyBatis/MyBatis/pom.xml" : {
      "ObjectId" : "176d34049d99eb0e806493fd12dac688dc521e48",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required to work with m2e plugin for Eclipse (there is an available connector for this plugin but no for mybatis-generator-maven-plugin) ",
        "Line" : 57,
        "CharPositionInLine" : 154
      },
      "CommentCount" : 1
    },
    "MyBatis/SpringBoot/pom.xml" : {
      "ObjectId" : "9b7f623b04b7670774cbac374c178939a7f1153e",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "MyBatis/SpringBoot/web-services-spring-rest-bom/pom.xml" : {
      "ObjectId" : "ee3d5e7094901881a3c3ce9a9e9230c233e26f15",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Used for unit tests ",
        "Line" : 167,
        "CharPositionInLine" : 41
      },
      "1" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 172,
        "CharPositionInLine" : 95
      },
      "2" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 174,
        "CharPositionInLine" : 81
      },
      "3" : {
        "Text" : " Used for integration tests ",
        "Line" : 182,
        "CharPositionInLine" : 48
      },
      "4" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 194,
        "CharPositionInLine" : 53
      },
      "5" : {
        "Text" : " IN BOM FILE... :(  IT SUCKS :( )",
        "Line" : 201,
        "CharPositionInLine" : 69
      },
      "6" : {
        "Text" : "\n                      It will create our running jar file.\n                      The main class must be located in: src/main/java/de/example/spring/kafka\n                      otherwise you need an explicit declaration using this property\n                      <start-class>de.exmaple.spring.kafka.Application</start-class>\n\n                      The start-class property is automatically populated by spring-boot-maven-plugin and it is\n                      used in spring-boot-starter-parent.\n                    \n                      See: http://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-maven-packaging-optional-params\n                 ",
        "Line" : 224,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 7
    },
    "MyBatis/SpringBoot/web-services-spring-rest-global/pom.xml" : {
      "ObjectId" : "cb6a6d664c5ee85a8201c84297ea987379ddbd3b",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required for using JSR-303, validations\n\t\t<dependency>\n        \t<groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n            <version>${bv.api.version}</version>\n        </dependency>\n        \n        Instead we will rely on the dependencies provided by spring-boot-starter-web.\n         ",
        "Line" : 23,
        "CharPositionInLine" : 13
      },
      "1" : {
        "Text" : " For hashcode and equals ",
        "Line" : 35,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 2
    },
    "MyBatis/SpringBoot/web-services-spring-rest-server/pom.xml" : {
      "ObjectId" : "4f62cf1ee95989822e9ce4f928dd9ec428197bc5",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " When running on your PC\n        <database-locations.port>5432</database-locations.port>\n        <database-conciliation.port>5433</database-conciliation.port>\n        ",
        "Line" : 20,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " Required dependency for using org.springframework.data.domain.Page ",
        "Line" : 36,
        "CharPositionInLine" : 84
      },
      "2" : {
        "Text" : " Health check service with user and password ",
        "Line" : 56,
        "CharPositionInLine" : 61
      },
      "3" : {
        "Text" : "\n             Jackson dependency required for serializing and deserializing LocalDateTime,\n             LocalDate, etc, etc objects.\n        ",
        "Line" : 70,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 90,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : " API documentation ",
        "Line" : 121,
        "CharPositionInLine" : 29
      },
      "6" : {
        "Text" : "  \n\t\t\t\t\t\t\t<external>\n\t\t\t\t\t\t\t\t<type>compose</type>\n\t\t\t\t\t\t\t\t<basedir>src/test/resources/docker</basedir>\n\t\t\t\t\t\t\t\t<composeFile>docker-compose.yml</composeFile>\n\t\t\t\t\t\t\t</external>\n\t\t\t\t\t\t\t",
        "Line" : 166,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "\n\t\t\t\t\t\t\t<external>\n\t\t\t\t\t\t\t\t<type>compose</type>\n\t\t\t\t\t\t\t\t<basedir>src/test/resources/docker</basedir>\n\t\t\t\t\t\t\t\t<composeFile>docker-compose.yml</composeFile>\n\t\t\t\t\t\t\t</external>\n\t\t\t\t\t\t\t",
        "Line" : 195,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 8
    },
    "RemoteAgents/remote-agents-batchapp/pom.xml" : {
      "ObjectId" : "25d44ceb9d6b800982ec00809589e38fff9eb217",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "  \n    <dependency>\n      <groupId>javax</groupId>\n      <artifactId>javaee-web-api</artifactId>\n      <version>7.0</version>\n      <scope>provided</scope>\n    </dependency>\n    ",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "RemoteAgents/remote-agents-clients/pom.xml" : {
      "ObjectId" : "bd177ab0cd235580a0da7ed1e2b0ee9d86b3e39e",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "RemoteAgents/remote-agents-services-implementation/pom.xml" : {
      "ObjectId" : "1df1d9d09286110ce26ce5fbb4adf5d2368f9851",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "RemoteAgents/remote-agents-services-interfaces/pom.xml" : {
      "ObjectId" : "849a360b97b8007e2dbaa93357e4638cc659e6ad",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "RemoteAgents/remote-agents/pom.xml" : {
      "ObjectId" : "55c4e4efe8b12309ec4ea61e579d60252158e399",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "Sonar/Plugins/pom.xml" : {
      "ObjectId" : "85b0ea5ef0acd1e5c211740c3a547c4b5e6ced32",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "Sonar/Plugins/sonar-custom-java-plugin/pom.xml" : {
      "ObjectId" : "48fb5470af5516c699c2ce2df26232c380150992",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Be careful these two paths must match the ones configured in SONARQUBE JaCoCo plugin ",
        "Line" : 24,
        "CharPositionInLine" : 98
      },
      "1" : {
        "Text" : " unit tests ",
        "Line" : 47,
        "CharPositionInLine" : 24
      },
      "2" : {
        "Text" : "\n       1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n       2 and slf4j\n    ",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n        2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n        (it is the log4j 2 implementation)\n    ",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "\n        3/3 Required dependency for getting rid of commons logging. This is \n        the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n        and whatever I am using for logging (in this case I am using log4j 2) See: \n        http://www.slf4j.org/legacy.html We need exclusions in every dependency using \n        Jakarta Commons Logging (see Spring dependencies below) \n    ",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : " add support for ssh/scp ",
        "Line" : 117,
        "CharPositionInLine" : 67
      },
      "6" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Surefire plugin is executed. ",
        "Line" : 215,
        "CharPositionInLine" : 97
      },
      "7" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 222,
        "CharPositionInLine" : 98
      },
      "8" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 225,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : " Ensures that the code coverage report for unit tests is created \n                        after unit tests have been run. ",
        "Line" : 230,
        "CharPositionInLine" : 60
      },
      "10" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 238,
        "CharPositionInLine" : 98
      },
      "11" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 240,
        "CharPositionInLine" : 93
      },
      "12" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Failsafe plugin is executed. ",
        "Line" : 245,
        "CharPositionInLine" : 97
      },
      "13" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 253,
        "CharPositionInLine" : 98
      },
      "14" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 256,
        "CharPositionInLine" : 51
      },
      "15" : {
        "Text" : " Ensures that the code coverage report for integration tests after \n                        integration tests have been run. ",
        "Line" : 261,
        "CharPositionInLine" : 61
      },
      "16" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 269,
        "CharPositionInLine" : 98
      },
      "17" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 271,
        "CharPositionInLine" : 93
      },
      "18" : {
        "Text" : " m2e doesn't know what to do with jacoco, let's ignore it or \n                                        annoying error markers appear see http://wiki.eclipse.org/M2E_plugin_execution_not_covered ",
        "Line" : 296,
        "CharPositionInLine" : 135
      },
      "19" : {
        "Text" : " Used for unit tests ",
        "Line" : 304,
        "CharPositionInLine" : 31
      },
      "20" : {
        "Text" : " Sets the VM argument line used when unit tests are run. ",
        "Line" : 317,
        "CharPositionInLine" : 69
      },
      "21" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 320,
        "CharPositionInLine" : 79
      },
      "22" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 322,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 23
    },
    "Sonar/Plugins/sonar-custom-javascript-plugin/pom.xml" : {
      "ObjectId" : "7cc18bc7671c690b422df1082fb4c1f98096343c",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Be careful these two paths must match the ones configured in SONARQUBE JaCoCo plugin ",
        "Line" : 24,
        "CharPositionInLine" : 98
      },
      "1" : {
        "Text" : " unit tests ",
        "Line" : 56,
        "CharPositionInLine" : 24
      },
      "2" : {
        "Text" : "\n       1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n       2 and slf4j\n    ",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n        2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n        (it is the log4j 2 implementation)\n    ",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "\n        3/3 Required dependency for getting rid of commons logging. This is \n        the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n        and whatever I am using for logging (in this case I am using log4j 2) See: \n        http://www.slf4j.org/legacy.html We need exclusions in every dependency using \n        Jakarta Commons Logging (see Spring dependencies below) \n    ",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : " add support for ssh/scp ",
        "Line" : 126,
        "CharPositionInLine" : 67
      },
      "6" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Surefire plugin is executed. ",
        "Line" : 224,
        "CharPositionInLine" : 97
      },
      "7" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 231,
        "CharPositionInLine" : 98
      },
      "8" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 234,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : " Ensures that the code coverage report for unit tests is created \n                        after unit tests have been run. ",
        "Line" : 239,
        "CharPositionInLine" : 60
      },
      "10" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 247,
        "CharPositionInLine" : 98
      },
      "11" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 249,
        "CharPositionInLine" : 93
      },
      "12" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Failsafe plugin is executed. ",
        "Line" : 254,
        "CharPositionInLine" : 97
      },
      "13" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 262,
        "CharPositionInLine" : 98
      },
      "14" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 265,
        "CharPositionInLine" : 51
      },
      "15" : {
        "Text" : " Ensures that the code coverage report for integration tests after \n                        integration tests have been run. ",
        "Line" : 270,
        "CharPositionInLine" : 61
      },
      "16" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 278,
        "CharPositionInLine" : 98
      },
      "17" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 280,
        "CharPositionInLine" : 93
      },
      "18" : {
        "Text" : " m2e doesn't know what to do with jacoco, let's ignore it or \n                                        annoying error markers appear see http://wiki.eclipse.org/M2E_plugin_execution_not_covered ",
        "Line" : 305,
        "CharPositionInLine" : 135
      },
      "19" : {
        "Text" : " Used for unit tests ",
        "Line" : 313,
        "CharPositionInLine" : 31
      },
      "20" : {
        "Text" : " Sets the VM argument line used when unit tests are run. ",
        "Line" : 326,
        "CharPositionInLine" : 69
      },
      "21" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 329,
        "CharPositionInLine" : 79
      },
      "22" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 331,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 23
    },
    "SpringJava/AOP/SpringAOP20/pom.xml" : {
      "ObjectId" : "b43ac8152568924c6a15050576efd74f07cd8f2a",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " \n               Required dependency for getting rid of commons logging and use my own logging library\n               (in my case I decided to use log4j 2 under slf4j)\n           ",
        "Line" : 26,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 41,
        "CharPositionInLine" : 14
      },
      "2" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 56,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "\n          1/3 Required dependency for log4j 2 with slf4j: binding between log4j 2 and slf4j\n      ",
        "Line" : 73,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "\n          2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin (it is the log4j 2 implementation)\n      ",
        "Line" : 81,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : " \n          3/3 Required dependency for getting rid of commons logging.\n          This is the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) and whatever\n          I am using for logging (in this case I am using log4j 2)\n          See: http://www.slf4j.org/legacy.html\n          \n          We need exclusions in every dependency using Jakarta Commons Logging (see Spring dependencies below)\n       ",
        "Line" : 94,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 6
    },
    "SpringJava/AOP/SpringAspectJ/pom.xml" : {
      "ObjectId" : "be48cff7c715af74e22aaad79b56356d9f02ceff",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " \n               Required dependency for getting rid of commons logging and use my own logging library\n               (in my case I decided to use log4j 2 under slf4j)\n           ",
        "Line" : 26,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 41,
        "CharPositionInLine" : 14
      },
      "2" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 56,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "\n          1/3 Required dependency for log4j 2 with slf4j: binding between log4j 2 and slf4j\n      ",
        "Line" : 73,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "\n          2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin (it is the log4j 2 implementation)\n      ",
        "Line" : 81,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : " \n          3/3 Required dependency for getting rid of commons logging.\n          This is the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) and whatever\n          I am using for logging (in this case I am using log4j 2)\n          See: http://www.slf4j.org/legacy.html\n          \n          We need exclusions in every dependency using Jakarta Commons Logging (see Spring dependencies below)\n       ",
        "Line" : 94,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 6
    },
    "SpringJava/AOP/SpringLTW/pom.xml" : {
      "ObjectId" : "5ebc4a0c301ab83e2991e45539aa0c8caf320e68",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " \n               Required dependency for getting rid of commons logging and use my own logging library\n               (in my case I decided to use log4j 2 under slf4j)\n           ",
        "Line" : 26,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 41,
        "CharPositionInLine" : 14
      },
      "2" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 56,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 71,
        "CharPositionInLine" : 14
      },
      "4" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 96,
        "CharPositionInLine" : 14
      },
      "5" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 111,
        "CharPositionInLine" : 14
      },
      "6" : {
        "Text" : "\n          1/3 Required dependency for log4j 2 with slf4j: binding between log4j 2 and slf4j\n      ",
        "Line" : 139,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "\n          2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin (it is the log4j 2 implementation)\n      ",
        "Line" : 147,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : " \n          3/3 Required dependency for getting rid of commons logging.\n          This is the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) and whatever\n          I am using for logging (in this case I am using log4j 2)\n          See: http://www.slf4j.org/legacy.html\n          \n          We need exclusions in every dependency using Jakarta Commons Logging (see Spring dependencies below)\n       ",
        "Line" : 160,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 9
    },
    "SpringJava/AOP/SpringMavenWeaver/pom.xml" : {
      "ObjectId" : "dd5a42e271f0bb29f13b562f8e449e54956f1943",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " \n               Required dependency for getting rid of commons logging and use my own logging library\n               (in my case I decided to use log4j 2 under slf4j)\n           ",
        "Line" : 26,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 41,
        "CharPositionInLine" : 14
      },
      "2" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 56,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 82,
        "CharPositionInLine" : 14
      },
      "4" : {
        "Text" : " \n              Required dependency for getting rid of commons logging and use my own logging library\n              (in my case I decided to use log4j 2 under slf4j)\n          ",
        "Line" : 97,
        "CharPositionInLine" : 14
      },
      "5" : {
        "Text" : " Using aspectj-maven-plugin with AJDT, requires 1.8.7 version ",
        "Line" : 106,
        "CharPositionInLine" : 72
      },
      "6" : {
        "Text" : "\n          1/3 Required dependency for log4j 2 with slf4j: binding between log4j 2 and slf4j\n      ",
        "Line" : 133,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "\n          2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin (it is the log4j 2 implementation)\n      ",
        "Line" : 141,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : " \n          3/3 Required dependency for getting rid of commons logging.\n          This is the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) and whatever\n          I am using for logging (in this case I am using log4j 2)\n          See: http://www.slf4j.org/legacy.html\n          \n          We need exclusions in every dependency using Jakarta Commons Logging (see Spring dependencies below)\n       ",
        "Line" : 154,
        "CharPositionInLine" : 11
      },
      "9" : {
        "Text" : " Modifying output directory of default compile because non-weaved \n\t\t\t\t\t\t  classes must be stored in separate folder to not confuse ajc by reweaving \n\t\t\t\t\t\t  already woven classes (which leads to to ajc error message like \"bad weaverState.Kind: \n\t\t\t\t\t\t  -115\") ",
        "Line" : 178,
        "CharPositionInLine" : 19
      },
      "10" : {
        "Text" : "  \n          \t\t<ajdtBuildDefFile>build.ajproperties</ajdtBuildDefFile>\n          \t\t",
        "Line" : 201,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : " Compile and weave aspects after all classes compiled by javac ",
        "Line" : 228,
        "CharPositionInLine" : 84
      },
      "12" : {
        "Text" : " \n\t\t\t\t\t<ajdtBuildDefFile>build.ajproperties</ajdtBuildDefFile>\n\t\t\t\t\t",
        "Line" : 253,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 13
    },
    "SpringJava/AWS/LAMBDA/pom.xml" : {
      "ObjectId" : "53f2c5e0679783f7e1ad739e646b8a11acf9af0e",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " AWS XRAY ",
        "Line" : 40,
        "CharPositionInLine" : 19
      },
      "1" : {
        "Text" : " AWS XRAY ",
        "Line" : 66,
        "CharPositionInLine" : 20
      },
      "2" : {
        "Text" : " Used for unit tests ",
        "Line" : 144,
        "CharPositionInLine" : 41
      },
      "3" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 149,
        "CharPositionInLine" : 95
      },
      "4" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 151,
        "CharPositionInLine" : 81
      },
      "5" : {
        "Text" : " Used for integration tests ",
        "Line" : 159,
        "CharPositionInLine" : 48
      },
      "6" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 171,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 7
    },
    "SpringJava/AWS/SNS/pom.xml" : {
      "ObjectId" : "b5e3787270649b8bbc11e2ea0724917c62545997",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/AWS/SNS/spring-sns-bom/pom.xml" : {
      "ObjectId" : "48f692f53bf600a89c838768b66d19fcfc915046",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " AWS SNS ",
        "Line" : 68,
        "CharPositionInLine" : 19
      },
      "1" : {
        "Text" : " Used for unit tests ",
        "Line" : 117,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 122,
        "CharPositionInLine" : 95
      },
      "3" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 124,
        "CharPositionInLine" : 81
      },
      "4" : {
        "Text" : " Used for integration tests ",
        "Line" : 132,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 144,
        "CharPositionInLine" : 53
      },
      "6" : {
        "Text" : "\n                      It will create our running jar file.\n                      The main class must be located in: src/main/java/de/example/spring/sns\n                      otherwise you need an explicit declaration using this property\n                      <start-class>de.exmaple.spring.kafka.Application</start-class>\n\n                      The start-class property is automatically populated by spring-boot-maven-plugin and it is\n                      used in spring-boot-starter-parent.\n                    \n                      See: http://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-maven-packaging-optional-params\n                 ",
        "Line" : 168,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 7
    },
    "SpringJava/AWS/SNS/spring-sns-client/pom.xml" : {
      "ObjectId" : "204391936b74fd34b321a68375f2003b4e1e5b08",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n             Jackson dependency required for serializing and deserializing LocalDateTime,\n             LocalDate, etc, etc objects.\n        ",
        "Line" : 22,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 34,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 2
    },
    "SpringJava/AWS/SNS/spring-sns-server/pom.xml" : {
      "ObjectId" : "57be983057e9b4c2870ce55236ae489ead117964",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n             Jackson dependency required for serializing and deserializing LocalDateTime,\n             LocalDate, etc, etc objects.\n        ",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 27,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 2
    },
    "SpringJava/AWS/SQS/pom.xml" : {
      "ObjectId" : "982b31ee34b7bf6bed63a0ffb062eab506b6a31d",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/AWS/SQS/spring-sqs-bom/pom.xml" : {
      "ObjectId" : "7827885fccb95f6e0cd9b4b314c64d770477c094",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " AWS SQS ",
        "Line" : 68,
        "CharPositionInLine" : 19
      },
      "1" : {
        "Text" : " Used for unit tests ",
        "Line" : 117,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 122,
        "CharPositionInLine" : 95
      },
      "3" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 124,
        "CharPositionInLine" : 81
      },
      "4" : {
        "Text" : " Used for integration tests ",
        "Line" : 132,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 144,
        "CharPositionInLine" : 53
      },
      "6" : {
        "Text" : "\n                      It will create our running jar file.\n                      The main class must be located in: src/main/java/de/aws/example/lambda\n                      otherwise you need an explicit declaration using this property\n                      <start-class>de.exmaple.spring.kafka.Application</start-class>\n\n                      The start-class property is automatically populated by spring-boot-maven-plugin and it is\n                      used in spring-boot-starter-parent.\n                    \n                      See: http://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-maven-packaging-optional-params\n                 ",
        "Line" : 168,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 7
    },
    "SpringJava/AWS/SQS/spring-sqs-client/pom.xml" : {
      "ObjectId" : "5c4713ee6dd3000bf3dd9dbe52122c55c121cd68",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n             Jackson dependency required for serializing and deserializing LocalDateTime,\n             LocalDate, etc, etc objects.\n        ",
        "Line" : 22,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 34,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 2
    },
    "SpringJava/AWS/SQS/spring-sqs-server/pom.xml" : {
      "ObjectId" : "a692d9ec0552c92a93c9cdf42e3e921451ed8691",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n             Jackson dependency required for serializing and deserializing LocalDateTime,\n             LocalDate, etc, etc objects.\n        ",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 27,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 2
    },
    "SpringJava/AnnotationsCustomHandler/custom-annotations-implementation/pom.xml" : {
      "ObjectId" : "1ee0664c475478166caf3666ca372e93b1e62a02",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/AnnotationsCustomHandler/pom.xml" : {
      "ObjectId" : "d017725ff89e2c6cbb35b2eaf9890a440afb77c3",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Usually you will not need this plugin\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-resources-plugin</artifactId>\n\t\t\t\t<version>2.2</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<encoding>${project.build.sourceEncoding}</encoding>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t",
        "Line" : 459,
        "CharPositionInLine" : 7
      },
      "1" : {
        "Text" : "We need this for the javadoc and reporting maven plugin ",
        "Line" : 522,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : "\n\t\t<repository>\n\t\t\t<id>central-myproject-repo</id>\n\t\t\t<name>Internal repository</name>\n\t\t\t<url>http://noserver/artifactory/my-repo</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t\t<repository>\n\t\t\t<id>snapshots-releases</id>\n\t\t\t<name>snapshots-releases</name>\n\t\t\t<url>http://noserver/artifactory/custom-annotations-libs-snapshots-local</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t\t",
        "Line" : 646,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "\n\t\t<pluginRepository>\n\t\t\t<id>central-myproject-plugins-repo</id>\n\t\t\t<name>Plugins internal repository</name>\n\t\t\t<url>http://noserver/artifactory/plugins-repo</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t\t<releases>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</releases>\n\t\t</pluginRepository>\n\t\t",
        "Line" : 661,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "SpringJava/DeadLocksSQL/pom.xml" : {
      "ObjectId" : "57d311e92d985e743eff72fa6bb446207e4fb903",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n    **************************************************************************************************************************\n        1. LOGBACK: SLF4J NATIVE IMPLEMENTATION. See: http://logback.qos.ch/\n    **************************************************************************************************************************\n    ",
        "Line" : 21,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "\n        1/1 Required dependency for native implementation (nothing else is required)\n\n        Native implementation. There are also SLF4J bindings external to the SLF4J project, e.g. logback which implements\n        SLF4Jnatively. Logback's ch.qos.logback.classic.Logger class is a direct implementation of SLF4J's org.slf4j.Logger\n        interface. Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead.\n        see: http://www.slf4j.org/manual.html\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.1.2</version>\n    </dependency>\n    ",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "\n    **************************************************************************************************************************\n        2. SLF4J AND LOG4J 2. See: http://logging.apache.org/log4j/2.x/\n    **************************************************************************************************************************\n    ",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n        1/2 Required dependency for log4j 2 with slf4j: binding\n    ",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "\n        2/2 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin\n    ",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "\n        LMAX Disruptor technology for LOG4J 2. I am not using it, but it is declared in my log4j2.xml file (just for fun)\n    ",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "\n        Spring dependencies\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "\n        AOP AspectJ\n    ",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "SpringJava/Emails/spring-emails-web-client/pom.xml" : {
      "ObjectId" : "5dd948c7169b514d3ee99978ca8db82253bc6724",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required dependency for VelocityEngineUtils ",
        "Line" : 39,
        "CharPositionInLine" : 55
      },
      "1" : {
        "Text" : " Required dependencies for SMTP client ",
        "Line" : 53,
        "CharPositionInLine" : 49
      },
      "2" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 59,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters\n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "\n\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean\n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "  Required dependency for Thymeleaf ",
        "Line" : 89,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 99,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 7
    },
    "SpringJava/Emails/spring-emails/pom.xml" : {
      "ObjectId" : "7f8db543b52094f33622914a9764867d5cd76add",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n\t\t\t1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n\t\t\t2 and slf4j\n\t\t",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "\n\t\t\t2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n\t\t\t(it is the log4j 2 implementation)\n\t\t",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "\n\t\t\t3/3 Required dependency for getting rid of commons logging. This is \n\t\t\tthe BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n\t\t\tand whatever I am using for logging (in this case I am using log4j 2)\n\t\t\tSee: http://www.slf4j.org/legacy.html We need exclusions in every dependency using \n\t\t\tJakarta Commons Logging (see Spring dependencies below)\n\t\t",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 77,
        "CharPositionInLine" : 41
      },
      "4" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 131,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 141,
        "CharPositionInLine" : 38
      },
      "8" : {
        "Text" : "\n\t\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 152,
        "CharPositionInLine" : 7
      },
      "9" : {
        "Text" : "\n\t\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 162,
        "CharPositionInLine" : 7
      },
      "10" : {
        "Text" : " Required dependencies for VelocityEngineUtils ",
        "Line" : 176,
        "CharPositionInLine" : 58
      },
      "11" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "  Required dependency for Thymeleaf ",
        "Line" : 203,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : " Required dependencies for SMTP client ",
        "Line" : 215,
        "CharPositionInLine" : 50
      },
      "14" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 223,
        "CharPositionInLine" : 42
      },
      "15" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 232,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 16
    },
    "SpringJava/JPA/pom.xml" : {
      "ObjectId" : "98fd27f06ebe2acfa3dcbc011866bc1ad132551f",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/JPA/spring-jpa-bom/pom.xml" : {
      "ObjectId" : "780b4d2ffdf1df99fc6a8dcb34d1a7239223b7dc",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Be careful these two paths must match the ones configured in SONARQUBE JaCoCo plugin ",
        "Line" : 36,
        "CharPositionInLine" : 102
      },
      "1" : {
        "Text" : "\n\t\t\t1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n\t\t\t2 and slf4j\n\t\t",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "\n\t\t\t2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n\t\t\t(it is the log4j 2 implementation)\n\t\t",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "\n\t\t\t3/3 Required dependency for getting rid of commons logging. This is \n\t\t\tthe BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n\t\t\tand whatever I am using for logging (in this case I am using log4j 2) See: \n\t\t\thttp://www.slf4j.org/legacy.html We need exclusions in every dependency using \n\t\t\tJakarta Commons Logging (see Spring dependencies below)\t\n\t\t",
        "Line" : 98,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "\n\t\t\t\tRequired dependency for getting rid of commons logging and use my \n\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t",
        "Line" : 113,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 134,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : " REST API ",
        "Line" : 151,
        "CharPositionInLine" : 21
      },
      "7" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 176,
        "CharPositionInLine" : 38
      },
      "8" : {
        "Text" : "\n\t\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 187,
        "CharPositionInLine" : 7
      },
      "9" : {
        "Text" : " Required JPA dependencies with hibernate ",
        "Line" : 195,
        "CharPositionInLine" : 52
      },
      "10" : {
        "Text" : " Auditory using Hibernate Envers ",
        "Line" : 250,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters\n\t\t\tin rest-config.xml\n\t\t\n\t\t\tNon required dependency. It is already declared in jackson-datatype-jsr310\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.8.1</version>\n\t\t</dependency>\n\t\t",
        "Line" : 272,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing LocalDateTime,\n\t\t\tLocalDate, etc, etc objects.\n\t\t ",
        "Line" : 276,
        "CharPositionInLine" : 7
      },
      "13" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing org.joda.time.DateTime objects.\n\t\t\tSee: org.springframework.data.history.Revision getRevisionDate\n\t\t ",
        "Line" : 285,
        "CharPositionInLine" : 7
      },
      "14" : {
        "Text" : "\n\t\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 296,
        "CharPositionInLine" : 7
      },
      "15" : {
        "Text" : " Using Querydsl ",
        "Line" : 309,
        "CharPositionInLine" : 27
      },
      "16" : {
        "Text" : " Loading data base in run time ",
        "Line" : 321,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 328,
        "CharPositionInLine" : 42
      },
      "18" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 337,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : " Using Querydsl ",
        "Line" : 357,
        "CharPositionInLine" : 28
      },
      "20" : {
        "Text" : " Required in order to work with m2e plugin for Eclipse  ",
        "Line" : 363,
        "CharPositionInLine" : 68
      },
      "21" : {
        "Text" : " add support for ssh/scp ",
        "Line" : 374,
        "CharPositionInLine" : 67
      },
      "22" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Surefire plugin is executed. ",
        "Line" : 463,
        "CharPositionInLine" : 97
      },
      "23" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 470,
        "CharPositionInLine" : 98
      },
      "24" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 473,
        "CharPositionInLine" : 51
      },
      "25" : {
        "Text" : " Ensures that the code coverage report for unit tests is created \n                        after unit tests have been run. ",
        "Line" : 478,
        "CharPositionInLine" : 60
      },
      "26" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 486,
        "CharPositionInLine" : 98
      },
      "27" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 488,
        "CharPositionInLine" : 93
      },
      "28" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Failsafe plugin is executed. ",
        "Line" : 493,
        "CharPositionInLine" : 97
      },
      "29" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 501,
        "CharPositionInLine" : 98
      },
      "30" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 504,
        "CharPositionInLine" : 51
      },
      "31" : {
        "Text" : " Ensures that the code coverage report for integration tests after \n                        integration tests have been run. ",
        "Line" : 509,
        "CharPositionInLine" : 61
      },
      "32" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 517,
        "CharPositionInLine" : 98
      },
      "33" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 519,
        "CharPositionInLine" : 93
      },
      "34" : {
        "Text" : " m2e doesn't know what to do with jacoco, let's ignore it or \n                                        annoying error markers appear see http://wiki.eclipse.org/M2E_plugin_execution_not_covered ",
        "Line" : 544,
        "CharPositionInLine" : 135
      },
      "35" : {
        "Text" : " Used for unit tests ",
        "Line" : 553,
        "CharPositionInLine" : 41
      },
      "36" : {
        "Text" : " Sets the VM argument line used when unit tests are run. ",
        "Line" : 566,
        "CharPositionInLine" : 85
      },
      "37" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 569,
        "CharPositionInLine" : 95
      },
      "38" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 571,
        "CharPositionInLine" : 81
      },
      "39" : {
        "Text" : " Used for integration tests ",
        "Line" : 579,
        "CharPositionInLine" : 48
      },
      "40" : {
        "Text" : " Sets the VM argument line used when integration tests are run. ",
        "Line" : 591,
        "CharPositionInLine" : 100
      },
      "41" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 595,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 42
    },
    "SpringJava/JPA/spring-jpa-persistence/pom.xml" : {
      "ObjectId" : "a18d6e40151f1f1b73fc388d77cfae0d3d754320",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required JPA dependencies with hibernate ",
        "Line" : 18,
        "CharPositionInLine" : 52
      },
      "1" : {
        "Text" : " Auditory using Hibernate Envers ",
        "Line" : 32,
        "CharPositionInLine" : 43
      },
      "2" : {
        "Text" : "\n\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean \n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 45,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters \n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : " Using Querydsl ",
        "Line" : 65,
        "CharPositionInLine" : 26
      },
      "5" : {
        "Text" : " Loading data base in run time ",
        "Line" : 75,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 81,
        "CharPositionInLine" : 41
      },
      "7" : {
        "Text" : " Using Querydsl ",
        "Line" : 96,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : " Required in order to work with m2e plugin for Eclipse  ",
        "Line" : 112,
        "CharPositionInLine" : 67
      },
      "CommentCount" : 9
    },
    "SpringJava/JPA/spring-jpa-resources/pom.xml" : {
      "ObjectId" : "4ea82b5a987fee4da7084555dbda5d2400843368",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " REST API ",
        "Line" : 25,
        "CharPositionInLine" : 20
      },
      "1" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 35,
        "CharPositionInLine" : 37
      },
      "2" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters\n\t\t\tin rest-config.xml\n\t\t\n\t\t\tNon required dependency. It is already declared in jackson-datatype-jsr310\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.6.4</version>\n\t\t</dependency>\n\t\t",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing LocalDateTime,\n\t\t\tLocalDate, etc, etc objects.\n\t\t ",
        "Line" : 59,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing org.joda.time.DateTime objects.\n\t\t\tSee: org.springframework.data.history.Revision getRevisionDate\n\t\t ",
        "Line" : 67,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 73,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 6
    },
    "SpringJava/JPA/spring-jpa-services/pom.xml" : {
      "ObjectId" : "06bbfaaf4870556678eb2c9c467e149c0eaa601e",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 24,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 1
    },
    "SpringJava/Kafka/SpringCloudStream/pom.xml" : {
      "ObjectId" : "6458f9cd68d342196616063c5c50bec34455b381",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/Kafka/SpringCloudStream/spring-stream-kafka-bom/pom.xml" : {
      "ObjectId" : "0eadd1e7ab8c1a126bb4cc0e8414e6cff2fb5f3f",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required for using Apache Avro ",
        "Line" : 54,
        "CharPositionInLine" : 48
      },
      "1" : {
        "Text" : " Metrics ",
        "Line" : 71,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " actuator it is the one that provides autoconfiguration for micrometer :) ",
        "Line" : 72,
        "CharPositionInLine" : 90
      },
      "3" : {
        "Text" : " Usually will be using one or another\n             If having more than one you will need to use\n             management.metrics.export.statsd.enabled=true/false\n        ",
        "Line" : 90,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : " Tests ",
        "Line" : 102,
        "CharPositionInLine" : 23
      },
      "5" : {
        "Text" : "\n            WARNING!!! Plugins versions are located in parent pom spring-boot-dependencies.\n        ",
        "Line" : 125,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : " Used for unit tests ",
        "Line" : 160,
        "CharPositionInLine" : 41
      },
      "7" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 172,
        "CharPositionInLine" : 95
      },
      "8" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 174,
        "CharPositionInLine" : 81
      },
      "9" : {
        "Text" : " Used for integration tests ",
        "Line" : 182,
        "CharPositionInLine" : 48
      },
      "10" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 194,
        "CharPositionInLine" : 53
      },
      "11" : {
        "Text" : "\n                      It will create our running jar file.\n                      The main class must be located in: src/main/java/de/example/spring/kafka\n                      otherwise you need an explicit declaration using this property\n                      <start-class>de.exmaple.spring.kafka.Application</start-class>\n\n                      The start-class property is automatically populated by spring-boot-maven-plugin and it is\n                      used in spring-boot-starter-parent.\n                    \n                      See: http://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-maven-packaging-optional-params\n                 ",
        "Line" : 218,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 12
    },
    "SpringJava/Kafka/SpringCloudStream/spring-stream-kafka-common/pom.xml" : {
      "ObjectId" : "068ada0e9e59651c710857759ba132d96b853812",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/Kafka/SpringCloudStream/spring-stream-kafka-consumer/pom.xml" : {
      "ObjectId" : "5b939482f5a08449105cf78ce3d39394e4353aa3",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/Kafka/SpringCloudStream/spring-stream-kafka-producer/pom.xml" : {
      "ObjectId" : "f244b6ead8e20d72fdcdce8c2696623c0a2e4677",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/Kafka/SpringCloudStream/spring-stream-kafka-registry/pom.xml" : {
      "ObjectId" : "1c5f9ac3940df0c769e7ae2c432f3f183d69718b",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/Redis/pom.xml" : {
      "ObjectId" : "2e10aaba039da7b8fa77ba6df7633d40130ecdbd",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/Redis/web-services-spring-redis-bom/pom.xml" : {
      "ObjectId" : "af6994b4c03d7e77fe5da5b74736d44d6893012b",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Used for unit tests ",
        "Line" : 104,
        "CharPositionInLine" : 41
      },
      "1" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 109,
        "CharPositionInLine" : 95
      },
      "2" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 111,
        "CharPositionInLine" : 81
      },
      "3" : {
        "Text" : " Used for integration tests ",
        "Line" : 119,
        "CharPositionInLine" : 48
      },
      "4" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 131,
        "CharPositionInLine" : 53
      },
      "5" : {
        "Text" : "\n                      It will create our running jar file.\n                      The main class must be located in: src/main/java/de/example/spring/kafka\n                      otherwise you need an explicit declaration using this property\n                      <start-class>de.exmaple.spring.kafka.Application</start-class>\n\n                      The start-class property is automatically populated by spring-boot-maven-plugin and it is\n                      used in spring-boot-starter-parent.\n                    \n                      See: http://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-maven-packaging-optional-params\n                 ",
        "Line" : 155,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 6
    },
    "SpringJava/Redis/web-services-spring-redis-global/pom.xml" : {
      "ObjectId" : "0579a4cea9348008544ad4679f574392e8c11b29",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required for using JSR-303, validations\n\t\t<dependency>\n        \t<groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n            <version>${bv.api.version}</version>\n        </dependency>\n        \n        Instead we will rely on the dependencies provided by spring-boot-starter-web.\n         ",
        "Line" : 23,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 1
    },
    "SpringJava/Redis/web-services-spring-redis-server/pom.xml" : {
      "ObjectId" : "13872c0b742d9e2ccbe9f0af8bb75cb230ddbe60",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Health check service with user and password ",
        "Line" : 24,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : " REDIS HTTP SESSION ",
        "Line" : 34,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "\n             Jackson dependency required for serializing and deserializing LocalDateTime,\n             LocalDate, etc, etc objects.\n        ",
        "Line" : 54,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 61,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 4
    },
    "SpringJava/RxJava/pom.xml" : {
      "ObjectId" : "b8e47a15b27425f2a0e6b372547c0deb9b2a69e5",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/RxJava/web-services-spring-rxjava-bom/pom.xml" : {
      "ObjectId" : "6d9e67a65f2e29a16daa128d4ff8e2c0a9cb0e2b",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " 1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n\t\t\t2 and slf4j ",
        "Line" : 37,
        "CharPositionInLine" : 19
      },
      "1" : {
        "Text" : " 2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n\t\t\t(it is the log4j 2 implementation) ",
        "Line" : 45,
        "CharPositionInLine" : 42
      },
      "2" : {
        "Text" : " 3/3 Required dependency for getting rid of commons logging. This is \n\t\t\tthe BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n\t\t\tand whatever I am using for logging (in this case I am using log4j 2) See: \n\t\t\thttp://www.slf4j.org/legacy.html We need exclusions in every dependency using \n\t\t\tJakarta Commons Logging (see Spring dependencies below) ",
        "Line" : 56,
        "CharPositionInLine" : 63
      },
      "3" : {
        "Text" : " Required dependency for getting rid of commons logging and use my \n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j) ",
        "Line" : 84,
        "CharPositionInLine" : 79
      },
      "4" : {
        "Text" : " Required dependency for getting rid of commons logging and use my \n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j) ",
        "Line" : 97,
        "CharPositionInLine" : 79
      },
      "5" : {
        "Text" : " Required dependency for getting rid of commons logging and use my \n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j) ",
        "Line" : 121,
        "CharPositionInLine" : 79
      },
      "6" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 130,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : " Jackson JSON Processor, required by spring-webmvc. See messageConverters \n\t\t\t\tin rest-config.xml ",
        "Line" : 139,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : " Required by spring-context for using JSR-303. See LocalValidatorFactoryBean \n\t\t\t\tin rest-config.xml ",
        "Line" : 148,
        "CharPositionInLine" : 27
      },
      "9" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 160,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : " Required by MockMvcResultMatchers (spring-test framework) ",
        "Line" : 180,
        "CharPositionInLine" : 70
      },
      "CommentCount" : 11
    },
    "SpringJava/RxJava/web-services-spring-rxjava-global/pom.xml" : {
      "ObjectId" : "ce9a818d02fb97b0c57b81a89d796045513b221f",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/RxJava/web-services-spring-rxjava-server/pom.xml" : {
      "ObjectId" : "35b50e188abe884d71910eb889feedc4f4e8e84f",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 40,
        "CharPositionInLine" : 37
      },
      "1" : {
        "Text" : " Jackson JSON Processor, required by spring-webmvc. See messageConverters in rest-config.xml ",
        "Line" : 47,
        "CharPositionInLine" : 103
      },
      "2" : {
        "Text" : " Required by spring-context for using JSR-303. See LocalValidatorFactoryBean in rest-config.xml ",
        "Line" : 61,
        "CharPositionInLine" : 106
      },
      "3" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 71,
        "CharPositionInLine" : 41
      },
      "4" : {
        "Text" : " Required by MockMvcResultMatchers (spring-test framework) ",
        "Line" : 88,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 5
    },
    "SpringJava/STOMP/pom.xml" : {
      "ObjectId" : "01fa86d938f60128fb33e4a3fa987bf918d64fab",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/STOMP/spring-stomp-bom/pom.xml" : {
      "ObjectId" : "2dc63d0517eb7962c3f034dff6e8e8906e15c9fc",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n\t\t\t1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n\t\t\t2 and slf4j\n\t\t",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "\n\t\t\t2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n\t\t\t(it is the log4j 2 implementation)\n\t\t",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "\n\t\t\t3/3 Required dependency for getting rid of commons logging. This is \n\t\t\tthe BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n\t\t\tand whatever I am using for logging (in this case I am using log4j 2)\n\t\t\tSee: http://www.slf4j.org/legacy.html We need exclusions in every dependency using \n\t\t\tJakarta Commons Logging (see Spring dependencies below)\n\t\t",
        "Line" : 76,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 90,
        "CharPositionInLine" : 41
      },
      "4" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : " Required for WebSockets ",
        "Line" : 122,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "  Required for STOMP ",
        "Line" : 139,
        "CharPositionInLine" : 32
      },
      "8" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : " REST API ",
        "Line" : 156,
        "CharPositionInLine" : 21
      },
      "10" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 179,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 189,
        "CharPositionInLine" : 38
      },
      "13" : {
        "Text" : "\n\t\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 200,
        "CharPositionInLine" : 7
      },
      "14" : {
        "Text" : "\n\t\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 210,
        "CharPositionInLine" : 7
      },
      "15" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 223,
        "CharPositionInLine" : 42
      },
      "16" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 232,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 17
    },
    "SpringJava/STOMP/spring-stomp-server-full/pom.xml" : {
      "ObjectId" : "21ba67897c2914827776e6a2c77d7349f2ab2501",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required for WebSockets ",
        "Line" : 43,
        "CharPositionInLine" : 35
      },
      "1" : {
        "Text" : "  Required for STOMP ",
        "Line" : 49,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 55,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters\n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "\n\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean\n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : " Full-featured broker, TCP connection management. ",
        "Line" : 86,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 6
    },
    "SpringJava/STOMP/spring-stomp-server-simple/pom.xml" : {
      "ObjectId" : "3a7824831eee577607a2f9ad58309636908fbc64",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required for WebSockets ",
        "Line" : 43,
        "CharPositionInLine" : 35
      },
      "1" : {
        "Text" : "  Required for STOMP ",
        "Line" : 49,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 55,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters\n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "\n\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean\n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "SpringJava/SpringCloudConfig/spring-cloud-config-example-client/pom.xml" : {
      "ObjectId" : "812496666a388fb2bb636918393f13979ccc04d7",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n            WARNING!!! Plugins versions are located in parent pom spring-boot-dependencies.\n        ",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " Used for unit tests ",
        "Line" : 99,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 111,
        "CharPositionInLine" : 95
      },
      "3" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 113,
        "CharPositionInLine" : 81
      },
      "4" : {
        "Text" : " Used for integration tests ",
        "Line" : 121,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 133,
        "CharPositionInLine" : 53
      },
      "6" : {
        "Text" : "\n                  It will create our running jar file.\n                  The main class must be located in: src/main/java/de/example/spring/cloud/config\n                  otherwise you need an explicit declaration using this property\n                  <start-class>de.exmaple.spring.cloud.config.Application</start-class>\n\n                  The start-class property is automatically populated by spring-boot-maven-plugin and it is\n                  used in spring-boot-starter-parent.\n\n                  See: http://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-maven-packaging-optional-params\n             ",
        "Line" : 154,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 7
    },
    "SpringJava/SpringCloudConfig/spring-cloud-config-example-server/pom.xml" : {
      "ObjectId" : "6185b1016488986b091b4925fce820b441bf1a0e",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n            WARNING!!! Plugins versions are located in parent pom spring-boot-dependencies.\n        ",
        "Line" : 68,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : " Used for unit tests ",
        "Line" : 103,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 115,
        "CharPositionInLine" : 95
      },
      "3" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 117,
        "CharPositionInLine" : 81
      },
      "4" : {
        "Text" : " Used for integration tests ",
        "Line" : 125,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 137,
        "CharPositionInLine" : 53
      },
      "6" : {
        "Text" : "\n                  It will create our running jar file.\n                  The main class must be located in: src/main/java/de/example/spring/cloud/config\n                  otherwise you need an explicit declaration using this property\n                  <start-class>de.exmaple.spring.cloud.config.Application</start-class>\n\n                  The start-class property is automatically populated by spring-boot-maven-plugin and it is\n                  used in spring-boot-starter-parent.\n\n                  See: http://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/build-tool-plugins-maven-plugin.html#build-tool-plugins-maven-packaging-optional-params\n             ",
        "Line" : 158,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 7
    },
    "SpringJava/WebReactive/pom.xml" : {
      "ObjectId" : "0c1ea9f61ead2158dc3d7154e99d61df5c481761",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "SpringJava/WebReactive/spring-webreactive-bom/pom.xml" : {
      "ObjectId" : "6f742ffcaefb1812ab00003b84aca54718a9d6b4",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Be careful these two paths must match the ones configured in SONARQUBE JaCoCo plugin ",
        "Line" : 36,
        "CharPositionInLine" : 102
      },
      "1" : {
        "Text" : "\n\t\t\t1/3 Required dependency for log4j 2 with slf4j: binding between log4j \n\t\t\t2 and slf4j\n\t\t",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "\n\t\t\t2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin \n\t\t\t(it is the log4j 2 implementation)\n\t\t",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "\n\t\t\t3/3 Required dependency for getting rid of commons logging. This is \n\t\t\tthe BRIDGE (no binding) between Jakarta Commons Logging (used by Spring) \n\t\t\tand whatever I am using for logging (in this case I am using log4j 2) See: \n\t\t\thttp://www.slf4j.org/legacy.html We need exclusions in every dependency using \n\t\t\tJakarta Commons Logging (see Spring dependencies below)\t\n\t\t",
        "Line" : 98,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "\n\t\t\t\tRequired dependency for getting rid of commons logging and use my \n\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t",
        "Line" : 113,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 134,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : " Using Web Reactive ",
        "Line" : 152,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : " Required by WebClient ",
        "Line" : 164,
        "CharPositionInLine" : 43
      },
      "8" : {
        "Text" : " Required by spring-webflux ",
        "Line" : 184,
        "CharPositionInLine" : 39
      },
      "9" : {
        "Text" : "\n\t\t\t\tJackson JSON Processor, required by spring-webflux. See messageConverters \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 196,
        "CharPositionInLine" : 7
      },
      "10" : {
        "Text" : " Required for using mongondb with reactive pattern ",
        "Line" : 221,
        "CharPositionInLine" : 67
      },
      "11" : {
        "Text" : " Using Querydsl ",
        "Line" : 227,
        "CharPositionInLine" : 32
      },
      "12" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webflux. See messageConverters\n\t\t\tin rest-config.xml\n\t\t\n\t\t\tNon required dependency. It is already declared in jackson-datatype-jsr310\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.8.1</version>\n\t\t</dependency>\n\t\t",
        "Line" : 249,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing LocalDateTime,\n\t\t\tLocalDate, etc, etc objects.\n\t\t ",
        "Line" : 253,
        "CharPositionInLine" : 7
      },
      "14" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing org.joda.time.DateTime objects.\n\t\t\tSee: org.springframework.data.history.Revision getRevisionDate\n\t\t ",
        "Line" : 262,
        "CharPositionInLine" : 7
      },
      "15" : {
        "Text" : "\n\t\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean \n\t\t\t\tin rest-config.xml\n\t\t\t",
        "Line" : 273,
        "CharPositionInLine" : 7
      },
      "16" : {
        "Text" : " Loading data base in run time ",
        "Line" : 286,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 293,
        "CharPositionInLine" : 42
      },
      "18" : {
        "Text" : "\n\t\t\t\t\tRequired dependency for getting rid of commons logging and use my\n\t\t\t\t\town logging library (in my case I decided to use log4j 2 under slf4j)\n\t\t\t\t",
        "Line" : 302,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : " Using Querydsl ",
        "Line" : 316,
        "CharPositionInLine" : 28
      },
      "20" : {
        "Text" : " Required in order to work with m2e plugin for Eclipse  ",
        "Line" : 322,
        "CharPositionInLine" : 68
      },
      "21" : {
        "Text" : " add support for ssh/scp ",
        "Line" : 333,
        "CharPositionInLine" : 67
      },
      "22" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Surefire plugin is executed. ",
        "Line" : 422,
        "CharPositionInLine" : 97
      },
      "23" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 429,
        "CharPositionInLine" : 98
      },
      "24" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 432,
        "CharPositionInLine" : 51
      },
      "25" : {
        "Text" : " Ensures that the code coverage report for unit tests is created \n                        after unit tests have been run. ",
        "Line" : 437,
        "CharPositionInLine" : 60
      },
      "26" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 445,
        "CharPositionInLine" : 98
      },
      "27" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 447,
        "CharPositionInLine" : 93
      },
      "28" : {
        "Text" : " Prepares the property pointing to the JaCoCo runtime agent which \n                        is passed as VM argument when Maven the Failsafe plugin is executed. ",
        "Line" : 452,
        "CharPositionInLine" : 97
      },
      "29" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 460,
        "CharPositionInLine" : 98
      },
      "30" : {
        "Text" : " Sets the name of the property containing the settings for JaCoCo \n                                runtime agent. ",
        "Line" : 463,
        "CharPositionInLine" : 51
      },
      "31" : {
        "Text" : " Ensures that the code coverage report for integration tests after \n                        integration tests have been run. ",
        "Line" : 468,
        "CharPositionInLine" : 61
      },
      "32" : {
        "Text" : " Sets the path to the file which contains the execution data. ",
        "Line" : 476,
        "CharPositionInLine" : 98
      },
      "33" : {
        "Text" : " Sets the output directory for the code coverage report. ",
        "Line" : 478,
        "CharPositionInLine" : 93
      },
      "34" : {
        "Text" : " m2e doesn't know what to do with jacoco, let's ignore it or \n                                        annoying error markers appear see http://wiki.eclipse.org/M2E_plugin_execution_not_covered ",
        "Line" : 503,
        "CharPositionInLine" : 135
      },
      "35" : {
        "Text" : " Used for unit tests ",
        "Line" : 512,
        "CharPositionInLine" : 41
      },
      "36" : {
        "Text" : " Sets the VM argument line used when unit tests are run. ",
        "Line" : 525,
        "CharPositionInLine" : 85
      },
      "37" : {
        "Text" : " Skips unit tests if the value of skip.unit.tests property is true ",
        "Line" : 528,
        "CharPositionInLine" : 95
      },
      "38" : {
        "Text" : " Excludes integration tests when unit tests are run. ",
        "Line" : 530,
        "CharPositionInLine" : 81
      },
      "39" : {
        "Text" : " Used for integration tests ",
        "Line" : 538,
        "CharPositionInLine" : 48
      },
      "40" : {
        "Text" : " Sets the VM argument line used when integration tests are run. ",
        "Line" : 550,
        "CharPositionInLine" : 100
      },
      "41" : {
        "Text" : " Skips integration tests if the value of skip.integration.tests \n                                property is true ",
        "Line" : 554,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 42
    },
    "SpringJava/WebReactive/spring-webreactive-persistence/pom.xml" : {
      "ObjectId" : "81b26bc49a71a745ea4c10287f89ef16f972ca1d",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Using Web Reactive ",
        "Line" : 18,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : " Thread Context enrichment ",
        "Line" : 19,
        "CharPositionInLine" : 43
      },
      "2" : {
        "Text" : " Using Querydsl ",
        "Line" : 39,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "\n\t\t\tRequired by spring-context for using JSR-303. See LocalValidatorFactoryBean \n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters \n\t\t\tin rest-config.xml\n\t\t",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : " Loading data base in run time ",
        "Line" : 79,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 85,
        "CharPositionInLine" : 41
      },
      "7" : {
        "Text" : " Using Querydsl ",
        "Line" : 95,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : " Required in order to work with m2e plugin for Eclipse  ",
        "Line" : 111,
        "CharPositionInLine" : 67
      },
      "CommentCount" : 9
    },
    "SpringJava/WebReactive/spring-webreactive-reactor-context-enrich/pom.xml" : {
      "ObjectId" : "2f40cb084ef08f72b02e778b43b90a637c793d31",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Using Web Reactive ",
        "Line" : 18,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 1
    },
    "SpringJava/WebReactive/spring-webreactive-resources/pom.xml" : {
      "ObjectId" : "5f84f1eb8665cd3db164ff623a67b59b56abe67b",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Required by spring-webmvc ",
        "Line" : 30,
        "CharPositionInLine" : 37
      },
      "1" : {
        "Text" : "\n\t\t\tJackson JSON Processor, required by spring-webmvc. See messageConverters\n\t\t\tin rest-config.xml\n\t\t\n\t\t\tNon required dependency. It is already declared in jackson-datatype-jsr310\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.6.4</version>\n\t\t</dependency>\n\t\t",
        "Line" : 50,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing LocalDateTime,\n\t\t\tLocalDate, etc, etc objects.\n\t\t ",
        "Line" : 54,
        "CharPositionInLine" : 7
      },
      "3" : {
        "Text" : " \n\t\t\tJackson dependency required for serializing and deserializing org.joda.time.DateTime objects.\n\t\t\tSee: org.springframework.data.history.Revision getRevisionDate\n\t\t ",
        "Line" : 62,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 68,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 5
    },
    "SpringJava/WebReactive/spring-webreactive-services/pom.xml" : {
      "ObjectId" : "c4ad090ea131fdb1ad1675aa4ca4a842e5647032",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Using Web Reactive ",
        "Line" : 19,
        "CharPositionInLine" : 36
      },
      "1" : {
        "Text" : " Required by WebClient ",
        "Line" : 25,
        "CharPositionInLine" : 39
      },
      "2" : {
        "Text" : " Unitary and integration tests ",
        "Line" : 37,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 3
    },
    "TDD/sandromancuso/bank/pom.xml" : {
      "ObjectId" : "d7fc821f73db377f94a9065982135739dd8fb9ed",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n        **************************************************************************************************************************\n            1. LOGBACK: SLF4J NATIVE IMPLEMENTATION. See: http://logback.qos.ch/\n        **************************************************************************************************************************\n        ",
        "Line" : 30,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "\n            1/1 Required dependency for native implementation (nothing else is required)\n\n            Native implementation. There are also SLF4J bindings external to the SLF4J project, e.g. logback which implements\n            SLF4Jnatively. Logback's ch.qos.logback.classic.Logger class is a direct implementation of SLF4J's org.slf4j.Logger\n            interface. Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead.\n            see: http://www.slf4j.org/manual.html\n        ",
        "Line" : 38,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "\n        **************************************************************************************************************************\n            2. SLF4J AND LOG4J 2. See: http://logging.apache.org/log4j/2.x/\n        **************************************************************************************************************************\n        ",
        "Line" : 48,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "\n            1/2 Required dependency for log4j 2 with slf4j: binding\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 57,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "\n            2/2 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "\n\t\t\t\t\t<source>1.6</source>\n                    <target>1.6</target>\n                    ",
        "Line" : 97,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "\n                Trying autodetection, see: http://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit47</artifactId>\n                        <version>2.17</version>\n                    </dependency>\n                </dependencies>\n                ",
        "Line" : 123,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "\n\t\t\t\t<groupId>org.jacoco</groupId>\n    \t\t\t<artifactId>jacoco</artifactId>\n    \t\t\t<version>0.7.2.201409121644</version>\n\t\t\t\t",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "TDD/sandromancuso/romannumerals/pom.xml" : {
      "ObjectId" : "a75f1d6bc338dc851a29c727f570e79e959883e3",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n        **************************************************************************************************************************\n            1. LOGBACK: SLF4J NATIVE IMPLEMENTATION. See: http://logback.qos.ch/\n        **************************************************************************************************************************\n        ",
        "Line" : 30,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "\n            1/1 Required dependency for native implementation (nothing else is required)\n\n            Native implementation. There are also SLF4J bindings external to the SLF4J project, e.g. logback which implements\n            SLF4Jnatively. Logback's ch.qos.logback.classic.Logger class is a direct implementation of SLF4J's org.slf4j.Logger\n            interface. Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead.\n            see: http://www.slf4j.org/manual.html\n        ",
        "Line" : 38,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "\n        **************************************************************************************************************************\n            2. SLF4J AND LOG4J 2. See: http://logging.apache.org/log4j/2.x/\n        **************************************************************************************************************************\n        ",
        "Line" : 48,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "\n            1/2 Required dependency for log4j 2 with slf4j: binding\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 57,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "\n            2/2 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "\n\t\t\t\t\t<source>1.6</source>\n                    <target>1.6</target>\n                    ",
        "Line" : 97,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "\n                Trying autodetection, see: http://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit47</artifactId>\n                        <version>2.17</version>\n                    </dependency>\n                </dependencies>\n                ",
        "Line" : 123,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "\n\t\t\t\t<groupId>org.jacoco</groupId>\n    \t\t\t<artifactId>jacoco</artifactId>\n    \t\t\t<version>0.7.2.201409121644</version>\n\t\t\t\t",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "TDD/sandromancuso/tripservice/pom.xml" : {
      "ObjectId" : "9aac4661a1d60433d38de9da527f6eb2c2948521",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n        **************************************************************************************************************************\n            1. LOGBACK: SLF4J NATIVE IMPLEMENTATION. See: http://logback.qos.ch/\n        **************************************************************************************************************************\n        ",
        "Line" : 30,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "\n            1/1 Required dependency for native implementation (nothing else is required)\n\n            Native implementation. There are also SLF4J bindings external to the SLF4J project, e.g. logback which implements\n            SLF4Jnatively. Logback's ch.qos.logback.classic.Logger class is a direct implementation of SLF4J's org.slf4j.Logger\n            interface. Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead.\n            see: http://www.slf4j.org/manual.html\n        ",
        "Line" : 38,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "\n        **************************************************************************************************************************\n            2. SLF4J AND LOG4J 2. See: http://logging.apache.org/log4j/2.x/\n        **************************************************************************************************************************\n        ",
        "Line" : 48,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "\n            1/2 Required dependency for log4j 2 with slf4j: binding\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 57,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "\n            2/2 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "\n\t\t\t\t\t<source>1.6</source>\n                    <target>1.6</target>\n                    ",
        "Line" : 97,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "\n                Trying autodetection, see: http://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit47</artifactId>\n                        <version>2.17</version>\n                    </dependency>\n                </dependencies>\n                ",
        "Line" : 123,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "\n\t\t\t\t<groupId>org.jacoco</groupId>\n    \t\t\t<artifactId>jacoco</artifactId>\n    \t\t\t<version>0.7.2.201409121644</version>\n\t\t\t\t",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "TDD/tdd/pom.xml" : {
      "ObjectId" : "1250f6d67d1b3648418cdc627f61a56e89a3c4f7",
      "LastModified" : "2019-02-24T21:14:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n        **************************************************************************************************************************\n            1. LOGBACK: SLF4J NATIVE IMPLEMENTATION. See: http://logback.qos.ch/\n        **************************************************************************************************************************\n        ",
        "Line" : 30,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "\n            1/1 Required dependency for native implementation (nothing else is required)\n\n            Native implementation. There are also SLF4J bindings external to the SLF4J project, e.g. logback which implements\n            SLF4Jnatively. Logback's ch.qos.logback.classic.Logger class is a direct implementation of SLF4J's org.slf4j.Logger\n            interface. Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead.\n            see: http://www.slf4j.org/manual.html\n        ",
        "Line" : 38,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "\n        **************************************************************************************************************************\n            2. SLF4J AND LOG4J 2. See: http://logging.apache.org/log4j/2.x/\n        **************************************************************************************************************************\n        ",
        "Line" : 48,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "\n            1/2 Required dependency for log4j 2 with slf4j: binding\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 57,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "\n            2/2 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.0-rc1</version>\n        </dependency>\n        ",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "\n\t\t\t\t\t<source>1.6</source>\n                    <target>1.6</target>\n                    ",
        "Line" : 91,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "\n                Trying autodetection, see: http://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit47</artifactId>\n                        <version>2.17</version>\n                    </dependency>\n                </dependencies>\n                ",
        "Line" : 117,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "\n\t\t\t\t<groupId>org.jacoco</groupId>\n    \t\t\t<artifactId>jacoco</artifactId>\n    \t\t\t<version>0.7.2.201409121644</version>\n\t\t\t\t",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    }
  },
  "FileTypes" : {
    "MAVEN" : 76
  },
  "ElapsedTime" : 1611
}