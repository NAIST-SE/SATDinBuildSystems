{
  "Repository" : "10014152",
  "Revision" : "HEAD",
  "ObjectId" : "ccfe25689ead7c292bd5070a2977754a15b45b98",
  "CommitTime" : "2018-10-01T12:48:04Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "c1e92e47506b99bcbecdd592961e62c0825e1521",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Paths used during compilation.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install paths relative to DESTDIR.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Configuration of cpp code thirdparty dependencies.\n\n# If you edit the next five variables, make sure you also change them in cpp/CMakeLists.txt.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The two required objects libgtest.a and libgtest_main.a both depend\n\n# on the same target building the Google googletest library.\n\n# Therefore, this target is guarded by a checkfile which will be touched once it was executed.\n\n# This prevents the target from getting executed again as long as the checkfile does not change.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# mount -t xtreemfs will be recognized when binaries are present in /sbin/. Only applicable if the Fuse Client was built.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t@cp etc/xos/xtreemfs/*config.properties $(XTREEMFS_CONFIG_DIR)\n\n# delete UUID from config-files\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generating init.d scripts based on template.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This could also install a shared libxtreemfs\n\n# but for now it only installs the libjni-xtreemfs if it exists.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Client section.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tell CMake if it should skip building the jni library\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Do not use env variables to control the CMake behavior as stated in http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_get_or_set_environment_variables.3F\n\n# Instead define them via -D, so they will be cached.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Fix boost problems on centos 6 (see https://public.kitware.com/Bug/view.php?id=15270)\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Tell CMake if it should ignore a missing Fuse.\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Trigger building the experimental LD_PRELOAD library\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14,
      "Errorlog" : "line 108:16 token recognition error at: '\\W'\nline 108:20 token recognition error at: '\\W'\nline 108:23 token recognition error at: '\\w'\nline 109:16 token recognition error at: '\\W'\nline 109:20 token recognition error at: '\\W'\nline 109:23 token recognition error at: '\\w'\nline 110:16 token recognition error at: '\\W'\nline 110:20 token recognition error at: '\\W'\nline 110:23 token recognition error at: '\\w'\n"
    },
    "contrib/hadoop/pom.xml" : {
      "ObjectId" : "2b01afbcc9fde06fe5cedad7bea20f8b2d56f8bb",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Compile dependencies ",
        "Line" : 35,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : " Test dependencies ",
        "Line" : 38,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : " Plugin configurations ",
        "Line" : 41,
        "CharPositionInLine" : 35
      },
      "3" : {
        "Text" : " Depends on protobuf-java:2.4.0a which is not compatible ",
        "Line" : 64,
        "CharPositionInLine" : 71
      },
      "4" : {
        "Text" : " with what xtreemfs-* depends on (2.6.1), so exclude it. ",
        "Line" : 65,
        "CharPositionInLine" : 71
      },
      "5" : {
        "Text" : " Depends on protobuf-java:2.4.0a which is not compatible ",
        "Line" : 80,
        "CharPositionInLine" : 71
      },
      "6" : {
        "Text" : " with what xtreemfs-* depends on (2.6.1), so exclude it. ",
        "Line" : 81,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 7
    },
    "contrib/server-repl-plugin/pom.xml" : {
      "ObjectId" : "8d4e09e87fc47f53d1023c1776e1f0361ae06d29",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Plugin configurations. ",
        "Line" : 16,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 1
    },
    "cpp/CMakeLists.txt" : {
      "ObjectId" : "44cd74c0d0d5cc0822bc9385ea7b1367727b548e",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET (CMAKE_VERBOSE_MAKEFILE true)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used for everything, but the preload library (which struggles with implicitly\n\n# generated symbols suffixed with 64, e.g. open64)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Uncomment this to enable boost::asio debug output.\n\n#add_definitions(-DBOOST_ASIO_ENABLE_HANDLER_TRACKING)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set variables and required libraries.\n\n##########################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Windows uses Unicode internally, so we also use Unicode instead of the default multi-byte character set.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Require at least Windows XP.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# autolink for boost::asio does wrongfully require date_time and regex libraries.\n\n# See: http://www.boost.org/doc/libs/1_46_1/doc/html/boost_asio/using.html\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Set paths for required thirdparty libraries.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Windows requires for a Debug build also debug libraries from protobuf & co.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set required libraries.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# No libattr on Solaris.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Run cmake with -DBOOST_ROOT=<root path of local boost installation> on Windows, Solaris and MacOSX.\n\n# We link against the boost libraries found in BOOST_ROOT.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Update 8/12/2011: Setting macosx-version-min does break mount.xtreemfs for unknown reasons - so disabled for now.\n\n# Tell gcc to compile 10.4 compatible files (does not work otherwise on older Macs).\n\n#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.4\")\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "## Find CbFS\n\n#  CBFS_ROOT        - Input variable: Set to\n\n#  CBFS_FOUND       - Output variable: CBFS was found.\n\n#  CBFS_INCLUDE_DIR - Output variable: Directory which contains the CbFS.h file.\n\n#  CBFS_LIBRARIES   - Output variable: Will be set to CbFS.lib location.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Set required thirdparty libraries.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Boost\n\n#set(Boost_DEBUG ON)\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Finding the boost libraries may fail. If existing, we point FIND_PACKAGE to /usr/lib64.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Initial find boost only to retrieve the version number.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Unset the Boost_FOUND variable because the result of the second find will be checked.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Actual find boost including all required libraries.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# OpenSSL find_package script cannot cope with /usr/lib64 directory under Cmake 2.8.3.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Comment this definition if the XtreemFS source should not depend on OpenSSL.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check if this is a 64 Bit system\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#message(STATUS \"checking for library: ${LIB}\")\n\n# For unknown reasons, setting \"FIND_LIBRARY_USE_LIB64_PATHS\" does not fix the issue that libraries in /usr/lib64/ are not found under openSuse.\n\n# Therefore we just specify a list of possible library directories.\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#else()\n\n#  message(STATUS \"Result of find_library: ${FOUND${LIB}}\")\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Define building of binaries.\n\n##########################################\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Ignore SWIG generated files\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# set_property(TARGET xtreemfs PROPERTY COMPILE_FLAGS \"-fPIC\")\n\n# WARNING: The resulting static libxtreemfs does NOT contain the required static library protobuf.\n\n#          If you want to use a static libxtreemfs, you have to use a CMake file like this which does automatically add the static libxtreemfs and libprotobuf to the executable.\n\n#          An alternative would be to change this file in such a way that the static libxtreemfs and libprotobuf are merged together into a static libxtreemfs.\n\n#          But this would require additional CMake macros as presented here: http://www.mail-archive.com/cmake@cmake.org/msg28670.html\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#skip\n",
        "Line" : 322,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "#skip\n",
        "Line" : 324,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "#SET(BUILD_PRELOAD TRUE)\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# The LD_PRELOAD dynamic library\n",
        "Line" : 338,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# The JNI library has to be a shared objects and requires to build the sources\n\n# itself or could use objects built with PIC.\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# JNI will look for a library whose name is platform dependent, namely\n\n#   MacOS  : libLIBRARY.jnilib\n\n#   Windows: LIBRARY.dll\n\n#   Linux  : libLIBRARY.so\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# include(${SWIG_USE_FILE})\n\n# Use modified UseSWIG.cmake\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Workaround to pass -D defines to SWIG -> fixed in modified UseSWIG.cmake\n\n# set(CMAKE_SWIG_FLAGS \"$(CXX_DEFINES)\")\n",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# swig_add_module(${JNI_LIB_NAME} java \"include/swig/xtreemfs.i\" ${SRCS_LIBXTREEMFS})\n",
        "Line" : 397,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# This assumes, that only one file is created. This is currently true for\n\n# the xtreemfs.i and the UseSWIG macros, but could fail with future versions\n",
        "Line" : 400,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Add a file target which invokes swig when used as a source\n\n# The JNI_GEN_C_FILE will be used by the jni library and thus the generated\n\n# files are copied in time to the correct path.\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "################################################################################\n\n# Define building of unittests.\n\n################################################################################\n\n#\n\n# Unit tests are only compiled if the CMake variable BUILD_CLIENT_TESTS is set\n\n# (passed by the top level Makefile if the environment variable\n\n#  BUILD_CLIENT_TESTS is set).\n\n#\n\n# The directory structure under test/ is identical to the one under src/ and\n\n# include/.\n\n# Since some components are not available on all plattforms, some variables\n\n# are inspected for each component before the component's unit tests are\n\n# compiled.\n\n# A component here is given by the name of the directory below test/ i.e.,\n\n# the component for the file test/fuse/fuse_options_test.cpp is \"fuse\".\n\n#\n\n# The following variables are inspected for each component:\n\n# UNITTESTS_SKIP_${COMPONENT} - set if component unit tests must not be compiled\n\n# UNITTESTS_REQUIRED_SOURCES_${COMPONENT}   - list of source files which have to\n\n#                                             be compiled for the unit test\n\n# UNITTESTS_REQUIRED_LIBRARIES_${COMPONENT} - list of libraries which have to be\n\n#                                             linked to the unit test.\n\n################################################################################\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# enable_testing() will provide a target \"test\".\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 41
    },
    "cpp/cmake/FindValgrind.cmake" : {
      "ObjectId" : "cc21cb6d2f330bcfca580341d2076eba424917a0",
      "LastModified" : "2014-12-18T16:47:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/cmake/UseSWIG.cmake" : {
      "ObjectId" : "1e4bb1d1d48b6119cae429b2227a9da343b34939",
      "LastModified" : "2015-08-10T10:26:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - SWIG module for CMake\n\n# Defines the following macros:\n\n#   SWIG_ADD_MODULE(name language [ files ])\n\n#     - Define swig module with given name and specified language\n\n#   SWIG_LINK_LIBRARIES(name [ libraries ])\n\n#     - Link libraries to swig module\n\n# All other macros are for internal use only.\n\n# To get the actual name of the swig module,\n\n# use: ${SWIG_MODULE_${name}_REAL_NAME}.\n\n# Set Source files properties such as CPLUSPLUS and SWIG_FLAGS to specify\n\n# special behavior of SWIG. Also global CMAKE_SWIG_FLAGS can be used to add\n\n# special flags to all swig calls.\n\n# Another special variable is CMAKE_SWIG_OUTDIR, it allows one to specify\n\n# where to write all the swig generated module (swig -outdir option)\n\n# The name-specific variable SWIG_MODULE_<name>_EXTRA_DEPS may be used\n\n# to specify extra dependencies for the generated modules.\n\n# If the source file generated by swig need some special flag you can use\n\n# set_source_files_properties( ${swig_generated_file_fullname}\n\n#        PROPERTIES COMPILE_FLAGS \"-bla\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n# Copyright 2009 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# For given swig module initialize variables associated with it\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# when swig is used without the -interface it will produce in the module.py\n\n# a 'import _modulename' statement, which implies having a corresponding\n\n# _modulename.so (*NIX), _modulename.pyd (Win32).\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# For a given language, input file, and output file, determine extra files that\n\n# will be generated. This is internal swig macro.\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Take swig (*.i) file and add proper custom commands for it\n\n#\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If CMAKE_SWIG_OUTDIR was specified then pass it to -outdir\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# add the language into the name of the file (i.e. TCL_wrap)\n\n# this allows for the same .i file to be wrapped into different languages\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#message(\"Full path to source file: ${swig_source_file_fullname}\")\n\n#message(\"Full path to the output file: ${swig_generated_file_fullname}\")\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# default is c, so add c++ flag if it is c++\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Let's create the ${swig_outdir} at execution time, in case dir contains $(OutDir)\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Ensure the directory containing the generated file exists\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#\n\n# Create Swig module\n\n#\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# In java you want:\n\n#      System.loadLibrary(\"LIBRARY\");\n\n# then JNI will look for a library whose name is platform dependent, namely\n\n#   MacOS  : libLIBRARY.jnilib\n\n#   Windows: LIBRARY.dll\n\n#   Linux  : libLIBRARY.so\n",
        "Line" : 231,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# this is only needed for the python case where a _modulename.so is generated\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Python extension modules on Windows must have the extension \".pyd\"\n\n# instead of \".dll\" as of Python 2.5.  Older python versions do support\n\n# this suffix.\n\n# http://docs.python.org/whatsnew/ports.html#SECTION0001510000000000000000\n\n# <quote>\n\n# Windows: .dll is no longer supported as a filename extension for extension modules.\n\n# .pyd is now the only filename extension that will be searched for.\n\n# </quote>\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#\n\n# Like TARGET_LINK_LIBRARIES but for swig modules\n\n#\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cpp/thirdparty/gtest-1.7.0/CMakeLists.txt" : {
      "ObjectId" : "57470c84f3af0772c411bbb8bbbb41b515747ecd",
      "LastModified" : "2015-08-10T10:26:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cpp/thirdparty/gtest-1.7.0/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2015-08-10T10:26:25Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cpp/thirdparty/gtest-1.7.0/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2015-08-10T10:26:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "cpp/thirdparty/gtest-1.7.0/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2015-08-10T10:26:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cpp/thirdparty/gtest-1.7.0/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2015-08-10T10:26:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cpp/thirdparty/protobuf-2.6.1/Makefile.am" : {
      "ObjectId" : "24e5e55cb811fd8b63bac831de154e411600c61c",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always include gtest in distributions.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build gtest before we build protobuf tests.  We don't add gtest to SUBDIRS\n\n# because then \"make check\" would also build and run all of gtest's own tests,\n\n# which takes a lot of time and is generally not useful to us.  Also, we don't\n\n# want \"make install\" to recurse into gtest since we don't want to overwrite\n\n# the installed version of gtest if there is one.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We would like to clean gtest when \"make clean\" is invoked.  But we have to\n\n# be careful because clean-local is also invoked during \"make distclean\", but\n\n# \"make distclean\" already recurses into gtest because it's listed among the\n\n# DIST_SUBDIRS.  distclean will delete gtest/Makefile, so if we then try to\n\n# cd to the directory again and \"make clean\" it will fail.  So, check that the\n\n# Makefile exists before recursing.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Deletes all the files generated by autogen.sh.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cpp/thirdparty/protobuf-2.6.1/examples/Makefile" : {
      "ObjectId" : "8dc90836f896aa1abef9c0038907994c179eb668",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# See README.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 25,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 29,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 3
    },
    "cpp/thirdparty/protobuf-2.6.1/gtest/CMakeLists.txt" : {
      "ObjectId" : "64527f74c353c94c1687cd75d5a2d5402b291486",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dbuild_gtest_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cpp/thirdparty/protobuf-2.6.1/gtest/Makefile.am" : {
      "ObjectId" : "788c475f6ff8890b606e4de165c76f0d115dde5f",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cpp/thirdparty/protobuf-2.6.1/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "cpp/thirdparty/protobuf-2.6.1/gtest/make/Makefile" : {
      "ObjectId" : "5b27b6a2cbb13e380ee75d186f553bfb5fa144b5",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cpp/thirdparty/protobuf-2.6.1/gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cpp/thirdparty/protobuf-2.6.1/java/pom.xml" : {
      "ObjectId" : "2e68b0ee85a123de11487aaf3f4a6c909051ce10",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "cpp/thirdparty/protobuf-2.6.1/src/Makefile.am" : {
      "ObjectId" : "2a11695a04a0af66009ae70f3d6b3226c6a5616b",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These are good warnings to turn on by default\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If I say \"dist_include_DATA\", automake complains that $(includedir) is not\n\n# a \"legitimate\" directory for DATA.  Screw you, automake.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Not sure why these don't get cleaned automatically.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Disable optimization for tests unless the user explicitly asked for it,\n\n# since test_util.cc takes forever to compile with optimization (with GCC).\n\n# See configure.ac for more info.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Run cpp_unittest again with PROTOBUF_TEST_NO_DESCRIPTORS defined.\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build lite_unittest separately, since it doesn't use gtest.\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Test plugin binary.\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "interface/pom.xml" : {
      "ObjectId" : "d00688b5a1aa009aee8d65294d7623791c744df4",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Plugin configurations. ",
        "Line" : 10,
        "CharPositionInLine" : 36
      },
      "1" : {
        "Text" : " Provide alternative protoc location if on Windows ",
        "Line" : 30,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : " Create Windows-specific plugin for protoc. ",
        "Line" : 38,
        "CharPositionInLine" : 60
      },
      "3" : {
        "Text" : " Create plugin for protoc. ",
        "Line" : 81,
        "CharPositionInLine" : 41
      },
      "4" : {
        "Text" : " ${maven.dependency.groupId.artifactId.jar.path} is only available in maven-antrun-plugin ",
        "Line" : 96,
        "CharPositionInLine" : 114
      },
      "5" : {
        "Text" : " Invoke protoc to generate CPP sources. ",
        "Line" : 112,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : " Invoke protoc again, this time with our plugin to generate custom classes. ",
        "Line" : 175,
        "CharPositionInLine" : 94
      },
      "7" : {
        "Text" : " Clean up generated code during mvn clean. ",
        "Line" : 222,
        "CharPositionInLine" : 57
      },
      "CommentCount" : 8
    },
    "java/pom.xml" : {
      "ObjectId" : "1dcec276f1936af4876f7eeeca598ffdedf238d5",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Relative to 1st level childrens' basedirs ",
        "Line" : 40,
        "CharPositionInLine" : 55
      },
      "1" : {
        "Text" : " Compile dependencies ",
        "Line" : 43,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : " Test dependencies ",
        "Line" : 49,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : " Plugin configurations ",
        "Line" : 52,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : " Relative to 1st level childrens basedirs ",
        "Line" : 63,
        "CharPositionInLine" : 54
      },
      "5" : {
        "Text" : " Provide alternative protoc location if on Windows ",
        "Line" : 70,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 6
    },
    "java/xtreemfs-flease/pom.xml" : {
      "ObjectId" : "510d3182388db57ed705064be88c6d0986b65431",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/xtreemfs-foundation/pom.xml" : {
      "ObjectId" : "9fab93b9ec8664feb47caffdceaf5c1c9d719029",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Create plugin for protoc. ",
        "Line" : 46,
        "CharPositionInLine" : 41
      },
      "1" : {
        "Text" : " ${maven.dependency.groupId.artifactId.jar.path} is only available in maven-antrun-plugin ",
        "Line" : 60,
        "CharPositionInLine" : 114
      },
      "2" : {
        "Text" : " Invoke protoc to generate Java source. ",
        "Line" : 75,
        "CharPositionInLine" : 58
      },
      "3" : {
        "Text" : " Invoke protoc again, this time with our plugin to generate custom classes. ",
        "Line" : 96,
        "CharPositionInLine" : 94
      },
      "4" : {
        "Text" : " Clean up generated code during mvn clean. ",
        "Line" : 120,
        "CharPositionInLine" : 57
      },
      "CommentCount" : 5
    },
    "java/xtreemfs-pbrpcgen/pom.xml" : {
      "ObjectId" : "4c9ab72fce920b815696e84b9ebc70af9b488670",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Invoke protoc to generate Java source. ",
        "Line" : 27,
        "CharPositionInLine" : 54
      },
      "1" : {
        "Text" : " Clean up generated code during mvn clean. ",
        "Line" : 52,
        "CharPositionInLine" : 57
      },
      "CommentCount" : 2
    },
    "java/xtreemfs-servers/pom.xml" : {
      "ObjectId" : "a62e31be8e5b3fee6ee5d27d43917abb82274f36",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Generate MIB code. ",
        "Line" : 70,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : " Create plugin for protoc. ",
        "Line" : 100,
        "CharPositionInLine" : 45
      },
      "2" : {
        "Text" : " ${maven.dependency.groupId.artifactId.jar.path} is only available in maven-antrun-plugin ",
        "Line" : 111,
        "CharPositionInLine" : 114
      },
      "3" : {
        "Text" : " Invoke protoc to generate Java source. ",
        "Line" : 126,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : " Invoke protoc again, this time with our plugin to generate custom classes. ",
        "Line" : 150,
        "CharPositionInLine" : 94
      },
      "5" : {
        "Text" : " Clean up generated code during mvn clean. ",
        "Line" : 177,
        "CharPositionInLine" : 57
      },
      "CommentCount" : 6
    },
    "tests/test_scripts/pjd-fstest-20090130-RC_XtreemFS/Makefile" : {
      "ObjectId" : "4a0f5cda8f2ad35209aafb946e59da3381c8fc8d",
      "LastModified" : "2018-03-22T21:52:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $FreeBSD: src/tools/regression/fstest/Makefile,v 1.1 2007/01/17 01:42:07 pjd Exp $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CFLAGS+=-DHAS_LCHMOD\n\n#CFLAGS+=-DHAS_CHFLAGS\n\n#CFLAGS+=-DHAS_LCHFLAGS\n\n#CFLAGS+=-DHAS_TRUNCATE64\n\n#CFLAGS+=-DHAS_STAT64\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 7,
    "MAKEFILE" : 7,
    "AUTOMAKE" : 4,
    "MAVEN" : 9
  },
  "ElapsedTime" : 10805
}