{
  "Repository" : "1639397",
  "Revision" : "HEAD",
  "ObjectId" : "9e7a18f8cd0f07ea624a95c0818844353d2d59af",
  "CommitTime" : "2019-03-28T21:20:27Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "cca7be2624c6e780f4aa389030d0b0e86f169b35",
      "LastModified" : "2013-05-13T21:25:47Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This file is part of fusedav.\n\n#\n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License\n\n# as published by the Free Software Foundation; either version 2\n\n# of the License, or (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Makefile.am" : {
      "ObjectId" : "74761abd52560e655c92a1368126928c9aad4ddc",
      "LastModified" : "2016-05-13T17:36:30Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This file is part of fusedav.\n\n#\n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License\n\n# as published by the Free Software Foundation; either version 2\n\n# of the License, or (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/Makefile" : {
      "ObjectId" : "a0087eeecfaf8f022218d32526cacdd11379f78f",
      "LastModified" : "2018-01-29T20:28:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# usage on Makefile line: 'cltest-flags=-i64'\n\n# -i is iters; default is 64\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# usage on Makefile line: 'urlencode-flags=-i64'\n\n# -i is iters; default is 1\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# usage on Makefile line: 'statcacheprune-flags=-d2 -f64 -tdflt'\n\n# default for -d is 2; max allowed is 4; for -f it's 64\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# statcacheprune takes a flag -t<tag>. This will tag files with\n\n# tag. This is useful for multi-binding tests, so that each\n\n# binding can write different files from the others but in the\n\n# same directories to cause stress and see how the system handles it.\n\n# I used this to trigger \"Too Many Events\" exception\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is a regression test. In the past, if run on cltest files after statcacheprune\n\n# was run, du would return 0. So as a quasy-test of the issue is to run dutest right\n\n# after statcacheprune. However, there are two fixes to fix this problem, so it's\n\n# not really sure which one this one is.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# -v for verbose\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create a lot of files in a lot of directories\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -v for verbose\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Remove a lot of files in a lot of directories\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# -v for verbose\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Write some files, delete some of them, check for correct positive/negative entries\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# -v for verbose\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# NB: no PASS/FAIL notification yet from iozone, still requires eyeballs\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# -g: start with files of this size (by default 64K)\n\n# -n: stop with files of this size (default: don't know, we never succeed past 128M)\n\n# For unit testing, just do the 4M size; it's generally small enough to finish quickly\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# iozone fails on large files; it sometimes succeeds at 128M, but set to 64M\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# for continual testing, limit iozone to 16M\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# So far, the only flag is -v for verbose, 'readrecursive-flags=-v'\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If we unlink an open file, make sure we can close it\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# flag -v for verbose\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# flag -v for verbose, -f# for number of files, -u are we doing unlinks 'readwhatwaswritten-flags=-v -u -f16'\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# flag -v for verbose, -f# for number of files 'continualwrites-flags=-v -w -f16'\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# flag -v for verbose 'rename-flags=-v'\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# flag -v for verbose, -f# for number of files 'one-open-many-writes=-v -w -f16'\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# currently there are no flags\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# -v for verbose, -r# for number of rounds, -f# for number of files, -s# for size of write, -i# for\n\n# number of write iters 'trunc-flags=-v -r 8 -f 8 -s 32 -i 16'\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# -v for verbose, -n# for number of rounds\n\n# number of iters 'pfbackoff-flags=-v -n 8'\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# -v for verbose, -i# for number of write iters'saintmode-haproxy-flags=-v -i 16'\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# -v for verbose, -i# for number of write iters'saintmode-nginx-flags=-v -i 16'\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# -v for verbose, -i# for number of write iters'saintmode-writes-nginx-flags=-v -i 16'\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# -v for verbose, -i# for number of write iters'trunc-flags=-v -i 16'\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# to run this test by invoking the Makefile, add binding=<binding id> to the make line\n\n# make -f /opt/fusedav/tests/Makefile binding=1b8e45be7c264476bbbc6f65610b3490 run-timestamptest\n\n# otherwise the test will exit prematurely\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# you must be in a binding's file directory to run this test.\n\n# you must have at leasst 2 bindings in this environment\n\n# you must give the binding id of the second binding\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# usage on Makefile line: 'timestamptest-flags=-i64 -b <other binding>'\n\n# -i is iters; default is 64\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# -v for verbose, 'perfanalysis-write-flags=-v'\n\n# -i iters 'perfanalysis-write-flags=-i 8'\n\n# -t start_time 'perfanalysis-write-flags=-t <unix epoch>'\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# -v for verbose, 'perfanalysis-read-flags=-v'\n\n# -i iters 'perfanalysis-read-flags=-i 8'\n\n# -t start_time 'perfanalysis-read-flags=-t <unix epoch>'\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# -v for verbose, 'forensic-haven-cleanup-flags=-v'\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# S\n\n#\n\n# restrict unit tests to low-resource tests\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# stress test is all test, but run the stress version if there is both a unit and a stress version. e.g. iozone\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# simple stress test; don't run the 'saintmode' tests since they assume a unified development environment for creating error conditions which don't generally occur in production environments.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# I'm having difficulties running some tests in <bid dir>/files, and some just in <bid dir>. Separate these and\n\n# handle on the command line. If someone can figure out the issues switching over file system boundaries,\n\n# please make this better. For now, I run, from <bid dir>:\n\n# make -f /root/pantheon/fusedav/tests/Makefile run-nonfiles-tests; (cd files; make -f /root/pantheon/fusedav/tests/Makefile)\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# stress test is all test, but run the stress version if there is both a unit and a stress version. e.g. iozone\n\n# unlink test is creating increasing numbers of open files which never get closed. Remove for now.\n\n# run-continual-tests: run-cltest run-urlencode run-statcacheprune run-writefiles-create run-readrecursive run-writefiles-remove run-readwhatwaswritten-stress run-readwhatwaswritten-unlink-stress run-trunc run-iozone-continual\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# short stress test is all tests but iozone, but run the stress version if there is both a unit and a stress version. e.g. iozone\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# run this to test the system under error. To do this:\n\n# use the fusedav client inject error mechanism. Use the writewrite_test \n\n# in util.c.\n\n# Also, independently, test error response by:\n\n# sftp a file which is too large for the file server (> 256M)\n\n# do this without error injection running\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# run this test in conjunction with filecache_forensic_haven_test in\n\n# util.c while injecting errors (make INJECT_ERRORS=1)\n\n# Run overnight or so; if there are no catastrophic failures (e.g. segv)\n\n# consider it a pass.\n\n# NB: this test needs to create an errors file in <...>/files directory\n\n# but often fails because we are injecting errors. It may need to be\n\n# started several times before it actually takes. If the errors file\n\n# cannot be created, the program exits.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Seems .PHONY is needed for this one; not sure why\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 45
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1,
    "AUTOMAKE" : 2
  },
  "ElapsedTime" : 1410
}