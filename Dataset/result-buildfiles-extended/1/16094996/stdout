{
  "Repository" : "16094996",
  "Revision" : "HEAD",
  "ObjectId" : "e5a1116adb60d4fa47439b74094e5df83f6dee7c",
  "CommitTime" : "2019-03-08T17:50:23Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c1b0061ce8dc916c10b6801ad61d69906c605cb2",
      "LastModified" : "2018-11-13T15:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DYNET uses Eigen which exploits modern CPU architectures. To get the\n\n# best possible performance, the following are recommended:\n\n#   1. use very recent versions of gcc or Clang to build\n\n#   2. use very recent versions of Eigen (ideally the dev version)\n\n#   3. try compiler options like -march=native or other architecture\n\n#      flags (the compiler does not always make the best configuration\n\n#      decisions without help)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: This seems to be causing problems with linking before using\n\n#       make install. It is allegedly preferred, but probably doesn't\n\n#       suit our model of not installing the library most of the time.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#OSX\n",
        "Line" : 25,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "#Windows\n\n#Linux\n\n#OSX\n",
        "Line" : 29,
        "CharPositionInLine" : 86
      },
      "4" : {
        "Text" : "# Keeping this for python build\n",
        "Line" : 43,
        "CharPositionInLine" : 80
      },
      "5" : {
        "Text" : "######## Cross-compiler, cross-platform options\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use env variable if not defined\n",
        "Line" : 56,
        "CharPositionInLine" : 55
      },
      "7" : {
        "Text" : "# sets include/lib directories and sets ${LIBS} needed for linking\n",
        "Line" : 59,
        "CharPositionInLine" : 14
      },
      "8" : {
        "Text" : "# There are about 30 files compiled for GPU. We merge them into less\n\n# for faster compilation. Set to 0 to mean no merging, or k to merge into k files. \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MSVC does serial compilation of CUDA, so minimize overhead\n",
        "Line" : 67,
        "CharPositionInLine" : 26
      },
      "10" : {
        "Text" : "# Should probably be set to number of jobs in parallel make\n",
        "Line" : 69,
        "CharPositionInLine" : 26
      },
      "11" : {
        "Text" : "######## Platform-specific options\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Disable min/max macros in windef.h\n",
        "Line" : 76,
        "CharPositionInLine" : 57
      },
      "13" : {
        "Text" : "######## Compiler-specific options\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# -Wall produces 20k warnings. Enable parallel compilation\n",
        "Line" : 81,
        "CharPositionInLine" : 54
      },
      "15" : {
        "Text" : "# use env variable if not defined\n",
        "Line" : 98,
        "CharPositionInLine" : 59
      },
      "16" : {
        "Text" : "# use env variable if not defined\n",
        "Line" : 100,
        "CharPositionInLine" : 69
      },
      "17" : {
        "Text" : "#  set(CUDNN_ROOT /usr/local/cuda CACHE PATH \"CUDNN root path\")\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# look for Boost\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#list(APPEND CUDA_LIBRARIES /usr/lib64/libpthread.so)\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# look for Eigen\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# use env variable if not set\n",
        "Line" : 180,
        "CharPositionInLine" : 72
      },
      "CommentCount" : 22
    },
    "cmake/FindDyNet.cmake" : {
      "ObjectId" : "8a48bc10de00941ee445f0c7d90a80000288ffc6",
      "LastModified" : "2016-10-07T21:39:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindEigen3.cmake" : {
      "ObjectId" : "cea1afeabcbfafc37886fc647f13e73a10466c44",
      "LastModified" : "2016-10-07T21:39:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n\n#\n\n# This module reads hints about search locations from \n\n# the following enviroment variables:\n\n#\n\n# EIGEN3_ROOT\n\n# EIGEN3_ROOT_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "config.h.cmake" : {
      "ObjectId" : "3b73020b2c4bd92728a7d1547b5b10608cb99587",
      "LastModified" : "2016-10-07T21:39:04Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "contrib/c/CMakeLists.txt" : {
      "ObjectId" : "333c8606771242844a73979a9bebcfe0f5665864",
      "LastModified" : "2018-06-03T06:50:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/c/dynet_c/CMakeLists.txt" : {
      "ObjectId" : "11360c26f640d094d93f44f85d14f34f42a59cf3",
      "LastModified" : "2018-11-13T15:01:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/c/test/CMakeLists.txt" : {
      "ObjectId" : "aa07e43c9e8dc8629ad26abd7280e7846869f717",
      "LastModified" : "2018-11-13T15:01:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/swig/CMakeLists.txt" : {
      "ObjectId" : "b564318c9d6156303251d090222059faeb3c3516",
      "LastModified" : "2018-06-03T06:50:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find required dependencies\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include dynet C++ sources\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set java output dir\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the exact scala version used for compilation\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the binary compatibility, e.g. 2.11 or 2.12\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set java package (+cuda flag, if appropriate)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Run swig\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add C++ compiler flags\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Link with dynet library\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create jar file\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# \"${CMAKE_SWIG_OUTDIR}/EGTrainer.java\"\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# \"${CMAKE_SWIG_OUTDIR}/ParameterInitSaxe.java\" (I AM NOT ACTUALLY IMPLEMENTED IN DYNET)\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add dynamic library files into the Jar\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TODO(joelgrus): This is probably not defensive or robust enough.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# make doesn't know about the dynet_scala jar, so it doesn't clean it unless we tell it about it\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Find sbt\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Run sbt assembly\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "doc/Makefile" : {
      "ObjectId" : "e0d42bc90f462b6ec67b279b307154af245fb448",
      "LastModified" : "2018-06-03T06:50:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "dynet/CMakeLists.txt" : {
      "ObjectId" : "cb3fab7e2964ca6a5ac0008c66af67eeb3ac5b7d",
      "LastModified" : "2018-11-13T15:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ########## dynet library ##########\n\n# Sources:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Headers:\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#foreach(test_src ${TEST_SRCS})\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Extract the filename without an extension (NAME_WE)\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#  get_filename_component(testName ${test_src} NAME_WE)\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Add compile target\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#  add_executable(${testName} ${test_src})\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#link to Boost libraries AND your targets and dependencies\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#  target_link_libraries(${testName} dynet ${LIBS})\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  set_target_properties(${testName} PROPERTIES\n\n#      RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests.bin)\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Finally add it to test execution -\n\n#Notice the WORKING_DIRECTORY and COMMAND\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#  add_test(NAME ${testName}\n\n#     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests.bin\n\n#     COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/tests.bin/${testName} )\n\n#endforeach(test_src)\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# merge into k merge files\n",
        "Line" : 245,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# This is the first line of this merge file\n\n# Start with an empty file\n",
        "Line" : 250,
        "CharPositionInLine" : 41
      },
      "14" : {
        "Text" : "# cuda flags\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# gcc 4.9 or later versions raise SEGV due to the optimization problem.\n\n# Use -O1 instead for now.\n",
        "Line" : 272,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# If MSVC, we need the boost flag because nvcc doesn't properly parse part of the boost template definitions\n",
        "Line" : 282,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Build cpu library\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# target_compile_features(dynet PRIVATE cxx_range_for)\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "d917ebe324365b62cb7c57264dabbb677e77d7b1",
      "LastModified" : "2018-06-03T06:50:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is commented out because it was out of date and needs to be updated to work with recent DyNet\n\n# ADD_EXAMPLE(segmental-rnn segrnn-sup)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is commented out because it was out of date and needs to be updated to work with recent DyNet\n\n# ADD_EXAMPLE(textcat textcat)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "e27bc4084c86e8144e7168c95417739fa1cad1d7",
      "LastModified" : "2018-06-03T06:50:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We use the Cython library directly within Python, make sure it is installed\n\n# and meets the minimum version required.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Verify Cython is installed with the given minimum version\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Things to copy the files\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Collect all of the library filenames and paths for setup.py\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# TODO: We should add a dependency, but this isn't working\n\n# add_dependencies(pydynet_precopy ${DepFiles})\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Export environment variables for setup.py\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "ab05cff3745f72879c563ef96408b5856ff177b5",
      "LastModified" : "2018-11-13T15:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use env variable as preprocessor macro\n",
        "Line" : 8,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 1
    },
    "tutorial/CMakeLists.txt" : {
      "ObjectId" : "f142913bd0fb039ebf05753eb8969b563c07ce64",
      "LastModified" : "2018-06-03T06:50:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 12,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2207
}