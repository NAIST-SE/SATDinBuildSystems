{
  "Repository" : "53938",
  "Revision" : "HEAD",
  "ObjectId" : "76fd97374ab3b703a9839f39edde50f9d19f91f2",
  "CommitTime" : "2019-04-18T17:55:42Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "29d4bab4228f763c2f26d18d6a26750087a43510",
      "LastModified" : "2019-02-07T19:19:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------\n\n# ET: Legacy, http://www.etlegacy.com\n\n# - Wolfenstein: Enemy Territory 2.60b compatible client/server\n\n# - based on raedwulf-et: https://bitbucket.org/tcmreastwood/raedwulf-et\n\n#\n\n# Please use TABs to indent! (x4)\n\n#------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need to add the macros & Functions before any other includes\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Options\n\n#-----------------------------------------------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# no support for 32 bit binaries on OpenBSD/amd64\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Optional features\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Setup\n\n#-----------------------------------------------------------------\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Group the VisualStudio projects\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Find and setup programs the build needs\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Setup some basic helper variables\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Platform specific compiler settings\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Source globs\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Git version header generation\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Use bundled libraries\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set up includes and libraries based on feature options\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Group the sources (only msvc and xcode now)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Build\n\n#-----------------------------------------------------------------\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#Since CMake 3.6 you are able to set the Visual Studio startup project\n",
        "Line" : 137,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Post build\n\n#-----------------------------------------------------------------\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Install third-party add-ons\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Generate install and uninstall packs\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Packaging support\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/ETLBuildClient.cmake" : {
      "ObjectId" : "aab81de3aee28223d18c5bf23f42d2eccaa56fe1",
      "LastModified" : "2016-09-27T16:56:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Build Client\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These are vars used in the misc/Info.plist template file\n\n# See set_target_properties( ... MACOSX_BUNDLE_INFO_PLIST ...)\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Specify files to be copied into the .app's Resources folder\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Create the .app bundle\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Has to go after cURL and SDL\n",
        "Line" : 65,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 5
    },
    "cmake/ETLBuildMod.cmake" : {
      "ObjectId" : "593ac7fdc41a50fa627141b4fa7fe851f7ae7d9d",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Build mod\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# cgame\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# qagame\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# BUNDLED_SQLITE3\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#\n\n# ui\n\n#\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install bins of cgame, ui and qgame\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# etl_bin.pk3\n\n#\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/ETLBuildPack.cmake" : {
      "ObjectId" : "a886b327b8cf2ab6e16f62fafe2b2d0fb2463f34",
      "LastModified" : "2017-07-03T13:15:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Build Pack\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# pak3.pk3\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ETLBuildRenderer.cmake" : {
      "ObjectId" : "a71a09dd70a6d4ec0440802319a5a8f1e7710399",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Build Renderer\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install the dynamic lib only\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#GET_FILENAME_COMPONENT(SHAD_NAME ${SHAD} NAME_WE)\n",
        "Line" : 86,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#This is where we generate the fallback shaders source file.\n",
        "Line" : 102,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# This is a fake output so we can force the process to run every time\n",
        "Line" : 105,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 5
    },
    "cmake/ETLBuildServer.cmake" : {
      "ObjectId" : "2ff5b7987688b97a4d0f253fc3b0b768222b8e6a",
      "LastModified" : "2016-09-27T16:56:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Build Server\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ETLBundledLibs.cmake" : {
      "ObjectId" : "43c3dfa9a642e0051744b030e57dba1f5d5b4865",
      "LastModified" : "2016-09-27T16:56:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Bundled Libs\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if the libs submodule exists and add the directory\n\n# or error out the build\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_subdirectory(libs)\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/ETLCPack.cmake" : {
      "ObjectId" : "78c3301af046e7f0dec2d3e364b8408f8572a262",
      "LastModified" : "2016-09-27T16:56:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# CPack\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: move this to include(EtlegacyCPack)\n\n# CPack general configuration\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: expand\n",
        "Line" : 17,
        "CharPositionInLine" : 76
      },
      "3" : {
        "Text" : "#set(CPACK_RESOURCE_FILE_LICENSE       \"${CMAKE_SOURCE_DIR}/COPYING.txt\") # FIXME: breaks bundle generator\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: move above\n",
        "Line" : 37,
        "CharPositionInLine" : 68
      },
      "5" : {
        "Text" : "# CPack generator-specific configuration\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Has to be included after the package configuration!\n",
        "Line" : 54,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 7
    },
    "cmake/ETLCommon.cmake" : {
      "ObjectId" : "5310a783363abb6c9386c7534b0993be6a36d5a3",
      "LastModified" : "2016-09-27T16:56:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Common\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(CMAKE_BUILD_TYPE \"Debug\")\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# set LEGACY_DEBUG definition for debug build type\n\n# and set up properties to check if the build is visual studio or nmake on windows\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Figure out what build is it (cool eh?)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Installation options\n\n# If we are in windows clean these so the packaging is cleaner\n\n# these need to be set before any other processing happens!\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On OS X the base dir is the .app's (or etlded binary's) parent path, and is set in the etl code itself\n\n# so we do NOT want to define DEFAULT_BASEDIR at build time.\n",
        "Line" : 79,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/ETLFunctions.cmake" : {
      "ObjectId" : "3bb77f5cb07db34abffaf4730cb6ff736a691352",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# General macros & functios used by the build process\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cannot use ARGN directly with list() command.\n\n# Copy to a variable first.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Did we get any optional args?\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# message(STATUS \"Testing rule ${argument} for ${_DESC}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# message(STATUS \"${_DESC} failed\")\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# We use a function here as we dont wont to contaminate the parent context with variables\n\n# as you cannot send values outside a function without set(<variable> <value> PARENT_SCOPE)\n\n# Usage: LEG_DOWNLOAD( <MESSAGE> <FILE URL> <DL TARGET> <HASH - OR BOOLEAN> <EXTRACT WORKING PATH> <EXTRACT EXPECTED RESULT> )\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/ETLInstall.cmake" : {
      "ObjectId" : "d21f33b7012dc8fc1a31e0e2c1510df8d9e012eb",
      "LastModified" : "2018-10-05T10:45:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Install\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# description file - see FS_GetModList\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# misc/etmain/ adds\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# misc adds\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# other adds\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#install(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/misc/etl.ico\"\n\n#\tDESTINATION \"${INSTALL_DEFAULT_MODDIR}\"\n\n#)\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# project adds\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# copy required genuine files\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# personal data (owner only)\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Uninstall target\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/ETLInstallGeoIP.cmake" : {
      "ObjectId" : "87962828b55f3f73e43f67aa7018732128957332",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Install GeoIP\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set(ETLEGACY_GEOIP_ARCHIVE \"GeoIP.dat.gz\")\n\n# set(ETLEGACY_GEOIP_ARCHIVE_URL \"http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz\")\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ETLInstallOmniBot.cmake" : {
      "ObjectId" : "2c38ddb3ada8c6baaaff1ac1dca23089a0b2eae2",
      "LastModified" : "2018-12-19T17:44:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Install OmniBot\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: used archive (20MB) doesn't contain incomplete nav- and other unwanted files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#file(MAKE_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/legacy\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/ETLInstallWolfAdmin.cmake" : {
      "ObjectId" : "21ed20a6c9212fd3df54684a39a895ee0c1b3702",
      "LastModified" : "2019-01-04T21:35:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Install WolfAdmin\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ETLPlatform.cmake" : {
      "ObjectId" : "f7a874da2056fd9800c43f86baf98c82c9c3157c",
      "LastModified" : "2019-02-07T19:19:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Platform\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used to store real system processor when we overwrite CMAKE_SYSTEM_PROCESSOR for cross-compile builds\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# has to be set to \"\", otherwise CMake will pass -rdynamic resulting in a client crash\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# 32-bit build\n",
        "Line" : 14,
        "CharPositionInLine" : 41
      },
      "4" : {
        "Text" : "#the new cmake on windows will otherwise use arch name of x64 which will fuck up our naming\n",
        "Line" : 24,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "#this is redundant but just to  be safe\n",
        "Line" : 25,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "# FIXME: move this down to UNIX section?\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The ioapi requires this since OSX already uses 64 fileapi (there is no fseek64 etc)\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# optimization/debug flags\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# These flags will cause error with older Xcode\n",
        "Line" : 75,
        "CharPositionInLine" : 48
      },
      "10" : {
        "Text" : "# Must specify a target, otherwise it will require the OS version used at compile time.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# GCC 4+\n",
        "Line" : 97,
        "CharPositionInLine" : 25
      },
      "12" : {
        "Text" : "# Libraries for Win32 native and MinGW required by static SDL2 build\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Do not show CRT warnings\n",
        "Line" : 137,
        "CharPositionInLine" : 45
      },
      "14" : {
        "Text" : "# Get the system architecture\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#add_definitions(-DX265_ARCH_ARM=1 -DHAVE_ARMV7=1)\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/ETLPrograms.cmake" : {
      "ObjectId" : "c53624bd69e202335d527a08e40fea56c0c8a1b2",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Program\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check required executables\n\n# No programs required atm. keep this file just in case we need some in the future\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ETLSetupFeatures.cmake" : {
      "ObjectId" : "4b601ebdc90f309259b229ad890528cd07fdf832",
      "LastModified" : "2019-02-07T19:19:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Setup Features\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If we change architecture we need to force rescan of libraries\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: recheck optional libs\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Client features\n\n#-----------------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Dependency of GLEW and SDL_syswm.h\n",
        "Line" : 20,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "# FEATURE_RENDERER_GLES\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# specials for ARM - currently set for RPI raspdian/ubuntu mate\n\n# system sdl lib isn't latest & sndio lib is required\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# sdl2-dev\n",
        "Line" : 50,
        "CharPositionInLine" : 37
      },
      "8" : {
        "Text" : "# FindSDL doesn't detect 32bit lib when crosscompiling\n",
        "Line" : 54,
        "CharPositionInLine" : 37
      },
      "9" : {
        "Text" : "# BUNDLED_SDL\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# We append the mingw32 library to the client list since SDL2Main requires it\n",
        "Line" : 60,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# for tinygettext (always force SDL icons -> less dependancies)\n",
        "Line" : 71,
        "CharPositionInLine" : 29
      },
      "12" : {
        "Text" : "# Check for libjpeg-turbo v1.3\n",
        "Line" : 79,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# FIXME: function is checked, but HAVE_JPEG_MEM_SRC is empty. Why?\n",
        "Line" : 83,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# Check for libjpeg v8\n",
        "Line" : 90,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# FIXME: function is checked, but HAVE_JPEG_MEM_SRC is empty. Why?\n",
        "Line" : 94,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# BUNDLED_OGG_VORBIS\n",
        "Line" : 180,
        "CharPositionInLine" : 9
      },
      "17" : {
        "Text" : "# BUNDLED_THEORA\n",
        "Line" : 192,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# BUNDLED_CURL\n",
        "Line" : 217,
        "CharPositionInLine" : 9
      },
      "19" : {
        "Text" : "# BUNDLED_SQLITE3\n",
        "Line" : 254,
        "CharPositionInLine" : 9
      },
      "20" : {
        "Text" : "# FIXME: this is actually DEDICATED only\n",
        "Line" : 275,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Mod features\n\n#-----------------------------------------------------------------\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# BUNDLED_LUA\n",
        "Line" : 299,
        "CharPositionInLine" : 9
      },
      "23" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Server/Common features\n\n#-----------------------------------------------------------------\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Tells FindCurses that ncurses is required\n",
        "Line" : 353,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 25
    },
    "cmake/ETLSourceGroup.cmake" : {
      "ObjectId" : "cc8420078d15921b0f7052d0962baba03e8468c1",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Source Group (for Visual Studio and win32 definitions)\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the files based on their source path\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/ETLSources.cmake" : {
      "ObjectId" : "dd2228cee19083e6f71d2a6dbf3901746740edc5",
      "LastModified" : "2019-02-07T19:19:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Sources\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Platform specific code for server and client\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These files are shared with the CGAME from the UI library\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Library build requires the following\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/ETLVersion.cmake" : {
      "ObjectId" : "fc94e051c5bfb2ada8efd470acde48b330e88779",
      "LastModified" : "2019-02-07T19:19:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Version\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default values if they cannot be generated from git\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if its just numbers we escape out and just use that\n",
        "Line" : 36,
        "CharPositionInLine" : 35
      },
      "3" : {
        "Text" : "# Not using source from git repo\n",
        "Line" : 95,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# Yes this is a joke, for the systems running ancient cmake versions\n",
        "Line" : 111,
        "CharPositionInLine" : 49
      },
      "5" : {
        "Text" : "# Mod version\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is for NSIS\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# git_version.h\n",
        "Line" : 120,
        "CharPositionInLine" : 57
      },
      "CommentCount" : 8
    },
    "cmake/FindGLES.cmake" : {
      "ObjectId" : "f34f2cd0e8302f9b73c52274b1ae6c46dc495914",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find GLES library and include path.\n\n# Once done this will define\n\n#\n\n# GLES_FOUND\n\n# GLES_INCLUDE_PATH\n\n# GLES_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindGLEW.cmake" : {
      "ObjectId" : "ccf4aa6df35f08fa37dd0911c0355085c724386e",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find GLEW\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GLEW_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindJPEGTURBO.cmake" : {
      "ObjectId" : "b6ea0793897539700ec767ed162dc412d3a553ed",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libjpeg-turbo\n\n# Find the native libjpeg-turbo includes and library\n\n# This module defines\n\n#  JPEG_INCLUDE_DIR, where to find the libjpeg-turbo include directories.\n\n#  JPEG_LIBRARIES, the libraries needed to use libjpeg-turbo.\n\n#  JPEGTURBO_FOUND, If false, do not try to use libjpeg-turbo.\n\n# also defined, but not for general use are\n\n#  JPEG_LIBRARY, where to find the libjpeg-turbo library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine libjpeg-turbo version\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JPEGTURBO_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindLua.cmake" : {
      "ObjectId" : "c09054c98693b61379d52dea5e2133d2390d040e",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_EXECUTABLE, if found\n\n#  LUA_FOUND, if false, do not try to link to Lua\n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Modified to support Lua 5.2 by LuaDist 2012\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# The required version of Lua can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Lua 5.1)\n\n# Otherwise the module will search for any available Lua implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always search for non-versioned lua first (recommended)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine possible naming suffixes (there is no standard for this)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up possible search names and locations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the lua executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the lua header\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 68,
        "CharPositionInLine" : 5
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 69,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Find the lua library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 92,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Determine Lua version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Lua 5.2+\n",
        "Line" : 107,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/FindMiniZip.cmake" : {
      "ObjectId" : "c35446ddd755f9245a6bc771f3e1f99256018d72",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MiniZip lib\n\n# Once done this will define:\n\n#\n\n#  MINIZIP_FOUND - system has MiniZip\n\n#  MINIZIP_INCLUDE_DIRS - the MiniZip include directory\n\n#  MINIZIP_LIBRARIES - The libraries needed to use MiniZip\n\n#\n\n# Copyright (c) 2012, John Schember <john@nachtimwald.com>\n\n# Copyright (c) 2011, Dan Horák <dan[at]danny.cz>\n\n# Copyright (c) 2012, Hans de Goede <hdegoede@redhat.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "aa2427e2030d870eaca56869ce5699543fcb40ea",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n# SDL2_VERSION_STRING, the version of SDL2 found\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 84,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 85,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 86,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 142,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 149,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 159,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 166,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 171,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 173,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Determine SDL2 version\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SDL2_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/FindSDL32.cmake" : {
      "ObjectId" : "30291a6440191eb22b35992e7009878e540f38e8",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find SDL32\n\n#\n\n# This module was created because the one which comes\n\n# with CMake doesn't find 32bit SDL when crosscompiling\n\n#\n\n# This module defines\n\n#  SDL32_INCLUDE_DIR, where to find SDL32lib.h, etc.\n\n#  SDL32_LIBRARIES, the libraries needed to use SDL32.\n\n#  SDL32_FOUND, If false, do not try to use SDL32.\n\n# also defined, but not for general use are\n\n#  SDL32_LIBRARY, where to find the SDL32 library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SDL32_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindSQLite3.cmake" : {
      "ObjectId" : "aae8d134c446df92ed53525ac6af3eaf9bf25ed4",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2007-2009 LuaDist.\n\n# Created by Peter Kapec <kapecp@gmail.com>\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n#\tNote:\n\n#\t\tSearching headers and libraries is very simple and is NOT as powerful as scripts\n\n#\t\tdistributed with CMake, because LuaDist defines directories to search for.\n\n#\t\tEveryone is encouraged to contact the author with improvements. Maybe this file\n\n#\t\tbecomes part of CMake distribution sometimes.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find sqlite3\n\n# Find the native SQLITE3 headers and libraries.\n\n#\n\n# SQLITE3_INCLUDE_DIRS - where to find sqlite3.h, etc.\n\n# SQLITE3_LIBRARIES    - List of libraries when using sqlite.\n\n# SQLITE3_FOUND\t       - True if sqlite found.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine SQLite3 version\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SQLITE3_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindTheora.cmake" : {
      "ObjectId" : "831206796378808c097d4834d98ad9fc3742a02f",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Theora library\n\n# Find the native Theora headers and libraries.\n\n#\n\n#  THEORA_INCLUDE_DIRS - where to find theora/theora.h, etc.\n\n#  THEORA_LIBRARIES    - List of libraries when using theora.\n\n#  THEORA_FOUND        - True if theora is found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n#Copyright 2000-2009 Kitware, Inc., Insight Software Consortium\n\n#All rights reserved.\n\n#\n\n#Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n#* Redistributions of source code must retain the above copyright notice,\n\n#this list of conditions and the following disclaimer.\n\n#\n\n#* Redistributions in binary form must reproduce the above copyright notice,\n\n#this list of conditions and the following disclaimer in the documentation\n\n#and/or other materials provided with the distribution.\n\n#\n\n#* Neither the names of Kitware, Inc., the Insight Software Consortium, nor\n\n#the names of their contributors may be used to endorse or promote products\n\n#derived from this software without specific prior written  permission.\n\n#\n\n#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n#ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n#LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n#CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n#CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n#POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set THEORA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindVorbis.cmake" : {
      "ObjectId" : "630153d68ed950cbc47977207c544541b64bf425",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbis\n\n# Find the native vorbis includes and libraries\n\n# Source: http://code.google.com/p/lugaru/\n\n#\n\n#  VORBIS_INCLUDE_DIR - where to find vorbis.h, etc.\n\n#  VORBIS_LIBRARIES   - List of libraries when using vorbis(file).\n\n#  VORBIS_FOUND       - True if vorbis found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# MSVC built ogg/vorbis may be named ogg_static and vorbis_static\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBIS_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "b06207530662c9a216aa2f953cb1b8f55d70d44c",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/Toolchain-cross-mingw-linux.cmake" : {
      "ObjectId" : "565c5ecc5c2b267a6d8d9fe0ff47becd8a516f6a",
      "LastModified" : "2017-11-14T18:28:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------\n\n# Toolchain Cross MingW\n\n#-----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Choose an appropriate compiler prefix\n\n# see http://mingw-w64.sourceforge.net/\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 32
  },
  "ElapsedTime" : 4321
}