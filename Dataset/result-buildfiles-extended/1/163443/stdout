{
  "Repository" : "163443",
  "Revision" : "HEAD",
  "ObjectId" : "a04d91c701251a9b32b7364ddb48029ba024cb75",
  "CommitTime" : "2019-03-28T12:39:43Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "04a0d4505085bee274ddb7322aa0ee953bddf303",
      "LastModified" : "2019-03-20T10:44:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for QEMU.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Always point to the root of the build tree (needs GNU make).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Before including a proper config-host.mak, assume we are in the source tree\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All following code might depend on configuration variables\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Put the all: rule here so that config-host.mak can contain dependencies.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check that we're not trying to do an out-of-tree build from\n\n# a tree that's been used for an in-tree build.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: The next lines include code which supports a smooth\n\n# transition from old configurations without config.status.\n\n# This code can be removed after QEMU 1.7.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Create QEMU_PKGVERSION and FULL_VERSION strings\n\n# If PKGVERSION is set, use that; otherwise get version and -dirty status from git\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Either \"version (pkgversion)\", or just \"version\" if pkgversion not set\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#*-to-} && \\\n\t    test -e $(KEYCODEMAP_GEN) && \\\n\t    $(PYTHON) $(KEYCODEMAP_GEN) \\\n\t          --lang glib2 \\\n\t          --varname qemu_input_map_$${src}_to_$${dst} \\\n\t          code-map $(KEYCODEMAP_CSV) $${src} $${dst} \\\n\t        > $@ || rm -f $@, \"GEN\", \"$@\")\n",
        "Line" : 288,
        "CharPositionInLine" : 46
      },
      "10" : {
        "Text" : "# Don't try to regenerate Makefile or configure\n\n# We don't generate any of them\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This has to be kept in sync with Kconfig.host.\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Overriding CFLAGS causes us to lose defines added in the sub-makefile.\n\n# Not overriding CFLAGS leads to mis-matches between compilation modes.\n\n# Therefore we replicate some of the logic in the sub-makefile.\n\n# Remove all the extra -Warning flags that QEMU uses that Capstone doesn't;\n\n# no need to annoy QEMU developers with such things.\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Only keep -O and -g cflags\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "######################################################################\n\n# Build libraries\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "######################################################################\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# avoid old build problems by removing potentially incorrect old files\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# May not be present in GENERATED_FILES\n",
        "Line" : 640,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Sphinx does not allow building manuals into the same directory as\n\n# the source files, so if we're doing an in-tree QEMU build we must\n\n# build the manuals into a subdirectory (and then install them from\n\n# there for 'make install'). For an out-of-tree build we can just\n\n# use the docs/ subdirectory in the build tree as normal.\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Note that we manually filter-out the non-Sphinx documentation which\n\n# is currently built into the docs/interop directory in the build tree.\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Note that we deliberately do not install the \"devel\" manual: it is\n\n# for QEMU developers, and not interesting to our users.\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# opengl shader programs\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# documentation\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Sphinx builds all its documentation at once in one invocation\n\n# and handles \"don't rebuild things unless necessary\" itself.\n\n# The '.doctrees' files are cached information to speed this up.\n",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Canned command to build a single manual\n",
        "Line" : 901,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# We assume all RST files in the manual's directory are used in it\n",
        "Line" : 903,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Reports/Analysis\n",
        "Line" : 963,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# 64 bit executables\n",
        "Line" : 983,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# 32 bit executables\n",
        "Line" : 987,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# SIGNCODE\n",
        "Line" : 1005,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "#qemu-system-}; \\\n           echo Section \\\"$$arch\\\" Section_$$arch; \\\n           echo SetOutPath \\\"\\$$INSTDIR\\\"; \\\n           echo File \\\"\\$${BINDIR}\\\\$$i\\\"; \\\n           echo SectionEnd; \\\n         done \\\n        ) >${INSTDIR}/system-emulations.nsh\n",
        "Line" : 1009,
        "CharPositionInLine" : 23
      },
      "31" : {
        "Text" : "# SIGNCODE\n\n# CONFIG_WIN\n",
        "Line" : 1028,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Add a dependency on the generated files, so that they are always\n\n# rebuilt before other object files\n",
        "Line" : 1031,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Include automatically generated dependency files\n\n# Dependencies in Makefile.objs files come from our recursive subdir rules\n",
        "Line" : 1043,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34,
      "Errorlog" : "line 339:36 token recognition error at: '\\1'\nline 339:59 token recognition error at: '\\1'\nline 339:62 token recognition error at: '\\2'\n"
    },
    "pc-bios/Makefile" : {
      "ObjectId" : "315288df84e1e2817e495392e12aa9e9b03c67db",
      "LastModified" : "2009-03-07T04:56:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# NOTE: only compilable with x86 cross compile tools\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "pc-bios/keymaps/Makefile" : {
      "ObjectId" : "76217b0689613409b32359dd508e2fdcaf285161",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pc-bios/optionrom/Makefile" : {
      "ObjectId" : "e33a24da0d0ca125aef84351a4a689726d482056",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Dummy command so that make thinks it has done something\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiling with no optimization creates ROMs that are too large\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Drop -fstack-protector and the like\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Attempt to work around compilers that lack -m16 (GCC <= 4.8, clang <= ??)\n\n# On GCC we add -fno-toplevel-reorder to keep the order of asm blocks with\n\n# respect to the rest of the code.  clang does not have -fno-toplevel-reorder,\n\n# but it places all asm blocks at the beginning and we're relying on it for\n\n# the option ROM header.  So just force clang not to use the integrated\n\n# assembler, which doesn't support .code16gcc.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# suppress auto-removal of intermediate files\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "pc-bios/s390-ccw/Makefile" : {
      "ObjectId" : "1eb316b02f1fab0d62667ab7f5a6646a6945ab36",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Dummy command so that make thinks it has done something\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "pc-bios/spapr-rtas/Makefile" : {
      "ObjectId" : "f26dd428b79e6676c1b55f28659f170fca3f5e18",
      "LastModified" : "2016-10-06T11:11:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Dummy command so that make thinks it has done something\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CFLAGS += -I$(SRC_PATH)\n\n#QEMU_CFLAGS = $(CFLAGS)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "po/Makefile" : {
      "ObjectId" : "c041f4c858ee26866d2a20e67e200fd5e79b4e3b",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This makefile is very special as it's meant to build as part of the build\n\n# process and also within the source tree to update the translation files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set SRC_PATH for in-tree builds without configuration.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The default target must come before any include statements.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "roms/Makefile" : {
      "ObjectId" : "78d5dd18c301931b79ceef35a6272c8aab171008",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# cross compiler auto detection\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# first find cross binutils in path\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# then check we have cross gcc too\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# finally strip off path + toolname so we get the prefix\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# tag our seabios builds\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# EfiRom utility is shipped with edk2 / tianocore, in BaseTools/\n\n#\n\n# We need that to combine multiple images (legacy bios,\n\n# efi ia32, efi x64) into a single rom binary.\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "slirp/Makefile" : {
      "ObjectId" : "6d48f626baee876770d9f2289d7eb215e2eba1dd",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/fp/Makefile" : {
      "ObjectId" : "5a35e7c2109aa99749780f2fee5d7662ee59c60a",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# we could use any specialize here, it doesn't matter\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use this variable to be clear when we pull in our own implementation\n\n# We build the object with a default rule thanks to the vpath above\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# work around TARGET_* poisoning\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define a target to match testfloat's implementation-defined choices, such as\n\n# whether to raise the invalid flag when dealing with NaNs in muladd.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# capstone has a platform.h file that clashes with softfloat's\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# softfloat defines\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# silence the build of softfloat objects\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# testfloat defines\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# silence the build of testfloat objects\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# softfloat objects\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# testfloat objects\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# everything depends on config-host.h because platform.h includes it\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# libtestfloat.a depends on libsoftfloat.a, so specify it first\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Custom rule to build with SF_CFLAGS\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Custom rule to build with TF_CFLAGS\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/migration/Makefile" : {
      "ObjectId" : "13e99b1692fa993bf80919e6e2da2d60116b0f00",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2018 Red Hat, Inc. and/or its affiliates\n\n#\n\n# This work is licensed under the terms of the GNU GPL, version 2 or later.\n\n# See the COPYING file in the top-level directory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/migration/aarch64/Makefile" : {
      "ObjectId" : "9c4fa18e7637263fee12a551b8cd1250c9d96e02",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# To specify cross compiler prefix, use CROSS_PREFIX=\n\n#   $ make CROSS_PREFIX=aarch64-linux-gnu-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/migration/i386/Makefile" : {
      "ObjectId" : "5c0324134a7d98906cab64ab615b96856ac01e60",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# To specify cross compiler prefix, use CROSS_PREFIX=\n\n#   $ make CROSS_PREFIX=x86_64-linux-gnu-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/migration/s390x/Makefile" : {
      "ObjectId" : "6393c3e5b92cd42c6661900b52d9750fad1efbf5",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# To specify cross compiler prefix, use CROSS_PREFIX=\n\n#   $ make CROSS_PREFIX=s390x-linux-gnu-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We use common-page-size=16 to avoid big padding in the ELF file\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/multiboot/Makefile" : {
      "ObjectId" : "ed4225e7d1342fe29ce1959659e66c49aa72fb22",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/qemu-iotests/Makefile" : {
      "ObjectId" : "27380e60c1c633c5e48505484967eb497c2975db",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# no default target\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/tcg/Makefile" : {
      "ObjectId" : "1cdd628e96f855ad9a318c5420b6240fdccb1945",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -*- Mode: makefile -*-\n\n#\n\n# TCG tests\n\n#\n\n# These are complicated by the fact we want to build them for guest\n\n# systems. This requires knowing what guests we are building and which\n\n# ones we have cross-compilers for or docker images with\n\n# cross-compilers.\n\n#\n\n# The tests themselves should be as minimal as possible as\n\n# cross-compilers don't always have a large amount of libraries\n\n# available.\n\n#\n\n# We only include the host build system for SRC_PATH and we don't\n\n# bother with the common rules.mk. We expect the following:\n\n#\n\n#   CC - the C compiler command\n\n#   EXTRA_CFLAGS - any extra CFLAGS\n\n#   BUILD_STATIC - are we building static binaries\n\n#\n\n# By default all tests are statically compiled but some host systems\n\n# may not package static libraries by default. If an external\n\n# cross-compiler can only build dynamic libraries the user might need\n\n# to make extra efforts to ensure ld.so can link at runtime when the\n\n# tests are run.\n\n#\n\n# We also accept SPEED=slow to enable slower running tests\n\n#\n\n# We also expect to be in the tests build dir for the FOO-(linux-user|softmmu).\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for including , in command strings\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $1 = test name, $2 = cmd, $3 = desc\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# $1 = test name, $2 = reference\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# $1 = test name, $2 = reason\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tests we are building\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Start with a blank slate, the build targets get to add stuff first\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The QEMU for this TARGET\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If TCG debugging is enabled things are a lot slower\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The order we include is important. We include multiarch, base arch\n\n# and finally arch if it's not the same as base arch.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add the common build options\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For softmmu targets we include a different Makefile fragement as the\n\n# build options for bare programs are usually pretty different. They\n\n# are expected to provide their own build recipes.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# Test Runners\n\n#\n\n# By default we just run the test with the appropriate QEMU for the\n\n# target. More advanced tests may want to override the runner in their\n\n# specific make rules. Additional runners for the same binary should\n\n# be added to EXTRA_RUNS.\n\n#\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# There is no clean target, the calling make just rm's the tests build dir\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "tests/tcg/lm32/Makefile" : {
      "ObjectId" : "57e7363b2cf5d043168a19f055bdba0249f88c23",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#TESTCASES += test_rcsr.tst\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TESTCASES += test_wcsr.tst\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/tcg/mips/user/ase/dsp/Makefile" : {
      "ObjectId" : "5c6da96870e13ab4f5ad604a24cb14e76a48c9a4",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/tcg/mips/user/isa/r5900/Makefile" : {
      "ObjectId" : "bff360df6c97b21f444be4724e9dfaa879662be2",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/tcg/openrisc/Makefile" : {
      "ObjectId" : "fb5ceda512f8552c9dd4e8a671be41e53da6f269",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/uefi-test-tools/Makefile" : {
      "ObjectId" : "1d78bc14d51aa69d93cca2ec7c5dd521c00eb34e",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the test helper UEFI applications that run in guests.\n\n#\n\n# Copyright (C) 2019, Red Hat, Inc.\n\n#\n\n# This program and the accompanying materials are licensed and made available\n\n# under the terms and conditions of the BSD License that accompanies this\n\n# distribution. The full text of the license may be found at\n\n# <http://opensource.org/licenses/bsd-license.php>.\n\n#\n\n# THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN \"AS IS\" BASIS, WITHOUT\n\n# WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Preserve all intermediate targets if the build succeeds.\n\n# - Intermediate targets help with development & debugging.\n\n# - Preserving intermediate targets also keeps spurious changes out of the\n\n#   final build products, in case the user re-runs \"make\" without any changes\n\n#   to the UEFI source code. Normally, the intermediate files would have been\n\n#   removed by the last \"make\" invocation, hence the re-run would rebuild them\n\n#   from the unchanged UEFI sources. Unfortunately, the \"mkdosfs\" and\n\n#   \"genisoimage\" utilities embed timestamp-based information in their outputs,\n\n#   which causes git to report differences for the tracked qcow2 ISO images.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In the pattern rules below, the stem (%, $*) stands for\n\n# \"$(binary).$(target)\".\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert the raw ISO image to a qcow2 one, enabling compression, and using a\n\n# small cluster size. This allows for small binary files under git control,\n\n# hence for small binary patches.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Embed the \"UEFI system partition\" into an ISO9660 file system as an ElTorito\n\n# boot image.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define chained macros in order to map QEMU system emulation targets to\n\n# *short* UEFI architecture identifiers. Periods are allowed in, and ultimately\n\n# stripped from, the argument.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Format a \"UEFI system partition\", using the UEFI binary as the default boot\n\n# loader. Add 10% size for filesystem metadata, round up to the next KB, and\n\n# make sure the size is large enough for a FAT filesystem. Name the filesystem\n\n# after the UEFI binary. (Excess characters are automatically dropped from the\n\n# filesystem label.)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In the pattern rules below, the stem (%, $*) stands for \"$(target)\" only. The\n\n# association between the UEFI binary (such as \"bios-tables-test\") and the\n\n# component name from the edk2 platform DSC file (such as \"BiosTablesTest\") is\n\n# explicit in each rule.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# \"build.sh\" invokes the \"build\" utility of edk2 BaseTools. In any given edk2\n\n# workspace, at most one \"build\" instance may be operating at a time. Therefore\n\n# we must serialize the rebuilding of targets in this Makefile.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In turn, the \"build\" utility of edk2 BaseTools invokes another \"make\".\n\n# Although the outer \"make\" process advertizes its job server to all child\n\n# processes via MAKEFLAGS in the environment, the outer \"make\" closes the job\n\n# server file descriptors (exposed in MAKEFLAGS) before executing a recipe --\n\n# unless the recipe is recognized as a recursive \"make\" recipe. Recipes that\n\n# call $(MAKE) are classified automatically as recursive; for \"build.sh\" below,\n\n# we must mark the recipe manually as recursive, by using the \"+\" indicator.\n\n# This way, when the inner \"make\" starts a parallel build of the target edk2\n\n# module, it can communicate with the outer \"make\"'s job server.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "ui/icons/Makefile" : {
      "ObjectId" : "20bd64ccce543cd472cce27284102645f6e3e002",
      "LastModified" : "2019-03-28T09:18:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Regenerate bitmaps from the SVG using inkscape CLI export\n\n# and ImageMagick. Don't use ImageMagick for the initial\n\n# SVG conversion, since it merely calls inkscape, but uses\n\n# 96 DPI res resulting in poor quality output.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 23
  },
  "ElapsedTime" : 12158
}