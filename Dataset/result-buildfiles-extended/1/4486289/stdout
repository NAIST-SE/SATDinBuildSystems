{
  "Repository" : "4486289",
  "Revision" : "HEAD",
  "ObjectId" : "52d37eaee4b82776eab052a299330bed4e1e082d",
  "CommitTime" : "2019-03-26T11:04:34Z",
  "Files" : {
    "contrib/CMakeLists.txt" : {
      "ObjectId" : "fb5369e7a813232934f07b55611a8e07209334af",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE (StandartIncludes)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INCLUDE (InstallIncludes.cmake)\n\n#INCLUDE (InstallStaticData.cmake)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Demos\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/Configure.cmake" : {
      "ObjectId" : "b627855cc6bd40916ce8f9b201da2e5c86bf2f81",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/cmake/FindSDL2.cmake" : {
      "ObjectId" : "05663dadc32b2e528159e7822e6fb1e16dfcfdff",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 72,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 73,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 74,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "contrib/cmake/Install.cmake" : {
      "ObjectId" : "bc2d65275702076c7245c30d7cc35cce5b364e9d",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required Vars:\n\n# ${TARGET_NAME}\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/cmake/InstallExport.cmake" : {
      "ObjectId" : "a9fa0a8aa9da2967d7ccaa77e3fdf2b0d4fde173",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Installs export targets (i.e. cmake config files) into location\n\n# specified for OS.\n\n# Installs ${PROJECT_NAME}-SetThirdParties.cmake too if such file\n\n# is found in ${PROJECT_SOURCE_DIR}.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file may be configured => it placed in binary dir\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "contrib/cmake/OptionDependentOnPackage.cmake" : {
      "ObjectId" : "88cd3f6e0e97c369d831302e170d02e92869c09e",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Parameters:\n\n# OPTION_VAR_NAME is variable name which will be passed to OPTION call\n\n# OPTION_DESCRIPTION is text description which will be passed to OPTION call\n\n# PACKAGE_FOUND_VAR is boolean variable indicated is requiring package found or not\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parameters:\n\n# OPTION_VAR_NAME is variable name which will be passed to OPTION call\n\n# OPTION_DESCRIPTION is text description which will be passed to OPTION call\n\n# PACKAGE_FOUND_VAR and after parameters are boolean variables indicated is requiring package found or not\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "contrib/cmake/PrintOptionStatus.cmake" : {
      "ObjectId" : "dc525a8c5b0c3920761e6e618ac415477d2588d8",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Parameters:\n\n# OPTION: boolean option.\n\n# TEXT - option meaning text, printed between \"[+/-]\" and \"enabled/disabled\".\n\n# PREPEND - optional parameter, count of spaces inserted before output.\n\n#\tUseful for indenting relative options.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/demos.cmake" : {
      "ObjectId" : "43f11442e254369924ccff830c91c84bf924763f",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# soloud_add_demo(c_test ${SOURCE_PATH}/c_test/main.c)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# soloud_add_demo(env ${SOURCE_PATH}/env/main.cpp)\n\n# soloud_add_demo(megademo\n\n# \t${SOURCE_PATH}/megademo/3dtest.cpp\n\n# \t${SOURCE_PATH}/megademo/main.cpp\n\n# \t${SOURCE_PATH}/megademo/mixbusses.cpp\n\n# \t${SOURCE_PATH}/megademo/monotone.cpp\n\n# \t${SOURCE_PATH}/megademo/multimusic.cpp\n\n# \t${SOURCE_PATH}/megademo/pewpew.cpp\n\n# \t${SOURCE_PATH}/megademo/radiogaga.cpp\n\n# \t${SOURCE_PATH}/megademo/space.cpp\n\n# \t${SOURCE_PATH}/megademo/speechfilter.cpp\n\n# \t${SOURCE_PATH}/megademo/tedsid.cpp\n\n# \t${SOURCE_PATH}/megademo/virtualvoices.cpp\n\n# )\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# soloud_add_demo(piano\n\n# \t${SOURCE_PATH}/piano/main.cpp\n\n# \t${SOURCE_PATH}/piano/soloud_basicwave.cpp\n\n# \t${SOURCE_PATH}/piano/soloud_padsynth.cpp\n\n# )\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "contrib/src.cmake" : {
      "ObjectId" : "0bda84e5c210672409be9ad3ce3a13f315b558f4",
      "LastModified" : "2018-11-06T21:52:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Core\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Audiosources\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Backends\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Filters\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# All together\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 9
  },
  "ElapsedTime" : 1079
}