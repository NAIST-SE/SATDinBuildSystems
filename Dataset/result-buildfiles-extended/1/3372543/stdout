{
  "Repository" : "3372543",
  "Revision" : "HEAD",
  "ObjectId" : "7c30120f52c22c1dd971431383ad2df8ca1a12c4",
  "CommitTime" : "2019-04-18T07:20:24Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6dddef6a5ef1864732a16beb51ac83081669cf85",
      "LastModified" : "2019-04-18T07:20:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to enable as many C99 features as we can.\n\n# At minimum, we want C++/C99-style // comments.\n\n#\n\n# Newer versions of compilers might default to supporting C99, but older\n\n# versions may require a special flag.\n\n#\n\n# Prior to CMake 3.1, setting CMAKE_C_STANDARD will not have any effect,\n\n# so, unless and until we require CMake 3.1 or later, we have to do it\n\n# ourselves on pre-3.1 CMake, so we just do it ourselves on all versions\n\n# of CMake.\n\n#\n\n# Note: with CMake 3.1 through 3.5, the only compilers for which CMake\n\n# handles CMAKE_C_STANDARD are GCC and Clang.  3.6 adds support only\n\n# for Intel C; 3.9 adds support for PGI C, Sun C, and IBM XL C, and\n\n# 3.10 adds support for Cray C and IAR C, but no version of CMake has\n\n# support for HP C.  Therefore, even if we use CMAKE_C_STANDARD with\n\n# compilers for which CMake supports it, we may still have to do it\n\n# ourselves on other compilers.\n\n#\n\n# See the CMake documentation for the CMAKE_<LANG>_COMPILER_ID variables\n\n# for a list of compiler IDs.\n\n#\n\n# We don't worry about MSVC; it doesn't have such a flag - either it\n\n# doesn't support the C99 features we need at all, or it supports them\n\n# regardless of the compiler flag.\n\n#\n\n# XXX - this just tests whether the option works and adds it if it does.\n\n# We don't test whether it's necessary in order to get the C99 features\n\n# that we use; if we ever have a user who tries to compile with a compiler\n\n# that can't be made to support those features, we can add a test to make\n\n# sure we actually *have* C99 support.\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# We want support for extensions picked up for GNU C compatibility,\n\n# so we use -qlanglvl=extc99.\n\n#\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "###################################################################\n\n#   Parameters\n\n###################################################################\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# String parameters.  Neither of them are set, initially; only if the\n\n# user explicitly configures them are they set.\n\n#\n\n# WITH_CHROOT is STRING, not PATH, as the directory need not exist\n\n# when CMake is run.\n\n#\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# By default, build universal with the appropriate set of architectures\n\n# for the OS on which we're doing the build.\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Get the major version of Darwin.\n\n#\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\n\n# Leopard.  Build for x86 and 32-bit PowerPC, with\n\n# x86 first.  (That's what Apple does.)\n\n#\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#\n\n# Snow Leopard.  Build for x86-64 and x86, with\n\n# x86-64 first.  (That's what Apple does.)\n\n#\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "###################################################################\n\n#   Versioning\n\n###################################################################\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Get, parse, format and set tcpdump's version string from\n\n# [tcpdump_root]/VERSION for later use.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Get MAJOR, MINOR, PATCH & SUFFIX\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Read only the first line\n",
        "Line" : 128,
        "CharPositionInLine" : 18
      },
      "12" : {
        "Text" : "######################################\n\n# Project settings\n\n######################################\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###################################################################\n\n#   Detect available platform features\n\n###################################################################\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# Header files.\n\n#\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# Functions.\n\n#\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Find library needed for gethostbyaddr.\n\n# NOTE: if you hand check_library_exists as its last argument a variable\n\n# that's been set, it skips the test, so we need different variables.\n\n#\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# We need winsock2.h and ws2tcpip.h.\n\n#\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#\n\n# This may require additional libraries.\n\n#\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# Some platforms may need -lsocket for getservent.\n\n#\n",
        "Line" : 261,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#\n\n# For Windows, either\n\n#\n\n#   1) we're using VS 2015, in which case we have both snprintf()\n\n#      and vsnprintf(), and they behave in a C99-compliant fashion,\n\n#      so we use them\n\n#\n\n# or\n\n#\n\n#   2) we're not, and we don't have snprintf(), and we either don't\n\n#      have vsnprintf() or we have one that *doesn't* behave in a\n\n#      C99-compliant fashion, but we *do* have _snprintf_s() and\n\n#      _vsnprintf_s(), so we wrap them with #defines\n\n#\n\n# and we test for both of them at compile time, so we don't need to\n\n# check for snprintf() or vsnprintf() here.\n\n#\n\n# XXX - do we need to care about UN*Xes that don't have snprintf()\n\n# or vsnprintf() any more?\n\n#\n\n# We also don't need to waste time checking for fork() or vfork().\n\n#\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# Some platforms may need -lnsl for getrpcbynumber.\n\n#\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# This requires the libraries we require, as ether_ntohost might be\n\n# in one of those libraries.  That means we have to do this after\n\n# we check for those libraries.\n\n#\n\n# You are in a twisty little maze of UN*Xes, all different.\n\n# Some might not have ether_ntohost().\n\n# Some might have it and declare it in <net/ethernet.h>.\n\n# Some might have it and declare it in <netinet/ether.h>\n\n# Some might have it and declare it in <sys/ethernet.h>.\n\n# Some might have it and declare it in <arpa/inet.h>.\n\n# Some might have it and declare it in <netinet/if_ether.h>.\n\n# Some might have it and not declare it in any header file.\n\n#\n\n# Before you is a C compiler.\n\n#\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# OK, we have ether_ntohost().  We don't check whether it's buggy,\n\n# as we assume any system that has CMake is likely to be new enough\n\n# that, if it has ether_ntohost(), whatever bug is checked for in\n\n# autotools is fixed; we just decide to use it.\n\n#\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#\n\n# Is it declared in <net/ethernet.h>?\n\n#\n\n# This test fails if we don't have <net/ethernet.h> or if we do\n\n# but it doesn't declare ether_ntohost().\n\n#\n",
        "Line" : 351,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 359,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#\n\n# No - how about <netinet/ether.h>, as on Linux?\n\n#\n\n# This test fails if we don't have <netinet/ether.h>\n\n# or if we do but it doesn't declare ether_ntohost().\n\n#\n",
        "Line" : 368,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 376,
        "CharPositionInLine" : 12
      },
      "29" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 382,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#\n\n# No - how about <sys/ethernet.h>, as on Solaris 10 and later?\n\n#\n\n# This test fails if we don't have <sys/ethernet.h>\n\n# or if we do but it doesn't declare ether_ntohost().\n\n#\n",
        "Line" : 386,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 394,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 400,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "#\n\n# No, how about <arpa/inet.h>, as on AIX?\n\n#\n\n# This test fails if we don't have <arpa/inet.h>\n\n# or if we do but it doesn't declare ether_ntohost().\n\n#\n",
        "Line" : 404,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 412,
        "CharPositionInLine" : 12
      },
      "35" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 418,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#\n\n# No, how about <netinet/if_ether.h>?\n\n# On some platforms, it requires <net/if.h> and\n\n# <netinet/in.h>, and we always include it with\n\n# both of them, so test it with both of them.\n\n#\n\n# This test fails if we don't have <netinet/if_ether.h>\n\n# and the headers we include before it, or if we do but\n\n# <netinet/if_ether.h> doesn't declare ether_ntohost().\n\n#\n",
        "Line" : 422,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 434,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "#\n\n# After all that, is ether_ntohost() declared?\n\n#\n",
        "Line" : 440,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "#\n\n# No, we'll have to declare it ourselves.\n\n# Do we have \"struct ether_addr\" if we include<netinet/if_ether.h>?\n\n#\n",
        "Line" : 444,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "#\n\n# OK, we have dnet_htoa().  Do we have netdnet/dnetdb.h?\n\n#\n",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#\n\n# Yes.  Does it declare dnet_htoa()?\n\n#\n",
        "Line" : 468,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "#\n\n# Do we have netdnet/dn.h?\n\n#\n",
        "Line" : 477,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "#\n\n# Yes.  Does it declare struct dn_naddr?\n\n#\n",
        "Line" : 482,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "#\n\n# Data types.\n\n#\n\n# XXX - there's no check_struct() macro that's like check_struct_has_member()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_struct_has_member() and look for ss_family.\n\n#\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n\n# Check for IPv6 support.\n\n# We just check for AF_INET6 and struct in6_addr.\n\n#\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "######################################\n\n# External dependencies\n\n######################################\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#\n\n# libpcap/WinPcap/Npcap.\n\n# First, find it.\n\n#\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#\n\n# Now check headers.\n\n#\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#\n\n# Check whether we have pcap/pcap-inttypes.h.\n\n# If we do, we use that to get the C99 types defined.\n\n#\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#\n\n# Check for various functions in libpcap/WinPcap/Npcap.\n\n#\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#\n\n# Check for \"pcap_list_datalinks()\" and use a substitute version if\n\n# it's not present.  If it is present, check for \"pcap_free_datalinks()\";\n\n# if it's not present, we don't replace it for now.  (We could do so\n\n# on UN*X, but not on Windows, where hilarity ensues if a program\n\n# built with one version of the MSVC support library tries to free\n\n# something allocated by a library built with another version of\n\n# the MSVC support library.)\n\n#\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#\n\n# Check for \"pcap_datalink_name_to_val()\", and use a substitute\n\n# version if it's not present.  If it is present, check for\n\n# \"pcap_datalink_val_to_description()\", and if we don't have it,\n\n# use a substitute version.\n\n#\n",
        "Line" : 562,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#\n\n# Check for \"pcap_set_datalink()\"; you can't substitute for it if\n\n# it's absent (it has hooks into libpcap), so just define the\n\n# HAVE_ value if it's there.\n\n#\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#\n\n# Check for \"pcap_breakloop()\"; you can't substitute for it if\n\n# it's absent (it has hooks into the live capture routines),\n\n# so just define the HAVE_ value if it's there.\n\n#\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#\n\n# Check for \"pcap_dump_ftell()\"; we use a substitute version\n\n# if it's not present.\n\n#\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#\n\n# Do we have the new open API?  Check for pcap_create() and for\n\n# pcap_statustostr(), and assume that, if we have both of them,\n\n# we also have pcap_activate() and the other new routines\n\n# introduced in libpcap 1.0.0.  (We check for pcap_statustostr()\n\n# as well, because WinPcap 4.1.3 screwed up and exported pcap_create()\n\n# but not other routines such as pcap_statustostr(), even though it\n\n# defined them and even though you really want pcap_statustostr() to\n\n# get strings corresponding to some of the status returns from the\n\n# new routines.)\n\n#\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#\n\n# If we don't have pcap_statustostr(), don't check for pcap_create(),\n\n# so we pretend we don't have it.\n\n#\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#\n\n# OK, do we have pcap_set_tstamp_type?  If so, assume we have\n\n# pcap_list_tstamp_types and pcap_free_tstamp_types as well.\n\n#\n",
        "Line" : 613,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "#\n\n# And do we have pcap_set_tstamp_precision?  If so, we assume\n\n# we also have pcap_open_offline_with_tstamp_precision.\n\n#\n",
        "Line" : 619,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "#\n\n# Check for a miscellaneous collection of functions which we use\n\n# if we have them.\n\n#\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#\n\n# Check for libpcap having pcap_findalldevs() but the pcap.h header\n\n# not having pcap_if_t; some versions of Mac OS X shipped with pcap.h\n\n# from 0.6 and libpcap 0.8, so that libpcap had pcap_findalldevs but\n\n# pcap.h didn't have pcap_if_t.\n\n#\n",
        "Line" : 632,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# Check for the pcap_version string variable and set HAVE_PCAP_VERSION\n",
        "Line" : 647,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "#\n\n# On Windows, check for pcap_wsockinit(); if we don't have it, check for\n\n# wsockinit().\n\n#\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#\n\n# Check for special debugging functions\n\n#\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Check whether libpcap defines pcap_debug or yydebug\n",
        "Line" : 671,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "#\n\n# We have libpcap.\n\n#\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "#\n\n# Optional libraries.\n\n#\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#\n\n# libsmi.\n\n#\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#\n\n# OpenSSL/libressl libcrypto.\n\n#\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#\n\n# Check for some functions.\n\n#\n",
        "Line" : 711,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "#\n",
        "Line" : 717,
        "CharPositionInLine" : 8
      },
      "72" : {
        "Text" : "# 1) do we have EVP_CIPHER_CTX_new?\n",
        "Line" : 718,
        "CharPositionInLine" : 7
      },
      "73" : {
        "Text" : "# If so, we use it to allocate an EVP_CIPHER_CTX, as\n\n# EVP_CIPHER_CTX may be opaque; otherwise, we allocate\n\n# it ourselves.\n\n#\n",
        "Line" : 719,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "#\n\n# 2) do we have EVP_CipherInit_ex()?\n\n# If so, we use it, because we need to be able to make two\n\n# \"initialize the cipher\" calls, one with the cipher and key,\n\n# and one with the IV, and, as of OpenSSL 1.1, You Can't Do That\n\n# with EVP_CipherInit(), because a call to EVP_CipherInit() will\n\n# unconditionally clear the context, and if you don't supply a\n\n# cipher, it'll clear the cipher, rendering the context unusable\n\n# and causing a crash.\n\n#\n",
        "Line" : 725,
        "CharPositionInLine" : 8
      },
      "75" : {
        "Text" : "#\n\n# We have libcrypto.\n\n#\n",
        "Line" : 739,
        "CharPositionInLine" : 8
      },
      "76" : {
        "Text" : "#\n\n# Capsicum sandboxing.\n\n# Some of this is in the system library, some of it is in other libraries.\n\n#\n",
        "Line" : 748,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#\n\n# OK, we have the functions we need to support Capsicum.\n\n#\n",
        "Line" : 761,
        "CharPositionInLine" : 12
      },
      "78" : {
        "Text" : "#\n\n# OK, can we use Casper?\n\n#\n",
        "Line" : 766,
        "CharPositionInLine" : 12
      },
      "79" : {
        "Text" : "#\n\n# libcap-ng.\n\n#\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "###################################################################\n\n#   Warning options\n\n###################################################################\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#\n\n# Check and add warning options if we have a .devel file.\n\n#\n",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#\n\n# Warning options.\n\n#\n",
        "Line" : 804,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "#\n\n# MSVC, with Microsoft's front end and code generator.\n\n# \"MSVC\" is also set for Microsoft's compiler with a Clang\n\n# front end and their code generator (\"Clang/C2\"), so we\n\n# check for clang.exe and treat that differently.\n\n#\n",
        "Line" : 808,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "#\n\n# Disable some pointless warnings that /Wall turns on.\n\n#\n\n# Unfortunately, MSVC does not appear to have an equivalent\n\n# to \"__attribute__((unused))\" to mark a particular function\n\n# parameter as being known to be unused, so that the compiler\n\n# won't warn about it (for example, the function might have\n\n# that parameter because a pointer to it is being used, and\n\n# the signature of that function includes that parameter).\n\n# C++ lets you give a parameter a type but no name, but C\n\n# doesn't have that.\n\n#\n",
        "Line" : 815,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "#\n\n# In theory, we care whether somebody uses f() rather than\n\n# f(void) to declare a function with no arguments, but, in\n\n# practice, there are places in the Windows header files\n\n# that appear to do that, so we squelch that warning.\n\n#\n",
        "Line" : 828,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "#\n\n# Windows FD_SET() generates this, so we suppress it.\n\n#\n",
        "Line" : 835,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "#\n\n# Perhaps testing something #defined to be 0 with #ifdef is an\n\n# error, and it should be tested with #if, but perhaps it's\n\n# not, and Microsoft does that in its headers, so we squelch\n\n# that warning.\n\n#\n",
        "Line" : 839,
        "CharPositionInLine" : 8
      },
      "88" : {
        "Text" : "#\n\n# The Windows headers also test not-defined values in #if, so\n\n# we don't want warnings about that, either.\n\n#\n",
        "Line" : 846,
        "CharPositionInLine" : 8
      },
      "89" : {
        "Text" : "#\n\n# We do *not* care whether some function is, or isn't, going to be\n\n# expanded inline.\n\n#\n",
        "Line" : 851,
        "CharPositionInLine" : 8
      },
      "90" : {
        "Text" : "#\n\n# We do *not* care whether we're adding padding bytes after\n\n# structure members.\n\n#\n",
        "Line" : 857,
        "CharPositionInLine" : 8
      },
      "91" : {
        "Text" : "#\n\n# We do *not* care about every single place the compiler would\n\n# have inserted Spectre mitigation if only we had told it to\n\n# do so with /Qspectre.  I guess the theory is that it's seeing\n\n# bounds checks that would prevent out-of-bounds loads and that\n\n# those out-of-bounds loads could be done speculatively and that\n\n# the Spectre attack could detect the value of the out-of-bounds\n\n# data *if* it's within our address space, but unless I'm\n\n# missing something I don't see that as being any form of\n\n# security hole.\n\n#\n\n# XXX - add /Qspectre if that is really worth doing.\n\n#\n",
        "Line" : 862,
        "CharPositionInLine" : 8
      },
      "92" : {
        "Text" : "#\n\n# We do *not* care whether a structure had padding added at\n\n# the end because of __declspec(align) - *we* don't use\n\n# __declspec(align), because the only structures whose layout\n\n# we precisely specify are those that get overlayed on packet\n\n# data, and in those every element is an array of octets so\n\n# that we have full control over the size and aligmnet, and,\n\n# apparently, jmp_buf has such a declaration on x86, meaning\n\n# that everything that includes netdissect.h, i.e. almost every\n\n# file in tcpdump, gets a warning.\n\n#\n",
        "Line" : 876,
        "CharPositionInLine" : 8
      },
      "93" : {
        "Text" : "#\n\n# Other compilers, including MSVC with a Clang front end and\n\n# Microsoft's code generator.  We currently treat them as if\n\n# they might support GCC-style -W options.\n\n#\n",
        "Line" : 889,
        "CharPositionInLine" : 8
      },
      "94" : {
        "Text" : "######################################\n\n# Input files\n\n######################################\n",
        "Line" : 911,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "#\n\n# We allow the SMB dissector to be omitted.\n\n#\n",
        "Line" : 916,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "#\n\n# Replace missing functions\n\n#\n",
        "Line" : 1096,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "######################################\n\n# Register targets\n\n######################################\n",
        "Line" : 1145,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "######################################\n\n# Write out the config.h file\n\n######################################\n",
        "Line" : 1155,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "######################################\n\n# Install tcpdump and man pages\n\n######################################\n",
        "Line" : 1161,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "#\n\n# \"Define GNU standard installation directories\", which actually\n\n# are also defined, to some degree, by autotools, and at least\n\n# some of which are general UN*X conventions.\n\n#\n",
        "Line" : 1165,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# XXX TODO where to install on Windows?\n",
        "Line" : 1175,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# On UN*X, and on Windows when not using MSVC, process man pages and\n\n# arrange that they be installed.\n",
        "Line" : 1180,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "#\n\n# Man pages.\n\n#\n\n# For each section of the manual for which we have man pages\n\n# that require macro expansion, do the expansion.\n\n#\n",
        "Line" : 1183,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# uninstall target\n",
        "Line" : 1198,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "#\n\n# Tcpdump tests\n\n#\n",
        "Line" : 1207,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 106
    },
    "cmake/Modules/FindCRYPTO.cmake" : {
      "ObjectId" : "453c6516e07113767615be2dc1bd8247c8d23ae5",
      "LastModified" : "2018-01-23T20:45:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find libcrypto.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find the library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindPCAP.cmake" : {
      "ObjectId" : "a41356778c090fab59ffcaa3723ea5d7a0562c52",
      "LastModified" : "2018-09-13T23:26:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find libpcap.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# We have pcap-config; use it.\n\n# XXX - what if this is on Windows?  If you're using, for example,\n\n# MinGW, that might be the right thing to do, *if* pcap-config\n\n# were made to work properly on Windows, but what about MSVC?\n\n#\n\n# First, get the include directory.\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# XXX - this assumes that there's only one -I flag in the output\n\n# of pcap-config --cflags.  That *should* be the case.\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Now, get the libraries.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add this directory to _pcap_library_dirs\n",
        "Line" : 44,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#\n\n# Try to find that library, so we get its full path.\n\n# CMake *really* doesn't like the notion of specifying \"here are\n\n# the directories in which to look for libraries\" except in\n\n# find_library() calls; it *really* prefers using full paths to\n\n# library files, rather than library names.\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Now, get the library directories and libraries for static linking.\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add this directory to _pcap_static_library_dirs\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#\n\n# Try to find that library, so we get its full path, as\n\n# we do with dynamic libraries.\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Try to find the header\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Try to find the library\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Try to find the static library (XXX - what about AIX?)\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Try to find the header\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Try to find the library\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# The 64-bit Packet.lib is located under /x64\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#\n\n# For the WinPcap and Npcap SDKs, the Lib subdirectory of the top-level\n\n# directory contains 32-bit libraries; the 64-bit libraries are in the\n\n# Lib/x64 directory.\n\n#\n\n# The only way to *FORCE* CMake to look in the Lib/x64 directory\n\n# without searching in the Lib directory first appears to be to set\n\n# CMAKE_LIBRARY_ARCHITECTURE to \"x64\".\n\n#\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#\n\n# OK, look for it under the name wpcap.\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Try to find the static library (XXX - what about AIX?)\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 18
    },
    "cmake/Modules/FindSMI.cmake" : {
      "ObjectId" : "98c1071267226f252e0b5f3fc9e4025d4d027c75",
      "LastModified" : "2018-01-23T20:45:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find libsmi.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find the library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 4
  },
  "ElapsedTime" : 1429
}