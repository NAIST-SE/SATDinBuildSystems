{
  "Repository" : "7682056",
  "Revision" : "HEAD",
  "ObjectId" : "829552a245560335b8b9802322a1ecedbb62fbea",
  "CommitTime" : "2019-02-28T17:01:39Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a8cc59572261207939ec37413da4ab11cfffcb14",
      "LastModified" : "2017-12-11T10:11:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## use C++11 if you can, otherwise boost 1.47+ is required for RNG)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## use Boost if you can (mandatory if C++11 is not available); if found, a USE_BOOST flag is declared - remove definition manually if you enable C++11!\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#DO NOT ENABLE, since it is broken\n\n#find_package(HDF5)\n\n#if(HDF5_FOUND)\n\n#  add_definitions(-DUSE_HDF5)\n\n#  include_directories(${HDF5_INCLUDE_DIRS})\n\n#endif()\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disable the install step.\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Wrap the download, configure and build steps in a script to log the output.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "Makefile" : {
      "ObjectId" : "55100ef32dc6f9ea576e6571eca148f531647887",
      "LastModified" : "2017-07-14T16:28:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#OBJDEV = $(addprefix $(OBJ_FOLDER)/, $(addsuffix .o, $(basename $(MAINFILE_DEV))))\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#fermi-perf: OPT = -DUSE_BOOST -DNO_CXX11 -qipa=level=2 -qipa=partition=large -O5 -qstrict -qinline -qhot -qlibmpi -qarch=qp -qtune=qp -qmaxmem=-1\n\n#fermi-perf: OPT = -DUSE_BOOST -DNO_CXX11 -O5 -qstrict -qinline -qhot -qlibmpi -qarch=qp -qtune=qp -qmaxmem=-1\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#$(addprefix $(OBJ_FOLDER)/, $(addsuffix .o, $(basename $(MAINFILE))))  : $(SRC_FOLDER)/$(MAINFILE) $(SRC_FOLDER)/preproc_defs.h\n\n#\t$(COMPILER) $(OPT)  -I$(BOOST_INC) -I$(HDF5_INC) -I$(JSONCPP_INC) -c -o $(addprefix $(OBJ_FOLDER)/, $(addsuffix .o, $(basename $(MAINFILE)))) $(SRC_FOLDER)/$(MAINFILE)\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindFFTW.cmake" : {
      "ObjectId" : "1ad7172e54ed58ffb435eeb68c9eea5d477915a2",
      "LastModified" : "2017-07-11T10:39:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FFTW\n\n# Find the native FFTW includes and library\n\n# This module defines\n\n# FFTW_INCLUDE_DIR, where to find fftw3.h, etc.\n\n# FFTW_LIBRARIES, the libraries needed to use FFTW.\n\n# FFTW_FOUND, If false, do not try to use FFTW.\n\n# also defined, but not for general use are\n\n# FFTW_LIBRARY, where to find the FFTW library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#UNSET(FFTW_INCLUDE_DIR CACHE)\n\n#UNSET(FFTW_LIBRARY CACHE)\n\n#UNSET(FFTW_THREADS_NAMES CACHE)\n\n#UNSET(FFTW_MPI_LIBRARY CACHE)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# /usr/local/include /usr/include /opt/local/lib )\n",
        "Line" : 50,
        "CharPositionInLine" : 52
      },
      "3" : {
        "Text" : "#/usr/lib /usr/local/lib /opt/locala/lib )\n",
        "Line" : 54,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# Find threads part of FFTW\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#/usr/lib /usr/local/lib /opt/local/lib )\n",
        "Line" : 59,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# Find MPI part of FFTW\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#/usr/lib /usr/local/lib /opt/local/lib )\n",
        "Line" : 64,
        "CharPositionInLine" : 58
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindJsonCpp.cmake" : {
      "ObjectId" : "6791e207aa66cef56da5dc4684cca78053a0eb9e",
      "LastModified" : "2017-07-14T15:47:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#[=======================================================================[.rst:\nFindJsonCpp\n-----------\n\nFind JsonCpp includes and library.\n\nImported Targets\n^^^^^^^^^^^^^^^^\n\nAn :ref:`imported target <Imported targets>` named\n``JsonCpp::JsonCpp`` is provided if JsonCpp has been found.\n\nResult Variables\n^^^^^^^^^^^^^^^^\n\nThis module defines the following variables:\n\n``JsonCpp_FOUND``\n  True if JsonCpp was found, false otherwise.\n``JsonCpp_INCLUDE_DIRS``\n  Include directories needed to include JsonCpp headers.\n``JsonCpp_LIBRARIES``\n  Libraries needed to link to JsonCpp.\n``JsonCpp_VERSION_STRING``\n  The version of JsonCpp found.\n  May not be set for JsonCpp versions prior to 1.0.\n``JsonCpp_VERSION_MAJOR``\n  The major version of JsonCpp.\n``JsonCpp_VERSION_MINOR``\n  The minor version of JsonCpp.\n``JsonCpp_VERSION_PATCH``\n  The patch version of JsonCpp.\n\nCache Variables\n^^^^^^^^^^^^^^^\n\nThis module uses the following cache variables:\n\n``JsonCpp_LIBRARY``\n  The location of the JsonCpp library file.\n``JsonCpp_INCLUDE_DIR``\n  The location of the JsonCpp include directory containing ``json/json.h``.\n\nThe cache variables should not be used by project code.\nThey may be set by end users to point at JsonCpp components.\n#]=======================================================================]",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2014-2015 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Extract version number if possible.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Provide documented result variables and targets.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindMKL.cmake" : {
      "ObjectId" : "95befd19cd24c4842791edb6a88aa976928376f8",
      "LastModified" : "2017-07-14T15:47:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Intel MKL\n\n# Find the MKL libraries\n\n#\n\n# Options:\n\n#\n\n#   MKL_STATAIC       :   use static linking\n\n#   MKL_MULTI_THREADED:   use multi-threading\n\n#   MKL_SDL           :   Single Dynamic Library interface\n\n#\n\n# This module defines the following variables:\n\n#\n\n#   MKL_FOUND            : True if MKL_INCLUDE_DIR are found\n\n#   MKL_INCLUDE_DIR      : where to find mkl.h, etc.\n\n#   MKL_INCLUDE_DIRS     : set when MKL_INCLUDE_DIR found\n\n#   MKL_LIBRARIES        : the library to link against.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find include dir\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find include directory\n\n#  There is no include folder under linux\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle suffix\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# MKL is composed by four layers: Interface, Threading, Computational and RTL\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "######################### Interface layer #######################\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "######################## Threading layer ########################\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "####################### Computational layer #####################\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "############################ RTL layer ##########################\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    }
  },
  "FileTypes" : {
    "CMAKE" : 4,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1230
}