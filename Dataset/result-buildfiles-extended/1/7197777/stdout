{
  "Repository" : "7197777",
  "Revision" : "HEAD",
  "ObjectId" : "8402c26cfa98b4689f5ac4673952a654cfe5b678",
  "CommitTime" : "2019-04-18T07:15:11Z",
  "Files" : {
    "docs/Makefile" : {
      "ObjectId" : "e9c128e900788686c17f7d852628a9a8a50fa34a",
      "LastModified" : "2017-02-27T04:39:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Run \"make FORCE= ...\" to avoid rebuilding from scratch (and risk\n\n# producing incorrect docs).\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Internal variables.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "examples/embedding/Makefile" : {
      "ObjectId" : "99f239a7c5af8ad83e32b8dafacc5b5fad3bfc01",
      "LastModified" : "2016-07-22T19:13:03Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "mpy-cross/Makefile" : {
      "ObjectId" : "4ff96fc80c007158ffa6b73e8020240aa243f363",
      "LastModified" : "2019-03-08T11:58:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# The following is a temporary hack to forefully undefine vars that might have\n\n# be defined by a calling Makefile (from recursive make).\n\n# TODO: Find a better way to be able to call this Makefile recursively.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define main target\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OS name, for simple autoconfig\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compiler settings\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Debugging/Optimization\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-DNDEBUG\n",
        "Line" : 47,
        "CharPositionInLine" : 11
      },
      "8" : {
        "Text" : "# On OSX, 'gcc' is a symlink to clang unless a real gcc is installed.\n\n# The unix port of MicroPython on OSX must be compiled with clang,\n\n# while cross-compile ports require gcc, so we test here for OSX and\n\n# if necessary override the value of 'CC' set in py/mkenv.mk\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use clang syntax for map file\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Use gcc syntax for map file\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# source files\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add fmode when compiling with mingw gcc\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "ports/bare-arm/Makefile" : {
      "ObjectId" : "a515db80e0aa2f496a7048396d5d62cdacad677f",
      "LastModified" : "2018-02-22T01:48:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Debugging/Optimization\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\tprintf.c \\\n\tstring0.c \\\n\tmalloc0.c \\\n\tgccollect.c \\\n\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\tstartup_stm32f40xx.s \\\n\tgchelper.s \\\n\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ports/cc3200/Makefile" : {
      "ObjectId" : "81531b1084a2c000b126d7ac95c06e676c4db99b",
      "LastModified" : "2017-09-06T04:09:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Select the board to build for: if not given on the command line,\n\n# then default to WIPY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make 'release' the default build type\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Port for flashing firmware\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the build directory is not given, make it reflect the board name.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# include MicroPython make definitions\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# always include MicroPython make rules\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Files *.ucf and *ucf.signed.bin come from CC3200SDK-SERVICEPACK\n\n# package from http://www.ti.com/tool/cc3200sdk\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "ports/esp32/Makefile" : {
      "ObjectId" : "ea90c9f3f5a9d7bececed164183e1fb96138bacf",
      "LastModified" : "2019-03-11T12:17:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FROZEN_DIR = scripts\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# SDKCONFIG should be overridden to get a different configuration\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the git hash of the currently supported ESP IDF version\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# paths to ESP IDF and its components\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# verify the ESP IDF version\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# pretty format of ESP IDF version, used internally by the IDF\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# include sdkconfig to get needed configuration values\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n\n# Compiler and linker flags\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# these flags are common to C and C++ compilation\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#.*//' -e 's/^.*:  *//' -e 's/ *\\\\$$//' \\\n      -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.d) >> $(@:.o=.P); \\\n  $(RM) -f $(@:.o=.d)\n",
        "Line" : 859,
        "CharPositionInLine" : 15
      },
      "12" : {
        "Text" : "################################################################################\n\n# Declarations to build the bootloader\n",
        "Line" : 868,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# libbootloader_support.a\n",
        "Line" : 876,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# liblog.a\n",
        "Line" : 898,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# libspi_flash.a\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# libmicro-ecc.a\n",
        "Line" : 916,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# libsoc.a\n",
        "Line" : 925,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# libmain.a\n",
        "Line" : 949,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# all objects files\n",
        "Line" : 958,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "################################################################################\n\n# Declarations to build the partitions\n",
        "Line" : 1008,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "################################################################################\n",
        "Line" : 1018,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "ports/esp8266/Makefile" : {
      "ObjectId" : "2162c72f075d72c9761e0c7c07277d3e8122cc35",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#$(BUILD)/pins_qstr.h\n",
        "Line" : 4,
        "CharPositionInLine" : 27
      },
      "2" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# UART for \"os\" messages. 0 is normal UART as used by MicroPython REPL,\n\n# 1 is debug UART (tx only), -1 to disable.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debugging/Optimization\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Options for mpy-cross\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Append any auto-generated sources that are needed by sources listed in SRC_QSTR\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "ports/javascript/Makefile" : {
      "ObjectId" : "9b0f4d89c0c5689bfb52358ff31eda4510460f07",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ports/minimal/Makefile" : {
      "ObjectId" : "64ad3cc0b2129a0ffc8a5fc3de8d357399b3978e",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tune for Debugging or Optimization\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Run emulation build on a POSIX system with suitable terminal settings\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This sleep is useful to spot segfaults\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ports/nrf/Makefile" : {
      "ObjectId" : "80110f9704ddfc664350bc311e540c584879144e",
      "LastModified" : "2019-04-01T17:22:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Select the board to build for: if not given on the command line,\n\n# then default to pca10040.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If SoftDevice is selected, try to use that one.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Verify that it is a valid target.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the build directory is not given, make it reflect the board name.\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# If the build directory is not given, make it reflect the board name.\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Use custom LD file\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Figure out correct system file to use base on chip sub-variant name.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Do not pass MCU_VARIANT_UPPER flag, as NRF52 defines NRF52832 only.\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#Debugging/Optimization\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#ASMFLAGS += -g -gtabs+\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Custom micropython startup file with smaller interrupt vector table\n\n# than the file provided in nrfx.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Create binary .bin file from the .out file\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Create binary .hex file from the .out file\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Append any auto-generated sources that are needed by sources listed in\n\n# SRC_QSTR\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Making OBJ use an order-only depenedency on the generated pins.h file\n\n# has the side effect of making the pins.h file before we actually compile\n\n# any of the objects. The normal dependency generation will deal with the\n\n# case when pins.h is modified. But when it doesn't exist, we don't know\n\n# which source files might need it.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Use a pattern rule here so that make will only call make-pins.py once to make\n\n# both pins_gen.c and pins.h\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# To use frozen source modules, put your .py files in a subdirectory (eg scripts/)\n\n# and then invoke make with FROZEN_DIR=scripts (be sure to build from scratch).\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# To use frozen bytecode, put your .py files in a subdirectory (eg frozen/) and\n\n# then invoke make with FROZEN_MPY_DIR=frozen (be sure to build from scratch).\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "ports/pic16bit/Makefile" : {
      "ObjectId" : "8a931979d2986943a674798ef6c04e6cc609193c",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Debugging/Optimization\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\tgchelper.s \\\n\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Append any auto-generated sources that are needed by sources listed in\n\n# SRC_QSTR\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "ports/qemu-arm/Makefile" : {
      "ObjectId" : "03a8afe77ea9bbe0a6a176782b91a10da3fe93bc",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Debugging/Optimization\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## With CoudeSourcery it's actually a little different, you just need `-T generic-m-hosted.ld`.\n\n## Although for some reason `$(LD)` will not find that linker script, it works with `$(CC)`.\n\n## It turns out that this is specific to CoudeSourcery, and ARM version of GCC ships something\n\n## else instead and according to the following files, this is what we need to pass to `$(CC).\n\n## - gcc-arm-none-eabi-4_8-2014q1/share/gcc-arm-none-eabi/samples/src/makefile.conf\n\n## - gcc-arm-none-eabi-4_8-2014q1/share/gcc-arm-none-eabi/samples/src/qemu/Makefile\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# All object files, needed to get dependencies correct\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## `$(LD)` doesn't seem to like `--specs` for some reason, but we can just use `$(CC)` here.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "ports/stm32/Makefile" : {
      "ObjectId" : "242ced38cb4d48815b6cd5e2f9ba4842ae82dd86",
      "LastModified" : "2019-04-01T17:22:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Select the board to build for: if not given on the command line,\n\n# then default to PYBV10.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the build directory is not given, make it reflect the board name.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# directory containing scripts to be frozen as bytecode\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#USBHOST_DIR=usbhost\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# may need to prefix dfu-util with sudo\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Select the cross compile prefix\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#INC += -I$(USBHOST_DIR)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Basic Cortex-M flags\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Select hardware floating-point support\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Options for particular MCU series\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Remove uncalled code from the final image.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Debugging/Optimization\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Options for mpy-cross\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# for CC3000 module\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This file contains performance critical functions so turn up the optimisation\n\n# level.  It doesn't add much to the code size and improves performance a bit.\n\n# Don't use -O3 with this file because gcc tries to optimise memset in terms of itself.\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We put several files into the first 16K section with the ISRs.\n\n# If we compile these using -O0 then it won't fit. So if you really want these\n\n# to be compiled with -O0, then edit boards/common.ld (in the .isr_vector section)\n\n# and comment out the following lines.\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# For convenience, automatically fetch required submodules if they don't exist\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# To use frozen source modules, put your .py files in a subdirectory (eg scripts/)\n\n# and then invoke make with FROZEN_DIR=scripts (be sure to build from scratch).\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# To use frozen bytecode, put your .py files in a subdirectory (eg frozen/) and\n\n# then invoke make with FROZEN_MPY_DIR=frozen (be sure to build from scratch).\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# A board should specify TEXT0_ADDR if to use a different location than the\n\n# default for the firmware memory location.  A board can also optionally define\n\n# TEXT1_ADDR to split the firmware into two sections; see below for details.\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# No TEXT1_ADDR given so put all firmware at TEXT0_ADDR location\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TEXT0_ADDR and TEXT1_ADDR are specified so split firmware between these locations\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Append any auto-generated sources that are needed by sources listed in\n\n# SRC_QSTR\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Making OBJ use an order-only depenedency on the generated pins.h file\n\n# has the side effect of making the pins.h file before we actually compile\n\n# any of the objects. The normal dependency generation will deal with the\n\n# case when pins.h is modified. But when it doesn't exist, we don't know\n\n# which source files might need it.\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# With conditional pins, we may need to regenerate qstrdefs.h when config\n\n# options change.\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# main.c can't be even preprocessed without $(GEN_CDCINF_HEADER)\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Use a pattern rule here so that make will only call make-pins.py once to make\n\n# both pins_$(BOARD).c and pins.h\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Use a pattern rule here so that make will only call make-stmconst.py once to\n\n# make both modstm_const.h and modstm_qstr.h\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "ports/stm32/mboot/Makefile" : {
      "ObjectId" : "0a5759347f74d105bfe409428833ed1f8e73aac1",
      "LastModified" : "2019-04-08T04:33:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Select the board to build for: if not given on the command line,\n\n# then default to PYBV10.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the build directory is not given, make it reflect the board name.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow the directory containing the board configuration to be specified\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set USE_MBOOT to 1 so that TEXT0_ADDR gets set properly for those boards\n\n# that can be built with or without mboot.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Sanity check that the board configuration directory exists\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Basic Cortex-M flags\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Options for particular MCU series\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Remove uncalled code from the final image.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Debugging/Optimization\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# For convenience, automatically fetch required submodules if they don't exist\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#########################################\n\n# Rules to generate header files\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#########################################\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The following fixes the dependency file.\n\n# See http://make.paulandlesley.org/autodep.html for details.\n\n# Regex adjusted from the above to play better with Windows paths, etc.\n",
        "Line" : 208,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# $(sort $(var)) removes duplicates\n\n#\n\n# The net effect of this, is it causes the objects to depend on the\n\n# object directories (but only for existence), and the object directories\n\n# will be created if they don't exist.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "###########################################\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "ports/teensy/Makefile" : {
      "ObjectId" : "663a86fabd7af17a7e1da059b13211134a3d4b95",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If you set USE_ARDUINO_TOOLCHAIN=1 then this makefile will attempt to use\n\n# the toolchain that comes with Teensyduino\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#$(info %%%%% LIBGCC_FILE_NAME = $(LIBGCC_FILE_NAME))\n\n#$(info %%%%% LIBM_FILE_NAME = $(LIBM_FILE_NAME))\n\n#$(info %%%%% LIBC_FILE_NAME = $(LIBC_FILE_NAME))\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#$(info %%%%% dirname LIBGCC_FILE_NAME = $(dir $(LIBGCC_FILE_NAME)))\n\n#$(info %%%%% dirname LIBM_FILE_NAME = $(dir $(LIBM_FILE_NAME)))\n\n#$(info %%%%% dirname LIBC_FILE_NAME = $(dir $(LIBC_FILE_NAME)))\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Debugging/Optimization\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-DNDEBUG\n",
        "Line" : 71,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : "# USE_MEMZIP\n",
        "Line" : 147,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# USE_FROZEN\n",
        "Line" : 161,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Append any auto-generated sources that are needed by sources listed in\n\n# SRC_QSTR\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Making OBJ use an order-only depenedency on the generated pins.h file\n\n# has the side effect of making the pins.h file before we actually compile\n\n# any of the objects. The normal dependency generation will deal with the\n\n# case when pins.h is modified. But when it doesn't exist, we don't know\n\n# which source files might need it.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Use a pattern rule here so that make will only call make-pins.py once to make\n\n# both pins_$(BOARD).c and pins.h\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "ports/unix/Makefile" : {
      "ObjectId" : "41552bf5c99ae19a104287bc31766172651aa849",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define main target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OS name, for simple autoconfig\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# compiler settings\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Debugging/Optimization\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# _FORTIFY_SOURCE is a feature in gcc/glibc which is intended to provide extra\n\n# security for detecting buffer overflows. Some distros (Ubuntu at the very least)\n\n# have it enabled by default.\n\n#\n\n# gcc already optimizes some printf calls to call puts and/or putchar. When\n\n# _FORTIFY_SOURCE is enabled and compiling with -O1 or greater, then some\n\n# printf calls will also be optimized to call __printf_chk (in glibc). Any\n\n# printfs which get redirected to __printf_chk are then no longer synchronized\n\n# with printfs that go through mp_printf.\n\n#\n\n# In MicroPython, we don't want to use the runtime library's printf but rather\n\n# go through mp_printf, so that stdout is properly tied into streams, etc.\n\n# This means that we either need to turn off _FORTIFY_SOURCE or provide our\n\n# own implementation of __printf_chk. We've chosen to turn off _FORTIFY_SOURCE.\n\n# It should also be noted that the use of printf in MicroPython is typically\n\n# quite limited anyways (primarily for debug and some error reporting, etc\n\n# in the unix version).\n\n#\n\n# Information about _FORTIFY_SOURCE seems to be rather scarce. The best I could\n\n# find was this: https://securityblog.redhat.com/2014/03/26/fortify-and-you/\n\n# Original patchset was introduced by\n\n# https://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html .\n\n#\n\n# Turning off _FORTIFY_SOURCE is only required when compiling with -O1 or greater\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# On OSX, 'gcc' is a symlink to clang unless a real gcc is installed.\n\n# The unix port of MicroPython on OSX must be compiled with clang,\n\n# while cross-compile ports require gcc, so we test here for OSX and\n\n# if necessary override the value of 'CC' set in py/mkenv.mk\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use clang syntax for map file\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use gcc syntax for map file\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Flags to link with pthread library\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Note: you may need to install i386 versions of dependency packages,\n\n# starting with linux-libc-dev:i386\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Path for 64-bit OpenJDK, should be adjusted for other JDKs\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# source files\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# FatFS VFS support\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Append any auto-generated sources that are needed by sources listed in\n\n# SRC_QSTR\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# To use frozen bytecode, put your .py files in a subdirectory (eg frozen/) and\n\n# then invoke make with FROZEN_MPY_DIR=frozen (be sure to build from scratch).\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# force 16 bits to work on both 32 and 64 bit archs\n",
        "Line" : 183,
        "CharPositionInLine" : 28
      },
      "19" : {
        "Text" : "# install micropython in /usr/local/bin\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# uninstall micropython\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# build synthetically fast interpreter for benchmarking\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# build an interpreter for coverage testing and do the testing\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Value of configure's --host= option (required for cross-compilation).\n\n# Deduce it from CROSS_COMPILE by default, but can be overridden.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# install-exec-recursive & install-data-am targets are used to avoid building\n\n# docs and depending on makeinfo\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "ports/windows/Makefile" : {
      "ObjectId" : "88d103e7b0f198b9f665621e0df8c0ca1e2d6509",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# define main target\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# qstr definitions (must come before including py.mk)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include py core make definitions\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# compiler settings\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debugging/Optimization\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-DNDEBUG\n",
        "Line" : 26,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "# source files\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Append any auto-generated sources that are needed by sources listed in\n\n# SRC_QSTR\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ports/zephyr/CMakeLists.txt" : {
      "ObjectId" : "017b0689cef58aebb9d8cc76d39b772f6d2b0eac",
      "LastModified" : "2019-04-11T02:24:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ports/zephyr/Makefile" : {
      "ObjectId" : "b23ee109360b9968b41440d6f60dfb90c5fd6b0c",
      "LastModified" : "2019-04-11T02:24:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is the main Makefile, which uses MicroPython build system,\n\n# but Zephyr arch-specific toolchain and target-specific flags.\n\n# This Makefile builds MicroPython as a library, and then calls\n\n# recursively Makefile.zephyr to build complete application binary\n\n# using Zephyr build system.\n\n#\n\n# To build a \"minimal\" configuration, use \"make-minimal\" wrapper.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default heap size is 16KB, which is on conservative side, to let\n\n# it build for smaller boards, but it won't be enough for larger\n\n# applications, and will need to be increased.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Zephyr (generated) config files - must be defined before include below\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# List of sources for qstr extraction\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we recreate libmicropython, also cause zephyr.bin relink\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# MicroPython's global clean cleans everything, fast\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Clean Zephyr things in Zephyr way\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This rule is for prj_$(BOARD)_merged.conf, not $(CONF_FILE), which\n\n# can be overriden.\n\n# prj_$(BOARD).conf is optional, that's why it's resolved with $(wildcard)\n\n# function.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ports/zephyr/src/Makefile" : {
      "ObjectId" : "36dd8c64efe6a6bd582a6d06656f6c4efb6baab0",
      "LastModified" : "2019-03-14T01:22:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2016 Intel Corporation\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 1,
    "MAKEFILE" : 19
  },
  "ElapsedTime" : 6430
}