{
  "Repository" : "2647",
  "Revision" : "HEAD",
  "ObjectId" : "d279d33a408d1eb0cab35ed8a5244e667e6d9249",
  "CommitTime" : "2019-04-14T11:16:35Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c3f013ff97d8e7bcf5c24d1dd2c741705a600230",
      "LastModified" : "2019-03-31T02:00:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define configuration options\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Components\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optional dependencies\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Alternative dependencies\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build types\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Static libs\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Should be called FreeType_*, but keep it consistent with the FindFreetype.cmake module.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Icons\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make optional dependencies required\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Install destinations\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Default runtime user and data directories\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Helper scrips\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# For custom cmake modules\n",
        "Line" : 260,
        "CharPositionInLine" : 53
      },
      "13" : {
        "Text" : "# Find required libraries\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Force re-checking libraries if the compiler or compiler flags change\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Win32 API\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Ensure we aren't using functionalities not found under Window XP SP1\n",
        "Line" : 309,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Define this so that we don't accitenally use ANSI functions\n",
        "Line" : 311,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# We need to define WINVER for MinGW when requiring anything newer than Win95/WinNT\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Require at least Windows 2000\n",
        "Line" : 324,
        "CharPositionInLine" : 35
      },
      "20" : {
        "Text" : "# Required for \"SHGFP_TYPE_CURRENT\"\n",
        "Line" : 325,
        "CharPositionInLine" : 38
      },
      "21" : {
        "Text" : "# pthread / Win32 threads\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# zlib\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# FreeType\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Freetype may require other libraries depending on how it was configured\n",
        "Line" : 358,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# We always link ZLIB\n",
        "Line" : 367,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "# The main lib we linked above\n",
        "Line" : 370,
        "CharPositionInLine" : 3
      },
      "27" : {
        "Text" : "# We don't know this library so we can't easily search for a static version.\n\n# Just looking for a static library with the same name is generally not enough\n\n# as it too may require other libraries (and naming can differ).\n",
        "Line" : 386,
        "CharPositionInLine" : 3
      },
      "28" : {
        "Text" : "# OpenGL\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# OpenAL\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# SDL\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# we don't need SDL2main!\n",
        "Line" : 455,
        "CharPositionInLine" : 30
      },
      "32" : {
        "Text" : "# Required to avoid linking with SDLmain except for macOS where it is necessary\n\n# due to the need to have NSApplication correctly setup by SDLmain.\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Some builds of SDL1 have references to X11 symbols but do not link to libX11.\n\n# If we do not use GLEW then we do not indirectly link to libX11 anywhere and those\n\n# symbols remain unresolved, resulting in a linker error.\n\n# If libX11 was not actually needed, then the linker will discard it.\n",
        "Line" : 474,
        "CharPositionInLine" : 3
      },
      "34" : {
        "Text" : "# Boost\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# We compile with -fno-rtti and boost is not able to detect that for all compilers.\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Boost 1.62 has a bug in the type_index library:\n\n# BOOST_TYPE_INDEX_REGISTER_CTTI_PARSING_PARAMS are wrong for 32-bit GCC builds in C++14 mode\n\n# This leads to a static assert when (indirectly) including <boost/type_index/ctti_type_index.hpp>\n\n#   /usr/include/boost/type_index/detail/compile_time_type_info.hpp:78:9: error: static assertion failed: TypeIndex library is misconfigured for your compiler. Please define BOOST_TYPE_INDEX_CTTI_USER_DEFINED_PARSING to correct values. See section 'RTTI emulation limitations' of the documentation for more information.\n\n# Fixed in Boost type_index commit b669f0244e4b0bf146f18e9293e6e87842f4bbe0\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Boost 1.69 has warnings about deprecated headers when using Boost.Random\n\n# https://github.com/boostorg/random/issues/49\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Prevent warning in boost/crc.cpp\n\n# warning C4245: 'initializing': conversion from 'int' to 'const boost::detail::mask_uint_t<8>::least', signed/unsigned mismatch\n\n# warning C4245: 'initializing': conversion from 'int' to 'const boost::detail::mask_uint_t<16>::least', signed/unsigned mismatch\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# glm\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Only needed for older GLM versions\n",
        "Line" : 525,
        "CharPositionInLine" : 37
      },
      "41" : {
        "Text" : "# DbgHelp\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Qt\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Needed by the crash reporter\n",
        "Line" : 545,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Check for consistent configuration between SDL and libepoxy/GLEW\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Check for optional functionality and system configuration\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# everyone has had this for ages\n",
        "Line" : 608,
        "CharPositionInLine" : 33
      },
      "47" : {
        "Text" : "# Compiler builtins & language extensions\n",
        "Line" : 632,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# Standard library features\n",
        "Line" : 638,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# Don't expose internal symbols to the outside world by default\n",
        "Line" : 652,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# Define _POSIX_C_SOURCE and _XOPEN_SOURCE for GNU systems\n",
        "Line" : 656,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# Required for dirfd with glibc <= 2.19\n",
        "Line" : 664,
        "CharPositionInLine" : 17
      },
      "52" : {
        "Text" : "# Required not to warn on _BSD_SOURCE with glibc >= 2.20\n",
        "Line" : 665,
        "CharPositionInLine" : 21
      },
      "53" : {
        "Text" : "# Required for fstatat with glibc <= 2.9\n",
        "Line" : 666,
        "CharPositionInLine" : 20
      },
      "54" : {
        "Text" : "# Check compiler builtins & language extensions\n\n# These are a symbols, so we can't use check_symbol_exists\n",
        "Line" : 675,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# CMake has trouble detecting _MM_SET_FLUSH_ZERO_MODE with GCC, check for the includes instead\n",
        "Line" : 743,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# _fxsave is unreliable with GCC, use the builtin directly\n",
        "Line" : 746,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# EKOPath recognizes these but then fails to link\n",
        "Line" : 813,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Whether multiple cuncurrent readdir calls with *different* directory streams are threadsafe\n",
        "Line" : 831,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# TODO Find a more portable check for this - from the glibc documentation:\n\n# POSIX-1.2008 does not guarantee that readdir is thread-safe, even when access to the same\n\n# dirstream is serialized. But in current implementations (including the GNU C Library),\n\n# it is safe to call readdir concurrently on different dirstreams, so there is no need to\n\n# use readdir_r in most multi-threaded programs.\n\n# It is expected that future versions of POSIX will obsolete readdir_r and mandate the level\n\n# of thread safety for readdir which is provided by the GNU C Library and other\n\n# implementations today.\n",
        "Line" : 834,
        "CharPositionInLine" : 3
      },
      "60" : {
        "Text" : "# readdir_r is complicated to use and is deprecated in glibc 2.24\n\n# Prefer readdir if it is know to be threadsafe\n",
        "Line" : 854,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Sources\n",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Basic platform abstraction sources\n",
        "Line" : 1145,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Extra platform abstraction - depends on the crash handler or SDL\n",
        "Line" : 1164,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Crash handler sources\n",
        "Line" : 1173,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Profiler sources\n",
        "Line" : 1188,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# TODO manually specify theese like we do for the tools\n",
        "Line" : 1245,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Check for optional / alternative subsystem implementations\n",
        "Line" : 1253,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Audio\n",
        "Line" : 1255,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Graphics\n",
        "Line" : 1271,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# SDL backends require OpenGL\n",
        "Line" : 1283,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# Windowing / input\n",
        "Line" : 1289,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# we use libepoxy/GLEW for that\n",
        "Line" : 1302,
        "CharPositionInLine" : 33
      },
      "73" : {
        "Text" : "# Logging\n",
        "Line" : 1305,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Filesystem\n",
        "Line" : 1316,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# BOOST_SCOPED_ENUM is implemented differently if compiled with C++11 support\n\n# This means the Boost.Filesystem ABI depends on what C++ version was used\n\n# to compile the library - check for that!\n",
        "Line" : 1331,
        "CharPositionInLine" : 1
      },
      "76" : {
        "Text" : "# Different names for different Boost versions :/\n",
        "Line" : 1342,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "# Crash reporter\n",
        "Line" : 1351,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Don't bother building arxcrashreporter if it will never be used.\n",
        "Line" : 1364,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Needed for clock_gettime and boost::interprocess on some system.\n",
        "Line" : 1374,
        "CharPositionInLine" : 1
      },
      "80" : {
        "Text" : "# Using include() for now as add_subdirectory causes problems with uses in qrc files\n",
        "Line" : 1416,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Set the icon for the Windows executable by adding this resource file to the sources\n",
        "Line" : 1419,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Prepare sources\n",
        "Line" : 1425,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Create source groups\n",
        "Line" : 1427,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Add executables\n",
        "Line" : 1480,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Create a dummy file to prevent a RCC warning\n",
        "Line" : 1557,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Build and link executables\n",
        "Line" : 1763,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Custom make targets\n",
        "Line" : 1772,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#build the documentation\n",
        "Line" : 1778,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# Install Arx Libertatis data files\n\n# TODO these should be zipped up once we support that\n",
        "Line" : 1816,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Also tell arx where to find the not yet installed data\n\n# This is required to run arx from the build directory without installing\n",
        "Line" : 1819,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Install the data install script\n",
        "Line" : 1834,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Install icon and desktop entry\n",
        "Line" : 1839,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Install man pages\n",
        "Line" : 1857,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Print a configuration summary\n",
        "Line" : 1871,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Detect configuration errors\n",
        "Line" : 1924,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Check for consistent configuration between SDL and libepoxy/GLEW\n",
        "Line" : 1948,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 97
    },
    "cmake/BuildSystem.cmake" : {
      "ObjectId" : "2b6e11afdbfaedbbb5d59959016dc4bc5501a0c4",
      "LastModified" : "2018-06-25T05:10:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Meta build system for unity build and builds with shared sources between different binaries.\n\n#\n\n# Add executables using add_executable_shared(EXE TYPE SRC LIBS [EXTRA [INSTALL]]).\n\n# Add libraries using add_library_shared(LIB SRC LIBS [EXTRA [INSTALL]]).\n\n#\n\n# Build the binaries using either separate_build(), shared_build() or unity_build().\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add compile flags for specific source files\n\n#  SOURCES Source(s) to add flags to\n\n#  FLAG    String containing the flag(s) to add\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add compile definitions for specific source files\n\n#  SOURCES Source(s) to add definitjons to\n\n#  ...     Compile definitons to add\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create a unity build file for the binary UB_SUFFIX with the sources stored in the\n\n# variable named by SOURCE_VARIABLE_NAME. The name of the resulting unity build file\n\n# will be stored in the variable named by SOURCE_VARIABLE_NAME.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Sort the file list to ensure we get the same files order on all machines\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Generate a unique filename for the unity build translation unit\n",
        "Line" : 58,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Open the ub file\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Add include statement for each translation unit\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# .rc, .mm, .manifest and .c files need to be compiled separately\n",
        "Line" : 78,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Exclude all translation units from compilation\n",
        "Line" : 82,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# While it's nice to see what actual source files are bing included, gcc\n\n# and some gcc-compatible compilers such as clang show a warning and/or\n\n# call stack for #pragma message.\n\n# This makes actual warnings much harder to notice, so we only enable\n\n# the message for whitelisted compilers.\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Complement list of translation units with the name of ub\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Put ub file at the root of the project\n",
        "Line" : 136,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Resource files are only used on Windows\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Older CMake versions and MingGW do not support manifest files - manually create the resource file\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# MinGW cannot link multiple resource files - merge them\n",
        "Line" : 180,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Change the type of a binary.\n\n#  BIN   Name of the binary to change the type of.\n\n#  TYPE  The type to change the binary to.\n\n# Valid types:\n\n#  WIN32  Create a GUI executable.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Change the install directory of a binary.\n\n#  BIN  Name of the binary to change the type of.\n\n#  DIR  Where to install the binary.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add include directories to a binary\n\n#  BIN  Name of the binary to add include directories to.\n\n#  ...  Include directories to add to the binary.\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add an executable to be build by either separate_build(), shared_build() or unity_build()\n\n#  EXE   Name of the executable to add.\n\n#  SRC   The executable's source files.\n\n#  LIBS  Libraries to link the executable against.\n\n#  EXTRA Additional arguments to pass to add_executable() but not shared with\n\n#        other binaries or included in unity builds.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Add a library to be build by either separate_build(), shared_build() or unity_build()\n\n#  LIB   Name of the library to add.\n\n#  SRC   The librarie's source files.\n\n#  LIBS  Libraries to link the library against.\n\n#  EXTRA Additional arguments to pass to add_library() but not shared with\n\n#        orther binaries or included in unity builds.\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Calculate the intersection of the lists SRC1 and SRC2 and store the result in the variable named by DEST.\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Find common sources and extract object libraries.\n",
        "Line" : 353,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# Find sources common to all binaries in the current set.\n",
        "Line" : 366,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Resource files need to be merged for MinGW - never split them up into separate targets\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# We found common sources!\n",
        "Line" : 389,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Add a new library for the common sources\n",
        "Line" : 407,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Remove sources from binaries and link the library instead.\n",
        "Line" : 416,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# these will be included globally later on\n",
        "Line" : 449,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# Cannot set per-target (SYSTEM) includes\n",
        "Line" : 501,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# For macOS, CMake maps VERSION to the -current_version linker propery\n\n# and SOVERSION to *both* the ABI version in the file name and to the \n\n# -compatibility_version linker property.\n\n# The -current_version and -compatibility_version have restrictions\n\n# to the size and number of the version components and must be \n\n# comparable to each other: The run-time -current_version must be\n\n# greater than or eaqual to the link-time -compatibility_version.\n\n# This is not guaranteed by VERSION/SOVERSION values intended for\n\n# ELF systems such as Linux.\n\n# On the other hand, ELF (and Windows) does not support a concept like\n\n# -compatibility_version.\n\n# Disable the check on macOS as well by not setting the VERSION property.\n",
        "Line" : 511,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# CMake treats version number 0 as special for macOS builds.\n",
        "Line" : 529,
        "CharPositionInLine" : 3
      },
      "32" : {
        "Text" : "# Build each binary separately.\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Build each source file separately and extract common source files into static libraries.\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Find common sources and extract static libraries.\n",
        "Line" : 563,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Require two source sets before calling _shared_build_helper so we don't\n\n# create static libraries for individual binaries!\n",
        "Line" : 567,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Build each binary by including all the source files into one big master file.\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "cmake/BuildType.cmake" : {
      "ObjectId" : "f60351e42871131bbd4689ac5f56dfb9532497f1",
      "LastModified" : "2019-02-23T10:19:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optimize for link speed in developer builds\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Merge symbols and discard unused symbols\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Disable deprecation warnings\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# TODO TEMP - disable very noisy warning\n\n# Conversion from 'A' to 'B', possible loss of data\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# warning C4456: declaration of 'xxx' hides previous local declaration\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# TODO triggers on nested BOOST_FOREACH, remove after moving to C++11\n",
        "Line" : 53,
        "CharPositionInLine" : 27
      },
      "6" : {
        "Text" : "# warning C4459: declaration of 'xxx' hides global declaration\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# TODO triggers on BOOST_SCOPE_EXIT, remove after moving to C++11\n",
        "Line" : 55,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : "# warning C4100: 'xxx': unreferenced formal parameter\n",
        "Line" : 58,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# has false positives\n",
        "Line" : 59,
        "CharPositionInLine" : 28
      },
      "10" : {
        "Text" : "# warning C4127: conditional expression is constant\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# warning C4201: nonstandard extension used: nameless struct/union\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# used in GLM\n",
        "Line" : 64,
        "CharPositionInLine" : 27
      },
      "13" : {
        "Text" : "# warning C4250: 'xxx': inherits 'std::basic_{i,o}stream::...' via dominance\n",
        "Line" : 66,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# harasses you when inheriting from std::basic_{i,o}stream\n",
        "Line" : 67,
        "CharPositionInLine" : 28
      },
      "15" : {
        "Text" : "# warning C4324: 'xxx': structure was padded due to alignment specifier\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# warning C4503: 'xxx': decorated name length exceeded, name was truncated\n",
        "Line" : 72,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# warning C4512: 'xxx' : assignment operator could not be generated\n",
        "Line" : 74,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# not all classes need an assignment operator...\n",
        "Line" : 75,
        "CharPositionInLine" : 28
      },
      "19" : {
        "Text" : "# warning C4701: potentially uninitialized local variable 'xxx' used\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# warning C4703: potentially uninitialized local pointer variable 'xxx' used\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# warning C4718: 'xxx' : recursive call has no side effects, deleting\n",
        "Line" : 82,
        "CharPositionInLine" : 3
      },
      "22" : {
        "Text" : "# warns in Qt\n",
        "Line" : 83,
        "CharPositionInLine" : 28
      },
      "23" : {
        "Text" : "# Enable exceptions\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Disable RTTI\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# No RTTI\n",
        "Line" : 105,
        "CharPositionInLine" : 24
      },
      "26" : {
        "Text" : "# Enable multiprocess build\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Disable Run time checks\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Change runtime library from \"Multi-threaded Debug DLL\" to \"Multi-threaded DLL\"\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Remove definition of _DEBUG as it might conflict with libs we're linking with\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Force compiler warning level\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Turn on standards compliant mode\n\n# /Za is not compatible with /fp:fast, leave it off\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# /permissive- enables /Zc:twoPhase wich would be good if two phase lookup wasn't still broken in VS 2017\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Avoid warning during link\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# Always build with debug information\n",
        "Line" : 159,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Enable compiler optimization in release\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Optimize for link speed in developer builds\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Merge symbols and discard unused symbols\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# GCC or Clang (and compatible)\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# part of -Wconversion\n",
        "Line" : 225,
        "CharPositionInLine" : 38
      },
      "40" : {
        "Text" : "# part of -Wconversion\n",
        "Line" : 226,
        "CharPositionInLine" : 35
      },
      "41" : {
        "Text" : "# part of -Wconversion\n",
        "Line" : 227,
        "CharPositionInLine" : 36
      },
      "42" : {
        "Text" : "# part of -Wconversion\n",
        "Line" : 228,
        "CharPositionInLine" : 37
      },
      "43" : {
        "Text" : "# In older GCC versions this warning is too strict\n",
        "Line" : 240,
        "CharPositionInLine" : 3
      },
      "44" : {
        "Text" : "# In older Clang verstions this warns on BOOST_SCOPE_EXIT\n",
        "Line" : 243,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "# For icc this warning is too strict\n",
        "Line" : 245,
        "CharPositionInLine" : 3
      },
      "46" : {
        "Text" : "# TODO for some reason this warns in /usr/include/boost/type_traits/alignment_of.hpp for -m32 builds\n",
        "Line" : 251,
        "CharPositionInLine" : 3
      },
      "47" : {
        "Text" : "# These are too noisy to enable right now but we still want to track new warnings.\n\n# TODO enable by default as soon as most are silenced\n",
        "Line" : 259,
        "CharPositionInLine" : 3
      },
      "48" : {
        "Text" : "# warns on casting from pointer to function pointer\n",
        "Line" : 261,
        "CharPositionInLine" : 44
      },
      "49" : {
        "Text" : "# very noisy\n",
        "Line" : 262,
        "CharPositionInLine" : 31
      },
      "50" : {
        "Text" : "# add_cxxflag(\"-Wsign-conversion\") # part of -Wconversion\n\n# add_cxxflag(\"-Wshorten-64-to-32\") # part of -Wconversion\n",
        "Line" : 263,
        "CharPositionInLine" : 3
      },
      "51" : {
        "Text" : "# has false positives\n",
        "Line" : 265,
        "CharPositionInLine" : 38
      },
      "52" : {
        "Text" : "# has false positives\n",
        "Line" : 266,
        "CharPositionInLine" : 33
      },
      "53" : {
        "Text" : "# add_cxxflag(\"-Wnull-dereference\") not that useful without deduction path\n",
        "Line" : 268,
        "CharPositionInLine" : 3
      },
      "54" : {
        "Text" : "# Possible optimization opportunities\n",
        "Line" : 270,
        "CharPositionInLine" : 3
      },
      "55" : {
        "Text" : "# icc\n",
        "Line" : 281,
        "CharPositionInLine" : 3
      },
      "56" : {
        "Text" : "# '... was declared but never referenced'\n\n# While normally a sensible warning, it also fires when a member isn't used for\n\n# *all* instantiations of a template class, making the warning too annoying to\n\n# be useful\n",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# 'external function definition with no prior declaration'\n\n# This gets annoying fast with small inline/template functions.\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# 'offsetof applied to non-POD (Plain Old Data) types is nonstandard'\n\n# This triggers Qt moc-generated headers\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# 'printf/scanf format not a string literal and no format arguments'\n\n# balks when passing NULL as the format string\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# 'missing return statement at end of non-void function' even with arx_unreachable()\n\n# ICC does no handle the noreturn attribute with the comma operator\n",
        "Line" : 298,
        "CharPositionInLine" : 5
      },
      "61" : {
        "Text" : "# -Wuninitialized causes too many false positives in older gcc versions\n",
        "Line" : 304,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# GCC is 'clever' and silently accepts -Wno-*  - check for the non-negated variant\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Xcode does not support -isystem yet\n",
        "Line" : 315,
        "CharPositionInLine" : 3
      },
      "64" : {
        "Text" : "# to add checks for (undefined) signed integer overflow\n",
        "Line" : 329,
        "CharPositionInLine" : 25
      },
      "65" : {
        "Text" : "# libc++\n",
        "Line" : 337,
        "CharPositionInLine" : 38
      },
      "66" : {
        "Text" : "# libc++'s debug checks fail with -fsanitize=undefined\n",
        "Line" : 338,
        "CharPositionInLine" : 3
      },
      "67" : {
        "Text" : "# libstdc++\n",
        "Line" : 340,
        "CharPositionInLine" : 63
      },
      "68" : {
        "Text" : "# TODO For some reason this check succeeds on macOS, but then\n\n# flag causes the actual build to fail :(\n",
        "Line" : 354,
        "CharPositionInLine" : 3
      },
      "69" : {
        "Text" : "# Link as few libraries as possible\n\n# This is much easier than trying to decide which libraries are needed for each\n\n# system\n",
        "Line" : 357,
        "CharPositionInLine" : 3
      },
      "70" : {
        "Text" : "# set debug symbol level to -g3\n",
        "Line" : 365,
        "CharPositionInLine" : 3
      },
      "71" : {
        "Text" : "# disable optimizations\n",
        "Line" : 373,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 72
    },
    "cmake/CXXVersionCheck.cmake" : {
      "ObjectId" : "457fd9af42e1ad0bfbf5b1243a41f8ea7ad56671",
      "LastModified" : "2018-12-08T13:50:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Only introduced with update 3 of MSVC 2015\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Check if the compiler supports the -std flag at all\n\n# Don't actually use the flag to allow for compiler extensions a la -sdt=gnu++03\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# Compiler does not support he -std flag, assume the highest supported C++ version is available\n\n# by default or can be enabled by CMake and rely on tests for individual features.\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Tell CMake about our desired C++ version so that it doesn't override our value with a lower version.\n\n# We check -std ourselves first because\n\n# - This feature is new in CMake 3.1\n\n# - Not all CMake versions know how to check for all C++ versions\n\n# - CMake doesn't tell us what versions are available\n",
        "Line" : 66,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/CompileCheck.cmake" : {
      "ObjectId" : "363209685b5204890bdc212b68f92eba6699ee06",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: In CMake before 3.0 set(var \"\" PARENT_SCOPE) *unsets* the variable in the\n\n# parent scope instead of setting it to the empty string.\n\n# This means if(var STREQUAL \"\") will be false since var is not defined and thus not expanded.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake already has a check_cxx_compiler_flag macro in CheckCXXCompilerFlag, but\n\n# it prints the result variable in the output (which is ugly!) and also uses it\n\n# as a key to cache checks - so it would need to be unique for each flag.\n\n# Unfortunately it also naively pastes the variable name inside a regexp so\n\n# if we tried to use the flag itself in the variable name it will fail for -std=c++11.\n\n# But we can at least use the expressions for warnings from that macro (and more):\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# general\n\n# GNU\n\n# Clang\n\n# MSVC\n\n# MSVC, any lang\n\n# Intel\n\n# Intel\n\n# Intel\n\n# Intel\n\n# Intel\n\n# HP\n\n# SunPro\n\n# XL\n\n# AIX\n\n# PGI\n\n# Open64\n",
        "Line" : 27,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : "# Set the flags to check\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Check if we can compile and link a simple file with the new flags\n",
        "Line" : 58,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Restore the old flags\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# See if we can link a simple program with the library using the configured c++ compiler\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "##############################################################################\n\n# Check that a a library actually works for the current configuration\n\n# This is neede because CMake prefers /usr/lib over /usr/lib32 for -m32 builds\n\n# See https://public.kitware.com/Bug/view.php?id=11260\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The main point of this is to work around CMakes ignorance of lib32.\n\n# This doesn't really apply for systems that don't use a unix-like library dir layout.\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check if we can link to the full path found by find_package\n",
        "Line" : 239,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Check if the linker is smarter than cmake and try to link with only the library name\n",
        "Line" : 247,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Force cmake to search again, as the cached library doesn't work\n",
        "Line" : 264,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 12
    },
    "cmake/ConfigureFileScript.cmake" : {
      "ObjectId" : "ec9e43a2d67b5112b46438359cdd141feccd8887",
      "LastModified" : "2016-05-17T02:53:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CreateSourceGroups.cmake" : {
      "ObjectId" : "c18aebf286724c88a4eddd7f8e41a549c4015ffb",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Accepts a variable holding the source files\n\n# and creates source groups (for VS, Xcode etc)\n\n# that replicate the folder hierarchy on disk\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindCppUnit.cmake" : {
      "ObjectId" : "570aba7c2badefc9b391ee1dabce4b684743de16",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the CppUnit library and include path.\n\n# Once done this will define\n\n#\n\n# CppUnit_FOUND\n\n# CppUnit_INCLUDE_DIR   Where to find cppunit/*.h\n\n# CppUnit_LIBRARIES     The cppunit library\n\n# CppUnit_DEFINITIONS   Definitions to use when compiling code that uses cppunit\n\n#\n\n# Typical usage could be something like:\n\n#   find_package(CppUnit REQUIRED)\n\n#   include_directories(SYSTEM ${CppUnit_INCLUDE_DIR})\n\n#   add_definitions(${CppUnit_DEFINITIONS})\n\n#   ...\n\n#   target_link_libraries(myexe ${CppUnit_LIBRARIES})\n\n#\n\n# The following additional options can be defined before the find_package() call:\n\n# CppUnit_USE_STATIC_LIBS  Statically link against cppunit (default: OFF)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 34,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 35,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 36,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Prefer libraries in the same prefix as the include files\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CppUnit_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindDbgHelp.cmake" : {
      "ObjectId" : "23ab9f704e412d1688f2036ebab361fac36feffb",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find DbgHelp library and include path.\n\n# Once done this will define\n\n#\n\n# DBGHELP_FOUND\n\n# DBGHELP_INCLUDE_DIR\n\n# DBGHELP_LIBRARIES\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle the REQUIRED argument and set DBGHELP_FOUND\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindEpoxy.cmake" : {
      "ObjectId" : "ba1f67a5543417f51e3fcdf7df2bbad6212db733",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the libepoxy library and include path.\n\n# Once done this will define\n\n#\n\n# EPOXY_FOUND\n\n# Epoxy_INCLUDE_DIR   Where to find epoxy/gl.h\n\n# Epoxy_LIBRARIES     The epoxy library\n\n#\n\n# Typical usage could be something like:\n\n#   find_package(Epoxy REQUIRED)\n\n#   include_directories(SYSTEM ${Epoxy_INCLUDE_DIR})\n\n#   ...\n\n#   target_link_libraries(myexe ${Epoxy_LIBRARIES})\n\n#\n\n# The following additional options can be defined before the find_package() call:\n\n# Epoxy_USE_STATIC_LIBS  Statically link against libepoxy (default: OFF)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prefer libraries in the same prefix as the include files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set EPOXY_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The main lib we linked above\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/FindGLEW.cmake" : {
      "ObjectId" : "63930587b099f851517fb72055cc4ed6d505a1aa",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GLEW library and include path.\n\n# Once done this will define\n\n#\n\n# GLEW_FOUND\n\n# GLEW_INCLUDE_DIR   Where to find GL/glew.h\n\n# GLEW_LIBRARIES     The glew library\n\n# GLEW_DEFINITIONS   Definitions to use when compiling code that uses glew\n\n#\n\n# Typical usage could be something like:\n\n#   find_package(GLEW REQUIRED)\n\n#   include_directories(SYSTEM ${GLEW_INCLUDE_DIR})\n\n#   add_definitions(${GLEW_DEFINITIONS})\n\n#   ...\n\n#   target_link_libraries(myexe ${GLEW_LIBRARIES})\n\n#\n\n# The following additional options can be defined before the find_package() call:\n\n# GLEW_USE_STATIC_LIBS  Statically link against glew (default: OFF)\n\n#\n\n# Adapted from:\n\n#\thttp://nvidia-texture-tools.googlecode.com/svn-history/r96/trunk/cmake/FindGLEW.cmake\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prefer libraries in the same prefix as the include files\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GLEW_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindGLM.cmake" : {
      "ObjectId" : "74bcbf7a2d4089191692844628f62a2db998f15d",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindGLM - attempts to locate the glm matrix/vector library.\n\n#\n\n# This module defines the following variables (on success):\n\n#   GLM_INCLUDE_DIRS  - where to find glm/glm.hpp\n\n#   GLM_FOUND         - if the library was successfully located\n\n#\n\n# It is trying a few standard installation locations, but can be customized\n\n# with the following variables:\n\n#   GLM_ROOT_DIR      - root directory of a glm installation\n\n#                       Headers are expected to be found in either:\n\n#                       <GLM_ROOT_DIR>/glm/glm.hpp           OR\n\n#                       <GLM_ROOT_DIR>/include/glm/glm.hpp\n\n#                       This variable can either be a cmake or environment\n\n#                       variable. Note however that changing the value\n\n#                       of the environment varible will NOT result in\n\n#                       re-running the header search and therefore NOT\n\n#                       adjust the variables set by this module.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Carsten Neumann\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# default search dirs\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check environment variable\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put user specified location at beginning of search\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate header\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindInkscape.cmake" : {
      "ObjectId" : "9c6ca65e3e4a7c6eeb1872ade2740da711770e97",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the Inkscape command-line SVG rasterizer\n\n# Once done this will define\n\n#\n\n# Inkscape_FOUND\n\n# Inkscape_EXECUTABLE   Where to find Inkscape\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set Inkscape_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindOpenALEFX.cmake" : {
      "ObjectId" : "4acacad5d44be5ee8cbe88fc9193a4862d9bb04b",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hints and paths from FindOpenAL.cmake\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 17,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 18,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindOptiPNG.cmake" : {
      "ObjectId" : "7f740e99248baf48339649aaf702e2d51d67a2dd",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the OptiPNG PNG compression optimizer\n\n# Once done this will define\n\n#\n\n# OptiPNG_FOUND\n\n# OptiPNG_EXECUTABLE   Where to find OptiPNG\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OptiPNG_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindQt.cmake" : {
      "ObjectId" : "2d99fe34ac131fa628897e7c9f7db69c43d7a5ca",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If the user has not requested a specific version, don't spam them\n\n# when either one is not found.\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Try to find Qt 5 modules\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle static Qt 5 windows builds\n\n# Even though Qt ships it's own CMake configuration files, they do not add\n\n# all the required dependencies for their imported static library targets\n\n# - and those they do add are set with the wrong property :/\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Does not look like a static library\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Qt sets this for Qt5::Gui on either ANGLE or opengl\n",
        "Line" : 98,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Just statically linking the plugin is not enough\n",
        "Line" : 128,
        "CharPositionInLine" : 7
      },
      "6" : {
        "Text" : "# Otherwise, look for Qt 4\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QT_VERSION_MAJOR check required because of FindQt4.cmake bug\n",
        "Line" : 183,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Always link agains release versions of the Qt libraries\n\n# This is important on windows where we would otherwise end up\n\n# with inconsistencies in the stdlib configuration.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Get a path to display for the config log\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "5ba11f831760b7effe96b570c97e2e211eabeb62",
      "LastModified" : "2018-11-20T06:02:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the SDL2 library and include path.\n\n# Once done this will define\n\n#\n\n# SDL2_FOUND\n\n# SDL2_INCLUDE_DIR   Where to find SDL.h\n\n# SDL2_LIBRARY       The libSDL2 library only\n\n# SDL2_LIBRARIES     All libraries to link against for SDL2\n\n#\n\n# Typical usage could be something like:\n\n#   find_package(SDL2 REQUIRED)\n\n#   include_directories(SYSTEM ${SDL2_INCLUDE_DIR})\n\n#   ...\n\n#   target_link_libraries(myexe ${SDL2_LIBRARIES})\n\n#\n\n# The following additional options can be defined before the find_package() call:\n\n# SDL2_USE_STATIC_LIBS  Statically link against libsdl2 (default: OFF)\n\n# SDL2_BUILDING_LIBRARY Don't link against SDL2main - this means the user is responsible\n\n#                       for abstracting their own main() from OS-specific entry points.\n\n#\n\n# For macOS, this module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n#\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize macOS frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On macOS, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 77,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 78,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 79,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Prefer libraries in the same prefix as the include files\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is mainly for Windows. Unix platforms provide SDL2main for compatibility\n\n# even though they don't necessarily need it.\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Workaround for https://bugzilla.libsdl.org/show_bug.cgi?id=4362\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# If we're linking against a static libSDL2 we also need to link against some other\n\n# libraries. However, which libraries to link varies wildly depending on how SDL2 was\n\n# configured, so we must trust pkg-config.\n",
        "Line" : 167,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Filter out libSDL2 references as we want to link that statically!\n",
        "Line" : 172,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 179,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For macOS, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n",
        "Line" : 184,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 12
    },
    "cmake/Findiconutil.cmake" : {
      "ObjectId" : "36faa9ee9b51ab8e7986390260c7f888db1bfd01",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the XCode iconutil tool or compatible icnsutil re-implementation\n\n# Once done this will define\n\n#\n\n# iconutil_FOUND\n\n# iconutil_EXECUTABLE   Where to find iconutil/icnsutil\n\n#\n\n# For non-macOS platforms, icnsutil can be found at https://github.com/pornel/libicns\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set iconutil_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Icons.cmake" : {
      "ObjectId" : "1a2e86ef898601e566572b2cb12e5a6d16e431b5",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Where to look for source dirs\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add an icon generated from source icons\n\n#\n\n# Usage: add_icon([TARGET] name\n\n#   source.svg source_size_spec [source_render_size] [source2.svg …]\n\n#   [ICO ico_size_specs]\n\n#   [ICNS icns_size_specs]\n\n#   [ICONSET overview_size_specs]\n\n#   [PNG png_size_specs]\n\n#   [OVERVIEW overview_size_specs]\n\n#   [ALL]\n\n#   [INSTALL]\n\n# )\n\n#\n\n# TARGET              By default a target called ${name}-icon will be created that\n\n#                     depends on all the output files. With this option the target\n\n#                     will be called just ${name}.\n\n#\n\n# source.svg          The .svg file to generate the icon from.\n\n#                     Multiple .svg files with their own size_specs can be added.\n\n# source_size_spec    The icon size to use the preceding .svg for\n\n# source_render_size  The resulution to rasterize the .svg at\n\n#                     If this differs from the source_size_spec the result will be scaled.\n\n#\n\n# ICO                 Generate a Windows .ico file containing the following sizes\n\n#                     The path to the .ico file will be stored in ${${name}.ico}.\n\n#                     The path to a resource script will be stored in ${${name}-icon.rc}.\n\n# ICNS                Generate a macOS .icns file containing the following sizes\n\n#                     The path to the .icns file will be stored in ${${name}.icns}.\n\n# ICONSET             Generate a set of .png icons for use with the icon theme spec\n\n#                     The path to the icon files will be stored in ${${name}-iconset}.\n\n# PNG                 Generate a set of portable .png icons\n\n#                     The path to the icon files will be stored in ${${name}-png}.\n\n#                     The path to the first icon will be stored in ${${name}.png}.\n\n# OVERVIEW            Generate a montage of different icon sizes\n\n#                     The path to the file will be stored in ${${name}-icon-overview}.\n\n#\n\n# The icon size specs for both the source files and the generated files\n\n# can be on of the following:\n\n#  ${height}                Generate an icon with display and pixel resolution ${height}.\n\n#  ${height}@${multiplier}  Generate an icon with display resolution ${height} and\n\n#                           pixel resolution ${height} * ${multiplier}.\n\n#  ${height}@${bits}bit     Generate an icon with display and pixel resolution ${height},\n\n#                           but with only ${bits} bits used for the color/alpha channels.\n\n#                           The bit depths is only used for ICO icons and ignored\n\n#                           everywhere else.\n\n#\n\n# The order of the sizes only matters for ICO, PNG and OVERVIEW icons\n\n#  For ICO icons it determines the order in the .ico file and should be sorted from\n\n#    smallest to largest. For each dimension the size specs with higher bit depths\n\n#    should be listed first.\n\n#  For PNG icons the first size is used as the default size.\n\n#    The remaining order is ignored.\n\n#  For OVERVIEWs the order determines the order of the icons in the overview\n\n#  For all other icon types the order is ignored.\n\n#\n\n# ALL                 By default only those icon types listed in ICON_TYPE will be built,\n\n#                     unless ICON_TYPE is \"all\" or only sizes for the PNG type have been\n\n#                     defined.\n\n#                     When using this option, all icon types with defined sizes are built.\n\n#\n\n# INSTALL             Install the generated icons to standard system locations.\n\n#                     ICO icons are never installed\n\n#                     ICNS icons are installed to ${ICONDIR}\n\n#                     ICONSET icons are installed to ${ICONTHEMEDIR}/${size}x${size}/apps\n\n#                     PNG icons are installed to ${ICONDIR}\n\n#                     OVERVIEWs are never installed\n\n#\n\n# Variables used by this function:\n\n#\n\n# ICON_SOURCE_DIRS     Relative .svg sources are resolved to paths in this list.\n\n#                      Additionally, needed output or intermediate icon files are found\n\n#                      in the paths in this list, they are used instead of re-generating\n\n#                      those files.\n\n#\n\n# ICON_TYPE            The icon type(s) to generate. Can be \"none\", \"all\" or a list of one\n\n#                      or more of \"ico\", \"icns\", \"iconset\", \"png\" and \"overview\".\n\n#                      Ignored if only sizes for the PNG type are specified or if the\n\n#                      ALL option is used.\n\n#\n\n# Inkscape_OPTIONS     Additional command-line options to pass to inkscape.\n\n#\n\n# ImageMagick_OPTIONS  Additional command-line options to pass to the Image Magick\n\n#                      convert, mogrify and montage commands.\n\n#\n\n# OptiPNG_OPTIONS      Additional command-line options to pass to optipng.\n\n#\n\n# iconutil_OPTIONS     Additional command-line options to pass to iconutil / icnsutil.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parse arguments\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Clean output variables\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Generate icons\n",
        "Line" : 220,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Windows icon\n",
        "Line" : 240,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# No need to install the .ico as it is typically linked into the executable\n\n# Provide a resource script to do just that\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# macOS icon\n",
        "Line" : 318,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Linux icon\n\n# https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html\n",
        "Line" : 384,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Portable icon\n",
        "Line" : 421,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Icon size comparison chart\n",
        "Line" : 464,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# Helper functions\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Parse an icon source definition\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find a source or prebuilt icon in ICON_SOURCE_DIRS\n\n#\n\n# Params:\n\n#  var   Variable to receive the path to the icon file.\n\n#  name  Icon filename\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Get the display size from an icon size spec\n\n#\n\n# Params:\n\n#  var   Variable to receive the display size\n\n#  spec  Icon size spec\n",
        "Line" : 597,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get the pixel size from an icon size spec\n\n#\n\n# Params:\n\n#  var   Variable to receive the pixel size\n\n#  spec  Icon size spec\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Get the bit depth from an icon size spec\n\n#\n\n# Params:\n\n#  var   Variable to receive the bit depth\n\n#  spec  Icon size spec\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Remove bit depth iformation from an icon size spec\n\n#\n\n# Params:\n\n#  var   Variable to receive the modified size spec\n\n#  spec  Icon size spec\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#  Add an optional OptiPNG step to a generated .png file\n\n#\n\n# Params:\n\n#  file  The file to add the optimization step to\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Get a .png file for a specific icon size\n\n#\n\n# Creates the file from scalable or larger versions if needed.\n\n#\n\n# Params:\n\n#  var   Variable to receive the .png file name or null\n\n#  spec  Icon size to get or create\n",
        "Line" : 696,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Return early if we have already generated the file\n",
        "Line" : 710,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Use prebuilt files if available\n",
        "Line" : 717,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Look for the source file with the next larger display size\n",
        "Line" : 725,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# Exact natch\n",
        "Line" : 735,
        "CharPositionInLine" : 3
      },
      "24" : {
        "Text" : "# First match\n",
        "Line" : 746,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Closer match\n",
        "Line" : 752,
        "CharPositionInLine" : 5
      },
      "26" : {
        "Text" : "# Closer match\n",
        "Line" : 757,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# Closer match\n",
        "Line" : 760,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# If the source display size is larger, drop the @nx suffix\n\n# and use the multiplied size instead to avoid duplicated rescales\n",
        "Line" : 779,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Rasterize the source file\n",
        "Line" : 788,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# We let the user override the rasterize size\n\n# If they have done so we need to scale the result to the source pixel size\n",
        "Line" : 814,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Scale the source file to the desired size\n",
        "Line" : 843,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 32
    },
    "cmake/PrintConfiguration.cmake" : {
      "ObjectId" : "8df454583220624634e079e751c2bfecabbacab8",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/StyleCheck.cmake" : {
      "ObjectId" : "2f2b9ae7cb76722300b0e4c697905751eccf6df4",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Insists on including evrything in the .cpp file even if it is included in the header.\n\n# This behaviour conflicts with other tools.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Too many false positives and not very helpful error messages.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No thanks.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ugh!\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Yes it is!\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Why?\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# \"For a static/global string constant, use a C style string\"\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Having classes with virtual methods but without a virtual destructor is not always wrong!\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO consider enabling these and fixing the warnings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Complains about any c-style cast\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Very noisy and perhaps a matter of taste.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Complains about using short, long, etc.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Complains about non-const references as parameters\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Has false positives and is already covered by -pedantic or -Wvla\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# TODO enable these!\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Unsafe functions.\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Very much known...\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Add a target that runs cpplint.py\n\n#\n\n# Parameters:\n\n# - TARGET_NAME the name of the target to add\n\n# - SOURCES_LIST a complete list of source and include files to check\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/UseStaticLibs.cmake" : {
      "ObjectId" : "12e57b0bff149b57f4864b12d5733342f0043616",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On Windows we can't really tell import libraries from proper static libraries.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/VersionScript.cmake" : {
      "ObjectId" : "451c1890318ee7c0eb58ee56198a9331662ed1ed",
      "LastModified" : "2018-09-16T19:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake script that reads a VERSION file and the current git history and the calls configure_file().\n\n# This is used by version_file() in VersionString.cmake\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configure_file doesn't handle newlines correctly - pre-escape variables\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Escape the escape character and quotes\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Pull newlines out of string\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Check for a git directory and fill in the git commit hash if one exists.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove the first for characters from git_head to get git_ref.\n\n# We can't use a length of -1 for string(SUBSTRING) as cmake < 2.8.5 doesn't support it.\n",
        "Line" : 54,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Create variables for all prefixes of the git comit ID.\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/VersionString.cmake" : {
      "ObjectId" : "64362c9e1f4cc5c14ace37753d3a04c22167df9b",
      "LastModified" : "2019-04-14T11:16:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a rule to generate a version string at compile time.\n\n#\n\n# An optional fifth argument can be used to add additional cmake defines.\n\n#\n\n# SRC is processed using the configure_file() cmake command\n\n# at build to produce DST with the following variable available:\n\n#\n\n# VERSION_SOURCES:\n\n#  List of (${var} ${file}) pairs.\n\n#\n\n# for each variable ${var}\n\n# - ${var}: The contents of the associated file\n\n# - ${var}_COUNT: Number of lines in the associated file\n\n# - For each line ${i}:\n\n#   - ${var}_${i}: The ${i}-th line of the associated file\n\n#    - ${var}_${i}_PREFIX: The first component in the line\n\n#    - ${var}_${i}_LINE: Everything except the first component of the line\n\n#    - ${var}_${i}_NAME: Everything except the last component of the line\n\n#    - ${var}_${i}_STRING: The last component (excluding optional suffix) of the line\n\n#    - ${var}_${i}_SUFFIX: Suffix (seperated by \" + \") of the line\n\n#    - ${var}_${i}_MAJOR: First version component in ${var}_${i}_STRING\n\n#    - ${var}_${i}_MINOR: Second version component in ${var}_${i}_STRING\n\n#    - ${var}_${i}_PATCH: Third version component in ${var}_${i}_STRING\n\n#    - ${var}_${i}_BUILD: Fourth version component in ${var}_${i}_STRING\n\n#    - ${var}_${i}_NUMBER: Reassembled verion components\n\n#    - ${var}_${i}_PRERELEASE: If the version indicates a prerelease build\n\n#    - ${var}_${i}_PRIVATE: If the version indicates a private build\n\n# - ${var}_HEAD: The first paragraph of the associated file\n\n# - ${var}_TAIL: The remaining paragraphs of the associated file\n\n#\n\n# - GIT_COMMIT: The current git commit. (not defined if there is no GIT_DIR directory)\n\n# - GIT_COMMIT_PREFIX_${i}: The first ${i} characters of GIT_COMMIT (i=0..39)\n\n# For the exact syntax of SRC see the documentation of the configure_file() cmake command.\n\n# The version file is regenerated whenever VERSION_FILE or the current commit changes.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Split the version file into lines.\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "17dd3e0a76c5d5ef8b1f81e2da2aaebf7c1a5d57",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sizes in the Windows .ico file - sorted smaller → larger, high bits → low bits\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sizes in the macOS .icns file\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sizes in the Linux themable icon set\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sizes for the portable PNG icon - first is the default size\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Montage for comparing different icon sizes\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "7a6840d5692a61f91db9a81a9b5de9b82f4fb744",
      "LastModified" : "2019-02-13T00:55:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# compile tests tool\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CppUnit requires RTTI\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO this is required because the debug log has too many dependencies\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 26
  },
  "ElapsedTime" : 1430
}