{
  "Repository" : "3974953",
  "Revision" : "HEAD",
  "ObjectId" : "4c9e9270e2216ce5a9ec207e93704fa148604657",
  "CommitTime" : "2019-04-09T14:01:51Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "8ed80787088c497a14cf8d4f0291b251d26c73e5",
      "LastModified" : "2018-12-14T13:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# only available from cmake-2.8.4\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add python include and library directories\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compute revision\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###### Testing ######\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Doc target ###\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the documentation in builddir, so we can include the generated part too\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Generate the documentation from the different components\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Populate the false python environment\n",
        "Line" : 170,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# GeNoM fake stuff\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Generate API doc if we have the sphinx-api tool\n",
        "Line" : 224,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "### Uninstall ###\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "bindings/CMakeLists.txt" : {
      "ObjectId" : "f7dcbc775caada2b3ec41f098c5e5c5a95e67b16",
      "LastModified" : "2013-02-08T15:30:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "config/CMakeParseArguments.cmake" : {
      "ObjectId" : "7ce4c49ae5b0c5a4003d4a45a2da6e3cd38bbbff",
      "LastModified" : "2013-01-22T08:28:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords> <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions for\n\n# parsing the arguments given to that macro or function.\n\n# It processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e. keywords which can be used when calling the macro without any value\n\n# following, like e.g. the OPTIONAL keyword of the install() command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g. DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this macro\n\n# which can be followed by more than one value, like e.g. the TARGETS or\n\n# FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.\n\n# These variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see whether\n\n# your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments as the\n\n# real install() command:\n\n#\n\n#   function(MY_INSTALL)\n\n#     set(options OPTIONAL FAST)\n\n#     set(oneValueArgs DESTINATION RENAME)\n\n#     set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#     cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN} )\n\n#     ...\n\n#\n\n# Assume my_install() has been called like this:\n\n#   my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the following\n\n# variables:\n\n#   MY_INSTALL_OPTIONAL = TRUE\n\n#   MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#   MY_INSTALL_DESTINATION = \"bin\"\n\n#   MY_INSTALL_RENAME = \"\" (was not used)\n\n#   MY_INSTALL_TARGETS = \"foo;bar\"\n\n#   MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#   MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n# You can the continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g. if directly after a one_value_keyword\n\n# another recognized keyword follows, this is interpreted as the beginning of\n\n# the new option.\n\n# E.g. my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION would\n\n# be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 100,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 101,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 102,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "config/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "cdcf9ca7c1076edd34e248b320dba66700a1e521",
      "LastModified" : "2013-01-22T08:28:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to FIND_PACKAGE().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>]\n\n#                                           [HANDLE_COMPONENTS]\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# If the package supports components, use the HANDLE_COMPONENTS option to enable\n\n# handling them. In this case, find_package_handle_standard_args() will report\n\n# which components have been found and which are missing, and the <NAME>_FOUND\n\n# variable will be set to FALSE if any of the required components (i.e. not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call.  In this case VERSION_VAR will be set\n\n# to <NAME>_VERSION and the macro will automatically check whether the\n\n# Config module was found.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    FIND_PACKAGE(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to FIND_PACKAGE(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 126,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# exact version required\n",
        "Line" : 237,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 245,
        "CharPositionInLine" : 44
      },
      "16" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 256,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# print the result:\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "config/FindPythonInterp.cmake" : {
      "ObjectId" : "90dd73a66f775f807538e86de234ba09f111a16c",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#- Find python interpreter\n\n# This module finds if Python interpreter is installed and determines where the\n\n# executables are. This code sets the following variables:\n\n#\n\n#  PYTHONINTERP_FOUND         - Was the Python executable found\n\n#  PYTHON_EXECUTABLE          - path to the Python interpreter\n\n#\n\n#  PYTHON_VERSION_STRING      - Python version found e.g. 2.5.2\n\n#  PYTHON_VERSION_MAJOR       - Python major version found e.g. 2\n\n#  PYTHON_VERSION_MINOR       - Python minor version found e.g. 5\n\n#  PYTHON_VERSION_PATCH       - Python patch version found e.g. 2\n\n#\n\n# The Python_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# version numbers that should be taken into account when searching for Python.\n\n# You need to set this variable before calling find_package(PythonInterp).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2010 Kitware, Inc.\n\n# Copyright 2011 Bjoern Ricks <bjoern.ricks@gmail.com>\n\n# Copyright 2012 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for the current active python version first\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set up the versions we know about, in the order we will search. Always add\n\n# the user supplied additional versions to the front.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search for newest python version if python executable isn't found\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# determine python version string\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# it's called \"Python 2.7\", not \"2.7.0\"\n",
        "Line" : 105,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# sys.version predates sys.version_info, so use that\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# sys.version was first documented for Python 1.5, so assume\n\n# this is older.\n",
        "Line" : 124,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PYTHONINTERP_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "config/FindPythonLibs.cmake" : {
      "ObjectId" : "e47b055f805f830c9e4bfd50a940fc49e50b152e",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find python libraries\n\n# This module finds if Python is installed and determines where the\n\n# include files and libraries are. It also determines what the name of\n\n# the library is. This code sets the following variables:\n\n#\n\n#  PYTHONLIBS_FOUND           - have the Python libs been found\n\n#  PYTHON_LIBRARIES           - path to the python library\n\n#  PYTHON_INCLUDE_PATH        - path to where Python.h is found (deprecated)\n\n#  PYTHON_INCLUDE_DIRS        - path to where Python.h is found\n\n#  PYTHON_DEBUG_LIBRARIES     - path to the debug library (deprecated)\n\n#  PYTHONLIBS_VERSION_STRING  - version of the Python libs found (since CMake 2.8.8)\n\n#\n\n# The Python_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# version numbers that should be taken into account when searching for Python.\n\n# You need to set this variable before calling find_package(PythonLibs).\n\n#\n\n# If you'd like to specify the installation of Python to use, you should modify\n\n# the following cache variables:\n\n#  PYTHON_LIBRARY             - path to the python library\n\n#  PYTHON_INCLUDE_DIR         - path to where Python.h is found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up the versions we know about, in the order we will search. Always add\n\n# the user supplied additional versions to the front.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid finding the .dll in the PATH.  We want the .lib.\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Look for the static library in the Python config directory\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Avoid finding the .dll in the PATH.  We want the .lib.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This is where the static library is usually located\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# For backward compatibility, honour value of PYTHON_INCLUDE_PATH, if\n\n# PYTHON_INCLUDE_DIR is not set.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Search pyconfig.h because in some distribution, it is not stored in the same place than other stuff\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# erase minor version\n",
        "Line" : 194,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For backward compatibility, set PYTHON_INCLUDE_PATH.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We use PYTHON_INCLUDE_DIR, PYTHON_LIBRARY and PYTHON_DEBUG_LIBRARY for the\n\n# cache entries because they are meant to specify the location of a single\n\n# library. We now set the variables listed by the documentation for this\n\n# module.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# These variables have been historically named in this module different from\n\n# what SELECT_LIBRARY_CONFIGURATIONS() expects.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# SELECT_LIBRARY_CONFIGURATIONS() sets ${PREFIX}_FOUND if it has a library.\n\n# Unset this, this prefix doesn't match the module prefix, they are different\n\n# for historical reasons.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# PYTHON_ADD_MODULE(<name> src1 src2 ... srcN) is used to build modules for python.\n\n# PYTHON_WRITE_MODULES_HEADER(<filename>) writes a header file you can include\n\n# in your sources to initialize the static python modules\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Mark these options as advanced\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# with CONFIGURE_FILE() cmake complains that you may not use a file created using FILE(WRITE) as input file for CONFIGURE_FILE()\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "config/generate_false_env.cmake" : {
      "ObjectId" : "1d985d2a2da3587412155cd9667524544c2f9f09",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET (SPHINX_FALSE_PYTHON_ENV ${CMAKE_CURRENT_BINARY_DIR}/fakeenv)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "config/version.cmake" : {
      "ObjectId" : "45d90985200e18f45b71e8b9e649486c76ef1cae",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VERSION_COMPUTE\n\n# ---------------\n\n#\n\n# Deduce automatically the version number.\n\n# This mechanism makes sure that version number is always up-to-date and\n\n# coherent (i.e. strictly increasing as commits are made).\n\n#\n\n# There is two cases:\n\n# - the software comes from a release (stable version). In this case, the\n\n#   software is retrieved through a tarball which does not contain the `.git'\n\n#   directory. Hence, there is no way to search in the Git history to generate\n\n#   the version number.\n\n#   In this case, a 'version.py' file is put at the top-directory of the source\n\n#   tree which contains the project version. \n\n#\n\n# - the softwares comes from git (possibly unstable version).\n\n#   'git describe' is used to retrieve the version number\n\n#   (see 'man git-describe'). This tool generates a version number from the git\n\n#   history. The version number follows this pattern:\n\n#\n\n#     TAG[-N-SHA1][-dirty]\n\n#\n\n#   TAG: last matching tag (i.e. last signed tag starting with v, i.e. v0.1)\n\n#   N: number of commits since the last maching tag\n\n#   SHA1: sha1 of the current commit\n\n#   -dirty: added if the workig directory is dirty (there is some uncommitted\n\n#           changes).\n\n#\n\n#   For stable releases, i.e. the current commit is a matching tag, -N-SHA1 is\n\n#   omitted. If the HEAD is on the signed tag v0.1, the version number will be\n\n#   0.1.\n\n#\n\n#   If the HEAD is two commits after v0.5 and the last commit is 034f6d...\n\n#   The version number will be:\n\n#   - 0.5-2-034f if there is no uncommitted changes,\n\n#   - 0.5-2-034f-dirty if there is some uncommitted changes.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if a version is embedded in the project.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Yes, use it. This is a stable version.\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# No, there is no 'version.py' file. Deduce the version from git.\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Search for git.\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Run describe: search for *signed* tags starting with v, from the HEAD and\n\n# display only the first four characters of the commit id.\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Run diff-index to check whether the tree is clean or not.\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Check if the tree is clean.\n",
        "Line" : 86,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Check if git describe worked and store the returned version number.\n",
        "Line" : 93,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Get rid of the tag prefix to generate the final version.\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# If there is a dash in the version number, it is an unstable release,\n\n# otherwise it is a stable release.\n\n# I.e. 1.0, 2, 0.1.3 are stable but 0.2.4-1-dg43 is unstable.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Append dirty if the project is dirty.\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 12
    },
    "examples/clients/arm/Makefile" : {
      "ObjectId" : "d17213052cb4fa28ea7b43c31571a7a615b025ec",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile to compile control scripts\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of include libraries\n\n#ROBOTPKG_BASE = $(HOME)/openrobots\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#$(CC) -c $@.c $(CFLAGS)\n\n#ld -o $@ $@.o $(LDFLAGS)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/clients/atrv/Makefile" : {
      "ObjectId" : "298a8cab5eb624fbb35bf520c8d177f1208669bb",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile to compile control scripts\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of include libraries\n\n#ROBOTPKG_BASE = $(HOME)/openrobots\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#$(CC) -c $@.c $(CFLAGS)\n\n#ld -o $@ $@.o $(LDFLAGS)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#$(CC) -c $@.c $(CFLAGS)\n\n#ld -o $@ $@.o $(LDFLAGS)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/clients/ressac/Makefile" : {
      "ObjectId" : "4e3a56199dae552b7ed1df8852fd1b4eb324bd3f",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile to compile control scripts\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of include libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/clients/scene/Makefile" : {
      "ObjectId" : "92c5e80097ab2040e9edd55c410121988bd42410",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile to compile control scripts\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of include libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/tutorials/ros_navigation/morse_2dnav/CMakeLists.txt" : {
      "ObjectId" : "c40b03c71a5423c4c4a38b11252832ed6a677623",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/tutorials/ros_navigation/morse_2dnav/Makefile" : {
      "ObjectId" : "b75b928f20ef9ea4f509a17db62e4e31b422c27f",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/tutorials/ros_navigation/morse_2dnav/morse_move_base/CMakeLists.txt" : {
      "ObjectId" : "f8f1c9ccad793e5385c2eb83ffd7ed7b15c5b343",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n\n#set(ROS_BUILD_TYPE RelWithDebInfo)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set the default path for built executables to the \"bin\" directory\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set the default path for built libraries to the \"lib\" directory\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#uncomment if you have defined messages\n\n#rosbuild_genmsg()\n\n#uncomment if you have defined services\n\n#rosbuild_gensrv()\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#common commands for building c++ executables and libraries\n\n#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)\n\n#target_link_libraries(${PROJECT_NAME} another_library)\n\n#rosbuild_add_boost_directories()\n\n#rosbuild_link_boost(${PROJECT_NAME} thread)\n\n#rosbuild_add_executable(example examples/example.cpp)\n\n#target_link_libraries(example ${PROJECT_NAME})\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/tutorials/ros_navigation/morse_2dnav/morse_move_base/Makefile" : {
      "ObjectId" : "b75b928f20ef9ea4f509a17db62e4e31b422c27f",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "19b6070d42b290b77ae85aa235cdbb93b2c3ca22",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/morse/CMakeLists.txt" : {
      "ObjectId" : "ffe687f4fa83f9caac81a7077496a612516798cd",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/morse/builder/CMakeLists.txt" : {
      "ObjectId" : "92113706167af830b11bbfcd2e9797b45cb695dd",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/morse/middleware/CMakeLists.txt" : {
      "ObjectId" : "f2bf10457a56212447fcdde7cffa9b3d2c514550",
      "LastModified" : "2017-04-04T07:34:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/morse/middleware/pocolibs/CMakeLists.txt" : {
      "ObjectId" : "d9cf8e3633084f53fd5b3110e6819f05972eb515",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## To add a sensor or an actuator to the build, just add it to the according\n\n## list (actuator_list or sensor_list) and add the right entry in\n\n## MODULES_MAP_{entry}\n\n##\n\n## It generates _ors_<module_name>_poster.so, ors_<module_name>_poster.py, and\n\n## we wait for <module_name>.py in the (sensor|actuator) directory)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/morse/modifiers/CMakeLists.txt" : {
      "ObjectId" : "dc9d6b86c678a51053a41d64290af31c59d555b7",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install python files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/morse/multinode/CMakeLists.txt" : {
      "ObjectId" : "f6c7ed38f6aa0f18be3c5df9771bb7b8c0c3e690",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/morse/sensors/CMakeLists.txt" : {
      "ObjectId" : "3a00edc4ed73e3bd3e35304f6e808a845fc767a6",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#PYTHON_ADD_MODULE(sickc sickcmodule.c)\n\n#INSTALL(TARGETS sickc DESTINATION ${PYTHON_INSTDIR}/morse/sensors)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install python files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "testing/CMakeLists.txt" : {
      "ObjectId" : "af71dafb987545d3e2203283e88fde17d4a8c51a",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/base/CMakeLists.txt" : {
      "ObjectId" : "c757cefd5d18d046d4e246be76208e8a8bc57056",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Base concept \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sensor\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Actuator\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sensor + Actuator \n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Modifier\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Services\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "testing/failures/CMakeLists.txt" : {
      "ObjectId" : "d7604de6dc70e28950547fc27023792c5e14def0",
      "LastModified" : "2016-01-04T14:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/human/CMakeLists.txt" : {
      "ObjectId" : "1157890e86e76d1a3f96de06479709e9273f6cbc",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/middlewares/moos/CMakeLists.txt" : {
      "ObjectId" : "a84fee4d011d260f5f11975e61d1d984b6f989ee",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/middlewares/ros/CMakeLists.txt" : {
      "ObjectId" : "7c3eabe3cc60401dee00ce65d2c91627c67ed9a7",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# action test used actionlib which only work for the moment with python2, so\n\n# search for python2 and use it to run the test\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "testing/middlewares/yarp/CMakeLists.txt" : {
      "ObjectId" : "d04b2b1aa1915568c602c7f22e27ca97300f2ca7",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/robots/pionner3dx/CMakeLists.txt" : {
      "ObjectId" : "7febe649edeb6ddc1a2c3f04514cb77a05aac26e",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/robots/pr2/CMakeLists.txt" : {
      "ObjectId" : "5bea938a24b1a4de1cd5a9b9167324d856888906",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/robots/rmax/CMakeLists.txt" : {
      "ObjectId" : "6fd366c8005bb29d14add32f39066d340e7882c6",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/robots/segway/CMakeLists.txt" : {
      "ObjectId" : "0caa488a0fb6809f3300ab49f164780a4ef34fa6",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testing/robots/submarine/CMakeLists.txt" : {
      "ObjectId" : "deb082634d16e5a43f1d2ee424607dacdc2112ac",
      "LastModified" : "2018-08-10T08:08:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 30,
    "MAKEFILE" : 6
  },
  "ElapsedTime" : 7118
}