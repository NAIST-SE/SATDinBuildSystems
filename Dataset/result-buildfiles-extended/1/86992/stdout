{
  "Repository" : "86992",
  "Revision" : "HEAD",
  "ObjectId" : "af13dcc42d12bd78599cd53dced6ebacaa7626dc",
  "CommitTime" : "2019-03-17T11:55:14Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a71af0072b4b461572b9303fde40e82a0dabdeea",
      "LastModified" : "2018-05-02T14:39:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACOSX_RPATH is enabled by default.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ====================================\n\n# configuring\n\n# ====================================\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ====================================\n\n# default install paths for targets\n\n# ====================================\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ====================================\n\n# build all\n\n# ====================================\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CPack.local.cmake" : {
      "ObjectId" : "d6baacb1ab953d244bdfbb8d490fcff8bd41eeda",
      "LastModified" : "2019-03-07T18:51:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ====================================\n\n# cpack settings\n\n# ====================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindBfd.cmake" : {
      "ObjectId" : "7b588a8188d5d8e643ce2e69685f3c217397c3e4",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libbfd\n\n# Once done this will define\n\n#\n\n#  LIBBFD_FOUND - system has libbfd\n\n#  LIBBFD_INCLUDE_DIRS - the libbfd include directory\n\n#  LIBBFD_LIBRARIES - Link these to use libbfd\n\n#  LIBBFD_DEFINITIONS - Compiler switches required for using libbfd\n\n#\n\n# Based on:\n\n#\n\n#  Copyright (c) 2008 Bernhard Walle <bernhard.walle@gmx.de>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ugly, yes ugly...\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBBFD_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindElfutils.cmake" : {
      "ObjectId" : "eefae5e3586ac3f617f2fd4afe23400691c7ec4a",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libdwarf\n\n# Once done this will define\n\n#\n\n#  LIBDWARF_FOUND - system has libdwarf\n\n#  LIBDWARF_INCLUDE_DIRS - the libdwarf include directory\n\n#  LIBDWARF_LIBRARIES - Link these to use libdwarf\n\n#  LIBDWARF_DEFINITIONS - Compiler switches required for using libdwarf\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Locate libelf library at first\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PATH and INCLUDE will also work\n",
        "Line" : 36,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "# PATH and LIB will also work\n",
        "Line" : 62,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBDWARF_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindLibCRPCUT.cmake" : {
      "ObjectId" : "0cddba98953c84de10696aad62f7452cb2276262",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libcrpcut\n\n# Once done this will define\n\n#\n\n#  LIBCRPCUT_FOUND - system has libcrpcut\n\n#  LIBCRPCUT_INCLUDE_DIRS - the libcrpcut include directory\n\n#  LIBCRPCUT_LIBRARIES - Link these to use libcrpcut\n\n#  LIBCRPCUT_DEFINITIONS - Compiler switches required for using libcrpcut\n\n#\n\n# Based on:\n\n#\n\n#  Copyright (c) 2008 Bernhard Walle <bernhard.walle@gmx.de>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBCRPCUT_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindLibElf.cmake" : {
      "ObjectId" : "c1c1901d4dbc16ade75976301b2b97f86d3ac4f6",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libelf\n\n# Once done this will define\n\n#\n\n#  LIBELF_FOUND - system has libelf\n\n#  LIBELF_INCLUDE_DIRS - the libelf include directory\n\n#  LIBELF_LIBRARIES - Link these to use libelf\n\n#  LIBELF_DEFINITIONS - Compiler switches required for using libelf\n\n#\n\n#  Copyright (c) 2008 Bernhard Walle <bernhard.walle@gmx.de>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBELF_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/TargetArch.cmake" : {
      "ObjectId" : "46e17557be33f899e9bf8eabbde42ae13e8a7b23",
      "LastModified" : "2019-03-07T18:51:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "af6a8316ccf9df6bc6e1ef3436f23aaa912122f5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "3c120aa26b725a2aad9b61c3c96ece4b6b03b1d8",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See http://eatmyrandom.blogspot.se/2010/06/automate-version-numbering-using-git.html\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Coveralls doesn't work in a static setting\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Linux-specific sources\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Not really true, but anyway\n",
        "Line" : 187,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Reference: http://www.cmake.org/Wiki/CMake_RPATH_handling\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 401,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# uninstall target\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/kernel/Makefile" : {
      "ObjectId" : "ee6d69435331f08675fb298d29f6135d3c3a9566",
      "LastModified" : "2014-03-13T17:40:50Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "d79a4c5c70167a9ee37feac4405695108006ef43",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACOSX_RPATH is enabled by default.\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#if (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n\n#    add_executable(sanitizer-coverage sanitizer-coverage.c)\n\n#    set_target_properties(sanitizer-coverage PROPERTIES COMPILE_FLAGS \"-g -fsanitize=address -fsanitize-coverage=bb\")\n\n#    set_target_properties(sanitizer-coverage PROPERTIES LINK_FLAGS \"-fsanitize=address -fsanitize-coverage=bb\")\n\n#endif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/test-module/Makefile" : {
      "ObjectId" : "df235385a6599ba8d0273c1a3815bd0637c3a6a2",
      "LastModified" : "2014-03-13T17:40:50Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/unit-tests/CMakeLists.txt" : {
      "ObjectId" : "979cc356a9c73602540c91a49e12d2a59c82336d",
      "LastModified" : "2018-05-02T17:55:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACOSX_RPATH is enabled by default.\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "2ce9ae8a917353b56d4fb3962c2dc4b2013cd11e",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACOSX_RPATH is enabled by default.\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# ====================================\n\n# project name and version\n\n# ====================================\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reference: http://www.cmake.org/Wiki/CMake_RPATH_handling\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "travis/Makefile" : {
      "ObjectId" : "c8143bb0b08c6356b51c8f9b0bd7f53d4d39a3bd",
      "LastModified" : "2019-03-07T18:54:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#!/usr/bin/make\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 12,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 1050
}