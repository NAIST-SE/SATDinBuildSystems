{
  "Repository" : "9655588",
  "Revision" : "HEAD",
  "ObjectId" : "0c209f01ab51b1e578b9df91c6e6ffa9f7801c55",
  "CommitTime" : "2014-10-15T14:55:32Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c7d164a5b184a8f97a536ba96c2973a6f9bbb828",
      "LastModified" : "2014-10-10T12:14:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Apple, we don't want to use Clang.\n\n# On Windows, we don't want to end up building with Visual Studio.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# check command line is sensible\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#This is a temporary thing. Expect later to add in ExternalProject_add to get the code!!\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we force -pthread in preference to -lpthread because it sets -D_REENTRANT\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Append local module folder to module path\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Construct platform code\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# JAR VARIABLES\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use C99 and C++11, other flags for preventing common errors. Also add thread libs.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# we want static libstdc++ everywhere apart from apple who does the 2 layer namespace thing!\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# On Linux, add -rdynamic for stack traces\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Use the native assembler on Apple in order to be able to generate AVX instructions.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add Java\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Always include debug info in Java, since it does no harm and we don't have multiple\n\n# build types for it in CMake as far as I am aware.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# \"Backwards compatibility\" for javadoc jar creation\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Place executables and libraries in bin on Windows so that its linker can find them.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Set target types\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Tweak flags. These flags are similar to --ffast-math, except:\n\n# -funsafe-math-optimizations is missing as it messes with the FPU control word\n\n# which can cause segfaults when running through the JNI interface.\n\n# -ffinite-math-only is missing as it messes with NaN and Inf in ways that\n\n# break comparison behaviours.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# We need a larger than default stack to prevent the entrypt test\n\n# failing, and we need to force the export of all symbols since\n\n# they were all visible by default in the original implementation.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Store all float results in memory locations - casts them to double from\n\n# long double for consistency with 64-bit machines\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Export additional symbols without annotations\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Gtest\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Doxygen\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set the name of the java tests so we can exclude then from C++ coverage\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# testng annotation listeners\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Coverage - must build underneath the source dir for this to work.\n\n# This should be run before make test to avoid gathering coverage info\n\n# for code that was run as a result of calling it through the Java interface.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Whether we want noisy debug messages\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Where the generated include files live\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Add version info file\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Test each target\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Test with no target specified\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Test each target\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Test with no target specified\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Add testing of blob combiner\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Installation to local maven repository\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Test deploy to local maven repository\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "cmake/modules/JNIUtils.cmake" : {
      "ObjectId" : "590913969a9ec88047da9d8a904698c71b5413b8",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convert a fully qualified package name to its directory structure. \n\n# Example FQN: com.opengamma.maths.nativewrappers\n\n# Example DIR: com/opengamma/maths/nativewrappers\n\n# (You need to append/prepend a slash yourself where necessary)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Given a class in a package, what is the name of the corresponding native\n\n# header file?\n\n# Example: PACKAGE=com.opengamma.maths.nativewrappers, CLASS=OGBLASRawWrapper\n\n# HFILE set to: com_opengamma_maths_nativewrappers_OGBLASRawWrapper.h\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create a command for generating a JNI header file for the class CLASS with package\n\n# name FQN, inside a jar file JAR. If the output directory for the header file is\n\n# different to the current binary dir, it can be replaced with JNIDIR.\n\n# Example: FQN=com.opengamma.maths.nativewrappers CLASS=OGBLASRawWrapper\n\n#          JAR=OG-MathsWrappers-0.0.1,\n\n#          JARDIR=${CMAKE_CURRENT_BINARY_DIR},\n\n#          JNIDIR=${CMAKE_BINARY_DIR}/src/jni. \n\n# This will create a target generate_com_opengamma_maths_nativewrappers_OGBLASRawWrapper.h \n\n# that can be depended upon to force execution of javah to create the file.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/MultiLib.cmake" : {
      "ObjectId" : "7b0763821fc5f2fa4a93f224101a8bbe45a23907",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Inclusion of this module sets the targets supported by the machine on which\n\n# CMake is running. SUPPORT_${TARGET} is set to TRUE or FALSE for each target in\n\n# dbg, std, sse41, sse42, avx1 and avx2. std and sbg require no special CPU\n\n# support and are always set.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create a library for multiple target instruction sets. Note that this is\n\n# specialised to its use in OG-Maths and does not fully provide all of the\n\n# functionality that can be provided by add_library and set_target_properties.\n\n# One instance of the library is created for each of the TARGETS.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTE: These flags must match the numbers in cmcpuid.c\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/NativeLibraryBuilder.cmake" : {
      "ObjectId" : "b2c6d167ff234bf88db8a3e758fa5fc7458aaf4b",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adds a native library into the jar file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if the lib is imported, we know what it is called!\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# add rpath to linux flags\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Adds the lib for each target into the final built jar file.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Adds a native library into the jar file.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if the lib is imported, we know what it is called!\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Adds the lib for each target into the final built jar file.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/NativeLibraryUtils.cmake" : {
      "ObjectId" : "09a610cd44449642e7b74fa59147cadb66a12212",
      "LastModified" : "2014-09-10T17:05:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/OpenGammaGTest.cmake" : {
      "ObjectId" : "2b01bfe7e77bee51aa7809079f42e1e7c80b317a",
      "LastModified" : "2014-08-06T08:29:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Executes the target as a test once, and then once again with valgrind\n\n# Appropriate flags are added so that GTest outputs JUnit XML for later\n\n# processing. The target is appended to the list of tests that is used in the\n\n# add_gtest_report macro.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Builds a test executable that uses Gtest from the specified SOURCES and links\n\n# it to any additional LINK_LIBRARIES. LINK_LIBRARIES does not need to include\n\n# the GTest libraries - these are added automatically. The sources are also\n\n# compiled with the specified COMPILE_DEFINITIONS. Valgrinf is run on each test,\n\n# with the suppressions file SUPPRESSIONS.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add manifest to request execution privileges of invoker\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This must be run after you have added all your gtest tests. The output XMLs\n\n# are aggregated and turned into a report when the testresport target is run,\n\n# but only gtests that were already known about can be added.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/UseJava.cmake" : {
      "ObjectId" : "26128cfb32ae0c24aded34834433b70fd56f93e1",
      "LastModified" : "2014-09-25T13:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Use Module for Java\n\n# This file provides functions for Java. It is assumed that FindJava.cmake\n\n# has already been loaded.  See FindJava.cmake for information on how to\n\n# load Java into your CMake project.\n\n#\n\n# add_jar(target_name\n\n#         [SOURCES] source1 [source2 ...] [resource1 ...]\n\n#         [RESOURCES] resource1 [resource2 ...]\n\n#         [INCLUDE_NATIVE] TRUE | FALSE\n\n#         [INCLUDE_JARS jar1 [jar2 ...]]\n\n#         [ENTRY_POINT entry]\n\n#         [VERSION version]\n\n#         [OUTPUT_NAME name]\n\n#         [OUTPUT_DIR dir]\n\n#        )\n\n#\n\n# This command creates a <target_name>.jar. It compiles the given source files\n\n# (source) and adds the given resource files (resource) to the jar file. If\n\n# only resource files are given then just a jar file is created. The list of\n\n# include jars are added to the classpath when compiling the java sources and\n\n# also to the dependencies of the target. INCLUDE_JARS also accepts other\n\n# target names created by add_jar. For backwards compatibility, jar files\n\n# listed as sources are ignored (as they have been since the first version of\n\n# this module).\n\n#\n\n# The default OUTPUT_DIR can also be changed by setting the variable\n\n# CMAKE_JAVA_TARGET_OUTPUT_DIR.\n\n#\n\n# Additional instructions:\n\n#   To add compile flags to the target you can set these flags with\n\n#   the following variable:\n\n#\n\n#       set(CMAKE_JAVA_COMPILE_FLAGS -nowarn)\n\n#\n\n#   To add a path or a jar file to the class path you can do this\n\n#   with the CMAKE_JAVA_INCLUDE_PATH variable.\n\n#\n\n#       set(CMAKE_JAVA_INCLUDE_PATH /usr/share/java/shibboleet.jar)\n\n#\n\n#   To use a different output name for the target you can set it with:\n\n#\n\n#       add_jar(foobar foobar.java OUTPUT_NAME shibboleet.jar)\n\n#\n\n#   To use a different output directory than CMAKE_CURRENT_BINARY_DIR\n\n#   you can set it with:\n\n#\n\n#       add_jar(foobar foobar.java OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)\n\n#\n\n#   To define an entry point in your jar you can set it with the ENTRY_POINT\n\n#   named argument:\n\n#\n\n#       add_jar(example ENTRY_POINT com/examples/MyProject/Main)\n\n#\n\n#   To add a VERSION to the target output name you can set it using\n\n#   the VERSION named argument to add_jar. This will create a jar file with the\n\n#   name shibboleet-1.0.0.jar and will create a symlink shibboleet.jar\n\n#   pointing to the jar with the version information.\n\n#\n\n#       add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\n\n#\n\n#    If the target is a JNI library, utilize the following commands to\n\n#    create a JNI symbolic link:\n\n#\n\n#       set(CMAKE_JNI_TARGET TRUE)\n\n#       add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\n\n#       install_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)\n\n#       install_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})\n\n#\n\n#    If a single target needs to produce more than one jar from its\n\n#    java source code, to prevent the accumulation of duplicate class\n\n#    files in subsequent jars, set/reset CMAKE_JAR_CLASSES_PREFIX prior\n\n#    to calling the add_jar() function:\n\n#\n\n#       set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)\n\n#       add_jar(foo foo.java)\n\n#\n\n#       set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)\n\n#       add_jar(bar bar.java)\n\n#\n\n# Target Properties:\n\n#   The add_jar() functions sets some target properties. You can get these\n\n#   properties with the\n\n#      get_property(TARGET <target_name> PROPERTY <propery_name>)\n\n#   command.\n\n#\n\n#   INSTALL_FILES      The files which should be installed. This is used by\n\n#                      install_jar().\n\n#   JNI_SYMLINK        The JNI symlink which should be installed.\n\n#                      This is used by install_jni_symlink().\n\n#   JAR_FILE           The location of the jar file so that you can include\n\n#                      it.\n\n#   CLASS_DIR          The directory where the class files can be found. For\n\n#                      example to use them with javah.\n\n#\n\n# find_jar(<VAR>\n\n#          name | NAMES name1 [name2 ...]\n\n#          [PATHS path1 [path2 ... ENV var]]\n\n#          [VERSIONS version1 [version2]]\n\n#          [DOC \"cache documentation string\"]\n\n#         )\n\n#\n\n# This command is used to find a full path to the named jar. A cache\n\n# entry named by <VAR> is created to stor the result of this command. If\n\n# the full path to a jar is found the result is stored in the variable\n\n# and the search will not repeated unless the variable is cleared. If\n\n# nothing is found, the result will be <VAR>-NOTFOUND, and the search\n\n# will be attempted again next time find_jar is invoked with the same\n\n# variable.\n\n# The name of the full path to a file that is searched for is specified\n\n# by the names listed after NAMES argument. Additional search locations\n\n# can be specified after the PATHS argument. If you require special a\n\n# version of a jar file you can specify it with the VERSIONS argument.\n\n# The argument after DOC will be used for the documentation string in\n\n# the cache.\n\n#\n\n# install_jar(TARGET_NAME DESTINATION)\n\n#\n\n# This command installs the TARGET_NAME files to the given DESTINATION.\n\n# It should be called in the same scope as add_jar() or it will fail.\n\n#\n\n# install_jni_symlink(TARGET_NAME DESTINATION)\n\n#\n\n# This command installs the TARGET_NAME JNI symlinks to the given\n\n# DESTINATION. It should be called in the same scope as add_jar()\n\n# or it will fail.\n\n#\n\n# create_javadoc(<VAR>\n\n#                PACKAGES pkg1 [pkg2 ...]\n\n#                [SOURCEPATH <sourcepath>]\n\n#                [CLASSPATH <classpath>]\n\n#                [INSTALLPATH <install path>]\n\n#                [DOCTITLE \"the documentation title\"]\n\n#                [WINDOWTITLE \"the title of the document\"]\n\n#                [AUTHOR TRUE|FALSE]\n\n#                [USE TRUE|FALSE]\n\n#                [VERSION TRUE|FALSE]\n\n#               )\n\n#\n\n# Create java documentation based on files or packages. For more\n\n# details please read the javadoc manpage.\n\n#\n\n# There are two main signatures for create_javadoc. The first\n\n# signature works with package names on a path with source files:\n\n#\n\n#   Example:\n\n#   create_javadoc(my_example_doc\n\n#     PACKAGES com.exmaple.foo com.example.bar\n\n#     SOURCEPATH \"${CMAKE_CURRENT_SOURCE_DIR}\"\n\n#     CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n\n#     WINDOWTITLE \"My example\"\n\n#     DOCTITLE \"<h1>My example</h1>\"\n\n#     AUTHOR TRUE\n\n#     USE TRUE\n\n#     VERSION TRUE\n\n#   )\n\n#\n\n# The second signature for create_javadoc works on a given list of\n\n# files.\n\n#\n\n#   create_javadoc(<VAR>\n\n#                  FILES file1 [file2 ...]\n\n#                  [CLASSPATH <classpath>]\n\n#                  [INSTALLPATH <install path>]\n\n#                  [DOCTITLE \"the documentation title\"]\n\n#                  [WINDOWTITLE \"the title of the document\"]\n\n#                  [AUTHOR TRUE|FALSE]\n\n#                  [USE TRUE|FALSE]\n\n#                  [VERSION TRUE|FALSE]\n\n#                 )\n\n#\n\n# Example:\n\n#   create_javadoc(my_example_doc\n\n#     FILES ${example_SRCS}\n\n#     CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n\n#     WINDOWTITLE \"My example\"\n\n#     DOCTITLE \"<h1>My example</h1>\"\n\n#     AUTHOR TRUE\n\n#     USE TRUE\n\n#     VERSION TRUE\n\n#   )\n\n#\n\n# Both signatures share most of the options. These options are the\n\n# same as what you can find in the javadoc manpage. Please look at\n\n# the manpage for CLASSPATH, DOCTITLE, WINDOWTITLE, AUTHOR, USE and\n\n# VERSION.\n\n#\n\n# The documentation will be by default installed to\n\n#\n\n#   ${CMAKE_INSTALL_PREFIX}/share/javadoc/<VAR>\n\n#\n\n# if you don't set the INSTALLPATH.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2013 OpenGamma Inc. and the OpenGamma group of companies\n\n#                <graham@opengamma.com>\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n# Copyright 2010 Ben Boeckel <ben.boeckel@kitware.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define helper scripts\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# In CMake < 2.8.12, add_jar used variables which were set prior to calling\n\n# add_jar for customizing the behavior of add_jar. In order to be backwards\n\n# compatible, check if any of those variables are set, and use them to\n\n# initialize values of the named arguments. (Giving the corresponding named\n\n# argument will override the value set here.)\n\n#\n\n# New features should use named arguments only.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# reset\n",
        "Line" : 234,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Ignored for backward compatibility\n",
        "Line" : 343,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# create an empty java_class_filelist\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Create the list of files to compile.\n",
        "Line" : 433,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Compile the java files and create a list of class files\n",
        "Line" : 438,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# NOTE: this command generates an artificial dependency file\n",
        "Line" : 440,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# create the jar file\n",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#FIXME: Not just copy/paste of create_javadoc.\n\n#FIXME: Parse arguments sensibly\n\n#FIXME: Make generic/sensible and submit upstream\n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# create the jar file\n",
        "Line" : 1355,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "cmake/modules/UseJavaClassFilelist.cmake" : {
      "ObjectId" : "6f3a4e7a988120d07590ebdaaadedbc5045883c1",
      "LastModified" : "2013-08-29T08:17:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This script create a list of compiled Java class files to be added to a\n\n# jar file. This avoids including cmake files which get created in the\n\n# binary directory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# file(GLOB_RECURSE foo RELATIVE) is broken so we need this.\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# write to file\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/modules/UseJavaSymlinks.cmake" : {
      "ObjectId" : "88dd7689c8c8cf9cfdc175e8326decfbc22c8a53",
      "LastModified" : "2013-08-29T08:17:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Helper script for UseJava.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/gtest-1.6.0/CMakeLists.txt" : {
      "ObjectId" : "be68213ccce5acda5874dea8086ebc20f42824ab",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dbuild_gtest_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "external/gtest-1.6.0/cmake/internal_utils.cmake" : {
      "ObjectId" : "7efc2ac797aa6ec29cb011191373b3bb5242b74f",
      "LastModified" : "2013-09-11T14:10:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 96,
        "CharPositionInLine" : 32
      },
      "14" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "945fed5b69c417836bf792bf550d572863aeb292",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/generator/CMakeLists.txt" : {
      "ObjectId" : "ae4f6f7d06ad34d06dfb1e109f80d8e549858d4d",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We maintain the list of generator files so that generated targets depend on them.\n\n# Then, when the generator changes, cmake knows to re-run the generator.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Runners generation.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# A custom_target is needed to act as the bottleneck for parallel builds\n\n# Otherwise, the generator is invoked multiple times concurrently.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Dispatch generation.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Custom target to create bottleneck on parallel builds.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Expression generation.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Custom target bottleneck.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Numeric generation.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Custom target bottleneck.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Expression enum generation\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Custom target bottleneck\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# For refreshing the Java ExprEnum\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Createexpr generation\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Custom target bottleneck\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/java/CMakeLists.txt" : {
      "ObjectId" : "7e38e59178bbbf0aa41e14f6b666f31b20d56cbb",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/java/pom.xml" : {
      "ObjectId" : "80588e970eeb7bd7c67302594fbeab8e4bdb2442",
      "LastModified" : "2014-10-15T14:16:23Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "src/java/src/CMakeLists.txt" : {
      "ObjectId" : "2537b080d872bee2dfdf0e63bd92bbc2196ea886",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/java/src/main/CMakeLists.txt" : {
      "ObjectId" : "338685c39d97f9e9f10ec39fa95f194ef7233f92",
      "LastModified" : "2014-09-25T13:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#need these to get the external repo root dir locations\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This cache is used to trigger dependencies in add_jar\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This sorts out the licensing directory that gets bundled into the jar root\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# root level license dir (license_root_dir)\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# where OG-Maths licenses will live (license_root_dir/licenses)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# where OG-Izy licenses will live (license_root_dir/licenses/OG-Izy)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# where OG-Lapack licenses will live (license_root_dir/licenses/OG-Izy)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# the OG-Maths license goes into the license_root_dir\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# the OG-Maths licenses directory goes into the license_root_dir/licenses\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# the OG-Izy licenses go into (license_root_dir/licenses/OG-Izy)\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# the OG-Lapack licenses go into (license_root_dir/licenses/OG-Lapack)\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make it impossible to create native libs without also creating licenses\n\n# jar_native_libraries comes from the cache established by NativeLibraryBuilder\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Build source JAR\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/java/src/test/CMakeLists.txt" : {
      "ObjectId" : "52d6df0fbc3bb7b7c172a832ea8e52da07980a85",
      "LastModified" : "2014-09-25T13:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/jinitialise/CMakeLists.txt" : {
      "ObjectId" : "1349174bb86371da8b791420b46aa4c621e5a965",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/jshim/CMakeLists.txt" : {
      "ObjectId" : "fe0922df7a8b930fb976c796fd9fd2a6353967b8",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/jshim/test/CMakeLists.txt" : {
      "ObjectId" : "16afa54a6e4964968c1ab289678b7556fb3ab3b8",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile and link each test and add to the list of tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/librdag/CMakeLists.txt" : {
      "ObjectId" : "cdc878b7bc6524d00da147b64411e490ab04be5c",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The RDAG library.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/librdag/test/CMakeLists.txt" : {
      "ObjectId" : "4c6725939d9e7755f018c83a2c6d8dff93a595f5",
      "LastModified" : "2014-07-25T09:44:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile and link each test and add to the list of tests\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/librdag/test/nodes/CMakeLists.txt" : {
      "ObjectId" : "9940f106bb18177a772aa0b8e736036974b75196",
      "LastModified" : "2014-09-25T13:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies\n\n#\n\n# Please see distribution for license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# auto generated functions\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# auto generated infix\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Compile and link each test and add to the list of tests\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 23,
    "MAVEN" : 1
  },
  "ElapsedTime" : 798
}