{
  "Repository" : "43750901",
  "Revision" : "HEAD",
  "ObjectId" : "bbc866edceb0029123c885c82579f2b0ddebc768",
  "CommitTime" : "2019-04-18T07:02:36Z",
  "Files" : {
    "3rdparty/bytom/cutil/CMakeLists.txt" : {
      "ObjectId" : "078605c153cf304c0e1d0cbdb4c3b505ad8d9cc9",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(CMAKE_CXX_COMPILER \"/usr/local/cuda/bin/g++\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set C++ standard\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# copy file for testing bytom code\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rdparty/libblake2/CMakeLists.txt" : {
      "ObjectId" : "a272bf3983e18bc4418b29bc0af96c6d4c5ad619",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# End users do not need to install static libraries and header files\n\n#install(TARGETS blake2 DESTINATION /usr/local/lib)\n\n#install(FILES blake2.h DESTINATION /usr/local/include)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/libethash/CMakeLists.txt" : {
      "ObjectId" : "1b210428174f90d655011e87ed40fd273aa3082d",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# End users do not need to install static libraries and header files\n\n#install(TARGETS ethash DESTINATION /usr/local/lib)\n\n#install(FILES ethash.h DESTINATION /usr/local/include)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/libsph/CMakeLists.txt" : {
      "ObjectId" : "047877ef6e5b66311b1fc64ad23e80ebe6521f63",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeLists.txt" : {
      "ObjectId" : "34e2ffb9ca5dd3f45a62a578ac2ec97910596250",
      "LastModified" : "2019-04-18T07:02:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###################################### Options ######################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# empty line\n",
        "Line" : 10,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Package name postfix will be different with some optional feature enabled.\n\n# This option can be defined to change the default package name.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Build Type: -DCMAKE_BUILD_TYPE=Debug|Release\n\n# Default: Release\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set C++ standard\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# stop building after the first error\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The number of concurrent jobs when compiling a third-party library\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use Nvidia CUDA in build\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Chain Type\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Bitcoin\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# BitcoinCash\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# BitcoinSV\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# UnitiedBitcoin\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# SuperBitcoin\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Litecoin\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ZCash\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Unknown\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add chain type definitions\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# add a macro that needed by chain's source code\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# Whether to enable the wallet when building the blockchain code\n\n#\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n\n# Root Dir of Chain's Source Code\n\n#\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "###\n\n# Rebuild Bytom's Shared Library\n\n###\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "###\n\n# work with stratum switcher\n\n###\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "###\n\n# user defined coinbase info\n\n###\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# the size of user defined coinbase, default is 10 bytes\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###\n\n# options for install & package\n\n###\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# install prefix\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Debian/Ubuntu software package\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "###################################### Libs ######################################\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# empty line\n",
        "Line" : 232,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "#\n\n# chain's libs\n\n#\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\n\n# libsecp256k1\n\n#\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\n\n# other libraries\n\n#\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Force to use discovered OPENSSL_CRYPTO_LIBRARY & OPENSSL_SSL_LIBRARY\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###################################### Building Tools ######################################\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Find binutils\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "########################## Generate version number #############################\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# The base version\n\n# The update of this version number may not be timely.\n\n# We will get the version number from the git tag.\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Get the current abbreviated commit hash of the working branch\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Split git describe likes `v2.3.2-0-g2d76329` to list\n\n# Remove prefix `v`\n",
        "Line" : 376,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Split to list\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# The tag may be `v2.2.1.1-bitcoin-0-gb9fb89d`\n\n# So the BPOOL_VERSION_PATCH should be `1.1-bitcoin-0-gb9fb89d`\n\n# We need to merge the remaining items with `.`\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# package version of cpack\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "###################################### Targets ######################################\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "###################################### Install & Package ######################################\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# empty line\n",
        "Line" : 578,
        "CharPositionInLine" : 12
      },
      "46" : {
        "Text" : "###\n\n# `make install` support\n\n###\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# targets\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# testcase\n",
        "Line" : 600,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# tmp dir for install & packet\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# init folders & copy configure files\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# separate debug info from targets\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# install targets , dirs & files\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# binary\n",
        "Line" : 624,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# running dir\n",
        "Line" : 628,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# test targets\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# binary\n",
        "Line" : 637,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# documents\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# document dirss\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# install debug info\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# generate deb package by CPack\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# components\n",
        "Line" : 680,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# dependencies\n",
        "Line" : 686,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 63
    },
    "cmake/Modules/CMakeParseArguments.cmake" : {
      "ObjectId" : "8553f38f5f090a2305c095ba5a8ef34427c19ed5",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n#\n\n#\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords>\n\n# <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions\n\n# for parsing the arguments given to that macro or function.  It\n\n# processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e.  keywords which can be used when calling the macro without any\n\n# value following, like e.g.  the OPTIONAL keyword of the install()\n\n# command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g.  DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this\n\n# macro which can be followed by more than one value, like e.g.  the\n\n# TARGETS or FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.  These\n\n# variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see\n\n# whether your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments\n\n# as the real install() command:\n\n#\n\n# ::\n\n#\n\n#    function(MY_INSTALL)\n\n#      set(options OPTIONAL FAST)\n\n#      set(oneValueArgs DESTINATION RENAME)\n\n#      set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#      cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\"\n\n#                            \"${multiValueArgs}\" ${ARGN} )\n\n#      ...\n\n#\n\n#\n\n#\n\n# Assume my_install() has been called like this:\n\n#\n\n# ::\n\n#\n\n#    my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n#\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the\n\n# following variables:\n\n#\n\n# ::\n\n#\n\n#    MY_INSTALL_OPTIONAL = TRUE\n\n#    MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#    MY_INSTALL_DESTINATION = \"bin\"\n\n#    MY_INSTALL_RENAME = \"\" (was not used)\n\n#    MY_INSTALL_TARGETS = \"foo;bar\"\n\n#    MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#    MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n#\n\n#\n\n# You can then continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g.  if directly after a\n\n# one_value_keyword another recognized keyword follows, this is\n\n# interpreted as the beginning of the new option.  E.g.\n\n# my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION\n\n# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 123,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 124,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 125,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindBoost.cmake" : {
      "ObjectId" : "466090b6874714bcc3f2c5444f8d4c5ba2a7fcda",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindBoost\n\n# ---------\n\n#\n\n# Find Boost include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n\n#     [REQUIRED]             # Fail with error if Boost is not found\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\n\n#\n\n# This module finds headers and requested component libraries OR a CMake\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\n\n# case results are reported in variables::\n\n#\n\n#   Boost_FOUND            - True if headers and requested libraries were found\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n\n#                            target_link_libraries debug/optimized keywords)\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n\n#                          - Pass to add_definitions() to have diagnostic\n\n#                            information about Boost's automatic linking\n\n#                            displayed during compilation\n\n#\n\n# This module reads hints about search locations from variables::\n\n#\n\n#   BOOST_ROOT             - Preferred installation prefix\n\n#    (or BOOSTROOT)\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n\n#                            specified by these hint variables. Default is OFF.\n\n#   Boost_ADDITIONAL_VERSIONS\n\n#                          - List of Boost versions not known to this module\n\n#                            (Boost install locations may contain the version)\n\n#\n\n# and saves search results persistently in CMake cache entries::\n\n#\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\n\n#   Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\n\n#   Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\n\n#\n\n# Users may set these hints or results as cache entries.  Projects\n\n# should not read these entries directly but instead use the above\n\n# result variables.  Note that some hint names start in upper-case\n\n# \"BOOST\".  One may specify these as environment variables if they are\n\n# not specified as CMake variables or cache entries.\n\n#\n\n# This module first searches for the Boost header files using the above\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\n\n# and the library name configuration settings below.  It saves the\n\n# library directories in Boost_LIBRARY_DIR_DEBUG and\n\n# Boost_LIBRARY_DIR_RELEASE and individual library\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\n\n# When one changes settings used by previous searches in the same build\n\n# tree (excluding environment variables) this module discards previous\n\n# search results affected by the changes and searches again.\n\n#\n\n# Boost libraries come in many variants encoded in their file name.\n\n# Users or projects may tell this module which variant to find by\n\n# setting variables::\n\n#\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n\n#                              libraries ('mt' tag).  Default is ON.\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n\n#                              libraries.  Default is OFF.\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n\n#                              libraries linked statically to the C++ runtime\n\n#                              ('s' tag).  Default is platform dependent.\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n\n#                              libraries linked to the MS debug C++ runtime\n\n#                              ('g' tag).  Default is ON.\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n\n#                              debug Python build ('y' tag). Default is OFF.\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n\n#                              STLPort ('p' tag).  Default is OFF.\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                            - Set to ON to use libraries compiled with\n\n#                              STLPort deprecated \"native iostreams\"\n\n#                              ('n' tag).  Default is OFF.\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\n\n#                              for the C++ compiler in use.\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\n\n#                              such as \"pthread\" or \"win32\".  Names with\n\n#                              and without this suffix will both be tried.\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\n\n#                              e.g. if set to \"myboost\", will search for\n\n#                              myboost_thread instead of boost_thread.\n\n#\n\n# Other variables one may set to control this module are::\n\n#\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n\n#                              Please enable this before filing any bug report.\n\n#   Boost_DETAILED_FAILURE_MSG\n\n#                            - Set to ON to add detailed information to the\n\n#                              failure message even when the REQUIRED option\n\n#                              is not given to the find_package call.\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n\n#                              libraries to assist with packaging.  For example,\n\n#                              the \"system\" component library may be resolved to\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\n\n#                              affect linking and should not be enabled unless\n\n#                              the user needs this information.\n\n#   Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n\n#                              Boost_LIBRARY_DIR_DEBUG.\n\n#\n\n# On Visual Studio and Borland compilers Boost headers request automatic\n\n# linking to corresponding libraries.  This requires matching libraries\n\n# to be linked explicitly or available in the link library search path.\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\n\n# dynamic linking.  Boost automatic linking typically requests static\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\n\n#\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#\n\n# to ask Boost to report information about automatic linking requests.\n\n#\n\n# Example to find Boost headers only::\n\n#\n\n#   find_package(Boost 1.36.0)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n# Example to find Boost headers and some *static* libraries::\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON) # only find static libs\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n# Boost CMake\n\n# ^^^^^^^^^^^\n\n#\n\n# If Boost was built using the boost-cmake project it provides a package\n\n# configuration file for use with find_package's Config mode.  This\n\n# module looks for the package configuration file called\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\n\n# and this module returns with no further action.  See documentation of\n\n# the Boost CMake package configuration for details on what it provides.\n\n#\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2012 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2012 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is available, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 245,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 250,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 254,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 272,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Make variables changeable to the advanced user\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Detect changes in used variables.\n\n# Compares the current variable value with the last one.\n\n# In short form:\n\n# v != v_LAST                      -> CHANGED = 1\n\n# v is defined, v_LAST not         -> CHANGED = 1\n\n# v is not defined, but v_LAST is  -> CHANGED = 1\n\n# otherwise                        -> CHANGED = 0\n\n# CHANGED is returned in variable named ${changed_var}\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Find the given library (var).\n\n# Use 'build_type' to support different lib paths for RELEASE or DEBUG builds\n\n#\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is known then search only there.\n",
        "Line" : 339,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\n\n# Returns the guess by setting the variable pointed to by _ret\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Good luck!\n",
        "Line" : 422,
        "CharPositionInLine" : 18
      },
      "26" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 423,
        "CharPositionInLine" : 32
      },
      "27" : {
        "Text" : "# Good luck!\n",
        "Line" : 424,
        "CharPositionInLine" : 18
      },
      "28" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 425,
        "CharPositionInLine" : 32
      },
      "29" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 432,
        "CharPositionInLine" : 36
      },
      "30" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 440,
        "CharPositionInLine" : 36
      },
      "31" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 443,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 447,
        "CharPositionInLine" : 14
      },
      "33" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 451,
        "CharPositionInLine" : 14
      },
      "34" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 456,
        "CharPositionInLine" : 12
      },
      "35" : {
        "Text" : "# TODO at least Boost_DEBUG here?\n",
        "Line" : 466,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# If the user sets Boost_LIBRARY_DIR, use it as the default for both\n\n# configurations.\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 504,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n",
        "Line" : 510,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 523,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 526,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 529,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 535,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 546,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 562,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 575,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n\n# Build a list of path suffixes for each version.\n",
        "Line" : 657,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 662,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 667,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 694,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\n\n# It will be updated below for component libraries.\n",
        "Line" : 706,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n",
        "Line" : 714,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Set Boost_FOUND based on requested version.\n",
        "Line" : 740,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 753,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# Caller will accept any Boost version.\n",
        "Line" : 766,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Prefix initialization\n\n# ------------------------------------------------------------------------\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 805,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 813,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 838,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 859,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n",
        "Line" : 865,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 878,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Clear Boost_LIBRARY_DIR_${c} if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 885,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is set, prefer its value.\n",
        "Line" : 891,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 931,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 941,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 967,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\n",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Compute component-specific hints.\n",
        "Line" : 994,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Consolidate and report component-specific hints.\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 1017,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# if Boost_LIBRARY_DIR_RELEASE is not defined,\n\n# but Boost_LIBRARY_DIR_DEBUG is, look there first for RELEASE libs\n",
        "Line" : 1042,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1048,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 1058,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# if Boost_LIBRARY_DIR_DEBUG is not defined,\n\n# but Boost_LIBRARY_DIR_RELEASE is, look there first for DEBUG libs\n",
        "Line" : 1084,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1090,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1109,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1114,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\n\n# Update it for the requested component libraries.\n",
        "Line" : 1130,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# The headers were found.  Check for requested component libs.\n",
        "Line" : 1133,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1151,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1177,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\n",
        "Line" : 1180,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1190,
        "CharPositionInLine" : 6
      },
      "100" : {
        "Text" : "# Boost headers were not found so no components were found.\n",
        "Line" : 1210,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Notification to end user about what was found\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1217,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in its requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1243,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# Configure display of cache entries in GUI.\n",
        "Line" : 1256,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# Record last used values of input variables so we can\n\n# detect on the next run if the user changed them.\n",
        "Line" : 1271,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\n\n# the last flush.\n",
        "Line" : 1284,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 106
    },
    "cmake/Modules/FindCUDA.cmake" : {
      "ObjectId" : "fe8b18ee3889b13b72df8d2ef82d01701925ef78",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\n\n# windows, and mac and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard find_package arguments of\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\n\n#      the command is run from withing VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must preceed configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alterative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 396,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 410,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 412,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 414,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 430,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 474,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 483,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 544,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 546,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\n",
        "Line" : 582,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\n",
        "Line" : 585,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 592,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Now search default paths\n",
        "Line" : 602,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 612,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Compute the version.\n",
        "Line" : 638,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 645,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Support for arm cross compilation with CUDA 5.5\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Support for aarch64 cross compilation with CUDA 7.0\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Target CPU architecture\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 675,
        "CharPositionInLine" : 21
      },
      "54" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 692,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 696,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 707,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 724,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 727,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Set whether to use the static cuda runtime.\n",
        "Line" : 738,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 746,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 752,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# Here is librt that has things such as, clock_gettime, shm_open, and shm_unlink.\n",
        "Line" : 768,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 783,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 790,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 800,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 824,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 832,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 834,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 841,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\n",
        "Line" : 850,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 859,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 883,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 897,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 912,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 916,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 922,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 937,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 961,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 967,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "##############################################################################\n",
        "Line" : 976,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 981,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1005,
        "CharPositionInLine" : 8
      },
      "92" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1012,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1018,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1023,
        "CharPositionInLine" : 8
      },
      "95" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1034,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1053,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1072,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1079,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1083,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1094,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1097,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1099,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1101,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1103,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1106,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1112,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1115,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1133,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1138,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1142,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Emulation.\n",
        "Line" : 1144,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1147,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# $(VCInstallDir)/bin.\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1183,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1193,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n\n# Remove duplicate entries which may be present since include_directories\n\n# in CMake >= 2.8.8 does not remove them.\n",
        "Line" : 1195,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1206,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1216,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1219,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# STATIC\n",
        "Line" : 1225,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1231,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1233,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1239,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1248,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1251,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1255,
        "CharPositionInLine" : 6
      },
      "127" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1275,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1281,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1286,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 1294,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1306,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1309,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1312,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1314,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1321,
        "CharPositionInLine" : 6
      },
      "136" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1344,
        "CharPositionInLine" : 8
      },
      "137" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1352,
        "CharPositionInLine" : 6
      },
      "138" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1365,
        "CharPositionInLine" : 6
      },
      "139" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1383,
        "CharPositionInLine" : 6
      },
      "140" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1393,
        "CharPositionInLine" : 6
      },
      "141" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1397,
        "CharPositionInLine" : 31
      },
      "142" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1401,
        "CharPositionInLine" : 6
      },
      "143" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1413,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1416,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1423,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1431,
        "CharPositionInLine" : 6
      },
      "147" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1434,
        "CharPositionInLine" : 6
      },
      "148" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1451,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1464,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1467,
        "CharPositionInLine" : 8
      },
      "151" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1471,
        "CharPositionInLine" : 8
      },
      "152" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1485,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1490,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1498,
        "CharPositionInLine" : 2
      },
      "155" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1513,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1519,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1531,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1537,
        "CharPositionInLine" : 27
      },
      "159" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1542,
        "CharPositionInLine" : 4
      },
      "160" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1550,
        "CharPositionInLine" : 4
      },
      "161" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1554,
        "CharPositionInLine" : 6
      },
      "162" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1562,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1567,
        "CharPositionInLine" : 6
      },
      "164" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1577,
        "CharPositionInLine" : 4
      },
      "165" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1584,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1589,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1595,
        "CharPositionInLine" : 6
      },
      "168" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1627,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1636,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1639,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1644,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# Add the library.\n",
        "Line" : 1648,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1655,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1664,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1674,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1683,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1685,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1688,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# Add the library.\n",
        "Line" : 1692,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1699,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1708,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1718,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1725,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1727,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1735,
        "CharPositionInLine" : 0
      },
      "186" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1744,
        "CharPositionInLine" : 0
      },
      "187" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1753,
        "CharPositionInLine" : 0
      },
      "188" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1762,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1772,
        "CharPositionInLine" : 0
      },
      "190" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1785,
        "CharPositionInLine" : 0
      },
      "191" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1798,
        "CharPositionInLine" : 0
      },
      "192" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1804,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1815,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 194
    },
    "cmake/Modules/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "c433fa8ed4e1d9e7fb8d5ecb026c3536c9449050",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/Modules/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/Modules/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "80323091d3249d7c5d177f70c1a44f0888c80b15",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 69,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 73,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 76,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# string\n",
        "Line" : 77,
        "CharPositionInLine" : 33
      },
      "22" : {
        "Text" : "# list\n",
        "Line" : 78,
        "CharPositionInLine" : 45
      },
      "23" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 140,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 142,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Echo the command\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Run the command\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Delete the target file\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Note that this will remove all occurances of -G.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the code\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 50
    },
    "cmake/Modules/FindCURL.cmake" : {
      "ObjectId" : "209fd877dedceecf0c88305a204d3f451d0b46ed",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCURL\n\n# --------\n\n#\n\n# Find curl\n\n#\n\n# Find the native CURL headers and libraries.\n\n#\n\n# ::\n\n#\n\n#   CURL_INCLUDE_DIRS   - where to find curl/curl.h, etc.\n\n#   CURL_LIBRARIES      - List of libraries when using curl.\n\n#   CURL_FOUND          - True if curl found.\n\n#   CURL_VERSION_STRING - the version of curl found (since CMake 2.8.8)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2012 Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library (sorted from most current/relevant entry to least).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Windows MSVC prebuilts:\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Windows older \"Win32 - MSVC\" prebuilts (libcurl.lib, e.g. libcurl-7.15.5-win32-msvc.zip):\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CURL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindGlog.cmake" : {
      "ObjectId" : "99abbe478a02b452326be8c6a4f6dba6a328352c",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n\n#  GLOG_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindKafkaC.cmake" : {
      "ObjectId" : "69c63ba8363dcff0402e2702ce111b76e798bdf2",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright 2013 Produban\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#    http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#\n\n# Tries to find Kafka C Client headers and libraries.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#  find_package(KafkaC)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  KAFKA_ROOT_DIR  Set this variable to the root installation of\n\n#                  Kafka Library if the module has problems finding\n\n#                  the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  KAFKA_FOUND              System has Kafka libs/headers\n\n#  KAFKA_LIBRARIES          The Kafka libraries\n\n#  KAFKA_INCLUDE_DIRS       The location of Kafka headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set KAFKA_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLibConfig.cmake" : {
      "ObjectId" : "a418aae98d279f9c18aa93b1168268564d8079de",
      "LastModified" : "2019-04-02T10:06:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the CUnit includes and library\n\n#\n\n# This module defines\n\n# LIBCONFIG_INCLUDE_DIR, where to find cppunit include files, etc.\n\n# LIBCONFIG_LIBRARIES, the libraries to link against to use CppUnit.\n\n# LIBCONFIG_STATIC_LIBRARIY_PATH\n\n# LIBCONFIG_FOUND, If false, do not try to use CppUnit.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# also defined, but not for general use are\n\n# LIBCONFIG_LIBRARY, where to find the CUnit library.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MESSAGE(\"Searching for libconfig library\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MESSAGE(STATUS \"Found LibConfig++: ${LIBCONFIGPP_LIBRARIES}\" )\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindLibEvent.cmake" : {
      "ObjectId" : "64cdbef01be669da36bc2fbcd4bd283fd4a98599",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LibEvent (a cross event library)\n\n# This module defines\n\n# LIBEVENT_INCLUDE_DIR, where to find LibEvent headers\n\n# LIBEVENT_LIB, LibEvent libraries\n\n# LibEvent_FOUND, If false, do not try to use libevent\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLibGMP.cmake" : {
      "ObjectId" : "2152384bded11ccfa27b1fc5478032f3bfaeb576",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindLibHiredis.cmake" : {
      "ObjectId" : "e1572b17b079384518060b3f4413e65a3c35c693",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindLibPthread.cmake" : {
      "ObjectId" : "dc91efdf96c9102b6f061bef45763a612790aeb0",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindMYSQL.cmake" : {
      "ObjectId" : "b07f0fe9b3b8f13c4e47682fffe15321ddf79687",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find MySQL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the native MySQL includes and library\n\n#\n\n#  MYSQL_INCLUDE_DIR - where to find mysql.h, etc.\n\n#  MYSQL_LIBRARIES   - List of libraries when using MySQL.\n\n#  MYSQL_FOUND       - True if MySQL found.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindOpenSSL.cmake" : {
      "ObjectId" : "3adc2692622e459a175f31d5b2a54619ec8164f2",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindOpenSSL\n\n# -----------\n\n#\n\n# Try to find the OpenSSL encryption library\n\n#\n\n# Once done this will define\n\n#\n\n# ::\n\n#\n\n#   OPENSSL_ROOT_DIR - Set this variable to the root installation of OpenSSL\n\n#\n\n#\n\n#\n\n# Read-Only variables:\n\n#\n\n# ::\n\n#\n\n#   OPENSSL_FOUND - System has the OpenSSL library\n\n#   OPENSSL_INCLUDE_DIR - The OpenSSL include directory\n\n#   OPENSSL_CRYPTO_LIBRARY - The OpenSSL crypto library\n\n#   OPENSSL_SSL_LIBRARY - The OpenSSL SSL library\n\n#   OPENSSL_LIBRARIES - All OpenSSL libraries\n\n#   OPENSSL_VERSION - This is set to $major.$minor.$revision$patch (eg. 0.9.8s)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2009-2011 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# http://www.slproweb.com/products/Win32OpenSSL.html\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# /MD and /MDd are the standard values - if someone wants to use\n\n# others, the libnames have to change here too\n\n# use also ssl and ssleay32 in debug as fallback for openssl < 0.9.8b\n\n# TODO: handle /MT and static lib\n\n# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:\n\n#   * MD for dynamic-release\n\n#   * MDd for dynamic-debug\n\n#   * MT for static-release\n\n#   * MTd for static-debug\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Implementation details:\n\n# We are using the libraries located in the VC subdir instead of the parent directory eventhough :\n\n# libeay32MD.lib is identical to ../libeay32.lib, and\n\n# ssleay32MD.lib is identical to ../ssleay32.lib\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# same player, for MinGW\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Not sure what to pick for -say- intel, let's use the toplevel ones and hope someone report issues:\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# compat defines\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# The version number is encoded as 0xMNNFFPPS: major minor fix patch status\n\n# The status gives if this is a developer or prerelease and is ignored here.\n\n# Major, minor, and fix directly translate into the version numbers shown in\n\n# the string. The patch field translates to the single character suffix that\n\n# indicates the bug fix state, which 00 -> nothing, 01 -> a, 02 -> b and so\n\n# on.\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# 96 is the ASCII code of 'a' minus 1\n",
        "Line" : 308,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Once anyone knows how OpenSSL would call the patch versions beyond 'z'\n\n# this should be updated to handle that, too. This has not happened yet\n\n# so it is simply ignored here for now.\n",
        "Line" : 311,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 11
    },
    "cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "bcbd17d8afde4319cdcca4f3f7b30d11383ace46",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageHandleStandardArgs\n\n# -----------------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ...  )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to\n\n# find_package().  It also sets the <packagename>_FOUND variable.  The\n\n# package is considered found if all variables <var1>...  listed contain\n\n# valid results, e.g.  valid filepaths.\n\n#\n\n# There are two modes of this function.  The first argument in both\n\n# modes is the name of the Find-module where it is called (in original\n\n# casing).\n\n#\n\n# The first simple mode looks like this:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name>\n\n#       (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n#\n\n# If the variables <var1> to <varN> are all valid, then\n\n# <UPPERCASED_NAME>_FOUND will be set to TRUE.  If DEFAULT_MSG is given\n\n# as second argument, then the function will generate itself useful\n\n# success and error messages.  You can also supply a custom error\n\n# message for the failure case.  This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(<NAME>\n\n#       [FOUND_VAR <resultVar>]\n\n#       [REQUIRED_VARS <var1>...<varN>]\n\n#       [VERSION_VAR   <versionvar>]\n\n#       [HANDLE_COMPONENTS]\n\n#       [CONFIG_MODE]\n\n#       [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# In this mode, the name of the result-variable can be set either to\n\n# either <UPPERCASED_NAME>_FOUND or <OriginalCase_Name>_FOUND using the\n\n# FOUND_VAR option.  Other names for the result-variable are not\n\n# allowed.  So for a Find-module named FindFooBar.cmake, the two\n\n# possible names are FooBar_FOUND and FOOBAR_FOUND.  It is recommended\n\n# to use the original case version.  If the FOUND_VAR option is not\n\n# used, the default is <UPPERCASED_NAME>_FOUND.\n\n#\n\n# As in the simple mode, if <var1> through <varN> are all valid,\n\n# <packagename>_FOUND will be set to TRUE.  After REQUIRED_VARS the\n\n# variables which are required for this package are listed.  Following\n\n# VERSION_VAR the name of the variable can be specified which holds the\n\n# version of the package which has been found.  If this is done, this\n\n# version will be checked against the (potentially) specified required\n\n# version used in the find_package() call.  The EXACT keyword is also\n\n# handled.  The default messages include information about the required\n\n# version and the version which has been actually found, both if the\n\n# version is ok or not.  If the package supports components, use the\n\n# HANDLE_COMPONENTS option to enable handling them.  In this case,\n\n# find_package_handle_standard_args() will report which components have\n\n# been found and which are missing, and the <packagename>_FOUND variable\n\n# will be set to FALSE if any of the required components (i.e.  not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.  Use the option\n\n# CONFIG_MODE if your FindXXX.cmake module is a wrapper for a\n\n# find_package(...  NO_MODULE) call.  In this case VERSION_VAR will be\n\n# set to <NAME>_VERSION and the macro will automatically check whether\n\n# the Config module was found.  Via FAIL_MESSAGE a custom failure\n\n# message can be specified, if this is not used, the default message\n\n# will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXml2  DEFAULT_MSG\n\n#       LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n#\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid.  Then also LIBXML2_FOUND is set to\n\n# TRUE.  If it is not found and REQUIRED was used, it fails with\n\n# FATAL_ERROR, independent whether QUIET was used or not.  If it is\n\n# found, success will be reported, including the content of <var1>.  On\n\n# repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXslt\n\n#       FOUND_VAR LibXslt_FOUND\n\n#       REQUIRED_VARS LibXslt_LIBRARIES LibXslt_INCLUDE_DIRS\n\n#       VERSION_VAR LibXslt_VERSION_STRING)\n\n#\n\n# In this case, LibXslt is considered to be found if the variable(s)\n\n# listed after REQUIRED_VAR are all valid, i.e.  LibXslt_LIBRARIES and\n\n# LibXslt_INCLUDE_DIRS in this case.  The result will then be stored in\n\n# LibXslt_FOUND .  Also the version of LibXslt will be checked by using\n\n# the version contained in LibXslt_VERSION_STRING.  Since no\n\n# FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#     find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\n#\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4\n\n# NO_MODULE) and adds an additional search directory for automoc4.  Here\n\n# the result will be stored in AUTOMOC4_FOUND.  The following\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 210,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# exact version required\n",
        "Line" : 295,
        "CharPositionInLine" : 44
      },
      "16" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 301,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 331,
        "CharPositionInLine" : 17
      },
      "20" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 342,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# print the result:\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/Modules/FindPackageMessage.cmake" : {
      "ObjectId" : "a0349d3db99a3b446c421d9bdc14142ab278e72f",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindPkgConfig.cmake" : {
      "ObjectId" : "bf58ede56f444214ae49314afae3f0290e2ab918",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPkgConfig\n\n# -------------\n\n#\n\n# A `pkg-config` module for CMake.\n\n#\n\n# Finds the ``pkg-config`` executable and add the\n\n# :command:`pkg_check_modules` and :command:`pkg_search_module`\n\n# commands.\n\n#\n\n# In order to find the ``pkg-config`` executable, it uses the\n\n# :variable:`PKG_CONFIG_EXECUTABLE` variable or the ``PKG_CONFIG``\n\n# environment variable first.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2014 Kitware, Inc.\n\n# Copyright 2014      Christoph Grüninger <foss@grueninger.de>\n\n# Copyright 2006      Enrico Scholz <enrico.scholz@informatik.tu-chemnitz.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Common stuff ####\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find pkg-config, use PKG_CONFIG if set\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is needed because the module name is \"PkgConfig\" but the name of\n\n# this variable has always been PKG_CONFIG_FOUND so this isn't automatically\n\n# handled by FPHSA.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Unsets the given variables\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Invokes pkgconfig, cleans up the result and sets variables\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#message(STATUS \"  ${_varname} ... ${_pkgconfig_invoke_result}\")\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Invokes pkgconfig two times; once without '--static' and once with\n\n# '--static'\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Splits given arguments into options and a package list\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add the content of a variable or an environment variable to a list of\n\n# paths\n\n# Usage:\n\n#  - _pkgconfig_add_extra_path(_extra_paths VAR)\n\n#  - _pkgconfig_add_extra_path(_extra_paths ENV VAR)\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# create a better addressable variable of the modules and calculate its size\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# give out status message telling checked module\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Save the PKG_CONFIG_PATH environment variable, and add paths\n\n# from the CMAKE_PREFIX_PATH variables\n",
        "Line" : 219,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Create a list of the possible pkgconfig subfolder (depending on\n\n# the system\n",
        "Line" : 227,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# is this a debian system ?\n",
        "Line" : 233,
        "CharPositionInLine" : 41
      },
      "17" : {
        "Text" : "# not debian, chech the FIND_LIBRARY_USE_LIB64_PATHS property\n",
        "Line" : 238,
        "CharPositionInLine" : 10
      },
      "18" : {
        "Text" : "# Check if directories exist and eventually append them to the\n\n# pkgconfig path list\n",
        "Line" : 247,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Prepare and set the environment variable\n",
        "Line" : 258,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# remove empty values from the list\n",
        "Line" : 260,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Unset variables\n",
        "Line" : 270,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# iterate through module list and check whether they exist and match the required version\n",
        "Line" : 275,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# check whether version is given\n",
        "Line" : 279,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# handle the operands\n",
        "Line" : 290,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# create the final query which is of the format:\n\n# * --atleast-version <version> <pkg-name>\n\n# * --exact-version <version> <pkg-name>\n\n# * --max-version <version> <pkg-name>\n\n# * --exists <pkg-name>\n",
        "Line" : 303,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# execute the query\n",
        "Line" : 322,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# evaluate result and tell failures\n",
        "Line" : 327,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# fail when requested\n",
        "Line" : 338,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# when we are here, we checked whether requested modules\n\n# exist. Now, go through them and set variables\n",
        "Line" : 343,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# iterate through all modules again and set individual variables\n",
        "Line" : 349,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# handle case when there is only one package required\n",
        "Line" : 351,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# set variables which are combined for multiple modules\n",
        "Line" : 368,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Restore the environment variable\n",
        "Line" : 380,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "###\n\n### User visible macros start here\n\n###\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#[========================================[.rst:\n.. command:: pkg_check_modules\n\n Checks for all the given modules. ::\n\n    pkg_check_modules(<PREFIX> [REQUIRED] [QUIET]\n                      [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]\n                      <MODULE> [<MODULE>]*)\n\n\n When the ``REQUIRED`` argument was set, macros will fail with an error\n when module(s) could not be found.\n\n When the ``QUIET`` argument is set, no status messages will be printed.\n\n By default, if :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` is 3.1 or\n later, or if :variable:`PKG_CONFIG_USE_CMAKE_PREFIX_PATH` is set, the\n :variable:`CMAKE_PREFIX_PATH`, :variable:`CMAKE_FRAMEWORK_PATH`, and\n :variable:`CMAKE_APPBUNDLE_PATH` cache and environment variables will\n be added to ``pkg-config`` search path.\n The ``NO_CMAKE_PATH`` and ``NO_CMAKE_ENVIRONMENT_PATH`` arguments\n disable this behavior for the cache variables and the environment\n variables, respectively.\n\n It sets the following variables: ::\n\n    PKG_CONFIG_FOUND          ... if pkg-config executable was found\n    PKG_CONFIG_EXECUTABLE     ... pathname of the pkg-config program\n    PKG_CONFIG_VERSION_STRING ... the version of the pkg-config program found\n                                  (since CMake 2.8.8)\n\n For the following variables two sets of values exist; first one is the\n common one and has the given PREFIX.  The second set contains flags\n which are given out when ``pkg-config`` was called with the ``--static``\n option. ::\n\n    <XPREFIX>_FOUND          ... set to 1 if module(s) exist\n    <XPREFIX>_LIBRARIES      ... only the libraries (w/o the '-l')\n    <XPREFIX>_LIBRARY_DIRS   ... the paths of the libraries (w/o the '-L')\n    <XPREFIX>_LDFLAGS        ... all required linker flags\n    <XPREFIX>_LDFLAGS_OTHER  ... all other linker flags\n    <XPREFIX>_INCLUDE_DIRS   ... the '-I' preprocessor flags (w/o the '-I')\n    <XPREFIX>_CFLAGS         ... all required cflags\n    <XPREFIX>_CFLAGS_OTHER   ... the other compiler flags\n\n ::\n\n    <XPREFIX> = <PREFIX>        for common case\n    <XPREFIX> = <PREFIX>_STATIC for static linking\n\n There are some special variables whose prefix depends on the count of\n given modules.  When there is only one module, <PREFIX> stays\n unchanged.  When there are multiple modules, the prefix will be\n changed to <PREFIX>_<MODNAME>: ::\n\n    <XPREFIX>_VERSION    ... version of the module\n    <XPREFIX>_PREFIX     ... prefix-directory of the module\n    <XPREFIX>_INCLUDEDIR ... include-dir of the module\n    <XPREFIX>_LIBDIR     ... lib-dir of the module\n\n ::\n\n    <XPREFIX> = <PREFIX>  when |MODULES| == 1, else\n    <XPREFIX> = <PREFIX>_<MODNAME>\n\n A <MODULE> parameter can have the following formats: ::\n\n    {MODNAME}            ... matches any version\n    {MODNAME}>={VERSION} ... at least version <VERSION> is required\n    {MODNAME}={VERSION}  ... exactly version <VERSION> is required\n    {MODNAME}<={VERSION} ... modules must not be newer than <VERSION>\n\n Examples\n\n .. code-block:: cmake\n\n    pkg_check_modules (GLIB2   glib-2.0)\n\n .. code-block:: cmake\n\n    pkg_check_modules (GLIB2   glib-2.0>=2.10)\n\n Requires at least version 2.10 of glib2 and defines e.g.\n ``GLIB2_VERSION=2.10.3``\n\n .. code-block:: cmake\n\n    pkg_check_modules (FOO     glib-2.0>=2.10 gtk+-2.0)\n\n Requires both glib2 and gtk2, and defines e.g.\n ``FOO_glib-2.0_VERSION=2.10.3`` and ``FOO_gtk+-2.0_VERSION=2.8.20``\n\n .. code-block:: cmake\n\n    pkg_check_modules (XRENDER REQUIRED xrender)\n\n Defines for example::\n\n   XRENDER_LIBRARIES=Xrender;X11``\n   XRENDER_STATIC_LIBRARIES=Xrender;X11;pthread;Xau;Xdmcp\n#]========================================]",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# check cached value\n",
        "Line" : 499,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#[========================================[.rst:\n.. command:: pkg_search_module\n\n Same as :command:`pkg_check_modules`, but instead it checks for given\n modules and uses the first working one. ::\n\n    pkg_search_module(<PREFIX> [REQUIRED] [QUIET]\n                      [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]\n                      <MODULE> [<MODULE>]*)\n\n Examples\n\n .. code-block:: cmake\n\n    pkg_search_module (BAR     libxml-2.0 libxml2 libxml>=2)\n#]========================================]",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# check cached value\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# iterate through all modules and stop at the first working one.\n",
        "Line" : 535,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "#[========================================[.rst:\n.. variable:: PKG_CONFIG_EXECUTABLE\n\n Path to the pkg-config executable.\n\n\n.. variable:: PKG_CONFIG_USE_CMAKE_PREFIX_PATH\n\n Whether :command:`pkg_check_modules` and :command:`pkg_search_module`\n should add the paths in :variable:`CMAKE_PREFIX_PATH`,\n :variable:`CMAKE_FRAMEWORK_PATH`, and :variable:`CMAKE_APPBUNDLE_PATH`\n cache and environment variables to ``pkg-config`` search path.\n\n If this variable is not set, this behavior is enabled by default if\n :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` is 3.1 or later, disabled\n otherwise.\n#]========================================]",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "### Local Variables:\n\n### mode: cmake\n\n### End:\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "cmake/Modules/FindTcMalloc.cmake" : {
      "ObjectId" : "68a8bc62a3a533c8f1cb7f2d16364b0b950f2783",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Tcmalloc library\n\n# Find the native Tcmalloc includes and library\n\n# This module defines\n\n#  TCMALLOC_INCLUDE_DIRS, where to find tcmalloc.h, Set when\n\n#                        TCMALLOC_INCLUDE_DIR is found.\n\n#  TCMALLOC_LIBRARIES, libraries to link against to use Tcmalloc.\n\n#  TCMALLOC_ROOT_DIR, The base directory to search for Tcmalloc.\n\n#                    This can also be an environment variable.\n\n#  TCMALLOC_FOUND, If false, do not try to use Tcmalloc.\n\n#\n\n# also defined, but not for general use are\n\n#  TCMALLOC_LIBRARY, where to find the Tcmalloc library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Blender Foundation.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If TCMALLOC_ROOT_DIR was defined in the environment, use it.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 34,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# Blastwave\n",
        "Line" : 35,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "# Debain tcmalloc minimal\n",
        "Line" : 36,
        "CharPositionInLine" : 22
      },
      "7" : {
        "Text" : "# Debian gperftools\n",
        "Line" : 37,
        "CharPositionInLine" : 26
      },
      "8" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TCMALLOC_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/Modules/FindZLIB.cmake" : {
      "ObjectId" : "a57f45008e7bbc31382668bf043661f0369fed2c",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindZLIB\n\n# --------\n\n#\n\n# Find the native ZLIB includes and library.\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target ``ZLIB::ZLIB``, if\n\n# ZLIB has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.\n\n#   ZLIB_LIBRARIES      - List of libraries when using zlib.\n\n#   ZLIB_FOUND          - True if zlib found.\n\n#\n\n# ::\n\n#\n\n#   ZLIB_VERSION_STRING - The version of zlib found (x.y.z)\n\n#   ZLIB_VERSION_MAJOR  - The major version of zlib\n\n#   ZLIB_VERSION_MINOR  - The minor version of zlib\n\n#   ZLIB_VERSION_PATCH  - The patch version of zlib\n\n#   ZLIB_VERSION_TWEAK  - The tweak version of zlib\n\n#\n\n# Backward Compatibility\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# The following variable are provided for backward compatibility\n\n#\n\n# ::\n\n#\n\n#   ZLIB_MAJOR_VERSION  - The major version of zlib\n\n#   ZLIB_MINOR_VERSION  - The minor version of zlib\n\n#   ZLIB_PATCH_VERSION  - The patch version of zlib\n\n#\n\n# Hints\n\n# ^^^^^\n\n#\n\n# A user may set ``ZLIB_ROOT`` to a zlib installation root to tell this\n\n# module where to look.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search ZLIB_ROOT first if it is set.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Normal search.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Try each search configuration.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Allow ZLIB_LIBRARY to be set manually, as the location of the zlib library\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# only append a TWEAK version if it exists:\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindZookeeperC.cmake" : {
      "ObjectId" : "b918a9fa100f054f0dd0cbd1eb8890eec761cb70",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/Findlibzmq.cmake" : {
      "ObjectId" : "81274438fa29e6951ac66ab3304a220acfa8ad6f",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 Daniel.Nachbaur@epfl.ch\n\n#\n\n# based on:\n\n# https://github.com/robertmaynard/Remus/blob/master/CMake/FindZeroMQ.cmake\n\n#\n\n# - Try to find libzmq headers and libraries\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(libzmq)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  LIBZMQ_ROOT_DIR  Set this variable to the root installation of\n\n#                            libzmq if the module has problems finding\n\n#                            the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  LIBZMQ_FOUND              System has libzmq libs/headers\n\n#  LIBZMQ_LIBRARIES          The libzmq libraries\n\n#  LIBZMQ_INCLUDE_DIR        The location of libzmq headers\n\n#  LIBZMQ_INCLUDE_DIRS       The location of libzmq headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add in all the names it can have on windows\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#now try to find the release and debug version\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/GoogleTest.cmake" : {
      "ObjectId" : "2c9ee1180da95d5a65bf50e1e3856cc24ff9f758",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nGoogleTest\n----------\n\nThis module defines functions to help use the Google Test infrastructure.  Two\nmechanisms for adding tests are provided. :command:`gtest_add_tests` has been\naround for some time, originally via ``find_package(GTest)``.\n:command:`gtest_discover_tests` was introduced in CMake 3.10.\n\nThe (older) :command:`gtest_add_tests` scans source files to identify tests.\nThis is usually effective, with some caveats, including in cross-compiling\nenvironments, and makes setting additional properties on tests more convenient.\nHowever, its handling of parameterized tests is less comprehensive, and it\nrequires re-running CMake to detect changes to the list of tests.\n\nThe (newer) :command:`gtest_discover_tests` discovers tests by asking the\ncompiled test executable to enumerate its tests.  This is more robust and\nprovides better handling of parameterized tests, and does not require CMake\nto be re-run when tests change.  However, it may not work in a cross-compiling\nenvironment, and setting test properties is less convenient.\n\nMore details can be found in the documentation of the respective functions.\n\nBoth commands are intended to replace use of :command:`add_test` to register\ntests, and will create a separate CTest test for each Google Test test case.\nNote that this is in some cases less efficient, as common set-up and tear-down\nlogic cannot be shared by multiple test cases executing in the same instance.\nHowever, it provides more fine-grained pass/fail information to CTest, which is\nusually considered as more beneficial.  By default, the CTest test name is the\nsame as the Google Test name (i.e. ``suite.testcase``); see also\n``TEST_PREFIX`` and ``TEST_SUFFIX``.\n\n.. command:: gtest_add_tests\n\n  Automatically add tests with CTest by scanning source code for Google Test\n  macros::\n\n    gtest_add_tests(TARGET target\n                    [SOURCES src1...]\n                    [EXTRA_ARGS arg1...]\n                    [WORKING_DIRECTORY dir]\n                    [TEST_PREFIX prefix]\n                    [TEST_SUFFIX suffix]\n                    [SKIP_DEPENDENCY]\n                    [TEST_LIST outVar]\n    )\n\n  ``gtest_add_tests`` attempts to identify tests by scanning source files.\n  Although this is generally effective, it uses only a basic regular expression\n  match, which can be defeated by atypical test declarations, and is unable to\n  fully \"split\" parameterized tests.  Additionally, it requires that CMake be\n  re-run to discover any newly added, removed or renamed tests (by default,\n  this means that CMake is re-run when any test source file is changed, but see\n  ``SKIP_DEPENDENCY``).  However, it has the advantage of declaring tests at\n  CMake time, which somewhat simplifies setting additional properties on tests,\n  and always works in a cross-compiling environment.\n\n  The options are:\n\n  ``TARGET target``\n    Specifies the Google Test executable, which must be a known CMake\n    executable target.  CMake will substitute the location of the built\n    executable when running the test.\n\n  ``SOURCES src1...``\n    When provided, only the listed files will be scanned for test cases.  If\n    this option is not given, the :prop_tgt:`SOURCES` property of the\n    specified ``target`` will be used to obtain the list of sources.\n\n  ``EXTRA_ARGS arg1...``\n    Any extra arguments to pass on the command line to each test case.\n\n  ``WORKING_DIRECTORY dir``\n    Specifies the directory in which to run the discovered test cases.  If this\n    option is not provided, the current binary directory is used.\n\n  ``TEST_PREFIX prefix``\n    Specifies a ``prefix`` to be prepended to the name of each discovered test\n    case.  This can be useful when the same source files are being used in\n    multiple calls to ``gtest_add_test()`` but with different ``EXTRA_ARGS``.\n\n  ``TEST_SUFFIX suffix``\n    Similar to ``TEST_PREFIX`` except the ``suffix`` is appended to the name of\n    every discovered test case.  Both ``TEST_PREFIX`` and ``TEST_SUFFIX`` may\n    be specified.\n\n  ``SKIP_DEPENDENCY``\n    Normally, the function creates a dependency which will cause CMake to be\n    re-run if any of the sources being scanned are changed.  This is to ensure\n    that the list of discovered tests is updated.  If this behavior is not\n    desired (as may be the case while actually writing the test cases), this\n    option can be used to prevent the dependency from being added.\n\n  ``TEST_LIST outVar``\n    The variable named by ``outVar`` will be populated in the calling scope\n    with the list of discovered test cases.  This allows the caller to do\n    things like manipulate test properties of the discovered tests.\n\n  .. code-block:: cmake\n\n    include(GoogleTest)\n    add_executable(FooTest FooUnitTest.cxx)\n    gtest_add_tests(TARGET      FooTest\n                    TEST_SUFFIX .noArgs\n                    TEST_LIST   noArgsTests\n    )\n    gtest_add_tests(TARGET      FooTest\n                    EXTRA_ARGS  --someArg someValue\n                    TEST_SUFFIX .withArgs\n                    TEST_LIST   withArgsTests\n    )\n    set_tests_properties(${noArgsTests}   PROPERTIES TIMEOUT 10)\n    set_tests_properties(${withArgsTests} PROPERTIES TIMEOUT 20)\n\n  For backward compatibility, the following form is also supported::\n\n    gtest_add_tests(exe args files...)\n\n  ``exe``\n    The path to the test executable or the name of a CMake target.\n  ``args``\n    A ;-list of extra arguments to be passed to executable.  The entire\n    list must be passed as a single argument.  Enclose it in quotes,\n    or pass ``\"\"`` for no arguments.\n  ``files...``\n    A list of source files to search for tests and test fixtures.\n    Alternatively, use ``AUTO`` to specify that ``exe`` is the name\n    of a CMake executable target whose sources should be scanned.\n\n  .. code-block:: cmake\n\n    include(GoogleTest)\n    set(FooTestArgs --foo 1 --bar 2)\n    add_executable(FooTest FooUnitTest.cxx)\n    gtest_add_tests(FooTest \"${FooTestArgs}\" AUTO)\n\n.. command:: gtest_discover_tests\n\n  Automatically add tests with CTest by querying the compiled test executable\n  for available tests::\n\n    gtest_discover_tests(target\n                         [EXTRA_ARGS arg1...]\n                         [WORKING_DIRECTORY dir]\n                         [TEST_PREFIX prefix]\n                         [TEST_SUFFIX suffix]\n                         [NO_PRETTY_TYPES] [NO_PRETTY_VALUES]\n                         [PROPERTIES name1 value1...]\n                         [TEST_LIST var]\n                         [DISCOVERY_TIMEOUT seconds]\n    )\n\n  ``gtest_discover_tests`` sets up a post-build command on the test executable\n  that generates the list of tests by parsing the output from running the test\n  with the ``--gtest_list_tests`` argument.  Compared to the source parsing\n  approach of :command:`gtest_add_tests`, this ensures that the full list of\n  tests, including instantiations of parameterized tests, is obtained.  Since\n  test discovery occurs at build time, it is not necessary to re-run CMake when\n  the list of tests changes.\n  However, it requires that :prop_tgt:`CROSSCOMPILING_EMULATOR` is properly set\n  in order to function in a cross-compiling environment.\n\n  Additionally, setting properties on tests is somewhat less convenient, since\n  the tests are not available at CMake time.  Additional test properties may be\n  assigned to the set of tests as a whole using the ``PROPERTIES`` option.  If\n  more fine-grained test control is needed, custom content may be provided\n  through an external CTest script using the :prop_dir:`TEST_INCLUDE_FILES`\n  directory property.  The set of discovered tests is made accessible to such a\n  script via the ``<target>_TESTS`` variable.\n\n  The options are:\n\n  ``target``\n    Specifies the Google Test executable, which must be a known CMake\n    executable target.  CMake will substitute the location of the built\n    executable when running the test.\n\n  ``EXTRA_ARGS arg1...``\n    Any extra arguments to pass on the command line to each test case.\n\n  ``WORKING_DIRECTORY dir``\n    Specifies the directory in which to run the discovered test cases.  If this\n    option is not provided, the current binary directory is used.\n\n  ``TEST_PREFIX prefix``\n    Specifies a ``prefix`` to be prepended to the name of each discovered test\n    case.  This can be useful when the same test executable is being used in\n    multiple calls to ``gtest_discover_tests()`` but with different\n    ``EXTRA_ARGS``.\n\n  ``TEST_SUFFIX suffix``\n    Similar to ``TEST_PREFIX`` except the ``suffix`` is appended to the name of\n    every discovered test case.  Both ``TEST_PREFIX`` and ``TEST_SUFFIX`` may\n    be specified.\n\n  ``NO_PRETTY_TYPES``\n    By default, the type index of type-parameterized tests is replaced by the\n    actual type name in the CTest test name.  If this behavior is undesirable\n    (e.g. because the type names are unwieldy), this option will suppress this\n    behavior.\n\n  ``NO_PRETTY_VALUES``\n    By default, the value index of value-parameterized tests is replaced by the\n    actual value in the CTest test name.  If this behavior is undesirable\n    (e.g. because the value strings are unwieldy), this option will suppress\n    this behavior.\n\n  ``PROPERTIES name1 value1...``\n    Specifies additional properties to be set on all tests discovered by this\n    invocation of ``gtest_discover_tests``.\n\n  ``TEST_LIST var``\n    Make the list of tests available in the variable ``var``, rather than the\n    default ``<target>_TESTS``.  This can be useful when the same test\n    executable is being used in multiple calls to ``gtest_discover_tests()``.\n    Note that this variable is only available in CTest.\n\n  ``DISCOVERY_TIMEOUT num``\n    Specifies how long (in seconds) CMake will wait for the test to enumerate\n    available tests.  If the test takes longer than this, discovery (and your\n    build) will fail.  Most test executables will enumerate their tests very\n    quickly, but under some exceptional circumstances, a test may require a\n    longer timeout.  The default is 5.  See also the ``TIMEOUT`` option of\n    :command:`execute_process`.\n\n    .. note::\n\n      In CMake versions 3.10.1 and 3.10.2, this option was called ``TIMEOUT``.\n      This clashed with the ``TIMEOUT`` test property, which is one of the\n      common properties that would be set with the ``PROPERTIES`` keyword,\n      usually leading to legal but unintended behavior.  The keyword was\n      changed to ``DISCOVERY_TIMEOUT`` in CMake 3.10.3 to address this\n      problem.  The ambiguous behavior of the ``TIMEOUT`` keyword in 3.10.1\n      and 3.10.2 has not been preserved.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Save project's policies\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if IN_LIST\n",
        "Line" : 243,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Non-keyword syntax, convert to keyword form\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# The non-keyword syntax allows the first argument to be an arbitrary\n\n# executable rather than a target if source files are also provided. In all\n\n# other cases, both forms require a target.\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Parameterized tests have a different signature for the filter\n",
        "Line" : 315,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Make sure tests disabled in GTest get disabled in CTest\n",
        "Line" : 327,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Add the disabled test if CMake is new enough\n\n# Note that this check is to allow backwards compatibility so this\n\n# module can be copied locally in projects to use with older CMake\n\n# versions\n",
        "Line" : 329,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define rule to generate test list for aforementioned test executable\n",
        "Line" : 412,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Add discovered tests to directory TEST_INCLUDE_FILES\n",
        "Line" : 449,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "###############################################################################\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Restore project's policies\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/Modules/GoogleTestAddTests.cmake" : {
      "ObjectId" : "5a4bdcad396d54553b0cf70462706691424790d2",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run test executable to get list of available tests\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parse output\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip header\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do we have a module name or a test name?\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Module; remove trailing '.' to get just the name...\n",
        "Line" : 56,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Test name; strip spaces and comments to get just the name...\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# ...and add to script\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Create a list of all discovered tests, which users may use to e.g. set\n\n# properties on the tests\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Write CTest script\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/Modules/SelectLibraryConfigurations.cmake" : {
      "ObjectId" : "d7108562b1bdee824723f15ade932d4564495371",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# SelectLibraryConfigurations\n\n# ---------------------------\n\n#\n\n#\n\n#\n\n# select_library_configurations( basename )\n\n#\n\n# This macro takes a library base name as an argument, and will choose\n\n# good values for basename_LIBRARY, basename_LIBRARIES,\n\n# basename_LIBRARY_DEBUG, and basename_LIBRARY_RELEASE depending on what\n\n# has been found and set.  If only basename_LIBRARY_RELEASE is defined,\n\n# basename_LIBRARY will be set to the release value, and\n\n# basename_LIBRARY_DEBUG will be set to basename_LIBRARY_DEBUG-NOTFOUND.\n\n# If only basename_LIBRARY_DEBUG is defined, then basename_LIBRARY will\n\n# take the debug value, and basename_LIBRARY_RELEASE will be set to\n\n# basename_LIBRARY_RELEASE-NOTFOUND.\n\n#\n\n# If the generator supports configuration types, then basename_LIBRARY\n\n# and basename_LIBRARIES will be set with debug and optimized flags\n\n# specifying the library to be used for the given configuration.  If no\n\n# build type has been set or the generator in use does not support\n\n# configuration types, then basename_LIBRARY and basename_LIBRARIES will\n\n# take only the release value, or the debug value if the release one is\n\n# not set.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Will Dicharry <wdicharry@stellarscience.com>\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This macro was adapted from the FindQt4 CMake module and is maintained by Will\n\n# Dicharry <wdicharry@stellarscience.com>.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if the generator supports configuration types or CMAKE_BUILD_TYPE\n\n# is set, then set optimized and debug options.\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "tools/bitcoin/gbtsync/CMakeLists.txt" : {
      "ObjectId" : "1799cfe1342428555db1b0b20b433736471d41f5",
      "LastModified" : "2019-02-08T08:08:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################### options ###################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Build Type: -DCMAKE_BUILD_TYPE=Debug|Release\n\n# Default: Release\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# stop building after the first error\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set C++ standard\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################### libraries ###################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# glog\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# mysql\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Force to use discovered OPENSSL_CRYPTO_LIBRARY & OPENSSL_SSL_LIBRARY\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# pthread\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# libconfig\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################### targets ###################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "tools/kafka_repeater/CMakeLists.txt" : {
      "ObjectId" : "f14798915b6762e65ea5bb479b1069da8e9d5567",
      "LastModified" : "2019-04-02T10:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set C++ standard\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# stop building after the first error\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Build Type: -DCMAKE_BUILD_TYPE=Debug|Release\n\n# Default: Release\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################### Libs ######################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################### Targets ######################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/share_convertor/CMakeLists.txt" : {
      "ObjectId" : "a583185a3b92a75bc231ccae7054b1d1f9cd3014",
      "LastModified" : "2019-04-02T10:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set C++ standard\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# stop building after the first error\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Build Type: -DCMAKE_BUILD_TYPE=Debug|Release\n\n# Default: Release\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################### Libs ######################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################### Targets ######################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/sharelog_to_parquet/CMakeLists.txt" : {
      "ObjectId" : "7b0e2239a0dfec48eeaddbe5f7089bfc884ff92c",
      "LastModified" : "2019-04-02T10:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set C++ standard\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# stop building after the first error\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Build Type: -DCMAKE_BUILD_TYPE=Debug|Release\n\n# Default: Release\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################### Libs ######################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################### Targets ######################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/tls_decrypt_proxy/CMakeLists.txt" : {
      "ObjectId" : "c8c8a4694551dc640bf5cfe2cc522c274d76e4a0",
      "LastModified" : "2019-04-02T10:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set C++ standard\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# stop building after the first error\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Build Type: -DCMAKE_BUILD_TYPE=Debug|Release\n\n# Default: Release\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################### Libs ######################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################### Targets ######################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 36
  },
  "ElapsedTime" : 1854
}