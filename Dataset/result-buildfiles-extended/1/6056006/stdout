{
  "Repository" : "6056006",
  "Revision" : "HEAD",
  "ObjectId" : "08b3301e4fb73cd669243642ad7aff5b38ba4466",
  "CommitTime" : "2019-04-17T08:21:42Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6bffbc6d3b3b267a3b8c2ed2cc84dd17bc50e7a4",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Specify search path for CMake modules to be loaded by include() \n\n# and find_package()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add defaults for cmake\n\n# Those need to be set before the project() call.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# global needed variable\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# SOVERSION scheme: CURRENT.AGE.REVISION\n\n#   If there was an incompatible interface change:\n\n#     Increment CURRENT. Set AGE and REVISION to 0\n\n#   If there was a compatible interface change:\n\n#     Increment AGE. Set REVISION to 0\n\n#   If the source code was changed, but there were no interface changes:\n\n#     Increment REVISION.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add definitions\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# disallow in-source build\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Copy library files to a lib sub-directory\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# search for libraries\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Find out if we have threading available\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Disable symbol versioning in non UNIX platforms\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# config.h checks\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# check subdirectories\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# pkg-config file\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# CMake config files\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# libssh-config-version.cmake\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# libssh-config.cmake\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### SOURCE PACKAGE\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Get the current ABI version from source\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Check if the ABI version should be updated\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Get the list of header files\n",
        "Line" : 179,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Extract the symbols marked as \"LIBSSH_API\" from the header files\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Target we can depend on in 'make dist'\n",
        "Line" : 194,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Set the path to the current map file\n",
        "Line" : 197,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# Generate the symbol version map file\n",
        "Line" : 200,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# Write the current version to the source\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 26
    },
    "CPackConfig.cmake" : {
      "ObjectId" : "51b300cc1d30af3e141fdac880961fc294142d22",
      "LastModified" : "2018-08-10T12:18:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### GENERAL SETTINGS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SOURCE GENERATOR\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### NSIS INSTALLER\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### nsis generator\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "7a1867287272678e2a67df2c18ac5a0e5524355d",
      "LastModified" : "2015-02-20T14:47:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CompilerChecks.cmake" : {
      "ObjectId" : "a3e4b5c9c8be1d0cf4f1a680ae67d346b85d2f07",
      "LastModified" : "2019-01-22T12:12:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check for -Werror turned on if possible\n\n#\n\n# This will prevent that compiler flags are detected incorrectly.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#add_c_compiler_flag(\"-Wcast-qual\" SUPPORTED_COMPILER_FLAGS)\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Allow zero for a variadic macro argument\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# This is needed as Solaris has a seperate libssp\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# This is needed as Solaris has a seperate libssp\n",
        "Line" : 80,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Unset CMAKE_REQUIRED_FLAGS\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This removes this annoying warning\n\n# \"warning: 'BN_CTX_free' is deprecated: first deprecated in OS X 10.7 [-Wdeprecated-declarations]\"\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "ConfigureChecks.cmake" : {
      "ObjectId" : "643a0a4b68c8c2fff4484b66fe7ae07bb6f0502f",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remove whitespaces from the argument.\n\n# This is needed for CC=\"ccache gcc\" cmake ..\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# HEADER FILES\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FUNCTIONS\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The getaddrinfo function is defined to the WspiapiGetAddrInfo inline function\n",
        "Line" : 197,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# libsocket (Solaris)\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# libnsl/inet_pton (Solaris)\n",
        "Line" : 226,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# librt\n",
        "Line" : 232,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# LIBRARIES\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# OPTIONS\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###########################################################\n\n# For detecting attributes we need to treat warnings as\n\n# errors\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Get warnings for attributs\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Turn warnings into errors\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# This is only available with OpenBSD's gcc implementation */\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Stop treating warnings as errors\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for version script support\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ENDIAN\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "DefineOptions.cmake" : {
      "ObjectId" : "5af58977378637b31544279a514085b7a78b08f6",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/AddCCompilerFlag.cmake" : {
      "ObjectId" : "c24c215c38822205ee4c82c9f083eddd98e6ca63",
      "LastModified" : "2018-08-23T20:33:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# add_c_compiler_flag(\"-Werror\" SUPPORTED_CFLAGS)\n\n#\n\n# Copyright (c) 2018      Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#string(APPEND ${_OUTPUT_VARIABLE} \"${_COMPILER_FLAG} \")\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/Modules/AddCMockaTest.cmake" : {
      "ObjectId" : "4b0c2dad4e2fbf74540ee68ea04ddc2446ff5a87",
      "LastModified" : "2018-09-26T14:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2007      Daniel Gollub <dgollub@suse.de>\n\n# Copyright (c) 2007-2018 Andreas Schneider <asn@cryptomilk.org>\n\n# Copyright (c) 2018      Anderson Toshiyuki Sasaki <ansasaki@redhat.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# AddCMockaTest\n\n# -------------\n\n#\n\n# This file provides a function to add a test\n\n#\n\n# Functions provided\n\n# ------------------\n\n#\n\n# ::\n\n#\n\n#   add_cmocka_test(target_name\n\n#                   SOURCES src1 src2 ... srcN\n\n#                   [COMPILE_OPTIONS opt1 opt2 ... optN]\n\n#                   [LINK_LIBRARIES lib1 lib2 ... libN]\n\n#                   [LINK_OPTIONS lopt1 lop2 .. loptN]\n\n#                  )\n\n#\n\n# ``target_name``:\n\n#   Required, expects the name of the test which will be used to define a target\n\n#\n\n# ``SOURCES``:\n\n#   Required, expects one or more source files names\n\n#\n\n# ``COMPILE_OPTIONS``:\n\n#   Optional, expects one or more options to be passed to the compiler\n\n#\n\n# ``LINK_LIBRARIES``:\n\n#   Optional, expects one or more libraries to be linked with the test\n\n#   executable.\n\n#\n\n# ``LINK_OPTIONS``:\n\n#   Optional, expects one or more options to be passed to the linker\n\n#\n\n#\n\n# Example:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   add_cmocka_test(my_test\n\n#                   SOURCES my_test.c other_source.c\n\n#                   COMPILE_OPTIONS -g -Wall\n\n#                   LINK_LIBRARIES mylib\n\n#                   LINK_OPTIONS -Wl,--enable-syscall-fixup\n\n#                  )\n\n#\n\n# Where ``my_test`` is the name of the test, ``my_test.c`` and\n\n# ``other_source.c`` are sources for the binary, ``-g -Wall`` are compiler\n\n# options to be used, ``mylib`` is a target of a library to be linked, and\n\n# ``-Wl,--enable-syscall-fixup`` is an option passed to the linker.\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/CheckCCompilerFlagSSP.cmake" : {
      "ObjectId" : "ab206ca70c70f337d5e5bdaf2374e00fb038c960",
      "LastModified" : "2018-08-29T19:21:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the C compiler supports a given flag in the\n\n# context of a stack checking compiler option.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CHECK_C_COMPILER_FLAG_SSP(FLAG VARIABLE)\n\n#\n\n#  FLAG - the compiler flag\n\n#  VARIABLE - variable to store the result\n\n#\n\n#  This actually calls check_c_source_compiles.\n\n#  See help for CheckCSourceCompiles for a listing of variables\n\n#  that can modify the build.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires cmake 3.10\n\n#include_guard(GLOBAL)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/DefineCMakeDefaults.cmake" : {
      "ObjectId" : "ef4fb3371b7534c4abc6030036b8cdcbc5e2ff70",
      "LastModified" : "2018-10-02T12:48:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Always include srcdir and builddir in include path\n\n# This saves typing ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY} in\n\n# about every subdir\n\n# since cmake 2.4.0\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put the include dirs which are in the source or build tree\n\n# before all other include dirs, so the headers in the sources\n\n# are prefered over the already installed ones\n\n# since cmake 2.4.1\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use colored output\n\n# since cmake 2.4.0\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create the compile command database for clang by default\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Always build with -fPIC\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/DefineCompilerFlags.cmake" : {
      "ObjectId" : "c9aea5800ed987b7d79caa555c7e035a82e2b05f",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Activate with: -DCMAKE_BUILD_TYPE=Profiling\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Activate with: -DCMAKE_BUILD_TYPE=AddressSanitizer\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Activate with: -DCMAKE_BUILD_TYPE=MemorySanitizer\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Activate with: -DCMAKE_BUILD_TYPE=UndefinedSanitizer\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/DefineInstallationPaths.cmake" : {
      "ObjectId" : "88e08cadf2381ea01680f42a32f10292c0197b72",
      "LastModified" : "2013-03-20T08:38:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Suffix for Linux\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# The following are directories where stuff will be installed to\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Same same\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/DefinePlatformDefaults.cmake" : {
      "ObjectId" : "77f8a46185624ec1902fcf716beef03b683ca255",
      "LastModified" : "2015-02-20T14:47:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set system vars\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/ExtractSymbols.cmake" : {
      "ObjectId" : "f7829334e03acc483ad65306bcb19e7f409d15e5",
      "LastModified" : "2018-08-29T19:21:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  Copyright (c) 2018 Anderson Toshiyuki Sasaki <ansasaki@redhat.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# ExtractSymbols\n\n# --------------\n\n#\n\n# This is a helper script for FindABImap.cmake.\n\n#\n\n# Extract symbols from header files and output a list to a file.\n\n# This script is run in build time to extract symbols from the provided header\n\n# files. This way, symbols added or removed can be checked and used to update\n\n# the symbol version script.\n\n#\n\n# All symbols followed by the character ``'('`` are extracted. If a\n\n# ``FILTER_PATTERN`` is provided, only the lines containing the given string are\n\n# considered.\n\n#\n\n# Expected defined variables\n\n# --------------------------\n\n#\n\n# ``HEADERS_LIST_FILE``:\n\n#   Required, expects a file containing the list of header files to be parsed.\n\n#\n\n# ``OUTPUT_PATH``:\n\n#   Required, expects the output file path.\n\n#\n\n# Optionally defined variables\n\n# ----------------------------\n\n#\n\n# ``FILTER_PATTERN``:\n\n#   Expects a string. Only lines containing the given string will be considered\n\n#   when extracting symbols.\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Filter only lines containing the FILTER_PATTERN\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Remove function-like macros\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get only the function names followed by '('\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Remove '('\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindABIMap.cmake" : {
      "ObjectId" : "e0520abdc88acea2833ef842d2534da985520fe4",
      "LastModified" : "2018-08-29T19:21:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  Copyright (c) 2018 Anderson Toshiyuki Sasaki <ansasaki@redhat.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindABIMap\n\n# ----------\n\n#\n\n# This file provides functions to generate the symbol version script. It uses\n\n# the ``abimap`` tool to generate and update the linker script file. It can be\n\n# installed by calling::\n\n#\n\n#   $ pip install abimap\n\n#\n\n# The ``function generate_map_file`` generates a symbol version script\n\n# containing the provided symbols. It defines a custom command which sets\n\n# ``target_name`` as its ``OUTPUT``.\n\n#\n\n# The experimental function ``extract_symbols()`` is provided as a simple\n\n# parser to extract the symbols from C header files. It simply extracts symbols\n\n# followed by an opening '``(``'. It is recommended to use a filter pattern to\n\n# select the lines to be considered. It defines a custom command which sets\n\n# ``target_name`` as its output.\n\n#\n\n# The helper function ``get_files_list()`` is provided to find files given a\n\n# name pattern. It defines a custom command which sets ``target_name`` as its\n\n# output.\n\n#\n\n# Functions provided\n\n# ------------------\n\n#\n\n# ::\n\n#\n\n#   generate_map_file(target_name\n\n#                     RELEASE_NAME_VERSION release_name\n\n#                     SYMBOLS symbols_target\n\n#                     [CURRENT_MAP cur_map]\n\n#                     [FINAL]\n\n#                     [BREAK_ABI]\n\n#                     [COPY_TO output]\n\n#                    )\n\n#\n\n# ``target_name``:\n\n#   Required, expects the name of the file to receive the generated symbol\n\n#   version script. It should be added as a dependency for the library. Use the\n\n#   linker option ``--version-script filename`` to add the version information\n\n#   to the symbols when building the library.\n\n#\n\n# ``RELEASE_NAME_VERSION``:\n\n#   Required, expects a string containing the name and version information to be\n\n#   added to the symbols in the format ``lib_name_1_2_3``.\n\n#\n\n# ``SYMBOLS``:\n\n#   Required, expects a target with the property ``LIST_FILE`` containing a path\n\n#   to a file containing the list of symbols to be added to the symbol version\n\n#   script.\n\n#\n\n# ``CURRENT_MAP``:\n\n#   Optional. If given, the new set of symbols will be checked against the\n\n#   ones contained in the ``cur_map`` file and updated properly. If an\n\n#   incompatible change is detected and ``BREAK_ABI`` is not defined, the build\n\n#   will fail.\n\n#\n\n# ``FINAL``:\n\n#   Optional. If given, will provide the ``--final`` option to ``abimap`` tool,\n\n#   which will mark the modified release in the symbol version script with a\n\n#   special comment, preventing later changes. This option should be set when\n\n#   creating a library release and the resulting map file should be stored with\n\n#   the source code.\n\n#\n\n# ``BREAK_ABI``:\n\n#   Optional. If provided, will use ``abimap`` ``--allow-abi-break`` option, which\n\n#   accepts incompatible changes to the set of symbols. This is necessary if any\n\n#   previously existing symbol were removed.\n\n#\n\n# ``COPY_TO``:\n\n#   Optional, expects a string containing the path to where the generated\n\n#   map file will be copied.\n\n#\n\n# Example:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   find_package(ABIMap)\n\n#   generate_map_file(\"lib.map\"\n\n#                     RELEASE_NAME_VERSION \"lib_1_0_0\"\n\n#                     SYMBOLS symbols\n\n#                    )\n\n#\n\n# Where the target ``symbols`` has its property ``LIST_FILE`` set to the path to\n\n# a file containing::\n\n#\n\n#  ``symbol1``\n\n#  ``symbol2``\n\n#\n\n# This example would result in the symbol version script to be created in\n\n# ``${CMAKE_CURRENT_BINARY_DIR}/lib.map`` containing the provided symbols.\n\n#\n\n# ::\n\n#\n\n#   get_files_list(target_name\n\n#                   DIRECTORIES dir1 [dir2 ...]\n\n#                   FILES_PATTERNS exp1 [exp2 ...]\n\n#                   [COPY_TO output]\n\n#                  )\n\n#\n\n# ``target_name``:\n\n#   Required, expects the name of the target to be created. A file named as\n\n#   ``${target_name}.list`` will be created in\n\n#   ``${CMAKE_CURRENT_BINARY_DIR}`` to receive the list of files found.\n\n#\n\n# ``DIRECTORIES``:\n\n#   Required, expects a list of directories paths. Only absolute paths are\n\n#   supported.\n\n#\n\n# ``FILES_PATTERN``:\n\n#   Required, expects a list of matching expressions to find the files to be\n\n#   considered in the directories.\n\n#\n\n# ``COPY_TO``:\n\n#   Optional, expects a string containing the path to where the file containing\n\n#   the list of files will be copied.\n\n#\n\n# This command searches the directories provided in ``DIRECTORIES`` for files\n\n# matching any of the patterns provided in ``FILES_PATTERNS``. The obtained list\n\n# is written to the path specified by ``output``. A target named ``target_name``\n\n# will be created and its property ``LIST_FILE`` will be set to contain\n\n# ``${CMAKE_CURRENT_BINARY_DIR}/${target_name}.list``\n\n#\n\n# Example:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   find_package(ABIMap)\n\n#   get_files_list(target\n\n#     DIRECTORIES \"/include/mylib\"\n\n#     FILES_PATTERNS \"*.h\"\n\n#     COPY_TO \"my_list.txt\"\n\n#   )\n\n#\n\n# Consider that ``/include/mylib`` contains 3 files, ``h1.h``, ``h2.h``, and\n\n# ``h3.hpp``\n\n#\n\n# Will result in a file ``my_list.txt`` containing::\n\n#\n\n#   ``h1.h;h2.h``\n\n#\n\n# And the target ``target`` will have its property ``LIST_FILE`` set to contain\n\n# ``${CMAKE_CURRENT_BINARY_DIR}/target.list``\n\n#\n\n# ::\n\n#\n\n#   extract_symbols(target_name\n\n#                   HEADERS_LIST headers_list_target\n\n#                   [FILTER_PATTERN pattern]\n\n#                   [COPY_TO output]\n\n#                  )\n\n#\n\n# ``target_name``:\n\n#   Required, expects the name of the target to be created. A file named after\n\n#   the string given in ``target_name`` will be created in\n\n#   ``${CMAKE_CURRENT_BINARY_DIR}`` to receive the list of symbols.\n\n#\n\n# ``HEADERS_LIST``:\n\n#   Required, expects a target with the property ``LIST_FILE`` set, containing a\n\n#   file path. Such file must contain a list of files paths.\n\n#\n\n# ``FILTER_PATTERN``:\n\n#   Optional, expects a string. Only the lines containing the filter pattern\n\n#   will be considered.\n\n#\n\n# ``COPY_TO``:\n\n#   Optional, expects a string containing the path to where the file containing\n\n#   the found symbols will be copied.\n\n#\n\n# This command extracts the symbols from the files listed in\n\n# ``headers_list`` and write them on the ``output`` file. If ``pattern``\n\n# is provided, then only the lines containing the string given in ``pattern``\n\n# will be considered. It is recommended to provide a ``FILTER_PATTERN`` to mark\n\n# the lines containing exported function declaration, since this function is\n\n# experimental and can return wrong symbols when parsing the header files. A\n\n# target named ``target_name`` will be created with the property ``LIST_FILE``\n\n# set to contain ``${CMAKE_CURRENT_BINARY_DIR}/${target_name}.list``.\n\n#\n\n# Example:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   find_package(ABIMap)\n\n#   extract_symbols(\"lib.symbols\"\n\n#     HEADERS_LIST \"headers_target\"\n\n#     FILTER_PATTERN \"API_FUNCTION\"\n\n#   )\n\n#\n\n# Where ``LIST_FILE`` property in ``headers_target`` points to a file\n\n# containing::\n\n#\n\n#   header1.h;header2.h\n\n#\n\n# Where ``header1.h`` contains::\n\n#\n\n#   API_FUNCTION int exported_func1(int a, int b);\n\n#\n\n# ``header2.h`` contains::\n\n#\n\n#   API_FUNCTION int exported_func2(int a);\n\n#\n\n#   int private_func2(int b);\n\n#\n\n# Will result in a file ``lib.symbols.list`` in ``${CMAKE_CURRENT_BINARY_DIR}``\n\n# containing::\n\n#\n\n#   ``exported_func1``\n\n#   ``exported_func2``\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for python which is required\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Search for abimap tool used to generate the map files\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get the abimap version\n",
        "Line" : 241,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# If the version string starts with abimap-, strip it\n",
        "Line" : 246,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Define helper scripts\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The DIRS argument is required\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# The FILES_PATTERNS argument is required\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Copy the generated file back to the COPY_TO\n",
        "Line" : 314,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# The HEADERS_LIST_FILE argument is required\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Copy the generated file back to the COPY_TO\n",
        "Line" : 381,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Set generated map file path\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Add a custom command setting the map as OUTPUT to allow it to be added as\n\n# a generated source\n",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Copy the generated map back to the COPY_TO\n",
        "Line" : 471,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 15
    },
    "cmake/Modules/FindArgp.cmake" : {
      "ObjectId" : "454965ac4e6dcb6aec791f07b48f995dd09e513b",
      "LastModified" : "2016-03-17T09:42:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ARGP\n\n# Once done this will define\n\n#\n\n#  ARGP_ROOT_DIR - Set this variable to the root installation of ARGP\n\n#\n\n# Read-Only variables:\n\n#  ARGP_FOUND - system has ARGP\n\n#  ARGP_INCLUDE_DIR - the ARGP include directory\n\n#  ARGP_LIBRARIES - Link these to use ARGP\n\n#  ARGP_DEFINITIONS - Compiler switches required for using ARGP\n\n#\n\n#=============================================================================\n\n#  Copyright (c) 2011-2016 Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n#  Distributed under the OSI-approved BSD License (the \"License\");\n\n#  see accompanying file Copyright.txt for details.\n\n#\n\n#  This software is distributed WITHOUT ANY WARRANTY; without even the\n\n#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the License for more information.\n\n#=============================================================================\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show the ARGP_INCLUDE_DIR and ARGP_LIBRARIES variables only in the advanced view\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindCMocka.cmake" : {
      "ObjectId" : "76b4ba74d7a53cfae3ae1e765d467ebbf3cd5839",
      "LastModified" : "2015-02-20T14:47:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find CMocka\n\n# Once done this will define\n\n#\n\n#  CMOCKA_ROOT_DIR - Set this variable to the root installation of CMocka\n\n#\n\n# Read-Only variables:\n\n#  CMOCKA_FOUND - system has CMocka\n\n#  CMOCKA_INCLUDE_DIR - the CMocka include directory\n\n#  CMOCKA_LIBRARIES - Link these to use CMocka\n\n#  CMOCKA_DEFINITIONS - Compiler switches required for using CMocka\n\n#\n\n#=============================================================================\n\n#  Copyright (c) 2011-2012 Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n#  Distributed under the OSI-approved BSD License (the \"License\");\n\n#  see accompanying file Copyright.txt for details.\n\n#\n\n#  This software is distributed WITHOUT ANY WARRANTY; without even the\n\n#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the License for more information.\n\n#=============================================================================\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show the CMOCKA_INCLUDE_DIR and CMOCKA_LIBRARIES variables only in the advanced view\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGCrypt.cmake" : {
      "ObjectId" : "b1f73d8174acda3deff9cdb4c8a7fa5603909478",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GCrypt\n\n# Once done this will define\n\n#\n\n#  GCRYPT_FOUND - system has GCrypt\n\n#  GCRYPT_INCLUDE_DIRS - the GCrypt include directory\n\n#  GCRYPT_LIBRARIES - Link these to use GCrypt\n\n#  GCRYPT_DEFINITIONS - Compiler switches required for using GCrypt\n\n#\n\n#=============================================================================\n\n#  Copyright (c) 2009-2012 Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n#  Distributed under the OSI-approved BSD License (the \"License\");\n\n#  see accompanying file Copyright.txt for details.\n\n#\n\n#  This software is distributed WITHOUT ANY WARRANTY; without even the\n\n#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the License for more information.\n\n#=============================================================================\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show the GCRYPT_INCLUDE_DIRS and GCRYPT_LIBRARIES variables only in the advanced view\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGSSAPI.cmake" : {
      "ObjectId" : "4c3f44b138bca16c416a9b91d415bc7074a96cf6",
      "LastModified" : "2016-03-17T09:42:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GSSAPI\n\n# Once done this will define\n\n#\n\n#  KRB5_CONFIG - Path to krb5-config\n\n#  GSSAPI_ROOT_DIR - Set this variable to the root installation of GSSAPI\n\n#\n\n# Read-Only variables:\n\n#  GSSAPI_FLAVOR_MIT - set to TURE if MIT Kerberos has been found\n\n#  GSSAPI_FLAVOR_HEIMDAL - set to TRUE if Heimdal Keberos has been found\n\n#  GSSAPI_FOUND - system has GSSAPI\n\n#  GSSAPI_INCLUDE_DIR - the GSSAPI include directory\n\n#  GSSAPI_LIBRARIES - Link these to use GSSAPI\n\n#  GSSAPI_DEFINITIONS - Compiler switches required for using GSSAPI\n\n#\n\n#=============================================================================\n\n#  Copyright (c) 2013 Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n#  Distributed under the OSI-approved BSD License (the \"License\");\n\n#  see accompanying file Copyright.txt for details.\n\n#\n\n#  This software is distributed WITHOUT ANY WARRANTY; without even the\n\n#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the License for more information.\n\n#=============================================================================\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if we have MIT KRB5\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Get the include dir\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Check for HEIMDAL\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# show the GSSAPI_INCLUDE_DIRS and GSSAPI_LIBRARIES variables only in the advanced view\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindMbedTLS.cmake" : {
      "ObjectId" : "baec8adc172efdf613334e18174057b360483207",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find mbedTLS\n\n# Once done this will define\n\n#\n\n#  MBEDTLS_FOUND - system has mbedTLS\n\n#  MBEDTLS_INCLUDE_DIRS - the mbedTLS include directory\n\n#  MBEDTLS_LIBRARIES - Link these to use mbedTLS\n\n#  MBEDTLS_DEFINITIONS - Compiler switches required for using mbedTLS\n\n#=============================================================================\n\n#  Copyright (c) 2017 Sartura d.o.o.\n\n#\n\n#  Author: Juraj Vijtiuk <juraj.vijtiuk@sartura.hr>\n\n#\n\n#  Distributed under the OSI-approved BSD License (the \"License\");\n\n#  see accompanying file Copyright.txt for details.\n\n#\n\n#  This software is distributed WITHOUT ANY WARRANTY; without even the\n\n#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the License for more information.\n\n#=============================================================================\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show the MBEDTLS_INCLUDE_DIRS and MBEDTLS_LIBRARIES variables only in the advanced view\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindNSIS.cmake" : {
      "ObjectId" : "9f1ab176c00a07aa3b81908377249b8cfe40bbd6",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find NSIS\n\n# Once done this will define\n\n#\n\n#  NSIS_ROOT_PATH - Set this variable to the root installation of NSIS\n\n#\n\n# Read-Only variables:\n\n#\n\n#  NSIS_FOUND - system has NSIS\n\n#  NSIS_MAKE - NSIS creator executable\n\n#\n\n#=============================================================================\n\n#  Copyright (c) 2010-2013 Andreas Schneider <asn@cryptomilk.org>\n\n#\n\n#  Distributed under the OSI-approved BSD License (the \"License\");\n\n#  see accompanying file Copyright.txt for details.\n\n#\n\n#  This software is distributed WITHOUT ANY WARRANTY; without even the\n\n#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#  See the License for more information.\n\n#=============================================================================\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindNaCl.cmake" : {
      "ObjectId" : "b1a8da457d710bbbc2ea07309a718365a93c183a",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find NaCl\n\n# Once done this will define\n\n#\n\n#  NACL_FOUND - system has NaCl\n\n#  NACL_INCLUDE_DIRS - the NaCl include directory\n\n#  NACL_LIBRARIES - Link these to use NaCl\n\n#  NACL_DEFINITIONS - Compiler switches required for using NaCl\n\n#\n\n#  Copyright (c) 2010 Andreas Schneider <asn@cryptomilk.org>\n\n#  Copyright (c) 2013 Aris Adamantiadis <aris@badcode.be>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the NACL_INCLUDE_DIRS and NACL_LIBRARIES variables only in the advanced view\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/GenerateMap.cmake" : {
      "ObjectId" : "c22dfbc3c330a021e6caaf74e3f8dd4d51853bf5",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  Copyright (c) 2018 Anderson Toshiyuki Sasaki <ansasaki@redhat.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# GenerateMap\n\n# -----------\n\n#\n\n# This is a helper script for FindABImap.cmake.\n\n#\n\n# Generates a symbols version script using the abimap tool.\n\n# This script is run in build time to use the correct command depending on the\n\n# existence of the file provided ``CURRENT_MAP``.\n\n#\n\n# If the file exists, the ``abimap update`` subcommand is used to update the\n\n# existing map. Otherwise, the ``abimap new`` subcommand is used to create a new\n\n# map file.\n\n#\n\n# If the file provided in ``CURRENT_MAP`` exists, it is copied to the\n\n# ``OUTPUT_PATH`` before updating.\n\n# This is required because ``abimap`` do not generate output if no symbols were\n\n# changed when updating an existing file.\n\n#\n\n# Expected defined variables\n\n# --------------------------\n\n#\n\n# ``SYMBOLS``:\n\n#   Required file containing the symbols to be used as input. Usually this is\n\n#   the ``OUTPUT`` generated by ``extract_symbols()`` function provided in\n\n#   FindABImap.cmake\n\n#\n\n# ``RELEASE_NAME_VERSION``:\n\n#   Required, expects the library name and version information to be added to\n\n#   the symbols in the format ``library_name_1_2_3``\n\n#\n\n# ``CURRENT_MAP``:\n\n#   Required, expects the path to the current map file (or the path were it\n\n#   should be)\n\n#\n\n# ``OUTPUT_PATH``:\n\n#   Required, expects the output file path.\n\n#\n\n# ``ABIMAP_EXECUTABLE``:\n\n#   Required, expects the path to the ``abimap`` tool.\n\n#\n\n# Optionally defined variables\n\n# ----------------------------\n\n#\n\n# ``FINAL``:\n\n#   If defined, will mark the modified set of symbols in the symbol version\n\n#   script as final, preventing later changes using ``abimap``.\n\n#\n\n# ``BREAK_ABI``:\n\n#   If defined, the build will not fail if symbols were removed.\n\n#   If defined and a symbol is removed, a new release is created containing\n\n#   all symbols from all released versions. This makes an incompatible release.\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/GetFilesList.cmake" : {
      "ObjectId" : "e3e8a2a8b807d5ac9aff8ddd4efadc4037f2d4a0",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  Copyright (c) 2018 Anderson Toshiyuki Sasaki <ansasaki@redhat.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# GetFilesList\n\n# ------------\n\n#\n\n# This is a helper script for FindABImap.cmake.\n\n#\n\n# Search in the provided directories for files matching the provided pattern.\n\n# The list of files is then written to the output file.\n\n#\n\n# Expected defined variables\n\n# --------------------------\n\n#\n\n# ``DIRECTORIES``:\n\n#   Required, expects a list of directories paths.\n\n#\n\n# ``FILES_PATTERNS``:\n\n#   Required, expects a list of patterns to be used to search files\n\n#\n\n# ``OUTPUT_PATH``:\n\n#   Required, expects the output file path.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create the list of expressions for the files\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create the list of files\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Write to the output\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/MacroEnsureOutOfSourceBuild.cmake" : {
      "ObjectId" : "a2e9480992696ab24318303b337689fbab019722",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n\n# MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Toolchain-cross-m32.cmake" : {
      "ObjectId" : "7918c604c622717a9676687a5243a7a892dce4b8",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fedora\n",
        "Line" : 4,
        "CharPositionInLine" : 20
      },
      "1" : {
        "Text" : "# Arch, Solus\n",
        "Line" : 7,
        "CharPositionInLine" : 26
      },
      "2" : {
        "Text" : "# this is probably unlikely to be needed, but just in case\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# on Fedora and Arch and similar, point pkgconfig at 32 bit .pc files. We have\n\n# to include the regular system .pc files as well (at the end), because some\n\n# are not always present in the 32 bit directory\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "config.h.cmake" : {
      "ObjectId" : "404c01688e7d99ae024ba9a77a67fe45a3e8bc99",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Name of package */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Version number of package */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Global bind configuration file path */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/************************** HEADER FILES *************************/",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the <argp.h> header file. */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the <aprpa/inet.h> header file. */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to 1 if you have the <glob.h> header file. */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the <valgrind/valgrind.h> header file. */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the <pty.h> header file. */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the <utmp.h> header file. */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the <util.h> header file. */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the <libutil.h> header file. */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the <sys/time.h> header file. */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define to 1 if you have the <sys/utime.h> header file. */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define to 1 if you have the <io.h> header file. */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define to 1 if you have the <termios.h> header file. */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to 1 if you have the <stdint.h> header file. */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define to 1 if you have the <openssl/aes.h> header file. */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define to 1 if you have the <wspiapi.h> header file. */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to 1 if you have the <openssl/blowfish.h> header file. */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to 1 if you have the <openssl/des.h> header file. */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define to 1 if you have the <openssl/ecdh.h> header file. */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define to 1 if you have the <openssl/ec.h> header file. */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define to 1 if you have the <openssl/ecdsa.h> header file. */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to 1 if you have the <pthread.h> header file. */",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define to 1 if you have eliptic curve cryptography in openssl */",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define to 1 if you have eliptic curve cryptography in gcrypt */",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define to 1 if you have eliptic curve cryptography */",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define to 1 if you have DSA */",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Define to 1 if you have gl_flags as a glob_t sturct member */",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/*************************** FUNCTIONS ***************************/",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Define to 1 if you have the `EVP_aes128_ctr' function. */",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Define to 1 if you have the `EVP_aes128_cbc' function. */",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Define to 1 if you have the `EVP_aes128_gcm' function. */",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Define to 1 if you have the `CRYPTO_THREADID_set_callback' function. */",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Define to 1 if you have the `CRYPTO_ctr128_encrypt' function. */",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Define to 1 if you have the `EVP_CIPHER_CTX_new' function. */",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Define to 1 if you have the `EVP_KDF_CTX_new_id' function. */",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Define to 1 if you have the `OPENSSL_ia32cap_loc' function. */",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Define to 1 if you have the `snprintf' function. */",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Define to 1 if you have the `_snprintf' function. */",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* Define to 1 if you have the `_snprintf_s' function. */",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* Define to 1 if you have the `vsnprintf' function. */",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* Define to 1 if you have the `_vsnprintf' function. */",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Define to 1 if you have the `_vsnprintf_s' function. */",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Define to 1 if you have the `isblank' function. */",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Define to 1 if you have the `strncpy' function. */",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Define to 1 if you have the `strndup' function. */",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Define to 1 if you have the `cfmakeraw' function. */",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Define to 1 if you have the `getaddrinfo' function. */",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* Define to 1 if you have the `poll' function. */",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Define to 1 if you have the `select' function. */",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Define to 1 if you have the `clock_gettime' function. */",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Define to 1 if you have the `ntohll' function. */",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Define to 1 if you have the `htonll' function. */",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Define to 1 if you have the `strtoull' function. */",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Define to 1 if you have the `__strtoull' function. */",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Define to 1 if you have the `_strtoui64' function. */",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Define to 1 if you have the `glob' function. */",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Define to 1 if you have the `explicit_bzero' function. */",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Define to 1 if you have the `memset_s' function. */",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Define to 1 if you have the `SecureZeroMemory' function. */",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Define to 1 if you have the `cmocka_set_test_filter' function. */",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/*************************** LIBRARIES ***************************/",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Define to 1 if you have the `crypto' library (-lcrypto). */",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Define to 1 if you have the `gcrypt' library (-lgcrypt). */",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Define to 1 if you have the 'mbedTLS' library (-lmbedtls). */",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* Define to 1 if you have the `pthread' library (-lpthread). */",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Define to 1 if you have the `cmocka' library (-lcmocka). */",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "/**************************** OPTIONS ****************************/",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "/* Define to 1 if you want to enable GSSAPI */",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "/* Define to 1 if you want to enable ZLIB */",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "/* Define to 1 if you want to enable SFTP */",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "/* Define to 1 if you want to enable server support */",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "/* Define to 1 if you want to enable DH group exchange algorithms */",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "/* Define to 1 if you want to enable blowfish cipher support */",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "/* Define to 1 if you want to enable debug output for crypto functions */",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* Define to 1 if you want to enable debug output for packet functions */",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "/* Define to 1 if you want to enable pcap output support (experimental) */",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Define to 1 if you want to enable calltrace debug output */",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "/* Define to 1 if you want to enable NaCl support */",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "/*************************** ENDIAN *****************************/",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 84
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "f96b02788c13c08b012d4805d3940432b122d5af",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Build the documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This updates the Doxyfile if we do changes here\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# DOXYGEN_FOUND\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# CMAKE_VERSION\n",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "d064fd5d6eeefc6f060d603394e6aee3f532d6ac",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "a01b5298e92f3e0f6266867552f37f64f910dd70",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/libssh/CMakeLists.txt" : {
      "ObjectId" : "85ffa6f085c497705949b320f643a1ee4b32d393",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libssh.pc.cmake" : {
      "ObjectId" : "48fbf7ff766d4efbea328b738e55e050db3601b6",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "db7e74a019cedb3fe49a43250dbcb7dc4b9cc367",
      "LastModified" : "2019-04-04T06:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the path to the default map file\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get the list of header files\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Extract the symbols marked as \"LIBSSH_API\" from the header files\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Generate the symbol version map file\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Change path to devel map file\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "8b2359402a490c5034df63cd3fa9f6d4743f5149",
      "LastModified" : "2019-04-17T08:21:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create test library\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# chroot_wrapper\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ssh_ping\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# homedir will be used in passwd\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "### Setup nss_wrapper\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "### Setup pam_wrapper\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Give bob some keys\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Allow to auth with bob his public keys on alice account\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# append ECDSA public key\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# append ed25519 public key\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Copy the signed key to an alternative directory in bob's homedir.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "tests/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "8dc8552f1a901db66499d4059a265c7ac43a75c2",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/client/CMakeLists.txt" : {
      "ObjectId" : "6da5452ccc4a0938274de0cdd560dfaa42178845",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/ctest-default.cmake" : {
      "ObjectId" : "dbf53e30d5c93c7b38bce661c9c42b79a9622fe8",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## The directory to run ctest in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## The hostname of the machine\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## The buildname\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## The Makefile generator to use\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## The Build configuration to use.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## The build options for the project\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(CTEST_CUSTOM_MEMCHECK_IGNORE torture_rand)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The Model to set: Nightly, Continous, Experimental\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The branch\n\n#set(CTEST_GIT_BRANCH \"--branch v0-5\")\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Wether to enable memory checking.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Wether to enable code coverage.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#######################################################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/fuzz/CMakeLists.txt" : {
      "ObjectId" : "5c1e63b0ad79e4983ef160aeb37464a97a991dad",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/pkd/CMakeLists.txt" : {
      "ObjectId" : "259d83abed492c936f4804e13ab47f0808fd142b",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# pkd_hello_i1 runs only one iteration per algorithm combination for\n\n# sake of speeding up overall test run time.  More iterations can be\n\n# specified with `-i` and may be helpful for chasing down bugs that\n\n# are not 100% reproducible.\n\n#\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Configure environment for cwrap socket wrapper.\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/server/CMakeLists.txt" : {
      "ObjectId" : "68f0ace269676f2bea148a3338670b1266ec72e8",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/server/test_server/CMakeLists.txt" : {
      "ObjectId" : "cc8ed6f031902abfd19803017df68d1e9bd0e56c",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    torture_server_kbdint\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/unittests/CMakeLists.txt" : {
      "ObjectId" : "389100bdc3eeef63a34b4556bb7f9551b5446962",
      "LastModified" : "2019-04-01T06:38:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this uses a socketpair\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# requires ssh-keygen\n",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# requires /dev/null\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# requires pthread\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Not working correctly\n\n#if (WITH_SERVER)\n\n#    add_cmocka_test(torture_server_x11 torture_server_x11.c ${TEST_TARGET_LIBRARIES})\n\n#endif (WITH_SERVER)\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 41,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 1508
}