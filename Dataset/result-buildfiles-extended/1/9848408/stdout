{
  "Repository" : "9848408",
  "Revision" : "HEAD",
  "ObjectId" : "eb468b1bf6e05f4e41c7aaa5d35d962e992c8ed5",
  "CommitTime" : "2018-12-16T22:56:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "8e750728159ca70d46882bf9d91dc066b48f82d7",
      "LastModified" : "2018-11-01T03:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Figure our version\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not currently using the split out variants\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Modules we'll need\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Guard against in-tree builds\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Most of our bits are broken out into smaller files in a local dir\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Setup basic vars for where our pieces are, list of source files, etc.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Do some basic checks of the compiler and stdlib\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set our install paths\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# First things first.  If we don't have X, we're going nowhere.\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This just isn't feasible...\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Need to link in at least these; double check that we found 'em before\n\n# blindly applying them.  We can seemingly get through the above just\n\n# fine, even if it didn't find all the bits...\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Setup some search paths\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Header files are in both source and build dirs\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# Look for various things on the system and setup our handlers for them,\n\n# and put the build together.\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check our build options and set things based on them\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Do checks for library functions we need, and enable workarounds for any\n\n# cases we decide are worth handling that way.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If we're building out of a VCS, find those bits so we can stash the\n\n# revision info.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Find some tools used for generating sources and manuals, and setup the\n\n# targets to build them all.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Targets to run doxygen and ctags; nobody but devs care\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# And link up the actual ctwm binary.  We actually build a libctwmlib\n\n# with all our contents except the trivial main() wrapper, then build\n\n# ctwm with that; this makes it easy to build other binaries (like tests)\n\n# with access to all our internal funcs.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Keep ctwmlib before the shared libs.  With some ld(1)'s and build\n\n# environments that set --as-needed, having it after means that ld will\n\n# have already discarded all the shared libs as \"unused\" before it gets\n\n# to all the actual ctwm objects that need the symbols.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# This doesn't really serve much purpose at the moment, so it's not even\n\n# documented, but the code exists.  So make it buildable.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Setup the installation\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# And some trailing misc bits\n\n#\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Pull in some CPack config for auto-building packages (like .deb and\n\n# .rpm)\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Some targets to support release management stuff; building generated\n\n# files for the tarballs\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Pull in dtrace bits\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Let cmake write out compile commands for external tools.  Requires\n\n# cmake 3.5+, but setting an unknown var won't hurt earlier versions.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Include tests\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Finish by outputting various information about what we've figured and\n\n# what we're doing for the builder's edification.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "Makefile" : {
      "ObjectId" : "832323d801cfc3822d0ce235d076a7e8681b188b",
      "LastModified" : "2018-11-10T23:21:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This just shortcuts stuff through to cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# The below targets are mostly only of interest to developers\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add'l thunks to cmake\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure everything's build before running tests\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Reindent files\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build documentation files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# asciidoc files\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Pre-build some files for tarballs\n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All the generated source files\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build those, the .html versions of the above docs, and the HTML/man\n\n# versions of the manual\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Stuff for thunking to cmake\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The config grammar\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Setup version file\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Generate pregen'd manuals\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Thunk through to gen'ing tarball\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "client/CMakeLists.txt" : {
      "ObjectId" : "7665ec775cb9919c523fa89d5c6a7409d3efae18",
      "LastModified" : "2016-04-24T15:27:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build the libctwm_client library\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# There's a demolib that links against it\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# There's also a 'gtw' that doesn't, but is sorta client-like...\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# A program to [attempt to] forward keystrokes from layered root-ish\n\n# windows.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Meta-target\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Mention it\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "client/Makefile" : {
      "ObjectId" : "563893e82aeddf54e864276053570c7846e9b142",
      "LastModified" : "2014-07-25T14:21:48Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This just shortcuts stuff through to cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Reindent files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_files/basic_vars.cmake" : {
      "ObjectId" : "4d19bb0efc9435df903e598d9c60124620d94f4f",
      "LastModified" : "2018-11-18T22:31:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Setup some vars we use in the configure/build process\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The dir in which we ship pregen'd source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Where our manual source (asciidoc) files are\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Various build tools\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Our base set of sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Basic files  ##STDSRC-START\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# External libs\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "##STDSRC-END\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Generated files  ##GENSRC-START\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "##GENSRC-END\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Libs to link in (init empty list)\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Our normal set of warning flags\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake_files/build_options.cmake" : {
      "ObjectId" : "3a3f3b14bc746ba28e95c72dd08dc92be3599e70",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Our build-time options\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Define options\n\n# These can be set at the command line; e.g., \"cmake -DUSE_JPEG=OFF\"\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Now check what's set, make sure we can find stuff, and configure bits\n\n# up.\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Hard to imagine xpm not being around or somebody not wanting it, but...\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DATADIR should already be defined; guard against me being stupid\n\n# when I change something\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# libjpeg is pretty common\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# m4 is on by default too\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# rplay off by default\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check if the user wants EWMH support built in.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hand-build ewmh_atoms.[ch]\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# System provides regex stuff in libc?\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Is Xrandr of a suitable version available?\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We need XRRGetMonitors()\n",
        "Line" : 132,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Got it\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "cmake_files/check_funcs_etc.cmake" : {
      "ObjectId" : "4f6463d022e45879634ff82d4278fac18f8aaadc",
      "LastModified" : "2016-01-25T02:29:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check for library functions and the like that we need.\n\n#\n\n# In some cases, we may decide to enable workarounds of various sorts\n\n# here too; in others, we just bomb out.  Technically, doing that is\n\n# unnecessary, since the build will just fail later, but this may be\n\n# friendlier in telling the user _why_ than letting them try to interpret\n\n# compiler or linker errors.\n\n#\n\n# This is distinct from the checking in build_options.cmake; that's about\n\n# stuff we have build options to enable/disable, whereas this is more\n\n# stuff we depend on unconditionally.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# getopt_long(3) is in getopt.h everywhere I can find it.  Until we find\n\n# a system where it's somewhere else, or systems it's nowhere and we have\n\n# to provide it, we'll either find it there or error out and blow up.  If\n\n# we don't find problems that require additional workaround in the next\n\n# couple releases, we should retire the check to avoid wasting time/space\n\n# checking things we know will work.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# asprintf(3) has been in glibc since at least the early 90's, the BSD's\n\n# since the mid 90's, and [Open]Solaris since 11.  It's not in Sol10, at\n\n# least some versions of AIX, etc.  There's a version in openssh-portable\n\n# that I believe is pretty portable if we find a system we care about\n\n# lacking it and need to pull in a local version, but I don't expect to.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake_files/compiler_feature_checks.cmake" : {
      "ObjectId" : "3c7a27dfcbeb447da1aede2fba72a19dc9b91d9c",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Compiler/stdlib feature checks for ctwm\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expect and try to enforce a C99 capable compiler.  There doesn't seem\n\n# an obvious way to be sure in a fully portable way, but we probably\n\n# don't work well in places that compile with something other than a\n\n# program called like 'cc', and a cc that supports C99 should accept -std\n\n# calls, so that's good enough.  Lacking it is not (yet) a fatal error,\n\n# but is a sign that it's a compiler or platform we're moving further\n\n# away from.\n\n#\n\n# Known alternate spellings:\n\n#   -xc99  (Sun C 5.10 SunOS_i386, sunstudio12.1, OpenIndiana)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CheckCCompilerFlag calls into CheckCSourceCompiles, which won't do\n\n# anything if the result var is already set in the cache, so we have\n\n# to unset it.  Otherwise, the second and later invocations don't\n\n# actually do anything, and it'll never check any flag after the\n\n# first.\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# With -std=c99, GNU libc's includes get strict about what they export.\n\n# Particularly, a lot of POSIX stuff doesn't get defined unless we\n\n# explicitly ask for it.  Do our best at checking for what's there...\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check if including it with our args sets __USE_ISOC99; that's a\n\n# sign it's what we're looking for here.\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# OK, it does.  Assume that's a good enough test that things are\n\n# acting as we expect.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# asprintf() seems to need _GNU_SOURCE; no other way to expose it\n\n# I can find.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Some compilers (like Sun's) don't take -W flags for warnings.  Do a\n\n# quick check with -Wall.  They're mostly for devs, so we don't care THAT\n\n# much, I guess...  maybe we should be more thorough about checking the\n\n# flags we use too, but worry about what when it becomes an issue.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake_files/cpack_setup.cmake" : {
      "ObjectId" : "8bbfdac182a6e8ebbef9c353df219a3399494b57",
      "LastModified" : "2016-04-24T15:27:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Setup cpack stuff for packaging\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Basic stuff\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Per-packaging-system stuff\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake_files/ctags.cmake" : {
      "ObjectId" : "32c99e9501e4dfd28bd31f27eb4625003d3d958a",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup tagets to run ctags.  Only really of interest to devs...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake_files/do_install.cmake" : {
      "ObjectId" : "95b6f11ab114dd43217bb71e32ca0e0715ccc700",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Define the install process\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some bits we always install; the binary, the default config, and our\n\n# CHANGES file.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If we's using XPM (really, when are we not?), install the pixmaps.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Install manual bits, assuming we have them.\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If we don't have the manpage, that's pretty exceptional, so give a\n\n# warning about it.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# STRING(CONCAT x y z) could build this message, but requires cmake\n\n# 3.0 which we aren't yet willing to require.\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# ATM, the HTML manual is more optionalish\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake_files/doxygen.cmake" : {
      "ObjectId" : "249507e504ff431dd329bf9a64557f585daab139",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup doxygen stuff.  Only really of interest to devs...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Few configurable params\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# String YES/NO; let user override what find_package() got.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# String YES/NO.  These are expensive to generate and big.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# The config codes the paths to the files, so we need to set them\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Special target, since it hardly ever gets used.  We need to pull in\n\n# the various generated source files, and the easiest way to ensure\n\n# they're all these is to just build ctwm.  That gets a little\n\n# tedious when working on docs though, so try depending on CTWMSRC.\n\n# That seems to work well enough, and if we find edge cases that\n\n# break it...   well, it's a tool for devs, not end users, so we can\n\n# afford the possibility of surprises.\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake_files/dtrace_support.cmake" : {
      "ObjectId" : "681b432987d1253c777ade102be44795da8f5663",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try setting up some bits for dtrace.\n\n#\n\n# By itself, dtrace can trace things like function entry/return points\n\n# just fine, and even pull numeric and string arguments.  More involved\n\n# data structures, though, would either need manual definition in the D\n\n# scripts (which is practically impossible for anything sizable), manual\n\n# specification of offsets (even worse), or CTF info included in the\n\n# binary (hey, we can do that!).  So, see if we can pull that stuff in...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ctfconvert/merge is about pulling over debug info, so make sure we\n\n# enable that in the objects.\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# ctfconvert/merge on BSD has a '-g' option, which we want to use\n\n# (preserves the -g info in the final binary).  Solarish apparently\n\n# doesn't; maybe it always does it anyway?  Regardless, figure out\n\n# whether it takes that arg...\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# No -g; leave vars alone\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add -g\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This is a horrific hack.  cmake provides no way to actually find\n\n# out the list of object files, or where they are, because that would\n\n# be too easy.  So we have to \"know\", and take our best shot.  Sigh.\n\n# Well, it's really only a dev tool anyway, so I guess some manual\n\n# mess isn't the end of the world.  We can't check the existence yet\n\n# here, since it hasn't been created at this point in the process.\n\n# So we just have to hope.  mk_ctf_info.sh will warn us if things\n\n# change...\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake_files/find_asciidoc_bits.cmake" : {
      "ObjectId" : "e754ee5f8f8cece74463e5594508ee1439474c04",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find and setup asciidoc[tor] bits\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# First see if we can find the programs\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If we have asciidoctor, we need to figure out the version, as manpage\n\n# output is relatively new.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Err...\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Break out the version.\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# 1.5.3 is the first release that can write manpages natively.  This\n\n# means 1.5.3 dev versions after a certain point can as well; assume\n\n# anybody running a 1.5.3 dev is keeping up well enough that it can\n\n# DTRT too.  We assume any version can do HTML.\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# dblatex PDF output works fine with docbook5.  xmlto/docbook XSL\n\n# manpage generation doesn't, so it has to override this.\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# For asciidoc, it doesn't really matter, but look up the version for\n\n# cosmetics anyway\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Err...\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Break out the version.\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Can always do both, unless horked\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# This is an example of 'horked'...\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Only docbook version python asciidoc supports\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# dblatex lets us build PDF's from the DocBook XML.  This is pretty\n\n# fringe and not part of normal builds, so try to minimize the impact of\n\n# the checks.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Don't really care about the version, so save the extra checks\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Err...\n",
        "Line" : 112,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# Break out the version.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# I guess it works...\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# xmlto is another frontend for DocBook XML -> stuff.  It can indirect\n\n# through dblatex (like we just do manually above) or through fop for PDF\n\n# output, but also knows how to invoke xsltproc to generate manpage\n\n# output, which gives us another route from adoc -> XML -> manpage.  And\n\n# potentially other formats, if we start caring.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Don't really care about the version, so save the extra checks\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# Err...\n",
        "Line" : 149,
        "CharPositionInLine" : 3
      },
      "21" : {
        "Text" : "# Break out the version.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# I guess it can do whatever...\n",
        "Line" : 166,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "#\n\n# Generator functions for creating targets for the various\n\n# transformations.\n\n#\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Lot of boilerplate in all of them\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Minimal seatbelt\n",
        "Line" : 180,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Always depend on the input file, maybe on more\n",
        "Line" : 193,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Come up with some comment or other\n",
        "Line" : 199,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Build a manpage via asciidoctor\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Guard\n",
        "Line" : 209,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Setup the rule\n",
        "Line" : 216,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# Build a manpage via asciidoc (technically, a2x)\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Guard\n",
        "Line" : 227,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# a2x gives us very little control over input/output files, so we\n\n# have to do some vaguely stupid dances.  In theory, -D works for the\n\n# manpage output, but it's doc'd not to and will warn, so don't even\n\n# try.  The result is that it always puts the outfile file next to\n\n# the input.  So we make a temporary dir (with a hopefully unique\n\n# name) and do all our stuff in there.\n",
        "Line" : 234,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# This had better already be named \"someprog.somesection.adoc\",\n\n# because a2x is going to magically figure the program and section\n\n# name from the contents and make that output file.\n",
        "Line" : 250,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# In/out tmpfile names\n",
        "Line" : 259,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Build a manpage via xmlto\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Guard\n",
        "Line" : 276,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# As with a2x, this had better already be named\n\n# \"someprog.somesection.xml\" because we have so little control over\n\n# the output location.\n",
        "Line" : 283,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# This apparently doesn't work right...\n",
        "Line" : 298,
        "CharPositionInLine" : 3
      },
      "40" : {
        "Text" : "# Set various overrides.  Note that this leads to rather worse PDF\n\n# output.  If we ever decide to make xmlto a more likely part of the\n\n# process, we probably need to rework things so we generate a\n\n# different XML for the manpage path vs. the PDF path...\n",
        "Line" : 304,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# This does _very_ poorly [currently?] with DocBook 5 output.\n",
        "Line" : 310,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Build HTML output with asciidoctor\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Guard\n",
        "Line" : 324,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Setup the rule\n",
        "Line" : 331,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# And the asciidoc HTML\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Guard\n",
        "Line" : 342,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# Setup the rule\n",
        "Line" : 349,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# Building DocBook XML\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Guard\n",
        "Line" : 360,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# Guard\n",
        "Line" : 381,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# PDF via dblatex\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Passes through to LaTeX geometry.\n\n# Likely choices: letterpaper, a4paper\n",
        "Line" : 410,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 53
    },
    "cmake_files/gen_source_files.cmake" : {
      "ObjectId" : "717ef4493e741ab608cdcafc1396f30867acc890",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Rules for generated source files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hand-build deftwmrc.c\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Hand-build ctwm_atoms.[ch]\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate up the event names lookup source\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Have to manually add this, or cmake won't notice that it's needed in\n\n# time to make it.\n\n#set_source_files_properties(event_names.c OBJECT_DEPENDS ${en_out})\n\n# This also seems a blessed hackaround, and avoids having to encode the\n\n# knowledge of what files #include it.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create function bits\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Setup config header file\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fill in version info\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Need the VCS bits; add a guard here to prevent dev screwups when\n\n# working on the build system.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Building the version.c file happens in 2 steps.  First, an original\n\n# source file (${version_c_src}) is processed with tools/mk_version_in.sh\n\n# to write in the ctwm version info found in the VERSION file in the root\n\n# of the tree.  That's written to an intermediate file (${version_c_in}).\n\n# Secondly, the intermediate file is processed to store up info about the\n\n# VCS revision being built from, into the final file (${version_c}) which\n\n# is actually compiled.\n\n#\n\n# A special case occurs when there's no VCS info we can find to work\n\n# with, AND we have a pregen'd .in file (${vresion_c_gen}); this is\n\n# commonly the case with a release tarball, where part of the release\n\n# building process pre-stashes the bzr revision info.  In that case, we\n\n# swap the original (${version_c_src}) to point to the pregen'd file\n\n# (which already has the VCS info), and make the second step just cp the\n\n# intermediate file over.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Maybe a pregen'd\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Override\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Now, what's our process for going from the intermediate .c.in file to\n\n# the final .c with the VCS revision info added?  This is the 2nd step in\n\n# the process, but we describe it first here so we can change where\n\n# ${version_c_src} points if necessary.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We're in a bzr tree, so write in the bzr revision info\n",
        "Line" : 99,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# We're in a git tree, so write in the git revision info\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# There's a prebuilt one to use; commonly this means we're building\n\n# from a release tarball, and it includes pre-stashed bzr revision\n\n# info about the release.  So, in this case, we replace the original\n\n# source with our pregen'd one (which already has the info in it),\n\n# and just use 'cp' to turn the intermediate .c.in into the final .c.\n",
        "Line" : 117,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# We've got nothing at all, so just NULL out the VCS info; it's all\n\n# we can do.\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Now handle the first step; turning the original source .c.in into the\n\n# intermediate .c.in with the ctwm version written in.  That's _usually_\n\n# starting with the version.c.in in the source tree, but in the \"no VCS\n\n# info, but we have a pregen'd gen/version.c to use\" case above it's the\n\n# pregen'd file.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Setup a 'version' binary build tool too, for easily printing bits or\n\n# wholes of our version.\n\n#\n\n# Not currently being used, but left as an example of possibilities.  If\n\n# we need the version in the build process, we'll get it from the\n\n# ${ctwm_version_*} vars now.\n\n#add_executable(version ${version_c})\n\n#set_target_properties(version PROPERTIES COMPILE_FLAGS \"-DBUILD_VERSION_BIN\")\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake_files/handle_manual.cmake" : {
      "ObjectId" : "8f760468c2aba781fdd4b94c60dc835d3bd2e581",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Handle stuff related to building the manual in various ways\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Lookup the asciidoc[tor] bits\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Setup some vars for the various steps in the process\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The original source.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where we build stuff.  Because we need to process the ADOC_SRC to\n\n# replace build paths etc, we need to dump it somewhere.  We could just\n\n# leave it right in the build dir root, but is cleaner.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Where we copy the source to during rewrites, and then do the actual\n\n# build from.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Where the end products wind up\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# How we rewrite vars in the manual.  I decided not to use\n\n# configure_file() for this, as it opens up too many chances for\n\n# something to accidentally get sub'd, since we assume people will write\n\n# pretty freeform in the manual.\n\n# \\-escaped @ needed for pre-3.1 CMake compat and warning avoidance;\n\n# x-ref `cmake --help-policy CMP0053`\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Pregen'd doc file paths we might have, in case we can't build them\n\n# ourselves.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Figure what we can build\n\n#\n\n# These are both boolean \"We can build this type of output\" flags, and\n\n# enums for later code for \"What method we use to build this type of\n\n# output\".\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We use the DocBook XML output for PDF (if manually requested), and\n\n# _can_ use it in very special cases for manpages.  So find out first if\n\n# we can even build it.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If we have asciidoctor, use it to build the HTML.  Else, we could use\n\n# asciidoc, but leave it disabled because it's very slow.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# For the manpage output, asciidoctor has to be of a certain version.  If\n\n# it's not there or not high enough version, we fall back to asciidoc/a2x\n\n# (which is very slow at this too, but we need to build a manpage, so eat\n\n# the expense).  And it's possible to go via the DocBook XML output, but\n\n# it takes very odd cases to wind up there.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Should probably never happen in reality\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# PDF output is not hooked into the build process by default, but is made\n\n# available by an extra target.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Override: allow forcing use of pregen'd files.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If we can build stuff, prepare bits for it.  Technically unnecessary if\n\n# we're not building stuff, but doesn't do anything bad to define it in\n\n# those cases, and it's easier than listing every MANUAL_BUILD_* in the\n\n# conditions.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Setup a temp dir under the build for our processing\n",
        "Line" : 117,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# We hop through a temporary file to process in definitions for e.g.\n\n# $ETCDIR.\n",
        "Line" : 120,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# We can't actually make other targets depend just on that generated\n\n# source file, because cmake will try to multi-build it in parallel.\n\n# To work around, we add a do-nothing custom target that depends on\n\n# $ADOC_TMPSRC, that uses of it depend on.\n\n#\n\n# x-ref http://public.kitware.com/Bug/view.php?id=12311\n\n#\n\n# Note, however, that this _doesn't_ transmit the dependancy on\n\n# ${ADOC_TMPDIR} through; it serves only to serialize the build so it\n\n# doesn't try to happen twice at once.  So we still need to include\n\n# ${ADOC_TMPSRC} in the DEPENDS for the targets building off it, or\n\n# they don't notice when they go out of date.\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "#\n\n# Building the manpage variant\n\n#\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Got the tool to build it\n",
        "Line" : 151,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# We don't need the hoops for a2x here, since asciidoctor lets us\n\n# specify the output directly.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# a2x has to jump through some stupid hoops\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# xmlto does its own hoops too\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Can't build it ourselves, but we've got a prebuilt version.\n",
        "Line" : 170,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# We still have to do the substitutions like above, but we're doing\n\n# it on the built version now, rather than the source.\n",
        "Line" : 174,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Can't build it, no prebuilt.  Not quite fatal, but very bad.\n",
        "Line" : 182,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Assuming we have it, compress manpage (conditionally).  We could add\n\n# more magic to allow different automatic compression, but that's\n\n# probably way more involved than we need to bother with.  Most systems\n\n# use gzip, and for the few that don't, the packagers can use\n\n# NOMANCOMPRESS and handle it out of band.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\n\n# Do the HTML manual\n\n#\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Separate if() rather than an elseif() so that the above case can still\n\n# fall into the elseif(EXISTS ${HTML_PRESRC}) below and use the pregen'd\n\n# version.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Got the tool to build it\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Can't build it ourselves, but we've got a prebuilt version.\n",
        "Line" : 236,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Clear so ALL target get set below\n",
        "Line" : 239,
        "CharPositionInLine" : 18
      },
      "34" : {
        "Text" : "# As with the manpage above, we need to do the processing on the\n\n# generated version for build options.\n",
        "Line" : 241,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Can't build it, no prebuilt.\n\n# Left as STATUS, since this is \"normal\" for now.\n",
        "Line" : 250,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Variants of building HTML manual\n",
        "Line" : 254,
        "CharPositionInLine" : 9
      },
      "37" : {
        "Text" : "# If we have (or are building) the HTML, add an easy target for it, and\n\n# define a var for the install process to notice.\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n# Building DocBook XML\n\n#\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Got the tool to build it\n\n#message(STATUS \"Building DocBook XML with ${MANUAL_BUILD_DBXML}.\")\n",
        "Line" : 276,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# We don't need the hoops for a2x here, since asciidoctor lets us\n\n# specify the output directly.\n",
        "Line" : 281,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# a2x has to jump through some stupid hoops\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#\n\n# And the PDF output\n\n#\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Got the tool to build it\n\n#message(STATUS \"Building PDF with ${MANUAL_BUILD_PDF}.\")\n",
        "Line" : 301,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "#\n\n# Handy target\n\n#\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 45
    },
    "cmake_files/install_paths.cmake" : {
      "ObjectId" : "1fdd18629b970489350235ae7db045750439e066",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Figure out install paths for stuff\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_INSTALL_PREFIX is the user's responsibility to set right.  We\n\n# just assume it is.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Where ctwm looks for fallback config files\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where we stick the binary\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where runtime data stuff (e.g., images) is found\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Where we install non-manpage docs to\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Where we put example configs etc.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Where should we stick manpages?\n\n# User can set MANDIR to override, if they don't, check a few likely\n\n# places...\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If we can't find something, hardcode a guess and yell about it\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Since we only have 1 manpage, and it's in section 1, just list the man1\n\n# dir.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is fixed too\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake_files/mktar_support.cmake" : {
      "ObjectId" : "cb64ecb074a91b3881db72371474a8bf8b4ee862",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Rules for supporting tarball builds.  Mostly pregen'ing files that\n\n# require non-assumable dependancies.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The lex/yacc output files are definitely on the list.  The manual is\n\n# also, but is currently built manually rather than via this build\n\n# because it turns out to require a lot more conditional code (changing\n\n# how/when things get sub'd around) than it's worth, so we leave that\n\n# done manually in the doc/Makefile.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_files/setup_lex.cmake" : {
      "ObjectId" : "7626540ff2040c5a0292969f6c8e302735e022fa",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Setup flex to build lexer\n\n#\n\n# We don't really support any lex(1) other than flex.  It's possible some\n\n# minor editing of lex.l could get you through that...\n\n#\n\n# If you DO have flex, we go ahead and use it to build the lexer.  If you\n\n# don't, we check to see if there's a prebuilt one in the tree; one will\n\n# be shipped with tarballs for releases etc (but you'll still build your\n\n# own if you have flex).  If neither of those hit, not much we can do but\n\n# bomb...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Override for forcing use of pregen'd source files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# See if we have a pre-built lex.c\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Make the build process just copy it in\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# No flex, no pre-built lex.c\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake_files/setup_yacc.cmake" : {
      "ObjectId" : "2c786544c447c827b887bd79b38ffcc381ea9648",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Setup yacc-alike to build the parser for the config file.\n\n#\n\n# Similarly to the _lex handler, we always use your yacc to build it if\n\n# you have one.  If you don't we can fallback to a prebuilt one, else\n\n# die.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup flags, and have an escape to debug the parser, if that's ever\n\n# useful.\n\n#\n\n# Making this a list messes with BISON_TARGET() which requires a string\n\n# according to the docs (though only cmake 3.4 start complaining about\n\n# getting a list).  A string might be nicer, but we'd really need\n\n# string(CONCAT) for that, and x-ref in do_install.cmake for notes on\n\n# that.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override for forcing use of pregen'd source files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This only finds bison, not yacc.\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# There doesn't seem to be a standard module for yacc, so hand-code\n\n# it.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# What a stupid way to spell 'stringify'...\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Got yacc(1), use it\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# No bison, no yacc.  Maybe there are prebuilt files?\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Got prebuilt ones, use 'em\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Also need to explicitly tell cmake; otherwise it knows to\n\n# pull in gram.tab.c ('cuz it's in CTWMSRC) but doesn't know\n\n# in time to pull in gram.tab.h and so blows up.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# No bison, no yacc, no prebuilt.  Boom.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "cmake_files/show_build_info.cmake" : {
      "ObjectId" : "5a980867eb99a9da723d806338142540ee6e395b",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Tell the builder various stuff about what we decided.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Describe install paths\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_files/vcs_checks.cmake" : {
      "ObjectId" : "b4b6c292b0a777004eb2877f3fb0ae980977a72f",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# See what sort of version control bits we might have around.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# See if we're building from a bzr checkout.  This is fragile in the\n\n# sense that it'll break if the bzr WT format changes, but that's\n\n# staggeringly unlikely now, so...\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If we are, see if we can find bzr(1) installed\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If not bzr, do a little check to see if we're building from git instead\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flag for dev use\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "doc/manual/Makefile" : {
      "ObjectId" : "1bb20fffcc42302f99f4ac03ec26919652383c4b",
      "LastModified" : "2018-11-10T23:59:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# asciidoc vs asciidoctor notes:\n\n#\n\n# Note that asciidoctor has a slightly changed dialect, so there may be\n\n# minor differences in the output.  Also, the manpage generation requires\n\n# 1.5.3+.  At the moment, we're trying to work with both.  Current trends\n\n# suggest that at some point asciidoctor will be the de facto\n\n# asciidoc-world implementation, so we may drop the py-asciidoc at some\n\n# point.  For the moment, asciidoctor is treated as the standard\n\n# renderer, with asciidoc being a fallback we try to keep working well.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generating HTML output by various means\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Manpage output.  x-ref comment above about asciidoctor versions\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set which are used by default.  Set to asciidoctor since it's massively\n\n# faster.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "44724b5e3239a811699541e053e4a43beec92a8c",
      "LastModified" : "2018-12-03T02:44:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Automated tests\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add some infrastructure for building executables for unit tests\n\n#\n\n# BIN - name of the binary to run.\n\n# BINPATH - path of the binary to run.\n\n# ARGS - Add'l arguments to the binary for the test\n\n# WORKING_DIRECTORY - self-explanatory\n\n#\n\n# Currently, ${BINPATH} means a thing is already built, so we don't need\n\n# to worry about building, that's just the path to run.  Else, ${BIN} is\n\n# built from ${BIN}.c (though multiple calls with the same ${BIN} won't\n\n# try to re-do the builds).  e.g., commonly, $BINPATH is used when we're\n\n# running the main ctwm binary, instead of s test-specific bin.\n\n#\n\n# This is not un-janky, but it works, and we'll worry about cleaning it\n\n# up if it gets worse.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Maybe we're passed a specific path to run\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# What's the binary name?\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Derive path if we only got a name\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Building and linking it\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Few of our tests really need any of the X or other libs we pull in.\n\n# However, most of the .o's for ctwm itself are going to have some\n\n# ref out to them somewhere, so any tests that wind up pulling\n\n# functions from those are going to make the linker want to resolve\n\n# them when we link ${TNAME}.  So just unconditionally add them and\n\n# don't worry about which tests may not actually need 'em.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add to pre-test target\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# And add the test itself\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Simple wrapper for when we want to explicitly skip a test (as opposed\n\n# to just silently not doing it; better UX to say we're skipping one and\n\n# why...)\n\n#\n\n# XXX This seems like the simplest way of actually \"skip\"'ing a test\n\n# based on configure options.  That's nuts.  REQUIRED_FILES sounds like\n\n# it would, but actually causes the test to \"not run\" and be considered\n\n# failed   :(\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# First a simple smoke test of the built binary\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Try parsing the system.ctwmrc\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Simple test of m4 preprocessing, but we skip if built without m4.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# A first run at a unit test\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# RLayout stuff\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/layout/CMakeLists.txt" : {
      "ObjectId" : "3f5e1694b1de9e0de81c446e286529a953b01db4",
      "LastModified" : "2018-12-03T02:44:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test various rlayout-related bits\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/util_expand/CMakeLists.txt" : {
      "ObjectId" : "1e9a64b86e6a3d8370e3c0bcb2b196a423288d09",
      "LastModified" : "2018-12-03T02:44:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test ExpandFilePath()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 23,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 2810
}