{
  "Repository" : "10649973",
  "Revision" : "HEAD",
  "ObjectId" : "2a4bafdfd886a35c64e6519d4681960a4324832f",
  "CommitTime" : "2019-04-15T19:37:57Z",
  "Files" : {
    "Applications/Analyze/CMakeLists.txt" : {
      "ObjectId" : "5cf008bed8548cdb1820b2edc3546a597330587c",
      "LastModified" : "2016-11-30T19:47:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/Analyze/test/CMakeLists.txt" : {
      "ObjectId" : "ebbd36b51a4b26333686dee5d7ab76f86968af1d",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/CMC/CMakeLists.txt" : {
      "ObjectId" : "38fe5ea19d992966b19a23f884cec1771a2d36ea",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/CMC/test/CMakeLists.txt" : {
      "ObjectId" : "31feff666739b665bd854dbddcaac877c548d7bc",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/CMakeLists.txt" : {
      "ObjectId" : "847859ee15c022e6393cfc42a467e174ed767fdf",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If NOT OPENSIM_BUILD_INDIVIDUAL_APPS, then we will not build the old\n\n# applications like \"id\". However, we still need to include those folders to\n\n# build the tests for the tools.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Applications/Forward/CMakeLists.txt" : {
      "ObjectId" : "4a70282d6126b0421a6970d579355c99d7b99338",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/Forward/test/CMakeLists.txt" : {
      "ObjectId" : "54006bff916d13f49428932a2b2ccb6474aa0541",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/ID/CMakeLists.txt" : {
      "ObjectId" : "556a1e318410a0c665f4f7ddb06b35bcb08b35ad",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/ID/test/CMakeLists.txt" : {
      "ObjectId" : "e6ab6e5fd394d0e667b9dc605c6a488f167d9c74",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/IK/CMakeLists.txt" : {
      "ObjectId" : "cff9346cdaa3310da41539fe5f367bf90f9a6632",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/IK/test/CMakeLists.txt" : {
      "ObjectId" : "e6ab6e5fd394d0e667b9dc605c6a488f167d9c74",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/RRA/CMakeLists.txt" : {
      "ObjectId" : "21b87b44c9ebfd7a55e5bc6f7f42837e12a0a906",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/RRA/test/CMakeLists.txt" : {
      "ObjectId" : "54006bff916d13f49428932a2b2ccb6474aa0541",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/Scale/CMakeLists.txt" : {
      "ObjectId" : "34e8506889b553f55cfc15e1ac747fe430fd299c",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/Scale/test/CMakeLists.txt" : {
      "ObjectId" : "e6ab6e5fd394d0e667b9dc605c6a488f167d9c74",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Applications/opensim-cmd/CMakeLists.txt" : {
      "ObjectId" : "18c3ed9d8a3007b15ac0d8795e6e0c987cc865ab",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Docopt *is* required, but we omit the \"REQUIRED\" flag for find_package()\n\n# since we want to give a custom error message. If docopt is not found, then\n\n# CMake will still produce a warning telling users to set CMAKE_PREFIX_PATH or\n\n# docopt_DIR.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Applications/opensim-cmd/test/CMakeLists.txt" : {
      "ObjectId" : "8a3e996a2d929579597ab74a61e13eec231a50ba",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't need OpenSim since we only interact with OpenSim through the\n\n# command line tool. But we use Simbody for its Testing.h.\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Set preprocessor definitions used by the test to access other build products.\n\n# OSIM_ACTUATORS_LIB_PATH is used to test the loading of plugins.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Applications/versionUpdate/CMakeLists.txt" : {
      "ObjectId" : "0c1ad840f56b3a171e1d961019ed89eb3d2fe5f3",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Bindings/CMakeLists.txt" : {
      "ObjectId" : "319598390d3dd14abe26c6b86621c33026347f56",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We require 3.0.8 for the reason mentioned here (for Python 3):\n\n# https://github.com/tensorflow/tensorflow/issues/830\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Flags are both Python and Java bindings will use.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Bindings/Java/CMakeLists.txt" : {
      "ObjectId" : "7488ab3976dd6364796a42c07e22fb39515551c2",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Replace periods with slashes (to make a path).\n\n# Syntax for find-replace:\n\n# string(REGEX REPLACE <pattern> <replacement string>\n\n#                      <target variable> <source string>)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We place the .java files in this folder.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The actual SWIG command is in the OpenSimJNI folder, since the custom command\n\n# must be defined in the same directory that uses it (for the osimJavaJNI\n\n# target).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compile the C++ wrapper into a library.\n\n# ---------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compile java sources.\n\n# ---------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# To avoid compiling stale .java files, delete any existing files and copy\n\n# over the new files from the module-specific directories (see\n\n# OpenSimJNI/CMakeLists.txt).\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Umbrella target for assembling the java bindings in the build tree.\n\n# -------------------------------------------------------------------\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Install.\n\n# --------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Java tests.\n\n# -----------\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Now actually add the tests.\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# MATLAB tests and installing.\n\n# ----------------------------\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "Bindings/Java/Matlab/CMakeLists.txt" : {
      "ObjectId" : "7d605c5320891ac27d12936410f2e925a18dd8eb",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install.\n\n# --------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These files have not yet been updated for 4.0:\n",
        "Line" : 13,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Remove parts from the hopper device example that the tutorial audience is\n\n# expected to fill in.\n\n# Anything matching `% ANSWER{ ... % }` is cut from the file.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add an empty line in place of the ANSWERS block.\n",
        "Line" : 41,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# The configureOpenSim.m script contains paths into the OpenSim installation\n\n# that may be different on different platforms, so we configure it with CMake\n\n# variables.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Bindings/Java/Matlab/tests/CMakeLists.txt" : {
      "ObjectId" : "05948917fb9c2d28bd178adc3c58d53007a42346",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See the bottom of the file for adding new test files.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# How to set java.library.path for MATLAB:\n\n# http://www.mathworks.com/matlabcentral/answers/102751-how-do-i-configure-the-java-run-time-library-path-java-library-path-in-matlab-with-and-without-adm\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: should not write all configuration build dirs to the\n\n# librarypath.txt file; this means that Debug libraries are available to\n\n# the Release build, for example.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Single-configuration generator.\n",
        "Line" : 18,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# Multi-generator configurations are handled differently.\n\n# TODO Ideally, we would use a different WORKING_DIRECTORY for each\n\n# config.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#UNITTEST_PRECOMMAND \"cd('${matlab_output_dir}')\"\n",
        "Line" : 38,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Must set PATH so that osimJavaJNI can find osimCommon, etc.\n",
        "Line" : 42,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "#TEST_ARGS CONFIGURATIONS Release RelWithDebInfo MinSizeRel\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Allow MSVC users to run only the Matlab tests directly from the MSVC GUI.\n\n# The Matlab tests are run from RUN_TESTS, so no need to run this target as\n\n# part of `ALL_BUILD` (e.g, in MSVC).\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tests.\n\n# ------\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# From examples.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Copy resources.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "Bindings/Java/OpenSimJNI/CMakeLists.txt" : {
      "ObjectId" : "2521e2ab075b7361f415d6747abb2f8abd8937e9",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For building C++ wrapper.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This directory will hold the SWIG-generated .java files, but SWIG won't\n\n# create this directory for us.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This target actually creates a lot more (all the produced .java files)\n\n# but we will just use these two files as a proxy for all of those.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# To avoid compiling stale .java files, delete any existing .java files.\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# verbose\n",
        "Line" : 34,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "# Compiler flags.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We purposefully wrap deprecated functions, so no need to see such warnings.\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Don't warn about:\n\n# 4996: deprecated functions.\n\n# 4114: \"const const T\"\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# RPATH: The osim libraries that osimJavaJNI needs are in the same folder as\n\n# osimJavaJNI.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Shared libraries are needed at runtime for applications, so we put them\n\n# at the top level in OpenSim/bin/*.dll (Windows) or OpenSim/lib/*.so (Linux)\n\n# or OpemSim/lib/*.dylib (Mac). Windows .lib files, and Linux/Mac .a static\n\n# archives are only needed at link time so go in sdk/lib.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Don't install .class files.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "Bindings/Java/OpenSimJNI/Test/CMakeLists.txt" : {
      "ObjectId" : "78db6bfd051d5fbc1db93c0cbf6f78282ccc872d",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Bindings/Java/tests/CMakeLists.txt" : {
      "ObjectId" : "0248e7043247050b1240670ac6a99817860e2048",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See towards the bottom of the file for adding new test files.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For compiling the test.\n\n# TODO with MSVC and Xcode we should try using per-configuration\n\n# output directories.\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This macro is invoked one folder down, but we want this variable \n\n# to be in the scope of this file (which is the parent scope of the tests\n\n# folder).\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# For running the test.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# TODO make sure this works, using xcode. Look at Python for an\n\n# example.\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Copy all necessary test files.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# On Windows, CMake cannot use RPATH to hard code the location of libraries\n\n# in the binary directory (DLL's don't have RPATH), so we must set PATH to\n\n# find the right libraries. The location of the libraries depends on the\n\n# build configuration, which is filled in for `$<CONFIG>`. We also don't\n\n# want to accidentally use a different OpenSim build/installation somewhere\n\n# on the machine.\n\n# TODO use the commented-out version when moving to CMake 3.0.\n\n#set_tests_properties(python PROPERTIES ENVIRONMENT\n\n#    \"PATH=${CMAKE_BINARY_DIR}/$<CONFIG>\")\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Timeout (seconds) is because Java might hang if it can't find\n\n# the DLL's.\n",
        "Line" : 105,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Allow MSVC users to run only the Java tests directly from the MSVC GUI.\n\n# The Java tests are run from RUN_TESTS, so no need to run this target as\n\n# part of `ALL_BUILD` (e.g, in MSVC).\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Specify the tests here!\n\n# -----------------------\n\n# Test name must be the name of a java file in this directory.\n\n# Leave out the \".java\" extension.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This line must appear after all tests are added.\n\n# This variable at the end has been accumulated from within the\n\n# OpenSimAddJavaTest macro.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "Bindings/Python/CMakeLists.txt" : {
      "ObjectId" : "db8e8b1da19b03bc2636a5fe7acf67e7bdd28237",
      "LastModified" : "2018-11-28T18:28:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Location of the opensim python package in the build directory, for testing.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Multi-configuration generators like MSVC and XCODE use one build tree for\n\n# all configurations.\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Helper macros.\n\n# ==============\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Helper function to for copying files into the python package.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Python package in the build tree.\n\n# ---------------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This list is used to specify dependencies for the PythonBindings target.\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Python package in the installation.\n\n# -----------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Generates source code for python module and then compiles it.\n\n# Here are the arguments:\n\n# MODULE: Name of python module. The module is build with the interface file\n\n#       named ${MODULE}_python.i.\n\n# DEPENDS: Names of other python modules on which this module depends. \n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Parse arguments.\n\n# ----------------\n\n# http://www.cmake.org/cmake/help/v2.8.9/cmake.html#module:CMakeParseArguments\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Generate source code for wrapper using SWIG.\n\n# --------------------------------------------\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We run swig once to get dependencies and then again to actually generate\n\n# the wrappers. This variable holds the parts of the swig command that\n\n# are shared between both invocations.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Assemble dependencies. This macro runs a command during CMake's\n\n# configure step and fills the first argument with a list of the\n\n# dependencies.\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Run swig.\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#-debug-tmused # Which typemaps were used?\n",
        "Line" : 88,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# verbose\n",
        "Line" : 89,
        "CharPositionInLine" : 15
      },
      "15" : {
        "Text" : "# Compile python wrapper files into a library.\n\n# --------------------------------------------\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Used for specifying dependencies for PythonBindings.\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# We purposefully wrap deprecated functions, so no need to see such\n\n# warnings.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Turn off optimization for SWIG wrapper code. Optimization slows down\n\n# compiling and also requires lots of memory. Also, there's not much to\n\n# gain from an optimized wrapper file. \n\n# Note that the last optimization flag is what counts for GCC. So an -O0\n\n# later on the command line overrides a previous -O2.\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# TODO disable optimization on Windows.\n\n# Don't warn about:\n\n# 4996: deprecated functions.\n\n# 4114: \"const const T\"\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# SWIG uses the register keyword, which is deprecated in C++17.\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Set target properties for various platforms.\n\n# --------------------------------------------\n\n# Resulting library must be named with .so on Unix, .pyd on Windows.\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Defaults to .dylib; change to .so.\n",
        "Line" : 148,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# RPATH: We always set a relative RPATH but only use an absolute RPATH if\n\n# the python package is not standalone, as the libraries are not copied\n\n# into the python package. If Simbody libraries are not installed in the\n\n# same folder as the OpenSim libraries, then we must also provide the path\n\n# to the Simbody libraries within OpenSim's installation.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Copy files into the build tree python package.\n\n# ----------------------------------------------\n\n# Copy the library file.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Copy the generated .py file to the per-config python package dir.\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Install the library.\n\n# --------------------\n\n# It's important that we use install(TARGETS) \n\n# because this causes CMake to remove the build-tree RPATH from the library\n\n# (which is set temporarily for libraries in the build tree).\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Build python modules (generate binding source code and compile it).\n\n# ===================================================================\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Copy files to create complete package in the build tree.\n\n# ========================================================\n\n# This allows us to test the python package with ctest.\n\n# Note: some of the commands to do this copying (for the swig-generated py\n\n# files) appear above.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Configure version.py.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Copy the configured version.py for each build configuration.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Copy setup.py for each build configuration.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# __init__.py.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Test files. If you require more test resource files, list them here.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Umbrella target for assembling the python bindings in the build tree.\n\n# =====================================================================\n\n# This command must come *after* all calls to OpenSimPutFileInPythonPackage, as\n\n# that macro assembles the OPENSIM_PYTHON_PACKAGE_FILES list.\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Require the libraries to be built.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Test.\n\n# =====\n\n# This test runs all the python tests in the tests directory from the\n\n# source tree. It's important to run the tests in the source tree so that\n\n# one can edit the tests and immediately re-run the tests without any\n\n# intermediate file copying.\n\n# It so happens that ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG> is the same as\n\n# ${OPENSIM_PYTHON_BINARY_DIR}, but the former avoids an `if(MSVC OR XCODE)`.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Similar as above, but for the example files. These files aren't named as\n\n# test_*.py, so we must specify a more general search pattern.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# On Windows, CMake cannot use RPATH to hard code the location of libraries\n\n# in the binary directory (DLL's don't have RPATH), so we must set PATH to\n\n# find the right libraries. The location of the libraries depends on the\n\n# build configuration, which is filled in for `$<CONFIG>`. We also don't\n\n# want to accidentally use a different OpenSim build/installation somewhere\n\n# on the machine.\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Allow MSVC users to run only the python tests directly from the MSVC GUI.\n\n# The python tests are run from RUN_TESTS, so no need to run this target as\n\n# part of `BUILD_ALL` (e.g, in MSVC). Might need to set\n\n# EXCLUDE_FROM_DEFAULT_BUILD to achieve this?\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Install python package.\n\n# =======================\n\n# Most of the files are installed via the above macros.\n\n# Install the test scripts.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Install example files (not installed next to the python package).\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "CMakeLists.txt" : {
      "ObjectId" : "bbd0d16ad30b80c344f1239d95839fe92f1fd1bb",
      "LastModified" : "2018-11-28T18:28:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Build of OpenSim. There are three steps:\n\n#    (1) Choose appropriate platform\n\n#    (2) Locate Simbody and its dependent libraries\n\n#    (3) Build OpenSim libraries and executables\n\n#\n\n#\n\n#----------------------------------------------------\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To create a folder hierarchy within Visual Studio.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenSim version.\n\n# ----------------\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Don't include the patch version if it is 0.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMake module path.\n\n# ------------------\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Directory in which to install.\n\n# ------------------------------\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On Windows, we override the default value because Visual Studio does\n\n# not, by default, have permission to write to the Program Files\n\n# directory.\n\n# On Linux, we override the default value because our installation does\n\n# not yet conform to the Filesystem Hierarchy Standard (FHS).\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make everything go in the same binary directory.\n\n# ------------------------------------------------\n\n# These are CMake-defined variables.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# OpenSim options.\n\n# ----------------\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Specify number of cores to run tests.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Try to use MathJax for Doxygen equations.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Simbody.\n\n# This will be initialized to the environment variable of the same name\n\n# if it is set, otherwise it will be empty.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Mainly for packagers; not users.\n",
        "Line" : 101,
        "CharPositionInLine" : 44
      },
      "13" : {
        "Text" : "# There are many potential ways to distribute the python bindings; here's how\n\n# you might want to set the above option for different ways of distributing:\n\n#   simtk.org GUI distribution, macOS: ON (since no env. vars are set)\n\n#   simtk.org GUI distrubution, Windows: OFF (PATH is set)\n\n#   pypi: ON (there is no way to install the C++ libraries otherwise)\n\n#   debian, homebrew, conda: OFF (can have a separate C++ library package)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# For backwards compatibility in the Windows binary distribution.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Configure installation directories across platforms.\n\n# ----------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## OPENSIM_INSTALL_UNIX_FHS option.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Windows users probably aren't interested in this option.\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "## Set variables describing where everything gets installed.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Sets CMAKE_INSTALL_*DIR variables, some of which are used below.\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Do *NOT* try to use the CMAKE_INSTALL_FULL_*DIR variables created by\n\n# GNUInstallDirs; they are only defined if OPENSIM_INSTALL_UNIX_FHS is ON.\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Now set variables that depend on those set by GNUInstallDirs.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# There's a difference between the locations of these files we'd want\n\n# when using apt-get, and what a build-from-source user would want. For\n\n# now the focus is making sure that if a build-from-source user installs\n\n# into /usr or /usr/local, they have a FHS-compliant OpenSim installation.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Location of the opensim python package in the installation.\n\n# On Ubuntu/Debian (apt-get), would want lib/python2.7/dist-packages.\n\n# We replace VERSION with the correct version once we know it (in\n\n# Bindings/Python/CMakeLists.txt).\n\n# The _LIBDIR variable might contain something like x86-64-linux-gnu on\n\n# some systems, but for python, we really just want lib/, no matter what.\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# share/java, as expected on Ubuntu/Debian (apt-get).\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Don't want to put source files in share/java.\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Use our own installation layout.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Set the variables that would have otherwise been set by GNUInstallDirs.\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# SYSCONFDIR holds read-only single-machine machine-dependent data.\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Cross-platform location of shared libraries. Used in configureOpenSim.m.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# On UNIX, be careful about installing into system directories.\n\n# -------------------------------------------------------------\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# In this case it's fine to install into /usr or /usr/local.\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# Platform.\n\n# ---------\n\n# Create a platform name useful for finding things in the Platform\n\n# directory.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# In addition to the platform name we need to know the Application Binary\n\n# Interface (ABI) we're building for. Currently that is either x86, meaning\n\n# 32 bit Intel instruction set, or x64 for 64 bit Intel instruction set.\n\n# Kevin: Since Ubuntu 12 64bit libraries are in lib not lib64 (This in\n\n# response of Sherm's change on Simbody)\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "## Choose the maximum level of x86 instruction set that the compiler is\n\n## allowed to use. Was using sse2 but changed to let the compilers choose. Most\n\n## will probably use sse2 or later by default.\n\n## On 64 bit MSVC, the default is sse2 and the argument\n\n## isn't recognized so we won't specify it.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Here's where we used to set sse2. Leaving this line in\n\n# case we decide to specify a default value again.\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "## This can be set to a different value by the person running CMake.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "## When building in any of the Release modes, tell gcc to use not-quite most\n\n## aggressive optimization and to generate SSE2 floating point instructions.\n\n## Here we are specifying *all* of the Release flags, overriding CMake's\n\n## defaults.  Watch out for optimizer bugs in particular gcc versions!\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Get the gcc version number in major.minor.build format\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Testing with Clang 3.3 on Ubuntu 14.04 shows a 5% decrease\n\n# in the runtime of the tests when we enable loop unrolling.\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# If you know of optimization bugs that affect SimTK in particular\n\n# gcc versions, this is the place to turn off those optimizations.\n",
        "Line" : 313,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# C++\n",
        "Line" : 317,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# C\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "## When building in any of the Release modes, tell VC++ cl compiler to use intrinsics\n\n## (i.e. sqrt instruction rather than sqrt subroutine) with flag /Oi.\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# abbreviation\n",
        "Line" : 357,
        "CharPositionInLine" : 48
      },
      "46" : {
        "Text" : "## C++\n\n# Disable \"C4068: unknown pragma\" warning.\n",
        "Line" : 359,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "## C\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# To create a drop-down in the CMake GUI:\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# If we can find a MATLAB installation, we'll try to run some MATLAB tests.\n\n# To print info on where MATLAB is found: set(MATLAB_FIND_DEBUG ON)\n\n# Running tests requires that we can find the matlab executable (component\n\n# MAIN_PROGRAM).\n\n# Also, the mechanism we use to set the java classpath and library path \n\n# for MATLAB requires version 7.0 (R14).\n",
        "Line" : 401,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Issue warning if Matlab and OpenSim build architectures differ.\n\n# That is, one is 64-bit and other is not.\n",
        "Line" : 408,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# On Unix, assume host architecture to be same as target \n\n# architecture.\n",
        "Line" : 412,
        "CharPositionInLine" : 12
      },
      "52" : {
        "Text" : "# On Unix, assume host architecture to be same as target \n\n# architecture.\n",
        "Line" : 427,
        "CharPositionInLine" : 12
      },
      "53" : {
        "Text" : "# PythonInterp is supposed to come before PythonLibs.\n",
        "Line" : 446,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# We update the python install dir to include the python version,\n\n# now that we know it. We replace the token \"VERSION\" with the actual python\n\n# version.\n",
        "Line" : 456,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# This must be done before adding the OpenSim libraries, since\n\n# OPENSIM_INSTALL_PYTHONDIR is used in OpenSimAddLibrary (in\n\n# OpenSimMacros.cmake).\n",
        "Line" : 462,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# If you have Homebrew's Python2, then by default, PythonInterp finds\n\n# Apple's Python, but PythonLibs finds Homebrew's Python, causing\n\n# runtime crashes. This also occurs if one has Anaconda Python.\n\n# So we use the python-config executable to get the\n\n# correct library and include directory.\n\n# https://github.com/Homebrew/legacy-homebrew/issues/25118\n",
        "Line" : 467,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "# C++11\n\n# -----\n\n# In revision 8629, we started using std::unique_ptr, which requires\n\n# C++11 features to be enabled when using GCC or Clang.\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Using C++11 on OSX requires using libc++ instead of libstd++.\n\n# libc++ is an implementation of the C++ standard library for OSX.\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# not APPLE\n",
        "Line" : 517,
        "CharPositionInLine" : 11
      },
      "60" : {
        "Text" : "## RPATH \n\n# If it is necessary to not put RPATHs in the installed binaries, set\n\n# CMAKE_SKIP_INSTALL_RPATH to ON.\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Linux and macOS\n",
        "Line" : 527,
        "CharPositionInLine" : 9
      },
      "62" : {
        "Text" : "# CMake 2.8.12 introduced the ability to set RPATH for shared libraries\n\n# on OSX. This helps executables find the libraries they depend on\n\n# without having to set the DYLD_LIBRARY_PATH environment variable. \n\n# See http://www.cmake.org/Wiki/CMake_RPATH_handling and `man dydl`.\n\n# We have attempted to make the RPATH work even if the\n\n# installation is relocated (using relative paths), but you may need to\n\n# use DYLD_LIBRARY_PATH (or alter the RPATH using install_name_tool) in\n\n# these cases.\n\n## On Linux, this variable has no effect.\n",
        "Line" : 528,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Add the automatically determined parts of the RPATH which point\n\n# to directories outside the build tree to the install RPATH.\n\n# If we are copying Simbody into OpenSim's installation, then\n\n# there's no need to link to the libraries in Simbody's or BTK's\n\n# original installations. Furthermore, we may be distributing OpenSim\n\n# to other computers that will not have our original Simbody or BTK\n\n# installations, and so the RPATH would point to a nonexistant\n\n# directory on others' computers.\n",
        "Line" : 540,
        "CharPositionInLine" : 8
      },
      "64" : {
        "Text" : "# Set RPATH so that OpenSim can find its own libraries, but only if\n\n# OpenSim is not installed into a system library directory.\n",
        "Line" : 551,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# If compiling with BTK, find and use it.\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Find Simbody.\n\n# -------------\n\n# As of Simbody 3.4, Simbody has a SimbodyConfig.cmake file, which is a\n\n# preferred way to find Simbody over the previous FindSimbody.cmake script.\n\n# NO_MODULE means we will not allow the use of a FindSimbody.cmake script.\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Find Simbody freshly by unsetting this CMake-generated variable.\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# We assume the only case in which the user\n\n# wants us to search for Simbody is if they left SIMBODY_HOME empty.\n\n# If the user specifies an invalid SIMBODY_HOME by accident,\n\n# we shouldn't let that fail silently and still search for\n\n# Simbody elsewhere; they may never realize\n\n# we are not using their requested installation of Simbody.\n",
        "Line" : 602,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Find the package using the user-specified path.\n\n# NO_DEFAULT_PATH will cause find_package to only\n\n# look in the provided PATHS.\n",
        "Line" : 611,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# This variable appears in the CMake GUI and could confuse users,\n\n# since this variable can't be changed manually.\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# If Simbody is not found, Simbody_FOUND is false.\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Check if Simbody targets were built using same BUILD_TYPE/CONFIGURATION as\n\n# current OpenSim build. If build/configuration types mismatch, stop the build.\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Copy Simbody DLLs to build tree.\n\n# --------------------------------\n\n# On Windows, we must copy Simbody libraries to the OpenSim build directory\n\n# so that the tests and examples can run without modifying the PATH\n\n# (that is, put Simbody's dll's in the same directory as OpenSim's\n\n# executables and libraries).\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Directories for Simbody headers and libraries for building.\n\n# -----------------------------------------------------------\n\n# TODO no longer necessary; Simbody's library targets provide the \n\n# include directories.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Installing dependencies into OpenSim's installation.\n\n# ----------------------------------------------------\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# The issue with install(DIRECTORY) is that it creates directories in\n\n# the installation for *every* directory in DIRECTORY, even if that\n\n# dirctory doesn't contain any files matching the provided\n\n# pattern/regex.\n\n# We can safely assume that Simbody is installed in an isolated\n\n# dirctory; therefore, it should be safe to use install(DIRECTORY).\n\n# This may not be true with conda or chocolatey.\n",
        "Line" : 672,
        "CharPositionInLine" : 8
      },
      "77" : {
        "Text" : "# There's no need to install Simbody examples or docs.\n",
        "Line" : 684,
        "CharPositionInLine" : 16
      },
      "78" : {
        "Text" : "# Don't copy lapack, blas, etc. into sdk/Simbody/bin/; they are\n\n# already copied into bin/.\n",
        "Line" : 687,
        "CharPositionInLine" : 16
      },
      "79" : {
        "Text" : "# DLLs are handled by OpenSimCopyDependencyDLLsForWin(), but we still\n\n# need to copy simbody-visualizer.exe.\n",
        "Line" : 691,
        "CharPositionInLine" : 8
      },
      "80" : {
        "Text" : "# TODO We are copying Simbody DLLs to both the bin and sdk/Simbody/bin\n\n# folders; we would prefer to only copy to the former, but\n\n# SimbodyTargets-*.cmake expect dlls in sdk/Simbody/bin. In the future,\n\n# we can edit the *.cmake files to no longer expect these DLLs.\n",
        "Line" : 696,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "# We would have liked to use install(DIRECTORY) on UNIX, but the\n\n# dependencies may be installed in system-wide locations and we don't\n\n# want to copy extraneous files/directories; install(DIRECTORY) creates\n\n# a directory in DESTINATION for *every* directory in DIRECTORY, even\n\n# if we do not want to copy any files from some of the directories in\n\n# DIRECTORY.\n",
        "Line" : 701,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# include\n",
        "Line" : 708,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "# lib (and cmake, pkgconfig)\n",
        "Line" : 714,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# simbody-visualizer\n",
        "Line" : 727,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "# BTK\n\n# ---\n",
        "Line" : 737,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# No need to copy *.lib on Windows, as BTK links \"privately\" to\n\n# osimCommon (clients of osimCommon do not link to BTK).\n",
        "Line" : 743,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "# LIB: .so files on Linux, .dylib on macOS\n",
        "Line" : 746,
        "CharPositionInLine" : 8
      },
      "88" : {
        "Text" : "# Other than Windows we can debug without debuggable SimTK libraries\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "## The following are required to uses Dart and the Cdash dashboard per Jesse\n",
        "Line" : 768,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Sets the number of concurrent jobs that testing can use.\n",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Create buildinfo.txt file and place under sdk to include product version,\n\n# platform and compiler for troubleshooting purposes\n",
        "Line" : 783,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# message(\"version file=\"${VERSION_FILE_PATH})\n",
        "Line" : 786,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Preprocessor definitions.\n\n# -------------------------\n\n# These are used in OpenSim/version.h\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# This directory contains files (e.g., .osim) that multiple tests may want to\n\n# use. See the OpenSimCopySharedTestFiles function in\n\n# cmake/OpenSimMacros.cmake.\n",
        "Line" : 824,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 96
    },
    "OpenSim/Actuators/CMakeLists.txt" : {
      "ObjectId" : "624e58502cb8a822d88200611756a621de476368",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Actuators/Test/CMakeLists.txt" : {
      "ObjectId" : "92a034bd5eba03841ea2ce1623f3c4a5607168a7",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Analyses/CMakeLists.txt" : {
      "ObjectId" : "05f9e80ac706a7700702ddf5d9fe3d312da34e0a",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Analyses/Test/CMakeLists.txt" : {
      "ObjectId" : "798d436e549b58120e81f184196d870aa042e60d",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/CMakeLists.txt" : {
      "ObjectId" : "e56797f21c7b7121660936785242209e22c34943",
      "LastModified" : "2018-12-08T00:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(Sandbox)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Common/CMakeLists.txt" : {
      "ObjectId" : "5ae32878d4a68e597bd8d829f5b3a3a8a1d7475d",
      "LastModified" : "2019-02-08T14:10:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clients of osimCommon need not link to BTK.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Whether cerr & cout shold be redirected to err.log and out.log respectively\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On Windows only, debug libraries cannot be mixed with release\n\n# libraries, and we must copy the DLLs from the dependencies\n\n# into OpenSim's build directory (so that the DLLs are found\n\n# when running the tests).\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "OpenSim/Common/Test/CMakeLists.txt" : {
      "ObjectId" : "1c5d1ef1a4c57c0a960fb7f9fdc74edc5b4ccbb3",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/ExampleComponents/CMakeLists.txt" : {
      "ObjectId" : "1fd82858b049ac62627147b28950d291bd699ea4",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Examples/BuildDynamicWalker/CMakeLists.txt" : {
      "ObjectId" : "aa8f8693743489f04dc26daff6b09ff97efda267",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a CMake file for building a project that uses OpenSim.\n\n# This is the minimum version of CMake that OpenSim requires:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim requires a compiler that supports C++11.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the OpenSim libraries and header files.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This command searches for the file OpenSimConfig.cmake\n\n# in common system directories and in OPENSIM_INSTALL_DIR.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# By not listing \"Debug\", we prevent Visual Studio from using\n\n# Debug by default, which does not work with the OpenSim API\n\n# distributed via the GUI.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define an executable to be created from the provided C++ source files.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link to OpenSim and Simbody libraries.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "OpenSim/Examples/CMakeLists.txt" : {
      "ObjectId" : "60c42c24f30bd273a8d680a0d694183eb84603e7",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We do not install the BuildDynamicWalker example, because it is assigned to\n\n# students as homework. The solution to the BuildDynamicWalker example is in\n\n# OpenSim/Examples/BuildDynamicWalker, and is tested in \n\n# OpenSim/Tests/BuildDynamicWalker.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Examples/ControllerExample/CMakeLists.txt" : {
      "ObjectId" : "0dbc0c770bc23d698c1bb99d243cef806874cc50",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This block copies the additional files into the running directory\n\n# For example vtp, obj files. Add to the end for more extentions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Examples/CustomActuatorExample/CMakeLists.txt" : {
      "ObjectId" : "1184e0edaaaf8e605b487926b1d5d7b83f35f369",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This block copies the additional files into the running directory\n\n# For example vtp, obj files. Add to the end for more extentions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Examples/DataAdapter/CMakeLists.txt" : {
      "ObjectId" : "e42596a272d296bb4ed49536d06910c55cc6f21f",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Examples/DataTable/CMakeLists.txt" : {
      "ObjectId" : "43b1a092ee5fe17186f0a7d0fe92e7f36ddb725e",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Examples/ExampleHopperDevice/CMakeLists.txt" : {
      "ObjectId" : "89c3db643d8daef2dce59d9d2634d81f48619c84",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Examples/ExampleLuxoMuscle/CMakeLists.txt" : {
      "ObjectId" : "0b2757f4222ac7281f9671fd87773247d01ea9fd",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This block copies the additional files into the running directory\n\n# For example vtp, obj files. Add to the end for more extentions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Examples/ExampleMain/CMakeLists.txt" : {
      "ObjectId" : "ec8b052fb30604b0f20951413970462901709af2",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This block copies the additional files into the running directory\n\n# For example vtp, obj files. Add to the end for more extentions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Examples/MuscleExample/CMakeLists.txt" : {
      "ObjectId" : "18e9789ade5fdf66cdfc9cdd7aba6e426cc37f6d",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This block copies the additional files into the running directory\n\n# For example vtp, obj files. Add to the end for more extentions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Examples/OptimizationExample_Arm26/CMakeLists.txt" : {
      "ObjectId" : "fd06ab356870852a9e641a7ec2dbeee37736c4a5",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This block copies the additional files into the running directory\n\n# For example vtp, obj files. Add to the end for more extentions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Examples/Plugins/AnalysisPluginExample/CMakeLists.txt" : {
      "ObjectId" : "4fd4392bcae128b1debb22b71b503a3695bacf0a",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Examples/Plugins/BodyDragExample/CMakeLists.txt" : {
      "ObjectId" : "293b4b323825fbd323613a77f2cc2f93ed424192",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Examples/Plugins/CoupledBushingForceExample/CMakeLists.txt" : {
      "ObjectId" : "07e03d96734760eff8eb03c501d1411d66b15842",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Examples/SimpleOptimizationExample/CMakeLists.txt" : {
      "ObjectId" : "4d0e0ab8875a64fd87e01c29d1d2bbbb6ed1f6d2",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This block copies the additional files into the running directory\n\n# For example vtp, obj files. Add to the end for more extentions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Examples/SymbolicExpressionReporter/CMakeLists.txt" : {
      "ObjectId" : "8b68de11c8cabef2db6f5c85502cebb6bee949e1",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################\n\n## For building with the rest of OpenSim ##\n\n###########################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################\n\n## For building with existing OpenSim install ##\n\n################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Configure installation.\n\n# -----------------------\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "OpenSim/Examples/checkEnvironment/CMakeLists.txt" : {
      "ObjectId" : "e0e244f3cd548429ef1cf885f4f661d05029426e",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings.\n\n# ---------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenSim uses C++11 language features.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find and hook up to OpenSim.\n\n# ----------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure this project.\n\n# -----------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure installation.\n\n# -----------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "OpenSim/Sandbox/CMakeLists.txt" : {
      "ObjectId" : "3d7b548bfcefcd7d68ff24453a4ab90000b363ac",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These executables are *not* tests.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Sandbox/TaskSpace/CMakeLists.txt" : {
      "ObjectId" : "161ebddbf533c884b11d1ac4e8e3b248fa893823",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These executables are *not* tests.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Sandbox/UsefulComponents/CMakeLists.txt" : {
      "ObjectId" : "13ad8427e2e7f9b757784396fe4d2f975ae305e9",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These executables are *not* tests.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Sandbox/xsens/CMakeLists.txt" : {
      "ObjectId" : "a1376962a42e540f47a3f4c6ec3e5397656f7959",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake_minimum_required(VERSION 3.1.3)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Currently this application is only supported\n\n# on Windows.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 64-bit build.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# 32-bit build.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "OpenSim/Simulation/CMakeLists.txt" : {
      "ObjectId" : "011f8e3c650489feabba150f4a8f33afd91c0b36",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Simulation/SimbodyEngine/CMakeLists.txt" : {
      "ObjectId" : "ff07a5b35f2ff18b9d145da4911c45c3a8e7ba5c",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Simulation/SimbodyEngine/Test/CMakeLists.txt" : {
      "ObjectId" : "19511c57ad56094ea0317b02844eacfd5c508796",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Simulation/Test/CMakeLists.txt" : {
      "ObjectId" : "cb55a75a3b2840c9e374a323573814d61d2e08c3",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/AddComponents/CMakeLists.txt" : {
      "ObjectId" : "e5505faf21cb677a881bd8cf3481a9caea80645e",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define test target and current test dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy dependencies from ExampleMain into the run directory\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Copy example files to run dir\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the standard answer for example main\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Copy standard test results to the run dir\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "OpenSim/Tests/AnalysisPluginExample/CMakeLists.txt" : {
      "ObjectId" : "ceb5d601c1eec185da8948fe196acf41a886bda2",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define test target and current test dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy dependencies from AnalysisPluginExample into the run directory.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Copy example files to run dir\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add test.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "OpenSim/Tests/BodyDragExample/CMakeLists.txt" : {
      "ObjectId" : "5f58bb02d651a65d247f6d1619dfa471d52706fc",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define test target and current test dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy example files to run dir\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Build plugin library.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy dependencies from BodyDragExample into the run directory.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add test.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add test.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "OpenSim/Tests/BuildDynamicWalker/CMakeLists.txt" : {
      "ObjectId" : "ba853a6286f26000d0676e3ec34d571a51ec9c90",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/CMakeLists.txt" : {
      "ObjectId" : "eb4aa5b3ad9f7028d8a626920f619007a0ec12a1",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/Components/CMakeLists.txt" : {
      "ObjectId" : "1edae056b68e86435fc4d860aa58399d6cf85bea",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/ControllerExample/CMakeLists.txt" : {
      "ObjectId" : "9e542847f737ae845848490e830f7c1fa9b8c80d",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Copy files to run dir\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "OpenSim/Tests/CoupledBushingForceExample/CMakeLists.txt" : {
      "ObjectId" : "e3676fb212c8c9e9537b9930e4033fb7e3f874e9",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Tests/CustomActuatorExample/CMakeLists.txt" : {
      "ObjectId" : "402684a152ca4dd96adad2f2c95e3769410b53d8",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Copy files to run dir\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "OpenSim/Tests/Environment/CMakeLists.txt" : {
      "ObjectId" : "e617f6b3de406cc93ce602b606659e20121a9e1e",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/ExampleLuxoMuscle/CMakeLists.txt" : {
      "ObjectId" : "e7ef528fe141a4801ab655dc36c60527b508a484",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define test target and current test dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy dependencies from ExampleLuxoMuscle into the run directory.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Copy example files to run dir\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add test.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "OpenSim/Tests/ExampleMain/CMakeLists.txt" : {
      "ObjectId" : "55a1ff1bf61d2f7abcea1858cf045783ece4e3d6",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Copy files to run dir\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "OpenSim/Tests/MuscleExample/CMakeLists.txt" : {
      "ObjectId" : "f4f5f7d6751b0705f6e23820c086597d09d8c4d5",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Copy files to run dir\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "OpenSim/Tests/OptimizationExample_Arm26/CMakeLists.txt" : {
      "ObjectId" : "ef01a1ff9e4da019a86d3e0dd3dc813e496c4302",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Copy files to run dir\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "OpenSim/Tests/README/CMakeLists.txt" : {
      "ObjectId" : "0c8942e1015dca260e46207d0b4bf22a7386ea5c",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/SimpleOptimizationExample/CMakeLists.txt" : {
      "ObjectId" : "724bfccccb4b27aab793bd166340e68a24368741",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable definitions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Copy files to run dir\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "OpenSim/Tests/VisualizeModel/CMakeLists.txt" : {
      "ObjectId" : "8ef03c2d4bfca844c60b0fe6c131ad3dc0ac7c26",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/Wrapping/CMakeLists.txt" : {
      "ObjectId" : "54006bff916d13f49428932a2b2ccb6474aa0541",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/testIterators/CMakeLists.txt" : {
      "ObjectId" : "968527dd5f8d9fc70834362d2406fa16d50f97a2",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tests/testMemoryLeaks/CMakeLists.txt" : {
      "ObjectId" : "c3e213a801bb5a4f00d9c10abfdc1279247dab32",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tools/CMakeLists.txt" : {
      "ObjectId" : "232e66f20a823e57d02c2d381f11806ad4e7b4e6",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Tools/Test/CMakeLists.txt" : {
      "ObjectId" : "ffd92f39c88f697eb6e830d549daf4b4e8db55ba",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Utilities/CMakeLists.txt" : {
      "ObjectId" : "73f2a2785d40958a86943fc0ccc597a075bd0d9b",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Utilities/convertFiles/CMakeLists.txt" : {
      "ObjectId" : "ad37d077f5623878c880b8f8b7d9d23f7f447e12",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "OpenSim/Utilities/simmFileWriterDLL/CMakeLists.txt" : {
      "ObjectId" : "d048c58bd5cb39f802d449614f9655bff2f49649",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't install the headers (see function definition).\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "OpenSim/Utilities/simmToOpenSim/CMakeLists.txt" : {
      "ObjectId" : "b9ce8214a2c5c9cce32abb7c1e484fbcc37b9c5c",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# m is math library for linux\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Utilities/simmToOpenSim/acpp/CMakeLists.txt" : {
      "ObjectId" : "46b5a71c584c93858ddd6c4071c409066d669d90",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "OpenSim/Utilities/simmToOpenSim/acpp/src/CMakeLists.txt" : {
      "ObjectId" : "8360299b8ebff247ecaf8617f28ac14fc9b45f67",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Vendors/CMakeLists.txt" : {
      "ObjectId" : "f0b80d494ef9524b2b4295081b83d0d0ebdf75f0",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Vendors/lepton/CMakeLists.txt" : {
      "ObjectId" : "d76693223d778778e6705a1e53c86ef3eed6ac0e",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Avoid clang's warning:\n\n# ExpressionTreeNode.cpp:62:90: Reference cannot be bound to dereferenced\n\n# null pointer in well-defined C++ code; comparison may be assumed to\n\n# always evaluate to false.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# This warning also occurs in ParsedExpression.cpp:49.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We don't want to edit the lepton files (that would cause them to diverge\n\n# from the copy in OpenMM), so we ignore these warnings via CMake settings.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Vendors/lepton/test/CMakeLists.txt" : {
      "ObjectId" : "9fb1c3f57e2197f0b28d3de370704bb6400775ce",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "7b2fc087c777675fb96bcfeb712f13732a14d2f6",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake packaging so people can use OpenSim.\n\n# ------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Requires CMake 2.8.8.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The generated file must not be named OpenSimConfig.cmake, otherwise CMake\n\n# will pick it up and think that the build tree contains an OpenSim\n\n# installation.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variables to edit in OpenSimConfig.cmake.in.\n",
        "Line" : 14,
        "CharPositionInLine" : 14
      },
      "4" : {
        "Text" : "# Version file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindMatlab.cmake" : {
      "ObjectId" : "c7238ab2f793d3df7582f0fa6e87c8ac3daee0b3",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindMatlab\n\n# ----------\n\n#\n\n# Finds Matlab installations and provides Matlab tools and libraries to cmake.\n\n#\n\n# This package first intention is to find the libraries associated with Matlab\n\n# in order to be able to build Matlab extensions (mex files). It can also be\n\n# used:\n\n#\n\n# * run specific commands in Matlab\n\n# * declare Matlab unit test\n\n# * retrieve various information from Matlab (mex extensions, versions and\n\n#   release queries, ...)\n\n#\n\n# The module supports the following components:\n\n#\n\n# * ``MX_LIBRARY`` and ``ENG_LIBRARY`` respectively the MX and ENG libraries of\n\n#   Matlab\n\n# * ``MAIN_PROGRAM`` the Matlab binary program.\n\n#\n\n# .. note::\n\n#\n\n#   The version given to the :command:`find_package` directive is the Matlab\n\n#   **version**, which should not be confused with the Matlab *release* name\n\n#   (eg. `R2014`).\n\n#   The :command:`matlab_get_version_from_release_name` and\n\n#   :command:`matlab_get_release_name_from_version` allow a mapping\n\n#   from the release name to the version.\n\n#\n\n# The variable :variable:`Matlab_ROOT_DIR` may be specified in order to give\n\n# the path of the desired Matlab version. Otherwise, the behaviour is platform\n\n# specific:\n\n#\n\n# * Windows: The installed versions of Matlab are retrieved from the\n\n#   Windows registry\n\n# * OS X: The installed versions of Matlab are given by the MATLAB\n\n#   paths in ``/Application``. If no such application is found, it falls back\n\n#   to the one that might be accessible from the PATH.\n\n# * Unix: The desired Matlab should be accessible from the PATH.\n\n#\n\n# Additional information is provided when :variable:`MATLAB_FIND_DEBUG` is set.\n\n# When a Matlab binary is found automatically and the ``MATLAB_VERSION``\n\n# is not given, the version is queried from Matlab directly.\n\n# On Windows, it can make a window running Matlab appear.\n\n#\n\n# The mapping of the release names and the version of Matlab is performed by\n\n# defining pairs (name, version).  The variable\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS` may be provided before the call to\n\n# the :command:`find_package` in order to handle additional versions.\n\n#\n\n# A Matlab scripts can be added to the set of tests using the\n\n# :command:`matlab_add_unit_test`. By default, the Matlab unit test framework\n\n# will be used (>= 2013a) to run this script, but regular ``.m`` files\n\n# returning an exit code can be used as well (0 indicating a success).\n\n#\n\n# Module Input Variables\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Users or projects may set the following variables to configure the module\n\n# behaviour:\n\n#\n\n# :variable:`Matlab_ROOT_DIR`\n\n#   the root of the Matlab installation.\n\n# :variable:`MATLAB_FIND_DEBUG`\n\n#   outputs debug information\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS`\n\n#   additional versions of Matlab for the automatic retrieval of the installed\n\n#   versions.\n\n#\n\n# Variables defined by the module\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Result variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_FOUND``\n\n#   ``TRUE`` if the Matlab installation is found, ``FALSE``\n\n#   otherwise. All variable below are defined if Matlab is found.\n\n# ``Matlab_ROOT_DIR``\n\n#   the final root of the Matlab installation determined by the FindMatlab\n\n#   module.\n\n# ``Matlab_MAIN_PROGRAM``\n\n#   the Matlab binary program. Available only if the component ``MAIN_PROGRAM``\n\n#   is given in the :command:`find_package` directive.\n\n# ``Matlab_INCLUDE_DIRS``\n\n#  the path of the Matlab libraries headers\n\n# ``Matlab_MEX_LIBRARY``\n\n#   library for mex, always available.\n\n# ``Matlab_MX_LIBRARY``\n\n#   mx library of Matlab (arrays). Available only if the component\n\n#   ``MX_LIBRARY`` has been requested.\n\n# ``Matlab_ENG_LIBRARY``\n\n#   Matlab engine library. Available only if the component ``ENG_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_LIBRARIES``\n\n#   the whole set of libraries of Matlab\n\n# ``Matlab_MEX_COMPILER``\n\n#   the mex compiler of Matlab. Currently not used.\n\n#   Available only if the component ``MEX_COMPILER`` is asked\n\n#\n\n# Cached variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_MEX_EXTENSION``\n\n#   the extension of the mex files for the current platform (given by Matlab).\n\n# ``Matlab_ROOT_DIR``\n\n#   the location of the root of the Matlab installation found. If this value\n\n#   is changed by the user, the result variables are recomputed.\n\n#\n\n# Provided macros\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_get_version_from_release_name`\n\n#   returns the version from the release name\n\n# :command:`matlab_get_release_name_from_version`\n\n#   returns the release name from the Matlab version\n\n#\n\n# Provided functions\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_add_mex`\n\n#   adds a target compiling a MEX file.\n\n# :command:`matlab_add_unit_test`\n\n#   adds a Matlab unit test file as a test to the project.\n\n# :command:`matlab_extract_all_installed_versions_from_registry`\n\n#   parses the registry for all Matlab versions. Available on Windows only.\n\n#   The part of the registry parsed is dependent on the host processor\n\n# :command:`matlab_get_all_valid_matlab_roots_from_registry`\n\n#   returns all the possible Matlab paths, according to a previously\n\n#   given list. Only the existing/accessible paths are kept. This is mainly\n\n#   useful for the searching all possible Matlab installation.\n\n# :command:`matlab_get_mex_suffix`\n\n#   returns the suffix to be used for the mex files\n\n#   (platform/architecture dependant)\n\n# :command:`matlab_get_version_from_matlab_run`\n\n#   returns the version of Matlab, given the full directory of the Matlab\n\n#   program.\n\n#\n\n#\n\n# Known issues\n\n# ^^^^^^^^^^^^\n\n#\n\n# **Symbol clash in a MEX target**\n\n#   By default, every symbols inside a MEX\n\n#   file defined with the command :command:`matlab_add_mex` have hidden\n\n#   visibility, except for the entry point. This is the default behaviour of\n\n#   the MEX compiler, which lowers the risk of symbol collision between the\n\n#   libraries shipped with Matlab, and the libraries to which the MEX file is\n\n#   linking to. This is also the default on Windows platforms.\n\n#\n\n#   However, this is not sufficient in certain case, where for instance your\n\n#   MEX file is linking against libraries that are already loaded by Matlab,\n\n#   even if those libraries have different SONAMES.\n\n#   A possible solution is to hide the symbols of the libraries to which the\n\n#   MEX target is linking to. This can be achieved in GNU GCC compilers with\n\n#   the linker option ``-Wl,--exclude-libs,ALL``.\n\n#\n\n# **Tests using GPU resources**\n\n#   in case your MEX file is using the GPU and\n\n#   in order to be able to run unit tests on this MEX file, the GPU resources\n\n#   should be properly released by Matlab. A possible solution is to make\n\n#   Matlab aware of the use of the GPU resources in the session, which can be\n\n#   performed by a command such as ``D = gpuDevice()`` at the beginning of\n\n#   the test script (or via a fixture).\n\n#\n\n#\n\n# Reference\n\n# ^^^^^^^^^\n\n#\n\n# .. variable:: Matlab_ROOT_DIR\n\n#\n\n#    The root folder of the Matlab installation. If set before the call to\n\n#    :command:`find_package`, the module will look for the components in that\n\n#    path. If not set, then an automatic search of Matlab\n\n#    will be performed. If set, it should point to a valid version of Matlab.\n\n#\n\n# .. variable:: MATLAB_FIND_DEBUG\n\n#\n\n#    If set, the lookup of Matlab and the intermediate configuration steps are\n\n#    outputted to the console.\n\n#\n\n# .. variable:: MATLAB_ADDITIONAL_VERSIONS\n\n#\n\n#   If set, specifies additional versions of Matlab that may be looked for.\n\n#   The variable should be a list of strings, organised by pairs of release\n\n#   name and versions, such as follows::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"release_name1=corresponding_version1\"\n\n#         \"release_name2=corresponding_version2\"\n\n#         ...\n\n#         )\n\n#\n\n#   Example::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"R2013b=8.2\"\n\n#         \"R2013a=8.1\"\n\n#         \"R2012b=8.0\")\n\n#\n\n#   The order of entries in this list matters when several versions of\n\n#   Matlab are installed. The priority is set according to the ordering in\n\n#   this list.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2014-2015 Raffi Enficiaud, Max Planck Society\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# \n\n# * Redistributions of source code must retain the above copyright\n\n#   notice, this list of conditions and the following disclaimer.\n\n# \n\n# * Redistributions in binary form must reproduce the above copyright\n\n#   notice, this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n# \n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n#   nor the names of their contributors may be used to endorse or promote\n\n#   products derived from this software without specific prior written\n\n#   permission.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n\n# \n\n# chrisdembia added this to the OpenSim repository because he needed to modify\n\n# the MatlabTestsRedirect.cmake file.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The currently supported versions. Other version can be added by the user by\n\n# providing MATLAB_ADDITIONAL_VERSIONS\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# temporary folder for all Matlab runs\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_release_name\n\n#\n\n#   Returns the version of Matlab (17.58) from a release name (R2017k)\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_release_name_from_version\n\n#\n\n#   Returns the release name (R2017k) from the version of Matlab (17.58)\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# extracts all the supported release names (R2017k...) of Matlab\n\n# internal use\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# extracts all the supported versions of Matlab\n\n# internal use\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_extract_all_installed_versions_from_registry\n\n#\n\n#   This function parses the registry and founds the Matlab versions that are\n\n#   installed. The found versions are returned in `matlab_versions`.\n\n#   Set `win64` to `TRUE` if the 64 bit version of Matlab should be looked for\n\n#   The returned list contains all versions under\n\n#   ``HKLM\\\\SOFTWARE\\\\Mathworks\\\\MATLAB`` or an empty list in case an error\n\n#   occurred (or nothing found).\n\n#\n\n#   .. note::\n\n#\n\n#     Only the versions are provided. No check is made over the existence of the\n\n#     installation referenced in the registry,\n\n#\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# /reg:64 should be added on 64 bits capable OSs in order to enable the\n\n# redirection of 64 bits applications\n",
        "Line" : 392,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# (internal)\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# get the supported versions\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# this is a manual population of the versions we want to look for\n\n# this can be done as is, but preferably with the call to\n\n# matlab_get_supported_versions and variable\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# populating the versions we want to look for\n\n# set(matlab_supported_versions)\n",
        "Line" : 451,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# # Matlab 7\n\n# set(matlab_major 7)\n\n# foreach(current_matlab_minor RANGE 4 20)\n",
        "Line" : 454,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 457,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 458,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# # Matlab 8\n\n# set(matlab_major 8)\n\n# foreach(current_matlab_minor RANGE 0 5)\n",
        "Line" : 460,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# # taking into account the possible additional versions provided by the user\n\n# if(DEFINED MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 466,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# list(APPEND matlab_supported_versions MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 468,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# endif()\n",
        "Line" : 469,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# we order from more recent to older\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_all_valid_matlab_roots_from_registry\n\n#\n\n#   Populates the Matlab root with valid versions of Matlab.\n\n#   The returned matlab_roots is organized in pairs\n\n#   ``(version_number,matlab_root_path)``.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_all_valid_matlab_roots_from_registry(\n\n#         matlab_versions\n\n#         matlab_roots)\n\n#\n\n#   ``matlab_versions``\n\n#     the versions of each of the Matlab installations\n\n#   ``matlab_roots``\n\n#     the location of each of the Matlab installations\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The matlab_versions comes either from\n\n# extract_matlab_versions_from_registry_brute_force or\n\n# matlab_extract_all_installed_versions_from_registry.\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_mex_suffix\n\n#\n\n#   Returns the extension of the mex files (the suffixes).\n\n#   This function should not be called before the appropriate Matlab root has\n\n#   been found.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_mex_suffix(\n\n#         matlab_root\n\n#         mex_suffix)\n\n#\n\n#   ``matlab_root``\n\n#     the root of the Matlab installation\n\n#   ``mex_suffix``\n\n#     the variable name in which the suffix will be returned.\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# todo setup the extension properly. Currently I do not know if this is\n\n# sufficient for all win32 distributions.\n\n# there is also CMAKE_EXECUTABLE_SUFFIX that could be tweaked\n",
        "Line" : 548,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# we first try without suffix, since cmake does not understand a list with\n\n# one empty string element\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# this call should populate the cache automatically\n",
        "Line" : 568,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# the program has been found?\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_matlab_run\n\n#\n\n#   This function runs Matlab program specified on arguments and extracts its\n\n#   version.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_version_from_matlab_run(\n\n#         matlab_binary_path\n\n#         matlab_list_versions)\n\n#\n\n#   ``matlab_binary_path``\n\n#     the location of the `matlab` binary executable\n\n#   ``matlab_list_versions``\n\n#     the version extracted from Matlab\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# the log file is needed since on windows the command executes in a new\n\n# window and it is not possible to get back the answer of Matlab\n\n# the -wait command is needed on windows, otherwise the call returns\n\n# immediately after the program launches itself.\n",
        "Line" : 645,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# timeout set to 30 seconds, in case it does not start\n\n# note as said before OUTPUT_VARIABLE cannot be used in a platform\n\n# independent manner however, not setting it would flush the output of Matlab\n\n# in the current console (unix variant)\n",
        "Line" : 660,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# if successful, read back the log\n",
        "Line" : 687,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_unit_test\n\n#\n\n#   Adds a Matlab unit test to the test set of cmake/ctest.\n\n#   This command requires the component ``MAIN_PROGRAM``.\n\n#   The unit test uses the Matlab unittest framework (default, available\n\n#   starting Matlab 2013b+) except if the option ``NO_UNITTEST_FRAMEWORK``\n\n#   is given.\n\n#\n\n#   The function expects one Matlab test script file to be given.\n\n#   In the case ``NO_UNITTEST_FRAMEWORK`` is given, the unittest script file\n\n#   should contain the script to be run, plus an exit command with the exit\n\n#   value. This exit value will be passed to the ctest framework (0 success,\n\n#   non 0 failure). Additional arguments accepted by :command:`add_test` can be\n\n#   passed through ``TEST_ARGS`` (eg. ``CONFIGURATION <config> ...``).\n\n#\n\n#   ::\n\n#\n\n#     matlab_add_unit_test(\n\n#         NAME <name>\n\n#         UNITTEST_FILE matlab_file_containing_unittest.m\n\n#         [UNITTEST_PRECOMMAND matlab_command_to_run]\n\n#         [TIMEOUT timeout]\n\n#         [ADDITIONAL_PATH path1 [path2 ...]]\n\n#         [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]\n\n#         [TEST_ARGS arg1 [arg2 ...]]\n\n#         [NO_UNITTEST_FRAMEWORK]\n\n#         )\n\n#\n\n#   The function arguments are:\n\n#\n\n#   ``NAME``\n\n#     name of the unittest in ctest.\n\n#   ``UNITTEST_FILE``\n\n#     the matlab unittest file. Its path will be automatically\n\n#     added to the Matlab path.\n\n#   ``UNITTEST_PRECOMMAND``\n\n#     Matlab script command to be ran before the file\n\n#     containing the test (eg. GPU device initialisation based on CMake\n\n#     variables).\n\n#   ``TIMEOUT``\n\n#     the test timeout in seconds. Defaults to 180 seconds as the\n\n#     Matlab unit test may hang.\n\n#   ``ADDITIONAL_PATH``\n\n#     a list of paths to add to the Matlab path prior to\n\n#     running the unit test.\n\n#   ``MATLAB_ADDITIONAL_STARTUP_OPTIONS``\n\n#     a list of additional option in order\n\n#     to run Matlab from the command line.\n\n#   ``TEST_ARGS``\n\n#     Additional options provided to the add_test command. These\n\n#     options are added to the default options (eg. \"CONFIGURATIONS Release\")\n\n#   ``NO_UNITTEST_FRAMEWORK``\n\n#     when set, indicates that the test should not\n\n#     use the unittest framework of Matlab (available for versions >= R2013a).\n\n#\n",
        "Line" : 724,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_mex\n\n#\n\n#   Adds a Matlab MEX target.\n\n#   This commands compiles the given sources with the current tool-chain in\n\n#   order to produce a MEX file. The final name of the produced output may be\n\n#   specified, as well as additional link libraries, and a documentation entry\n\n#   for the MEX file. Remaining arguments of the call are passed to the\n\n#   :command:`add_library` command.\n\n#\n\n#   ::\n\n#\n\n#      matlab_add_mex(\n\n#          NAME <name>\n\n#          SRC src1 [src2 ...]\n\n#          [OUTPUT_NAME output_name]\n\n#          [DOCUMENTATION file.txt]\n\n#          [LINK_TO target1 target2 ...]\n\n#          [...]\n\n#      )\n\n#\n\n#   ``NAME``\n\n#     name of the target.\n\n#   ``SRC``\n\n#     list of tje source files.\n\n#   ``LINK_TO``\n\n#     a list of additional link dependencies.  The target links to ``libmex``\n\n#     by default. If ``Matlab_MX_LIBRARY`` is defined, it also\n\n#     links to ``libmx``.\n\n#   ``OUTPUT_NAME``\n\n#     if given, overrides the default name. The default name is\n\n#     the name of the target without any prefix and\n\n#     with ``Matlab_MEX_EXTENSION`` suffix.\n\n#   ``DOCUMENTATION``\n\n#     if given, the file ``file.txt`` will be considered as\n\n#     being the documentation file for the MEX file. This file is copied into\n\n#     the same folder without any processing, with the same name as the final\n\n#     mex file, and with extension `.m`. In that case, typing ``help <name>``\n\n#     in Matlab prints the documentation contained in this file.\n\n#\n\n#   The documentation file is not processed and should be in the following\n\n#   format:\n\n#\n\n#   ::\n\n#\n\n#     % This is the documentation\n\n#     function ret = mex_target_output_name(input1)\n\n#\n",
        "Line" : 815,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# we do not need all this on Windows\n\n# pthread options\n",
        "Line" : 866,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# we should use try_compile instead, the link flags are discarded from\n\n# this compiler_flag function.\n\n#check_cxx_compiler_flag(-Wl,--exclude-libs,ALL HAS_SYMBOL_HIDING_CAPABILITY)\n",
        "Line" : 869,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# documentation\n",
        "Line" : 908,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# documentation\n",
        "Line" : 917,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# entry point in the mex file + taking care of visibility and symbol clashes.\n",
        "Line" : 919,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Apparently, compiling with -pthread generated the proper link flags\n\n# and some defines at compilation\n",
        "Line" : 927,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# if we do not do that, the symbols linked from eg. boost remain weak and\n\n# then clash with the ones defined in the matlab process. So by default\n\n# the symbols are hidden.\n\n# This also means that for shared libraries (like MEX), the entry point\n\n# should be explicitly declared with default visibility, otherwise Matlab\n\n# cannot find the entry point.\n\n# Note that this is particularly meaningful if the MEX wrapper itself\n\n# contains symbols that are clashing with Matlab (that are compiled in the\n\n# MEX file). In order to propagate the visibility options to the libraries\n\n# to which the MEX file is linked against, the -Wl,--exclude-libs,ALL\n\n# option should also be specified.\n",
        "Line" : 933,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#  get_target_property(\n\n#    _previous_link_flags\n\n#    ${${prefix}_NAME}\n\n#    LINK_FLAGS)\n\n#  if(NOT _previous_link_flags)\n\n#    set(_previous_link_flags)\n\n#  endif()\n",
        "Line" : 952,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,--exclude-libs,ALL\"\n\n#        # -Wl,--version-script=${_FindMatlab_SELF_DIR}/MatlabLinuxVisibility.map\"\n\n#    )\n\n#  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n\n#    # in this case, all other symbols become hidden.\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,-exported_symbol,_mexFunction\"\n\n#        #-Wl,-exported_symbols_list,${_FindMatlab_SELF_DIR}/MatlabOSXVisilibity.map\"\n\n#    )\n\n#  endif()\n",
        "Line" : 960,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# (internal)\n\n# Used to get the version of matlab, using caching. This basically transforms the\n\n# output of the root list, with possible unknown version, to a version\n\n#\n",
        "Line" : 988,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# if the version is not trivial, we query matlab for that\n\n# we keep track of the location of matlab that induced this version\n\n#if(NOT DEFINED Matlab_PROG_VERSION_STRING_AUTO_DETECT)\n\n#  set(Matlab_PROG_VERSION_STRING_AUTO_DETECT \"\" CACHE INTERNAL \"internal matlab location for the discovered version\")\n\n#endif()\n",
        "Line" : 994,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# the version is known, we just return it\n",
        "Line" : 1001,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# do we already have a matlab program?\n",
        "Line" : 1010,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# if not found, clear the dependent variables\n",
        "Line" : 1027,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# full real path for path comparison\n",
        "Line" : 1038,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# is it the same as the previous one?\n",
        "Line" : 1043,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# update the location of the program\n",
        "Line" : 1049,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# set the version into the cache\n",
        "Line" : 1057,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# warning, just in case several versions found (should not happen)\n",
        "Line" : 1060,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# return the updated value\n",
        "Line" : 1066,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# ###################################\n\n# Exploring the possible Matlab_ROOTS\n",
        "Line" : 1077,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# this variable will get all Matlab installations found in the current system.\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# if the user specifies a possible root, we keep this one\n",
        "Line" : 1086,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# if Matlab_ROOT_DIR specified but erroneous\n",
        "Line" : 1089,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# NOTFOUND indicates the code below to search for the version automatically\n",
        "Line" : 1094,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# empty version\n",
        "Line" : 1096,
        "CharPositionInLine" : 72
      },
      "64" : {
        "Text" : "# cached version\n",
        "Line" : 1098,
        "CharPositionInLine" : 95
      },
      "65" : {
        "Text" : "# if the user does not specify the possible installation root, we look for\n\n# one installation using the appropriate heuristics\n",
        "Line" : 1105,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# On WIN32, we look for Matlab installation in the registry\n\n# if unsuccessful, we look for all known revision and filter the existing\n\n# ones.\n",
        "Line" : 1110,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# testing if we are able to extract the needed information from the registry\n",
        "Line" : 1114,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# the returned list is empty, doing the search on all known versions\n",
        "Line" : 1118,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# filtering the results with the registry keys\n",
        "Line" : 1128,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# on mac, we look for the /Application paths\n\n# this corresponds to the behaviour on Windows. On Linux, we do not have\n\n# any other guess.\n",
        "Line" : 1134,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# if we have not found anything, we fall back on the PATH\n",
        "Line" : 1169,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# At this point, we have no other choice than trying to find it from PATH.\n\n# If set by the user, this wont change\n",
        "Line" : 1172,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# we then populate the list of roots, with empty version\n",
        "Line" : 1180,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# resolve symlinks\n",
        "Line" : 1185,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# get the directory (the command below has to be run twice)\n\n# this will be the matlab root\n",
        "Line" : 1188,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Matlab should be in bin\n",
        "Line" : 1191,
        "CharPositionInLine" : 93
      },
      "77" : {
        "Text" : "# take the first possible Matlab root\n",
        "Line" : 1214,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# adding a warning in case of ambiguity\n",
        "Line" : 1221,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# check if the root changed against the previous defined one, if so\n\n# clear all the cached variables\n",
        "Line" : 1229,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# internal\n",
        "Line" : 1243,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "#Matlab_PROG_VERSION_STRING_AUTO_DETECT\n",
        "Line" : 1246,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# Fix the version, in case this one is NOTFOUND\n",
        "Line" : 1260,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# i should be for intel\n",
        "Line" : 1287,
        "CharPositionInLine" : 32
      },
      "84" : {
        "Text" : "# This variable goes to the cache.\n",
        "Line" : 1329,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# internal\n\n# This small stub around find_library is to prevent any pollution of CMAKE_FIND_LIBRARY_PREFIXES in the global scope.\n\n# This is the function to be used below instead of the find_library directives.\n",
        "Line" : 1341,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# the MEX library/header are required\n",
        "Line" : 1353,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# the MEX extension is required\n",
        "Line" : 1373,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# the matlab root is required\n",
        "Line" : 1376,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# component Mex Compiler\n",
        "Line" : 1380,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# component Matlab program\n",
        "Line" : 1397,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Component MX library\n",
        "Line" : 1416,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Component ENG library\n",
        "Line" : 1434,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#Matlab_LIBRARIES\n",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "#Matlab_ROOT_DIR\n\n#Matlab_VERSION_STRING\n",
        "Line" : 1483,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "#Matlab_MEX_EXTENSION\n",
        "Line" : 1486,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "#Matlab_BINARIES_DIR\n",
        "Line" : 1489,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 97
    },
    "cmake/MatlabTestsRedirect.cmake" : {
      "ObjectId" : "5ec8ed26741bd8867e4d271f94b5871b3d45a8bd",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is an undocumented internal helper for the FindMatlab\n\n# module ``matlab_add_unit_test`` command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2014-2015 Raffi Enficiaud, Max Planck Society\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# \n\n# * Redistributions of source code must retain the above copyright\n\n#   notice, this list of conditions and the following disclaimer.\n\n# \n\n# * Redistributions in binary form must reproduce the above copyright\n\n#   notice, this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n# \n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n#   nor the names of their contributors may be used to endorse or promote\n\n#   products derived from this software without specific prior written\n\n#   permission.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n\n# \n\n# Modified by chrisdembia to remove \"-nojvm\" flag, because we need MATLAB's JVM\n\n# to run our tests.\n\n# TODO: Recent versions of CMake have removed the \"-nojvm\" flag, so we could\n\n# remove this file from our repo if we make the minimum required CMake version\n\n# 3.7 or above.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Usage: cmake\n\n#   -Dtest_timeout=180\n\n#   -Doutput_directory=\n\n#   -Dadditional_paths=\"\"\n\n#   -Dno_unittest_framework=\"\"\n\n#   -DMatlab_PROGRAM=matlab_exe_location\n\n#   -DMatlab_ADDITIONNAL_STARTUP_OPTIONS=\"\"\n\n#   -Dtest_name=name_of_the_test\n\n#   -Dcmd_to_run_before_test=\"\"\n\n#   -Dunittest_file_to_run\n\n#   -P FindMatlab_TestsRedirect.cmake\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we do not want the output twice\n",
        "Line" : 100,
        "CharPositionInLine" : 15
      },
      "4" : {
        "Text" : "# print the output in any case.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if we put FATAL_ERROR here, the file is indented.\n",
        "Line" : 111,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 6
    },
    "cmake/OpenSimMacros.cmake" : {
      "ObjectId" : "6d06e631801144d18eef965bc15ea9c0e59789cd",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add a relative path to the run-path of a shared library. The run-path allows\n\n# a library to find the libraries it depends on without the need to set the\n\n# (DY)LD_LIBRARY_PATH environment variable. This function nnly affects UNIX\n\n# systems. Here are the arguments:\n\n#\n\n# TARGET: The CMake target to which the run-path should be added.\n\n# EXECUTABLE, LOADER: Specify one of these flags to indicate whether the\n\n#   run-path is relative to the executable's location or relative to the loader\n\n#   (the library/executable that attempts to load the dependent library). Only\n\n#   affects Mac.\n\n# FROM: The path (relative to the OpenSim installation root) of the\n\n#   executable/library that is loading a dependent library.\n\n# TO: The path (relative to the OpenSim installation root) where the dependent\n\n#   library is located.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Similar to OpenSimAddInstallRPATH except the run-path is the same directory\n\n# loader (e.g., \"@loader_path/\"). Arguments:\n\n#\n\n# TARGET: The CMake target to which the run-path should be added.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# By specifing \"\" and \"\" for FROM and TO, the resulting RPATH will simply\n\n# be \"${rpath_macro}/\".\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Similar to OpenSimAddInstallRPATH, but specifically for adding a run-path to\n\n# the Simbody libraries copied into the OpenSim installation. If Simbody is not\n\n# copied into the OpenSim installation (OPENSIM_COPY_DEPENDENCIES=OFF) or the\n\n# copied Simbody libraries are installed to the same folder as the OpenSim\n\n# libraries (OPENSIM_INSTALL_UNIX_FHS=ON), then this function does nothing.\n\n#\n\n# TARGET: The CMake target to which the run-path should be added.\n\n# ABSOLUTE: Add an absolute run-path to the Simbody libraries in the OpenSim\n\n#   installation. If you specify this argument, then you should not specify\n\n#   EXECTUABLE, LOADER, or FROM.\n\n# EXECUTABLE, LOADER: Specify one of these flags to indicate whether the\n\n#   run-path is relative to the executable's location or relative to the loader\n\n#   (the library/executable that attempts to load the dependent library). Only\n\n#   affects Mac.\n\n# FROM: The path (relative to the OpenSim installation root) of the\n\n#   executable/library that is loading a dependent Simbody library.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Similar to OpenSimAddInstallRPATH, but specifically for adding an absolute\n\n# run-path.\n\n#\n\n# TARGET: The CMake target to which the run-path should be added.\n\n# TO: The path (relative to the OpenSim installation root) where the dependent\n\n#   library is located.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create an OpenSim API library. Here are the arguments:\n\n# VENDORLIB: If this is a vendor library, specify \"VENDORLIB\" as the first\n\n#   argument. Otherwise, omit.\n\n# LOWERINCLUDEDIRNAME: When installing the headers for this library, make the\n\n#   name of the library all lower-case (e.g., Lepton -> lepton).\n\n# EXCLUDEFROMPYTHON: Do not install this library into the python package.\n\n# KIT: Name of the library (e.g., Common).\n\n# AUTHORS: A string listing authors of the library.\n\n# LINKLIBS: List of libraries (targets) to link against.\n\n# INCLUDES: List of header files for the library (obtain via file(GLOB ...)).\n\n# SOURCES: List of cpp files for the library (obtain via file(GLOB ...)).\n\n# TESTDIRS: List of subdirectories that contain tests (and a CMakeLists.txt).\n\n# INCLUDEDIRS (optional): Affects how header files are installed. Use this if\n\n#   the library directory contains subdirectories with header files. If this is\n\n#   the case, this variable should be a list of those subdirectories (relative\n\n#   paths). See OpenSim/Simulation/CMakeLists.txt for an example. If omitted,\n\n#   all the headers specified under INCLUDES are installed into the same\n\n#   directory in the installation tree.\n\n# INCLUDEINSTALLREL (optional): If INCLUDEDIRS is specified, remove\n\n#   \"INCLUDEINSTALLREL\" from the location of the installed headers.\n\n#\n\n# Here's an example from OpenSim/Common/CMakeLists.txt:\n\n#\n\n#   OpenSimAddLibrary(\n\n#       KIT Common\n\n#       AUTHORS \"Clay_Anderson-Ayman_Habib_and_Peter_Loan\"\n\n#       LINKLIBS ${Simbody_LIBRARIES}\n\n#       INCLUDES ${INCLUDES}\n\n#       SOURCES ${SOURCES}\n\n#       TESTDIRS \"Test\"\n\n#       )\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Parse arguments.\n\n# ----------------\n\n# http://www.cmake.org/cmake/help/v2.8.9/cmake.html#module:CMakeParseArguments\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Version stuff.\n\n# --------------\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add the library.\n\n# ----------------\n\n# These next few lines are the most important:\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Create the library using the provided source and include files.\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Used when building this target:\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Used by other targets in this project:\n",
        "Line" : 212,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Used by client projects using an installed OpenSim:\n",
        "Line" : 215,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# This target links to the libraries provided as arguments to this func.\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# This is for exporting classes on Windows.\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# For Visual Studio.\n",
        "Line" : 231,
        "CharPositionInLine" : 37
      },
      "16" : {
        "Text" : "# Install.\n\n# --------\n\n# Shared libraries are needed at runtime for applications, so we put them\n\n# at the top level in OpenSim/bin/*.dll (Windows) or OpenSim/lib/*.so\n\n# (Linux) or OpemSim/lib/*.dylib (Mac). Windows .lib files, and Linux/Mac\n\n# .a static archives are only needed at link time so go in sdk/lib.\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Install headers.\n\n# ----------------\n",
        "Line" : 261,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# returns full pathnames\n",
        "Line" : 272,
        "CharPositionInLine" : 42
      },
      "19" : {
        "Text" : "# Remove \"INCLUDEINSTALLREL\" from the installed location.\n",
        "Line" : 274,
        "CharPositionInLine" : 16
      },
      "20" : {
        "Text" : "# RPATH (so that libraries find library dependencies)\n\n# ---------------------------------------------------\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Testing.\n\n# --------\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Copy a file from the directory containing test files (model files, data,\n\n# etc.) to the directory in which a test will be executed. This function makes\n\n# it easy to re-use files that are used in tests. With an easier mechanism for\n\n# re-using these files, we won't end up version-controlling the same file in\n\n# multiple test directories.\n\n#\n\n# Arguments are a list of files in the test resources directory\n\n# (OPENSIM_SHARED_TEST_FILES_DIR) to copy.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Create test targets for this directory.\n\n# TESTPROGRAMS: Names of test CPP files. One test will be created for each cpp\n\n#   of these files.\n\n# DATAFILES: Files necessary to run the test. These will be copied into the\n\n#   corresponding build directory.\n\n# LINKLIBS: Arguments to TARGET_LINK_LIBRARIES.\n\n# SOURCES: Extra source files for the executable.\n\n#\n\n# Here's an example:\n\n#   file(GLOB TEST_PROGRAMS \"test*.cpp\")\n\n#   file(GLOB DATA_FILES *.osim *.xml *.sto *.mot)\n\n#   OpenSimAddTests(\n\n#       TESTPROGRAMS ${TEST_ROGRAMS}\n\n#       DATAFILES ${DATA_FILES}\n\n#       LINKLIBS osimCommon osimSimulation osimAnalyses\n\n#       )\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Parse arguments.\n\n# ----------------\n\n# http://www.cmake.org/cmake/help/v2.8.9/cmake.html#module:CMakeParseArguments\n",
        "Line" : 344,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# If EXECUTABLE_OUTPUT_PATH is set, then that's where the tests will be\n\n# located. Otherwise, they are located in the current binary directory.\n",
        "Line" : 353,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Make test targets.\n",
        "Line" : 361,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# NAME_WE stands for \"name without extension\"\n",
        "Line" : 363,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "# Copy data files to build directory.\n",
        "Line" : 376,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# This command re-copies the data files if they are modified;\n\n# custom commands don't do this.\n",
        "Line" : 378,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "#if(UNIX)\n\n#  add_definitions(-fprofile-arcs -ftest-coverage)\n\n#  link_libraries(gcov)\n\n#endif(UNIX)\n",
        "Line" : 383,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# Create an application/executable. To be used in the Appliations directory.\n\n# NAME: Name of the application. Must also be the name of the source file\n\n#   containing main() (without the .cpp extension).\n\n# SOURCES: Additional header/source files to compile into this target. \n\n#\n\n# Here's an example:\n\n#   OpenSimAddApplication(NAME opensim-cmd SOURCES opensim-cmd_run-tool.h)\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Parse arguments.\n\n# ----------------\n\n# http://www.cmake.org/cmake/help/v2.8.9/cmake.html#module:CMakeParseArguments\n",
        "Line" : 402,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Build.\n",
        "Line" : 411,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Install.\n",
        "Line" : 418,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# RPATH (so that the executable finds libraries without using env. vars).\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Function to install shared libraries (any platform) from a dependency install\n\n# directory into the OpenSim installation. One use case is to install libraries\n\n# into the python package.\n\n# PREFIX: A common part of the library file names (e.g., 'SimTK' or 'BTK').\n\n#         This is to avoid copying unrelated files from a folder like /usr/lib.\n\n# DEP_LIBS_DIR_WIN: Directory to search for the dependency's library, on\n\n#         Windows.\n\n# DEP_LIBS_DIR_UNIX: Directory to search for the dependency's library, on\n\n#         UNIX (APPLE and Linux). Specify only the lib directory to avoid\n\n#         searching all of /usr/local (if the dependency is installed to a\n\n#         system location like this).\n\n# OSIM_DESTINATION: Destination of the libraries within OpenSim's installation.\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Trailing * for version #s.\n",
        "Line" : 450,
        "CharPositionInLine" : 31
      },
      "38" : {
        "Text" : "# Function to copy DLL files from dependency install directory into OpenSim \n\n# build and install directories. This is a Windows specific function enabled \n\n# only for Windows platform. Intention is to allow runtime loader to find all \n\n# the required DLLs without need for editing PATH variable.\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# On Windows, copy dlls into OpenSim binary directory.\n",
        "Line" : 467,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Discover the file dependencies for an invocation of swig, for use with the\n\n# DEPENDS field of an add_custom_command().\n\n#\n\n# OSIMSWIGDEP_RETURNVAL  is filled with a list of the dependencies.\n\n# OSIMSWIGDEP_MODULE     is the name of the module (just for messages).\n\n# OSIMSWIGDEP_INVOCATION is the SWIG command to use to check for dependencies.\n\n#                        We append `-MM` to this, which asks SWIG for the\n\n#                        dependencies.\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# We must use a macro instead of a function in order to return a value.\n",
        "Line" : 504,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Assemble dependencies. This command is run during CMake's configure step.\n",
        "Line" : 506,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# List dependencies, but omit files in SWIG library.\n",
        "Line" : 510,
        "CharPositionInLine" : 16
      },
      "44" : {
        "Text" : "# Clean up the output, since it's in the form of a makefile\n\n# (and we just want a list of file paths).\n",
        "Line" : 515,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# return code 0 is success.\n",
        "Line" : 517,
        "CharPositionInLine" : 50
      },
      "46" : {
        "Text" : "# '^.*:' matches the first line of the makefile (the output file path).\n\n# '\\\\\\\\' matches a single \\ (escape for CMake, and escape for regex).\n",
        "Line" : 518,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# Replace spaces with semicolons to create a list of file paths.\n",
        "Line" : 522,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# In case the variable has a value for previous modules.\n",
        "Line" : 525,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# If someone ends up here, it's a bug in this CMakeLists.txt.\n",
        "Line" : 527,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 50
    },
    "dependencies/CMakeLists.txt" : {
      "ObjectId" : "fab2debf8dccd83a3bb67ccd629a86a90c655e59",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake file implements the super-build procedure to download, configure,\n\n# compile and install all OpenSim dependencies. Using super-build is optional.\n\n# OpenSim does not use this file directly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the default for CMAKE_INSTALL_PREFIX.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default install prefix for OpenSim dependencies. If user changes\n\n# CMAKE_INSTALL_PREFIX, this directory will be removed.\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# CMake doesn't clear prefix directories when user changes it. \n\n# Remove it to avoid confusion.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the default for CMAKE_BUILD_TYPE.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_BUILD_TYPE is only applicable for single configuration generators.\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add a dependency. Arguments:\n\n#   NAME       -- (Required) Name of the project.\n\n#   URL        -- (Required) git repository to download the sources from.\n\n#   TAG        -- (Required) git tag to checkout before commencing build.\n\n#   CMAKE_ARGS -- (Optional) A CMake list of arguments to be passed to CMake \n\n#                 while building the project.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check for presence of required arguments.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add a cache entry providing option for user to use (or not) superbuild.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Forward cmake arguments to dependencies.\n",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "####################### Add dependencies below.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# URL        https://github.com/Biomechanical-ToolKit/BTKCore.git\n",
        "Line" : 145,
        "CharPositionInLine" : 14
      },
      "12" : {
        "Text" : "#######################\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "9784e6ff8c8938895d6154744a14ee05e3a3cdfc",
      "LastModified" : "2018-11-09T23:04:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set some useful variables.\n\n# --------------------------\n\n# The goal here is to run Doxygen to generate most of the API documentation\n\n# under \"html\" in the binary directory, then apply a few hand-tweaked \n\n# hacks to it there.\n\n# The result should be fully-functional documentation in the binary \n\n# directory (start with index.html) that can be examined while debugging \n\n# Doxygen comments. Then when we do an INSTALL later (see below), we just \n\n# need to copy over the binary html directory into sdk/doc.\n\n# (sherm 20120127)\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# We will populate this with the paths on which the doxygen target depends.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "## LaTeX or MathJax\n\n# -----------------\n\n# Doxygen must render equations, and this can be done either with LaTeX or\n\n# MathJax. LaTeX is unpleasant to install on Windows, so we prefer MathJax.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# There are two ways of using MathJax: from the internet, or locally.\n\n# We prefer using MathJax locally, but we have to download it first.\n\n# We download a MathJax zip (~30 MB) and unzip it (over 100 MB).\n\n# The zip can be thrown away, but the unzipped MathJax directory must stay\n\n# with the Doxygen documentation.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If we are unable to download MathJax, and the user has LaTeX, we fall\n\n# back onto LaTeX. If the user has neither MathJax *or* LaTeX, we fall back\n\n# on using MathJax from the internet instead of downloading it.\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This block of commands is all executing during the configuring phase.\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#SHOW_PROGRESS Clutters the CMake output.\n",
        "Line" : 45,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Did we download MathJax successfully?\n\n# Get first element of the status.\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Must modify the cache variable so we don't end up here after\n\n# running the CMake configuring step multiple times.\n",
        "Line" : 55,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# This means the user wants to use MathJax *and* we were able to\n\n# download it successfully.\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# See Doxyfile.in for a description of these variables.\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Try using LATEX.\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Configure linking to Simbody documentation.\n\n# -------------------------------------------\n\n# This variable must be a STRING; a PATH variable resolves //'s as a single\n\n# /, but we need to use double slashes for URL's.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# This variable is used in Doxyfile.in.\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# The variable above is only defined if Simbody's Doxygen documentation\n\n# was (built and) installed.\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Configure doxygen configuration that's shared between both user\n\n# and developer configurations.\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "##############################\n\n# USER AND DEVELOPER DOXYGEN #\n\n##############################\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# The goal here is to run Doxygen to generate most of the API\n\n# documentation under \"html\" in the binary directory, then apply a few\n\n# hand-tweaked hacks to it there.\n\n# The result should be fully-functional documentation in the binary\n\n# directory (start with index.html) that can be examined while\n\n# debugging Doxygen comments. Then when we do an INSTALL later (see\n\n# below), we just need to copy over the binary html directory into\n\n# sdk/doc.\n\n# (sherm 20120127)\n\n# ^ There are now two builds of doxygen, so the above comment now\n\n# applies to both sets.\n\n# (chrisdembia 20150507)\n",
        "Line" : 134,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# MathJax\n\n# -------\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# This means the user wants to use MathJax *and* we were able to\n\n# download it successfully.\n",
        "Line" : 153,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# This creates a folder html_${audience}/MathJax-2.7-latest in the\n\n# build tree.\n",
        "Line" : 158,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# Trim away unnecessary files (over 100 MB -> about 5 MB).\n\n# https://github.com/mathjax/MathJax-docs/wiki/Guide:-reducing-size-of-a-mathjax-installation/1814429ed1e97bfb7675c0fd400804baa9287249\n",
        "Line" : 164,
        "CharPositionInLine" : 16
      },
      "22" : {
        "Text" : "# Add the MathJax unzipped directory to the dependencies for doxygen.\n",
        "Line" : 201,
        "CharPositionInLine" : 12
      },
      "23" : {
        "Text" : "# Copy images directory.\n\n# ----------------------\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# There is an \"images\" directory containing the pictures needed by\n\n# the main page. Copy all the files into html_${audience}/images.\n",
        "Line" : 208,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# Define the doxygen target (now that we know the dependencies).\n\n# --------------------------------------------------------------\n\n# Doxyfile.in should take care of directing the output of Doxygen\n\n# to ${PROJECT_BINARY_DIR}/html_(user|developer).\n\n# Note that you have to invoke this \"doxygen\" target directly; it isn't run\n\n# by default.\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Now create the command for running doxygen, which requires that we\n\n# have defined the doxygen target.\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Run doxygen\n\n# -----------\n",
        "Line" : 239,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Installation\n\n# ------------\n",
        "Line" : 246,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# This is just a shortcut to the Doxygen index.html, for the user\n\n# documentation.\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 30
    }
  },
  "FileTypes" : {
    "CMAKE" : 97
  },
  "ElapsedTime" : 6793
}