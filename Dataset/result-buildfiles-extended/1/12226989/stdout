{
  "Repository" : "12226989",
  "Revision" : "HEAD",
  "ObjectId" : "5f1645c4464b2dca5e73b6b5485bcd6e527adb69",
  "CommitTime" : "2019-02-04T19:10:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "037589193fb21b13f821b1b832b6446586f422ed",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is autogenerated by Autocmake v1.0.0-alpha-x http://autocmake.org\n\n# Copyright (c) 2015-2018 by Radovan Bast, Roberto Di Remigio, Jonas Juselius, and contributors.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set minimum cmake version\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# project name\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# do not rebuild if rules (compiler flags) change\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if CMAKE_BUILD_TYPE undefined, we set it to Debug\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Options handling utilities\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Macro for printing an option in a consistent manner\n\n# Written by Lori A. Burns (@loriab) and Ryan M. Richard (@ryanmrichard)\n\n# Syntax: print_option(<option to print> <was specified>)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Wraps an option with default ON/OFF. Adds nice messaging to option()\n\n# Written by Lori A. Burns (@loriab) and Ryan M. Richard (@ryanmrichard)\n\n# Syntax: option_with_print(<option name> <description> <default value>)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Wraps an option with a default other than ON/OFF and prints it\n\n# Written by Lori A. Burns (@loriab) and Ryan M. Richard (@ryanmrichard)\n\n# NOTE: Can't combine with above b/c CMake handles ON/OFF options specially\n\n# NOTE2: CMake variables are always defined so need to further check for if\n\n#       they are the NULL string. This is also why we need the force\n\n# Syntax: option_with_default(<option name> <description> <default value>)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# directories which hold included cmake modules\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# included cmake modules\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "970e076520cb627248b080c1814cf6db529acc87",
      "LastModified" : "2015-09-25T07:13:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "api/CMakeLists.txt" : {
      "ObjectId" : "754ff98fe2b79df93d25780548472fd9c4810fa8",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/custom/FindEigen3.cmake" : {
      "ObjectId" : "9c546a05d859b18c49554d7ee7221cc486b7760e",
      "LastModified" : "2016-02-04T23:59:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/custom/FindGperftools.cmake" : {
      "ObjectId" : "38e59717fdc76c606be900e08652ba072f07fc07",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of MADNESS\n\n# https://github.com/m-a-d-n-e-s-s/madness/blob/master/cmake/modules/FindGperftools.cmake\n\n#\n\n# - Try to find Google performance tools (gperftools)\n\n# Input variables:\n\n#   GPERFTOOLS_ROOT_DIR    - The gperftools install directory\n\n#   GPERFTOOLS_INCLUDE_DIR - The gperftools include directory\n\n#   GPERFTOOLS_LIBRARY     - The gperftools library directory\n\n# Components: profiler, and tcmalloc or tcmalloc_minimal\n\n# Output variables:\n\n#   GPERFTOOLS_FOUND        - System has gperftools\n\n#   GPERFTOOLS_INCLUDE_DIRS - The gperftools include directories\n\n#   GPERFTOOLS_LIBRARIES    - The libraries needed to use gperftools\n\n#   GPERFTOOLS_VERSION      - The version string for gperftools\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check to see if libunwind is required\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Libunwind is required by profiler on this platform\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Check for invalid components\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Check for valid component combinations\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set default sarch paths for gperftools\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Search for component libraries\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Exclude profiler from the found list if libunwind is required but not found\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Set gperftools libraries if not set based on component list\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GPERFTOOLS_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add linker flags that instruct the compiler to exclude built in memory\n\n# allocation functions. This works for GNU, Intel, and Clang. Other compilers\n\n# may need to be added in the future.\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Add libunwind flags to gperftools if the profiler is being used\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "cmake/custom/FindLibunwind.cmake" : {
      "ObjectId" : "e4b7760c25895303ce74dd589237856726c9a2bf",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of MADNESS\n\n# https://github.com/m-a-d-n-e-s-s/madness/blob/master/cmake/modules/FindLibunwind.cmake\n\n#\n\n# - Try to find Libunwind\n\n# Input variables:\n\n#  LIBUNWIND_ROOT_DIR     - The libunwind install directory\n\n#  LIBUNWIND_INCLUDE_DIR  - The libunwind include directory\n\n#  LIBUNWIND_LIBRARY      - The libunwind library directory\n\n# Output variables:\n\n#  LIBUNWIND_FOUND        - System has libunwind\n\n#  LIBUNWIND_INCLUDE_DIRS - The libunwind include directories\n\n#  LIBUNWIND_LIBRARIES    - The libraries needed to use libunwind\n\n#  LIBUNWIND_VERSION      - The version string for libunwind\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default sarch paths for libunwind\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Get libunwind version\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBUNWIND_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/custom/api.cmake" : {
      "ObjectId" : "638ad57485ee9c84d4c352e33ede172214b27546",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# Manage compilation of API.\n\n# Optionally, enable testing of Fortran 90 API bindings.\n\n#\n\n# Variables defined::\n\n#\n\n#   TEST_Fortran_API\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--fbindings=<TEST_Fortran_API> Enable testing of Fortran 90 API bindings <ON/OFF> [default: ON].\"\n\n#   define: \"'-DTEST_Fortran_API={0}'.format(arguments['--fbindings'])\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/custom/code_coverage.cmake" : {
      "ObjectId" : "90406e24f62dde05c1fb4e31ba1216df0d4eb917",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Enables code coverage by appending corresponding compiler flags.\n\n#\n\n# Variables modified (provided the corresponding language is enabled)::\n\n#\n\n#   CMAKE_Fortran_FLAGS\n\n#   CMAKE_C_FLAGS\n\n#   CMAKE_CXX_FLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--coverage Enable code coverage [default: OFF].\"\n\n#   define: \"'-DENABLE_CODE_COVERAGE={0}'.format(arguments['--coverage'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/custom/compilers/CFlags.cmake" : {
      "ObjectId" : "d2d2d7cceb2ac3140c89aeececb8bd9aee4b511b",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/CXXFlags.cmake" : {
      "ObjectId" : "4c9afe54612ba659bd88584e7c2d40d48ae93dbe",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Discover C++11 support\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/custom/compilers/Clang.C.cmake" : {
      "ObjectId" : "1779586487ed0d08bccf263e23895ed9c94a547b",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/Clang.CXX.cmake" : {
      "ObjectId" : "7481e492ea80825fb295da7aafb95bffcdecd0cc",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/FortranFlags.cmake" : {
      "ObjectId" : "9a2b3fa47f0a111edffd8b628bd0d92fd93b2a45",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/Fortran_C.cmake" : {
      "ObjectId" : "7a90686a85e68f9d761cbb05b98f1f265c4b6fa6",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Checks Fortran and C/C++ compilers compatibility, relying on the\n\n# FortranCInterface CMake module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 12.5.0 broken (LAB), above should trap pre-Mavericks\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/custom/compilers/GNU.C.cmake" : {
      "ObjectId" : "54c4cd22e75c1bac44135bbc771220b933866d59",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/GNU.CXX.cmake" : {
      "ObjectId" : "a945655866e71c63acc92b22ede50b72680f3585",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/GNU.Fortran.cmake" : {
      "ObjectId" : "65994ed7f3f8fc382b136c299409997a75b6df45",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Overrides contents of all variables previously set by CMake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/custom/compilers/Intel.C.cmake" : {
      "ObjectId" : "b975e5ddbdfd390b20cd84674d3ab3bbea9abeb6",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/Intel.CXX.cmake" : {
      "ObjectId" : "34f39bbb741e79a9328cf01e193551e0d4a9feaa",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/Intel.Fortran.cmake" : {
      "ObjectId" : "2f857a05f1365a704b628503ec12e86e1d2454a9",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/custom/compilers/SetCompilerFlag.cmake" : {
      "ObjectId" : "8c48fad65dd64e1be936263bdadb380f8eafdc2e",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adapted from\n\n# https://github.com/robertodr/ddPCM/blob/expose-C-api/cmake/custom/compilers/SetCompilerFlag.cmake\n\n# which was adapted by Roberto Di Remigio from\n\n# https://github.com/SethMMorton/cmake_fortran_template/blob/master/cmake/Modules/SetCompileFlag.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Given a list of flags, this stateless function will try each, one at a time,\n\n# and set result to the first flag that works.\n\n# If none of the flags works, result is \"\".\n\n# If the REQUIRED key is given and no flag is found, a FATAL_ERROR is raised.\n\n#\n\n# Call is:\n\n# set_compiler_flag(RESULT result LANGUAGE (Fortran|C|CXX) <REQUIRED> FLAGS flag1 flag2 ...)\n\n#\n\n# Example:\n\n# set_compiler_flag(RESULT working_compile_flag LANGUAGE C REQUIRED FLAGS \"-Wall;-warn all\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Silently check compiler flags\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# loop over all flags, try to find the first which works\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# if the flag works, use it, and exit loop\n\n# otherwise try next flag\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# raise an error if no flag was found\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Restore CMAKE_REQUIRED_QUIET\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/custom/eigen.cmake" : {
      "ObjectId" : "bd635df0ed655ae5498dec77da8e476bca5a3d06",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# Detect Eigen3.\n\n# By default, use Eigen 3.3.0 as bundled with PCMSolver.\n\n# Look in a specific search directory, if given. If nothing is found\n\n# there, falls back to Eigen 3.3.0 bundled with PCMSolver.\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--eigen=<EIGEN3_ROOT> Root directory for Eigen3 [default: ''].\"\n\n#   define: \"'-DEIGEN3_ROOT=\\\"{0}\\\"'.format(arguments['--eigen'])\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/custom/find_python_module.cmake" : {
      "ObjectId" : "314a68e338e55e0c1e10d57674bfbeeff7974756",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find if a Python module is installed\n\n# Found at http://www.cmake.org/pipermail/cmake/2011-January/041666.html\n\n# To use do: find_python_module(PyQt4 REQUIRED)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A module's location is usually a directory, but for binary modules\n\n# it's a .so file.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/custom/gperftools.cmake" : {
      "ObjectId" : "7ecf9328332654a01b9b0e80e39b899879c368f3",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# Enable profiling with gperftools.\n\n#\n\n# Variables used::\n\n#\n\n#   ENABLE_GPERFTOOLS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--gperf Enable profiling with gperftools [default: False].\"\n\n#   define: \"'-DENABLE_GPERFTOOLS={0}'.format(arguments['--gperf'])\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/custom/libtaylor.cmake" : {
      "ObjectId" : "2545d9cd4df67e883cfcb71fb1a59fc95235adf0",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This ensures that the operator<< overload for Taylor types is available\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/custom/pcmsolver.cmake" : {
      "ObjectId" : "0e1a32a36a13502d02bb15d9ad22864a737a0810",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add definitions\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hardcode to share, rather than use CMAKE_INSTALL_DATAROOTDIR as the latter\n\n# might resolve to a place not recognized by CMake\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/custom/static_library.cmake" : {
      "ObjectId" : "37834694bdcb958dda5eaaea1bd2456658e688bd",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# Enables creation of static/shared library.\n\n# If the shared library is created, make it as static as possible.\n\n#\n\n# Variables modified (provided the corresponding language is enabled)::\n\n#\n\n#   CMAKE_Fortran_FLAGS\n\n#   CMAKE_C_FLAGS\n\n#   CMAKE_CXX_FLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--static Create only the static library [default: False].\"\n\n#   define: \"'-DSTATIC_LIBRARY_ONLY={0}'.format(arguments['--static'])\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/custom/test.cmake" : {
      "ObjectId" : "111c06ef789cf7f41f074446e36a4169e107970f",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests need to be linked to the static version of the library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This must come last!!\n",
        "Line" : 61,
        "CharPositionInLine" : 26
      },
      "CommentCount" : 2
    },
    "cmake/custom/windows.cmake" : {
      "ObjectId" : "fc5862575fe977e956fad5c76edcab4cca6558ab",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get math constants such as M_PI\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/custom/zlib.cmake" : {
      "ObjectId" : "3f567b064c47349a083b3dcd4d7cdd60813be394",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/downloaded/autocmake_boost.cmake" : {
      "ObjectId" : "cbfabfd1e0b1ebe830f0d5a1fe6b5adb7144eb4b",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Detect, build, and link Boost libraries.\n\n# This modules downloads the .zip archive from SourceForge at\n\n# Autocmake update time.\n\n# Note that the build-up commands are not Windows-compatible!\n\n#\n\n# Your autocmake.yml should look like this::\n\n#\n\n# - boost:\n\n#   - major: 1\n\n#   - minor: 59\n\n#   - patch: 0\n\n#   - components: \"chrono;timer;system\"\n\n#   - source: \"https://github.com/coderefinery/autocmake/raw/master/modules/boost/boost.cmake\"\n\n#\n\n# Cross-dependencies between required components are not checked for.\n\n# For example, Boost.Timer depends on Boost.Chrono and Boost.System thus you\n\n# should ask explicitly for all three.\n\n# If the self-build of Boost components is triggered the `BUILD_CUSTOM_BOOST` variable is set\n\n# to `TRUE`. The CMake target `custom_boost` is also added.\n\n# You should use these two to ensure the right dependencies between your targets\n\n# and the Boost headers/libraries, in case the self-build is triggered.\n\n# For example::\n\n#\n\n#   if(BUILD_CUSTOM_BOOST)\n\n#     add_dependencies(your_target custom_boost)\n\n#   endif()\n\n#\n\n# will ensure that `your_target` is built after `custom_boost` if and only if the self-build\n\n# of Boost took place. This is an important step to avoid race conditions when building\n\n# on multiple processes.\n\n#\n\n# Dependencies::\n\n#\n\n#   mpi                        - Only if the Boost.MPI library is a needed component\n\n#   python_libs                - Only if the Boost.Python library is a needed component\n\n#\n\n# Variables used::\n\n#\n\n#   BOOST_MINIMUM_REQUIRED     - Minimum required version of Boost\n\n#   BOOST_COMPONENTS_REQUIRED  - Components (compiled Boost libraries) required\n\n#   PROJECT_SOURCE_DIR\n\n#   PROJECT_BINARY_DIR\n\n#   CMAKE_BUILD_TYPE\n\n#   MPI_FOUND\n\n#   BUILD_CUSTOM_BOOST\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   url_root: https://github.com/coderefinery/autocmake/raw/master/\n\n#   major: 1\n\n#   minor: 48\n\n#   patch: 0\n\n#   components: \"\"\n\n#   fetch:\n\n#     - \"%(url_root)modules/boost/boost_unpack.cmake\"\n\n#     - \"%(url_root)modules/boost/boost_userconfig.cmake\"\n\n#     - \"%(url_root)modules/boost/boost_configure.cmake\"\n\n#     - \"%(url_root)modules/boost/boost_build.cmake\"\n\n#     - \"%(url_root)modules/boost/boost_install.cmake\"\n\n#     - \"%(url_root)modules/boost/boost_headers.cmake\"\n\n#     - \"%(url_root)modules/boost/boost_cleanup.cmake\"\n\n#     - \"http://sourceforge.net/projects/boost/files/boost/%(major).%(minor).%(patch)/boost_%(major)_%(minor)_%(patch).zip\"\n\n#   docopt:\n\n#     - \"--boost-headers=<BOOST_INCLUDEDIR> Include directories for Boost [default: ''].\"\n\n#     - \"--boost-libraries=<BOOST_LIBRARYDIR> Library directories for Boost [default: ''].\"\n\n#     - \"--build-boost=<FORCE_CUSTOM_BOOST> Deactivate Boost detection and build on-the-fly <ON/OFF> [default: OFF].\"\n\n#   define:\n\n#     - \"'-DBOOST_INCLUDEDIR=\\\"{0}\\\"'.format(arguments['--boost-headers'])\"\n\n#     - \"'-DBOOST_LIBRARYDIR=\\\"{0}\\\"'.format(arguments['--boost-libraries'])\"\n\n#     - \"'-DFORCE_CUSTOM_BOOST={0}'.format(arguments['--build-boost'])\"\n\n#     - \"'-DBOOST_MINIMUM_REQUIRED=\\\"%(major).%(minor).%(patch)\\\"'\"\n\n#     - \"'-DBOOST_COMPONENTS_REQUIRED=\\\"%(components)\\\"'\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME Maintainer should be able to choose between fail (end-user has to satisfy dependency\n\n#       on its own) and soft-fail (self-build of Boost)\n\n# Underscore-separated version number\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where the Boost .zip archive is located\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME These are possibly not always good settings\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Just to avoid unused variable warning from CMake\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Read from cache, needed for rebuilds\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "## Preliminary work\n\n# 0. Root directory for the custom build\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1. Where Boost will be built\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# 2. Select toolset according to compilers specified by the user\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# CMAKE_CURRENT_LIST_DIR is undefined in CMake 2.8.2\n\n# see https://public.kitware.com/Bug/print_bug_page.php?bug_id=11675\n\n# workaround: create CMAKE_CURRENT_LIST_DIR\n",
        "Line" : 135,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# Non-empty list. Compiled libraries needed\n\n# Transform the ;-separated list to a ,-separated list (digested by the Boost build toolchain!)\n",
        "Line" : 143,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Replace unit_test_framework (used by CMake's find_package) with test (understood by Boost build toolchain)\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Empty list. Header-only libraries needed\n\n# Just unpack to known location\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# 4. Set all variables related to Boost that find_package would have set\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "cmake/downloaded/autocmake_cc.cmake" : {
      "ObjectId" : "ec1248c588e15c9503006441ff2aa40928acf06c",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Adds C support.\n\n# Appends EXTRA_CFLAGS to CMAKE_C_FLAGS.\n\n# If environment variable CFLAGS is set, then the CFLAGS are used\n\n# and no other flags are used or appended.\n\n#\n\n# Variables used::\n\n#\n\n#   EXTRA_CFLAGS\n\n#\n\n# Variables modified::\n\n#\n\n#   CMAKE_C_FLAGS\n\n#\n\n# Environment variables used::\n\n#\n\n#   CFLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt:\n\n#     - \"--cc=<CC> C compiler [default: gcc].\"\n\n#     - \"--extra-cc-flags=<EXTRA_CFLAGS> Extra C compiler flags [default: ''].\"\n\n#   define: \"'-DCMAKE_C_COMPILER={0} -DEXTRA_CFLAGS=\\\"{1}\\\"'.format(arguments['--cc'], arguments['--extra-cc-flags'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_ccache.cmake" : {
      "ObjectId" : "4a7dcc4625e073d7fe46cda01ec048b60701e315",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Adds ccache support.\n\n# The user should export the appropriate environment variables to\n\n# tweak the program's behaviour, as described in its manpage.\n\n# Notice that some additional compiler flags might be needed in order\n\n# to avoid unnecessary warnings.\n\n#\n\n# Variables defined::\n\n#\n\n#   CCACHE_FOUND\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--ccache=<USE_CCACHE> Toggle use of ccache <ON/OFF> [default: ON].\"\n\n#   define: \"'-DUSE_CCACHE={0}'.format(arguments['--ccache'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_custom_color_messages.cmake" : {
      "ObjectId" : "fda4de537bce8c08bc6f7396b9a655d3fa0c62d6",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Colorize CMake output.\n\n# Code was found on StackOverflow: http://stackoverflow.com/a/19578320\n\n#\n\n# Usage within CMake code:\n\n#   message(\"This is normal\")\n\n#   message(\"${Red}This is Red${ColourReset}\")\n\n#   message(\"${Green}This is Green${ColourReset}\")\n\n#   message(\"${Yellow}This is Yellow${ColourReset}\")\n\n#   message(\"${Blue}This is Blue${ColourReset}\")\n\n#   message(\"${Magenta}This is Magenta${ColourReset}\")\n\n#   message(\"${Cyan}This is Cyan${ColourReset}\")\n\n#   message(\"${White}This is White${ColourReset}\")\n\n#   message(\"${BoldRed}This is BoldRed${ColourReset}\")\n\n#   message(\"${BoldGreen}This is BoldGreen${ColourReset}\")\n\n#   message(\"${BoldYellow}This is BoldYellow${ColourReset}\")\n\n#   message(\"${BoldBlue}This is BoldBlue${ColourReset}\")\n\n#   message(\"${BoldMagenta}This is BoldMagenta${ColourReset}\")\n\n#   message(\"${BoldCyan}This is BoldCyan${ColourReset}\")\n\n#   message(\"${BoldWhite}This is BoldWhite\\n\\n${ColourReset}\")\n\n#\n\n# Has no effect on WIN32.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_cxx.cmake" : {
      "ObjectId" : "7ddc93605979daee843b370c89915ae2d8e48a53",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Adds C++ support.\n\n# Appends EXTRA_CXXFLAGS to CMAKE_CXX_FLAGS.\n\n# If environment variable CXXFLAGS is set, then the CXXFLAGS are used\n\n# and no other flags are used or appended.\n\n#\n\n# Variables used::\n\n#\n\n#   EXTRA_CXXFLAGS\n\n#\n\n# Variables modified::\n\n#\n\n#   CMAKE_CXX_FLAGS\n\n#\n\n# Environment variables used::\n\n#\n\n#   CXXFLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt:\n\n#     - \"--cxx=<CXX> C++ compiler [default: g++].\"\n\n#     - \"--extra-cxx-flags=<EXTRA_CXXFLAGS> Extra C++ compiler flags [default: ''].\"\n\n#   define: \"'-DCMAKE_CXX_COMPILER={0} -DEXTRA_CXXFLAGS=\\\"{1}\\\"'.format(arguments['--cxx'], arguments['--extra-cxx-flags'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_definitions.cmake" : {
      "ObjectId" : "6f38e2bd58290dfbcc2bad3b63a54b78b461a99f",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Add preprocessor definitions (example: --add-definitions=\"-DTHIS -DTHAT=137\").\n\n# These are passed all the way down to the compiler.\n\n#\n\n# Variables used::\n\n#\n\n#   PREPROCESSOR_DEFINITIONS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--add-definitions=<STRING> Add preprocesor definitions [default: ''].\"\n\n#   define: \"'-DPREPROCESSOR_DEFINITIONS=\\\"{0}\\\"'.format(arguments['--add-definitions'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_fc.cmake" : {
      "ObjectId" : "68a78bf4544ece7f1dc002e58ce90f74f2048396",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Adds Fortran support.\n\n# Appends EXTRA_FCFLAGS to CMAKE_Fortran_FLAGS.\n\n# If environment variable FCFLAGS is set, then the FCFLAGS are used\n\n# and no other flags are used or appended.\n\n#\n\n# Variables used::\n\n#\n\n#   EXTRA_FCFLAGS\n\n#\n\n# Variables defined::\n\n#\n\n#   CMAKE_Fortran_MODULE_DIRECTORY\n\n#\n\n# Variables modified::\n\n#\n\n#   CMAKE_Fortran_FLAGS\n\n#\n\n# Environment variables used::\n\n#\n\n#   FCFLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt:\n\n#     - \"--fc=<FC> Fortran compiler [default: gfortran].\"\n\n#     - \"--extra-fc-flags=<EXTRA_FCFLAGS> Extra Fortran compiler flags [default: ''].\"\n\n#   define: \"'-DCMAKE_Fortran_COMPILER={0} -DEXTRA_FCFLAGS=\\\"{1}\\\"'.format(arguments['--fc'], arguments['--extra-fc-flags'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_git_info.cmake" : {
      "ObjectId" : "6fa3f96eddbb25e68f42fd60618abccbed64be64",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Creates git_info.h in the build directory.\n\n# This file can be included in sources to print\n\n# Git repository version and status information\n\n# to the program output.\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   url_root: https://github.com/coderefinery/autocmake/raw/master/\n\n#   fetch:\n\n#     - \"%(url_root)modules/git_info/git_info.h.in\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# _header_location: where the Git info header file should be generated\n\n# _header_name: the Git info header name, complete with extension (.h, .hpp, .hxx or whatever)\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/downloaded/autocmake_int64.cmake" : {
      "ObjectId" : "38b2aae78a056d0b41adbe3fa7a6677f5e05e196",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Enables 64-bit integer support for Fortran projects.\n\n#\n\n# Variables modified (provided the corresponding language is enabled)::\n\n#\n\n#   CMAKE_Fortran_FLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--int64 Enable 64bit integers [default: False].\"\n\n#   define: \"'-DENABLE_64BIT_INTEGERS={0}'.format(arguments['--int64'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_omp.cmake" : {
      "ObjectId" : "f63d8def8de4bb188e34f3afed9d2047c3858039",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Enables OpenMP support.\n\n#\n\n# Variables used::\n\n#\n\n#   ENABLE_OPENMP\n\n#   OPENMP_FOUND\n\n#\n\n# Variables modified (provided the corresponding language is enabled)::\n\n#\n\n#   CMAKE_Fortran_FLAGS\n\n#   CMAKE_C_FLAGS\n\n#   CMAKE_CXX_FLAGS\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--omp Enable OpenMP parallelization [default: False].\"\n\n#   define: \"'-DENABLE_OPENMP={0}'.format(arguments['--omp'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is only needed for CMake below 3.5\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# we do this in a pedestrian way because the Fortran support is relatively recent\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# do nothing in this case\n",
        "Line" : 67,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 5
    },
    "cmake/downloaded/autocmake_python_interpreter.cmake" : {
      "ObjectId" : "cab47819f4e1dfae8ce48679e4f5cdc04035cb04",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Detects Python interpreter.\n\n#\n\n# Variables used::\n\n#\n\n#   PYTHON_INTERPRETER         - User-set path to the Python interpreter\n\n#\n\n# Variables defined::\n\n#\n\n#   PYTHONINTERP_FOUND         - Was the Python executable found\n\n#   PYTHON_EXECUTABLE          - path to the Python interpreter\n\n#   PYTHON_VERSION_STRING      - Python version found e.g. 2.5.2\n\n#   PYTHON_VERSION_MAJOR       - Python major version found e.g. 2\n\n#   PYTHON_VERSION_MINOR       - Python minor version found e.g. 5\n\n#   PYTHON_VERSION_PATCH       - Python patch version found e.g. 2\n\n#\n\n# autocmake.yml configuration::\n\n#\n\n#   docopt: \"--python=<PYTHON_INTERPRETER> The Python interpreter (development version) to use. [default: ''].\"\n\n#   define: \"'-DPYTHON_INTERPRETER=\\\"{0}\\\"'.format(arguments['--python'])\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_safeguards.cmake" : {
      "ObjectId" : "1aca84295b0489bf1efa32343f1838b74422ebe4",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Provides safeguards against in-source builds and bad build types.\n\n#\n\n# Variables used::\n\n#\n\n#   PROJECT_SOURCE_DIR\n\n#   PROJECT_BINARY_DIR\n\n#   CMAKE_BUILD_TYPE\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/autocmake_src.cmake" : {
      "ObjectId" : "7ff22da0b31fb6401f3f61e28feca0f4d2d2c3fa",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n#\n\n# Adds ${PROJECT_SOURCE_DIR}/src as subdirectory containing CMakeLists.txt.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/boost_build.cmake" : {
      "ObjectId" : "c4b4c7e21cb8348118bc79c108825be005351157",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build Boost\n\n# This is not Windows-friendly!\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/boost_cleanup.cmake" : {
      "ObjectId" : "bbe878f5d6df9678c1f482c2eb9cd7737063444e",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clean-up\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/boost_configure.cmake" : {
      "ObjectId" : "fdbe01ae4316c4571ea8655e515d7d9d37bde554",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run bootstrap.sh to configure the build. We will install in ${PROJECT_BINARY_DIR}/boost\n\n# This is not Windows-friendly!\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/boost_headers.cmake" : {
      "ObjectId" : "a8fad94728cc8a871706f680ba3ba1d5a711e88c",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install Boost\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/boost_install.cmake" : {
      "ObjectId" : "cfbb91c8824e418de39e2f93b486eb9b4e7fa526",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install Boost\n\n# This is not Windows-friendly!\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/boost_unpack.cmake" : {
      "ObjectId" : "4bd3169370754f92eda677823a002080ad991117",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unpack Boost\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/downloaded/boost_userconfig.cmake" : {
      "ObjectId" : "12ca4ff6f08dea138d18b5a0dad9a4801fdbbb58",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (c) https://github.com/coderefinery/autocmake/blob/master/AUTHORS.md\n\n# licensed under BSD-3: https://github.com/coderefinery/autocmake/blob/master/LICENSE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To get boost to compile MPI we need to append \"using mpi ;\" to the end of the\n\n# user-config.jam file. MPI_SENT will be the command we append\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Write user-config.jam\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/eigen3/share/eigen3/cmake/Eigen3Config.cmake" : {
      "ObjectId" : "400188ee1f5719442255e6d6463c1cf8ecbb0cbd",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file exports the Eigen3::Eigen CMake target which should be passed to the\n\n# target_link_libraries command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "####### Expanded from @PACKAGE_INIT@ by configure_package_config_file() #######\n\n####### Any changes to this file will be overwritten by the next CMake run ####\n\n####### The input file was Eigen3Config.cmake.in                            ########\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "####################################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Legacy variables, do *not* use. May be removed in the future.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "external/eigen3/share/eigen3/cmake/Eigen3ConfigVersion.cmake" : {
      "ObjectId" : "efcea3bf39ee9b4ab0be8768b5fe771d842b7350",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a basic version file for the Config-mode of find_package().\n\n# It is used by write_basic_package_version_file() as input file for configure_file()\n\n# to create a version-file which can be installed along a config.cmake file.\n\n#\n\n# The created file sets PACKAGE_VERSION_EXACT if the current version string and\n\n# the requested version string are exactly the same and it sets\n\n# PACKAGE_VERSION_COMPATIBLE if the current version is >= requested version,\n\n# but only if the requested major version is the same as the current one.\n\n# The variable CVF_VERSION must be set before calling configure_file().\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check that the installed version has the same 32/64bit-ness as the one which is currently searching:\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/eigen3/share/eigen3/cmake/Eigen3Targets.cmake" : {
      "ObjectId" : "13e3faab5e79a919963d396ed7f3ce2ad136c8d6",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generated by CMake 3.2.2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file.\n\n#----------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Protect against multiple inclusion, which would fail when already imported targets are added once more.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compute the installation prefix relative to this file.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create imported target Eigen3::Eigen\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Load information for each installed configuration.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Cleanup temporary variables.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Loop over all imported files and verify that they actually exist\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This file does not depend on other imported targets which have\n\n# been exported from the same project but in a separate export set.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "external/eigen3/share/eigen3/cmake/UseEigen3.cmake" : {
      "ObjectId" : "a38bac82d5df40d5cbc086bcdcdcfbece8499919",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#                                               -*- cmake -*-\n\n#\n\n#  UseEigen3.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/libtaylor/CMakeLists.txt" : {
      "ObjectId" : "1fc39d01300f350d239fb51331bbd49c2ebde0b5",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "aa4ae1522bf33a5042204f9d997f694680515d2e",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure the header with library-wide preprocessor definitions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "0c18230d1dfad62538fd00c00f0ca91ca4f128f7",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This directory contains source file for executables\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# <<<  Export Config  >>>\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/bi_operators/CMakeLists.txt" : {
      "ObjectId" : "22366635aa402e64a9b63135c1f53e4a2750a1e8",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of headers\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/bin/CMakeLists.txt" : {
      "ObjectId" : "458b360779eb1bd73716ea7dfc1e937ab442f192",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Executables for testing separately from the unit test framework or for profiling purposes\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_executable(debug_wavcav debug_wavcav.cpp)\n\n#target_link_libraries(debug_wavcav solver cavity wavcav pwl wem utils)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cavity/CMakeLists.txt" : {
      "ObjectId" : "059a0c54ee8d4f8589319a6d973d7a5ae7c499dd",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of headers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/green/CMakeLists.txt" : {
      "ObjectId" : "7ad19d5a405bd3fbc43dca5ae2a1aa383f9fd55c",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of headers\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/green/dielectric_profile/CMakeLists.txt" : {
      "ObjectId" : "7f21fbbfb4a3760d10b1eb1f78eff89e57efa0ca",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/interface/CMakeLists.txt" : {
      "ObjectId" : "3a2f14a374cab9b9c56ef0ba52defa8baf45198c",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of headers\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/metal/CMakeLists.txt" : {
      "ObjectId" : "d7ec8ed6e02a7175b222255f1ce0388d3b494a71",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/pedra/CMakeLists.txt" : {
      "ObjectId" : "bd5acb40caa590a798d021380d1092a99cbadd4b",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/solver/CMakeLists.txt" : {
      "ObjectId" : "ba9d42068d60bab64dff045049d93da68a3420dc",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of headers\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/utils/CMakeLists.txt" : {
      "ObjectId" : "fb35e531455a3efc06f8d4022b2fe672abf5f624",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of headers\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/utils/getkw/CMakeLists.txt" : {
      "ObjectId" : "edfaf4e5286ba3f6bd3395adba873f1652dcf7a5",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of headers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets install directory for all the headers in the list\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "fe8da44bc33b6d5b4ae5da720eaeff2edcfb9156",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prepare \"Catch\" library for other executables\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/C_host/CMakeLists.txt" : {
      "ObjectId" : "d51758e6a48cefeb69a259e2d691e8e703b7d478",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/Fortran_host/CMakeLists.txt" : {
      "ObjectId" : "4b776747fb0e6cd1e0fe79820ca481d1fbd5a463",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/benchmark/CMakeLists.txt" : {
      "ObjectId" : "a9348a94642e6dbe06cf9a0fa4077dc3425a6d8d",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/bi_operators/CMakeLists.txt" : {
      "ObjectId" : "49af168db1d25f0c06a9fdb1c7363260b0aaebb4",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# bi_operators_purisima.cpp test\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bi_operators_collocation.cpp test\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This executable updates the .npy files containing the reference values\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/cpcm/CMakeLists.txt" : {
      "ObjectId" : "526bfc77a6968178cd478473cb59af87b51f4274",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cpcm_gepol-NH3_from-file.cpp test\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cpcm_gepol-H2O.cpp test\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# cpcm_gepol-point_from-file.cpp test\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cpcm_symmetry.cpp test\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# cpcm_gepol-NH3.cpp test\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# cpcm_gepol-point.cpp test\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cpcm_gepol-C2H4_D2h.cpp test\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/dielectric_profile/CMakeLists.txt" : {
      "ObjectId" : "42b827c777622580a8124d04dc24615d94588787",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# one_layer.cpp test\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/gepol/CMakeLists.txt" : {
      "ObjectId" : "4751574ffd6bc85d1beebd075f34a01effcba7be",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gepol_point_symmetry.cpp test\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gepol_point_from-file.cpp test\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gepol_CH3+_Cs.cpp test\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# gepol_H3+_from-file.cpp test\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# gepol_C2H4_D2h.cpp test\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# gepol_H3+_C2v.cpp test\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# gepol_C6H6.cpp test\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# gepol_CO2_symmetry.cpp test\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# gepol_NH3.cpp test\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# gepol_point.cpp test\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# gepol_H3+.cpp test\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# gepol_NH3_from-file.cpp test\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/green/CMakeLists.txt" : {
      "ObjectId" : "326129aa198aa61f0bdf5ee49bdd0f363cd83d42",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# green_spherical_diffuse.cpp test\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# green_vacuum.cpp test\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# green_ionic_liquid.cpp test\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# green_uniform_dielectric.cpp test\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# green_anisotropic_liquid.cpp test\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# green_sharp_diffuse.cpp test\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/iefpcm/CMakeLists.txt" : {
      "ObjectId" : "c189be47f32c4808fdbeab8bb6c5ea219e85374c",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# iefpcm_gepol-NH3.cpp test\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# iefpcm_anisotropic-symmetry.cpp test\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# iefpcm_tanh-spherical-diffuse-gepol-point.cpp test\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# iefpcm_erf-spherical-diffuse-gepol-point.cpp test\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# iefpcm_log-spherical-diffuse-gepol-point.cpp test\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# iefpcm_sharp-gepol-point.cpp test\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# iefpcm_gepol-point.cpp test\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# iefpcm_symmetry.cpp test\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# iefpcm_gepol-C2H4_D2h.cpp test\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# iefpcm_gepol-NH3_from-file.cpp test\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# iefpcm_anisotropic-gepol-point.cpp test\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# iefpcm_gepol-point_from-file.cpp test\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/input/CMakeLists.txt" : {
      "ObjectId" : "73989d153247549289a10444dbc661fe71b1bc85",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/numerical_quadrature/CMakeLists.txt" : {
      "ObjectId" : "61284752818d5daa7900fff6fd62516261f6aef5",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# numerical_quadrature.cpp test\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/standalone/CMakeLists.txt" : {
      "ObjectId" : "1dfc7809501348aa550977f237c7e3bf4997f2fb",
      "LastModified" : "2018-12-04T21:26:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy input files to ${PROJECT_BINARY_DIR}/tests/standalone (aka ${CMAKE_CURRENT_BINARY_DIR})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Demonstrates catching non-SPD S matrix failure\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Demonstrates failure caught by Gauss' theorem test\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/utils/CMakeLists.txt" : {
      "ObjectId" : "3837b75619f7b07113834b31553067a11bb5dc1d",
      "LastModified" : "2018-04-25T20:36:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# utils_newton-potential.cpp test\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# utils_dipolar-potential.cpp test\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "b3f3d8be6a5c489f90b50da9c8dc0f21d98c1323",
      "LastModified" : "2018-04-27T13:47:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install docopt.py provided by Autocmake\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 77,
    "CMAKESOURCE" : 6
  },
  "ElapsedTime" : 2541
}