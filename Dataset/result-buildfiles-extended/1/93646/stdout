{
  "Repository" : "93646",
  "Revision" : "HEAD",
  "ObjectId" : "8acd73a5e0408326e2a3c1ed1c2c70ffe2b954d0",
  "CommitTime" : "2018-10-19T16:12:20Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "77597ba96ea7cf85fb398af66ef2bbe5c5954705",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################\n\n#\n\n#     basic initializations\n\n#\n\n##################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# read the current version from config_version.hxx\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# As of cmake 2.8.10, there is a variable CMAKE_CXX_COMPILER_VERSION.\n\n# Emulate it by a compiler call if not present.\n",
        "Line" : 55,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# gcc 4.4.x syntax is -ftemplate-depth-900 (not =900)\n",
        "Line" : 70,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# new syntax is =900, not -900\n",
        "Line" : 74,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# clang uses newer gcc syntax\n",
        "Line" : 79,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "##################################################\n\n#\n\n#     search for dependencies\n\n#\n\n##################################################\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# prefer DLL on Windows\n",
        "Line" : 102,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "##################################################\n\n#\n\n#     configure boost dependency\n\n#\n\n##################################################\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Do not add \"python\" to WITH_BOOST_COMPONENTS. It is more\n\n# reliabe to use 'FIND_LIBRARY' in FindVIGRANUMPY_DEPENDENCIES.\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# FIXME: the following may be unstable between cmake versions\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Must be included AFTER boost is found.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Should come after VigraDetectThreading, since that updates the -std flag.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# configure boost's autolink magic to use the right library name\n\n# (default on Windows is a mangled name like 'boost_system-vc110-mt-1_51.lib')\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "########################################\n\n#  finalize compiler flags\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##################################################\n\n#\n\n#     setup testing environment\n\n#\n\n##################################################\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##################################################\n\n#\n\n#     setup documentation generator\n\n#\n\n##################################################\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Automatically push the latest documentation to github's gh-pages.\n\n# This only works when ${DOCDIR} refers to a VIGRA repository that is\n\n# checked out in branch 'gh-pages', and the present repository is\n\n# in branch 'master' (these conditions are checked in the script).\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##################################################\n\n#\n\n#     setup private experimentation target\n\n#\n\n##################################################\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##################################################\n\n#\n\n#     subdirectories\n\n#\n\n##################################################\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##################################################\n\n#\n\n#     global installation commands\n\n#\n\n##################################################\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "##################################################\n\n#\n\n#     enable CPack package generation\n\n#\n\n##################################################\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "##################################################\n\n#\n\n#     add target vigra-$version-src.tar.gz\n\n#\n\n##################################################\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##################################################\n\n#\n\n#  enable other non-CMake projects to find Vigra\n\n#\n\n##################################################\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# vigra-config script for (non-CMake-based) third party packages\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##################################################\n\n#\n\n#     enable other CMake projects to find Vigra\n\n#\n\n##################################################\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# config file for CMake FIND_PACKAGE command (for using the build tree)\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# config file for CMake FIND_PACKAGE command\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# export targets:\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "##################################################\n\n#\n\n#     status output\n\n#\n\n##################################################\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "config/CPackConfig.cmake" : {
      "ObjectId" : "e96c234a57078c48b7afa3d7c85fead50fb357cd",
      "LastModified" : "2013-09-05T17:07:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# general information\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# package version setup\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "config/FindFFTW3.cmake" : {
      "ObjectId" : "2dd64b72073e64668f0b42ad7ca1af86a000e1d9",
      "LastModified" : "2009-10-20T17:01:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FFTW3\n\n# Find the native FFTW3 includes and library\n\n# This module defines\n\n#  FFTW3_INCLUDE_DIR, where to find FFTW3lib.h, etc.\n\n#  FFTW3_LIBRARIES, the libraries needed to use FFTW3.\n\n#  JFFTW3_FOUND, If false, do not try to use FFTW3.\n\n# also defined, but not for general use are\n\n#  FFTW3_LIBRARY, where to find the FFTW3 library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FFTW3_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Deprecated declarations.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "config/FindFFTW3F.cmake" : {
      "ObjectId" : "040d71dfbff53f8895f64ac35b330485be0daed1",
      "LastModified" : "2013-09-05T17:07:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FFTW3F\n\n# Find the single-precision FFTW3 includes and library\n\n# This module defines\n\n#  FFTW3F_INCLUDE_DIR, where to find fftw3.h, etc.\n\n#  FFTW3F_LIBRARIES, the libraries needed to use single-precision FFTW3.\n\n#  JFFTW3_FOUND, If false, do not try to use FFTW3.\n\n# also defined, but not for general use are\n\n#  FFTW3F_LIBRARY, where to find the single-precision FFTW3 library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FFTW3F_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Deprecated declarations.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "config/FindHDF5.cmake" : {
      "ObjectId" : "d69766e4b16b0b6c969edc6499d878a45c7f7a7d",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find HDF5, a library for reading and writing self describing array data.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only configure HDF5 if a suitable version of the library was found\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# FIXME: as of version 1.8.9 and 1.8.10-patch1 (but NOT 1.8.10), these flags are\n\n#        already set correctly => remove or set conditionally according to version\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set HDF5_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# undo unsuccessful configuration\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "config/FindOpenEXR.cmake" : {
      "ObjectId" : "ef36cdbf1e39d1131d58d58828c18d7c758ab816",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011, Lukas Jirkovsky\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#     * Redistributions of source code must retain the above copyright\n\n#       notice, this list of conditions and the following disclaimer.\n\n#     * Redistributions in binary form must reproduce the above copyright\n\n#       notice, this list of conditions and the following disclaimer in the\n\n#       documentation and/or other materials provided with the distribution.\n\n#     * Neither the name of the <organization> nor the\n\n#       names of its contributors may be used to endorse or promote products\n\n#       derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "config/FindVIGRANUMPY_DEPENDENCIES.cmake" : {
      "ObjectId" : "f64a52d7205b711a4c35c0719facaa80606229e9",
      "LastModified" : "2018-10-16T19:10:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find VIGRANUMPY_DEPENDENCIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note:\n\n#  'FIND_PACKAGE(PythonLibs)' is unreliable because results are often inconsistent\n\n#  with the Python interpreter found previously (e.g. libraries or includes\n\n#  from incompatible installations). Thus, we ask Python itself for the information.\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "######################################################################\n\n#\n\n#      find Python prefix\n\n#\n\n######################################################################\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "######################################################################\n\n#\n\n#      find Python includes\n\n#\n\n######################################################################\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "######################################################################\n\n#\n\n#      find Python library\n\n#\n\n######################################################################\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "######################################################################\n\n#\n\n#      find boost::python library\n\n#\n\n######################################################################\n\n# 'FIND_PACKAGE(Boost COMPONENTS python)' is unreliable because it often selects\n\n# boost_python for the wrong Python version\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# define names for thread-safe library variants\n",
        "Line" : 95,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Windows with mangled library names\n",
        "Line" : 104,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "# define names for boost_python library variants\n\n# (may or may not be thread-safe)\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Linux with multiple Python versions\n",
        "Line" : 112,
        "CharPositionInLine" : 16
      },
      "10" : {
        "Text" : "# Gentoo\n",
        "Line" : 114,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : "# Mac with Python 3\n",
        "Line" : 116,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# conda-forge\n",
        "Line" : 118,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# default\n",
        "Line" : 120,
        "CharPositionInLine" : 16
      },
      "14" : {
        "Text" : "######################################################################\n\n#\n\n#      find default install directory for Python modules\n\n#      (usually PYTHONDIR/Lib/site-packages)\n\n#\n\n######################################################################\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# this is the install path relative to CMAKE_INSTALL_PREFIX,\n\n# use this in INSTALL() commands to get packaging right\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "######################################################################\n\n#\n\n#      find numpy include directory\n\n#      (usually below PYTHONDIR/Lib/site-packages/numpy)\n\n#\n\n######################################################################\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Note: we must suppress possible output of the 'from numpy... import *' command,\n\n#       because the output cannot be interpreted correctly otherwise\n",
        "Line" : 161,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "######################################################################\n\n#\n\n#      check if nosetests are installed\n\n#\n\n######################################################################\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "######################################################################\n\n#\n\n#      check if sphinx documentation generator is installed\n\n#\n\n######################################################################\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "######################################################################\n\n#\n\n#      find Python platform\n\n#\n\n######################################################################\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "######################################################################\n\n#\n\n#      set outputs\n\n#\n\n######################################################################\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#note that the numpy include dir is set _before_ the python include dir, such that\n\n#installing a more recent version of numpy on top of an existing python installation\n\n#works (otherwise, numpy includes are picked up from ${PYTHON_INCLUDE_PATH}/numpy )\n",
        "Line" : 231,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 23
    },
    "config/VIGRA_ADD_NUMPY_MODULE.cmake" : {
      "ObjectId" : "50b238317ba0244f550d3f07b64457ffce845d11",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###################################################################\n\n#\n\n# VIGRA_ADD_NUMPY_MODULE: setup a module dependening on vigranumpy\n\n#\n\n# VIGRA_ADD_NUMPY_MODULE(modulename [SOURCES] source1.cpp, source2.cpp ...\n\n#                                   [LIBRARIES dependency1 dependency2 ...]\n\n#                                   [VIGANUMPY])\n\n#\n\n#        'modulename' is the module name to be used within Python (e.g. 'import modulename').\n\n#        Unless 'VIGRANUMPY' is specified (see below), it is also the cmake target name.\n\n#\n\n#        SOURCE are the C++ sources of the module, LIBRARIES the necessary libraries.\n\n#        Dependency syntax must conform to the requirements of the cmake command\n\n#        TARGET_LINK_LIBRARIES. Modules are automatically linked against vigranumpycore\n\n#        and its dependencies (libpython, boost_python), so it is not necessary to state\n\n#        this dependency explicitly.\n\n#\n\n#        If VIGRANUMPY is given, the module is considered part of 'vigranumpy' and will\n\n#        be compiled and installed along with the other vigranumpy modules (otherwise,\n\n#        no installation target will be defined). The cmake target name becomes\n\n#        'vigranumpy_modulename' in order to get useful alphabetic sorting of\n\n#        targets in project files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# parse the args\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Store dependencies as a custom target property, so that we can\n\n# later query them.\n\n# TODO: Does cmake provide a standard way to query the dependencies?\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# create a temporary vigranumpy installation in ${vigranumpy_tmp_dir}\n\n# (required for testing and documentation generation)\n",
        "Line" : 96,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "config/VigraAddTest.cmake" : {
      "ObjectId" : "1899471560fbde40e9d6069a282574751ff4ca95",
      "LastModified" : "2018-10-17T19:05:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enhanced version of ADD_TEST\n\n#\n\n# Usage of this module:\n\n#\n\n#     VIGRA_ADD_TEST(target [[SOURCES] source1 source2 ...] [LIBRARIES lib1 lib2 ...])\n\n#     VIGRA_COPY_TEST_DATA(datafile1 datafile2 ...)\n\n#\n\n# The function VIGRA_ADD_TEST\n\n# * creates a new executable for 'target', using the given sources and libraries\n\n# * makes the global target 'test' depend on the new 'target' (target 'test' must already exist)\n\n# * installs a post-build event that runs the test automatically after linking\n\n#\n\n# The function VIGRA_COPY_TEST_DATA copies the given files from the current source directory\n\n# to the corresponding binary directory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# turn \"c:/\" into \"/c/\"\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# parse the args\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# configure the target\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# add dependencies to the PATH\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# set up a script to run the test\n\n# two-stage file configuration is necessary because certain target\n\n# properties are only known at generation time (policy CMP0026)\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# register the test execution command\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# if we configure for Visual Studio, setup the debug command\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# FIXME: this may not portable between VC versions (works for 11.0 - 14.0)\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "config/VigraCMakeUtils.cmake" : {
      "ObjectId" : "fd88a38c80234ef854ae92e205d49558043499c7",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - find the path of a module's compilation output (usually a DLL)\n\n#\n\n#  DEPENDENCY_PATH(TARGET_VAR dependency)\n\n#\n\n# e.g. DEPENDENCY_PATH(VIGRAIMPEX_PATH vigraimpex)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get path prefix\n",
        "Line" : 9,
        "CharPositionInLine" : 92
      },
      "CommentCount" : 2
    },
    "config/VigraConfigureThreading.cmake" : {
      "ObjectId" : "ba807f95402b4f2f570dc2001d7330dcfca46a56",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Great, we can use the std library.  Nothing to do here...\n",
        "Line" : 14,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "config/VigraDetectCppVersion.cmake" : {
      "ObjectId" : "a75632b121e9a7cdec1840db41c7c399a5860b20",
      "LastModified" : "2016-03-16T16:38:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "config/VigraDetectThreading.cmake" : {
      "ObjectId" : "d1e3b50342d5754adf40374d488b67867d4e8626",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This file determines which threading implementation, if any should be used for compiling vigra source files.\n\n# Source modules should use VIGRA_CONFIGURE_THREADING() from VigraConfigureThreading.cmake to set includes/preprocessor definitions.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# See boost library list, below.\n",
        "Line" : 15,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Save original flags before we add new ones, in case there's no need for the new ones.\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add the threading flags if they are not already there\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Revert to old CXX_FLAGS\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "config/VigraFindPackage.cmake" : {
      "ObjectId" : "f883b74c77eb4abeef5c3e4067807c8ea4b40343",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - improved version of the reduced FIND_PACKAGE syntax\n\n#\n\n#  VIGRA_FIND_PACKAGE(package [VERSION_SPEC] [COMPONENTS component1 ... ] [NAMES name1 ...])\n\n#\n\n# FIND_PACKAGE is dangerous when custom search prefixes are added, because these \n\n# prefixes are tried for includes and libraries independently. Thus, it may happen\n\n# that a library is found under one prefix, whereas the corresponding include is \n\n# found under another. Subsequent crashes of the compiled programs are likely. \n\n#\n\n# VIGRA_FIND_PACKAGE improves upon this by trying custom prefixes one at a time,\n\n# so that either both includes and libraries are found under the same prefix,\n\n# or the search is marked as unsuccessful for this prefix.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# parse the args\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# boost's default include path\n",
        "Line" : 48,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : "# standard include path\n",
        "Line" : 50,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# boost's default library path\n",
        "Line" : 53,
        "CharPositionInLine" : 60
      },
      "5" : {
        "Text" : "# standard library path\n",
        "Line" : 55,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : "# SET(${package}_INCLUDE_DIR ${package}_INCLUDE_DIR-NOTFOUND)\n\n# SET(${package}_LIBRARIES ${package}_LIBRARIES-NOTFOUND)\n\n# SET(${package}_LIBRARY ${package}_LIBRARY-NOTFOUND)\n",
        "Line" : 61,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# search the package in the default locations if not found \n\n# in the DEPENDENCY_SEARCH_PREFIX \n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "config/VigraSetDefaults.cmake" : {
      "ObjectId" : "239a02dcc3479c96c7a1273559e8b77d21e209e3",
      "LastModified" : "2016-03-16T16:38:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set default values for various cmake configuration variables\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Output of doxygen and sphinx-build will be written\n\n# to ${DOCDIR}.\n\n# Vigra html files generated by doxygen will be stored\n\n# in ${DOCDIR}/vigra.\n\n# Vigranumpy sphinx output will be stored in\n\n# ${DOCDIR}/vigranumpy.\n\n# This should keep relative links between\n\n# vigranumpy and vigra working.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# running make install, the content of ${DOCDIR}\n\n# is copied/installed at ${DOCINSTALL}.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is only executed once on the first cmake run.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# initial compiler flags can be set here, this is only\n\n# executed once in the first configure run.\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "docsrc/CMakeLists.txt" : {
      "ObjectId" : "41c7fded4e8d657a654009c81a45acdca5448fe2",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create fallback index.html that simply refers to the online documentation\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "c6b54dd61d504db16f07782a1f8d41dab42c70d9",
      "LastModified" : "2016-03-08T09:50:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/examples/CMakeLists.txt" : {
      "ObjectId" : "6b4ae4c95d086bf2498c20127ff5a3604e1527fa",
      "LastModified" : "2016-03-16T16:38:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/examples/tutorial/CMakeLists.txt" : {
      "ObjectId" : "1d2de1bc68a48129c1759b46acd007c02ff89072",
      "LastModified" : "2016-03-16T16:38:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SET(TARGETS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# composite\n\n# dissolve\n\n# graph_agglomerative_clustering\n\n# imageExportInfo_tutorial\n\n# imageIO_tutorial\n\n# imageImportInfo_tutorial\n\n# invert_tutorial\n\n# mirror_tutorial\n\n# smooth_blockwise\n\n# smooth_convolve\n\n# smooth_explicitly\n\n# subimage_tutorial\n\n# transpose\n\n# transpose_image_tutorial)\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/impex/CMakeLists.txt" : {
      "ObjectId" : "04dc4d7c916b3355b035a190603c506d92ed9c01",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# increment this after changing the vigraimpex library\n",
        "Line" : 67,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "511c79546efa57cc4c54a6371a4160d6dcd05fd5",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/adjacency_list_graph/CMakeLists.txt" : {
      "ObjectId" : "339cb1b1aee9564f1978261c7da92e128e62c9af",
      "LastModified" : "2016-03-16T16:38:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/binary_forest/CMakeLists.txt" : {
      "ObjectId" : "fa8016f2977f7f6c89849a4da6560c84182b5b54",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/blockwisealgorithms/CMakeLists.txt" : {
      "ObjectId" : "aef7a991863c59b755fcf218b34fb17b87413b60",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VIGRA_ADD_TEST(test_blockwiselabeling test_labeling.cxx LIBRARIES ${THREADING_LIBRARIES}) # FIXME\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "test/classifier/CMakeLists.txt" : {
      "ObjectId" : "62f2cfbf677e757a6f4677c0a08def179a4f5bc7",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/classifier/data/CMakeLists.txt" : {
      "ObjectId" : "beb16250cc8d56a2d6b701ff5e9ca0dbb789754f",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#       message(status \"Current Source: ${CMAKE_CURRENT_SOURCE_DIR}\") \n\n#       message(status \"Current Bin: ${CMAKE_CURRENT_BINARY_DIR}\") \n\n#       configure_file(${CMAKE_CURRENT_SOURCE_DIR}/oldClassifier.log \n\n#                      ${CMAKE_CURRENT_BINARY_DIR}/oldClassifier.log\n\n#                      COPYONLY)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/colorspaces/CMakeLists.txt" : {
      "ObjectId" : "5ce2632b3fe898d01075af79adb4a8ce9abfc7fd",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/convolution/CMakeLists.txt" : {
      "ObjectId" : "8adb8a4b291fcb93547f895e9f59415e2ba205d7",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/coordinateiterator/CMakeLists.txt" : {
      "ObjectId" : "3615793d4c0c056f4caaa5f2bb40c316ede0e927",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/correlation/CMakeLists.txt" : {
      "ObjectId" : "13c6196cd3cc3e1a9f8628995d943a3cf8a06276",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/counting_iterator/CMakeLists.txt" : {
      "ObjectId" : "44f4c5cc74771e79c580ff3ff65be2e5d327a3d4",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/delegates/CMakeLists.txt" : {
      "ObjectId" : "01b9f7be338e77ef24a7f6abc377382b1b95b70b",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/error/CMakeLists.txt" : {
      "ObjectId" : "10eb5941471e0919fe1dd2e4357f1791182724da",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/features/CMakeLists.txt" : {
      "ObjectId" : "4ecb7914aee0592937c65122c5c93ca89a033885",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VIGRA_COPY_TEST_DATA(ghouse.gif)\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "test/filter_iterator/CMakeLists.txt" : {
      "ObjectId" : "3e6b792a893500de37843ca535317a69e33645ed",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/filters/CMakeLists.txt" : {
      "ObjectId" : "83c99ee812af9331ba0ace0c65dde3bb163303e1",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/fourier/CMakeLists.txt" : {
      "ObjectId" : "8cc8e0f9e07f3e0696d51f775b4acb81c56abcb3",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/functorexpression/CMakeLists.txt" : {
      "ObjectId" : "55d4689dbb973a0e56acfcfb115c162a898c9bdb",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/graph_algorithm/CMakeLists.txt" : {
      "ObjectId" : "2297279a2e2ee1c11acecd687c20a1cd33fdc8ab",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/gridgraph/CMakeLists.txt" : {
      "ObjectId" : "e8e3c32d84e0b7405f658b79df97e45c82cf3697",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/hdf5impex/CMakeLists.txt" : {
      "ObjectId" : "6f2b6eb044e2ef221937ac157c2585d838448aef",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/image/CMakeLists.txt" : {
      "ObjectId" : "a1a6813b86fa2078de262ec637b8c6c8cf2c07b7",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/imgproc/CMakeLists.txt" : {
      "ObjectId" : "4d6759ad61dbba1181b1a7997455c069e40e2442",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/impex/CMakeLists.txt" : {
      "ObjectId" : "fca448ed5e420832a0269d6540684ef0b6291687",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/integral_image/CMakeLists.txt" : {
      "ObjectId" : "dc8eca58101c4b8a5c81450a718764d9a9dad0b7",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/math/CMakeLists.txt" : {
      "ObjectId" : "1b3a4ff6de8e7a60c3e81982216877a55d6b9fc2",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/merge_graph_adaptor/CMakeLists.txt" : {
      "ObjectId" : "bdfdba1075267df8f9f4e50aeffa99d173e0c41d",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/morphology/CMakeLists.txt" : {
      "ObjectId" : "43b587ac869e3e69a01ea8674bd56e89f1c506b7",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/multiarray/CMakeLists.txt" : {
      "ObjectId" : "0d0cd1cf8feba77ee99387eb2f0ddde1398a4000",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check cpp version\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# multiarray/test.cxx uses 'auto' from c++11.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Visual Studio 2010 and 2012 supports enough c++11 features that we can still use it\n",
        "Line" : 24,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : "# Even with C++11, a working threading implementation is needed for running multiarray_chunked tests.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/multiconvolution/CMakeLists.txt" : {
      "ObjectId" : "688156c64517e90f826b547fc73f6b8eb337262c",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/multidistance/CMakeLists.txt" : {
      "ObjectId" : "0d3aa5ca717ab7c668fa01ec7533da25c8af6d1e",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/multimorphology/CMakeLists.txt" : {
      "ObjectId" : "eccbe1fc672163718b68a9eddbb0cf021f5588f5",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/objectfeatures/CMakeLists.txt" : {
      "ObjectId" : "8a89b6e1657591a7ae85d05af9dc02564fbd3a36",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/optimization/CMakeLists.txt" : {
      "ObjectId" : "b80ed2b7820aa19b50141faf61510fa768d261f6",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/permutation/CMakeLists.txt" : {
      "ObjectId" : "9576adc36f84be51ab86673c3aa6f3acdbe13a85",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/pixeltypes/CMakeLists.txt" : {
      "ObjectId" : "32c2214a54f849199598aa2dbfb4c44d486e07bf",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/polygon/CMakeLists.txt" : {
      "ObjectId" : "b24ff3560e0c359ede214a91772344dc0483f936",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/polytope/CMakeLists.txt" : {
      "ObjectId" : "7d6636144dbae57e504c0b98b7305fb130876ee9",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/random_forest_3/CMakeLists.txt" : {
      "ObjectId" : "508c7251f7ad68915a9bb96816278b07e043fb3d",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/random_forest_3/data/CMakeLists.txt" : {
      "ObjectId" : "e357079f96130f29b7f91479d015252ddf997d2a",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/registration/CMakeLists.txt" : {
      "ObjectId" : "78bb202286e37289d582509fcdc00fa14d231ff6",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/sampler/CMakeLists.txt" : {
      "ObjectId" : "86ad3a23cc2f659a6be17e86abb3ff8f9425656b",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/seededRegionGrowing3d/CMakeLists.txt" : {
      "ObjectId" : "22667beadcc83c6ba5882193fd05f5ccfd22b829",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/sifImport/CMakeLists.txt" : {
      "ObjectId" : "68b49cc6c1bc67854c22244d17265ae594f24b4b",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/simpleanalysis/CMakeLists.txt" : {
      "ObjectId" : "d879df1c0614c046718cc98fe5181ca7fb110c6e",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/slic2d/CMakeLists.txt" : {
      "ObjectId" : "9725f93474bdb540167f4404893330dea746453f",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/tensorimaging/CMakeLists.txt" : {
      "ObjectId" : "0179c31ee3b0c44282e3068596db4c80258e06c3",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/threadpool/CMakeLists.txt" : {
      "ObjectId" : "33c5236bc3f6a1487b37295248cdb23495c57d1a",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/unsupervised/CMakeLists.txt" : {
      "ObjectId" : "65fdff13005869d0deba1ca3acbe874a19ac76ad",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the data from 'example_data.h5' are now in 'test_data.hxx', so HDF5 is\n\n# no longer needed for this test\n\n# if(HDF5_FOUND)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# INCLUDE_DIRECTORIES(${SUPPRESS_WARNINGS} ${HDF5_INCLUDE_DIR})\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ADD_DEFINITIONS(${HDF5_CPPFLAGS})\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# VIGRA_ADD_TEST(test_unsupervised test.cxx LIBRARIES vigraimpex ${HDF5_LIBRARIES})\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# VIGRA_COPY_TEST_DATA(example_data.h5)\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# else()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# MESSAGE(STATUS \"** WARNING: test_unsupervised will not be executed\")\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# endif()",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "test/utilities/CMakeLists.txt" : {
      "ObjectId" : "3ab06cf6251dd96d92cc2efe878b2d555eb9ee88",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/volumelabeling/CMakeLists.txt" : {
      "ObjectId" : "f4c7d71492fd2bfde8b4d349c3b9a8404188c5ed",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/voxelneighborhood/CMakeLists.txt" : {
      "ObjectId" : "29ff284f8b2b0defec6129110ab8b71dc2f1e654",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/watersheds3d/CMakeLists.txt" : {
      "ObjectId" : "da3b76abc1c21a5b0ce70443639eb2f134302b90",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vigranumpy/CMakeLists.txt" : {
      "ObjectId" : "6d0d83a8c969ce140c7bd18a982071e5a849cb23",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# two-stage file configuration is necessary because certain target\n\n# properties are only known at generation time (policy CMP0026)\n",
        "Line" : 47,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# If ${PATH} is not referring to a path, it is probably a keyword like\n\n# \"optimized\" or \"debug\" (e.g. on the Mac). We then pass it on unchanged.\n",
        "Line" : 76,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 2
    },
    "vigranumpy/docsrc/CMakeLists.txt" : {
      "ObjectId" : "d53d9af24374ef8a6f3927cc8ba7507a329786bd",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vigranumpy documentation generation using sphinx\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# two-stage file configuration is necessary because certain target\n\n# properties are only known at generation time (policy CMP0026)\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# VIGRA_CONFIGURATION is 'release' or 'debug' on Windows, nothing on Linux\n\n# variable CMAKE_CFG_INTDIR contains a dot '.' for a Windows nmake build, or\n\n#                           '$(OutDir)' for a VisualStudio build (OutDir will be\n\n#                           set by VS at build time)\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# just rerun sphinx (useful to debug the vigranumpy docu)\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# create vigranumpy documentation after updating C++ docu and vigranumpy modules\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# no vigranumpy documentation if sphinx not available\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "vigranumpy/lib/CMakeLists.txt" : {
      "ObjectId" : "109085c6ba30f3da15a970efe9d7837ac8da72ef",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vigranumpy/lib/pyqt/CMakeLists.txt" : {
      "ObjectId" : "a0a0a48c076cf873f3e66913e44eeb69b3fa0e65",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vigranumpy/src/CMakeLists.txt" : {
      "ObjectId" : "0be2f1edf23f07b5ff298141a7f2fda15383386e",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vigranumpy/src/core/CMakeLists.txt" : {
      "ObjectId" : "5016cc2a5ad9278d9ced822a119c10141a914ad1",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# note special treatment of target vigranumpy_core:\n\n# module name is automatically changed into vigranumpycore\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#eccentricity.cxx\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "vigranumpy/src/fourier/CMakeLists.txt" : {
      "ObjectId" : "e376e0f5baa3e74e1fd97fb08611844dcae1d754",
      "LastModified" : "2018-10-17T17:49:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vigranumpy/test/CMakeLists.txt" : {
      "ObjectId" : "ec809a417fc6ceb2ddbc8523a9edaf096a16ac58",
      "LastModified" : "2018-10-17T19:05:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# setup the file 'testsuccess.cxx' which will become out-of-date when the\n\n# last test failed or when the tests code changed, so that tests are re-executed\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find the vigranumpy modules that we want to test, and make\n\n# 'testsuccess.cxx' depend on them\n\n# TODO: Does cmake provide a standard way to find those dependencies?\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# setup the test target\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# setup the file 'set_path.py' to ensure that tests are run against the binaries\n\n# which are currently being built, not against (possibly outdated) installed modules\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# two-stage file configuration is necessary because certain target\n\n# properties are only known at generation time (policy CMP0026)\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# copy the individual test scripts\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Windows: Set the DLL path to the binaries currently being built\n\n#          (so that binaries which are already installed are ignored)\n\n#          This is not necessary on Linux, because the correct path\n\n#          is hard-coded into the module by means of 'rpath'\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Setup the test execution script\n\n# two-stage file configuration is necessary because certain target\n\n# properties are only known at generation time (policy CMP0026)\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# register the test execution command\n\n# VIGRA_CONFIGURATION is 'release' or 'debug' on Windows, nothing on Linux\n\n# variable CMAKE_CFG_INTDIR contains a dot '.' for a Windows nmake build, or\n\n#                           '$(OutDir)' for a VisualStudio build (OutDir will be\n\n#                           set by VS at build time)\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# if we configure for Visual Studio, setup the debug command\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# FIXME: this may not portable between VC versions (works for 11.0 - 14.0)\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    }
  },
  "FileTypes" : {
    "CMAKE" : 81
  },
  "ElapsedTime" : 4256
}