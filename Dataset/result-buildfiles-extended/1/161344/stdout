{
  "Repository" : "161344",
  "Revision" : "HEAD",
  "ObjectId" : "9e1b41ec76db60b7aa79026e80e85315302ae640",
  "CommitTime" : "2019-04-16T07:06:09Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "745ffe2e90c7814fe436da1dc1ce26fad677740c",
      "LastModified" : "2019-04-10T23:28:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "fd693b989fbe786d1f5684aa8eb63376d8602dcd",
      "LastModified" : "2018-08-24T00:11:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# GET_ABSOLUTE_SOURCES\n\n# Given a list of sources, return the corresponding absolute paths\n\n# 'varname': name of the var the list of absolute paths should be stored into\n\n# 'sources': list of source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# GET_RELATIVE_SOURCES\n\n# Given a list of sources, return the corresponding relative paths to\n\n# a directory.\n\n# 'varname': name of the var the list of absolute paths should be stored into\n\n# 'dir': path to the dir we want relative path from\n\n# 'sources': list of *absolute* path to the source files\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "############ pot update. ###########\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate pot file for c++ data.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# replace the chartype\n",
        "Line" : 79,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# replace the chartype\n",
        "Line" : 102,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Generate pot file for ui files.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# replace the chartype\n",
        "Line" : 124,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Merge both pot files\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The old function checked for differences in the time in the header see\n\n# what we need to do with it.\n",
        "Line" : 135,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Update / generate the po files for all languages\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "### Generate new po file.\n",
        "Line" : 159,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# For some reason CMake is rather happy to delete the po file in\n\n# some cases. Too avoid that problem only generate the init rule\n\n# if the po file doesn't exist. The case where a po file used to\n\n# exist and no longer exists should never occur\n",
        "Line" : 161,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# The pot-update depends on a dummy file which we promise to\n\n# make. We don't make this dummy file but the pot-update\n\n# still works.\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "### Update existing po file.\n",
        "Line" : 215,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# The pot-update depends on a dummy file which we promise to\n\n# make. We don't make this dummy file but the pot-update\n\n# still works.\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Add to target list\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# should depend on languages\n",
        "Line" : 240,
        "CharPositionInLine" : 44
      },
      "18" : {
        "Text" : "# The target to call\n",
        "Line" : 250,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "##### po update per language #####\n",
        "Line" : 256,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# The pot-update depends on a dummy file which we promise to\n\n# make. We don't make this dummy file but the pot-update\n\n# still works.\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# After the po file is updated it might look not entirely as\n\n# wanted, for example poedit reorders the file. Use msgattrib\n\n# to reformat the file, use a helper file to do so.\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Now merge with the pot file.\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pot-update depends on a dummy file which we promise to\n\n# make. We don't make this dummy file but the pot-update\n\n# still works.\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# After the po file is updated it might look not entirely as\n\n# wanted, for example poedit reorders the file. Use msgattrib\n\n# to reformat the file, use a helper file to do so.\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Now merge with the pot file.\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Only set the verbose flag for maintainers.\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# The target to call\n",
        "Line" : 382,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "#set_directory_properties(properties\n",
        "Line" : 388,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "#ADDITIONAL_MAKE_CLEAN_FILES ${dcpp_BINARY_DIR}/locale\n\n#${eiskaltdcpp-gtk_BINARY_DIR}/locale\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "#)\n",
        "Line" : 391,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 31
    },
    "cmake/FindASPELL.cmake" : {
      "ObjectId" : "303bf10a0dcba74624ac20a5bbc591d20ed38b93",
      "LastModified" : "2018-08-26T08:00:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ASPELL\n\n# Once done this will define\n\n#\n\n#  ASPELL_FOUND - system has ASPELL\n\n#  ASPELL_INCLUDE_DIR - the ASPELL include directory\n\n#  ASPELL_LIBRARIES - The libraries needed to use ASPELL\n\n#  ASPELL_DEFINITIONS - Compiler switches required for using ASPELL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ASPELL_FOUND to TRUE if \n\n# all listed variables are TRUE\n\n#INCLUDE(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindGTK3.cmake" : {
      "ObjectId" : "9017c0703c1bd37d424783ccb0251f53d42b23c8",
      "LastModified" : "2011-12-20T19:33:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - FindGTK3.cmake\n\n# This module can find the GTK3 widget libraries and several of its other\n\n# optional components like gtkmm, glade, and glademm.\n\n#\n\n# NOTE: If you intend to use version checking, CMake 2.6.2 or later is\n\n#       required.\n\n#\n\n# Specify one or more of the following components\n\n# as you call this find module. See example below.\n\n#\n\n#   gtk\n\n#   gtkmm\n\n#   glade\n\n#   glademm\n\n#\n\n# The following variables will be defined for your use\n\n#\n\n#   GTK3_FOUND - Were all of your specified components found?\n\n#   GTK3_INCLUDE_DIRS - All include directories\n\n#   GTK3_LIBRARIES - All libraries\n\n#\n\n#   GTK3_VERSION - The version of GTK3 found (x.y.z)\n\n#   GTK3_MAJOR_VERSION - The major version of GTK3\n\n#   GTK3_MINOR_VERSION - The minor version of GTK3\n\n#   GTK3_PATCH_VERSION - The patch version of GTK3\n\n#\n\n# Optional variables you can define prior to calling this module:\n\n#\n\n#   GTK3_DEBUG - Enables verbose debugging of the module\n\n#   GTK3_SKIP_MARK_AS_ADVANCED - Disable marking cache variables as advanced\n\n#   GTK3_ADDITIONAL_SUFFIXES - Allows defining additional directories to\n\n#                              search for include files\n\n#\n\n#=================\n\n# Example Usage:\n\n#\n\n#   Call find_package() once, here are some examples to pick from:\n\n#\n\n#   Require GTK 3.0 or later\n\n#       find_package(GTK3 3.0 REQUIRED gtk)\n\n#\n\n#   if(GTK3_FOUND)\n\n#      include_directories(${GTK3_INCLUDE_DIRS})\n\n#      add_executable(mygui mygui.cc)\n\n#      target_link_libraries(mygui ${GTK3_LIBRARIES})\n\n#   endif()\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2008-2009 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version 0.1 (5/13/2011)\n\n#   * First cut at a GTK3 version (Heavily derived from\n\n#     FindGTK2.cmake)\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================\n\n# _GTK3_GET_VERSION\n\n# Internal function to parse the version number in gtkversion.h\n\n#   _OUT_major = Major version number\n\n#   _OUT_minor = Minor version number\n\n#   _OUT_micro = Micro version number\n\n#   _gtkversion_hdr = Header file to parse\n\n#=============================================================\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================\n\n# _GTK3_FIND_INCLUDE_DIR\n\n# Internal function to find the GTK include directories\n\n#   _var = variable to set\n\n#   _hdr = header file to look for\n\n#=============================================================\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If these ever change, things will break.\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# for /usr/lib/gtk-2.0/include\n",
        "Line" : 140,
        "CharPositionInLine" : 45
      },
      "7" : {
        "Text" : "# fix for Ubuntu == 11.04 (Natty Narwhal)\n",
        "Line" : 152,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# end\n\n# fix for Ubuntu >= 11.10 (Oneiric Ocelot)\n",
        "Line" : 155,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# end\n",
        "Line" : 158,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "#=============================================================\n\n# _GTK3_FIND_LIBRARY\n\n# Internal function to find libraries packaged with GTK3\n\n#   _var = library variable to create\n\n#=============================================================\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Not GTK versions per se but the versions encoded into Windows\n\n# import libraries (GtkMM 2.14.1 has a gtkmm-vc80-2_4.lib for example)\n\n# Also the MSVC libraries use _ for . (this is handled below)\n\n# ********* SOMEONE WITH WINDOWS NEEDS TO CHECK THIS BIT FOR V3 *********\n\n# ********* the plain 3 is needed to get Debian Sid to find the libraries\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add vc80/vc90/vc100 midfixes\n",
        "Line" : 216,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# For some silly reason the MSVC libraries use _ instead of .\n\n# in the version fields\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# And for debug\n",
        "Line" : 258,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Copy list back to original names\n",
        "Line" : 265,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Set debug to release\n",
        "Line" : 315,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#=============================================================\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# main()\n\n#\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Assume they only want GTK\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#\n\n# If specified, enforce version number\n\n#\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# If we can't find the GTK include dir, we can't do version checking\n",
        "Line" : 365,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# If the version check fails, exit out of the module here\n",
        "Line" : 381,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "#\n\n# Find all components\n\n#\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ********* At least on Debian the gdk & gtk libraries\n\n# ********* don't have the -x11 suffix.\n",
        "Line" : 410,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "#\n\n# Solve for the GTK3 version if we haven't already\n\n#\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# Try to enforce components\n\n#\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This gets set to GTK3_FOUND\n",
        "Line" : 495,
        "CharPositionInLine" : 40
      },
      "28" : {
        "Text" : "#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Unset our variables.\n",
        "Line" : 551,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 30
    },
    "cmake/FindGettext.cmake" : {
      "ObjectId" : "ed74084e1213d647452f00bf0ed69c08da10d690",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Gettext run-time library and tools.\n\n# This module finds the GNU gettext run-time library (LGPL), include paths and\n\n# associated tools (GPL). This code sets the following variables:\n\n#  GETTEXT_INCLUDE_DIR         = path(s) to gettext's include files\n\n#  GETTEXT_LIBRARIES           = the libraries to link against to use gettext\n\n#  GETTEXT_INTL_LIBRARY        = path to gettext's intl library\n\n#  GETTEXT_RUNTIME_FOUND       = true if runtime libs were found (intl)\n\n#  GETTEXT_INFO_MSG            = information string about gettext\n\n#  GETTEXT_XGETTEXT_EXECUTABLE = xgettext tool\n\n#  GETTEXT_MSGINIT_EXECUTABLE  = msginit tool\n\n#  GETTEXT_MSGMERGE_EXECUTABLE = msgmerge tool\n\n#  GETTEXT_MSGCAT_EXECUTABLE   = msgcat tool\n\n#  GETTEXT_MSGCONV_EXECUTABLE  = msgconv tool\n\n#  GETTEXT_MSGFMT_EXECUTABLE   = msgfmt tool\n\n#  GETTEXT_TOOLS_FOUND         = true if all the tools were found\n\n#  GETTEXT_FOUND               = true if both runtime and tools were found\n\n# As a convenience, the following variables can be set before including\n\n# this module to make its life easier:\n\n#  GETTEXT_SEARCH_PATH         = list of path to search gettext components for\n\n# --------------------------------------------------------------------------\n\n# As a convenience, try to find everything as soon as we set any one of\n\n# the cache variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Find the runtime lib\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The gettext intl include dir (libintl.h)\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The gettext intl library\n\n# Some Unix system (like Linux) have gettext right into libc\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Even if we have a system one, let the user provide another one\n\n# eventually (i.e., more recent, or GNU).\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#if(GETTEXT_INTL_LIBRARY)\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#set (potential_lib_dirs \"/usr/lib\")\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# message(STATUS \"${GETTEXT_INTL_PATH}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#endif(GETTEXT_INTL_LIBRARY)\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The gettext asprintf library\n\n# Actually not useful as it does not seem to exist on Unix\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#   IF(WIN32)\n\n#     FIND_LIBRARY(GETTEXT_ASPRINTF_LIBRARY\n\n#       NAMES asprintf\n\n#       PATHS ${potential_lib_dirs}\n\n#       DOC \"Gettext asprintf library\")\n\n#     MARK_AS_ADVANCED(GETTEXT_ASPRINTF_LIBRARY)\n\n#     IF(NOT GETTEXT_ASPRINTF_LIBRARY)\n\n#       SET(GETTEXT_RUNTIME_FOUND 0)\n\n#     ELSE(NOT GETTEXT_ASPRINTF_LIBRARY)\n\n#       SET(GETTEXT_LIBRARIES ${GETTEXT_LIBRARIES} ${GETTEXT_ASPRINTF_LIBRARY})\n\n#     ENDIF(NOT GETTEXT_ASPRINTF_LIBRARY)\n\n#   ENDIF(WIN32)\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Find the tools\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Some convenient info about gettext, where to get it, etc.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# Found ?\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Try again with new potential dirs now that we may have found the runtime\n\n# or the tools\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/FindIDNA.cmake" : {
      "ObjectId" : "01efc56d06f87f532681804078dc457a53a12aeb",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GNU IDN library and headers\n\n# Once done, this will define\n\n#\n\n#  IDNA_FOUND - system has IDNA\n\n#  IDNA_INCLUDE_DIR - the IDNA include directories (<idna.h>)\n\n#  IDNA_LIBRARIES - link these to use IDNA (idna_to_ascii_8z)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include dir\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set IDNA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If we successfully found the idn library then add the library to the\n\n# IDNA_LIBRARIES cmake variable otherwise set IDNA_LIBRARIES to nothing.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lastly make it so that the IDNA_LIBRARIES and IDNA_INCLUDE_DIR variables\n\n# only show up under the advanced options in the gui cmake applications.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindIconv.cmake" : {
      "ObjectId" : "b48e3b3b75d7c730ecf0d63fd00b3af8216477c5",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindJsonCpp.cmake" : {
      "ObjectId" : "5ef6b66abe53ccb31a3cc46d88f110e80674ed07",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindLibCanberra.cmake" : {
      "ObjectId" : "c9524cb253ad9ef70eb7aee36454f130dfe2f0d9",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindLibGnome2.cmake" : {
      "ObjectId" : "338f2e923b25e1492e73b9da763b546b61ee0727",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libgnome2 \n\n# Find libgnome2 headers, libraries and the answer to all questions.\n\n#\n\n#  LIBGNOME2_FOUND               True if libgnome2 got found\n\n#  LIBGNOME2_INCLUDEDIR          Location of libgnome2 headers \n\n#  LIBGNOME2_LIBRARIES           List of libaries to use libgnome2\n\n#  LIBGNOME2_DEFINITIONS         Definitions to compile libgnome2 \n\n#\n\n# Copyright (c) 2007 Juha Tuomala <tuju@iki.fi>\n\n# Copyright (c) 2007 Daniel Gollub <gollub@b1-systems.de>\n\n# Copyright (c) 2007 Alban Browaeys <prahal@yahoo.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Take care about libgnome-2.0.pc settings\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for libgnome2 include dir and libraries w/o pkgconfig\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Handle dependencies\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Report results\n",
        "Line" : 92,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Hide advanced variables from CMake GUIs\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindLua.cmake" : {
      "ObjectId" : "eebdab711242bafd2c4e56e0b7ad45a01ed0499a",
      "LastModified" : "2018-08-26T08:00:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_FOUND, if false, do not try to link to Lua\n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 36,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 37,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#if (NOT LUA_VERSION_STRING)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#pkg_check_modules(Lua lua5.1)\n\n#set( LUA_INCLUDE_DIR \"${Lua_INCLUDEDIR}\" CACHE STRING \"\" FORCE)\n\n#set( LUA_VERSION_STRING \"${Lua_VERSION}\" CACHE STRING \"\" FORCE)\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#endif ()\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/FindMiniupnpc.cmake" : {
      "ObjectId" : "ad36c04354d9d8246faa84b0eb088ce8f73c4641",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPcre.cmake" : {
      "ObjectId" : "4c2d27524587ac16cf02934694d21a38ca02dbf6",
      "LastModified" : "2015-02-21T22:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the PCRE library and headers\n\n# Once done this will define\n\n#\n\n#  PCRE_INCLUDE_DIR - the PCRE include directory\n\n#  PCRE_LIBRARIES - link these to use PCRE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include dir\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindReadline.cmake" : {
      "ObjectId" : "26cc8655ce4275b7b15a0745b85af3c4d68ab44b",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find READLINE\n\n# Once done this will define\n\n#\n\n#  READLINE_FOUND - system has READLINE\n\n#  READLINE_INCLUDE_DIR - the READLINE include directory\n\n#  READLINE_LIBRARIES - Link these to use READLINE\n\n#  READLINE_NEED_PREFIX - this is set if the functions are prefixed with BZ2_\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindSqlite3.cmake" : {
      "ObjectId" : "76093f0c5056050d25df2ab92bedccf4c561034f",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - find Sqlite 3\n\n# SQLITE3_INCLUDE_DIR - Where to find Sqlite 3 header files (directory)\n\n# SQLITE3_LIBRARIES - Sqlite 3 libraries\n\n# SQLITE3_LIBRARY_RELEASE - Where the release library is\n\n# SQLITE3_LIBRARY_DEBUG - Where the debug library is\n\n# SQLITE3_FOUND - Set to TRUE if we found everything (library, includes and executable)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2010 Pau Garcia i Quiles, <pgquiles@elpauer.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/FindXattr.cmake" : {
      "ObjectId" : "1794e0d82aec1a48dd75efc1466ecd9e884f11c9",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libattr library and headers\n\n# Once done, this will define\n\n#\n\n#  XATTR_FOUND - system has libattr\n\n#  XATTR_INCLUDE_DIRS - the libattr include directories\n\n#  XATTR_LIBRARIES - link these to use libattr\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/KWWidgetsGettextExtract.cmake" : {
      "ObjectId" : "73be655dcb961838ed2d2cc4f14a90cdbce31f0b",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is a helper file for the gettext translation macros found in\n\n# KWWidgetsInternationalizationMacros.cmake.\n\n# If is used as a custom command in the KWWidgets_CREATE_POT_TARGETS macro.\n\n# This macro extracts translatable strings out of source files into a POT\n\n# file (template translation fiel). The problem is that even if no changes\n\n# occurred as far as the translation strings are concerned, xgettext will\n\n# always create a new file with a different POT-Creation-Date field. This\n\n# forces all the depending targets to be updated when they do not really have\n\n# to. Fix that by comparing the next POT file to the old one without taking\n\n# the POT-Creation-Date into account.\n\n#\n\n# 'pot_build_file' (string): the POT file the strings should be extracted to\n\n# 'pot_uptodate_file' (string): the dummy file which will be up to date\n\n# 'options' (string): options\n\n# 'keywords' (string): keywords\n\n# 'copyright_holder': copyright holder of the template file\n\n# 'msgid_bugs_address': report address for msgid bugs\n\n# 'files_from':\n\n# GETTEXT_XGETTEXT_EXECUTABLE (string): path to the 'xgettext' executable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extract the strings, store the result in a variable instead of a POT file\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Check if the new POT file would be different than the old one\n\n# without taking into account the POT-Creation-Date.\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Create the POT file if it is really needed\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Update the dummy file to say: this POT target is up to date as\n\n# far as its dependencies are concerned. This will prevent the POT\n\n# target to be triggered again and again because the sources are older\n\n# than the POT, but the POT does not really need to be changed, etc.\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/KWWidgetsGettextInitOrMerge.cmake" : {
      "ObjectId" : "afc47ecd74f396c0ce231a40a9a03355a41748a1",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is a helper file for the gettext translation macros found in\n\n# KWWidgetsInternationalizationMacros.cmake.\n\n# If is used as a custom command in the KWWidgets_CREATE_PO_TARGETS macro.\n\n# This macro refreshes a PO file when its dependency, the POT template file,\n\n# has changed. The problem is that if no PO file has ever been created yet,\n\n# the 'msginit' executable should be used to initialize the PO file from\n\n# the POT file. If it has been created already, the 'msgmerge' executable\n\n# should be used to merge the PO file with the current POT file.\n\n# Since ADD_CUSTOM_COMMAND does not support such logic, it will use\n\n# this file instead, and execute it using CMake with the relevant parameters.\n\n# Given the parameters, this file will either use 'msginit' or 'msgmerge'.\n\n#\n\n# 'po_file' (string): the original PO file in the source tree, if any\n\n# 'po_build_file' (string): the build PO file to initialize or merge\n\n# 'po_uptodate_file' (string): the dummy file which will be up to date\n\n# 'default_po_encoding' (string): default encoding to initialize PO file with\n\n# 'pot_build_file' (string): the POT file this PO file depends on\n\n# 'locale' (string): the locale this PO file represents (say, \"fr\")\n\n# GETTEXT_MSGINIT_EXECUTABLE (string): path to the 'msginit' executable\n\n# GETTEXT_MSGCONV_EXECUTABLE (string): path to the 'msgconv' executable\n\n# GETTEXT_MSGMERGE_EXECUTABLE (string): path to the 'msgmerge' executable\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Initialize PO file or copy from existing PO file\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Initialize PO file\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Change initialized PO file encoding\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Merge PO file with POT file\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#MESSAGE(\"Merging PO file ${po_build_file} with POT file ${pot_build_file}\")\n\n# --output-file and --update are mutually exclusive. If --update is\n\n# specified, the PO file will not be re-written if the result of\n\n# the merge produces no modification. This can be problematic if the POT\n\n# file is newer than the PO file, and a MO file is generated from the PO\n\n# file: this seems to force the MO to always be regenerated.\n\n# --output-file=${po_build_file}\n\n# UPDATE: apparently --update still touches the file...\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Merge the strings, store the result in a variable instead of a PO file\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Check if the new PO file would be different than the old one\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Create the PO file if it is really needed\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# msggrep.exe -T -e \"#-#-#\" would have done the trick but not in 0.13.1\n\n#   IF(NOT \"${GETTEXT_MSGCAT_EXECUTABLE}\" STREQUAL \"\" AND EXISTS \"${po_file}\")\n\n#     EXEC_PROGRAM(${GETTEXT_MSGCAT_EXECUTABLE}\n\n#       ARGS \"${po_build_file}\" \"${po_file}\"\n\n#       OUTPUT_VARIABLE msgcat_output)\n\n#     STRING(REGEX MATCH \"^\\\"#-#.*$\" matched \"${msgcat_output}\")\n\n#     MESSAGE(\"match: ${matched}\")\n\n# #    STRING(REGEX REPLACE \"^(Python )([0-9]\\\\.[0-9])(.*)$\" \"\\\\2\"\n\n#  #     major_minor \"${version}\")\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#   ENDIF(NOT \"${GETTEXT_MSGCAT_EXECUTABLE}\" STREQUAL \"\" AND EXISTS \"${po_file}\")\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Update the dummy file to say: this PO target is up to date as\n\n# far as its dependencies are concerned. This will prevent the PO\n\n# targets to be triggered again and again because the POT file is older\n\n# than the PO, but the PO does not really need to be changed, etc.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/KWWidgetsInternationalizationMacros.cmake" : {
      "ObjectId" : "ced107bc777bc6de2c83cef80fb3a59ad6739eee",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_CREATE_GETTEXT_TARGETS\n\n# This macro can be used to create all the custom commands (and optionally\n\n# targets) necessary to:\n\n# - create a translation template file (pot) out of a set of sources\n\n#   files where translatable strings were marked. This template file\n\n#   will be re-generated each time its sources dependencies are modified.\n\n#   This template file has to be stored out-of-source (say, in the build tree),\n\n#   it is then up to the user to commit it back to the source tree if needed.\n\n# - initialize translation files (po) for a set of locales, out of the\n\n#   translation template file (pot).\n\n# - merge translation files (po) for a set of locales, out of a new or\n\n#   re-generated translation template file (pot). Translations that were\n\n#   in the po files are kept and new strings to translate found in the\n\n#   pot file are copied to the po file for future translation.\n\n#   Translation files are merged automatically each time the template file\n\n#   is modified, either manually, or when it is re-generated from its sources\n\n#   dependencies.\n\n#   The translation files have to be stored out-of-source (say, in the build\n\n#   tree), it is then up to the user to commit them back to the source tree\n\n#   if needed.\n\n# - compile the translation files (po) for a set of locates into binary\n\n#   translation files (mo). Binary files are re-compiled each time the\n\n#   translation file are modified, either manually, or when they have been\n\n#   merge against a modified template file (as a result of manually editing\n\n#   it or modifying its sources dependencies).\n\n#   The binary files are generated from po files that are out-of-source\n\n#   (say, in the build tree). The po files in the source tree are only\n\n#   used to initialize the one in the build tree the first time they\n\n#   are needed.\n\n# - install the mo files.\n\n#\n\n# This macro accepts parameters as arg/value pairs or as a single arg if\n\n# the arg is described as boolean (same as setting the arg to 1). The\n\n# args can be specificied in any order and most of them are optionals.\n\n#\n\n# Required arguments:\n\n# DOMAIN_NAME (string): the translation domain name, i.e. the name of the\n\n#    application or library the translations are created for.\n\n#    Default to ${PROJECT_NAME} if not found.\n\n# PO_DIR (path): absolute path to the directory where the translation\n\n#    files (po) are found.\n\n#    Default to \"${CMAKE_CURRENT_SOURCE_DIR}/po\" if not found.\n\n# LOCALE_LIST (string): semicolon-separated list of locales to initialize,\n\n#    merge or compile translation files for (ex: \"fr;zh_CN;en\").\n\n# MO_BUILD_DIR (path): absolute path to the directory in the *build* tree\n\n#    where the binary translation files (mo) should be saved.\n\n#    Default \"${EXECUTABLE_OUTPUT_PATH}/../locale\" if EXECUTABLE_OUTPUT_PATH\n\n#    is found, \"${CMAKE_CURRENT_BINARY_DIR}/locale\" otherwise.\n\n#\n\n# Optional arguments:\n\n# SOURCES (list): list of source files the translation template file (pot)\n\n#    will be (re)-generated from.\n\n# POT_BUILD_DIR (path): absolute path to the directory in the *build* tree\n\n#    where up-to-date translation template file (pot) should be stored.\n\n#    Default to \"${CMAKE_CURRENT_BINARY_DIR}/po\"  if not found.\n\n# PO_BUILD_DIR (path): absolute path to the directory in the *build* tree\n\n#    where up-to-date translation files (po) should be stored.\n\n#    Default to \"${CMAKE_CURRENT_BINARY_DIR}/po\"  if not found.\n\n# PO_PREFIX (string): string that will be used to prefix the filename of\n\n#    each translation file.\n\n#    Default to the value of \"${DOMAIN_NAME}_\"\n\n# MO_INSTALL_DIR (path): directory where the binary translation files (mo)\n\n#    should be installed to.\n\n# COPYRIGHT_HOLDER (string): copyright holder string that will be stored in\n\n#    the translation template file (pot).\n\n#    Default to the empty string if not found.\n\n# MSGID_BUGS_ADDRESS (string): report address for msgid bugs that will be stored in\n\n#    the translation template file (pot).\n\n#    Default to the empty string if not found.\n\n# DEFAULT_PO_ENCODING (string): default encoding to be used when initializing\n\n#    new translation file (po) for each locale. This will not change the\n\n#    encoding of existing translation file (po).\n\n#    Default to \"utf-8\" (Unicode) if not found.\n\n# EXTRA_GETTEXT_KEYWORDS (string): semicolon-separated list of extra keywords\n\n#    that should be recognized as a call to the gettext() function.\n\n# EXTRA_DGETTEXT_KEYWORDS (string): semicolon-separated list of extra keywords\n\n#    that should be recognized as a call to the dgettext() function.\n\n#\n\n# Target arguments:\n\n# By default, custom commands are created to create all the files, as well\n\n# as *one* custom target that can be triggered to refresh all the files.\n\n# This custom target can be added to the 'ALL' target, but is not by default\n\n# as modifying any source file would trigger: re-generating the template\n\n# file (pot), merging all translation files (po), and compiling them into\n\n# binary files (mo).\n\n# TARGET_BASENAME (string): basename of all targets (a suffix is added\n\n#    depending of each target).\n\n#    Default to ${DOMAIN_NAME} if specified, ${PROJECT_NAME} otherwise.\n\n# CREATE_POT_TARGET (boolean): create a target for the template file (pot),\n\n#    using the '_pot' suffix.\n\n#    Default to 0.\n\n# CREATE_PO_TARGET (boolean): create one unique target for all translation\n\n#    files (po), using the '_po' suffix. Can be used to refresh all PO files.\n\n#    Depends on the pot file.\n\n#    Default to 0.\n\n# CREATE_PO_LOCALE_TARGETS (boolean): create one target per locale\n\n#    translation file (po), using the '_po_locale' suffix (say '_po_fr'). Can\n\n#    be used to refresh a single PO file. Depends on the pot file.\n\n#    Default to 0.\n\n# CREATE_MO_TARGET (boolean): create one unique target for all binary\n\n#    translation files (mo), using the '_mo' suffix. Can be used to refresh all\n\n#    MO files (i.e. everything in the translation pipeline). Depends on each\n\n#    single po file. Can be added to the 'ALL' target using\n\n#    ADD_MO_TARGET_TO_ALL (CREATE_MO_TARGET will therefore be considered true).\n\n#    Default to 1.\n\n# CREATE_MO_LOCALE_TARGETS (boolean): create one target per locale binary\n\n#    translation file (mo), using the '_mo_locale' suffix (say '_mo_fr'). Can\n\n#    be used to refresh a single MO file. Depends on the same po file.\n\n#    Default to 0.\n\n# ADD_MO_TARGET_TO_ALL: add the unique MO target to the 'ALL' target. Doing\n\n#    so is likely to trigger all translation targets each time a source\n\n#    file is modified and compiled. This automatically creates the unique\n\n#    target for all binary translation files (mo), just like if\n\n#    CREATE_MO_TARGET was true.\n\n#    Default to 0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provide some reasonable defaults\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Fix some defaults\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Create the targets\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#if (UPDATE_POT)\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#endif (UPDATE_POT)\n\n#if (UPDATE_PO)\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#endif (UPDATE_PO)\n\n#if (CREATE_MO)\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#endif (CREATE_MO)\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_GET_POT_FILENAME\n\n# Given a translation domain and the location of a directory, return the\n\n# filename to the domain template file (pot).\n\n# 'varname': name of the var the template filename should be stored into\n\n# 'domain_name': translation domain name (i.e. name of application or library)\n\n# 'pot_build_dir': path in the build tree where the template should be stored\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_GET_PO_FILENAME\n\n# Given a PO directory, a prefix and a locale, return the filename to the\n\n# translation file (po) for that locale.\n\n# 'varname': name of the var the translation filename should be stored into\n\n# 'po_dir': path to the po directory where the PO file are stored\n\n# 'po_prefix': string that is used to prefix each translation file.\n\n# 'locale': a locale (say, \"fr\")\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_GET_PO_SAFE_BUILD_DIR\n\n# Given a PO directory, a PO build directory, returns either the\n\n# PO build directory if it is different than the PO directory, or\n\n# a directory in the build tree. This macro is used to get a safe place\n\n# to write PO related files\n\n# 'varname': name of the var the PO safe build dir should be stored into\n\n# 'po_dir': path to the po directory where the PO file are stored\n\n# 'po_build_dir': build path where up-to-date PO files should be stored\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#SET_DIRECTORY_PROPERTIES(PROPERTIES CLEAN_NO_CUSTOM 1)\n",
        "Line" : 337,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_GET_MO_FILENAME\n\n# Given a translation domain, a MO build directory, and a locale, return the\n\n# filename to the binary translation file (mo) for that locale and domain.\n\n# 'varname': name of the var the translation filename should be stored into\n\n# 'domain_name': translation domain name (i.e. name of application or library)\n\n# 'mo_build_dir': directory where the binary MO files should be saved to\n\n# 'locale': a locale (say, \"fr\")\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_GET_ABSOLUTE_SOURCES\n\n# Given a list of sources, return the corresponding absolute paths\n\n# 'varname': name of the var the list of absolute paths should be stored into\n\n# 'sources': list of source files\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_GET_RELATIVE_SOURCES\n\n# Given a list of sources, return the corresponding relative paths to\n\n# a directory.\n\n# 'varname': name of the var the list of absolute paths should be stored into\n\n# 'dir': path to the dir we want relative path from\n\n# 'sources': list of *absolute* path to the source files\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_CREATE_POT_TARGET\n\n# Given a domain name, the location of a PO directory, and a list of sources,\n\n# create a custom command/target to generate a translation template file (pot)\n\n# from the source files.\n\n# 'domain_name': translation domain name (i.e. name of application or library)\n\n# 'pot_build_dir': path in the build tree where the template should be stored\n\n# 'po_dir': path to the po directory where the original PO files are found\n\n# 'copyright_holder': optional copyright holder of the template file\n\n# 'msgid_bugs_address': report address for msgid bugs in the template file\n\n# 'sources': list of source files the template file will be generated from\n\n# 'target_basename': basename of the template file target\n\n# 'create_pot_target': if true, create pot target (on top of the command)\n\n# 'extra_gettext_keywords': semicolon-separated list of extra gettext keywords\n\n# 'extra_dgettext_keywords':semicolon-separated list of extra dgettext keywords\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We need the absolute path to each source file\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Put the list on sources to internationalize in an internal cache var\n\n# so that sub-projects can use it to create their own translation\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Get relative sources to the PO files\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# The extra keywords\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Define a symbol in each source file that can be used by dgettext\n",
        "Line" : 456,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Output the list of sources to a file. This fill will be read\n\n# by xgettext (so that we do not have to pass it as a huge command\n\n# line argument below)\n",
        "Line" : 463,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#CONFIGURE_FILE(${KWWidgets_TEMPLATES_DIR}/KWWidgetsContents.in ${files_from})\n",
        "Line" : 474,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# We need a dummy file that will just say: this POT target is up to date as\n\n# far as its dependencies are concerned. This will prevent the POT\n\n# target to be triggered again and again because the sources are older\n\n# than the POT, but the POT does not really need to be changed, etc.\n",
        "Line" : 476,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Extract strings to translate to template file (pot)\n",
        "Line" : 485,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_CREATE_PO_TARGETS\n\n# Given a domain name, the location of a PO build directory, and a list of\n\n# locales create multiple custom commands/targets to initialize and/or merge\n\n# the translation files (po) for each locale. Each translation file\n\n# 'po_build_dir'/locale.po (say, 'po_build_dir'/fr.po) is either initialized\n\n# from or merged against the translation template file in the 'pot_build_dir'\n\n# directory for the same domain (say, 'pot_build_dir'/'domain_name'.pot).\n\n# The default encoding of each newly initialized PO file can be specified too.\n\n# 'domain_name': translation domain name (i.e. name of application or library)\n\n# 'pot_build_dir': path in the build tree where the template should be stored\n\n# 'po_dir': path to where the original PO file are found\n\n# 'po_build_dir': build path where up-to-date PO files should be stored\n\n# 'po_prefix': string that will be used to prefix each translation file.\n\n# 'locale_list': semicolon-separated list of locale to generate targets for.\n\n# 'default_po_encoding': default encoding for new initialized PO files.\n\n# 'target_basename': basename of the PO targets\n\n# 'create_po_target': create one unique target for all locale PO files\n\n# 'create_po_locale_targets': create one target per locale PO file\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We need dummy files that will just say: this PO target is up to date as\n\n# far as its dependencies are concerned. This will prevent the PO\n\n# targets to be triggered again and again because the POT file is older\n\n# than the PO, but the PO does not really need to be changed, etc.\n",
        "Line" : 548,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "#kwwidgets_get_pot_filename(pot_uptodate_file\n\n#  \"${domain_name}\" \"${safe_build_dir}\")\n\n#set(pot_uptodate_file \"${pot_uptodate_file}.upd\")\n",
        "Line" : 555,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# KWWidgets_CREATE_MO_TARGETS\n\n# Given a domain name, the location of a PO directory, a list of locales, the\n\n# location of a MO build and install dir, create multiple custom\n\n# commands/targets to compile the translation files (po) for each locale into\n\n# a binary translation files (mo). Each translation file is found in the\n\n# PO directory as 'locale.po' (say, fr.po) and compiled into a binary\n\n# translation file in 'mo_build_dir'/locale/LC_MESSAGES/'domain_name'.mo\n\n# (say, 'mo_build_dir'/fr/LC_MESSAGES/'domain_name'.mo).\n\n# 'domain_name': translation domain name (i.e. name of application or library)\n\n# 'po_dir': path to where the original PO file are found\n\n# 'po_build_dir': build path to where up-to-date PO files are stored\n\n# 'po_prefix': string that is used to prefix each translation file.\n\n# 'locale_list': semicolon-separated list of locale to generate targets for.\n\n# 'mo_build_dir': directory where the binary MO files should be saved to\n\n# 'mo_install_dir': directory where the binary MO files should be installed to\n\n# 'target_basename': basename of the MO targets\n\n# 'create_mo_target': create one unique target for all locale MO files\n\n# 'create_mo_locale_targets': create one target per locale MO file\n\n# 'add_mo_target_to_all': if true, add the unique MO target to the 'ALL' target\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# --check-accelerators\n",
        "Line" : 644,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 31
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "afcfa6c920a9f22093956be139a6563c298523b5",
      "LastModified" : "2018-09-05T00:14:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dcpp/CMakeLists.txt" : {
      "ObjectId" : "568f0ff6d2de5610457811d4aa8dc2a9d7f63320",
      "LastModified" : "2019-03-26T21:21:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dht/CMakeLists.txt" : {
      "ObjectId" : "e3e2510355feb29bdc73d1138b8ca1efae323c34",
      "LastModified" : "2018-09-05T00:14:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "eiskaltdcpp-cli/CMakeLists.txt" : {
      "ObjectId" : "795ecc854b0ac15eed0d8b9109bc686d951b93f9",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "eiskaltdcpp-daemon/CMakeLists.txt" : {
      "ObjectId" : "4a565b79e40e1888b1b40e87abddf90bac4d2c71",
      "LastModified" : "2018-09-05T00:14:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ######### General setup ##########\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# actual target:\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "eiskaltdcpp-gtk/CMakeLists.txt" : {
      "ObjectId" : "12e4e38c053fd5b66bfe794f9233ef62c89ce9eb",
      "LastModified" : "2018-08-24T00:11:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "eiskaltdcpp-qt/CMakeLists.txt" : {
      "ObjectId" : "d3cdff9a4b9de27982dc6cc3e8fae78a3dc7757c",
      "LastModified" : "2019-03-15T22:00:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is temporary workaround which fixes build with Qt5 on Travis CI:\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#Create moc files\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#Create .h files from ui files\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#Create moc files\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Create .h files from ui files\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#Create translations\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Qt translations\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Set how it shows up in the Info.plist file\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Set where in the bundle to put the icns file\n",
        "Line" : 357,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Include the icns file in the target\n",
        "Line" : 359,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "eiskaltdcpp-qt/eiskaltdcpp-qt.pro" : {
      "ObjectId" : "9feb2174859584bf77bf18870d482e1eb9431d5d",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "eiskaltdcpp-qt/translations.pro" : {
      "ObjectId" : "239fce131ae22e86c3bad08f12d033d49f263589",
      "LastModified" : "2018-09-05T00:14:10Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "extra/CMakeLists.txt" : {
      "ObjectId" : "e873fb67d2efaf363006d850ba145fb79f48d2c3",
      "LastModified" : "2019-03-19T22:08:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "haiku/CMakeLists.txt" : {
      "ObjectId" : "b6a68385580abccb0789b8639057f5fabe6e9e19",
      "LastModified" : "2014-07-28T16:14:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "json/CMakeLists.txt" : {
      "ObjectId" : "ef85e0b5d099359d88e1994ad87f89e10bf30855",
      "LastModified" : "2018-09-05T00:14:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ######### General setup ##########\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "macos/homebrew-toolchain.cmake" : {
      "ObjectId" : "7444a55855a1ae1d911ae6172b96f966e51eab89",
      "LastModified" : "2018-12-20T21:20:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_BUILD_TYPE Release CACHE STRING \"Debug|Release|RelWithDebInfo|MinSizeRel\")\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "windows/install-deps.cmake" : {
      "ObjectId" : "4715de6ca81aafbc46946f1ba16dc302b427df1f",
      "LastModified" : "2019-03-15T22:00:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 31,
    "QMAKE" : 2
  },
  "ElapsedTime" : 4496
}