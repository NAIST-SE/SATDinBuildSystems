{
  "Repository" : "2253946",
  "Revision" : "HEAD",
  "ObjectId" : "58473736aa31e57ed94c7ab6221af8def5839ca1",
  "CommitTime" : "2019-03-25T17:26:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b391ae2557caf082d895cf8aa67e53e4d4d597d7",
      "LastModified" : "2016-10-29T15:45:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect icu\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# detect ctemplate\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# detect libetpan\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# detect tidy\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# detect uuid\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# detect libxml2\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# detect zlib\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Android platform\n",
        "Line" : 179,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "example/android/AndroidExample/app/proguard-rules.pro" : {
      "ObjectId" : "3c2c65b2fe3a961834b6a2f582d578553ffa55db",
      "LastModified" : "2015-01-10T22:11:27Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/hoa/Android/android-sdk-macosx/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "858d796d6c00096bcc09f1df39345ab719b9d025",
      "LastModified" : "2015-01-10T22:11:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/LibFindMacros.cmake" : {
      "ObjectId" : "69975c51be3f9c5e0ff372a4424f8de3b580ee88",
      "LastModified" : "2015-01-10T22:11:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "src/cmake/async.cmake" : {
      "ObjectId" : "b71068fdff8a66f356d235b9b941847fdca279dd",
      "LastModified" : "2016-10-29T15:45:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Files to build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Includes for build\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/core.cmake" : {
      "ObjectId" : "63a041fcab8c4ff744a7b5695defe0a35fa067af",
      "LastModified" : "2016-10-29T15:45:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Files to build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Includes for build\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/objc.cmake" : {
      "ObjectId" : "7b2721110f20ea55aca491a9173b6c1f84283e4b",
      "LastModified" : "2016-10-29T15:45:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Files to build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Includes for build\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/public-headers.cmake" : {
      "ObjectId" : "2907f9ccf1da2fc7b2e379106640173d6a14e1d2",
      "LastModified" : "2016-10-29T15:45:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/core/zip/MiniZip/Makefile" : {
      "ObjectId" : "84eaad20d4fb19b00965268dd75d7e9b66c8cc21",
      "LastModified" : "2015-01-10T22:11:27Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "a8163dc447f85c512a6118797f961e3b058dd37b",
      "LastModified" : "2015-01-10T22:11:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittest/CMakeLists.txt" : {
      "ObjectId" : "1694179d8c830c46431d899393abc5a5a37aa854",
      "LastModified" : "2015-01-10T22:11:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "QMAKE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2012
}