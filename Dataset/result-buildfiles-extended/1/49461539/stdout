{
  "Repository" : "49461539",
  "Revision" : "HEAD",
  "ObjectId" : "1be65277e1e7237386a465eb5e1f06445d26e8d1",
  "CommitTime" : "2019-04-12T12:38:34Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1d7cc595c8dcede934bc5a3c79d49323ca3d5405",
      "LastModified" : "2019-02-14T20:15:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++ required for directx\n",
        "Line" : 11,
        "CharPositionInLine" : 28
      },
      "1" : {
        "Text" : "# force Unicode over Multi-byte\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# put output in \"bin\"\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# avoid the extra \"Debug\", \"Release\" directories\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#####################\n\n# hello.hl\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#####################\n\n# threads.hl\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#####################\n\n# uvsample.hl\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#####################\n\n# hello.c\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#####################\n\n# threads.c\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#####################\n\n# uvsample.c\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#####################\n\n# Tests\n",
        "Line" : 257,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#####################\n\n# Packaging\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# uninstall target\n\n# https://gitlab.kitware.com/cmake/community/wikis/FAQ#can-i-do-make-uninstall-with-cmake\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Makefile" : {
      "ObjectId" : "6871fd821407017ff1ad6c039399c4ae864a959b",
      "LastModified" : "2019-03-15T07:42:48Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Cygwin\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mac\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Linux\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libs/CMakeLists.txt" : {
      "ObjectId" : "ed2cccbcdc46f38b32ca7383aa42af5fee9265fd",
      "LastModified" : "2019-03-15T07:51:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(mesa)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libs/directx/CMakeLists.txt" : {
      "ObjectId" : "d1c45ee6aad021ddbaf62579068e999dd853d067",
      "LastModified" : "2018-06-04T09:51:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/fmt/CMakeLists.txt" : {
      "ObjectId" : "a9485c1d77a44dd04f6be4b2e6cd9302631b3026",
      "LastModified" : "2019-03-15T07:51:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/mesa/Makefile" : {
      "ObjectId" : "17ba3a515e275ca2593ad2a17d56179f71020bd7",
      "LastModified" : "2017-12-18T15:21:08Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "libs/openal/CMakeLists.txt" : {
      "ObjectId" : "dc142cc5138c79f91391a04082bf62c9b8f597f0",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/sdl/CMakeLists.txt" : {
      "ObjectId" : "7c9064638331dd1ce12ec15b43ea1c309cf8ab14",
      "LastModified" : "2018-06-04T09:51:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/sqlite/CMakeLists.txt" : {
      "ObjectId" : "ebc827cb2113d9d27d52bcbaf9da19639aabb59a",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/ssl/CMakeLists.txt" : {
      "ObjectId" : "a6b23d1c72307f5fcce891dc4e306f3527ef9d65",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/ui/CMakeLists.txt" : {
      "ObjectId" : "03fc0b9ae7093216db68825dce028b4ea21ca90b",
      "LastModified" : "2018-06-04T09:51:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/uv/CMakeLists.txt" : {
      "ObjectId" : "e7aa2a1f333b043902879503f8643b4d860f86e2",
      "LastModified" : "2019-03-15T07:51:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/video/CMakeLists.txt" : {
      "ObjectId" : "e8e65d37cf9316c0d153776058ee7d1e06b90b08",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "other/cmake/FindDirectX.cmake" : {
      "ObjectId" : "869c14619a5018770722b02cdcc2912bde84db9b",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TAKEN FROM HERE: https://github.com/apitrace/apitrace/blob/master/cmake/FindDirectX.cmake\n\n# - try to find DirectX include directories and libraries\n\n#\n\n# Once done this will define:\n\n#\n\n#  DirectX_XYZ_INCLUDE_FOUND - system has the include for the XYZ API\n\n#  DirectX_XYZ_INCLUDE_DIR   - include directory for the XYZ API\n\n#\n\n# Where XYZ can be any of:\n\n#\n\n#  DDRAW\n\n#  D3D\n\n#  D3D8\n\n#  D3D9\n\n#  D3D10\n\n#  D3D10_1\n\n#  D3D11\n\n#  D3D11_1\n\n#  D3D11_2\n\n#  D2D1\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Can't use \"$ENV{ProgramFiles(x86)}\" to avoid violating CMP0053.  See\n\n# http://public.kitware.com/pipermail/cmake-developers/2014-October/023190.html\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# With VS 2011 and Windows 8 SDK, the DirectX SDK is included as part of\n\n# the Windows SDK.\n\n#\n\n# See also:\n\n# - http://msdn.microsoft.com/en-us/library/windows/desktop/ee663275.aspx\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find a header in the DirectX SDK\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Find a header in the Windows SDK\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Windows SDK\n",
        "Line" : 94,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 6
    },
    "other/cmake/FindLibUV.cmake" : {
      "ObjectId" : "074c6b79daa7be1b894942971f82ff07abaebd70",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindLibUV\n---------\n\nFind libuv includes and library.\n\nImported Targets\n^^^^^^^^^^^^^^^^\n\nAn :ref:`imported target <Imported targets>` named\n``LibUV::LibUV`` is provided if libuv has been found.\n\nResult Variables\n^^^^^^^^^^^^^^^^\n\nThis module defines the following variables:\n\n``LibUV_FOUND``\n  True if libuv was found, false otherwise.\n``LibUV_INCLUDE_DIRS``\n  Include directories needed to include libuv headers.\n``LibUV_LIBRARIES``\n  Libraries needed to link to libuv.\n``LibUV_VERSION``\n  The version of libuv found.\n``LibUV_VERSION_MAJOR``\n  The major version of libuv.\n``LibUV_VERSION_MINOR``\n  The minor version of libuv.\n``LibUV_VERSION_PATCH``\n  The patch version of libuv.\n\nCache Variables\n^^^^^^^^^^^^^^^\n\nThis module uses the following cache variables:\n\n``LibUV_LIBRARY``\n  The location of the libuv library file.\n``LibUV_INCLUDE_DIR``\n  The location of the libuv include directory containing ``uv.h``.\n\nThe cache variables should not be used by project code.\nThey may be set by end users to point at libuv components.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Extract version number if possible.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Provide documented result variables and targets.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "other/cmake/FindOggVorbis.cmake" : {
      "ObjectId" : "a7e14981dea9d1799c47f319495e591aec10a5b5",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the OggVorbis libraries\n\n# Once done this will define\n\n#\n\n#  OGGVORBIS_FOUND - system has OggVorbis\n\n#  OGGVORBIS_VERSION - set either to 1 or 2\n\n#  VORBIS_INCLUDE_DIR - the vorbisfile.h include directory\n\n#  OGG_INCLUDE_DIR - the ogg.h include directory\n\n#  OGGVORBIS_LIBRARIES - The libraries needed to use OggVorbis\n\n#  OGG_LIBRARY         - The Ogg library\n\n#  VORBIS_LIBRARY      - The Vorbis library\n\n#  VORBISFILE_LIBRARY  - The VorbisFile library\n\n#  VORBISENC_LIBRARY   - The VorbisEnc library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Richard Laerkaeng, <richard@goteborg.utfors.se>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#check_include_files(vorbis/vorbisfile.h HAVE_VORBISFILE_H)\n\n#check_library_exists(ogg ogg_page_version \"\" HAVE_LIBOGG)\n\n#check_library_exists(vorbis vorbis_info_init \"\" HAVE_LIBVORBIS)\n\n#check_library_exists(vorbisfile ov_open \"\" HAVE_LIBVORBISFILE)\n\n#check_library_exists(vorbisenc vorbis_info_clear \"\" HAVE_LIBVORBISENC)\n\n#check_library_exists(vorbis vorbis_bitrate_addblock \"\" HAVE_LIBVORBISENC2)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis found\")\n\n#    set (VORBIS_LIBS \"-lvorbis -logg\")\n\n#    set (VORBISFILE_LIBS \"-lvorbisfile\")\n\n#    set (VORBISENC_LIBS \"-lvorbisenc\")\n\n#    set (OGGVORBIS_FOUND TRUE)\n\n#    if (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 2)\n\n#    else (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 1)\n\n#    endif (HAVE_LIBVORBISENC2)\n\n#else (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis not found\")\n\n#endif (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "other/cmake/FindSDL2.cmake" : {
      "ObjectId" : "5619b8ad8e26730945e9fe238df6f11d6b426fbf",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 72,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 73,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 74,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional link flag, -mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -mwindows\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 147,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 164,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 171,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "other/cmake/FindTurboJPEG.cmake" : {
      "ObjectId" : "55f730715dc6e3808146cbc2e2351b161e54457c",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTurboJPEG.cmake\n\n# Uses environment variable TurboJPEG_ROOT as backup\n\n# - TurboJPEG_FOUND\n\n# - TurboJPEG_INCLUDE_DIRS\n\n# - TurboJPEG_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# homebrew\n",
        "Line" : 13,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# macports\n",
        "Line" : 14,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "#Library names:\n\n# debian sid,strech: libturbojpeg0\n\n# debian/ubuntu else: libturbojpeg1-dev #provided by libjpeg-turbo8-dev (ubuntu)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# homebrew\n",
        "Line" : 31,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# macports\n",
        "Line" : 32,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 6
    },
    "other/cmake/linux32.toolchain.cmake" : {
      "ObjectId" : "301856541d19e780609ecf7e2ffd3bad00869ce1",
      "LastModified" : "2018-05-14T22:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain file for building a 32bit version on a 64bit host.\n\n#\n\n# Usage:\n\n# cmake -DCMAKE_TOOLCHAIN_FILE=other/cmake/linux32.toolchain.cmake <sourcedir>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 2062
}