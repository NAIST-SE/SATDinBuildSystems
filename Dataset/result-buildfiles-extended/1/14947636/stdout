{
  "Repository" : "14947636",
  "Revision" : "HEAD",
  "ObjectId" : "160b2206f1797558abfc232dd4c9c21206db222d",
  "CommitTime" : "2019-04-09T08:50:30Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "de6a6184aa47963beec0690bda50dc357b2b69d8",
      "LastModified" : "2018-08-30T19:12:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############## RPP Compilation Flags ##############\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure build type\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add compiler specific flags\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# /wd4996 - Disable deprecation warning\n\n# /wd4819 - Disable code page warning (OpenCV)\n\n# /wd4251 - Disable dll-interface warning\n\n# /wd4275 - Disable dll-interface base class warning\n\n# /W3 - warning level 3\n\n# /Zi - Debug Database\n\n# /Oi - Intrinsics Enabled\n\n# /MP - MultiProcess build\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# /MD - MultiThreaded Dynamic CRT\n\n# /MT - MultiThreaded Static CRT\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# switch from dynamic to static linking of msvcrt\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#message(STATUS \"C_${MODE}=${CMAKE_C_FLAGS${MODE}}\")\n\n#message(STATUS \"CXX_${MODE}=${CMAKE_CXX_FLAGS${MODE}}\")\n",
        "Line" : 109,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Echo the final flags for people who care:\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###################################################\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Configure platform specific system dependencies\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###################################################\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###################################################\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "Makefile" : {
      "ObjectId" : "d03619955a3dd7742888b6e287654c4bef022629",
      "LastModified" : "2019-04-09T08:50:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "cmake/FindDWARF.cmake" : {
      "ObjectId" : "2f132543a8b66936abf1158393529f99b2d00ee2",
      "LastModified" : "2017-12-21T02:46:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Dwarf\n\n# Find the dwarf.h header from elf utils\n\n#\n\n#  DWARF_INCLUDE_DIR - where to find dwarf.h, etc.\n\n#  DWARF_LIBRARIES   - List of libraries when using elf utils.\n\n#  DWARF_FOUND       - True if fdo found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# check if libdw have the dwfl_module_build_id routine, i.e. if it supports the buildid\n\n# mechanism to match binaries to detached debug info sections (the -debuginfo packages\n\n# in distributions such as fedora). We do it against libelf because, IIRC, some distros\n\n# include libdw linked statically into libelf.\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Check if we are in a Red Hat (RHEL) or Fedora system to tell\n\n# exactly which packages should be installed. Please send\n\n# patches for other distributions.\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 2,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 528
}