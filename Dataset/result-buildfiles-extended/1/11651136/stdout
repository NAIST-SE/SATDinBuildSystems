{
  "Repository" : "11651136",
  "Revision" : "HEAD",
  "ObjectId" : "7078a02ac7ecd7ef3d399bc1bf39b5ac6ed02442",
  "CommitTime" : "2015-03-27T20:44:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "379c795e627d73f40680cce9cfedd44d4db82d4d",
      "LastModified" : "2015-03-12T19:02:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Toolchain-switch for cross-compiling\n\n# For cross-compiling issue at commandline: cmake -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-cross-*.cmake\n\n# Make sure to have alls needed tools installed beforehand!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Include modules\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Project description\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(PROJECT_LOGO)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Configuration switches\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set TRUE to link libraries static, so we get a stand-alone application\n",
        "Line" : 25,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "###\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Enable C++11 support\n",
        "Line" : 30,
        "CharPositionInLine" : 32
      },
      "8" : {
        "Text" : "#Enable debugging-output, no-optimization (for valgrind and gdb)\n",
        "Line" : 34,
        "CharPositionInLine" : 29
      },
      "9" : {
        "Text" : "# What to do when crosscompiling\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# What to do if we happen to crosscompile with MINGW\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#list(APPEND LINK_DIRS ${EXT_LIB_DIR}/lib/)\n\n#list(APPEND INCLUDE_DIRS ${EXT_LIB_DIR}/include/)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# What do do if we are compiling for WINDOwS\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#Set c/c++ preprocessor var\n",
        "Line" : 71,
        "CharPositionInLine" : 25
      },
      "14" : {
        "Text" : "# What do do if we are compiling for LINUX\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#Set c/c++ preprocessor var\n",
        "Line" : 78,
        "CharPositionInLine" : 25
      },
      "16" : {
        "Text" : "# What do do if we are compiling for OSX\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#Set c/c++ preprocessor var\n",
        "Line" : 85,
        "CharPositionInLine" : 23
      },
      "18" : {
        "Text" : "# What to do if user requests static linking\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# if(${LINK_STATIC})\n\n# list(APPEND LINK_DIRS ${CMAKE_FIND_ROOT_PATH}/lib)\n\n# set(Boost_USE_STATIC_LIBS ON)\n\n# set(Boost_USE_STATIC_RUNTIME OFF)\n\n# set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Xlinker -static -static-libstdc++ -static-libgcc\")\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# else()\n\n# list(APPEND LINK_DIRS ${CMAKE_FIND_ROOT_PATH}/bin)\n\n# endif()\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "### Configure find system\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# findBoost\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# set(BOOST_ROOT ${CMAKE_FIND_ROOT_PATH})\n\n# set(BOOST_LIBRARYDIR \"${BOOST_ROOT}lib/\")\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "### Find needed Packages\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "### Taget for generating Doxygen documentation (if Doygen is found)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#COMMAND ${CMAKE_MAKE_PROGRAM} -C ${CMAKE_CURRENT_SOURCE_DIR}/doc/latex/proc/\n\n#COMMAND cmake -E copy ${CMAKE_CURRENT_SOURCE_DIR}/doc/latex/proc/refman.pdf ${CMAKE_CURRENT_SOURCE_DIR}/doc/latex/manual.pdf\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "### Generate Version-Information from git tag and commit-information\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# remove leading \"v\"\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Generate full custom version-string\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "### Set include/link directories\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "### Printing some information\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "### Providing target to build dependencies\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "### Set libraries and dependencies\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "### Set executables and dependencies\n\n#Test for regexp\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# #Test for exposer\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# #Test for exposer\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#Test for wt-dbo\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "### Test for wt\n\n# Add executbales and libraries if dependencies are found\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#  src/coolpak6000.cpp src/serialConnections.cpp src/serialSync.cpp src/.cpp src/unitValue.cpp)\n",
        "Line" : 268,
        "CharPositionInLine" : 41
      },
      "40" : {
        "Text" : "### Test for wt2\n\n# Add executbales and libraries if dependencies are found\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#  src/coolpak6000.cpp src/serialConnections.cpp src/serialSync.cpp src/.cpp src/unitValue.cpp)\n",
        "Line" : 279,
        "CharPositionInLine" : 43
      },
      "42" : {
        "Text" : "### Test for wt-plots\n\n# Add executbales and libraries if dependencies are found\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#  src/coolpak6000.cpp src/serialConnections.cpp src/serialSync.cpp src/.cpp src/unitValue.cpp)\n",
        "Line" : 290,
        "CharPositionInLine" : 45
      },
      "44" : {
        "Text" : "### Calibrator for RFG\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "### Test for forms\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "### Test of connections\n\n# add_executable(test_connections src/test_serial.cpp src/basicConnections.cpp)\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "### Test of data acquisition\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#add_dependencies(test_acquisition )\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "### Test of TCP\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "### Test for stringstreams\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "### Test for interpolation\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "### Test for parser\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#### Installation\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "### Installation directives\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Generate dependencies\n",
        "Line" : 349,
        "CharPositionInLine" : 42
      },
      "56" : {
        "Text" : "#install(TARGETS test_connections test_exposer test_forms test_gui test_tcp test_wtdbo COMPONENT tests RUNTIME DESTINATION bin)\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# This must always be last!\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 58
    },
    "cmake/modules/FindDoxygen.cmake" : {
      "ObjectId" : "4a6c8e982e9920af4733a01430ab494b2ff96a75",
      "LastModified" : "2014-09-17T08:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - This module looks for Doxygen and the path to Graphviz's dot\n\n# Doxygen is a documentation generation tool. Please see\n\n# http://www.doxygen.org\n\n#\n\n# This module accepts the following optional variables:\n\n#\n\n# DOXYGEN_SKIP_DOT = If true this module will skip trying to find Dot\n\n# (an optional component often used by Doxygen)\n\n#\n\n# This modules defines the following variables:\n\n#\n\n# DOXYGEN_EXECUTABLE = The path to the doxygen command.\n\n# DOXYGEN_FOUND = Was Doxygen found or not?\n\n#\n\n# DOXYGEN_DOT_EXECUTABLE = The path to the dot program used by doxygen.\n\n# DOXYGEN_DOT_FOUND = Was Dot found or not?\n\n# DOXYGEN_DOT_PATH = The path to dot not including the executable\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n# License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For backwards compatibility support\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ===== Rationale for OS X AppBundle mods below =====\n\n# With the OS X GUI version, Doxygen likes to be installed to /Applications and\n\n# it contains the doxygen executable in the bundle. In the versions I've\n\n# seen, it is located in Resources, but in general, more often binaries are\n\n# located in MacOS.\n\n#\n\n# NOTE: The official Doxygen.app that is distributed for OS X uses non-standard\n\n# conventions. Instead of the command-line \"doxygen\" tool being placed in\n\n# Doxygen.app/Contents/MacOS, \"Doxywizard\" is placed there instead and\n\n# \"doxygen\" is placed in Contents/Resources. This is most likely done\n\n# so that something happens when people double-click on the Doxygen.app\n\n# package. Unfortunately, CMake gets confused by this as when it sees the\n\n# bundle it uses \"Doxywizard\" as the executable to use instead of\n\n# \"doxygen\". Therefore to work-around this issue we temporarily disable\n\n# the app-bundle feature, just for this CMake module:\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Save the old setting\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Disable the App-bundle detection feature\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# FYI:\n\n# In the older versions of OS X Doxygen, dot was included with the\n\n# Doxygen bundle. But the new versions require you to download\n\n# Graphviz.app which contains \"dot\" in it's bundle.\n\n# ============== End OSX stuff ================\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Find Doxygen...\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Find Dot...\n\n#\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The Doxyfile wants the path to Dot, not the entire path and executable\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Backwards compatibility...\n\n#\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Restore the old app-bundle setting setting\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Maintain the _FOUND variables as \"YES\" or \"NO\" for backwards compatibility\n\n# (allows people to stuff them directly into Doxyfile with configure_file())\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For backwards compatibility support\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/modules/FindLibharu.cmake" : {
      "ObjectId" : "ae048d43e211fafd9d58449b63a108b0eee3e1a2",
      "LastModified" : "2014-09-17T08:09:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libHaru\n\n# Find the native libHaru includes and libraries\n\n# This module defines\n\n# LIBHARU_INCLUDE_DIRS, where to find hpdf.h, etc.\n\n# LIBHARU_LIBRARIES, libraries to link against to use libHaru.\n\n# LIBHARU_FOUND, If false, do not try to use libHaru.\n\n#\n\n# Search hint (in CMake or as an environment variable):\n\n# LIBHARU_ROOT, the libHaru install directory root.\n\n#\n\n# Find libHaru static or dynamic libs? Set as a CMake veriable:\n\n# LIBHARU_STATIC, find the static libs if ON, dynamic by default\n\n# Find the main libHaru header.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get a list of libraries, with static 's' suffix if necessary.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find each library.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBHARU_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindWt.cmake" : {
      "ObjectId" : "09db35f24fc81d0a473bd64f968e5c92e678c809",
      "LastModified" : "2014-10-27T02:48:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Wt includes and libraries\n\n#\n\n# This script sets the following variables:\n\n#\n\n#  Wt_INCLUDE_DIR\n\n#  Wt_LIBRARIES  - Release libraries\n\n#  Wt_FOUND  - True if release libraries found\n\n#  Wt_DEBUG_LIBRARIES  - Debug libraries\n\n#  Wt_DEBUG_FOUND  - True if debug libraries found\n\n#\n\n# To direct the script to a particular Wt installation, use the\n\n# standard cmake variables CMAKE_INCLUDE_PATH and CMAKE_LIBRARY_PATH\n\n#\n\n# To use this script to find Wt, when using the new style for include files:\n\n#   #include <Wt/WLineEdit>\n\n#   #include <Wt/Ext/LineEdit>\n\n#   #include <Wt/Chart/WPieChart>\n\n#\n\n# include the following CMake snippet in your project:\n\n#\n\n#  FIND_PACKAGE( Wt REQUIRED )\n\n#  INCLUDE_DIRECTORIES( ${Wt_INCLUDE_DIR} )\n\n#  TARGET_LINK_LIBRARIES( yourexe\n\n#    ${Wt_DEBUG_LIBRARY}        # or {Wt_LIBRARY}\n\n#    ${Wt_HTTP_DEBUG_LIBRARY}   # or {Wt_HTTP_LIBRARY}\n\n#    ${Wt_EXT_DEBUG_LIBRARY}    # or {Wt_EXT_LIBRARY}\n\n#  )\n\n#\n\n# To use this script to find Wt, when using the old include style:\n\n#   #include <WLineEdit>\n\n#   #include <Ext/LineEdit>\n\n#   #include <Chart/WPieChart>\n\n# style of include files, change the INCLUDE_DIRECTORIES statement to:\n\n#   INCLUDE_DIRECTORIES( ${Wt_INCLUDE_DIR} ${Wt_INCLUDE_DIR}/Wt )\n\n#\n\n#\n\n#\n\n#\n\n# Copyright (c) 2007, Pau Garcia i Quiles, <pgquiles@elpauer.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/toolchains/Toolchain-cross-mingw64-linux.cmake" : {
      "ObjectId" : "f165b046adccf81f5a32613c2d6184b7a26507b2",
      "LastModified" : "2014-10-27T02:48:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Load plattform settings\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Choose an appropriate compiler prefix\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for 32 or 64 bits mingw-w64\n\n# see http://mingw-w64.sourceforge.net/\n\n#set(COMPILER_PREFIX \"i686-w64-mingw32\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#set(CMAKE_RC_COMPILER ${COMPILER_PREFIX}-windres)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#set(CMAKE_C_COMPILER ${COMPILER_PREFIX}-gcc)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#set(CMAKE_CXX_COMPILER ${COMPILER_PREFIX}-g++)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "dependencies/CMakeLists.txt" : {
      "ObjectId" : "7bfaafab9697aec4eaa4a4c0a245d4091f33565d",
      "LastModified" : "2015-02-11T21:24:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Special seperator , instead of ; set in the external-projects\n",
        "Line" : 10,
        "CharPositionInLine" : 27
      },
      "1" : {
        "Text" : "#set(PROJECT_LOGO)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    --verbose\n\n#    --debug\n\n#   -D CPACK_SET_DESTDIR=ON\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  -D CPACK_SET_DESTDIR=ON\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Download and compile missing external libraries\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Comment-out when cmake keeps buggin you with rebuilds\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "6" : {
        "Text" : "# \t-DCMAKE_FIND_LIBRARY_SUFFIXES:STRING=\".a;.dll.a\"\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ExternalProject_Add(\n\n#  boost\n\n#  PREFIX ${CMAKE_SYSTEM_NAME}\n\n#  INSTALL_DIR ${INSTALL_PREFIX}\n\n#  LIST_SEPARATOR ,\n\n#  INSTALL_COMMAND \"\"\n\n#  GIT_REPOSITORY https://github.com/boostorg/boost.git\n\n# )\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t-D CPACK_DEBIAN_PACKAGE_DEPENDS=libharu\\ (>=\\ 2.0.0)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Comment-out when cmake keeps buggin you with rebuilds\n",
        "Line" : 107,
        "CharPositionInLine" : 57
      },
      "10" : {
        "Text" : "#      -DWT_CMAKE_FINDER_INSTALL_DIR:PATH=${CMAKE_CURRENT_SOURCE_DIR}../cmake/modules\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#      -DBoost_USE_STATIC_LIBS=ON\n\n#       -DBOOST_LIBRARYDIR:PATH=${CMAKE_FIND_ROOT_PATH}/bin\n\n#       -DBOOST_ROOT=\n\n#       -DWT_WRASTERIMAGE_IMPLEMENTATION:STRING=GraphicsMagick\n\n#       -DHARU_PREFIX:STRING=${EXT_LIB_DIR}\n\n#       -DCMAKE_FIND_LIBRARY_SUFFIXES:STRING=\".a;.dll.a\"\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 943
}