{
  "Repository" : "29987237",
  "Revision" : "HEAD",
  "ObjectId" : "20398acad92a6729fcc00a0a8eff55e73b25068a",
  "CommitTime" : "2019-04-17T11:54:55Z",
  "Files" : {
    "dated/version1/libraries/ArduinoJson/CMakeLists.txt" : {
      "ObjectId" : "a1d642129ee5424e17bbe1eea8cb7115f401bcfc",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dated/version1/libraries/ArduinoJson/src/CMakeLists.txt" : {
      "ObjectId" : "a7c1e637c77c7e01f9fa82455c95ccf59bf13e55",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dated/version1/libraries/ArduinoJson/test/CMakeLists.txt" : {
      "ObjectId" : "5e447690f9988b2c82b11f4d98f4d9c3031f7cba",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Workaround for Visual Studio 2012\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dated/version1/libraries/ArduinoJson/third-party/gtest-1.7.0/CMakeLists.txt" : {
      "ObjectId" : "57470c84f3af0772c411bbb8bbbb41b515747ecd",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "dated/version1/libraries/ArduinoJson/third-party/gtest-1.7.0/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "dated/version1/libraries/ArduinoJson/third-party/gtest-1.7.0/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "dated/version1/libraries/ArduinoJson/third-party/gtest-1.7.0/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "dated/version1/libraries/ArduinoJson/third-party/gtest-1.7.0/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2017-01-28T19:50:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "software/firmware/source/UATbridge/Makefile" : {
      "ObjectId" : "c31292df929e40ebbbd5e023a500b5fa9924798d",
      "LastModified" : "2019-03-09T07:51:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\r\n\n# Makefile\r\n\n# Copyright (C) 2019 Linar Yusupov\r\n\n#\r\n\n# This program is free software: you can redistribute it and/or modify\r\n\n# it under the terms of the GNU General Public License as published by\r\n\n# the Free Software Foundation, either version 3 of the License, or\r\n\n# (at your option) any later version.\r\n\n#\r\n\n# This program is distributed in the hope that it will be useful,\r\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\n# GNU General Public License for more details.\r\n\n#\r\n\n# You should have received a copy of the GNU General Public License\r\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# \"Intel HEX\" type of the firmware binary is necessary input format\r\n\n#    for cc2538-bsl.py serial firmware uploader. \r\n\n#\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "software/firmware/source/libraries/Adafruit-GFX-Library/fontconvert/Makefile" : {
      "ObjectId" : "47f5a0e15a5a1587cd379507a1b5cfc8bbd9299f",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "software/firmware/source/libraries/ArduinoJson/CMakeLists.txt" : {
      "ObjectId" : "66c565b5b46f82c479c9b4281e3a8015e200c3f2",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/fuzzing/Makefile" : {
      "ObjectId" : "f3ed397f54e7615f1281cc0fe092bca5219af158",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CAUTION: this file is invoked by https://github.com/google/oss-fuzz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/CMakeLists.txt" : {
      "ObjectId" : "4fee0ea1cad5cb2b05d75b7d5c7b4c22cf3b8def",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the flag exists in 4.4 but is buggy\n",
        "Line" : 44,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "# Set warning level\n\n# Treats all compiler warnings as errors.\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "software/firmware/source/libraries/ArduinoJson/test/DynamicJsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "9030f376032c9df3f63d443e70d6d710e7d95d96",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/IntegrationTests/CMakeLists.txt" : {
      "ObjectId" : "9294bbbf9848f99764ee764e4374a598a1a9ef70",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# issue 544\n",
        "Line" : 13,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 2
    },
    "software/firmware/source/libraries/ArduinoJson/test/JsonArray/CMakeLists.txt" : {
      "ObjectId" : "ec0e5206b508626e6a5e132c40368b24044f31fd",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/JsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "34b3e735a817ad6548420ac460322fd114caa473",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/JsonObject/CMakeLists.txt" : {
      "ObjectId" : "93e8f0ded8cc2c7c83ab214a3b0d270999c77470",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/JsonVariant/CMakeLists.txt" : {
      "ObjectId" : "0a00a15a1d4dfd737b9c3492088b617baae7147f",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/JsonWriter/CMakeLists.txt" : {
      "ObjectId" : "12a12bfdd50ba481245901d45bfabbcb14a8725f",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/Misc/CMakeLists.txt" : {
      "ObjectId" : "56bbd5c35a9076412f761e3c692f8cbb6fa6e963",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/Polyfills/CMakeLists.txt" : {
      "ObjectId" : "d96ce719de8004d9cc93ca5a4a92617e74092f98",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/test/StaticJsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "00c78dfa5986024650b84651250fc9f443e624c0",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/ArduinoJson/third-party/catch/CMakeLists.txt" : {
      "ObjectId" : "59515f54132a9eceb69535b8991a8c9021d8e92c",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "software/firmware/source/libraries/SimpleNetwork/example-client/Makefile" : {
      "ObjectId" : "2ba3164bb62a772d413699709e519e9b52fb03b7",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "software/firmware/source/libraries/SimpleNetwork/example-server/Makefile" : {
      "ObjectId" : "c9227ec991615bce20f21de78bbf77bf0c564b62",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "software/firmware/source/libraries/bcm2835/Makefile.am" : {
      "ObjectId" : "a5158edb219e3aae3af5486d4cfd2c955310ebb4",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "software/firmware/source/libraries/bcm2835/doc/Makefile.am" : {
      "ObjectId" : "50dab1fcc8295f5a4d5d21d2d967c43702478c58",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "software/firmware/source/libraries/bcm2835/src/Makefile.am" : {
      "ObjectId" : "3b9b1840a6fcbdf01985f5b5d7f6af2d79d8e304",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "software/firmware/source/libraries/nmealib/examples/Makefile" : {
      "ObjectId" : "79682a3a38a6ed9baf9b6814a40da2fd55046641",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Settings\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Targets\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Phony Targets\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "software/firmware/source/libraries/nmealib/extras/Makefile" : {
      "ObjectId" : "89c217fd42365f6af732329fa6abf75a1538651b",
      "LastModified" : "2019-03-14T12:53:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0,
      "Errorlog" : "line 16:24 token recognition error at: '\"s/^([[:space:]]*PROJECT_NUMBER[[:space:]]*=).*/\\1'\nline 27:25 token recognition error at: '\"\\n\\t@$(MAKE) -C latex -s > /dev/null 2>&1\\nelse\\n\\t$(MAKE) -C latex\\nendif\\n\\t$(MAKECMDPREFIX)mv latex/refman.pdf nmealib.pdf\\n\\t$(MAKECMDPREFIX)rm -fr latex\u0000'\n"
    }
  },
  "FileTypes" : {
    "CMAKE" : 18,
    "MAKEFILE" : 9,
    "AUTOMAKE" : 4
  },
  "ElapsedTime" : 3315
}