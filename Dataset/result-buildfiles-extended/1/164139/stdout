{
  "Repository" : "164139",
  "Revision" : "HEAD",
  "ObjectId" : "dd1958a689d0e22ecdb5582deeab388fe65fa711",
  "CommitTime" : "2019-03-31T06:58:40Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6a882b2bd55edcf80609ec4e886456b47832d75d",
      "LastModified" : "2018-08-09T08:33:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 2.6.3 is needed for ctest support\n\n# 3.1 is needed for target_sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############\n\n# Conan support\n\n###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for functions before setting a lot of stuff\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Apply workaround for MinGW timespec redefinition (pthread.h / time.h)\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Apply workaround for static/shared libraries on MinGW C/C++ compiler\n\n# Issue occurs with CMake >= 3.9.0, it doesn't filter out gcc,gcc_s,gcc_eh from\n\n# the implicit library list anymore, so the C++ linker is getting passed the static\n\n# gcc_eh library since that's what the C linker uses by default. Only solution appears\n\n# to be to force static linkage.\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Pkg-config file\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#include(\"${CppUTestRootDirectory}/cmake/Modules/CheckFunctionExists.cmake\")\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Pkg-config file.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Try to include helper module\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# guard against older versions of cmake which do not provide it\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "Makefile.am" : {
      "ObjectId" : "4ef0c6b028afe885e46930639862e94806360645",
      "LastModified" : "2019-03-01T05:00:01Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# check_PROGRAMS += GTestTests\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#GTestTests_CPPFLAGS = $(lib_libCppUTestExt_a_CPPFLAGS)\n\n#GTestTests_CFLAGS = $(lib_libCppUTestExt_a_CFLAGS)\n\n#GTestTests_CXXFLAGS = $(lib_libCppUTestExt_a_CXXFLAGS) -DCPPUTEST_USE_MEM_LEAK_DETECTION=0 -DGMOCK_RENAME_MAIN=1 -D_THREAD_SAFE  -DGTEST_HAS_PTHREAD=1\n\n#GTestTests_LDADD = lib/libCppUTestExt.a lib/libCppUTest.a $(CPPUTEST_LDADD)\n\n#GTestTests_LDFLAGS = $(CppUTestTests_LDFLAGS)\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GTestTests_SOURCES = \\\n\t$(GMOCK_HOME)/test/gmock-spec-builders_test.cc \\\n\ttests/CppUTestExt/AllTests.cpp\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Mac OSX adds an annoying directory when packaging. This can be prevented by setting COPYFILE_DISABLE=1\n\n# However, I've not figured out how to set it automatically and neither google nor stackoverflow knew the answer.\n\n# The automake mailing list is still thinking about it, and thus, I've added this check so that I don't forget to do it :)\n\n# More info: http://superuser.com/questions/61185/why-do-i-get-files-like-foo-in-my-tarball-on-os-x\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/CppUTestBuildTimeDiscoverTests.cmake" : {
      "ObjectId" : "57a5649ed14def5494744add4309ed003614a38e",
      "LastModified" : "2015-05-26T08:41:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create target to discover tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CppUTestConfigurationOptions.cmake" : {
      "ObjectId" : "939a94b15c7befba5f2ab876f0244916a5f3016d",
      "LastModified" : "2017-10-15T02:43:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GMock pulls in gtest.\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CppUTestNormalizeTestOutputLocation.cmake" : {
      "ObjectId" : "acb5efb3479ecdb6eb58c2f51144b630d5614668",
      "LastModified" : "2016-03-29T06:14:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Override output properties to put test executable at specificied location\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CppUTestWarningFlags.cmake" : {
      "ObjectId" : "08a3a855da065eb453cea2e20b57a6a3435f7b87",
      "LastModified" : "2016-09-19T05:16:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindCXX11.cmake" : {
      "ObjectId" : "8718ec1072cf7e337674be7e8568f95dce8c0b05",
      "LastModified" : "2016-09-19T05:16:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds if the compiler has C++11 support\n\n# This module can be used to detect compiler flags for using C++11, and checks\n\n# a small subset of the language.\n\n#\n\n# The following variables are set:\n\n#   CXX11_FLAGS - flags to add to the CXX compiler for C++11 support\n\n#   CXX11_FOUND - true if the compiler supports C++11\n\n#\n\n# TODO: When compilers starts implementing the whole C++11, check the full set\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Eveerything that automatically accepts C++11\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# gcc, clang and Intel Linux\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Intel windows\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Scripts/CppUTestBuildTimeDiscoverTests.cmake" : {
      "ObjectId" : "901e08bbc0d471c09f8125a43dbe23d071f5a026",
      "LastModified" : "2016-03-29T06:14:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create CTest entries for EXECUTABLE in CTestTestfile.cmake\n\n# Overwrite CTestTestfile.cmake with update version.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Usage:\n\n#\n\n# This script is to be called from ../Modules/CppUTestBuildTimeDiscoverTests.cmake\n\n#\n\n# Steps to generate ADD_TEST() commands build time\n\n# - Read CTestTestfile.cmake\n\n# - Create update entries\n\n# - Remove duplicate entries\n\n# - Write new CTestTestfile.cmake\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################################################\n\n# helpers\n\n######################################################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create ADD_TEST() command string\n\n# - Extract and remove testname from ARGV\n\n# - Add inner quotes to test arguments\n\n# - Add \"ADD_TEST()\", and first and last quote\n\n# Append result to CTESTTESTS\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "######################################################################\n\n# Implementation\n\n######################################################################\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# create separate CTest test for each CppUTestTests test\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "config.h.cmake" : {
      "ObjectId" : "e8a4b9fd47d7705e4f91f8d9b2136652f940f989",
      "LastModified" : "2016-09-19T05:16:21Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "examples/Makefile" : {
      "ObjectId" : "1aff02ddd7f1f172d3b2024b89eca3e9ae8e6316",
      "LastModified" : "2016-03-29T06:14:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---------\n\n#\n\n# CppUTest Examples Makefile\n\n#\n\n#----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set this to @ to keep the makefile quiet\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--- Inputs ----#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This line is overriding the default new macros.  This is helpful\n\n# when using std library includes like <list> and other containers\n\n# so that memory leak detection does not conflict with stl.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "platforms/Dos/Makefile" : {
      "ObjectId" : "cd3c0aa46ce2c02ce7a1f1b811354398d5020ece",
      "LastModified" : "2016-11-12T04:41:17Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n",
        "Line" : 7,
        "CharPositionInLine" : 17
      },
      "1" : {
        "Text" : "# Disable W013 unreachable code - it overreacts to CHECK_EQUAL macros\n\n# Disable W367 conditional expression in if statement is always true - same\n\n# Disable W368 conditional expression in if statement is always false - same\n\n# Disable W391 assignment found in boolean expression - we don't care\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "platforms/armcc/Makefile" : {
      "ObjectId" : "83e64c57adde88331d22ccf238631612a3346bad",
      "LastModified" : "2016-03-29T06:14:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We don't need to clean up when we're making these targets\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU architecture. Passing to armcc.exe. For list: armcc --cpu list\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ARM/THUMB mode. Passing to armcc.exe. May be 'thumb' or 'arm'\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Path to cygwin binary\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Path to ARMCC of Keil MDK-ARM, with libraries, includes and executables\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# source CppUTest files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# armcc system include path\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Default dir for temporary files (d, o)\n\n# Default dir for the outout library\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Helper Functions\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Derived\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If we're using VPATH\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# gather all the source directories and add them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the component name to the objs dir path, to differentiate between same-name objects\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Without the C library, we'll need to disable the C++ library and ... \n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#This is the rule for creating the dependency files\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "platforms_examples/armcc/AT91SAM7A3/Makefile" : {
      "ObjectId" : "125f751eaadd486dac5ee23f184dbe31f153bd32",
      "LastModified" : "2016-03-29T06:14:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#We don't need to clean up when we're making these targets\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU architecture. Passing to armcc.exe. For list: armcc --cpu list\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ARM/THUMB mode. Passing to armcc.exe. May be 'thumb' or 'arm'\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Need to use only relative path! Path with logical letters does not working.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# directory for appication library\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# directory with CppUTest and startup libraries\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# name of extension of output file. Default Keil MDK-ARM extension is .axf which is elf format\n\n# .axf will be .elf for eclipse debug\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# output filename, mapfile (.map), hexfile (.mot)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CYGWIN path\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# armcc system include path\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# new and delete for memory leak detection on by default\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Use the standard C library\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Use the standard C++ library\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# No extentions is default\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# No VPATH is default\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Make empty, instead of 'N', for usage in $(if ) conditionals\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Without the C library, we'll need to disable the C++ library and ... \n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Link with CppUTest lib\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Link with startup lib\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Link with CppUTestExt lib\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#Helper Functions\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# исходники программных модулей\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# исходники тестов\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# If we're using VPATH\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# gather all the source directories and add them\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Add the component name to the objs dir path, to differentiate between same-name objects\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# for building application library\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#Don't create CRT dependencies when we're cleaning, for instance\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#Don't create dependencies when we're cleaning, for instance\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#This is the rule for creating the dependency files\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#This rule does the compilation C++ files\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#This rule does the compilation CC++ files\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#This rule does the compilation C files\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "src/CppUTest/CMakeLists.txt" : {
      "ObjectId" : "b2272b96babfed47f59e4e6c5c6716f2961fd56b",
      "LastModified" : "2019-03-30T19:17:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#[[Set CPP_PLATFORM in a parent CMakeLists.txt if reusing one of the provided platforms, else supply the missing definitions]]",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[[Arrange for the include directory to be added to the include paths of any CMake target depending on CppUTest.]]",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/CppUTestExt/CMakeLists.txt" : {
      "ObjectId" : "ddcf28f78e9e18ae5e88fb8f3b589a42b9cfb066",
      "LastModified" : "2019-03-30T19:17:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CppUTest/CMakeLists.txt" : {
      "ObjectId" : "7df07c1dddc955f39342d25c26690becddf17e02",
      "LastModified" : "2019-03-01T05:00:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CppUTestExt/CMakeLists.txt" : {
      "ObjectId" : "b83ceb2cfdc4c7fccd52babf437d017aa5450bb7",
      "LastModified" : "2019-03-01T05:00:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 11,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 4,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1965
}