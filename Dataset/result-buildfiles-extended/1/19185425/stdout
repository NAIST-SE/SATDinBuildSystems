{
  "Repository" : "19185425",
  "Revision" : "HEAD",
  "ObjectId" : "70efa62e4dda9c023dfaa5f011c98b6a10c8ca68",
  "CommitTime" : "2019-04-17T04:07:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c1e0f5fd329e54e18b67302e4782ffafe909adfa",
      "LastModified" : "2019-02-03T00:22:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################ -*- cmake -*- #########\n\n# General warnings, instructions, and style guide.\n\n########################################################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 1. Please be careful about where to put your tests and variable settings. The order matters!!\n\n#\n\n# 2. CMake configuration files are neither completely case-sensitive nor completely case-insensitive. Therefore, to\n\n#    avoid errors, assume everything is case sensitive. Prefer lower case for function names.\n\n#\n\n# 3. Do not use argument turds in \"else()\" and \"endif()\" functions. Those arguments are only comments and are entirely\n\n#    redundant with the \"if()\" argument and easily become out of date and misleading since nobody actually reads them.\n\n#\n\n# 4. All messages should start with a capitalized word except in special circumstances where capitalization would be\n\n#    incorrect (such as the name of a command).\n\n#\n\n# 5. Indentation is two spaces. Do not use ASCII horizontal tab characters for indentation or alignment.\n\n#\n\n# 6. As with standard mathematical notation, there should be no white space on either side of a function's\n\n#    parentheses. This includes functions such as \"if\", \"else\", and \"endif\".\n\n#\n\n# 7. Prefer FALSE and TRUE as Boolean values since these are the names used in Mathematics and most other computer\n\n#    languages. Avoid OFF, ON, NO, YES, 0, 1, and especially avoid mixing them.\n\n#\n\n# 8. If a CMakefile file needs to be conditionally enabled, do it in that CMake file rather than around the\n\n#    add_subdirectory in the level above. This keeps all the logic for a directory in a single file rather than\n\n#    split across two files. It is a bit unfortunate that CMake can't find the lower-level CMakeList files\n\n#    on its own, so some of the logic is still necessarily in the level above.  There are exceptions to this rule,\n\n#    and they're pretty obvious when they occur--as when a single if() protects a whole bunch of add_subdirectory.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################################################\n\n# Platform-independent settings\n\n########################################################################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake 2.8.12 and newer has support for using @rpath in a target’s install name. This was enabled by setting the target\n\n# property MACOSX_RPATH. The @rpath in an install name is a more flexible and powerful mechanism than @executable_path\n\n# or @loader_path for locating shared libraries.\n\n#\n\n# CMake 3.0 and later prefer CMP0042 to be ON by default. Projects wanting @rpath in a target’s install name may remove\n\n# any setting of the INSTALL_NAME_DIR and CMAKE_INSTALL_NAME_DIR variables.\n\n#\n\n# CMP0042 was introduced in CMake version 3.0. CMake version 3.0.2 warns when the policy is not set and uses OLD\n\n# behavior.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMP0054 causes CMake to only interpret \"if()\" arguments as variables or keywords when unquoted. CMake 3.1 and above no\n\n# longer implicitly dereference variables or interpret keywords in an if() command argument when it is a Quoted Argument\n\n# or a Bracket Argument. The OLD behavior for this policy is to dereference variables and interpret keywords even if\n\n# they are quoted or bracketed. The NEW behavior is to not dereference variables or interpret keywords that have been\n\n# quoted or bracketed.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# In CMake 3.12 and above the find_package(<PackageName>) command now searches prefixes specified by the\n\n# <PackageName>_ROOT CMake variable and the <PackageName>_ROOT environment variable. Package roots are maintained as a\n\n# stack so nested calls to all find_* commands inside find modules also search the roots as prefixes. This policy\n\n# provides compatibility with projects that have not been updated to avoid using <PackageName>_ROOT variables for other\n\n# purposes.  The OLD behavior for this policy is to ignore <PackageName>_ROOT variables. The NEW behavior for this\n\n# policy is to use <PackageName>_ROOT variables.\n\n#\n\n# Behavior is set to \"NEW\" because ROSE matrix testing, Livermore's LC RZ/CZ resources, Spack, and RMC/Spock seldom\n\n# install ROSE software dependencies in standard locations because they need to support the ability to install multiple\n\n# versions and configurations of the dependencies.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This controls whether the \"cmake\" command is verbose. It has nothing to do with the verbosity the resulting Makefiles.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# FIXME: Why do we have to have a copy of some standard built-in modules inside rose?\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ROSE source and build (binary) directory hierarchies\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "########################################################################################################################\n\n# ROSE version information\n\n########################################################################################################################\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Get the Git HEAD commit SHA1\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Author time (%at) of the HEAD commit\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# All distributions of ROSE also have a ROSE_VERSION file with a dotted version that's updated during the ROSE release\n\n# process.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Results\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################################################################\n\n# Initialize the leading part of the Rose::initialize token\n\n########################################################################################################################\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Configuration synopsis used by Rose::initialize.  The ROSE_CONFIG_TOKEN is #define'd as a string in rose_config.h and\n\n# ultimately rosePublicConfig.h and the string is a synopsis of some important configuration details. This string is\n\n# passed by user code to the Rose::initialize function which compares it against the same macro compiled into the ROSE\n\n# library. If their contents differ it means that the ROSE header files being used by the user are not the same as the\n\n# ROSE header files that were used to compile librose being linked by the user and bad things will probably happen.\n\n#\n\n# The CMake ROSE_CONFIG_TOKEN variable is the string that becomes the eventual value of the ROSE_CONFIG_TOKEN C\n\n# preprocessor macro.  We initialize it here, but other parts of the CMake file might augment its value with additional\n\n# information (e.g., adding the boost version number).\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################################################################\n\n# Boost libraries\n\n########################################################################################################################\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Honor BOOST_HOME environment variable\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# FIXME: 1.47 is no longer supported by ROSE, but is what's installed on Jenkins' CMake test machine. This should\n\n#        be changed to the actual minimum supported version once Pei-Hung upgrades the machine. [Matzke 2019-01-21]\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# If the boost is compiled with multi-thread support then we must add \"-pthread\" to all compile and link commands, or\n\n# whatever is appropriate for the system.  With GCC it is not sufficient to just add \"-lpthread\" to the link\n\n# commands--the \"-pthread\" switch MUST be added to the compile commands as well.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Paths to install header, executable, and libraries\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# A new definition to tweak code for cmake\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ROSE configuration variables for Boost\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "########################################################################################################################\n\n# ROSETTA\n\n########################################################################################################################\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "########################################################################################################################\n\n# Compiler toolchain features\n\n########################################################################################################################\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# /TP to indicate files are C++\n\n# / CLR common intermediate language\n\n# /GL whole program optimization\n\n# /O1 optimization for small files\n\n# /Ob0 disable inline expansion\n\n# /MP multiple processors compilation\n\n# /0s small files\n\n# /wd4716 to turn no return to a warning and not an error\n",
        "Line" : 303,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Ensure C++11 ABI compatibility\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Set ROSE_SHLIBPATH_VAR.  For Visual Studio, this is PATH.  Otherwise, it is just LD_LIBRARY_PATH.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "########################################################################################################################\n\n# Analyzable languages supported by ROSE\n\n########################################################################################################################\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Binary analysis\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# C/C++\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# CUDA\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# OFF because lack of CUDA is not handled properly\n",
        "Line" : 363,
        "CharPositionInLine" : 47
      },
      "33" : {
        "Text" : "# Java\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# OpenCL\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Fortran\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# OFF because lack of OFP is not handled properly\n",
        "Line" : 396,
        "CharPositionInLine" : 54
      },
      "37" : {
        "Text" : "# check if gfortran was found\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# query gfortran version\n",
        "Line" : 406,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# PHP\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Python\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# X10\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Ada\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Jovial\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "########################################################################################################################\n\n# EDG (Edison Design Group) frontend C/C++ compiler\n\n########################################################################################################################\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Default EDG version\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Check if we need to download the EDG binary tarball\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# no need to display this message after the file has been downloaded\n",
        "Line" : 495,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# the compiled library, the downloaded library, or the dummy library\n",
        "Line" : 507,
        "CharPositionInLine" : 17
      },
      "49" : {
        "Text" : "########################################################################################################################\n\n# System features\n\n########################################################################################################################\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# A set of common features including endian, stdio.h, printf, size of long int, etc.\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# A collection of macros which extend the built-in cmake commands\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Database\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "########################################################################################################################\n\n# Miscellaneous user-selectable features\n\n########################################################################################################################\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# FIXME: All options should be in the affirmative (i.e., enable-whatever instead of disable-whatever)\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# To use Bison, set BISON_ROOT to the Bison installation prefix. To avoid Bison, use BISON_ROOT=none\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# To use Z3, set Z3_ROOT to the Z3 installation prefix. To avoid Z3, use Z3_ROOT=none.\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# To use YAML-CPP, set YAMLCPP_ROOT to the YAML-CPP installation prefix. To avoid YAML-CPP set YAMLCPP_ROOT=none.\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# To use Dlib, set DLIB_ROOT to the Dlib installation prefix. To avoid Dlib set DLIB_ROOT=none.\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# To use GCrypt, set GCRYPT_ROOT to the GCrypt installation prefix. To avoid GCrypt set GCRYPT_ROOT=none.\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# To use GPG-Error, set GPGERROR_ROOT to the GPG-Error installation prefix. To avoid GPG-Error set GPGERROR=none.\n",
        "Line" : 659,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Zlib is required by Boost. To find it in a special place, set ZLIB_ROOT to its installation prefix.\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# This is essential to find the right include path from either build or installation tree for a translator\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# this following line won't work since it only set the environment variable for cmake's session not for ctest\n\n# session. Still no good way to set it within cmake fortunately,\n",
        "Line" : 738,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "########################################################################################################################\n\n# Back-end compilers\n\n########################################################################################################################\n",
        "Line" : 750,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# define a global variable to collect all common linked third-party libraries for rose\n",
        "Line" : 791,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Check compilers and version numbers. The module is located in src/cmake/modules.\n",
        "Line" : 802,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# These are required to be defined even when C/C++ analysis is not enabled, but their values don't matter\n",
        "Line" : 808,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "########################################################################################################################\n\n# Summary of results\n\n########################################################################################################################\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# if you are building in-source, this is the same as CMAKE_SOURCE_DIR, otherwise\n\n# this is the top level directory of your build tree\n",
        "Line" : 824,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# if you are building in-source, this is the same as CMAKE_CURRENT_SOURCE_DIR, otherwise this\n\n# is the directory where the compiled or generated files from the current CMakeLists.txt will go to\n",
        "Line" : 828,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# this is the directory, from which cmake was started, i.e. the top level source directory\n",
        "Line" : 832,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# this is the directory where the currently processed CMakeLists.txt is located in\n",
        "Line" : 835,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# contains the full path to the top level directory of your build tree\n",
        "Line" : 838,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# contains the full path to the root of your project source directory,\n\n# i.e. to the nearest directory where CMakeLists.txt contains the PROJECT() command\n",
        "Line" : 841,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# set this variable to specify a common place where CMake should put all executable files\n\n# (instead of CMAKE_CURRENT_BINARY_DIR)\n",
        "Line" : 845,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# set this variable to specify a common place where CMake should put all libraries\n\n# (instead of CMAKE_CURRENT_BINARY_DIR)\n",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# tell CMake to search first in directories listed in CMAKE_MODULE_PATH\n\n# when you use FIND_PACKAGE() or INCLUDE()\n",
        "Line" : 853,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# this is the complete path of the cmake which runs currently (e.g. /usr/local/bin/cmake)\n",
        "Line" : 857,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# this is the CMake installation directory\n",
        "Line" : 860,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# this is the filename including the complete path of the file where this variable is used.\n",
        "Line" : 863,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# this is used when searching for include files e.g. using the FIND_PATH() command.\n",
        "Line" : 866,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# this is used when searching for libraries e.g. using the FIND_LIBRARY() command.\n",
        "Line" : 869,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# the complete system name, e.g. \"Linux-2.4.22\", \"FreeBSD-5.4-RELEASE\" or \"Windows 5.1\"\n",
        "Line" : 872,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# the short system name, e.g. \"Linux\", \"FreeBSD\" or \"Windows\"\n",
        "Line" : 875,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# only the version part of CMAKE_SYSTEM\n",
        "Line" : 878,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# the processor name (e.g. \"Intel(R) Pentium(R) M processor 2.00GHz\")\n",
        "Line" : 881,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# is TRUE on all UNIX-like OS's, including Apple OS X and CygWin\n",
        "Line" : 884,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# is TRUE on Windows, including CygWin\n",
        "Line" : 887,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# is TRUE on Apple OS X\n",
        "Line" : 890,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# is TRUE when using the MinGW compiler in Windows\n",
        "Line" : 893,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# is TRUE on Windows when using the CygWin version of cmake\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# is TRUE on Windows when using a Borland compiler\n",
        "Line" : 899,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Microsoft compiler\n",
        "Line" : 902,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# set this to true if you don't want to rebuild the object files if the rules have changed,\n\n# but not the actual source files or headers (e.g. if you changed the some compiler switches)\n",
        "Line" : 911,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# since CMake 2.1 the install rule depends on all, i.e. everything will be built before installing.\n\n# If you don't like this, set this one to true.\n",
        "Line" : 915,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# If set, runtime paths are not added when using shared libraries. Default it is set to OFF\n",
        "Line" : 919,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# set this to true if you are using makefiles and want to see the full compile and link\n\n# commands instead of only the shortened ones\n",
        "Line" : 922,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# this will cause CMake to not put in the rules that re-run CMake. This might be useful if\n\n# you want to use the generated build files on another machine.\n",
        "Line" : 926,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# A simple way to get switches to the compiler is to use ADD_DEFINITIONS().\n\n# But there are also two variables exactly for this purpose:\n\n#   CMAKE_C_FLAGS:   the compiler flags for compiling C sources, and\n\n#   CMAKE_CXX_FLAGS: the compiler flags for compiling C++ sources\n",
        "Line" : 930,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# Choose the type of build.  Example: SET(CMAKE_BUILD_TYPE Debug)\n",
        "Line" : 937,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# if this is set to ON, then all libraries are built as shared libraries by default.\n",
        "Line" : 940,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# the compiler used for C files\n",
        "Line" : 943,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# the compiler used for C++ files\n",
        "Line" : 946,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# if the compiler is a variant of gcc, this should be set to 1\n",
        "Line" : 949,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# if the compiler is a variant of g++, this should be set to 1\n",
        "Line" : 952,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# the tools for creating libraries\n",
        "Line" : 955,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "########################################################################################################################\n\n# ROSE headers are scattered throughout the source tree.\n\n########################################################################################################################\n",
        "Line" : 961,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "########################################################################################################################\n\n# Set output directories\n\n########################################################################################################################\n",
        "Line" : 1121,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# Set default output paths for libraries and directories.  This causes all the libraries to be built into a single lib\n\n# directory, and all the executables to be built into a single bin directory.  If these variables are not set, then by\n\n# default the targets will be littered throughout the binary directory, matching the structure of the source directory.\n\n#\n\n# Organizing the output of the build directory this way is important when building on Windows.  By default, Windows\n\n# .exes do not know where to find their required .dlls.  The easiest way to overcome this problem is by placing the .exe\n\n# and all its dependent .dlls in the same directory.  We accomplish this with CMake by setting\n\n# CMAKE_RUNTIME_OUTPUT_DIRECTORY.\n",
        "Line" : 1125,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# Set up RPATH so that our executables will be able to find their dependent\n\n# libraries using relative paths.\n",
        "Line" : 1137,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "########################################################################################################################\n\n# Recursion\n\n########################################################################################################################\n",
        "Line" : 1146,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# Recursion in CMake is not automatic. We have to tell it where the other CMakeList.txt files are located rather than\n\n# letting it find them automatically.\n",
        "Line" : 1150,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# Copy CTestCustom.cmake into the binary directory.  This file tells CTest to ignore some output that it otherwise\n\n# considers compilation errors.\n",
        "Line" : 1158,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "#TODO: better support for other compilers & operating systems\n",
        "Line" : 1162,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# In the Autools build system, ROSE stores compiler specific headers in two distinct locations:\n\n#    In the build tree, the directory is named $ROSE_BUILD/include-staging\n\n#    In the installation tree, the directory is named $ROSE_INSTALL/include\n\n# During make-install, the content of $ROSE_BUILD/include-staging is simply copied over into $ROSE_INSTALL/include.\n\n#\n\n# If a ROSE translator is detected as being run from the build tree, then the associated header file include paths\n\n# are added to the translator's command line, e.g. <translator> -I$ROSE_BUILD/include-staging/<path>. Similarly, if\n\n# the ROSE translator is detected as being run from the install tree, the command line will contain the associated\n\n# paths in the installation location, e.g. -I$ROSE_INSTALL/include/<path>\n\n#\n\n# The setup of CMake for ROSE, on the other hand, does not make this distinction. Instead, the CMake system utilizes\n\n# a single directory $ROSE_CMAKE_BIN/include for the same purpose.\n",
        "Line" : 1201,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "########################################################################################################################\n\n# Private and public build-time configuration files\n\n########################################################################################################################\n",
        "Line" : 1226,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# Private configuration file.\n\n#\n\n# The rose_config.h file contains CPP macros describing what features were detected during the configuration phase.\n\n# This file should not be installed and should not be #include'd into user-level code because it pollutes the global\n\n# name space.  This needs to be here at the end in order to catch all the variables defined above such as compiler\n\n# names, versions, etc.\n",
        "Line" : 1230,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "# Public configuration file.\n\n#\n\n# The rosePublicConfig.h header is generated from rose_config.h by copying certain CPP macros from rose_config.h to\n\n# rosePublicConfig.h and changing their names so as not to pollute the global name space.  See\n\n# scripts/publicConfiguration.pl for details.\n",
        "Line" : 1238,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "########################################################################################################################\n\n# Ancillary ROSE components. These are things that are not part of the ROSE library.\n\n########################################################################################################################\n",
        "Line" : 1245,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "########################################################################################################################\n\n# Miscellaneous final actions\n\n########################################################################################################################\n",
        "Line" : 1255,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "# These actions don't work on Linux Debian-based systems during \"make install\" and appear to not be necessary anyway.\n",
        "Line" : 1259,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# This has to remain the last subdirectory so that all the targets are installed before bundle.cmake runs.\n",
        "Line" : 1261,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# This include file defines how CPack should create our installers.\n",
        "Line" : 1264,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 124
    },
    "Makefile.am" : {
      "ObjectId" : "4e4146596edb8bb64d341d344da74e538db8efac",
      "LastModified" : "2019-03-29T23:32:49Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ \"config\" and \"src\" must preceed any other directories, and \n\n# \"tutorial\" and \"exampleTranslators\" must preceed \"docs\" since \n\n# they generate data that is subsequently used in the generated \n\n# ROSE documentation (examples, input codes, and generated output).\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/6/2010): changed the order of tests, the projects directory now follows the tests directory.\n\n# This was something that was discussed in email previously with the group.  Thei point is to have the\n\n# first tests run by make check be the most relevant tests (e.g. can we compile C++ code).\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (4/17/2010): Support for minimal configuration of ROSE (e.g. \"--enable-only-fortran\").\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We don't want \"make [all]\", \"make check\", or \"make install\", etc. to recurse into the tests/nonsmoke directory (unless\n\n# ROSE was configured using \"--with-ROSE_LONG_MAKE_CHECK_RULE\"). If you want to build something in the non-smoke area\n\n# you should \"cd\" do that directory first, as in \"make -C tests/nonsmoke ...\".\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (4/23/2011): Ignoring all of these whole directories might be over kill.  But I have had problems with \n\n# Insure++ compilation specific to Hudson and want to start small and work to grow the number of parts of ROSE\n\n# used by Insure.  Except on Hudson (e.g. on my machine) Insure++ can be used to compiler nearly all of ROSE.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The MatrixTestingProject is not compiled as part of ROSE but serves as a simple example of an external project.\n\n# Matrix testing will need to access this project and compile it after installing ROSE and deleting the ROSE source\n\n# and build trees. Therefore, this project's source code should be installed as part of the ROSE installation. These\n\n# rules are at this high level of the source code because this project must be installed even if the \"projects'\n\n# subdirectory doesn't participate in the $(SUBDIRS).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/6/2017): Added test to detect if the default mode of the C++ frontend compiler for rOSE is C++11 or not.\n\n# Ultimately we want this test to only apply to the GNU 4.8 compiler in C++11 mode (which can have internal errors \n\n# in compiling the C++ code represented by some more complex C++ test codes using ROSE).  Interestingly, the\n\n# GNU 4.8 C++11 mode works fine for the C++ code that implements ROSE itself.\n\n# if ROSE_USING_GCC_VERSION_4_8_CXX11\n\n#check-local:\n\n# all: remove_sage3basic_h_pch\n\n# all:\n\n#\t@echo \"**********************************************************************************************\"\n\n#\t@echo \"**********************************************************************************************\"\n\n#\t@echo \"Skipping tests in tutorial, exampleTranslators, docs, tools, scripts, and directories for\"\n\n#\t@echo \"GNU 4.8.x using C++11 mode (GNU 4.8 compiler has internal errors when using the C++11 mode).\"\n\n#\t@echo \"**********************************************************************************************\"\n\n#\t@echo \"**********************************************************************************************\"\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If we can't process the tutorial directory then we can't generate example translators or the documentation\n",
        "Line" : 66,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# endif for excluding tests using GNU 4.8 and C++11 mode together.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# endif for controling Insure++ usage.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Pei-Hung (12/06/2016) use \"aclocal --print-ac-dir\" to specify the include path to support both Linux and Mac\n\n#ACLOCAL_AMFLAGS = -I ./config -I ./acmacros -I ./libltdl -I /usr/share/aclocal\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Commmented out some very old projects, Liao, 2019 March\n\n#\t$(MAKE) install -C $(top_builddir)/projects/LineDeleter\n\n#\t$(MAKE) install -C $(top_builddir)/projects/mint\n\n#\t$(MAKE) install -C $(top_builddir)/projects/xgenTranslator\n\n#\t$(MAKE) install -C $(top_builddir)/projects/OpenMP_Translator\n\n#\t$(MAKE) install -C $(top_builddir)/projects/vectorization\n\n#\t$(MAKE) -C $(top_builddir)/projects/mint\n\n#\t$(MAKE) -C $(top_builddir)/projects/LineDeleter\n\n#\t$(MAKE) install -C $(top_builddir)/projects/vulnerabilitySeeding\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\t$(MAKE) -C $(top_builddir)/projects/vulnerabilitySeeding\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Install ONLY the library components (no examples, no tests, no projects). This is even more \"core\" than \"core\" but I'm\n\n# not changing \"install-core\" because users use that and expect certain behavior. The purpose of this target is mainly for\n\n# ROSE project developers that have a need to install the library and other specific tools (via other install targets) but\n\n# don't want to install anything else (perhaps because it doesn't compile). [Robb Matzke, 2016-03-07]\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build a binary release of the ROSE library.  This assumes that you're running in the RMC-2 environment because it uses\n\n# some \"make\" variables that are initialized from shell exported variables. Other build environments will need other targets.\n\n#\n\n# It installs whatever is in the ROSE installation prefix, but at least the ROSE library and supporting header files.\n\n#\n\n# We cannot distribute Oracle Java because it requires the user to agree to a license. The user must download it themselves.\n\n#\n\n# We cannot distribute CXX_ROOT or C_ROOT because it might be pointing to an Intel compiler, which needs to be purchased\n\n# by the user.\n\n#\n\n# We cannot distribute Yices because it requires the user to agree to a license. The user must download it themselves.\n\n#\n\n# We should not distribute /usr or /usr/local as these are general locations with lots of other software.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (10/2/10): Of course this will over-rise the \"make install\" rule, so we can't \n\n# allow exactly this (what was I thinking?). Commented out until I get a better fix.\n\n# DQ (9/29/2010): Next three lines are a modification suggested by Scott Warren to \n\n# support Eclipse.  Supports Eclipse feature called \"makefile project with existing code\" \n\n# which wants to have a single target to force the build.\n\n#.PHONY: all-install\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#all-install: all install\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#install: all\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# These are policies that we'd like to enforce for ROSE developers.  Things like:\n\n#    1. source files should not use CR+LF line termination common on Windows platforms\n\n#    2. header files should not include certain ROSE headers like \"rose.h\"\n\n#    3. file names must be unique on a case-insensitive file system\n\n#    4. header files must not have names that conflict with headers in other directories\n\n#    5. etc.\n\n# DO NOT DISABLE without first checking with a ROSE core developer\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# for use by policy scripts\n",
        "Line" : 230,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "# Most checks in ROSE are named \"check-whatever\", so do the same for policy checking\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (6/29/2004): I don't think we need this!\n\n# LIBS = @LIBS@ ${SAGE_LIBS}\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# It seems that it is better to handle the config directory with its own Makefile.am\n\n# This allows us to hide autoconf accessory files (config.guess, etc.)\n\n# Copy the config directory to the distribution: why?\n\n# (because it has the file: config/Makefile.for.ROSE.includes.and.libs)\n\n# EXTRA_DIST = stamp-h.in stamp-h1.in GNU_HEADERS config\n\n# EXTRA_DIST = stamp-h.in stamp-h1.in GNU_HEADERS COPYWRITE ROSE_ResearchPapers\n\n# EXTRA_DIST = cmake CMakeLists.txt rose_config.h.in.cmake stamp-h.in stamp-h1.in COPYRIGHT \\\n#              LicenseInformation ROSE_ResearchPapers README.OSX README.Cygwin build ChangeLog2 bincompat-sig\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The bincompat-sig file contains the SHA1 part of the EDG binary tarball name and must be generated anew\n\n# each time we make a distribution because we don't want to distribute stale information.\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# At some point we want to put tals into the distribution (likely just PDF files, but not yet).\n\n# ROSE_Talks\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# clean-local explanation:\n\n# Remove template repositories.  No source code is compiled, but configuration\n\n#   tests may have created template repositories here.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Not sure if this should be part of the clean-local rule.\n\n# chmod -R +rwx rose-0.9.5a; rm -rf rose-0.9.5a\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (9/8/2006): Modified to remove backend specific header files\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\trm -rf $(DESTDIR)$(includedir)/*_HEADERS\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# DQ (10/14/2010): We want to make sure that this does not go out to the install tree\n\n# it also should not be in the distribution (since we want rose_config.h.in to be put \n\n# into the distribution instead; from which then rose_config.h is generated).\n\n# However, the public version should be installed and distributed.\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# DQ (4/5/2009): This rule is not called when compiling this directory, it is only\n\n# called when compiling the /src/util directory (perhaps it should be located in \n\n# that directory's Makefile.am.\n\n# DQ (12/3/2007): Added rose_paths.h so that it would be copied to the install tree.\n\n# JJW (8/25/2008): Changed to a .c file\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\tDQ (11/1/2011): The EDG 4.x support does not require a separate include-staging directory.\n\n#\tif !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\tendif\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# DQ (4/22/2005): Set this so that make distcheck will use the same \n\n# --with-edg_source_code=true/false option as were used at configure.\n\n# JJW (5/14/2008): Add the Boost flag the same way, using an internal\n\n# variable from AX_BOOST_* to find the argument to --with-boost when\n\n# this copy of ROSE was originally configured.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# DQ (7/25/2008): If ROSE was originallly configured with Fortran (by tuning \n\n# on the java support) then make sure it is tested as part of the distcheck rule.\n\n# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# DISTCHECK_CONFIGURE_FLAGS += --with-java\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# DQ (10/22/2010): Added specification of --without-java to distcheck rule.\n\n# If we have first built without java then we have had to build some of the\n\n# Fortran language supporting files as empty files and thus we don't want to\n\n# run distcheck in a way that would use those files. However the problem\n\n# when this is not used has more to do with the Java langauge support.\n\n# A better reason why this is required might be so that we can run the NMI tests.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# TOO (3/24/2011): TODO: the new language-support configuration that I've\n\n# implemented does not automatically disable fortran, whereas the previous\n\n# implementation did. Since we now have Java-language support, the\n\n# --without-java flag is confusing. I thought it meant \"without java-language\n\n# support\". Speaking with Dan, we concluded that we need to look at renaming\n\n# --without-java to something else like --without-jvm or --without-java-components\n\n# This flag is suppose to turn off all parts of ROSE that use Java: \n\n# projects/javaports, java- and fortran-language support, etc.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# DQ (7/25/2008): If ROSE was originallly configured to use the HPC Toolkit\n\n# then make sure it is tested as part of the distcheck rule.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# DQ (7/25/2008): If ROSE was originallly configured to use the javaport\n\n# work (generation of Java interface functions for ROSE using SWIG) then \n\n# make sure it is tested as part of the distcheck rule.\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DQ (4/5/2010): Use the same version of OFP as specified on the original configure command line.\n\n# CER (10/10/2011): No longer needed. A specific OFP version is configured by default and distributed with ROSE.\n\n#DISTCHECK_CONFIGURE_FLAGS += --enable-ofp-version=@ROSE_OFP_MAJOR_VERSION_NUMBER@.@ROSE_OFP_MINOR_VERSION_NUMBER@.@ROSE_OFP_PATCH_VERSION_NUMBER@\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# SRIRAM (8/2/2010): changing distcheck configuration for LLVM translator\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# DQ (4/22/2005): To make clear when binaries are in the distribution as \n\n# opposed to EDG source code we rename the final generated distribution.\n\n# JJW (8/3/2008): This is only used for source distributions now --\n\n# source_with_binary_edg_dist does its own renaming\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# We reset distdir as shown on\n\n# http://jcalcote.wordpress.com/2008/02/23/autoconf-macros-exposed-at3/ to add the SVN\n\n# revision number\n\n# The final distribution package should be\n\n# rose-0.9.5a-8286.tar.gz\n\n#\n\n# Liao 12/14/2009\n\n# We don't use subversion anymore\n\n# We convert the number of git commits to a pseudo revision number instead\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Automake hook-ish rule to be run after dist rule (but hook runs before gzip so we can't use hook)\n\n# We could build our own ROSE specific wrapper for dist and distcheck.\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# hook rule to be run after distcheck rule\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# CLEANFILES = rose_binary_compatibility_signature rose_binary_compatibility_signature_src\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#\tdu -a | grep rose_performance_report_lockfile\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# New rule to simplify generation of documentation (we want to avoid using the\n\n# automake generated \"docs\" rule because the generation of documentation is\n\n# dependent upon separate tools which the user might not have available\n\n# (true for bothe the LaTeX and html documentation).\n\n# DQ (7/23/2004): Since there is a \"docs\" subdirectory we need to force the build!\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# DQ (7/25/2008): Running \"make docs\" introduces dependences that are inappropriate\n\n# for a distribution.\n\n# Liao (9/26/2013) We no longer support haskellport as part of the migration to EDG 4.x based ROSE\n\n#\t   $(MAKE) -Cprojects/haskellport docs && \n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# 1\n\n# This rule generates the simple binary tarball for the directories: EDG and EDG_SAGE_Connection\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Makefile rule to test the Hudson runTest script (used for all Hudson tests).\n\n# Note that empty ROSE_TEST_BUILD_STYLE maps to a minimal build.\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# This will cause the Hudson environment to be dumped to a file so that\n\n# it can be sourced to reproduce the environment required to run tests\n\n# in the hudson tmp directories as part of debugging.\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# $(top_srcdir)/scripts/hudson/testHudsonRunScript.sh;\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# DQ (12/16/2009): Added interesting \"git\" feature by Liao.\n\n# It is unclear if it is very meaningful since it represents \n\n# individual work style more than anything else (but it's fun).\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# This rule is useful for identifing source files where \"rose_config.h\" should be included.\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#\tgrep \"#define\" rose_config.h | cut --delimiter=\" \" -f 2 \n\n#\t@list=`grep \\\"\\#define\\\" rose_config.h | cut --delimiter=\" \" -f 2`; for f in $$list; do \n\n#\tlist=`ls -l | cut --delimiter=\" \" -f 2`; for f in $$list; do\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# This rule is useful for identifing header files where \"rose_config.h\" is required and \n\n# thus should be fixed to not require this file. In the case of #undef it is represented \n\n# as \"/* #undef\" so we have to detect and remove the \"/* \" using sed.\n\n# And ignore the macro definitions for \"const|error_t|inline|off_t|size_t\".\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# ***********************************************************\n\n#      Display Which Automake Conditionals Are Defined\n\n# ***********************************************************\n\n# DQ (10/18/2010): Added test for names used in automake conditional macros\n\n# (eventually we want tests for consistancy).  This rule generates a makefile\n\n# containing a makefile rule. The makefile rule can be run to see what automake\n\n# conditionals were defined in the last run of configure. It might be that \n\n# this mechanism should be in a script generated by the build script, but we \n\n# need an initial version of the generated script to be checked into git so that \n\n# the build script can find it.  Note that we grep the Makefile.in instead of\n\n# the Makefile.am (which would be more difficult, I think). So we need the\n\n# Makefile.in from runing the build script first.  Thus having the generated\n\n# file checked into git avoids a dependence on a file that we would not have.\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#\tgrep -r \"^AM_CONDITIONAL\" $(top_srcdir) | $(FILTER_AUTOMAKE_CONDITONALS)\n\n#\tgrep \"_TRUE@\" $(top_srcdir)/Makefile.in | grep \"@\" | cut --delimiter=\"@\" -f 2 | sed s/_TRUE//g | sort --unique | grep -v \"top_srcdir\"\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#\tThis can't be run since it can't be processed through automake and autoconf.\n\n#\t$(MAKE) -f $(TEST_FILE) automake_conditional_display\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# This is a test of the new make rule added in the file $(TEST_FILE).\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Include this file (generated first by the rule down below and checked into our git repository).\n\n# This could be generated by our build script.\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# ***********************************************************\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# DQ (10/18/2010): These are used all over within a line (so don't use start of line anchor).\n\n# (eventually we want tests for consistancy)\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# DQ (2/12/2010): Report the areas of ROSE where we have skipped some tests of ROSE \n\n# either doing analysis, code generation, or translation of the ROSE source code.\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#\techo \"Files where ROSE does not analyze some amount of code (test of CXX_IS_ROSE_TRANSLATOR in each ROSE source file).\"\n\n#\tgrep -rl CXX_IS_ROSE_TRANSLATOR $(top_srcdir) | grep \"\\.C\"\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Report the version number of the ROSE translator built.\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Generate public version of rose_config.h, which is triggered by the AC_CONFIG_COMMANDS macro near the end\n\n# of config/support-rose.m4 whenever config.status runs.\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# This file does not exist until we run the compiler to build it.\n\n# include $(top_builddir)/src/frontend/SageIII/astPostProcessing/.libs/astPostProcessing.d\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "################################################################################\n\n# Makefile specific to Intel codecov process generated *.dyn files \n\n# generated by Intel's codecov option to the Intel icc and icpc compilers.\n\n################################################################################\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# For Intel's code coverage tool (codecov) we need to avoid the *.dyn files from being \n\n# built across the whole directory structure. So use the -prof-dir option to force them \n\n# into a single directory to simplify processing.  Then use the profmerge utility to \n\n# merge them into a single pgopti.dpi file.  Then process the pgopti.dpi file with the \n\n# codecov utility to generate the HTML file and directory of HTML files).\n",
        "Line" : 660,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# configure using:\n\n# --with-C_DEBUG=\"-g -prof-dir /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-intel-v14--dq-development-rc-code_coverage -prof-gen=srcpos\" \n\n# --with-CXX_DEBUG=\"-g -prof-dir /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-intel-v14--dq-development-rc-code_coverage -prof-gen=srcpos\"\n\n#\n\n# Then run \"make -ki -j24 check\" to generate all of the *.dyn files.\n\n# Note that \"-ki\" is required because currently a few test files will demonstrate Intel specific errors.\n\n# Also, the number of *.dyn files will be large (many thousand files) and the diskspace requirements are also large (~200Gig?).\n\n#\n\n# The code coverage results can be see from the CODE_COVERAGE.HTML file in the top level of the build tree.\n\n#\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# All *.dyn files should be in the top level directory.\n",
        "Line" : 685,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "################################################################################\n\n# Makefile specific to lcov comment to process generated *.gcda and *.gcno files \n\n# generated by GNU's gcov option to the GNU gcc adn g++ compilers.\n\n################################################################################\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# lcov command to generate the html files.\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# lcov command to generate the html files.\n",
        "Line" : 784,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# DQ (2/22/2016): We can't include directories that ere not configured.\n\n# -d src/frontend/CxxFrontend/EDG/EDG_4.9/misc\n\n# -d src/frontend/CxxFrontend/EDG/EDG_4.9/src/.libs\n\n# -d src/util/Sawyer \n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# DQ (2/22/2016): The file genhtml has an error.\n\n#   ERROR: cannot read /export/tmp.schordan1/development/rosework/mainbranch/rose/src/midend/astMatching/matcherlexer.ll\n\n# So we can't process this directory.\n\n# -d src/midend/astMatching/.libs\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# DQ (2/22/2016): The file genhtml has an error.\n\n# genhtml: ERROR: cannot read /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-4.8.3--dq-development-rc-lcov/src/3rdPartyLibraries/POET/poet_yacc.y\n\n# So we can't process this directory.\n\n# -d src/3rdPartyLibraries/POET/.libs \n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Initial result (2/22/2016):\n\n# Overall coverage rate:\n\n#   lines......: 42.7% (377904 of 885133 lines)\n\n#   functions..: 53.0% (100721 of 189865 functions)\n",
        "Line" : 803,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "########################################################################################################################\n\n# Robb's version of lcov commands, although they should work anywhere.\n\n########################################################################################################################\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# We want to snarf up all the *.gcno and *.gcda files in the build tree, but lcov will refuse to recurse into\n\n# subdirectories when the parent directory has no such files, so list the directories explicitly. The sort is\n\n# only so we have some idea of the progress of the long-running command to create lcov.info.\n",
        "Line" : 812,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Capture *.gcda files from the build tree for whatever programs we've happened to run so far. This could be\n\n# the ROSETTA-generator plus any tests, tutorials, and projects.  This can take a long time to run!\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Capture only coverage for the ROSE library source code (no tests, tutorials, projects, system headers, boost, etc).\n\n# DQ (3/26/2017): Removed CodeThorn from being included in lcov results (CodeThorn testing is still done to test ROSE \n\n# and those results are a part of the cover coverage for ROSE.\n\n# DQ (3/13/2017): Modified to remove specific directories of old code to be removed from ROSE and 3rd party code that we do not maintain.\n\n# (04/26/2016) Pei-Hung lcov has issue to output extracted result to librose-lcov.info with -o option. Using piping instead.\n\n#\tlcov --extract $< \"$(top_srcdir)/src/*\" \"$(top_srcdir)/projects/CodeThorn/*\" > $@\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Note: astVisualization is only approriate for small ASTs and for debugging so excluded from code coverage analysis.\n\n#       sageGeneric.h causes 1274 template instantiations, and we only have a test for one of them (so this file is a problem due to how lcov handles template instantaitions.\n\n#       DQ (3/30/2017): Removed src/midend/astProcessing/AstProcessing.h file because it's template use is not handled accurately by lcov (wildly incorrect).\n",
        "Line" : 859,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# DQ (4/9/2017): After getting better coverage, the ultimate limitation proved to be the poor template handling within LCOV to support more significant coverage results.\n\n# DQ (4/5/2017): This fails with GNU 6.1 and Boost 1.51 and Boost 1.52, but it is now called and should contribute to code coverage so let it back in as a test.\n\n#       \"$(top_srcdir)/src/frontend/SageIII/sageInterface/sageGeneric.h\" \n",
        "Line" : 863,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Directories to remove from LCOV testing of ROSE:\n\n# src/frontend/CxxFrontend/EDG/edgRose/debugging.*\n\n# src/frontend/CxxFrontend/EDG/edgRose/edgGraph.*\n\n# src/backend/unparser/PythonCodeGeneration/*\n\n# src/backend/unparser/PHPCodeGeneration/*\n\n# src/midend/programAnalysis/OAWrap/*\n\n# src/midend/programAnalysis/OpenAnalysis/*\n\n# src/midend/programAnalysis/genericDataflowflow/*\n\n# src/frontend/CxxFrontend/EDG/EDG_4.9/*\n\n# src/midend/astRewriteMechanism/*\n\n# src/midend/programAnalysis/dominanceAnalysis/*\n\n# src/midend/programAnalysis/pointerAnal/*\n\n# src/midend/programAnalysis/ssaUnfilteredCfg/*\n\n# src/src/midend/programAnalysis/staticInterproceduralSlicing/*\n\n# src/midend/programAnalysis/staticSingleAssignment/*\n\n# src/midend/programAnalysis/staticSingleAssignment/*\n\n# src/midend/programAnalysis/variableRenaming/*\n\n# src/midend/programTransformation/extractFunctionArgumentsNormalization/*\n\n# src/midend/programTransformation/finiteDifferencing/*\n\n# src/midend/programTransformation/functionCallNormalization/*\n\n# src/midend/programTransformation/implicitCodeGeneration/*\n\n# src/midend/programTransformation/singleStatementToBlockNormalization/*\n\n# src/roseSupport/stringify.C\n\n# \n\n# \n\n# Directories to remove from ROSE:\n\n# src/midend/programAnalysis/dominanceAnalysis\n\n# src/midend/programAnalysis/pointerAnal\n\n# src/midend/programAnalysis/ssaUnfilteredCfg\n\n# src/midend/programAnalysis/staticInterproceduralSlicing\n\n# src/midend/programAnalysis/staticSingleAssignment\n\n# src/midend/programAnalysis/variableRenaming\n\n# src/midend/programTransformation/extractFunctionArgumentsNormalization\n\n# src/midend/programTransformation/finiteDifferencing\n\n# src/midend/programTransformation/functionCallNormalization\n\n# src/midend/programTransformation/implicitCodeGeneration\n\n# src/midend/programTransformation/singleStatementToBlockNormalization\n\n# \n\n# May be removed in the future (to be discussed) DQ (3/13/2017):\n\n# src/midend/programTransformation/constantFolding\n\n# src/midend/programTransformation/ompLowering\n\n# src/midend/programTransformation/partialRedundancyElimination \n\n#\n\n# These should not be evaluated using lcov (to be discussed) DQ (3/13/2017):\n\n# src/roseSupport/stringify.C \n\n#      Generated file, placed in source tree because it took a long time to generate when it was put into the build tree).\n\n#      A few functions from this file are tested (14 of 864), but not all.\n\n#      This file could only be tested using an automatically generated test and that might no be productive.\n\n#\n\n#\n\n# What is this:\n\n# src/midend/abstractMemoryObject  (DTEC work by Liao)\n\n# \n\n#\n\n# Why are these so poorly tested:\n\n# src/midend/programTransformation/astInlining\n\n# src/midend/programTransformation/astOutlining\n\n# \n\n# \n\n# \n",
        "Line" : 879,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# Generate a directory containing the HTML representation of the coverage information for the ROSE library proper.\n\n# THIS INCLUDES EDG SOURCES; DO NOT DISTRIBUTE THIS DIRECTORY\n",
        "Line" : 941,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 89
    },
    "acmacros/CMakeLists.txt" : {
      "ObjectId" : "1dc52482b2cc03662b915f7c9c89022c2f627717",
      "LastModified" : "2009-11-02T02:47:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## This is just a makefile for testing acmacros.\n\n## $Id: Makefile.am,v 1.2 2008/01/10 18:14:20 dquinlan Exp $\n\n#\n\n#ACLOCAL = @ACLOCAL@ -I .\n\n#AUTOMAKE = @AUTOMAKE@ -a\n\n#\n\n#show: show-acsubst show-config\n\n#\n\n#\n\n## Rule to show configure substitutions\n\n#show-acsubst: Makefile\n\n#\t@echo \"========== Configure substitutions ==========\";\t\\\n\n#\tpattern=`echo $(SUBST_SHOW) | @SED@ 's/[ \t]\\{1,\\}/\\|/g'`; \\\n\n#\t: echo \"pattern is '$$pattern'\"; \\\n\n#\t@EGREP@ \"^($$pattern)[ \t]+=\" Makefile | sort\n\n#\n\n#\n\n## Rule to show configure macros\n\n#show-config: config.h\n\n#\t@echo \"========== config.h macros ==========\";\t\\\n\n#\tpattern=`echo $(CONFIG_SHOW) | @SED@ 's/[ \t]\\{1,\\}/\\|/g'`; \\\n\n#\t: echo \"pattern is '$$pattern'\"; \\\n\n#\t@EGREP@ \"[[:space:]]*#(define|undef)[ \t]+($$pattern)\" config.h\n\n#\n\n## Rule to force rerunning aclocal.\n\n#acloc:\n\n#\tcd $(top_srcdir) && $(ACLOCAL)\n\n#\n\n## Rule to rerun preconf\n\n#pre:\n\n#\tcd $(top_srcdir) && ./preconf\n\n#\n\n## Rule to reconfigure.\n\n#reconf:\n\n#\tcd $(top_builddir) && ./config.status --recheck\n\n#\n\n## Remove .psrc links files.\n\n#distclean-local:\n\n#\t$(btng_remove_auto_psrc_links)\n\n#\n\n#EXTRA_DIST =\t\\\n\n#aux/.psrc.in t4/parallel-serial-runner.in\t\\\n\n#arg-with-environment.m4\t\\\n\n#check-typename.m4\t\\\n\n#choose-mp-interface.m4\t\\\n\n#compiler-ar.m4\t\\\n\n#compiler-id.m4\t\\\n\n#compiling-boolean.m4\t\\\n\n#compiling-namespace.m4\t\\\n\n#compiling-stl.m4\t\\\n\n#configure-log.m4\t\\\n\n#find-all-progs.m4\t\\\n\n#link-to-source.m4\t\\\n\n#specify-ar.m4\t\\\n\n#support-blaslapack.m4\t\\\n\n#support-dl.m4\t\\\n\n#support-fortran.m4\t\\\n\n#support-hdf5.m4\t\\\n\n#support-hypre.m4\t\\\n\n#support-ieee-float.m4\t\\\n\n#support-insure.m4\t\\\n\n#support-lam.m4\t\\\n\n#support-libz.m4\t\\\n\n#support-mpich.m4\t\\\n\n#support-mpi.m4\t\\\n\n#support-nsl.m4\t\\\n\n#support-petsc.m4\t\\\n\n#support-restrict.m4\t\\\n\n#support-rpath.m4\t\\\n\n#support-samrai.m4\t\\\n\n#support-serpa-run.m4\t\\\n\n#support-socket.m4\t\\\n\n#variable-header-filenames.m4\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "acmacros/Makefile.am" : {
      "ObjectId" : "7e93798964047a29c952839db48e6fa82a474bab",
      "LastModified" : "2009-11-04T00:05:45Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This is just a makefile for testing acmacros.\n\n# $Id: Makefile.am,v 1.2 2008/01/10 18:14:20 dquinlan Exp $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rule to show configure substitutions\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Rule to show configure macros\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Rule to force rerunning aclocal.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Rule to rerun preconf\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Rule to reconfigure.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Remove .psrc links files.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "8497709bb38243dd853abfe0bfca1339d9c88b8d",
      "LastModified" : "2014-06-18T14:52:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CheckIfTypeExists.cmake" : {
      "ObjectId" : "6118276d61aed23dc04a7ce03918ad6e8ab6614d",
      "LastModified" : "2014-06-18T14:52:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the given struct or class has the specified member variable\n\n# CHECK_STRUCT_MEMBER (STRUCT MEMBER HEADER VARIABLE)\n\n#\n\n#  STRUCT - the name of the struct or class you are interested in\n\n#  MEMBER - the member which existence you want to check\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CheckTypeExists.cmake" : {
      "ObjectId" : "6118276d61aed23dc04a7ce03918ad6e8ab6614d",
      "LastModified" : "2014-06-18T14:52:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the given struct or class has the specified member variable\n\n# CHECK_STRUCT_MEMBER (STRUCT MEMBER HEADER VARIABLE)\n\n#\n\n#  STRUCT - the name of the struct or class you are interested in\n\n#  MEMBER - the member which existence you want to check\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ConfigureChecks.cmake" : {
      "ObjectId" : "c0d4f266dcb18e035119790133e973599a2cc517",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of LyX, the document processor.\n\n# Licence details can be found in the file COPYING.\n\n#\n\n# Copyright (c) 2006, Peter K�mmel, <syntheticpp@gmx.net>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#check_include_file_cxx(istream HAVE_ISTREAM)\n\n#check_include_file_cxx(ostream HAVE_OSTREAM)\n\n#check_include_file_cxx(ios HAVE_IOS)\n\n#check_include_file_cxx(sstream HAVE_SSTREAM)\n\n#check_include_file_cxx(locale HAVE_LOCALE)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#      include(TestForHighBitCharacters)\n\n#      if(CMAKE_HIGH_BIT_CHARACTERS)\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#      endif(CMAKE_HIGH_BIT_CHARACTERS)\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Define to 1 if you can safely include both <sys/time.h> and <time.h>\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define to 1 if your <sys/time.h> declares `struct tm'. */\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#check_cxx_source_compiles(\n\n#\t\"\n\n#\t#include <algorithm>\n\n#\tusing std::count;\n\n#\tint countChar(char * b, char * e, char const c)\n\n#\t{\n\n#\t\treturn count(b, e, c);\n\n#\t}\n\n#\tint main(){return 0;}\n\n#\t\"\n\n#HAVE_STD_COUNT)\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#check_cxx_source_compiles(\n\n#\t\"\n\n#\t#include <cctype>\n\n#\tusing std::tolower;\n\n#\tint main(){return 0;}\n\n#\t\"\n\n#CXX_GLOBAL_CSTD)\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/ConvenienceLibs.cmake" : {
      "ObjectId" : "8f6c00ba4ad60c61511cac12d71cfaa392214e46",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#former libtool convenience libraries:\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# src/roseSupport/Makefile.am: roseSupport\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# src/backend/asmUnparser/Makefile.am: roseAsmUnparser\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# src/backend/unparser/Makefile.am: unparse\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# src/backend/unparser/FortranCodeGeneration/Makefile.am: unparseFortran\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# src/backend/unparser/CxxCodeGeneration/Makefile.am: unparseCxx\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# src/backend/unparser/formatSupport/Makefile.am: unparseFormatSupport\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# src/backend/unparser/PHPCodeGeneration/Makefile.am: unparsePHP\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# src/backend/unparser/languageIndependenceSupport/Makefile.am: unparseLanguageIndependenceSupport\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# src/roseExtensions/roseHPCToolkit/src/xml2profir/Makefile.am: xml2profir\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# src/roseExtensions/roseHPCToolkit/src/profir2sage/Makefile.am: profir2sage\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# src/roseExtensions/roseHPCToolkit/src/xml/Makefile.am: xml\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# src/roseExtensions/roseHPCToolkit/src/sage/Makefile.am: sage\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# src/roseExtensions/roseHPCToolkit/src/util/Makefile.am: util\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# src/roseExtensions/roseHPCToolkit/src/profir/Makefile.am: profir\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# src/roseExtensions/roseHPCToolkit/src/gprof/Makefile.am: gprof\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# src/roseExtensions/SQLiteConnection/Makefile.am: RoseSQLiteDatabase\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# src/roseExtensions/databaseConnection/Makefile.am: rosedatabase\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# src/roseExtensions/qtWidgets/NodeInfoWidget/Makefile.am: NodeInfoWidget\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/Makefile.am: document\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/Makefile.am: QCodeEdit\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/Makefile.am: qnfa\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/widgets/Makefile.am: widgets\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# src/roseExtensions/qtWidgets/QCodeEditWidget/Makefile.am: QCodeEditWidget\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# src/roseExtensions/qtWidgets/AstGraphWidget/Makefile.am: AstGraphWidget\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# src/roseExtensions/qtWidgets/AsmView/Makefile.am: AsmView\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# src/roseExtensions/qtWidgets/AstBrowserWidget/Makefile.am: AstBrowserWidget\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# src/roseExtensions/qtWidgets/Makefile.am: RoseQtWidgets\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# src/roseExtensions/qtWidgets/KiviatView/Makefile.am: KiviatView\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# src/roseExtensions/qtWidgets/FlopCounter/Makefile.am: FlopCounter\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# src/roseExtensions/qtWidgets/AstProcessing/Makefile.am: AstProcessing\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# src/roseExtensions/qtWidgets/RoseCodeEdit/Makefile.am: RoseCodeEdit\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# src/roseExtensions/qtWidgets/MetricsKiviat/Makefile.am: MetricsKiviat\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# src/roseExtensions/qtWidgets/TreeModel/Makefile.am: TreeModel\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# src/roseExtensions/qtWidgets/MetricsConfig/Makefile.am: MetricsConfig\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# src/roseExtensions/qtWidgets/SrcBinView/Makefile.am: SrcBinView\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# src/roseExtensions/qtWidgets/ProjectManager/Makefile.am: ProjectManager\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# src/roseExtensions/qtWidgets/BeautifiedAst/Makefile.am: BeautifiedAst\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# src/roseExtensions/qtWidgets/AsmInstructionBar/Makefile.am: AsmInstructionBar\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# src/roseExtensions/qtWidgets/PropertyTreeWidget/Makefile.am: PropertyTreeWidget\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# src/roseExtensions/qtWidgets/WidgetCreator/Makefile.am: WidgetCreator\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# src/roseExtensions/qtWidgets/QtGradientEditor/Makefile.am: QtGradientEditor\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# src/roseExtensions/qtWidgets/InstructionCountAnnotator/Makefile.am: InstructionCountAnnotator\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# src/roseExtensions/qtWidgets/util/Makefile.am: util\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# src/roseExtensions/qtWidgets/TaskSystem/Makefile.am: TaskSystem\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# src/roseExtensions/qtWidgets/MetricFilter/Makefile.am: MetricFilter\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# src/roseExtensions/qtWidgets/RoseFileSelector/Makefile.am: RoseFileSelector\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# src/roseExtensions/sqlite3x/Makefile.am: RoseSQLite3xDatabase\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# src/midend/abstractHandle/Makefile.am: abstractHandle\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# src/midend/astUtil/annotation/Makefile.am: annotation\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# src/midend/astUtil/astInterface/Makefile.am: astInterface\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# src/midend/astUtil/astSupport/Makefile.am: astSupport\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# src/midend/astUtil/symbolicVal/Makefile.am: symbolicVal\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# src/midend/binaryAnalyses/Makefile.am: binaryMidend\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# src/midend/loopProcessing/slicing/Makefile.am: slicing\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# src/midend/loopProcessing/depGraph/Makefile.am: depGraph\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# src/midend/loopProcessing/computation/Makefile.am: computation\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# src/midend/loopProcessing/outsideInterface/Makefile.am: arrayOptimization\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# src/midend/loopProcessing/depInfo/Makefile.am: depInfo\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# src/midend/loopProcessing/prepostTransformation/Makefile.am: prepostloop\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# src/midend/loopProcessing/driver/Makefile.am: driver\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# src/midend/astDiagnostics/Makefile.am: astDiagnostics\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# src/midend/programAnalysis/dataflowAnalysis/Makefile.am: dataflowAnalysis\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# src/midend/programAnalysis/valuePropagation/Makefile.am: valuePropagation\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# src/midend/programAnalysis/distributedMemoryAnalysis/Makefile.am: distributedMemoryAnalysis\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# src/midend/programAnalysis/pointerAnal/Makefile.am: pointerAnal\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# src/midend/programAnalysis/proceduralSlicing/Makefile.am: alternativeProgramSlicing\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# src/midend/programAnalysis/defUseAnalysis/Makefile.am: DefUseAnalysis\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# src/midend/programAnalysis/staticInterproceduralSlicing/Makefile.am: StaticSlicing\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# src/midend/programAnalysis/sideEffectAnalysis/Makefile.am: sideEffect\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# src/midend/programAnalysis/CFG/Makefile.am: CFG\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# src/midend/programAnalysis/CallGraphAnalysis/Makefile.am: CallGraph\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# src/midend/programAnalysis/OAWrap/Makefile.am: OAWrap\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# src/midend/programAnalysis/annotationLanguageParser/Makefile.am: annotationLanguageParser\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers/Makefile.am: dominance\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# src/midend/astRewriteMechanism/Makefile.am: rewrite\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# src/midend/astQuery/Makefile.am: query\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# src/midend/programTransformation/constantFolding/Makefile.am: constantFolding\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# src/midend/programTransformation/partialRedundancyElimination/Makefile.am: pre\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# src/midend/programTransformation/implicitCodeGeneration/Makefile.am: implicitCodeGeneration\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# src/midend/programTransformation/functionCallNormalization/Makefile.am: functionCallNormalization\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# src/midend/programTransformation/finiteDifferencing/Makefile.am: finiteDifferencing\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# src/midend/astProcessing/Makefile.am: astprocessing\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# src/midend/astOutlining/Makefile.am: astOutliner\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# src/midend/astInlining/Makefile.am: astinlining\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# src/midend/ompLowering/Makefile.am: ompLowering\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# src/frontend/SageIII/astMerge/Makefile.am: astMerge\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# src/frontend/SageIII/astHiddenTypeAndDeclarationLists/Makefile.am: astHiddenTypeAndDeclarationLists\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# src/frontend/SageIII/astFixup/Makefile.am: astFixup\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# src/frontend/SageIII/astPostProcessing/Makefile.am: astPostProcessing\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# src/frontend/SageIII/sageInterface/Makefile.am: sageInterface\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# src/frontend/SageIII/Makefile.am: sage3\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# src/frontend/SageIII/astVisualization/Makefile.am: astVisualization\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# src/frontend/SageIII/astTokenStream/Makefile.am: astTokenStream\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# src/frontend/SageIII/virtualCFG/Makefile.am: virtualCFG\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# src/frontend/PHPFrontend/Makefile.am: rosePHPFrontend\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# src/frontend/Disassemblers/Makefile.am: roseDisassemblers\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# src/frontend/OpenFortranParser_SAGE_Connection/Makefile.am: roseFortran\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# src/frontend/CxxFrontend/Makefile.am: roseEDG\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# src/frontend/CxxFrontend/EDG_3.3/edgFrontEndWithoutSage/Makefile.am: edg33WithoutSage\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# src/frontend/CxxFrontend/EDG_3.3/src/Makefile.am: edg33\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# src/frontend/CxxFrontend/EDG_3.3/util/Makefile.am: edgutil\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# src/frontend/CxxFrontend/EDG_SAGE_Connection/Makefile.am: sage\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# src/frontend/CxxFrontend/EDG_SAGE_Connection/Makefile.am: sage\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# src/frontend/CxxFrontend/EDG_SAGE_Connection/Makefile.am: newsage\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# src/frontend/ExecFormats/Makefile.am: roseExecFormats\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# src/3rdPartyLibraries/qrose/Framework/Makefile.am: qrframework\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# src/3rdPartyLibraries/qrose/Components/SourceBox/Makefile.am: qrsourcebox\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# src/3rdPartyLibraries/qrose/Components/QueryBox/Makefile.am: qrquerybox\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# src/3rdPartyLibraries/qrose/Components/TreeBox/Makefile.am: qrtreebox\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# src/3rdPartyLibraries/qrose/Components/Common/Makefile.am: qrcommon\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# src/3rdPartyLibraries/qrose/Widgets/Makefile.am: qrwidgets\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# src/3rdPartyLibraries/MSTL/Makefile.am: mstl\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# src/util/stringSupport/Makefile.am: RoseStringSupport\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# src/util/graphs/Makefile.am: graphs\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# src/util/Makefile.am: roseutil\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# src/util/commandlineProcessing/Makefile.am: RoseCommandlineUtil\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# src/util/support/Makefile.am: support\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 118
    },
    "cmake/DownloadEDG.cmake" : {
      "ObjectId" : "380cfdc0c2ced55d6b5f3e9b847e39ae6f48abdb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detect platform\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect compiler by asking GCC what version it is\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# strip patch version; we only care about major & minor\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get binary compatibility signature\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ADD_CUSTOM_COMMAND(TARGET EDG_tarball\n\n#  PRE_BUILD\n\n#  COMMAND \"${CMAKE_SOURCE_DIR}/scripts/edg-generate-sig\" \"${CMAKE_SOURCE_DIR}\" \" ${CMAKE_BINARY_DIR}\" \" >\" ${EDG_SIG_OUTPUT}\n\n#  COMMAND \"cat\" ${EDG_SIG_OUTPUT}  \">\" signature\n\n#  DEPENDS roseutil rosetta_generated \"${CMAKE_SOURCE_DIR}/scripts/edg-generate-sig\"\n\n#)\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  COMMENT \"EDG NAME: ${CMAKE_SOURCE_DIR}/scripts/edg-generate-sig ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}\n\n#    > ${EDG_SIG_OUTPUT}\"\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(signature \"\")\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#    COMMENT \"EDGSignature arguments ${EDG_SIG_OUTPUT} ${Local_EDG_Version} ${platform} ${compiler}\"\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#set(tarball_site \"http://www.rosecompiler.org/edg_binaries\")\n\n#set(tarball_filename \"roseBinaryEDG-${Local_EDG_Version}-${platform}-${compiler}-${signature}.tar.gz\")\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#add_custom_target(EDG_tarball\n\n#COMMAND wget ${tarball_site}/roseBinaryEDG-${Local_EDG_Version}-${platform}-${compiler}-${signature}.tar.gz ${CMAKE_BINARY_DIR}/src/frontend/CxxFrontend/EDG.tar.gz\n\n#COMMENT \"Untar EDG\"\n\n#COMMAND tar zxvf ${CMAKE_BINARY_DIR}/src/frontend/CxxFrontend/EDG.tar.gz -C ${CMAKE_BINARY_DIR}/src/frontend/CxxFrontend \n\n#DEPENDS EDGSignature\n\n#)\n\n#ExternalProject_Add(EDG_tarball\n\n#  COMMENT \"EDG signature = ${signature}\"\n\n#  URL ${tarball_site}/roseBinaryEDG-${Local_EDG_Version}-${platform}-${compiler}-${signature}.tar.gz\n\n#  SOURCE_DIR ${CMAKE_BINARY_DIR}/src/frontend/CxxFrontend/EDG\n\n#  CONFIGURE_COMMAND \"\"\n\n#  BUILD_COMMAND \"\"\n\n#  INSTALL_COMMAND \"\"\n\n#  DEPENDS EDGSignature \n\n#  )\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindBison.cmake" : {
      "ObjectId" : "a4c07958a8dcb060f3fba8a13cc8041f6297db77",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bison detection for ROSE.\n\n#\n\n#  INPUTS:\n\n#    BISON_ROOT    -- Bison installation directory or \"no\" or empty\n\n#                     * If \"no\" then do not use Bison and do not search for it.\n\n#                     * If empty use Bison if found, no error if not found\n\n#                     * Else require Bison to exist at specified location and use it\n\n#  OUTPUTS:\n\n#    BISON_FOOUND     -- Boolean: whether the z3 executable or the Bison library was found.\n\n#    BISON_EXECUTABLE -- String:  the z3 executable name\n\n#    BISON_VERSION    -- String:  Bison version string, such as \"4.8.1\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use Bison, and therefore do not even search for it. Make sure all outputs are cleared to avoid problems with\n\n# users maybe setting them.\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Bison executable\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Error if not found? [Note: extra(?) parens are due to lack of precedence documentation in cmake]\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Summarize\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/FindDlib.cmake" : {
      "ObjectId" : "03b54ad52cf781abb09ce4f6f2c69c8ce76efa4a",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Dlib detection for ROSE.\n\n#\n\n#  INPUTS:\n\n#    DLIB_ROOT       -- DLIB installation directory or \"no\" or empty\n\n#                       * If \"no\" then do not use DLIB and do not search for it.\n\n#                       * If empty use DLIB if found, no error if not found\n\n#                       * Else require DLIB to exist at specified location and use it\n\n#\n\n#  OUTPUTS:\n\n#    DLIB_FOOUND     -- Boolean: whether the DLIB library was found.\n\n#    DLIB_LIBRARY    -- String: full name of DLIB library of a string that ends with NOTFOUND\n\n#    DLIB_LIBRARIES  -- String: names of libraries necessary to use DLIB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use DLIB, and therefore do not even search for it. Make sure all outputs are cleared to avoid problems with\n\n# users maybe setting them.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Header files.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# no extra include directories necessary\n",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# DLIB library.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Error if not found?\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Summarize\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ROSE variables\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/FindGcrypt.cmake" : {
      "ObjectId" : "63702855dec7f9ef362ee6be21ed70f6b552e193",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GCrypt detection for ROSE.\n\n#\n\n#  INPUTS:\n\n#    GCRYPT_ROOT       -- GCrypt installation directory or \"no\" or empty\n\n#                       * If \"no\" then do not use GCrypt and do not search for it.\n\n#                       * If empty use GCrypt if found, no error if not found\n\n#                       * Else require GCrypt to exist at specified location and use it\n\n#\n\n#  OUTPUTS:\n\n#    GCRYPT_FOOUND     -- Boolean: whether the GCrypt library was found.\n\n#    GCRYPT_LIBRARY    -- String: full name of GCrypt library of a string that ends with NOTFOUND\n\n#    GCRYPT_LIBRARIES  -- String: names of libraries necessary to use GCrypt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use GCrypt, and therefore do not even search for it. Make sure all outputs are cleared to avoid problems with\n\n# users maybe setting them.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Header files.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# no extra include directories necessary\n",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# GCrypt library.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Error if not found?\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Summarize\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ROSE variables\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/FindGpgError.cmake" : {
      "ObjectId" : "c93b6e45906f34972e5c12c95b35f40b170b2385",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Gpg-error detection for ROSE.\n\n#\n\n#  INPUTS:\n\n#    GPGERROR_ROOT       -- Gpg-error installation directory or \"no\" or empty\n\n#                       * If \"no\" then do not use Gpg-error and do not search for it.\n\n#                       * If empty use Gpg-error if found, no error if not found\n\n#                       * Else require Gpg-error to exist at specified location and use it\n\n#\n\n#  OUTPUTS:\n\n#    GPGERROR_FOOUND     -- Boolean: whether the Gpg-error library was found.\n\n#    GPGERROR_LIBRARY    -- String: full name of Gpg-error library of a string that ends with NOTFOUND\n\n#    GPGERROR_LIBRARIES  -- String: names of libraries necessary to use Gpg-error\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use Gpg-error, and therefore do not even search for it. Make sure all outputs are cleared to avoid problems with\n\n# users maybe setting them.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Header files.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# no extra include directories necessary\n",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Gpg-error library.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Error if not found?\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Summarize\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/FindSqlite3.cmake" : {
      "ObjectId" : "2644661bfb21c4dd9840527ba0600ebe963bc11b",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SQLite3 detection for ROSE.\n\n#\n\n#  INPUTS:\n\n#    SQLITE3_ROOT   -- SQLite3 installation directory or \"no\" or empty\n\n#                     * If \"no\" then do not use SQLite3 and do not search for it.\n\n#                     * If empty use SQLite3 if found, no error if not found\n\n#                     * Else require SQLite3 to exist at specified location and use it\n\n#\n\n#  OUTPUTS:\n\n#    SQLITE3_FOOUND     -- Boolean: whether the sqlite3 executable or the SQLite3 library was found.\n\n#    SQLITE3_FOUND_EXE  -- Boolean: whether the sqlite executable was found\n\n#    SQLITE3_FOUND_LIB  -- Boolean: whether the SQLite3 library was found\n\n#    SQLITE3_EXECUTABLE -- String:  the sqlite3 executable name\n\n#    SQLITE3_VERSION    -- String:  SQLite3 version string, such as \"4.8.1\"\n\n#    SQLITE3_LIBRARIES  -- String:  names of libraries necessary to use SQLite3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use SQLite3, and therefore do not even search for it. Make sure all outputs are cleared to avoid problems with\n\n# users maybe setting them.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# SQLite3 executable\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Header files.\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# SQLite3 library.\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Error if not found? [Note: extra(?) parens are due to lack of precedence documentation in cmake]\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Summarize\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ROSE variables\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/FindYamlcpp.cmake" : {
      "ObjectId" : "88d0f5d32cbc0ef32745f18f490c192971c48d74",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# YAML-cpp detection for ROSE.\n\n#\n\n#  INPUTS:\n\n#    YAMLCPP_ROOT    -- YAMLCPP installation directory or \"no\" or empty\n\n#                     * If \"no\" then do not use YAMLCPP and do not search for it.\n\n#                     * If empty use YAMLCPP if found, no error if not found\n\n#                     * Else require YAMLCPP to exist at specified location and use it\n\n#\n\n#  OUTPUTS:\n\n#    YAMLCPP_FOOUND     -- Boolean: whether the YAMLCPP library was found.\n\n#    YAMLCPP_LIBRARY    -- String: full name of YAMLCPP library of a string that ends with NOTFOUND\n\n#    YAMLCPP_LIBRARIES  -- String: names of libraries necessary to use YAMLCPP\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use YAMLCPP, and therefore do not even search for it. Make sure all outputs are cleared to avoid problems with\n\n# users maybe setting them.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Header files.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# no extra include directories necessary\n",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# YAMLCPP library.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Error if not found?\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Summarize\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ROSE variables\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/FindZ3.cmake" : {
      "ObjectId" : "5fa7acca3515cdd33dde4201bcdf33d2b9083690",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Z3 detection for ROSE.\n\n# Needs to support Z3 versions 4.5.0 and later.\n\n# Needs to handle Z3 installed in user directories.\n\n# Needs to distinguish between \"z3\" executable and the library.\n\n#\n\n#  INPUTS:\n\n#    Z3_ROOT       -- Z3 installation directory or \"no\" or empty\n\n#                     * If \"no\" then do not use Z3 and do not search for it.\n\n#                     * If empty use Z3 if found, no error if not found\n\n#                     * Else require Z3 to exist at specified location and use it\n\n#\n\n#  OUTPUTS:\n\n#    Z3_FOOUND     -- Boolean: whether the z3 executable or the Z3 library was found.\n\n#    Z3_FOUND_EXE  -- Boolean: whether the z3 executable was found\n\n#    Z3_FOUND_LIB  -- Boolean: whether the Z3 library was found\n\n#    Z3_EXECUTABLE -- String:  the z3 executable name\n\n#    Z3_VERSION    -- String:  Z3 version string, such as \"4.8.1\"\n\n#    Z3_VERSION_H  -- Boolean: whether the z3_version.h file exists\n\n#    Z3_LIBRARIES  -- String:  names of libraries necessary to use Z3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use Z3, and therefore do not even search for it. Make sure all outputs are cleared to avoid problems with\n\n# users maybe setting them.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Z3 executable\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Header files. z3_version.h is absent from older versions of Z3, and newer versions don't include it automatically\n\n# in z3.h, therefore we have to detect it ourselves and conditionally include it in the ROSE source code.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Z3 library.\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Error if not found? [Note: extra(?) parens are due to lack of precedence documentation in cmake]\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Summarize\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ROSE variables\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/FindZlib.cmake" : {
      "ObjectId" : "309a514e91ab68461ce75747ee4a2f92fea80768",
      "LastModified" : "2019-02-02T16:01:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Zlib detection for ROSE.\n\n#\n\n#  INPUTS:\n\n#    ZLIB_ROOT       -- Zlib installation directory or \"no\" or empty\n\n#                       * If \"no\" then do not use Zlib and do not search for it.\n\n#                       * If empty use Zlib if found, no error if not found\n\n#                       * Else require Zlib to exist at specified location and use it\n\n#\n\n#  OUTPUTS:\n\n#    ZLIB_FOOUND     -- Boolean: whether the Zlib library was found.\n\n#    ZLIB_LIBRARY    -- String: full name of Zlib library of a string that ends with NOTFOUND\n\n#    ZLIB_LIBRARIES  -- String: names of libraries necessary to use Zlib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# no extra include directories necessary\n",
        "Line" : 21,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Zlib library.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Error if not found?\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Summarize\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/ProcessEDGBinary.cmake" : {
      "ObjectId" : "adc74d9f8a7df5c2b171c38815644a6afc010a08",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ROSECPack.cmake" : {
      "ObjectId" : "95dd9147c098f3b51a0e08df91c4022b0cfb33bd",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -------------------------------------------------------------------------\n\n# Build a CPack installer\n\n# -------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: write something for these files:\n\n# set(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/NOTICE.txt\")\n\n# set(CPACK_RESOURCE_FILE_WELCOME \"${CMAKE_CURRENT_SOURCE_DIR}/ABOUT.txt\")\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: find or define sensible version numbers for ROSE\n\n# set(CPACK_PACKAGE_VERSION_MAJOR \"${ROSE_MAJOR_VERSION}\")\n\n# set(CPACK_PACKAGE_VERSION_MINOR \"${ROSE_MINOR_VERSION}\")\n\n# set(CPACK_PACKAGE_VERSION_PATCH \"${ROSE_BUILD_VERSION}\")\n\n# set(CPACK_PACKAGE_INSTALL_DIRECTORY \"ROSE ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}\")\n\n# set(CPACK_SOURCE_PACKAGE_FILE_NAME \"ROSE-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}\")\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -------------------------------------------------------------------------\n\n# Install ROSE\n\n# -------------------------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/ROSECPackOptions.cmake" : {
      "ObjectId" : "ce27eb526c708baa09614cf490ecc494475ed392",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/copy_files.cmake" : {
      "ObjectId" : "f0635570d3327c99bd1a4b59c31053f4c5585b4f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#temporaries of source files generated by ROSETTA\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Copy the generated files to ${BUILD_DIR}/src/frontend/SageIII\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/haru.cmake" : {
      "ObjectId" : "bf41a82f4fd53c8d333426caf372f0b5f9f6fd95",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake/modules/haru.cmake\n\n#\n\n# Copyright (C) 2008  Werner Smekal\n\n#\n\n# check if headers exist\n\n# Need these modules to do subsequent checks.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# =======================================================================\n\n# check header availability\n\n# =======================================================================\n\n# check if header file exists\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# =======================================================================\n\n# additional library support\n\n# =======================================================================\n\n# On windows systems the math library is not separated so do not specify\n\n# it unless you are on a non-windows system.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/hpdf_config.h.cmake" : {
      "ObjectId" : "75f458ec1d5dce10c629ac895a3ce17b89f11382",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* include/hpdf_config.h.in.  Generated from configure.in by autoheader.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Define to 1 if you have the <dlfcn.h> header file. */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 if you have the <inttypes.h> header file. */",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 if you have the `png' library (-lpng). */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the `z' library (-lz). */",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the <memory.h> header file. */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to 1 if you have the <stdint.h> header file. */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the <stdlib.h> header file. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the <strings.h> header file. */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the <string.h> header file. */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the <sys/stat.h> header file. */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the <sys/types.h> header file. */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* debug build */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* debug trace enabled */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* libpng is not available */",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* zlib is not available */",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to the one symbol short name of this package. */",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define to 1 if you have the ANSI C header files. */",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define to `unsigned int' if <sys/types.h> does not define. */",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "cmake/libharu.DevPackage.cmake" : {
      "ObjectId" : "a663b64d0abbcc11044913d075740fc6ee4fba77",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0,
      "Errorlog" : "line 14:9 token recognition error at: '\\l'\nline 15:13 token recognition error at: '\\i'\nline 16:9 token recognition error at: '\\b'\n"
    },
    "cmake/modules/CheckPointerMember.cmake" : {
      "ObjectId" : "b6ea5441b85e3fa45b923bb21e8045c05d6cd583",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the given struct or class has the specified member variable\n\n# CHECK_POINTER_MEMBER (POINTER MEMBER HEADER VARIABLE)\n\n#\n\n#  POINTER - the name of the struct or class you are interested in\n\n#  MEMBER - the member which existence you want to check\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/CheckPrototypeExists.cmake" : {
      "ObjectId" : "811d64895848dc3b0919c669611227183b0abb13",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the prototype for a function exists.\n\n# CHECK_PROTOTYPE_EXISTS (FUNCTION HEADER VARIABLE)\n\n#\n\n#  FUNCTION - the name of the function you are looking for\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/CheckStructMember.cmake" : {
      "ObjectId" : "eeb1b65cf54c225475bcbf7bdbf46009e8c0192e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the given struct or class has the specified member variable\n\n# CHECK_STRUCT_MEMBER (STRUCT MEMBER HEADER VARIABLE)\n\n#\n\n#  STRUCT - the name of the struct or class you are interested in\n\n#  MEMBER - the member which existence you want to check\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindACL.cmake" : {
      "ObjectId" : "7d3fa14fefeb6f922f65e60fe582c1d858f6109b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the ACL library\n\n# Once done this will define\n\n#\n\n#  ACL_FOUND - system has the ACL library\n\n#  ACL_LIBS - The libraries needed to use ACL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Pino Toscano, <toscano.pino@tiscali.it>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindAGG.cmake" : {
      "ObjectId" : "94d68da41ee45494acffca0748b9e0e06055e4f8",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the AGG graphics library\n\n# Once done this will define\n\n#\n\n#  AGG_FOUND - system has AGG\n\n#  AGG_INCLUDE_DIR - the AGG include directory\n\n#  AGG_LIBRARIES - Link these to use AGG\n\n#  AGG_DEFINITIONS - Compiler switches required for using AGG\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindAkode.cmake" : {
      "ObjectId" : "9df503cc54725cc5e82d02dafd555bc3952992ea",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the aKode library\n\n# Once done this will define\n\n#\n\n#  AKODE_FOUND - system has the aKode library\n\n#  AKODE_INCLUDE_DIR - the aKode include directory\n\n#  AKODE_LIBRARIES - The libraries needed to use aKode\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Pino Toscano, <toscano.pino@tiscali.it>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# if akode-config has been found\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ensure that they are cached\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindAlsa.cmake" : {
      "ObjectId" : "23003b39cd2a0970927cea5ef49f77f8e81b063a",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Alsa check, based on libkmid/configure.in.in.\n\n# Only the support for Alsa >= 0.9.x was included; 0.5.x was dropped (but feel free to re-add it if you need it)\n\n# It defines ...\n\n# It offers the following macros:\n\n#  ALSA_CONFIGURE_FILE(config_header) - generate a config.h, typical usage: \n\n#                                       ALSA_CONFIGURE_FILE(${CMAKE_BINARY_DIR}/config-alsa.h)\n\n#  ALSA_VERSION_STRING(version_string)  looks for alsa/version.h and reads the version string into\n\n#                                       the first argument passed to the macro\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already done by toplevel\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check for version in alsa/version.h\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindAutomoc4.cmake" : {
      "ObjectId" : "cbe7ad1e05582755e323be966e34cbb7695f29f4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find automoc4\n\n# Once done this will define\n\n#\n\n#  AUTOMOC4_FOUND - automoc4 has been found\n\n#  AUTOMOC4_EXECUTABLE - the automoc4 tool\n\n#  AUTOMOC4_VERSION - the full version of automoc4\n\n#  AUTOMOC4_VERSION_MAJOR, AUTOMOC4_VERSION_MINOR, AUTOMOC4_VERSION_PATCH - AUTOMOC4_VERSION \n\n#                     broken into its components\n\n#\n\n# It also adds the following macros\n\n#  AUTOMOC4(<target> <SRCS_VAR>)\n\n#    Use this to run automoc4 on all files contained in the list <SRCS_VAR>.\n\n#\n\n#  AUTOMOC4_MOC_HEADERS(<target> header1.h header2.h ...)\n\n#    Use this to add more header files to be processed with automoc4.\n\n#\n\n#  AUTOMOC4_ADD_EXECUTABLE(<target_NAME> src1 src2 ...)\n\n#    This macro does the same as ADD_EXECUTABLE, but additionally\n\n#    adds automoc4 handling for all source files.\n\n#\n\n# AUTOMOC4_ADD_LIBRARY(<target_NAME> src1 src2 ...)\n\n#    This macro does the same as ADD_LIBRARY, but additionally\n\n#    adds automoc4 handling for all source files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Internal helper macro, may change or be removed anytime:\n\n# _ADD_AUTOMOC4_TARGET(<target_NAME> <SRCS_VAR>)\n\n#\n\n# Since version 0.9.88:\n\n# The following two macros are only to be used for KDE4 projects\n\n# and do something which makes sure automoc4 works for KDE. Don't\n\n# use them anywhere else.\n\n# _AUTOMOC4_KDE4_PRE_TARGET_HANDLING(<target_NAME> <SRCS_VAR>)\n\n# _AUTOMOC4_KDE4_POST_TARGET_HANDLING(<target_NAME>)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2008-2009, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check if we are inside KDESupport and automoc is enabled\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# when building this project as part of kdesupport\n",
        "Line" : 44,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# when building this project outside kdesupport\n\n# use the new \"config-mode\" of cmake 2.6, which searches the installed Automoc4Config.cmake file\n\n# see the man page for details\n",
        "Line" : 47,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindAvahi.cmake" : {
      "ObjectId" : "129e68a62e31f9ea25fab0be6399590bf483ab29",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Avahi. Only avahi-common/defs.h is really needed\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Jakub Stachowski, <qbast@go2.pl>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindBerkeleyDB.cmake" : {
      "ObjectId" : "749f1664138bc6d1cd477d78719e6a0f142e4b81",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Berkeley DB\n\n# Once done this will define\n\n#\n\n#  BERKELEY_DB_FOUND - system has Berkeley DB\n\n#  BERKELEY_DB_INCLUDE_DIR - the Berkeley DB include directory\n\n#  BERKELEY_DB_LIBRARIES - Link these to use Berkeley DB\n\n#  BERKELEY_DB_DEFINITIONS - Compiler switches required for using Berkeley DB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Dymo, <adymo@kdevelop.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# show the BERKELEY_DB_INCLUDE_DIR and BERKELEY_DB_LIBRARIES variables only in the advanced view\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindBlitz.cmake" : {
      "ObjectId" : "2427999e952ef9c91592249b621a8880212ef1b8",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################\n\n########## DEPRECATED, use FindQImageBlitz instead #############\n\n################################################################\n\n# - Try to find blitz lib\n\n# Once done this will define\n\n#\n\n#  BLITZ_FOUND - system has blitz lib\n\n#  BLITZ_INCLUDES - the blitz include directory\n\n#  BLITZ_LIBRARIES - The libraries needed to use blitz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2007, Allen Winter, <winter@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindBlueZ.cmake" : {
      "ObjectId" : "8601b935e9c39d8056ae34836d7c8efb8981a8cd",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find BlueZ\n\n# Once done this will define\n\n#\n\n#  BLUEZ_FOUND - system has BlueZ\n\n#  BLUEZ_INCLUDE_DIR - the BlueZ include directory\n\n#  BLUEZ_LIBRARIES - Link these to use BlueZ\n\n#  BLUEZ_DEFINITIONS - Compiler switches required for using BlueZ\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Daniel Gollub, <dgollub@suse.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# show the BLUEZ_INCLUDE_DIR and BLUEZ_LIBRARIES variables only in the advanced view\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindCLucene.cmake" : {
      "ObjectId" : "b7c0e862bce57d6d461c7e900f4e67fb6337e4a9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This module looks for clucene (http://clucene.sf.net) support\n\n# It will define the following values\n\n#\n\n# CLUCENE_INCLUDE_DIR  = where CLucene/StdHeader.h can be found\n\n# CLUCENE_LIBRARY_DIR  = where CLucene/clucene-config.h can be found\n\n# CLUCENE_LIBRARY      = the library to link against CLucene\n\n# CLUCENE_VERSION      = The CLucene version string\n\n# CLucene_FOUND        = set to 1 if clucene is found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindCarbon.cmake" : {
      "ObjectId" : "2b0d979ea90bbbfdf3d80bc539dfa3c2660497e9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Carbon on Mac\n\n#\n\n#  CARBON_LIBRARY - the library to use Carbon\n\n#  CARBON_FOUND - true if Carbon has been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Benjamin Reed, <ranger@befunk.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindDNSSD.cmake" : {
      "ObjectId" : "8604bd570e192ef3a679cc1dd80545971c098d64",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find DNSSD\n\n# Once done this will define\n\n#\n\n#  DNSSD_FOUND - system has DNSSD\n\n#  DNSSD_INCLUDE_DIR - the DNSSD include directory\n\n#  DNSSD_LIBRARIES - Link these to use dnssd\n\n#  DNSSD_DEFINITIONS - Compiler switches required for using DNSSD\n\n#\n\n# need more test: look at into dnssd/configure.in.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindENCHANT.cmake" : {
      "ObjectId" : "0b30f326074c04e2e9cf08c68842e7b448021851",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Enchant spell checker\n\n# Once done this will define\n\n#\n\n#  ENCHANT_FOUND - system has ENCHANT\n\n#  ENCHANT_INCLUDE_DIR - the ENCHANT include directory\n\n#  ENCHANT_LIBRARIES - Link these to use ENCHANT\n\n#  ENCHANT_DEFINITIONS - Compiler switches required for using ENCHANT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Zack Rusin, <zack@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindEigen.cmake" : {
      "ObjectId" : "c65cb8dc5a32e9e03b53cf44f99b84718c8bf55a",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note that Eigen1 is deprecated in favor of Eigen2. So this file is deprecated\n\n# in favor of FindEigen2.cmake. It is kept only for compatibility.\n\n#\n\n# - Try to find Eigen1 library\n\n# Once done this will define\n\n#\n\n#  EIGEN_FOUND - system has eigen lib\n\n#  EIGEN_INCLUDE_DIR - the eigen include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindEigen2.cmake" : {
      "ObjectId" : "2579a6c9c00140c223a1e6456a1bf4fb1123c4ee",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen2 lib\n\n# Once done this will define\n\n#\n\n#  EIGEN2_FOUND - system has eigen lib\n\n#  EIGEN2_INCLUDE_DIR - the eigen include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindExiv2.cmake" : {
      "ObjectId" : "693f5465b6106079de89e0ed7bec3d51510ff4c3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Exiv2 library\n\n#\n\n#  EXIV2_MIN_VERSION - You can set this variable to the minimum version you need \n\n#                      before doing FIND_PACKAGE(Exiv2). The default is 0.12.\n\n# \n\n# Once done this will define\n\n#\n\n#  EXIV2_FOUND - system has libexiv2\n\n#  EXIV2_INCLUDE_DIR - the libexiv2 include directory\n\n#  EXIV2_LIBRARIES - Link these to use libexiv2\n\n#  EXIV2_DEFINITIONS - Compiler switches required for using libexiv2\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Gilles Caulier, <caulier.gilles@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# query pkg-config asking for a Exiv2 >= 0.12\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#Better check\n",
        "Line" : 53,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# TODO version check is missing\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindFAM.cmake" : {
      "ObjectId" : "8ebb3ab6f3ce9de598cffa78d9d30229de91d8d3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the FAM directory notification library\n\n# Once done this will define\n\n#\n\n#  FAM_FOUND - system has FAM\n\n#  FAM_INCLUDE_DIR - the FAM include directory\n\n#  FAM_LIBRARIES - The libraries needed to use FAM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindFFmpeg.cmake" : {
      "ObjectId" : "d6259b0c5228add347cb9c63ce2ad47e6c67fb29",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ffmpeg\n\n# Once done this will define\n\n#\n\n#  FFMPEG_FOUND - system has ffmpeg\n\n#  FFMPEG_INCLUDE_DIR - Include directory necessary for using the ffmpeg headers\n\n#  FFMPEG_LIBRARIES - Link these to use ffmpeg\n\n#  FFMPEG_DEFINITIONS - Compiler switches required for using ffmpeg\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 24,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#\n\n# #include <libXXXX/XXXX.h> is the new style for FFMPEG headers\n\n# This has been verified at least since 0.4.9\n\n# Please do not change to the old format, since this will break for\n\n# people who are using newer versions. Instead, upgrade your ffmpeg\n\n# installation.\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# also search for the old style include dir, just for the purpose\n\n# of giving a useful error message if an old libavcodec is installed\n\n# and the user might wonder why it is not found\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# only an old libavcodec was found ?\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# AND FFMPEG_DEFINITIONS)\n",
        "Line" : 116,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 8
    },
    "cmake/modules/FindFlac.cmake" : {
      "ObjectId" : "56b3eef9128fa8d3d3751de5002970852c3510f1",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Flac, the Free Lossless Audio Codec\n\n# Once done this will define\n\n#\n\n#  FLAC_FOUND - system has Flac\n\n#  FLAC_INCLUDE_DIR - the Flac include directory\n\n#  FLAC_LIBRARIES - Link these to use Flac\n\n#  FLAC_OGGFLAC_LIBRARIES - Link these to use OggFlac\n\n#\n\n# No version checking is done - use FLAC_API_VERSION_CURRENT to\n\n# conditionally compile version-dependent code\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# show the FLAC_INCLUDE_DIR and FLAC_LIBRARIES variables only in the advanced view\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindFlex.cmake" : {
      "ObjectId" : "a2db98642fe256a830aa77ac42254da4e7c40d6b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Flex\n\n# Once done this will define\n\n#\n\n#  FLEX_FOUND - system has Flex\n\n#  FLEX_EXECUTABLE - path of the flex executable\n\n#  FLEX_VERSION - the version string, like \"2.5.31\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Jakob Petsovits, <jpetso@gmx.at>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindFontconfig.cmake" : {
      "ObjectId" : "268a61aea76143f3f1817679a86079f71c6d0093",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the  Fontconfig\n\n# Once done this will define\n\n#\n\n#  FONTCONFIG_FOUND - system has Fontconfig\n\n#  FONTCONFIG_INCLUDE_DIR - The include directory to use for the fontconfig headers\n\n#  FONTCONFIG_LIBRARIES - Link these to use FONTCONFIG\n\n#  FONTCONFIG_DEFINITIONS - Compiler switches required for using FONTCONFIG\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindFreetype.cmake" : {
      "ObjectId" : "61e44a1fbd9edb21c56be2ec323f976ed473845d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the freetype library\n\n# Once done this will define\n\n#\n\n#  FREETYPE_FOUND - system has Freetype\n\n#  FREETYPE_INCLUDE_DIRS - the FREETYPE include directories\n\n#  FREETYPE_LIBRARIES - Link these to use FREETYPE\n\n#  FREETYPE_INCLUDE_DIR - internal\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#reset vars\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# if freetype-config has been found\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# freetype-config can print out more than one -I, so we need to chop it up\n\n# into a list and process each entry separately\n",
        "Line" : 39,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindGIF.cmake" : {
      "ObjectId" : "a46194ab822b42508fa7346641482d0d09a32e67",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GIF\n\n# Once done this will define\n\n#\n\n#  GIF_FOUND - system has GIF\n\n#  GIF_INCLUDE_DIR - the GIF include directory\n\n#  GIF_LIBRARIES - Libraries needed to use GIF\n\n#  GIF_DEFINITIONS - Compiler switches required for using GIF\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2002 Kitware, Inc., Insight Consortium.  All rights reserved.\n\n# See Copyright.txt or http://www.cmake.org/HTML/Copyright.html for details.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindGLIB2.cmake" : {
      "ObjectId" : "431f2e5e2e0039807ecaf10db4c33b5ae44aed52",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the GLIB2 libraries\n\n# Once done this will define\n\n#\n\n#  GLIB2_FOUND - system has glib2\n\n#  GLIB2_INCLUDE_DIR - the glib2 include directory\n\n#  GLIB2_LIBRARIES - glib2 library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# search the glibconfig.h include dir under the same root where the library is found\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# not sure if this include dir is optional or required\n\n# for now it is optional\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindGMP.cmake" : {
      "ObjectId" : "17d175c6ac20f016946e3ec7173e996bce3999e6",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the GMP librairies\n\n#  GMP_FOUND - system has GMP lib\n\n#  GMP_INCLUDE_DIR - the GMP include directory\n\n#  GMP_LIBRARIES - Libraries needed to use GMP\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindGObject.cmake" : {
      "ObjectId" : "d9e8df9c6483090005d3122f630d83211b7beab7",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GObject\n\n# Once done this will define\n\n#\n\n#  GOBJECT_FOUND - system has GObject\n\n#  GOBJECT_INCLUDE_DIR - the GObject include directory\n\n#  GOBJECT_LIBRARIES - the libraries needed to use GObject\n\n#  GOBJECT_DEFINITIONS - Compiler switches required for using GObject\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Tim Beaulen <tbscope@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 23,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: GObject include directory = ${GOBJECT_INCLUDE_DIRS}\")\n\n#MESSAGE(STATUS \"DEBUG: GObject link directory = ${GOBJECT_LIBRARY_DIRS}\")\n\n#MESSAGE(STATUS \"DEBUG: GObject CFlags = ${GOBJECT_CFLAGS}\")\n",
        "Line" : 27,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindGSSAPI.cmake" : {
      "ObjectId" : "0951c67542f66ab826c714c478d5f328214762ca",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to detect the GSSAPI support\n\n# Once done this will define\n\n#\n\n#  GSSAPI_FOUND - system supports GSSAPI\n\n#  GSSAPI_INCS - the GSSAPI include directory\n\n#  GSSAPI_LIBS - the libraries needed to use GSSAPI\n\n#  GSSAPI_FLAVOR - the type of API - MIT or HEIMDAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Pino Toscano, <toscano.pino@tiscali.it>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# this is required when cross compiling with cmake 2.6 and ignored with cmake 2.4, Alex\n",
        "Line" : 24,
        "CharPositionInLine" : 45
      },
      "4" : {
        "Text" : "#reset vars\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# GSSAPI_INCS can be also empty, so don't rely on that\n",
        "Line" : 64,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindGStreamer.cmake" : {
      "ObjectId" : "8e98b8925092f26e43be4b08ef4c34173eb46213",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GStreamer\n\n# Once done this will define\n\n#\n\n#  GSTREAMER_FOUND - system has GStreamer\n\n#  GSTREAMER_INCLUDE_DIR - the GStreamer include directory\n\n#  GSTREAMER_LIBRARIES - the libraries needed to use GStreamer\n\n#  GSTREAMER_DEFINITIONS - Compiler switches required for using GStreamer\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Tim Beaulen <tbscope@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Other versions --> GSTREAMER_X_Y_FOUND (Example: GSTREAMER_0_8_FOUND and GSTREAMER_0_10_FOUND etc)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 24,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: GStreamer include directory = ${GSTREAMER_INCLUDE_DIRS}\")\n\n#MESSAGE(STATUS \"DEBUG: GStreamer link directory = ${GSTREAMER_LIBRARY_DIRS}\")\n\n#MESSAGE(STATUS \"DEBUG: GStreamer CFlags = ${GSTREAMER_CFLAGS_OTHER}\") \n",
        "Line" : 28,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#PATH_SUFFIXES gst\n",
        "Line" : 38,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: Found GStreamer include dir: ${GSTREAMER_INCLUDE_DIR}\")\n",
        "Line" : 60,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: Found GStreamer library: ${GSTREAMER_LIBRARIES}\")\n",
        "Line" : 66,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: Found GStreamer interface library: ${GSTREAMER_INTERFACE_LIBRARY}\")\n",
        "Line" : 72,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 10
    },
    "cmake/modules/FindGettext.cmake" : {
      "ObjectId" : "e35dceda7af683ae300663e67913b52c877b34a0",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Gettext functionality\n\n# Once done this will define\n\n#\n\n#  GETTEXT_FOUND - system has Gettext\n\n#  GETTEXT_INCLUDE_DIR - Gettext include directory\n\n#  GETTEXT_LIBRARIES - Libraries needed to use Gettext\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: This will enable translations only if Gettext functionality is\n\n# present in libc. Must have more robust system for release, where Gettext\n\n# functionality can also reside in standalone Gettext library, or the one\n\n# embedded within kdelibs (cf. gettext.m4 from Gettext source).\n\n#\n\n# Copyright (c) 2006, Chusslove Illich, <caslav.ilic@gmx.net>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# - Find GNU gettext tools\n\n# This module looks for the GNU gettext tools. This module defines the \n\n# following values:\n\n#  GETTEXT_MSGMERGE_EXECUTABLE: the full path to the msgmerge tool.\n\n#  GETTEXT_MSGFMT_EXECUTABLE: the full path to the msgfmt tool.\n\n#  GETTEXT_FOUND: True if gettext has been found.\n\n#\n\n# Additionally it provides the following macros:\n\n# GETTEXT_CREATE_TRANSLATIONS ( outputFile [ALL] file1 ... fileN )\n\n#    This will create a target \"translations\" which will convert the \n\n#    given input po files into the binary output mo file. If the \n\n#    ALL option is used, the translations will also be created when\n\n#    building the default target.\n\n# GETTEXT_PROCESS_POT( <potfile> [ALL] [INSTALL_DESTINATION <destdir>] <lang1> <lang2> ... )\n\n#     Process the given pot file to mo files.\n\n#     If INSTALL_DESTINATION is given then automatically install rules will be created,\n\n#     the language subdirectory will be taken into account (by default use share/locale/).\n\n#     If ALL is specified, the pot file is processed when building the all traget.\n\n#     It creates a custom target \"potfile\".\n\n#\n\n# GETTEXT_PROCESS_PO_FILES(<lang> [ALL] [INSTALL_DESTINATION <dir>] <po1> <po2> ...)\n\n#     Process the given po files to mo files for the given language.\n\n#     If INSTALL_DESTINATION is given then automatically install rules will be created,\n\n#     the language subdirectory will be taken into account (by default use share/locale/).\n\n#     If ALL is specified, the po files are processed when building the all traget.\n\n#     It creates a custom target \"pofiles\".\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GETTEXT_PROCESS_POT( <potfile> [ALL] [INSTALL_DESTINATION <destdir>] <lang1> <lang2> ... )\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    message(STATUS \"1 all ${_addToAll} dest ${_installDest} args: ${_args}\")\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# GETTEXT_PROCESS_PO_FILES(<lang> [ALL] [INSTALL_DESTINATION <dir>] <po1> <po2> ...)\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#    message(STATUS \"2 all ${_addToAll} dest ${_installDest} args: ${_args}\")\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#IF (GETTEXT_MSGMERGE_EXECUTABLE AND GETTEXT_MSGFMT_EXECUTABLE )\n\n#   SET(GETTEXT_FOUND TRUE)\n\n#ELSE (GETTEXT_MSGMERGE_EXECUTABLE AND GETTEXT_MSGFMT_EXECUTABLE )\n\n#   SET(GETTEXT_FOUND FALSE)\n\n#   IF (GetText_REQUIRED)\n\n#      MESSAGE(FATAL_ERROR \"GetText not found\")\n\n#   ENDIF (GetText_REQUIRED)\n\n#ENDIF (GETTEXT_MSGMERGE_EXECUTABLE AND GETTEXT_MSGFMT_EXECUTABLE )\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/modules/FindGit.cmake" : {
      "ObjectId" : "bd5a4c00c8692b3be036ea066a0ef6b917dd16e2",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Git\n\n# Find a Git SCM client.\n\n#\n\n#   GIT_FOUND      - True if Git was found.\n\n#   GIT_EXECUTABLE - Path to the git binary.\n\n#   GIT_VERSION    - Version of found git binary.\n\n#\n\n# If Git is found, then following function(s) are defined:\n\n#\n\n#   GIT_TREE_INFO( DIR PREFIX )\n\n#       Extracts info from given tree.\n\n#       Arguments:\n\n#           DIR    - Where the git tree is.\n\n#           PREFIX - A prefix for defined variables.\n\n#       Defined variables:\n\n#           ${PREFIX}_HASH       - A hash of HEAD revision.\n\n#           ${PREFIX}_HASH_SHORT - An abbreviation of the hash.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GIT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindGphoto2.cmake" : {
      "ObjectId" : "b1bd6270f1583004949bdbf3be16a94171ce9c7b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake macro to test if we use gphoto2\n\n#  GPHOTO2_FOUND - system has the GPHOTO2 library\n\n#  GPHOTO2_INCLUDE_DIR - the GPHOTO2 include directory\n\n#  GPHOTO2_LIBRARIES - The libraries needed to use GPHOTO2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# if gphoto2-port-config and gphoto2-config have been found\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# the cflags for poppler-qt4 can contain more than one include path\n",
        "Line" : 35,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindKDE4Internal.cmake" : {
      "ObjectId" : "0fda5ccc69f8c79b692490a38028dba02e9f7fd9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the KDE4 include and library dirs, KDE preprocessors and define a some macros\n\n#\n\n# This module defines the following variables:\n\n#\n\n#  KDE4_FOUND               - set to TRUE if everything required for building KDE software has been found\n\n#\n\n#  KDE4_DEFINITIONS         - compiler definitions required for compiling KDE software\n\n#  KDE4_INCLUDE_DIR         - the KDE 4 include directory\n\n#  KDE4_INCLUDES            - all include directories required for KDE, i.e.\n\n#                             KDE4_INCLUDE_DIR, but also the Qt4 include directories\n\n#                             and other platform specific include directories\n\n#  KDE4_LIB_DIR             - the directory where the KDE libraries are installed,\n\n#                             intended to be used with LINK_DIRECTORIES()\n\n#\n\n# The following variables are defined for the various tools required to\n\n# compile KDE software:\n\n#\n\n#  KDE4_KCFGC_EXECUTABLE    - the kconfig_compiler executable\n\n#  KDE4_AUTOMOC_EXECUTABLE  - the kde4automoc executable, deprecated, use AUTOMOC4_EXECUTABLE instead\n\n#  KDE4_MEINPROC_EXECUTABLE - the meinproc4 executable\n\n#  KDE4_MAKEKDEWIDGETS_EXECUTABLE - the makekdewidgets executable\n\n#\n\n# The following variables point to the location of the KDE libraries,\n\n# but shouldn't be used directly:\n\n#\n\n#  KDE4_KDECORE_LIBRARY     - the kdecore library\n\n#  KDE4_KDEUI_LIBRARY       - the kdeui library\n\n#  KDE4_KIO_LIBRARY         - the kio library\n\n#  KDE4_KPARTS_LIBRARY      - the kparts library\n\n#  KDE4_KUTILS_LIBRARY      - the kutils library\n\n#  KDE4_KDE3SUPPORT_LIBRARY - the kde3support library\n\n#  KDE4_KFILE_LIBRARY       - the kfile library\n\n#  KDE4_KHTML_LIBRARY       - the khtml library\n\n#  KDE4_KJS_LIBRARY         - the kjs library\n\n#  KDE4_KJSAPI_LIBRARY      - the kjs public api library\n\n#  KDE4_KNEWSTUFF2_LIBRARY  - the knewstuff2 library\n\n#  KDE4_KDNSSD_LIBRARY      - the kdnssd library\n\n#  KDE4_PHONON_LIBRARY      - the phonon library\n\n#  KDE4_THREADWEAVER_LIBRARY- the threadweaver library\n\n#  KDE4_SOLID_LIBRARY       - the solid library\n\n#  KDE4_KNOTIFYCONFIG_LIBRARY- the knotifyconfig library\n\n#  KDE4_KROSSCORE_LIBRARY   - the krosscore library\n\n#  KDE4_KTEXTEDITOR_LIBRARY - the ktexteditor library\n\n#  KDE4_KNEPOMUK_LIBRARY    - the knepomuk library\n\n#  KDE4_KMETADATA_LIBRARY   - the kmetadata library\n\n#  KDE4_PLASMA_LIBRARY      - the plasma library\n\n#\n\n#  KDE4_PLASMA_OPENGL_FOUND  - TRUE if the OpenGL support of Plasma has been found, NOTFOUND otherwise\n\n#\n\n# Compared to the variables above, the following variables\n\n# also contain all of the depending libraries, so the variables below\n\n# should be used instead of the ones above:\n\n#\n\n#  KDE4_KDECORE_LIBS          - the kdecore library and all depending libraries\n\n#  KDE4_KDEUI_LIBS            - the kdeui library and all depending libraries\n\n#  KDE4_KIO_LIBS              - the kio library and all depending libraries\n\n#  KDE4_KPARTS_LIBS           - the kparts library and all depending libraries\n\n#  KDE4_KUTILS_LIBS           - the kutils library and all depending libraries\n\n#  KDE4_KDE3SUPPORT_LIBS      - the kde3support library and all depending libraries\n\n#  KDE4_KFILE_LIBS            - the kfile library and all depending libraries\n\n#  KDE4_KHTML_LIBS            - the khtml library and all depending libraries\n\n#  KDE4_KJS_LIBS              - the kjs library and all depending libraries\n\n#  KDE4_KJSAPI_LIBS           - the kjs public api library and all depending libraries\n\n#  KDE4_KNEWSTUFF2_LIBS       - the knewstuff2 library and all depending libraries\n\n#  KDE4_KDNSSD_LIBS           - the kdnssd library and all depending libraries\n\n#  KDE4_KDESU_LIBS            - the kdesu library and all depending libraries\n\n#  KDE4_KPTY_LIBS             - the kpty library and all depending libraries\n\n#  KDE4_PHONON_LIBS           - the phonon library and all depending librairies\n\n#  KDE4_THREADWEAVER_LIBRARIES- the threadweaver library and all depending libraries\n\n#  KDE4_SOLID_LIBS            - the solid library and all depending libraries\n\n#  KDE4_KNOTIFYCONFIG_LIBS    - the knotify config library and all depending libraries\n\n#  KDE4_KROSSCORE_LIBS        - the kross core library and all depending libraries\n\n#  KDE4_KROSSUI_LIBS          - the kross ui library which includes core and all depending libraries\n\n#  KDE4_KTEXTEDITOR_LIBS      - the ktexteditor library and all depending libraries\n\n#  KDE4_KNEPOMUK_LIBS         - the knepomuk library and all depending libraries\n\n#  KDE4_KMETADATA_LIBS        - the kmetadata library and all depending libraries\n\n#  KDE4_PLASMA_LIBS           - the plasma library and all depending librairies\n\n#\n\n# This module defines a bunch of variables used as locations for install directories. \n\n# They can be relative (to CMAKE_INSTALL_PREFIX) or absolute.\n\n# Under Windows they are always relative.\n\n#\n\n#  BIN_INSTALL_DIR          - the directory where executables will be installed (default is prefix/bin)\n\n#  BUNDLE_INSTALL_DIR       - Mac only: the directory where application bundles will be installed (default is /Applications/KDE4 )\n\n#  SBIN_INSTALL_DIR         - the directory where system executables will be installed (default is prefix/sbin)\n\n#  LIB_INSTALL_DIR          - the directory where libraries will be installed (default is prefix/lib)\n\n#  CONFIG_INSTALL_DIR       - the config file install dir\n\n#  DATA_INSTALL_DIR         - the parent directory where applications can install their data\n\n#  HTML_INSTALL_DIR         - the HTML install dir for documentation\n\n#  ICON_INSTALL_DIR         - the icon install dir (default prefix/share/icons/)\n\n#  INFO_INSTALL_DIR         - the kde info install dir (default prefix/info)\n\n#  KCFG_INSTALL_DIR         - the install dir for kconfig files\n\n#  LOCALE_INSTALL_DIR       - the install dir for translations\n\n#  MAN_INSTALL_DIR          - the kde man page install dir (default prefix/man/)\n\n#  MIME_INSTALL_DIR         - the install dir for the mimetype desktop files\n\n#  PLUGIN_INSTALL_DIR       - the subdirectory relative to the install prefix where plugins will be installed (default is ${KDE4_LIB_INSTALL_DIR}/kde4)\n\n#  SERVICES_INSTALL_DIR     - the install dir for service (desktop, protocol, ...) files\n\n#  SERVICETYPES_INSTALL_DIR - the install dir for servicestypes desktop files\n\n#  SOUND_INSTALL_DIR        - the install dir for sound files\n\n#  TEMPLATES_INSTALL_DIR    - the install dir for templates (Create new file...)\n\n#  WALLPAPER_INSTALL_DIR    - the install dir for wallpapers\n\n#  DEMO_INSTALL_DIR         - the install dir for demos\n\n#  KCONF_UPDATE_INSTALL_DIR - the kconf_update install dir\n\n#  XDG_APPS_INSTALL_DIR     - the XDG apps dir\n\n#  XDG_DIRECTORY_INSTALL_DIR- the XDG directory\n\n#  XDG_MIME_INSTALL_DIR     - the XDG mimetypes install dir\n\n#  DBUS_INTERFACES_INSTALL_DIR - the directory where dbus interfaces be installed (default is prefix/share/dbus-1/interfaces)\n\n#  DBUS_SERVICES_INSTALL_DIR        - the directory where dbus services be installed (default is prefix/share/dbus-1/services )\n\n#\n\n# The following variable is provided, but seem to be unused:\n\n#  LIBS_HTML_INSTALL_DIR    /share/doc/HTML            CACHE STRING \"Is this still used ?\")\n\n#\n\n# The following user adjustable options are provided:\n\n#\n\n#  KDE4_ENABLE_FINAL - enable KDE-style enable-final all-in-one-compilation\n\n#  KDE4_BUILD_TESTS  - enable this to build the testcases\n\n#  KDE4_ENABLE_FPIE  - enable it to use gcc Position Independent Executables feature\n\n#  KDE4_USE_COMMON_CMAKE_PACKAGE_CONFIG_DIR - only present for CMake >= 2.6.3, defaults to TRUE\n\n#                      If enabled, the package should install its <package>Config.cmake file to \n\n#                      lib/cmake/<package>/ instead to lib/<package>/cmake\n\n#\n\n# It also adds the following macros and functions (from KDE4Macros.cmake)\n\n#  KDE4_ADD_UI_FILES (SRCS_VAR file1.ui ... fileN.ui)\n\n#    Use this to add Qt designer ui files to your application/library.\n\n#\n\n#  KDE4_ADD_UI3_FILES (SRCS_VAR file1.ui ... fileN.ui)\n\n#    Use this to add Qt designer ui files from Qt version 3 to your application/library.\n\n#\n\n#  KDE4_ADD_KCFG_FILES (SRCS_VAR [GENERATE_MOC] file1.kcfgc ... fileN.kcfgc)\n\n#    Use this to add KDE config compiler files to your application/library.\n\n#    Use optional GENERATE_MOC to generate moc if you use signals in your kcfg files.\n\n#\n\n#  KDE4_ADD_WIDGET_FILES (SRCS_VAR file1.widgets ... fileN.widgets)\n\n#    Use this to add widget description files for the makekdewidgets code generator\n\n#    for Qt Designer plugins.\n\n#\n\n#  KDE4_CREATE_FINAL_FILES (filename_CXX filename_C file1 ... fileN)\n\n#    This macro is intended mainly for internal uses.\n\n#    It is used for enable-final. It will generate two source files,\n\n#    one for the C files and one for the C++ files.\n\n#    These files will have the names given in filename_CXX and filename_C.\n\n#\n\n#  KDE4_ADD_PLUGIN ( name [WITH_PREFIX] file1 ... fileN )\n\n#    Create a KDE plugin (KPart, kioslave, etc.) from the given source files.\n\n#    It supports KDE4_ENABLE_FINAL.\n\n#    If WITH_PREFIX is given, the resulting plugin will have the prefix \"lib\", otherwise it won't.\n\n#\n\n#  KDE4_ADD_KDEINIT_EXECUTABLE (name [NOGUI] [RUN_UNINSTALLED] file1 ... fileN)\n\n#    Create a KDE application in the form of a module loadable via kdeinit.\n\n#    A library named kdeinit_<name> will be created and a small executable which links to it.\n\n#    It supports KDE4_ENABLE_FINAL\n\n#    If the executable has to be run from the buildtree (e.g. unit tests and code generators\n\n#    used later on when compiling), set the option RUN_UNINSTALLED.\n\n#    If the executable doesn't have a GUI, use the option NOGUI. By default on OS X\n\n#    application bundles are created, with the NOGUI option no bundles but simple executables\n\n#    are created. Currently it doesn't have any effect on other platforms.\n\n#\n\n#  KDE4_ADD_EXECUTABLE (name [NOGUI] [TEST] [RUN_UNINSTALLED] file1 ... fileN)\n\n#    Equivalent to ADD_EXECUTABLE(), but additionally adds some more features:\n\n#    -support for KDE4_ENABLE_FINAL\n\n#    -support for automoc\n\n#    -automatic RPATH handling\n\n#    If the executable has to be run from the buildtree (e.g. unit tests and code generators\n\n#    used later on when compiling), set the option RUN_UNINSTALLED.\n\n#    If the executable doesn't have a GUI, use the option NOGUI. By default on OS X\n\n#    application bundles are created, with the NOGUI option no bundles but simple executables\n\n#    are created. Currently it doesn't have any effect on other platforms.\n\n#\n\n#  KDE4_ADD_LIBRARY (name [STATIC | SHARED | MODULE ] file1 ... fileN)\n\n#    Equivalent to ADD_LIBRARY(), but additionally it supports KDE4_ENABLE_FINAL\n\n#    and under Windows it adds a -DMAKE_<name>_LIB definition to the compilation.\n\n#\n\n#  KDE4_ADD_UNIT_TEST (testname [TESTNAME targetname] file1 ... fileN)\n\n#    add a unit test, which is executed when running make test\n\n#    it will be built with RPATH poiting to the build dir\n\n#    The targets are always created, but only built for the \"all\"\n\n#    target if the option KDE4_BUILD_TESTS is enabled. Otherwise the rules for the target\n\n#    are created but not built by default. You can build them by manually building the target.\n\n#    The name of the target can be specified using TESTNAME <targetname>, if it is not given\n\n#    the macro will default to the <testname>\n\n#    KDESRCDIR is set to the source directory of the test, this can be used with\n\n#    KGlobal::dirs()->addResourceDir( \"data\", KDESRCDIR )\n\n#\n\n#  KDE4_UPDATE_ICONCACHE()\n\n#    Notifies the icon cache that new icons have been installed by updating\n\n#    mtime of ${ICON_INSTALL_DIR}/hicolor directory.\n\n#\n\n#  KDE4_INSTALL_ICONS( path theme)\n\n#    Installs all png and svgz files in the current directory to the icon\n\n#    directoy given in path, in the subdirectory for the given icon theme.\n\n#\n\n#  KDE4_CREATE_HANDBOOK( docbookfile [INSTALL_DESTINATION installdest] [SUBDIR subdir])\n\n#   Create the handbook from the docbookfile (using meinproc4)\n\n#   The resulting handbook will be installed to <installdest> when using\n\n#   INSTALL_DESTINATION <installdest>, or to <installdest>/<subdir> if\n\n#   SUBDIR <subdir> is specified.\n\n#\n\n#  KDE4_CREATE_MANPAGE( docbookfile section )\n\n#   Create the manpage for the specified section from the docbookfile (using meinproc4)\n\n#   The resulting manpage will be installed to <installdest> when using\n\n#   INSTALL_DESTINATION <installdest>, or to <installdest>/<subdir> if\n\n#   SUBDIR <subdir> is specified.\n\n#\n\n#\n\n#  A note on the possible values for CMAKE_BUILD_TYPE and how KDE handles\n\n#  the flags for those buildtypes. FindKDE4Internal supports the values\n\n#  Debug, Release, RelWithDebInfo, Profile and Debugfull\n\n#\n\n#  Release\n\n#          optimised for speed, qDebug/kDebug turned off, no debug symbols\n\n#  Release with debug info\n\n#          optimised for speed, debugging symbols on (-g)\n\n#  Debug\n\n#          optimised but debuggable, debugging on (-g)\n\n#          (-fno-reorder-blocks -fno-schedule-insns -fno-inline)\n\n#  DebugFull\n\n#          no optimisation, full debugging on (-g3)\n\n#  Profile\n\n#          DebugFull + -ftest-coverage -fprofile-arcs\n\n#\n\n#  It is expected that the \"Debug\" build type be still debuggable with gdb\n\n#  without going all over the place, but still produce better performance.\n\n#  It's also important to note that gcc cannot detect all warning conditions\n\n#  unless the optimiser is active.\n\n#\n\n#  This module allows to depend on a particular minimum version of kdelibs.\n\n#  To acomplish that one should use the apropriate cmake syntax for\n\n#  find_package. For example to depend on kdelibs >= 4.1.0 one should use\n\n#\n\n#  find_package(KDE4 4.1.0 REQUIRED)\n\n#\n\n#  In earlier versions of KDE you could use the variable KDE_MIN_VERSION to\n\n#  have such a dependency. This variable is deprecated with KDE 4.2.0, but\n\n#  will still work to make the module backwards-compatible.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  _KDE4_PLATFORM_INCLUDE_DIRS is used only internally\n\n#  _KDE4_PLATFORM_DEFINITIONS is used only internally\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006-2009, Alexander Neundorf <neundorf@kde.org>\n\n# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# this is required now by cmake 2.6 and so must not be skipped by if(KDE4_FOUND) below\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set the cmake policies to the 2.4.x compatibility settings (may change for KDE 4.3)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMake 2.6, set compatibility behaviour to cmake 2.4\n\n# this must be executed always, because the CMAKE_MINIMUM_REQUIRED() command above\n\n# resets the policy settings, so we get a lot of warnings\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMP0000: don't require cmake_minimum_version() directly in the top level CMakeLists.txt, FindKDE4Internal.cmake is good enough\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CMP0002: in KDE4 we have multiple targets with the same name for the unit tests\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CMP0003: add the link paths to the link command as with cmake 2.4\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CMP0005: keep escaping behaviour for definitions added via add_definitions()\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# since cmake 2.6.3: NEW behaviour is that setting policies doesn't \"escape\" the file \n\n# where this is done, macros and functions are executed with the policies as they\n\n# were when the were defined. Keep the OLD behaviour so we can set the policies here\n\n# for all KDE software without the big warning\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Only do something if it hasn't been found yet\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We may only search for other packages with \"REQUIRED\" if we are required ourselves.\n\n# This file can be processed either (usually) included in FindKDE4.cmake or\n\n# (when building kdelibs) directly via FIND_PACKAGE(KDE4Internal), that's why\n\n# we have to check for both KDE4_FIND_REQUIRED and KDE4Internal_FIND_REQUIRED.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#this line includes FindQt4.cmake, which searches the Qt library and headers\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# automoc4 (from kdesupport) is now required, Alex\n\n# AS do not need AUTOMOC\n\n#find_package(Automoc4 ${_REQ_STRING_KDE4})\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# cmake 2.6.0 and automoc4 < 0.9.84 don't work right for -D flags\n\n#if (NOT AUTOMOC4_VERSION)\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# the version macro was added for 0.9.84\n",
        "Line" : 299,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "#   set(AUTOMOC4_VERSION \"0.9.83\")\n\n#endif (NOT AUTOMOC4_VERSION)\n\n#macro_ensure_version(\"0.9.87\" \"${AUTOMOC4_VERSION}\" _automoc4_version_ok)\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# for compatibility with KDE 4.0.x\n\n#set(KDE4_AUTOMOC_EXECUTABLE        \"${AUTOMOC4_EXECUTABLE}\" )\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Perl is required for building KDE software\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Check that we really found everything.\n\n# If KDE4 was searched with REQUIRED, we error out with FATAL_ERROR if something wasn't found \n\n# already above in the other FIND_PACKAGE() calls.\n\n# If KDE4 was searched without REQUIRED and something in the FIND_PACKAGE() calls above wasn't found, \n\n# then we get here and must check that everything has actually been found. If something is missing,\n\n# we must not fail with FATAL_ERROR, but only not set KDE4_FOUND.\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# now we are sure we have everything we need\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# get the directory of the current file, used later on in the file\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# are we trying to compile kdelibs ? kdelibs_SOURCE_DIR comes from \"project(kdelibs)\" in kdelibs/CMakeLists.txt\n\n# then enter bootstrap mode\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#######################  #now try to find some kde stuff  ################################\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# CMAKE_CFG_INTDIR is the output subdirectory created e.g. by XCode and MSVC\n",
        "Line" : 380,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# when building kdelibs, make the kcfg rules depend on the binaries...\n",
        "Line" : 395,
        "CharPositionInLine" : 3
      },
      "27" : {
        "Text" : "# ... but NOT otherwise\n",
        "Line" : 404,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# we don't want to be forced to set two paths into the build tree \n",
        "Line" : 412,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# on win32 the install dir is determined on runtime not install time\n\n# KDELIBS_INSTALL_DIR and QT_INSTALL_DIR are used in KDELibsDependencies.cmake to setup \n\n# kde install paths and library dependencies\n",
        "Line" : 415,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# This file contains information about the installed kdelibs, Alex\n",
        "Line" : 424,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "# Check the version of KDE. It must be at least KDE_MIN_VERSION as set by the user.\n\n# KDE_VERSION is set in KDELibsDependencies.cmake since KDE 4.0.x. Alex\n\n# Support for the new-style (>= 2.6.0) support for requiring some version of a package:\n",
        "Line" : 427,
        "CharPositionInLine" : 3
      },
      "32" : {
        "Text" : "#message(FATAL_ERROR \"KDE_MIN_VERSION=${KDE_MIN_VERSION}  found ${KDE_VERSION} exact: -${KDE4_FIND_VERSION_EXACT}- version: -${KDE4_FIND_VERSION}-\")\n",
        "Line" : 438,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# This file contains the exported library target from kdelibs (new with cmake 2.6.x), e.g.\n\n# the library target \"kdeui\" is exported as \"KDE4__kdeui\". The \"KDE4__\" is used as\n\n# \"namespace\" to separate the imported targets from \"normal\" targets, it is stored in \n\n# KDE4_TARGET_PREFIX, which is set in KDELibsDependencies.cmake .\n\n# Include it to \"import\" the libraries from kdelibs into the current projects as targets.\n\n# This makes setting the _LIBRARY and _LIBS variables actually a bit superfluos, since e.g.\n\n# the kdeui library could now also be used just as \"KDE4__kdeui\" and still have all their\n\n# dependent libraries handled correctly. But to keep compatibility and not to change\n\n# behaviour we set all these variables anyway as seen below. Alex\n",
        "Line" : 441,
        "CharPositionInLine" : 3
      },
      "34" : {
        "Text" : "# helper macro, sets both the KDE4_FOO_LIBRARY and KDE4_FOO_LIBS variables to KDE4__foo\n",
        "Line" : 452,
        "CharPositionInLine" : 3
      },
      "35" : {
        "Text" : "# sorted by names\n",
        "Line" : 458,
        "CharPositionInLine" : 3
      },
      "36" : {
        "Text" : "# these targets do not always exist, since they are built conditionally:\n",
        "Line" : 485,
        "CharPositionInLine" : 3
      },
      "37" : {
        "Text" : "# and this one for compatibility:\n",
        "Line" : 494,
        "CharPositionInLine" : 3
      },
      "38" : {
        "Text" : "# KDE4_LIB_INSTALL_DIR and KDE4_INCLUDE_INSTALL_DIR are set in KDELibsDependencies.cmake,\n\n# use them to set the KDE4_LIB_DIR and KDE4_INCLUDE_DIR \"public interface\" variables\n",
        "Line" : 497,
        "CharPositionInLine" : 3
      },
      "39" : {
        "Text" : "# This setting is currently not recorded in KDELibsDependencies.cmake: \n",
        "Line" : 503,
        "CharPositionInLine" : 3
      },
      "40" : {
        "Text" : "# now include the file with the imported tools (executable targets)\n\n# Having the libs and tools in two separate files should help with cross compiling.\n",
        "Line" : 506,
        "CharPositionInLine" : 3
      },
      "41" : {
        "Text" : "# get the build CONFIGURATIONS which were exported in this file, and use just the first\n\n# of them to get the location of the installed executables\n",
        "Line" : 510,
        "CharPositionInLine" : 3
      },
      "42" : {
        "Text" : "# allow searching cmake modules in all given kde install locations (KDEDIRS based)\n",
        "Line" : 519,
        "CharPositionInLine" : 3
      },
      "43" : {
        "Text" : "# ignore already added pathes, case insensitive\n",
        "Line" : 527,
        "CharPositionInLine" : 9
      },
      "44" : {
        "Text" : "#####################  provide some options   ##########################################\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# if CMake 2.6.3 or above is used, provide an option which should be used by other KDE packages\n\n# whether to install a CMake FooConfig.cmake into lib/foo/cmake/ or /lib/cmake/foo/\n\n# (with 2.6.3 and above also lib/cmake/foo/ is supported):\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Position-Independent-Executable is a feature of Binutils, Libc, and GCC that creates an executable\n\n# which is something between a shared library and a normal executable.\n\n# Programs compiled with these features appear as ?shared object? with the file command.\n\n# info from \"http://www.linuxfromscratch.org/hlfs/view/unstable/glibc/chapter02/pie.html\"\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#####################  some more settings   ##########################################\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# If we are building ! kdelibs, check where kdelibs are installed.\n\n# If they are installed in a directory which contains \"lib64\", we default to \"64\" for LIB_SUFFIX,\n\n# so the current project will by default also go into lib64.\n\n# The same for lib32. Alex\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "########## the following are directories where stuff will be installed to  ###########\n\n#\n\n# this has to be after find_xxx() block above, since there KDELibsDependencies.cmake is included\n\n# which contains the install dirs from kdelibs, which are reused below\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# use relative install prefix to avoid hardcoded install paths in cmake_install.cmake files\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# The subdirectory relative to the install prefix where libraries will be installed (default is ${EXEC_INSTALL_PREFIX}/lib${LIB_SUFFIX})\n",
        "Line" : 595,
        "CharPositionInLine" : 60
      },
      "52" : {
        "Text" : "# Base directory for executables and libraries\n\n# Base directory for files which go to share/\n\n# The install dir for executables (default ${EXEC_INSTALL_PREFIX}/bin)\n\n# The install dir for system executables (default ${EXEC_INSTALL_PREFIX}/sbin)\n",
        "Line" : 597,
        "CharPositionInLine" : 40
      },
      "53" : {
        "Text" : "# The subdirectory relative to the install prefix where libraries will be installed (default is ${BIN_INSTALL_DIR})\n\n# The subdirectory to the header prefix\n",
        "Line" : 602,
        "CharPositionInLine" : 60
      },
      "54" : {
        "Text" : "#                \"The subdirectory relative to the install prefix where plugins will be installed (default is ${LIB_INSTALL_DIR}/kde4)\n\n# The config file install dir\n",
        "Line" : 605,
        "CharPositionInLine" : 60
      },
      "55" : {
        "Text" : "# The parent directory where applications can install their data\n",
        "Line" : 607,
        "CharPositionInLine" : 65
      },
      "56" : {
        "Text" : "# The HTML install dir for documentation\n",
        "Line" : 608,
        "CharPositionInLine" : 64
      },
      "57" : {
        "Text" : "# The icon install dir (default ${SHARE_INSTALL_PREFIX}/share/icons/)\n",
        "Line" : 609,
        "CharPositionInLine" : 60
      },
      "58" : {
        "Text" : "# The install dir for kconfig files\n",
        "Line" : 610,
        "CharPositionInLine" : 65
      },
      "59" : {
        "Text" : "# The install dir for translations\n\n# The install dir for the mimetype desktop files\n\n# The install dir for service (desktop, protocol, ...) files\n\n# The install dir for servicestypes desktop files\n\n# The install dir for sound files\n\n# The install dir for templates (Create new file...)\n\n# The install dir for wallpapers\n\n# The install dir for demos\n\n# The kconf_update install dir\n\n# The install dir for autostart files\n",
        "Line" : 611,
        "CharPositionInLine" : 60
      },
      "60" : {
        "Text" : "# The XDG apps dir\n\n# The XDG directory\n\n# The install dir for the xdg mimetypes\n",
        "Line" : 622,
        "CharPositionInLine" : 63
      },
      "61" : {
        "Text" : "# The kde sysconfig install dir (default /etc)\n\n# The kde man install dir (default ${SHARE_INSTALL_PREFIX}/man/)\n\n# The kde info install dir (default ${SHARE_INSTALL_PREFIX}/info)\")\n\n# The kde dbus interfaces install dir (default  ${SHARE_INSTALL_PREFIX}/dbus-1/interfaces)\")\n\n# The kde dbus services install dir (default  ${SHARE_INSTALL_PREFIX}/dbus-1/services)\")\n",
        "Line" : 626,
        "CharPositionInLine" : 63
      },
      "62" : {
        "Text" : "# This macro implements some very special logic how to deal with the cache.\n\n# By default the various install locations inherit their value from their \"parent\" variable\n\n# so if you set CMAKE_INSTALL_PREFIX, then EXEC_INSTALL_PREFIX, PLUGIN_INSTALL_DIR will\n\n# calculate their value by appending subdirs to CMAKE_INSTALL_PREFIX .\n\n# This would work completely without using the cache.\n\n# But if somebody wants e.g. a different EXEC_INSTALL_PREFIX this value has to go into\n\n# the cache, otherwise it will be forgotten on the next cmake run.\n\n# Once a variable is in the cache, it doesn't depend on its \"parent\" variables\n\n# anymore and you can only change it by editing it directly.\n\n# this macro helps in this regard, because as long as you don't set one of the\n\n# variables explicitely to some location, it will always calculate its value from its\n\n# parents. So modifying CMAKE_INSTALL_PREFIX later on will have the desired effect.\n\n# But once you decide to set e.g. EXEC_INSTALL_PREFIX to some special location\n\n# this will go into the cache and it will no longer depend on CMAKE_INSTALL_PREFIX.\n\n#\n\n# additionally if installing to the same location as kdelibs, the other install\n\n# directories are reused from the installed kdelibs\n",
        "Line" : 634,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# The INSTALL_TARGETS_DEFAULT_ARGS variable should be used when libraries are installed.\n\n# It should also be used when installing applications, since then \n\n# on OS X application bundles will be installed to BUNDLE_INSTALL_DIR.\n\n# The variable MUST NOT be used for installing plugins.\n\n# It also MUST NOT be used for executables which are intended to go into sbin/ or libexec/.\n\n#\n\n# Usage is like this:\n\n#    install(TARGETS kdecore kdeui ${INSTALL_TARGETS_DEFAULT_ARGS} )\n\n#\n\n# This will install libraries correctly under UNIX, OSX and Windows (i.e. dll's go\n\n# into bin/.\n\n# Later on it will be possible to extend this for installing OSX frameworks\n\n# The COMPONENT Devel argument has the effect that static libraries belong to the \n\n# \"Devel\" install component. If we use this also for all install() commands\n\n# for header files, it will be possible to install\n\n#   -everything: make install OR cmake -P cmake_install.cmake\n\n#   -only the development files: cmake -DCOMPONENT=Devel -P cmake_install.cmake\n\n#   -everything except the development files: cmake -DCOMPONENT=Unspecified -P cmake_install.cmake\n\n# This can then also be used for packaging with cpack.\n",
        "Line" : 706,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# on the Mac support an extra install directory for application bundles starting with cmake 2.6\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "##############  add some more default search paths  ###############\n\n#\n\n# the KDE4_xxx_INSTALL_DIR variables are empty when building kdelibs itself\n\n# and otherwise point to the kde4 install dirs\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# under Windows dlls may be also installed in bin/\n",
        "Line" : 752,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "######################################################\n\n#  and now the platform specific stuff\n\n######################################################\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Set a default build type for single-configuration\n\n# CMake generators if no build type is set.\n",
        "Line" : 764,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# limit win32 packaging to kdelibs at now \n\n# don't know if package name, version and notes are always available \n",
        "Line" : 779,
        "CharPositionInLine" : 3
      },
      "70" : {
        "Text" : "# if we are compiling kdelibs, add KDEWIN32_LIBRARIES explicitely,\n\n# otherwise they come from KDELibsDependencies.cmake, Alex\n",
        "Line" : 793,
        "CharPositionInLine" : 3
      },
      "71" : {
        "Text" : "# we prefer to use a different postfix for debug libs only on Windows\n\n# does not work atm\n",
        "Line" : 799,
        "CharPositionInLine" : 3
      },
      "72" : {
        "Text" : "# windows, microsoft compiler\n",
        "Line" : 803,
        "CharPositionInLine" : 3
      },
      "73" : {
        "Text" : "# C4250: 'class1' : inherits 'class2::member' via dominance\n",
        "Line" : 806,
        "CharPositionInLine" : 6
      },
      "74" : {
        "Text" : "# C4251: 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n",
        "Line" : 808,
        "CharPositionInLine" : 6
      },
      "75" : {
        "Text" : "# C4396: 'identifier' : 'function' the inline specifier cannot be used when a friend declaration refers to a specialization of a function template\n",
        "Line" : 810,
        "CharPositionInLine" : 6
      },
      "76" : {
        "Text" : "# to avoid a lot of deprecated warnings\n",
        "Line" : 813,
        "CharPositionInLine" : 9
      },
      "77" : {
        "Text" : "# 'identifier' : no suitable definition provided for explicit template instantiation request\n",
        "Line" : 815,
        "CharPositionInLine" : 9
      },
      "78" : {
        "Text" : "# for visual studio IDE set the path correctly for custom commands\n\n# maybe under windows bat-files should be generated for running apps during the build\n",
        "Line" : 821,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# setup default RPATH/install_name handling, may be overridden by KDE4_HANDLE_RPATH_FOR_EXECUTABLE\n\n# It sets up to build with full RPATH. When installing, RPATH will be changed to the LIB_INSTALL_DIR\n\n# and all link directories which are not inside the current build dir.\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# the rest is RPATH handling\n\n# here the defaults are set\n\n# which are partly overwritten in kde4_handle_rpath_for_library()\n\n# and kde4_handle_rpath_for_executable(), both located in KDE4Macros.cmake, Alex\n",
        "Line" : 839,
        "CharPositionInLine" : 3
      },
      "81" : {
        "Text" : "# add our LIB_INSTALL_DIR to the RPATH and use the RPATH figured out by cmake when compiling\n",
        "Line" : 846,
        "CharPositionInLine" : 6
      },
      "82" : {
        "Text" : "# Done by FindQt4.cmake already\n\n#find_package(X11 REQUIRED)\n\n# UNIX has already set _KDE4_PLATFORM_INCLUDE_DIRS, so append\n",
        "Line" : 856,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# This will need to be modified later to support either Qt/X11 or Qt/Mac builds\n",
        "Line" : 863,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# we need to set MACOSX_DEPLOYMENT_TARGET to (I believe) at least 10.2 or maybe 10.3 to allow\n\n# -undefined dynamic_lookup; in the future we should do this programmatically\n\n# hmm... why doesn't this work?\n",
        "Line" : 868,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# \"-undefined dynamic_lookup\" means we don't care about missing symbols at link-time by default\n\n# this is bad, but unavoidable until there is the equivalent of libtool -no-undefined implemented\n\n# or perhaps it already is, and I just don't know where to look  ;)\n",
        "Line" : 873,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "#set(CMAKE_SHARED_LINKER_FLAGS \"-single_module -undefined dynamic_lookup -multiply_defined suppress\")\n\n#set(CMAKE_MODULE_LINKER_FLAGS \"-undefined dynamic_lookup -multiply_defined suppress\")\n",
        "Line" : 879,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# we profile...\n",
        "Line" : 882,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# removed -Os, was there a special reason for using -Os instead of -O2 ?, Alex\n\n# optimization flags are set below for the various build types\n",
        "Line" : 888,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# we profile...\n",
        "Line" : 905,
        "CharPositionInLine" : 6
      },
      "90" : {
        "Text" : "############################################################\n\n# compiler specific settings\n\n############################################################\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# this macro is for internal use only.\n",
        "Line" : 950,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# make sure that no header adds libcmt by default using #pragma comment(lib, \"libcmt.lib\") as done by mfc/afx.h\n",
        "Line" : 960,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# Select flags.\n",
        "Line" : 970,
        "CharPositionInLine" : 3
      },
      "94" : {
        "Text" : "# gcc under Windows\n",
        "Line" : 990,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# we always link against the release version of QT with mingw\n\n# (even for debug builds). So we need to define QT_NO_DEBUG\n\n# or else QPluginLoader rejects plugins because it thinks\n\n# they're built against the wrong QT.\n",
        "Line" : 995,
        "CharPositionInLine" : 6
      },
      "96" : {
        "Text" : "# visibility support\n",
        "Line" : 1017,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# get the gcc version\n",
        "Line" : 1021,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# gcc on mac just reports: \"gcc (GCC) 3.3 20030304 ...\" without the patch level, handle this here:\n",
        "Line" : 1025,
        "CharPositionInLine" : 3
      },
      "99" : {
        "Text" : "# save a little by making local statics not threadsafe\n\n# ### do not enable it for older compilers, see\n\n# ### http://gcc.gnu.org/bugzilla/show_bug.cgi?id=31806\n",
        "Line" : 1034,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# check that Qt defines Q_DECL_EXPORT as __attribute__ ((visibility(\"default\")))\n\n# if it doesn't and KDE compiles with hidden default visibiltiy plugins will break\n",
        "Line" : 1050,
        "CharPositionInLine" : 6
      },
      "101" : {
        "Text" : "# Select flags.\n",
        "Line" : 1079,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# visibility support\n",
        "Line" : 1092,
        "CharPositionInLine" : 3
      },
      "103" : {
        "Text" : "#   check_cxx_compiler_flag(-fvisibility=hidden __KDE_HAVE_ICC_VISIBILITY)\n\n#   if (__KDE_HAVE_ICC_VISIBILITY)\n\n#      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\n\n#   endif (__KDE_HAVE_ICC_VISIBILITY)\n",
        "Line" : 1094,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "###########    end of platform specific stuff  ##########################\n",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# KDE4Macros.cmake contains all the KDE specific macros\n",
        "Line" : 1105,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# decide whether KDE4 has been found\n",
        "Line" : 1109,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# inside kdelibs the include dir and lib dir are internal, not \"found\"\n",
        "Line" : 1118,
        "CharPositionInLine" : 3
      },
      "108" : {
        "Text" : "#bail out if something wasn't found\n",
        "Line" : 1148,
        "CharPositionInLine" : 3
      },
      "109" : {
        "Text" : "#add the found Qt and KDE include directories to the current include path\n\n#the ${KDE4_INCLUDE_DIR}/KDE directory is for forwarding includes, eg. #include <KMainWindow>\n",
        "Line" : 1170,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 110
    },
    "cmake/modules/FindKDE4Workspace.cmake" : {
      "ObjectId" : "660c7b8dcb4062f1b5bf2f4b14e3e31768f607d0",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find if we installed kdebase/workspaces.\n\n# Once done this will define\n\n#\n\n#  KDE4WORKSPACE_FOUND - system has KDE workspace installed\n\n#  KDE4WORKSPACE_INCLUDE_DIR - the KDE workspace include directory\n\n#\n\n# It also sets variables for the following libraries:\n\n#   KDE4WORKSPACE_TASKMANAGER_LIBRARY, KDE4WORKSPACE_TASKMANAGER_LIBS\n\n#   KDE4WORKSPACE_KWORKSPACE_LIBRARY, KDE4WORKSPACE_KWORKSPACE_LIBS\n\n#   KDE4WORKSPACE_SOLIDCONTROLIFACES_LIBRARY, KDE4WORKSPACE_SOLIDCONTROLIFACES_LIBS\n\n#   KDE4WORKSPACE_SOLIDCONTROL_LIBRARY, KDE4WORKSPACE_SOLIDCONTROL_LIBS\n\n#   KDE4WORKSPACE_PROCESSUI_LIBRARY, KDE4WORKSPACE_PROCESSUI_LIBS\n\n#   KDE4WORKSPACE_LSOFUI_LIBRARY, KDE4WORKSPACE_LSOFUI_LIBS\n\n#   KDE4WORKSPACE_PLASMACLOCK_LIBRARY, KDE4WORKSPACE_PLASMACLOCK_LIBS\n\n#   KDE4WORKSPACE_NEPOMUKQUERYCLIENT_LIBRARY, KDE4WORKSPACE_NEPOMUKQUERYCLIENT_LIBS\n\n#   KDE4WORKSPACE_NEPOMUKQUERY_LIBRARY, KDE4WORKSPACE_NEPOMUKQUERY_LIBS\n\n#   KDE4WORKSPACE_KSCREENSAVER_LIBRARY, KDE4WORKSPACE_KSCREENSAVER_LIBS\n\n#   KDE4WORKSPACE_WEATHERION_LIBRARY, KDE4WORKSPACE_WEATHERION_LIBS\n\n#   KDE4WORKSPACE_KWINEFFECTS_LIBRARY, KDE4WORKSPACE_KWINEFFECTS_LIBS\n\n#   KDE4WORKSPACE_KDECORATIONS_LIBRARY, KDE4WORKSPACE_KDECORATIONS_LIBS\n\n#   KDE4WORKSPACE_KSGRD_LIBRARY, KDE4WORKSPACE_KSGRD_LIBS\n\n#   KDE4WORKSPACE_KEPHAL_LIBRARY, KDE4WORKSPACE_KEPHAL_LIBS\n\n#\n\n# And the following locations:\n\n#   KDE4WORKSPACE_LIB_DIR\n\n#   KDE4WORKSPACE_LIBEXEC_DIR\n\n#   KDE4WORKSPACE_INCLUDE_DIR\n\n#   KDE4WORKSPACE_BIN_DIR\n\n#   KDE4WORKSPACE_SBIN_DIR\n\n#   KDE4WORKSPACE_DATA_DIR\n\n#   KDE4WORKSPACE_HTML_DIR\n\n#   KDE4WORKSPACE_CONFIG_DIR\n\n#   KDE4WORKSPACE_ICON_DIR\n\n#   KDE4WORKSPACE_KCFG_DIR\n\n#   KDE4WORKSPACE_LOCALE_DIR\n\n#   KDE4WORKSPACE_MIME_DIR\n\n#   KDE4WORKSPACE_SOUND_DIR\n\n#   KDE4WORKSPACE_TEMPLATES_DIR\n\n#   KDE4WORKSPACE_WALLPAPER_DIR\n\n#   KDE4WORKSPACE_KCONF_UPDATE_DIR\n\n#   KDE4WORKSPACE_AUTOSTART_DIR\n\n#   KDE4WORKSPACE_XDG_APPS_DIR\n\n#   KDE4WORKSPACE_XDG_DIRECTORY_DIR\n\n#   KDE4WORKSPACE_SYSCONF_DIR\n\n#   KDE4WORKSPACE_MAN_DIR\n\n#   KDE4WORKSPACE_INFO_DIR\n\n#   KDE4WORKSPACE_DBUS_INTERFACES_DIR\n\n#   KDE4WORKSPACE_DBUS_SERVICES_DIR\n\n#   KDE4WORKSPACE_SERVICES_DIR\n\n#   KDE4WORKSPACE_SERVICETYPES_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The find_package() call below loads the file KDE4WorkspaceConfig.cmake file.\n\n# This file is created and installed by kdebase/workspace/CMakeLists.txt\n\n# It contains settings for all install location of kdebase/workspace, as e.g.\n\n# KDE4WORKSPACE_INCLUDE_DIR, and also variables for all libraries.\n\n# See kdebase/workspace/CMakeLists.txt and kdebase/workspace/KDE4WorkspaceConfig.cmake.in \n\n# for details. Alex\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindKDEWIN32.cmake" : {
      "ObjectId" : "abbff19e80fa50f81bd34f9c9d6378c5b761324f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the KDEWIN32 library\n\n# \n\n# Once done this will define\n\n#\n\n#  KDEWIN32_FOUND - system has KDEWIN32\n\n#  KDEWIN32_INCLUDES - the KDEWIN32 include directories\n\n#  KDEWIN32_LIBRARIES - The libraries needed to use KDEWIN32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2007-2008, Ralf Habacker, <ralf.habacker@freenet.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search for kdewin32 in the default install directory for applications (default of (n)make install)\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add needed system libs\n",
        "Line" : 43,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#mingw compiler\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# msvc compiler\n\n# add the MS SDK include directory if available\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# required for configure\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindKDEWIN_Packager.cmake" : {
      "ObjectId" : "b8f023e50b8ad11d827cc6fefbc8ba6ab8171433",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# KDEWIN packager  http://www.winkde.org/pub/kde/ports/win32/installer\n\n# \n\n# The kdewin packager is searched in the following pathes and order \n\n# \n\n#    path specified by the environment dir KDEWIN_PACKAGER_DIR\n\n#    <ProgramFiles>/kdewin-packager \n\n#    <ProgramFiles>/kdewin-installer\n\n#\n\n# The macro KDEWIN_PACKAGER provides package building support and should be \n\n# added to the top level CMakeLists.txt as shown below\n\n# \n\n# if (KDEWIN_PACKAGER_FOUND)\n\n#    KDEWIN_PACKAGER(\n\n#       \"projectname\"\n\n#       \"version\"\n\n#       \"description\" \n\n#       \"additional options\"\n\n#   )\n\n# endif (KDEWIN_PACKAGER_FOUND)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The macro KDEWIN_PACKAGER adds three additional makefile targets, which could be \n\n# called using the regular make tool \n\n#   \n\n#    kdewin_package \n\n#           - build kdewin package with currently used compiler and build type \n\n#    kdewin_package_debug_and_release \n\n#           - build kdewin debug and release package with currently used compiler\n\n#    kdewin_package_debug_and_release_mingw_and_msvc\n\n#           - build kdewin debug and release package with mingw and msvc compiler\n\n#\n\n#\n\n#\n\n# Copyright (c) 2006-2007, Ralf Habacker\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check for enviroment variable\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# search in the default program install folder\n",
        "Line" : 44,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# FIXME: cleanup does not work \n\n#COMMAND rmdir /Q /S ${CMAKE_BINARY_DIR}\\temp\n",
        "Line" : 98,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# prelimary target\n",
        "Line" : 101,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# FIXME: cleanup does not work \n\n#COMMAND rmdir /Q /S ${CMAKE_BINARY_DIR}\\temp\n",
        "Line" : 112,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# FIXME: cleanup does not work \n\n#COMMAND rmdir /Q /S ${CMAKE_BINARY_DIR}\\temp\n",
        "Line" : 140,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 8
    },
    "cmake/modules/FindKNepomuk.cmake" : {
      "ObjectId" : "655f6fe8ff3d494c9393209ec301f6f97e0e08e8",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Once done this will define\n\n#\n\n#  KNEPOMUK_FOUND - system has the Nepomuk-KDE backbone lib KNep\n\n#  KNEPOMUK_INCLUDES - the libKNep include directory\n\n#  KNEPOMUK_LIBRARIES - Link these to use libKNep\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Sebastian Trueg, <sebastian@trueg.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindKdcraw.cmake" : {
      "ObjectId" : "dfd901c5e9d5407d222c7b7f4d415d6111d5ace9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Kdcraw library\n\n# Once done this will define\n\n#\n\n#  KDCRAW_FOUND - system has libkdcraw\n\n#  KDCRAW_INCLUDE_DIR - the libkdcraw include directory\n\n#  KDCRAW_LIBRARIES - Link these to use libkdcraw\n\n#  KDCRAW_DEFINITIONS - Compiler switches required for using libkdcraw\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Gilles Caulier, <caulier.gilles@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check if library is not in local sub-folder\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Was it found in libkdcraw/ or in libs/libkdcraw?\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 50,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# query pkg-config asking for a libkdcraw >= 0.2.0\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindKdeMultimedia.cmake" : {
      "ObjectId" : "c88502913dddca8ef15e3572a95af91b00d52e41",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module to see if we have KDE4 kdemultimedia installed\n\n#\n\n# This module defines\n\n#  KDEMULTIMEDIA_INCLUDE_DIR - the include dir\n\n#  KCDDB_LIBRARY - the kcddb library\n\n#  KCOMPACTDISC_LIBRARY - the kcompactdisk library\n\n#  KDEMULTIMEDIA_LIBRARIES - all of the KDE multimedia libraries together\n\n#  KDEMULTIMEDIA_FOUND - true if the above have been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# KDEMULTIMEDIA_INCLUDE_DIR\n\n# KDEMULTIMEDIA_FOUND\n\n# Copyright (C) 2007 Laurent Montel <montel@kde.org>\n\n# Copyright (C) 2007 Gerd Fleischer <gerdfleischer@web.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# audioencoder, audiocdplugins?\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindKdepim.cmake" : {
      "ObjectId" : "d04886af327d64f5b6964a7c99c84e6057e29fa7",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake macro to see if we have kdepim installed\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# KDEPIM_INCLUDE_DIR\n\n# KDEPIM_FOUND\n\n# Copyright (C) 2007 Laurent Montel <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindKdepimLibs.cmake" : {
      "ObjectId" : "3ab58e21b7c9b1675c7658c9a08e2363c1c0f189",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find if we installed kdepimlibs before to compile it\n\n# Once done this will define\n\n#\n\n#  KDEPIMLIBS_FOUND - system has KDE PIM Libraries\n\n#  KDEPIMLIBS_INCLUDE_DIR - the KDE PIM Libraries include directory\n\n#\n\n# It also sets variables for the following libraries:\n\n#   KDEPIMLIBS_AKONADI_LIBS\n\n#   KDEPIMLIBS_AKONADI_KMIME_LIBS\n\n#   KDEPIMLIBS_AKONADI_KABC_LIBS\n\n#   KDEPIMLIBS_GPGMEPP_LIBS\n\n#   KDEPIMLIBS_KABC_LIBS\n\n#   KDEPIMLIBS_KBLOG_LIBS\n\n#   KDEPIMLIBS_KCAL_LIBS\n\n#   KDEPIMLIBS_KIMAP_LIBS\n\n#   KDEPIMLIBS_KLDAP_LIBS\n\n#   KDEPIMLIBS_KMIME_LIBS\n\n#   KDEPIMLIBS_KPIMIDENTITIES_LIBS\n\n#   KDEPIMLIBS_KPIMUTILS_LIBS\n\n#   KDEPIMLIBS_KRESOURCES_LIBS\n\n#   KDEPIMLIBS_KTNEF_LIBS\n\n#   KDEPIMLIBS_KXMLRPCCLIENT_LIBS\n\n#   KDEPIMLIBS_MAILTRANSPORT_LIBS\n\n#   KDEPIMLIBS_QGPGME_LIBS\n\n#   KDEPIMLIBS_SYNDICATION_LIBS\n\n#\n\n# And the following locations:\n\n#   KDEPIMLIBS_DATA_DIR\n\n#   KDEPIMLIBS_DBUS_INTERFACES_DIR\n\n#   KDEPIMLIBS_DBUS_SERVICES_DIR\n\n#   KDEPIMLIBS_INCLUDE_DIR\n\n#   KDEPIMLIBS_LIB_DIR\n\n#   KDEPIMLIBS_BIN_DIR\n\n#   KDEPIMLIBS_LIBEXEC_DIR\n\n#   KDEPIMLIBS_SBIN_DIR\n\n#   KDEPIMLIBS_HTML_DIR\n\n#   KDEPIMLIBS_CONFIG_DIR\n\n#   KDEPIMLIBS_ICON_DIR\n\n#   KDEPIMLIBS_KCFG_DIR\n\n#   KDEPIMLIBS_LOCALE_DIR\n\n#   KDEPIMLIBS_MIME_DIR\n\n#   KDEPIMLIBS_SOUND_DIR\n\n#   KDEPIMLIBS_TEMPLATES_DIR\n\n#   KDEPIMLIBS_KCONF_UPDATE_DIR\n\n#   KDEPIMLIBS_AUTOSTART_DIR\n\n#   KDEPIMLIBS_XDG_APPS_DIR\n\n#   KDEPIMLIBS_XDG_DIRECTORY_DIR\n\n#   KDEPIMLIBS_SYSCONF_DIR\n\n#   KDEPIMLIBS_MAN_DIR\n\n#   KDEPIMLIBS_INFO_DIR\n\n#   KDEPIMLIBS_SERVICES_DIR\n\n#   KDEPIMLIBS_SERVICETYPES_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The find_package() call below loads the file KdepimLibsConfig.cmake file.\n\n# This file is created and installed by kdepimlibs/CMakeLists.txt\n\n# It contains settings for all install location of kdepimlibs, as e.g.\n\n# KDEPIMLIBS_INCLUDE_DIR, and also variables for all libraries.\n\n# See kdepimlibs/CMakeLists.txt and kdepimlibs/KdepimLibsConfig.cmake.in \n\n# for details. Alex\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindKexiv2.cmake" : {
      "ObjectId" : "dd62e8859955b9f16a0a3662f83b959033dd1646",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the KExiv2 library\n\n# Once done this will define\n\n#\n\n#  KEXIV2_FOUND - system has libkexiv2\n\n#  KEXIV2_INCLUDE_DIR - the libkexiv2 include directory\n\n#  KEXIV2_LIBRARIES - Link these to use libkexiv2\n\n#  KEXIV2_DEFINITIONS - Compiler switches required for using libkexiv2\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Gilles Caulier, <caulier.gilles@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check if library is not in local sub-folder\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# query pkg-config asking for a libkexiv2 >= 0.2.0\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindKipi.cmake" : {
      "ObjectId" : "ccb699f170c7dd783d55d6996b1252842e98e1a6",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Kipi library\n\n# Once done this will define\n\n#\n\n#  KIPI_FOUND - system has libkipi\n\n#  KIPI_INCLUDE_DIR - the libkipi include directory\n\n#  KIPI_LIBRARIES - Link these to use libkipi\n\n#  KIPI_DEFINITIONS - Compiler switches required for using libkipi\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Gilles Caulier, <caulier.gilles@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check if library is not in local sub-folder\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# query pkg-config asking for a libkipi >= 0.2.0\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindKonto.cmake" : {
      "ObjectId" : "d3c3458b992e04b72370d16a8e072ae057ebc1f7",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Once done this will define\n\n#\n\n#  KONTO_FOUND - system has the Nepomuk-KDE backbone lib Konto\n\n#  KONTO_INCLUDES - the libKonto include directory\n\n#  KONTO_LIBRARIES - Link these to use libKonto\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Sebastian Trueg, <sebastian@trueg.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindKopete.cmake" : {
      "ObjectId" : "cf65b5a170c0d33ea375615e463f545c3048beec",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Kopete library\n\n# Once done this will define\n\n#\n\n#  Kopete_FOUND - system has kopete\n\n#  KOPETE_INCLUDE_DIR - the kopete include directory\n\n#  KOPETE_LIBRARIES - Link these to use kopete\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007 Charles Connell <charles@connells.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# read from cache\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindKorundum.cmake" : {
      "ObjectId" : "d921f6112fd3bce143c39cb2482554b73c16e04a",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Korundum - the KDE Ruby bindings\n\n#\n\n# This module finds if Korundum is installed.\n\n# It defines the following variables:\n\n#  KORUNDUM_PATH - the path to the korundum ruby file\n\n#  KORUNDUM_FOUND - true if it has been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Egon Willighagen, <egonw@users.sf.net>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# just for compat.:\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindLCMS.cmake" : {
      "ObjectId" : "9d162d2cfdd8345d3712943cd4a98f675a9612aa",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LCMS\n\n# Find the LCMS includes and library\n\n# This module defines\n\n#  LCMS_INCLUDE_DIR, where to find lcms.h\n\n#  LCMS_LIBRARIES, the libraries needed to use LCMS.\n\n#  LCMS_VERSION, The value of LCMS_VERSION defined in lcms.h\n\n#  LCMS_FOUND, If false, do not try to use LCMS.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Adrian Page, <adrian@pagenet.plus.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindLibArt.cmake" : {
      "ObjectId" : "99eaff65d4f6684ca6b0b80e3d100a6a0abb6dfa",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the LibArt 2D graphics library\n\n# Once done this will define\n\n#\n\n#  LIBART_FOUND - system has the LibArt\n\n#  LIBART_INCLUDE_DIR - the LibArt include directory\n\n#  LIBART_LIBRARIES - The libraries needed to use LibArt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "######### ?? where is this used ?? ###############\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindLibKonq.cmake" : {
      "ObjectId" : "f9a06d2f3c206f7e768d63439bf266c442a3fd0c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find konqueror library\n\n# Once done this will define\n\n#\n\n#  LIBKONQ_FOUND - system has libkonq library\n\n#  LIBKONQ_INCLUDE_DIR - the LIBKONQ include directory\n\n#  LIBKONQ_LIBRARY - the libkonq library\n\n#\n\n#  Original file: FindMarbleWidget.cmake (found in digikam-0.10.0-beta2)\n\n#  copyright 2008 by Patrick Spendrin <ps_ml@gmx.de>\n\n#  use this file as you like\n\n#\n\n#  Modifications to find libkonq by Joachim Eibl 2008\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindLibXml2.cmake" : {
      "ObjectId" : "453c261b62186cfce0f842edc6dcbe8cf2a8663e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibXml2\n\n# Once done this will define\n\n#\n\n#  LIBXML2_FOUND - System has LibXml2\n\n#  LIBXML2_INCLUDE_DIR - The LibXml2 include directory\n\n#  LIBXML2_LIBRARIES - The libraries needed to use LibXml2\n\n#  LIBXML2_DEFINITIONS - Compiler switches required for using LibXml2\n\n#  LIBXML2_XMLLINT_EXECUTABLE - The XML checking tool xmllint coming with LibXml2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# for backwards compat. with KDE 4.0.x:\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBXML2_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindLibXslt.cmake" : {
      "ObjectId" : "3a1bcd46693cc792af1e355d11e7524977da7800",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibXslt\n\n# Once done this will define\n\n#\n\n#  LIBXSLT_FOUND - system has LibXslt\n\n#  LIBXSLT_INCLUDE_DIR - the LibXslt include directory\n\n#  LIBXSLT_LIBRARIES - Link these to LibXslt\n\n#  LIBXSLT_DEFINITIONS - Compiler switches required for using LibXslt\n\n#  LIBXSLT_XSLTPROC_EXECUTABLE - path to the xsltproc tool\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# For compatibility with FindLibXslt.cmake from KDE 4.[01].x\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindLibintl.cmake" : {
      "ObjectId" : "52ae647938a481a96288056723fde903138b72ad",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Libintl functionality\n\n# Once done this will define\n\n#\n\n#  LIBINTL_FOUND - system has Libintl\n\n#  LIBINTL_INCLUDE_DIR - Libintl include directory\n\n#  LIBINTL_LIBRARIES - Libraries needed to use Libintl\n\n#\n\n# TODO: This will enable translations only if Gettext functionality is\n\n# present in libc. Must have more robust system for release, where Gettext\n\n# functionality can also reside in standalone Gettext library, or the one\n\n# embedded within kdelibs (cf. gettext.m4 from Gettext source).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Chusslove Illich, <caslav.ilic@gmx.net>\n\n# Copyright (c) 2007, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindLibraryWithDebug.cmake" : {
      "ObjectId" : "58cd730862aadbc7a6a4f6eae411b006eb76531d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  FIND_LIBRARY_WITH_DEBUG\n\n#  -> enhanced FIND_LIBRARY to allow the search for an\n\n#     optional debug library with a WIN32_DEBUG_POSTFIX similar\n\n#     to CMAKE_DEBUG_POSTFIX when creating a shared lib\n\n#     it has to be the second and third argument\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Christian Ehrlicher, <ch.ehrlicher@gmx.de>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# no WIN32_DEBUG_POSTFIX -> simply pass all arguments to FIND_LIBRARY\n",
        "Line" : 16,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# on non-win32 we don't need to take care about WIN32_DEBUG_POSTFIX\n",
        "Line" : 27,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# 1. get all possible libnames\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# just one name\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# search the release lib\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# search the debug lib\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# both libs found\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# only release found\n",
        "Line" : 94,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# only debug (or nothing) found\n",
        "Line" : 99,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 11
    },
    "cmake/modules/FindLinuxWirelesstools.cmake" : {
      "ObjectId" : "794bba77d0a6a8dbfe877547b67598ca55c7e7a4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find wireless extensions support libraries\n\n# Once done this will define\n\n#\n\n#  IW_FOUND - system has IW\n\n#  IW_INCLUDE_DIR - the IW include directory\n\n#  IW_LIBRARIES - Link to these to use IW\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Thorsten Roeder, <thorsten.roeder@weihenstephan.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# show the IW_INCLUDE_DIR and IW_LIBRARIES variables only in the advanced view\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindMsgfmt.cmake" : {
      "ObjectId" : "47c61219ec50de76ea843fd1ee5e7d7bd47dca9f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find msgfmt \n\n# Once done this will define\n\n#\n\n#  MSGFMT_FOUND - system has msgfmt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Montel Laurent <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### TODO: KDE4 needs msgfmt of version 0.15 or greater (cf. msgfmt --version )\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindMusicBrainz.cmake" : {
      "ObjectId" : "c93b2dcc57cfc8d281c9564e2f60599cc59af971",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module to find the musicbrainz library\n\n#\n\n# It defines\n\n#  MUSICBRAINZ_INCLUDE_DIR - the include dir \n\n#  MUSICBRAINZ_LIBRARIES - the required libraries\n\n#  MUSICBRAINZ_FOUND - true if both of the above have been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need version 2, version 3 is source-incompatible\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindMySQL.cmake" : {
      "ObjectId" : "6a0f8941d4d51f67894219d8d65ab96ede275737",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find MySQL / MySQL Embedded library\n\n# Find the MySQL includes and client library\n\n# This module defines\n\n#  MYSQL_INCLUDE_DIR, where to find mysql.h\n\n#  MYSQL_LIBRARIES, the libraries needed to use MySQL.\n\n#  MYSQL_LIB_DIR, path to the MYSQL_LIBRARIES\n\n#  MYSQL_EMBEDDED_LIBRARIES, the libraries needed to use MySQL Embedded.\n\n#  MYSQL_EMBEDDED_LIB_DIR, path to the MYSQL_EMBEDDED_LIBRARIES\n\n#  MYSQL_FOUND, If false, do not try to use MySQL.\n\n#  MYSQL_EMBEDDED_FOUND, If false, do not try to use MySQL Embedded.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006-2008, Jarosław Staniek <staniek@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffix for debug/release mode\n\n# binary_dist: mysql binary distribution\n\n# build_dist: custom build\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#   find_library(MYSQL_LIBRARIES NAMES mysqlclient\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#   find_library(MYSQL_LIBRARIES NAMES mysqlclient\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindNepomuk.cmake" : {
      "ObjectId" : "deb0c8c63182aad70d375ef8eef45623071c8207",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Once done this will define\n\n#\n\n# Nepomuk requires Soprano, so this module checks for Soprano too.\n\n#\n\n#  NEPOMUK_FOUND - system has Nepomuk\n\n#  NEPOMUK_INCLUDE_DIR - the Nepomuk include directory\n\n#  NEPOMUK_LIBRARIES - Link these to use Nepomuk\n\n#  NEPOMUK_DEFINITIONS - Compiler switches required for using Nepomuk\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Sebastian Trueg, <sebastian@trueg.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#to retain backward compatibility\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindNetworkManager.cmake" : {
      "ObjectId" : "ced2017ce5c766e4ff85832909c9de2de7edf1ba",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find NetworkManager\n\n# Once done this will define\n\n#\n\n#  NETWORKMANAGER_FOUND - system has NetworkManager\n\n#  NETWORKMANAGER_INCLUDE_DIRS - the NetworkManager include directories\n\n#  NETWORKMANAGER_LIBRARIES - the libraries needed to use NetworkManager\n\n#  NETWORKMANAGER_CFLAGS - Compiler switches required for using NetworkManager\n\n#  NETWORKMANAGER_VERSION - version number of NetworkManager\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2007, Will Stephenson, <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 23,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindOggVorbis.cmake" : {
      "ObjectId" : "e72d849d24787c830eb3bb1e55719815a2764194",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the OggVorbis libraries\n\n# Once done this will define\n\n#\n\n#  OGGVORBIS_FOUND - system has OggVorbis\n\n#  OGGVORBIS_VERSION - set either to 1 or 2\n\n#  OGGVORBIS_INCLUDE_DIR - the OggVorbis include directory\n\n#  OGGVORBIS_LIBRARIES - The libraries needed to use OggVorbis\n\n#  OGG_LIBRARY         - The Ogg library\n\n#  VORBIS_LIBRARY      - The Vorbis library\n\n#  VORBISFILE_LIBRARY  - The VorbisFile library\n\n#  VORBISENC_LIBRARY   - The VorbisEnc library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Richard Laerkaeng, <richard@goteborg.utfors.se>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#check_include_files(vorbis/vorbisfile.h HAVE_VORBISFILE_H)\n\n#check_library_exists(ogg ogg_page_version \"\" HAVE_LIBOGG)\n\n#check_library_exists(vorbis vorbis_info_init \"\" HAVE_LIBVORBIS)\n\n#check_library_exists(vorbisfile ov_open \"\" HAVE_LIBVORBISFILE)\n\n#check_library_exists(vorbisenc vorbis_info_clear \"\" HAVE_LIBVORBISENC)\n\n#check_library_exists(vorbis vorbis_bitrate_addblock \"\" HAVE_LIBVORBISENC2)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis found\")\n\n#    set (VORBIS_LIBS \"-lvorbis -logg\")\n\n#    set (VORBISFILE_LIBS \"-lvorbisfile\")\n\n#    set (VORBISENC_LIBS \"-lvorbisenc\")\n\n#    set (OGGVORBIS_FOUND TRUE)\n\n#    if (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 2)\n\n#    else (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 1)\n\n#    endif (HAVE_LIBVORBISENC2)\n\n#else (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis not found\")\n\n#endif (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindOpenEXR.cmake" : {
      "ObjectId" : "eb3829cb1f95e81cf3ca286f84ec3861185459ba",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the OpenEXR libraries\n\n# This check defines:\n\n#\n\n#  OPENEXR_FOUND - system has OpenEXR\n\n#  OPENEXR_INCLUDE_DIR - OpenEXR include directory\n\n#  OPENEXR_LIBRARIES - Libraries needed to use OpenEXR\n\n#  OPENEXR_DEFINITIONS - definitions required to use OpenEXR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindOpenSSL.cmake" : {
      "ObjectId" : "1b915530ae8fb57a3bf8069185aea63d4ecbe090",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the OpenSSL encryption library\n\n# Once done this will define\n\n#\n\n#  OPENSSL_FOUND - system has the OpenSSL library\n\n#  OPENSSL_INCLUDE_DIR - the OpenSSL include directory\n\n#  OPENSSL_LIBRARIES - The libraries needed to use OpenSSL\n\n#  OPENSSL_EAY_LIBRARIES - The additional libraries needed to use OpenSSL on windows\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# on win32 we additional need to link to libeay32.lib\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindPCRE.cmake" : {
      "ObjectId" : "efba0652d916d801cb219381fddbeaa7ba2cb998",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the PCRE regular expression library\n\n# Once done this will define\n\n#\n\n#  PCRE_FOUND - system has the PCRE library\n\n#  PCRE_INCLUDE_DIR - the PCRE include directory\n\n#  PCRE_LIBRARIES - The libraries needed to use PCRE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindPhonon.cmake" : {
      "ObjectId" : "93332697336544535915cdfebf8e5972b481561f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find libphonon\n\n# Once done this will define\n\n#\n\n#  PHONON_FOUND    - system has Phonon Library\n\n#  PHONON_INCLUDES - the Phonon include directory\n\n#  PHONON_LIBS     - link these to use Phonon\n\n#  PHONON_VERSION  - the version of the Phonon Library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already found, nothing more to do except figuring out the version\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# As discussed on kde-buildsystem: first look at CMAKE_PREFIX_PATH, then at the suggested PATHS (kde4 install dir)\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# then at the default system locations (CMAKE_SYSTEM_PREFIX_PATH, i.e. /usr etc.)\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindPlasma.cmake" : {
      "ObjectId" : "72d07c791e12ed18ccbb05cd5889e02a5e2cd338",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindPlasma.cmake was part of KDE 4.1, but Plasma itself didn't guarantee compatibility before 4.2,\n\n# so anything which relied on Plasma < 4.2 is broken anyway with KDE 4.2.\n\n# So since the package itself didn't keep compatibility, it doesn't make sense to provide\n\n# this file just to keep compatibility for the cmake part, this doesn't help anybody.\n\n# Especially now that plasma is part of kdelibs and as such the variables required \n\n# for using plasma are set by FindKDE4Internal.cmake.\n\n# This file is not used anywhere in trunk/KDE/ anymore, 3rd party projects get a \n\n# error message which tells them what to do, so we should be fine.\n\n# Alex\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindPopplerQt4.cmake" : {
      "ObjectId" : "fbc1820ccc593a9048df0cae8fb0a1fb8cfafbb9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Qt4 binding of the Poppler library\n\n# Once done this will define\n\n#\n\n#  POPPLER_QT4_FOUND - system has poppler-qt4\n\n#  POPPLER_QT4_INCLUDE_DIR - the poppler-qt4 include directory\n\n#  POPPLER_QT4_LIBRARIES - Link these to use poppler-qt4\n\n#  POPPLER_QT4_DEFINITIONS - Compiler switches required for using poppler-qt4\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006, Wilfried Huss, <wilfried.huss@gmx.at>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindPostgreSQL.cmake" : {
      "ObjectId" : "b16e9e5e3e1df0afb0b9bc72da5b7acdbd11a893",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PostgreSQL\n\n# Find the PostgreSQL includes and client library\n\n# This module defines\n\n#  POSTGRESQL_INCLUDE_DIR, where to find POSTGRESQL.h\n\n#  POSTGRESQL_LIBRARIES, the libraries needed to use POSTGRESQL.\n\n#  POSTGRESQL_FOUND, If false, do not try to use PostgreSQL.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Jaroslaw Staniek, <js@iidea.pl>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindPulseAudio.cmake" : {
      "ObjectId" : "6436a5676e256f600b2d57d795a1fd66f86b02b9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the PulseAudio library\n\n#\n\n# Once done this will define:\n\n#\n\n#  PULSEAUDIO_FOUND - system has the PulseAudio library\n\n#  PULSEAUDIO_INCLUDE_DIR - the PulseAudio include directory\n\n#  PULSEAUDIO_LIBRARY - the libraries needed to use PulseAudio\n\n#  PULSEAUDIO_MAINLOOP_LIBRARY - the libraries needed to use PulsAudio Mailoop\n\n#\n\n# Copyright (c) 2008, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2009, Marcus Hufgard, <Marcus.Hufgard@hufgard.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 21,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindPyKDE4.cmake" : {
      "ObjectId" : "f738741e97048833ceb590614bd3983edb5b6547",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindPyKDE4\n\n#\n\n# Checks that Python and PyKDE4 are installed and defines a couple macros:\n\n#     * PYKDE4_INSTALL_PYTHON_FILES\n\n#     * PYKDE4_ADD_UI_FILES\n\n#     * PYKDE4_ADD_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By Simon Edwards <simon@simonzone.com>\n\n# This file is in the public domain.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Failure to run\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# PyKDE4 doesn't install pykdeuic4 when installing via CMake.\n\n# Fortunately pykdeuic4 isn't needed by pate.\n\n# \n\n## FIND_PROGRAM(PYKDE4_PYKDEUIC_EXE pykdeuic4 PATHS)# ${PYKDE4_BIN_DIR})\n\n## IF(NOT PYKDE4_PYKDEUIC_EXE)\n\n##     MESSAGE(FATAL_ERROR \"ERROR: Could not find pykdeuic4 (part of PyKDE4)\")\n\n##  ENDIF(NOT PYKDE4_PYKDEUIC_EXE)\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "###########################################################################\n\n# This comes mostly from KDE's FindKDE4Internal.cmake\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# use relative install prefix to avoid hardcoded install pathes in cmake_install.cmake files\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# this one shouldn't be used anymore\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "###########################################################################\n\n# PYKDE4_INSTALL_PYTHON_FILES(file_name...)\n\n#\n\n# Installs and bytes compiles Python files into the data directory for this\n\n# project..\n\n#\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install the source file.\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Byte compile and install the .pyc file.        \n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Don't copy the file onto itself.\n",
        "Line" : 128,
        "CharPositionInLine" : 52
      },
      "11" : {
        "Text" : "###########################################################################\n\n# PYKDE4_ADD_EXECUTABLE(py_name exe_name)\n\n#\n\n# Creates a smybolic link with name exe_name at install time from the\n\n# install bin directory to the Python file. The Python file is also make\n\n# executable.\n\n#\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/modules/FindPyQt4.cmake" : {
      "ObjectId" : "37f645ea6c219074113d07c9a419b415f95dedc5",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find PyQt4\n\n# ~~~~~~~~~~\n\n# Copyright (c) 2007-2008, Simon Edwards <simon@simonzone.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# PyQt4 website: http://www.riverbankcomputing.co.uk/pyqt/index.php\n\n#\n\n# Find the installed version of PyQt4. FindPyQt4 should only be called after\n\n# Python has been found.\n\n#\n\n# This file defines the following variables:\n\n#\n\n# PYQT4_VERSION - The version of PyQt4 found expressed as a 6 digit hex number\n\n#     suitable for comparision as a string\n\n#\n\n# PYQT4_VERSION_STR - The version of PyQt4 as a human readable string.\n\n#\n\n# PYQT4_VERSION_TAG - The PyQt version tag using by PyQt's sip files.\n\n#\n\n# PYQT4_SIP_DIR - The directory holding the PyQt4 .sip files.\n\n#\n\n# PYQT4_SIP_FLAGS - The SIP flags used to build PyQt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindPythonLibrary.cmake" : {
      "ObjectId" : "80f3f4ab338ab9e99ff02049d8d77ba5f201e284",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Python\n\n# ~~~~~~~~~~~\n\n# Find the Python interpreter and related Python directories.\n\n#\n\n# This file defines the following variables:\n\n# \n\n# PYTHON_EXECUTABLE - The path and filename of the Python interpreter.\n\n#\n\n# PYTHON_SHORT_VERSION - The version of the Python interpreter found,\n\n#     excluding the patch version number. (e.g. 2.5 and not 2.5.1))\n\n# \n\n# PYTHON_LONG_VERSION - The version of the Python interpreter found as a human\n\n#     readable string.\n\n#\n\n# PYTHON_SITE_PACKAGES_DIR - Location of the Python site-packages directory.\n\n#\n\n# PYTHON_INCLUDE_PATH - Directory holding the python.h include file.\n\n#\n\n# PYTHON_LIBRARY, PYTHON_LIBRARIES- Location of the Python library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Simon Edwards <simon@simonzone.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# adapted from cmake's builtin FindPythonLibs\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If a framework has been selected for the include path,\n\n# make sure \"-framework\" is used to link it.\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindQCA2.cmake" : {
      "ObjectId" : "9966c22409fa8b1f31d4a4984ae237ab1775f79f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find QCA2 (Qt Cryptography Architecture 2)\n\n# Once done this will define\n\n#\n\n#  QCA2_FOUND - system has QCA2\n\n#  QCA2_INCLUDE_DIR - the QCA2 include directory\n\n#  QCA2_LIBRARIES - the libraries needed to use QCA2\n\n#  QCA2_DEFINITIONS - Compiler switches required for using QCA2\n\n#\n\n# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Michael Larouche, <michael.larouche@kdemail.net>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindQImageBlitz.cmake" : {
      "ObjectId" : "9e31c047eb43d447e520aa0b8e61cf8126db9ac8",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the qimageblitz lib\n\n# Once done this will define\n\n#\n\n#  QIMAGEBLITZ_FOUND - system has qimageblitz lib\n\n#  QIMAGEBLITZ_INCLUDES - the qimageblitz include directory\n\n#  QIMAGEBLITZ_LIBRARIES - The libraries needed to use qimageblitz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2007, Allen Winter, <winter@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindQt4.cmake" : {
      "ObjectId" : "f3fd8171979e3ee7e83aa456d12f3578ff42c930",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find QT 4\n\n# This module can be used to find Qt4.\n\n# The most important issue is that the Qt4 qmake is available via the system path.\n\n# This qmake is then used to detect basically everything else.\n\n# This module defines a number of key variables and macros. \n\n# First is QT_USE_FILE which is the path to a CMake file that can be included \n\n# to compile Qt 4 applications and libraries.  By default, the QtCore and QtGui \n\n# libraries are loaded. This behavior can be changed by setting one or more \n\n# of the following variables to true before doing INCLUDE(${QT_USE_FILE}):\n\n#                    QT_DONT_USE_QTCORE\n\n#                    QT_DONT_USE_QTGUI\n\n#                    QT_USE_QT3SUPPORT\n\n#                    QT_USE_QTASSISTANT\n\n#                    QT_USE_QTDESIGNER\n\n#                    QT_USE_QTMOTIF\n\n#                    QT_USE_QTMAIN\n\n#                    QT_USE_QTNETWORK\n\n#                    QT_USE_QTNSPLUGIN\n\n#                    QT_USE_QTOPENGL\n\n#                    QT_USE_QTSQL\n\n#                    QT_USE_QTXML\n\n#                    QT_USE_QTSVG\n\n#                    QT_USE_QTTEST\n\n#                    QT_USE_QTUITOOLS\n\n#                    QT_USE_QTDBUS\n\n#                    QT_USE_QTSCRIPT\n\n#                    QT_USE_QTASSISTANTCLIENT\n\n#                    QT_USE_QTHELP\n\n#                    QT_USE_QTWEBKIT\n\n#                    QT_USE_QTXMLPATTERNS\n\n#                    QT_USE_PHONON\n\n#\n\n# The file pointed to by QT_USE_FILE will set up your compile environment\n\n# by adding include directories, preprocessor defines, and populate a\n\n# QT_LIBRARIES variable containing all the Qt libraries and their dependencies.\n\n# Add the QT_LIBRARIES variable to your TARGET_LINK_LIBRARIES.\n\n#\n\n# Typical usage could be something like:\n\n#   FIND_PACKAGE(Qt4)\n\n#   SET(QT_USE_QTXML 1)\n\n#   INCLUDE(${QT_USE_FILE})\n\n#   ADD_EXECUTABLE(myexe main.cpp)\n\n#   TARGET_LINK_LIBRARIES(myexe ${QT_LIBRARIES})\n\n#\n\n#\n\n# There are also some files that need processing by some Qt tools such as moc\n\n# and uic.  Listed below are macros that may be used to process those files.\n\n#  \n\n#  macro QT4_WRAP_CPP(outfiles inputfile ... OPTIONS ...)\n\n#        create moc code from a list of files containing Qt class with\n\n#        the Q_OBJECT declaration.  Options may be given to moc, such as those found\n\n#        when executing \"moc -help\"\n\n#\n\n#  macro QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)\n\n#        create code from a list of Qt designer ui files.\n\n#        Options may be given to uic, such as those found\n\n#        when executing \"uic -help\"\n\n#\n\n#  macro QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)\n\n#        create code from a list of Qt resource files.\n\n#        Options may be given to rcc, such as those found\n\n#        when executing \"rcc -help\"\n\n#\n\n#  macro QT4_GENERATE_MOC(inputfile outputfile )\n\n#        creates a rule to run moc on infile and create outfile.\n\n#        Use this if for some reason QT4_WRAP_CPP() isn't appropriate, e.g.\n\n#        because you need a custom filename for the moc file or something similar.\n\n#\n\n#  macro QT4_AUTOMOC(sourcefile1 sourcefile2 ... )\n\n#        This macro is still experimental.\n\n#        It can be used to have moc automatically handled.\n\n#        So if you have the files foo.h and foo.cpp, and in foo.h a \n\n#        a class uses the Q_OBJECT macro, moc has to run on it. If you don't\n\n#        want to use QT4_WRAP_CPP() (which is reliable and mature), you can insert\n\n#        #include \"foo.moc\"\n\n#        in foo.cpp and then give foo.cpp as argument to QT4_AUTOMOC(). This will the\n\n#        scan all listed files at cmake-time for such included moc files and if it finds\n\n#        them cause a rule to be generated to run moc at build time on the \n\n#        accompanying header file foo.h.\n\n#        If a source file has the SKIP_AUTOMOC property set it will be ignored by this macro.\n\n#\n\n#  macro QT4_ADD_DBUS_INTERFACE(outfiles interface basename)\n\n#        create a the interface header and implementation files with the \n\n#        given basename from the given interface xml file and add it to \n\n#        the list of sources.\n\n#        To disable generating a namespace header, set the source file property \n\n#        NO_NAMESPACE to TRUE on the interface file.\n\n#        To include a header in the interface header, set the source file property\n\n#        INCLUDE to the name of the header.\n\n#        To specify a class name to use, set the source file property CLASSNAME\n\n#        to the name of the class.\n\n#\n\n#  macro QT4_ADD_DBUS_INTERFACES(outfiles inputfile ... )\n\n#        create the interface header and implementation files \n\n#        for all listed interface xml files\n\n#        the name will be automatically determined from the name of the xml file\n\n#        To disable generating namespace headers, set the source file property \n\n#        NO_NAMESPACE to TRUE for these inputfiles.\n\n#        To include a header in the interface header, set the source file property\n\n#        INCLUDE to the name of the header.\n\n#        To specify a class name to use, set the source file property CLASSNAME\n\n#        to the name of the class.\n\n#\n\n#  macro QT4_ADD_DBUS_ADAPTOR(outfiles xmlfile parentheader parentclassname [basename] [classname])\n\n#        create a dbus adaptor (header and implementation file) from the xml file\n\n#        describing the interface, and add it to the list of sources. The adaptor\n\n#        forwards the calls to a parent class, defined in parentheader and named\n\n#        parentclassname. The name of the generated files will be\n\n#        <basename>adaptor.{cpp,h} where basename defaults to the basename of the xml file.\n\n#        If <classname> is provided, then it will be used as the classname of the\n\n#        adaptor itself.\n\n#\n\n#  macro QT4_GENERATE_DBUS_INTERFACE( header [interfacename] OPTIONS ...)\n\n#        generate the xml interface file from the given header.\n\n#        If the optional argument interfacename is omitted, the name of the \n\n#        interface file is constructed from the basename of the header with\n\n#        the suffix .xml appended.\n\n#        Options may be given to qdbuscpp2xml, such as those found when executing \"qdbuscpp2xml --help\"\n\n#\n\n#  QT_FOUND         If false, don't try to use Qt.\n\n#  QT4_FOUND        If false, don't try to use Qt 4.\n\n#\n\n#  QT_QTCORE_FOUND        True if QtCore was found.\n\n#  QT_QTGUI_FOUND         True if QtGui was found.\n\n#  QT_QT3SUPPORT_FOUND    True if Qt3Support was found.\n\n#  QT_QTASSISTANT_FOUND   True if QtAssistant was found.\n\n#  QT_QTDBUS_FOUND        True if QtDBus was found.\n\n#  QT_QTDESIGNER_FOUND    True if QtDesigner was found.\n\n#  QT_QTDESIGNERCOMPONENTS True if QtDesignerComponents was found.\n\n#  QT_QTMOTIF_FOUND       True if QtMotif was found.\n\n#  QT_QTNETWORK_FOUND     True if QtNetwork was found.\n\n#  QT_QTNSPLUGIN_FOUND    True if QtNsPlugin was found.\n\n#  QT_QTOPENGL_FOUND      True if QtOpenGL was found.\n\n#  QT_QTSQL_FOUND         True if QtSql was found.\n\n#  QT_QTXML_FOUND         True if QtXml was found.\n\n#  QT_QTSVG_FOUND         True if QtSvg was found.\n\n#  QT_QTSCRIPT_FOUND      True if QtScript was found.\n\n#  QT_QTTEST_FOUND        True if QtTest was found.\n\n#  QT_QTUITOOLS_FOUND     True if QtUiTools was found.\n\n#  QT_QTASSISTANTCLIENT_FOUND         True if QtAssistantClient was found.\n\n#  QT_QTHELP_FOUND      True if QtHelp was found.\n\n#  QT_QTWEBKIT_FOUND        True if QtWebKit was found.\n\n#  QT_QTXMLPATTERNS_FOUND   True if QtXmlPatterns was found.\n\n#  QT_PHONON_FOUND          True if phonon was found.\n\n#\n\n#\n\n#  QT_DEFINITIONS   Definitions to use when compiling code that uses Qt.\n\n#                   You do not need to use this if you include QT_USE_FILE.\n\n#                   The QT_USE_FILE will also define QT_DEBUG and QT_NO_DEBUG\n\n#                   to fit your current build type.  Those are not contained\n\n#                   in QT_DEFINITIONS.\n\n#                  \n\n#  QT_INCLUDES      List of paths to all include directories of \n\n#                   Qt4 QT_INCLUDE_DIR and QT_QTCORE_INCLUDE_DIR are\n\n#                   always in this variable even if NOTFOUND,\n\n#                   all other INCLUDE_DIRS are\n\n#                   only added if they are found.\n\n#                   You do not need to use this if you include QT_USE_FILE.\n\n#   \n\n#\n\n#  Include directories for the Qt modules are listed here.\n\n#  You do not need to use these variables if you include QT_USE_FILE.\n\n#\n\n#  QT_INCLUDE_DIR              Path to \"include\" of Qt4\n\n#  QT_QT_INCLUDE_DIR           Path to \"include/Qt\" \n\n#  QT_QT3SUPPORT_INCLUDE_DIR   Path to \"include/Qt3Support\" \n\n#  QT_QTASSISTANT_INCLUDE_DIR  Path to \"include/QtAssistant\" \n\n#  QT_QTCORE_INCLUDE_DIR       Path to \"include/QtCore\"         \n\n#  QT_QTDESIGNER_INCLUDE_DIR   Path to \"include/QtDesigner\" \n\n#  QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR   Path to \"include/QtDesigner\"\n\n#  QT_QTDBUS_INCLUDE_DIR       Path to \"include/QtDBus\" \n\n#  QT_QTGUI_INCLUDE_DIR        Path to \"include/QtGui\" \n\n#  QT_QTMOTIF_INCLUDE_DIR      Path to \"include/QtMotif\" \n\n#  QT_QTNETWORK_INCLUDE_DIR    Path to \"include/QtNetwork\" \n\n#  QT_QTNSPLUGIN_INCLUDE_DIR   Path to \"include/QtNsPlugin\" \n\n#  QT_QTOPENGL_INCLUDE_DIR     Path to \"include/QtOpenGL\" \n\n#  QT_QTSQL_INCLUDE_DIR        Path to \"include/QtSql\" \n\n#  QT_QTXML_INCLUDE_DIR        Path to \"include/QtXml\" \n\n#  QT_QTSVG_INCLUDE_DIR        Path to \"include/QtSvg\"\n\n#  QT_QTSCRIPT_INCLUDE_DIR     Path to \"include/QtScript\"\n\n#  QT_QTTEST_INCLUDE_DIR       Path to \"include/QtTest\"\n\n#  QT_QTASSISTANTCLIENT_INCLUDE_DIR       Path to \"include/QtAssistant\"\n\n#  QT_QTHELP_INCLUDE_DIR       Path to \"include/QtHelp\"\n\n#  QT_QTWEBKIT_INCLUDE_DIR     Path to \"include/QtWebKit\"\n\n#  QT_QTXMLPATTERNS_INCLUDE_DIR  Path to \"include/QtXmlPatterns\"\n\n#  QT_PHONON_INCLUDE_DIR       Path to \"include/phonon\"\n\n#                            \n\n#  QT_LIBRARY_DIR              Path to \"lib\" of Qt4\n\n# \n\n#  QT_PLUGINS_DIR              Path to \"plugins\" for Qt4\n\n#                            \n\n# For every library of Qt, a QT_QTFOO_LIBRARY variable is defined, with the full path to the library.\n\n#\n\n# So there are the following variables:\n\n# The Qt3Support library:     QT_QT3SUPPORT_LIBRARY\n\n#\n\n# The QtAssistant library:    QT_QTASSISTANT_LIBRARY\n\n#\n\n# The QtCore library:         QT_QTCORE_LIBRARY\n\n#\n\n# The QtDBus library:         QT_QTDBUS_LIBRARY\n\n#\n\n# The QtDesigner library:     QT_QTDESIGNER_LIBRARY\n\n#\n\n# The QtDesignerComponents library:     QT_QTDESIGNERCOMPONENTS_LIBRARY\n\n#\n\n# The QtGui library:          QT_QTGUI_LIBRARY\n\n#\n\n# The QtMotif library:        QT_QTMOTIF_LIBRARY\n\n#\n\n# The QtNetwork library:      QT_QTNETWORK_LIBRARY\n\n#\n\n# The QtNsPLugin library:     QT_QTNSPLUGIN_LIBRARY\n\n#\n\n# The QtOpenGL library:       QT_QTOPENGL_LIBRARY\n\n#\n\n# The QtSql library:          QT_QTSQL_LIBRARY\n\n#\n\n# The QtXml library:          QT_QTXML_LIBRARY\n\n#\n\n# The QtSvg library:          QT_QTSVG_LIBRARY\n\n#\n\n# The QtScript library:       QT_QTSCRIPT_LIBRARY\n\n#\n\n# The QtTest library:         QT_QTTEST_LIBRARY\n\n#\n\n# The qtmain library for Windows QT_QTMAIN_LIBRARY\n\n#\n\n# The QtUiTools library:      QT_QTUITOOLS_LIBRARY\n\n#\n\n# The QtAssistantClient library:  QT_QTASSISTANTCLIENT_LIBRARY\n\n#\n\n# The QtHelp library:             QT_QTHELP_LIBRARY\n\n#\n\n# The QtWebKit library:           QT_QTWEBKIT_LIBRARY\n\n#\n\n# The QtXmlPatterns library:      QT_QTXMLPATTERNS_LIBRARY\n\n#\n\n# The Phonon library:             QT_PHONON_LIBRARY\n\n#  \n\n# also defined, but NOT for general use are\n\n#  QT_MOC_EXECUTABLE          Where to find the moc tool.\n\n#  QT_UIC_EXECUTABLE          Where to find the uic tool.\n\n#  QT_UIC3_EXECUTABLE         Where to find the uic3 tool.\n\n#  QT_RCC_EXECUTABLE          Where to find the rcc tool\n\n#  QT_DBUSCPP2XML_EXECUTABLE  Where to find the qdbuscpp2xml tool.\n\n#  QT_DBUSXML2CPP_EXECUTABLE  Where to find the qdbusxml2cpp tool.\n\n#  QT_LUPDATE_EXECUTABLE      Where to find the lupdate tool.\n\n#  QT_LRELEASE_EXECUTABLE     Where to find the lrelease tool.\n\n#  \n\n#  QT_DOC_DIR                 Path to \"doc\" of Qt4\n\n#  QT_MKSPECS_DIR             Path to \"mkspecs\" of Qt4\n\n#\n\n#\n\n# These are around for backwards compatibility \n\n# they will be set\n\n#  QT_WRAP_CPP  Set true if QT_MOC_EXECUTABLE is found\n\n#  QT_WRAP_UI   Set true if QT_UIC_EXECUTABLE is found\n\n#  \n\n# These variables do _NOT_ have any effect anymore (compared to FindQt.cmake)\n\n#  QT_MT_REQUIRED         Qt4 is now always multithreaded\n\n#  \n\n# These variables are set to \"\" Because Qt structure changed \n\n# (They make no sense in Qt4)\n\n#  QT_QT_LIBRARY        Qt-Library is now split\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2002 Kitware, Inc., Insight Consortium.  All rights reserved.\n\n# See Copyright.txt or http://www.cmake.org/HTML/Copyright.html for details.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If Qt3 has already been found, fail.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check already done in this cmake run, nothing more to do\n",
        "Line" : 285,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check that QT_NO_DEBUG is defined for release configurations\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  macro for asking qmake to process pro files\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Invoke qmake with the tmp.pro program to get the desired\n\n# information.  Use the same variable for both stdout and stderr\n\n# to make sure we get the output on all platforms.\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# check for qmake\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check for qt3 qmake and then try and find qmake4 or qmake-qt4 in the path\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# check that we found the Qt4 qmake, Qt3 qmake output won't match here\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# we need at least version 4.0.0\n",
        "Line" : 373,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#now parse the parts of the user given version string into variables\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# now parse the parts of the user given version string into variables\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# and now the version string given by qmake\n",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# compute an overall version number which can be compared at once\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# get qt install dir \n",
        "Line" : 415,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# ask qmake for the library dir\n\n# Set QT_LIBRARY_DIR\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# make sure we have / and not \\ as qmake gives on windows\n",
        "Line" : 426,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# ask qmake for the binary dir\n",
        "Line" : 448,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# make sure we have / and not \\ as qmake gives on windows\n",
        "Line" : 453,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "# ask qmake for the include dir\n",
        "Line" : 458,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# make sure we have / and not \\ as qmake gives on windows\n",
        "Line" : 463,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# ask qmake for the documentation directory\n",
        "Line" : 469,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# make sure we have / and not \\ as qmake gives on windows\n",
        "Line" : 474,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# ask qmake for the mkspecs directory\n",
        "Line" : 479,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# do not replace : on windows as it might be a drive letter\n\n# and windows should already use ; as a separator\n",
        "Line" : 484,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# ask qmake for the plugins directory\n",
        "Line" : 494,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# make sure we have / and not \\ as qmake gives on windows\n",
        "Line" : 499,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "########################################\n\n#\n\n#       Setting the INCLUDE-Variables\n\n#\n\n########################################\n",
        "Line" : 503,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Set QT_INCLUDE_DIR by removine \"/QtCore\" in the string ${QT_QTCORE_INCLUDE_DIR}\n",
        "Line" : 515,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "#############################################\n\n#\n\n# Find out what window system we're using\n\n#\n\n#############################################\n\n# Save required includes and required_flags variables\n",
        "Line" : 531,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Add QT_INCLUDE_DIR to CMAKE_REQUIRED_INCLUDES\n",
        "Line" : 538,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# On Mac OS X when Qt has framework support, also add the framework path\n",
        "Line" : 540,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Check for Window system symbols (note: only one should end up being set)\n",
        "Line" : 544,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Restore CMAKE_REQUIRED_INCLUDES+CMAKE_REQUIRED_FLAGS variables\n",
        "Line" : 557,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#\n\n#############################################\n",
        "Line" : 559,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Set QT_QT3SUPPORT_INCLUDE_DIR\n",
        "Line" : 566,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Set QT_QT_INCLUDE_DIR\n",
        "Line" : 574,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Set QT_QTGUI_INCLUDE_DIR\n",
        "Line" : 582,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Set QT_QTSVG_INCLUDE_DIR\n",
        "Line" : 590,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Set QT_QTSCRIPT_INCLUDE_DIR\n",
        "Line" : 598,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Set QT_QTTEST_INCLUDE_DIR\n",
        "Line" : 606,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Set QT_QTUITOOLS_INCLUDE_DIR\n",
        "Line" : 614,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Set QT_QTMOTIF_INCLUDE_DIR\n",
        "Line" : 622,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Set QT_QTNETWORK_INCLUDE_DIR\n",
        "Line" : 630,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Set QT_QTNSPLUGIN_INCLUDE_DIR\n",
        "Line" : 638,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Set QT_QTOPENGL_INCLUDE_DIR\n",
        "Line" : 646,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Set QT_QTSQL_INCLUDE_DIR\n",
        "Line" : 654,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Set QT_QTXML_INCLUDE_DIR\n",
        "Line" : 662,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Set QT_QTASSISTANT_INCLUDE_DIR\n",
        "Line" : 670,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Set QT_QTDESIGNER_INCLUDE_DIR\n",
        "Line" : 679,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR\n",
        "Line" : 688,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Set QT_QTDBUS_INCLUDE_DIR\n",
        "Line" : 696,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Set QT_QTASSISTANTCLIENT_INCLUDE_DIR\n",
        "Line" : 705,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Set QT_QTHELP_INCLUDE_DIR\n",
        "Line" : 713,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Set QT_QTWEBKIT_INCLUDE_DIR\n",
        "Line" : 721,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Set QT_QTXMLPATTERNS_INCLUDE_DIR\n",
        "Line" : 729,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Set QT_PHONON_INCLUDE_DIR\n",
        "Line" : 737,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 744,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Set QT_INCLUDES\n",
        "Line" : 747,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "########################################\n\n#\n\n#       Setting the LIBRARY-Variables\n\n#\n\n########################################\n",
        "Line" : 750,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# If FIND_LIBRARY found libraries in Apple frameworks, we would NOT have\n\n# to jump through these hoops.\n",
        "Line" : 757,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# WTF?  why don't we have frameworks?  :P\n\n# Set QT_QTUITOOLS_LIBRARY\n",
        "Line" : 851,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Set QT_QTSCRIPT_LIBRARY\n",
        "Line" : 854,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# Set QT_QTCORE_LIBRARY by searching for a lib with \"QtCore.\"  as part of the filename\n",
        "Line" : 859,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Set QT_QT3SUPPORT_LIBRARY\n",
        "Line" : 862,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Set QT_QTGUI_LIBRARY\n",
        "Line" : 865,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# Set QT_QTMOTIF_LIBRARY\n",
        "Line" : 868,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Set QT_QTNETWORK_LIBRARY\n",
        "Line" : 873,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Set QT_QTNSPLUGIN_LIBRARY\n",
        "Line" : 876,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Set QT_QTOPENGL_LIBRARY\n",
        "Line" : 879,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Set QT_QTSQL_LIBRARY\n",
        "Line" : 882,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Set QT_QTXML_LIBRARY\n",
        "Line" : 885,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Set QT_QTSVG_LIBRARY\n",
        "Line" : 888,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# Set QT_QTSCRIPT_LIBRARY\n",
        "Line" : 891,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# Set QT_QTUITOOLS_LIBRARY\n",
        "Line" : 894,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Set QT_QTTEST_LIBRARY\n",
        "Line" : 897,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# Set QT_QTASSISTANT_LIBRARY\n",
        "Line" : 955,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Set QT_QTDESIGNER_LIBRARY\n",
        "Line" : 958,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_LIBRARY\n",
        "Line" : 961,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Set QT_QTMAIN_LIBRARY\n",
        "Line" : 964,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n",
        "Line" : 969,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Both set\n",
        "Line" : 979,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "# Only debug was found\n",
        "Line" : 984,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# Only release was found\n",
        "Line" : 989,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "# Hmm, is this used anywhere ? Yes, in UseQt4.cmake. We are currently incompatible :-(\n",
        "Line" : 994,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "#add the include directory to QT_INCLUDES\n",
        "Line" : 1008,
        "CharPositionInLine" : 6
      },
      "87" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 1012,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# Set QT_xyz_LIBRARY variable and add \n\n# library include path to QT_INCLUDES\n",
        "Line" : 1017,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# platform dependent libraries\n",
        "Line" : 1041,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "#######################################\n\n#\n\n#       Check the executables of Qt \n\n#          ( moc, uic, rcc )\n\n#\n\n#######################################\n",
        "Line" : 1050,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# find moc and uic using qmake\n",
        "Line" : 1058,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# make sure we have / and not \\ as qmake gives on windows\n",
        "Line" : 1062,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# make sure we have / and not \\ as qmake gives on windows\n",
        "Line" : 1065,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "######################################\n\n#\n\n#       Macros for building Qt files\n\n#\n\n######################################\n",
        "Line" : 1124,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# if Qt is installed only as framework, add -F /library/Frameworks to the moc arguments\n\n# otherwise moc can't find the headers in the framework include dirs\n",
        "Line" : 1155,
        "CharPositionInLine" : 5
      },
      "96" : {
        "Text" : "# get include dirs\n",
        "Line" : 1165,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# dont run automoc on this file\n",
        "Line" : 1186,
        "CharPositionInLine" : 75
      },
      "98" : {
        "Text" : "# QT4_WRAP_CPP(outfiles inputfile ... )\n",
        "Line" : 1192,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# get include dirs\n",
        "Line" : 1195,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# QT4_WRAP_UI(outfiles inputfile ... )\n",
        "Line" : 1214,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# QT4_ADD_RESOURCES(outfiles inputfile ... )\n",
        "Line" : 1233,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "#  parse file for dependencies \n\n#  all files are absolute paths or relative to the location of the qrc file\n",
        "Line" : 1243,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# get the part before the \".xml\" suffix\n",
        "Line" : 1306,
        "CharPositionInLine" : 8
      },
      "104" : {
        "Text" : "# _customName OPTIONS -some -options )\n",
        "Line" : 1314,
        "CharPositionInLine" : 45
      },
      "105" : {
        "Text" : "# _optionalBasename _optionalClassName)\n",
        "Line" : 1333,
        "CharPositionInLine" : 71
      },
      "106" : {
        "Text" : "# if \"SKIP_AUTOMOC\" is set to true, we will not handle this file here.\n\n# This is required to make uic work correctly:\n\n# we need to add generated .cpp files to the sources (to compile them),\n\n# but we cannot let automoc handle them, as the .cpp files don't exist yet when\n\n# cmake is run for the very first time on them -> however the .cpp files might\n\n# exist at a later run. at that time we need to skip them, so that we don't add two\n\n# different rules for the same moc file\n",
        "Line" : 1375,
        "CharPositionInLine" : 9
      },
      "107" : {
        "Text" : "#               SET(_header ${CMAKE_CURRENT_SOURCE_DIR}/${_basename}.h)\n",
        "Line" : 1396,
        "CharPositionInLine" : 3
      },
      "108" : {
        "Text" : "######################################\n\n#\n\n#       decide if Qt got found\n\n#\n\n######################################\n",
        "Line" : 1414,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# if the includes,libraries,moc,uic and rcc are found then we have it\n",
        "Line" : 1420,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "#######################################\n\n#\n\n#       System dependent settings  \n\n#\n\n#######################################\n\n# for unix add X11 stuff\n",
        "Line" : 1451,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# on OS X X11 may not be required\n",
        "Line" : 1458,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "#######################################\n\n#\n\n#       compatibility settings \n\n#\n\n#######################################\n\n# Backwards compatibility for CMake1.4 and 1.2\n",
        "Line" : 1466,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 113
    },
    "cmake/modules/FindRUBY.cmake" : {
      "ObjectId" : "b5d3c0fdf3d1a011740384b7f9f07d25bf31f34d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Ruby\n\n# This module finds if Ruby is installed and determines where the include files\n\n# and libraries are. It also determines what the name of the library is. This\n\n# code sets the following variables:\n\n#\n\n#  RUBY_LIBRARY      = full path+file to the ruby library\n\n#  RUBY_INCLUDE_PATH = path to where ruby.h can be found\n\n#  RUBY_EXECUTABLE   = full path+file to the ruby binary\n\n#  RUBY_FOUND        = Ruby was found under system.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 18,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#   RUBY_ARCHDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"archdir\"@:>@)'`\n\n#   RUBY_SITEARCHDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"sitearchdir\"@:>@)'`\n\n#   RUBY_SITEDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"sitelibdir\"@:>@)'`\n\n#   RUBY_LIBDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"libdir\"@:>@)'`\n\n#   RUBY_LIBRUBYARG=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"LIBRUBYARG_SHARED\"@:>@)'`\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# remove the new lines from the output by replacing them with empty strings\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindSIP.cmake" : {
      "ObjectId" : "01f3bd1636408bee7266d82b3304c8733f641f38",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find SIP\n\n# ~~~~~~~~\n\n#\n\n# SIP website: http://www.riverbankcomputing.co.uk/sip/index.php\n\n#\n\n# Find the installed version of SIP. FindSIP should be called after Python\n\n# has been found.\n\n#\n\n# This file defines the following variables:\n\n#\n\n# SIP_VERSION - The version of SIP found expressed as a 6 digit hex number\n\n#     suitable for comparision as a string.\n\n#\n\n# SIP_VERSION_STR - The version of SIP found as a human readable string.\n\n#\n\n# SIP_EXECUTABLE - Path and filename of the SIP command line executable.\n\n#\n\n# SIP_INCLUDE_DIR - Directory holding the SIP C++ header file.\n\n#\n\n# SIP_DEFAULT_SIP_DIR - Default directory where .sip files should be installed\n\n#     into.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Simon Edwards <simon@simonzone.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindSamba.cmake" : {
      "ObjectId" : "16522c6482cc005828a9d71dd9939c7547bbcd58",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the samba directory library\n\n# Once done this will define\n\n#\n\n#  SAMBA_FOUND - system has SAMBA\n\n#  SAMBA_INCLUDE_DIR - the SAMBA include directory\n\n#  SAMBA_LIBRARIES - The libraries needed to use SAMBA\n\n#  Set SAMBA_REQUIRE_SMBC_SET_CONTEXT to TRUE if you need a version of Samba\n\n#  which comes with smbc_set_context()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# check whether libsmbclient has smbc_set_context()\n",
        "Line" : 27,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# fail if smbc_set_context() was required but hasn't been found\n",
        "Line" : 36,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# fail if smbc_option_set() was required but hasn't been found\n",
        "Line" : 40,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindSane.cmake" : {
      "ObjectId" : "6c60cf63f87c744150ec14c3cfe84710d627b5f9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake macro to test if we use sane\n\n#\n\n#  SANE_FOUND - system has SANE libs\n\n#  SANE_INCLUDE_DIR - the SANE include directory\n\n#  SANE_LIBRARIES - The libraries needed to use SANE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Marcus Hufgard <hufgardm@hufgard.de> 2006\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindSasl2.cmake" : {
      "ObjectId" : "855266fc9ace740d060d07d1dbbfef7802809bee",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the sasl2 directory library\n\n# Once done this will define\n\n#\n\n#  SASL2_FOUND - system has SASL2\n\n#  SASL2_INCLUDE_DIR - the SASL2 include directory\n\n#  SASL2_LIBRARIES - The libraries needed to use SASL2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindSharedMimeInfo.cmake" : {
      "ObjectId" : "707cb00615d63afec7f759d58117e3d465d7a22e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the shared-mime-info package\n\n#\n\n#  SHARED_MIME_INFO_MINIMUM_VERSION - Set this to the minimum version you need, default is 0.18\n\n#\n\n# Once done this will define\n\n#\n\n#  SHARED_MIME_INFO_FOUND - system has the shared-mime-info package\n\n#  UPDATE_MIME_DATABASE_EXECUTABLE - the update-mime-database executable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Pino Toscano, <toscano.pino@tiscali.it>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the minimum version of shared-mime-database we require\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# in cache already\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindSoprano.cmake" : {
      "ObjectId" : "fc00a9c900071e28366a54fa91eab0a0474e3acb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find an installation of Soprano\n\n#\n\n# Sets the following variables:\n\n#  Soprano_FOUND            - true is Soprano has been found\n\n#  SOPRANO_INCLUDE_DIR      - The include directory\n\n#  SOPRANO_LIBRARIES        - The Soprano core library to link to (libsoprano)\n\n#  SOPRANO_INDEX_LIBRARIES  - The Soprano index library (libsopranoindex)\n\n#  SOPRANO_CLIENT_LIBRARIES - The Soprano client library (libsopranoclient)\n\n#  SOPRANO_SERVER_LIBRARIES - The Soprano server library (libsopranoserver)\n\n#  SOPRANO_VERSION          - The Soprano version (string value)\n\n#\n\n# SOPRANO_PLUGIN_NQUADPARSER_FOUND      - true if the nquadparser plugin is found\n\n# SOPRANO_PLUGIN_NQUADSERIALIZER_FOUND  - true if the nquadserializer plugin is found\n\n# SOPRANO_PLUGIN_RAPTORPARSER_FOUND     - true if the raptorparser plugin is found\n\n# SOPRANO_PLUGIN_RAPTORSERIALIZER_FOUND - true if the raptorserializer plugin is found\n\n# SOPRANO_PLUGIN_REDLANDBACKEND_FOUND   - true if the redlandbackend plugin is found\n\n# SOPRANO_PLUGIN_SESAME2BACKEND_FOUND   - true if the sesame2backend plugin is found\n\n#\n\n# Options:\n\n#  Set SOPRANO_MIN_VERSION to set the minimum required Soprano version (default: 1.99)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Sebastian Trueg, <sebastian@trueg.de>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if(SOPRANO_INCLUDE_DIR AND SOPRANO_LIBRARIES AND SOPRANO_INDEX_LIBRARIES AND SOPRANO_SERVER_LIBRARIES)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# read from cache\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#  set(Soprano_FOUND TRUE)\n\n#  set(SopranoServer_FOUND TRUE)\n\n#  set(SopranoClient_FOUND TRUE)\n\n#  set(SopranoIndex_FOUND TRUE)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#else(SOPRANO_INCLUDE_DIR AND SOPRANO_LIBRARIES AND SOPRANO_INDEX_LIBRARIES AND SOPRANO_SERVER_LIBRARIES)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check for all the libs as required to make sure that we do not try to compile with an old version\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# check Soprano version\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We set a default for the minimum required version to be backwards compatible\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#look for parser plugins\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#endif(SOPRANO_INCLUDE_DIR AND SOPRANO_LIBRARIES AND SOPRANO_INDEX_LIBRARIES AND SOPRANO_SERVER_LIBRARIES)\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/modules/FindSqlite.cmake" : {
      "ObjectId" : "2fa763301be04e444551c2bf59ee961f72c9b346",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Sqlite\n\n# Once done this will define\n\n#\n\n#  SQLITE_FOUND - system has Sqlite\n\n#  SQLITE_INCLUDE_DIR - the Sqlite include directory\n\n#  SQLITE_LIBRARIES - Link these to use Sqlite\n\n#  SQLITE_DEFINITIONS - Compiler switches required for using Sqlite\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Gilles Caulier, <caulier.gilles@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# show the SQLITE_INCLUDE_DIR and SQLITE_LIBRARIES variables only in the advanced view\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindStrigi.cmake" : {
      "ObjectId" : "f0a3921ee1998a74efc2b9b36de79bf78ea7fa6d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Strigi, a fast and small desktop search program (http://strigi.sourceforge.net )\n\n# Once done this will define\n\n#\n\n#  STRIGI_FOUND - system has Strigi\n\n#  STRIGI_INCLUDE_DIR - the Strigi include directory\n\n#  STRIGI_STREAMANALYZER_LIBRARY - Link these to use Strigi streamanalyzer\n\n#  STRIGI_STREAMS_LIBRARY - Link these to use Strigi streams\n\n#  STRIGI_LINE_ANALYZER_PREFIX - strigi plugin prefix\n\n#  STRIGI_THROUGH_ANALYZER_PREFIX - strigi plugin prefix\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Jos van den Oever, <jos@vandenoever.info>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find and load the StrigiConfig.cmake installed by kdesupport/strigi\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If StrigiConfig.cmake (installed by kdesupport/Strigi) has been found\n\n# and it contains all necessary information (since November 16th, 2008), use the information \n\n# included there, otherwise search it in the same way as any non-cmake project. \n\n# This variable is set by StrigiConfig.cmake .  Alex\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# this else() branch is for finding strigi versions before November 16th, 2008. Alex\n",
        "Line" : 46,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Check for the SIC change between 0.5.9 and 0.6.0...\n",
        "Line" : 109,
        "CharPositionInLine" : 7
      },
      "6" : {
        "Text" : "# this is needed to have mingw, cygwin and msvc libs installed in one directory\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindTaglib.cmake" : {
      "ObjectId" : "5bbb8ee1b70f0db63b0e30321dfb2144eece043e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Taglib library\n\n# Once done this will define\n\n#\n\n#  TAGLIB_FOUND - system has the taglib library\n\n#  TAGLIB_CFLAGS - the taglib cflags\n\n#  TAGLIB_LIBRARIES - The libraries needed to use taglib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#reset vars\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if taglib-config has been found\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindUSB.cmake" : {
      "ObjectId" : "566cdd8ee8ff1f4c86c3969a641afc01bf028533",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the freetype library\n\n# Once done this defines\n\n#\n\n#  LIBUSB_FOUND - system has libusb\n\n#  LIBUSB_INCLUDE_DIR - the libusb include directory\n\n#  LIBUSB_LIBRARIES - Link these to use libusb\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2008  Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindX11.cmake" : {
      "ObjectId" : "2d6d24e91cf085b2c969676b6deb9ea9e5afd2e6",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find X11 installation\n\n# Try to find X11 on UNIX systems. The following values are defined\n\n#  X11_FOUND        - True if X11 is available\n\n#  X11_INCLUDE_DIR  - include directories to use X11\n\n#  X11_LIBRARIES    - link against these to use X11\n\n#\n\n# and also the following more fine grained variables:\n\n#                X11_ICE_INCLUDE_PATH,          X11_ICE_LIB,        X11_ICE_FOUND\n\n#                X11_SM_INCLUDE_PATH,           X11_SM_LIB,         X11_SM_FOUND\n\n#                X11_Xaccessrules_INCLUDE_PATH,                     X11_Xaccess_FOUND\n\n#                X11_Xaccessstr_INCLUDE_PATH,                       X11_Xaccess_FOUND\n\n#                X11_Xau_INCLUDE_PATH,          X11_Xau_LIB,        X11_Xau_FOUND\n\n#                X11_Xcomposite_INCLUDE_PATH,   X11_Xcomposite_LIB, X11_Xcomposite_FOUND\n\n#                X11_Xcursor_INCLUDE_PATH,      X11_Xcursor_LIB,    X11_Xcursor_FOUND\n\n#                X11_Xdamage_INCLUDE_PATH,      X11_Xdamage_LIB,    X11_Xdamage_FOUND\n\n#                X11_Xdmcp_INCLUDE_PATH,        X11_Xdmcp_LIB,      X11_Xdmcp_FOUND\n\n#                                               X11_Xext_LIB,       X11_Xext_FOUND\n\n#                X11_dpms_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_dpms_FOUND\n\n#                X11_XShm_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_XShm_FOUND\n\n#                X11_Xshape_INCLUDE_PATH,       (in X11_Xext_LIB),  X11_Xshape_FOUND\n\n#                X11_xf86misc_INCLUDE_PATH,     X11_Xxf86misc_LIB,  X11_xf86misc_FOUND\n\n#                X11_xf86vmode_INCLUDE_PATH,                        X11_xf86vmode_FOUND\n\n#                X11_Xfixes_INCLUDE_PATH,       X11_Xfixes_LIB,     X11_Xfixes_FOUND\n\n#                X11_Xft_INCLUDE_PATH,          X11_Xft_LIB,        X11_Xft_FOUND\n\n#                X11_Xinerama_INCLUDE_PATH,     X11_Xinerama_LIB,   X11_Xinerama_FOUND\n\n#                X11_Xinput_INCLUDE_PATH,       X11_Xinput_LIB,     X11_Xinput_FOUND\n\n#                X11_Xkb_INCLUDE_PATH,                              X11_Xkb_FOUND\n\n#                X11_Xkblib_INCLUDE_PATH,                           X11_Xkb_FOUND\n\n#                X11_Xkbfile_INCLUDE_PATH,      X11_Xkbfile_LIB,    X11_Xkbfile_FOUND\n\n#                X11_Xpm_INCLUDE_PATH,          X11_Xpm_LIB,        X11_Xpm_FOUND\n\n#                X11_XTest_INCLUDE_PATH,        X11_XTest_LIB,      X11_XTest_FOUND\n\n#                X11_Xrandr_INCLUDE_PATH,       X11_Xrandr_LIB,     X11_Xrandr_FOUND\n\n#                X11_Xrender_INCLUDE_PATH,      X11_Xrender_LIB,    X11_Xrender_FOUND\n\n#                X11_Xscreensaver_INCLUDE_PATH, X11_Xscreensaver_LIB, X11_Xscreensaver_FOUND\n\n#                X11_Xt_INCLUDE_PATH,           X11_Xt_LIB,         X11_Xt_FOUND\n\n#                X11_Xutil_INCLUDE_PATH,                            X11_Xutil_FOUND\n\n#                X11_Xv_INCLUDE_PATH,           X11_Xv_LIB,         X11_Xv_FOUND\n\n#                X11_XSync_INCLUDE_PATH,        (in X11_Xext_LIB),  X11_XSync_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2002 Kitware, Inc., Insight Consortium.  All rights reserved.\n\n# See Copyright.txt or http://www.cmake.org/HTML/Copyright.html for details.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# X11 is never a framework and some header files may be\n\n# found in tcl on the mac\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Look for includes; keep the list sorted by name of the cmake *_INCLUDE_PATH\n\n# variable (which doesn't need to match the include file name).\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Solaris lacks XKBrules.h, so we should skip kxkbd there.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find additional X libraries. Keep list sorted by library name.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# start with empty list\n",
        "Line" : 135,
        "CharPositionInLine" : 23
      },
      "7" : {
        "Text" : "# start with empty list\n",
        "Line" : 154,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "# Deprecated variable for backwards compatibility with CMake 1.4\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Translated from an autoconf-generated configure script.\n\n# See libs.m4 in autoconf's m4 directory.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# See if XOpenDisplay in X11 works by itself.\n",
        "Line" : 314,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Find library needed for dnet_ntoa.\n",
        "Line" : 317,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Find library needed for gethostbyname.\n",
        "Line" : 329,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Find library needed for connect.\n",
        "Line" : 343,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Find library needed for remove.\n",
        "Line" : 352,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Find library needed for shmat.\n",
        "Line" : 361,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Build the final list of libraries.\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# X11_FIND_REQUIRED_<component> could be checked too\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/modules/FindXKB.cmake" : {
      "ObjectId" : "a91078ad373b2a394aeca3aef7153e866417a14d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindXine.cmake" : {
      "ObjectId" : "1223851b174555c3f507d8dc2b11a6713030b627",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the XINE  library\n\n# Once done this will define\n\n#\n\n#  XINE_FOUND - system has the XINE library\n\n#  XINE_VERSION - XINE version\n\n#  XINE_BUGFIX_VERSION - the XINE bugfix version\n\n#  XINE_INCLUDE_DIR - the XINE include directory\n\n#  XINE_LIBRARY - The libraries needed to use XINE\n\n#  XINE_XCB_FOUND - libxine can use XCB for video output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>\n\n# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# HINTS is new in cmake 2.6. These dirs will be preferred over the default ones\n",
        "Line" : 28,
        "CharPositionInLine" : 29
      },
      "4" : {
        "Text" : "#if (... VERSION_GREATER) is new since cmake 2.6.2\n",
        "Line" : 46,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindXmms.cmake" : {
      "ObjectId" : "c43893fbb841e32ea0c638d0ced10eb30e165768",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Search xmms\n\n# Once done this will define\n\n#\n\n#  XMMS_FOUND        - system has xmms\n\n#  XMMS_INCLUDE_DIRS - the xmms include directory\n\n#  XMMS_LIBRARIES    - Link these to use xmms\n\n#  XMMS_LDFLAGS      - for compatibility only, same as XMMS_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Laurent Montel, <montel@kde.org>\n\n# Copyright (c) 2007 Allen Winter <winter@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# for compatibility\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/KDE4CTestNightlySetup.cmake" : {
      "ObjectId" : "4c21a5834561b4e69d196c265b57e14ee6062dfd",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following variables have to be set before including this file:\n\n# CTEST_CMAKE_GENERATOR\n\n# CTEST_UPDATE_TYPE (if update from cvs or svn is required)\n\n# SVN_REPOSITORY or CVS_REPOSITORY and CVS_MODULE\n\n#\n\n# If the project doesn't build with spaces in the path, do the following:\n\n# set(CTEST_AVOID_SPACES TRUE)\n\n# \n\n# After this file has been included, the regular new style ctest\n\n# scripting commands can be used, e.g.\n\n#\n\n# ctest_empty_binary_directory(\"${CTEST_BINARY_DIRECTORY}\")\n\n# ctest_start(Nightly)\n\n# ctest_update(SOURCE \"${CTEST_SOURCE_DIRECTORY}\" )\n\n# ctest_configure(BUILD \"${CTEST_BINARY_DIRECTORY}\" )\n\n# ctest_build(BUILD \"${CTEST_BINARY_DIRECTORY}\" )\n\n# ctest_test(BUILD \"${CTEST_BINARY_DIRECTORY}\" )\n\n# ctest_submit()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up the directories where the dashboards will be created\n\n# By default this will be \"$HOME/Dashboards/<project>/(src|build) dir\".\n\n# It can be overriden by the user.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set up version control\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/KDE4Defaults.cmake" : {
      "ObjectId" : "de56a822e53788e780c7072532c615081fef699e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# support for Dart: http://public.kitware.com/dashboard.php?name=kde\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Always include srcdir and builddir in include path\n\n# This saves typing ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY} in about every subdir\n\n# since cmake 2.4.0\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# put the include dirs which are in the source or build tree\n\n# before all other include dirs, so the headers in the sources\n\n# are prefered over the already installed ones\n\n# since cmake 2.4.1\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use colored output\n\n# since cmake 2.4.0\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define the generic version of the libraries here\n\n# this makes it easy to advance it when the next KDE release comes\n\n# Use this version number for libraries which are at version n in KDE version n\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use this version number for libraries which are already at version n+1 in KDE version n\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# windows does not support LD_LIBRARY_PATH or similar\n\n# all searchable directories has to be defined by the PATH environment var\n\n# to reduce the number of required pathes executables are placed into\n\n# the build bin dir \n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set (LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/KDE4Macros.cmake" : {
      "ObjectId" : "5533284b4a181dd26e46d1dbf50ad45f4f2dd982",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for documentation look at FindKDE4Internal.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this file contains the following macros (or functions):\n\n# KDE4_ADD_UI_FILES\n\n# KDE4_ADD_UI3_FILES\n\n# KDE4_ADD_KCFG_FILES\n\n# _KDE4_SET_CUSTOM_TARGET_PROPERTY\n\n# _KDE4_GET_CUSTOM_TARGET_PROPERTY\n\n# KDE4_MOC_HEADERS\n\n# KDE4_HANDLE_AUTOMOC\n\n# KDE4_CREATE_FINAL_FILES\n\n# KDE4_ADD_PLUGIN\n\n# KDE4_ADD_KDEINIT_EXECUTABLE\n\n# KDE4_ADD_UNIT_TEST\n\n# KDE4_ADD_EXECUTABLE\n\n# KDE4_ADD_WIDGET_FILES\n\n# KDE4_UPDATE_ICONCACHE\n\n# KDE4_INSTALL_ICONS\n\n# KDE4_REMOVE_OBSOLETE_CMAKE_FILES\n\n# KDE4_NO_ENABLE_FINAL\n\n# KDE4_CREATE_HANDBOOK\n\n# KDE4_ADD_APP_ICON\n\n# KDE4_CREATE_MANPAGE\n\n# KDE4_CREATE_BASIC_CMAKE_VERSION_FILE (function)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006-2009 Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2006, 2007, Laurent Montel, <montel@kde.org>\n\n# Copyright (c) 2007 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is for versions of automoc4 which don't provide these two macros.\n\n# If such a version is used, just use the \"old\" style automoc handling. \n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the command for creating the source file from the kcfg file\n",
        "Line" : 74,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : "# don't run automoc on this file\n",
        "Line" : 83,
        "CharPositionInLine" : 81
      },
      "6" : {
        "Text" : "#create the implementation files from the ui files and add them to the list of sources\n\n#usage: KDE4_ADD_UI_FILES(foo_SRCS ${ui_files})\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# we need to run uic and replace some things in the generated file\n\n# this is done by executing the cmake script kde4uic.cmake\n",
        "Line" : 105,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#create the implementation files from the ui files and add them to the list of sources\n\n#usage: KDE4_ADD_UI3_FILES(foo_SRCS ${ui_files})\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# we need to run uic3 and replace some things in the generated file\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# this is done by executing the cmake script kde4uic.cmake\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# if automoc4 from kdesupport has been found, use the macro provided there\n",
        "Line" : 188,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# if automoc4 from kdesupport has been found, use the macro provided there\n",
        "Line" : 193,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "#Bootstrap\n",
        "Line" : 213,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# TODO symlinks on non-unix platforms\n",
        "Line" : 265,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# execute some cmake code on make install which creates the symlink\n",
        "Line" : 267,
        "CharPositionInLine" : 9
      },
      "16" : {
        "Text" : "# sometimes we have \"man-\" prepended\n",
        "Line" : 282,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "#Bootstrap\n",
        "Line" : 285,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# Update mtime of hicolor icon theme dir.\n\n# We don't always have touch command (e.g. on Windows), so instead create\n\n#  and delete a temporary file in the theme dir.\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# a \"map\" of short type names to the directories\n\n# unknown names should give empty results\n\n# KDE 3 compatibility\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# KDE 4 / icon naming specification compatibility\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# a \"map\" of short theme names to the theme directory\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# only used internally by KDE4_INSTALL_ICONS\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# if the string doesn't match the pattern, the result is the full string, so all three have the same content\n",
        "Line" : 372,
        "CharPositionInLine" : 3
      },
      "24" : {
        "Text" : "#      message(STATUS \"icon: ${_current_ICON} size: ${_size} group: ${_group} name: ${_name} l10n: ${_l10n_SUBDIR}\")\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# the l10n-subdir if language given as second argument (localized icon)\n",
        "Line" : 387,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "# first the png icons\n",
        "Line" : 395,
        "CharPositionInLine" : 3
      },
      "27" : {
        "Text" : "# since CMake 2.6 regex matches are stored in special variables CMAKE_MATCH_x, if it didn't match, they are empty\n",
        "Line" : 398,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# mng icons\n",
        "Line" : 413,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# since CMake 2.6 regex matches are stored in special variables CMAKE_MATCH_x, if it didn't match, they are empty\n",
        "Line" : 416,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# and now the svg icons\n",
        "Line" : 431,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "# since CMake 2.6 regex matches are stored in special variables CMAKE_MATCH_x, if it didn't match, they are empty\n",
        "Line" : 434,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# For all C++ sources a big source file which includes all the files\n\n# is created.\n\n# This is not done for the C sources, they are just gathered in a separate list\n\n# because they are usually not written by KDE and as such not intended to be\n\n# compiled all-in-one.\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# don't include any generated files in the final-file\n\n# because then cmake will not know the dependencies\n",
        "Line" : 463,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# only put C++ files in the final-file\n",
        "Line" : 469,
        "CharPositionInLine" : 9
      },
      "35" : {
        "Text" : "# This macro doesn't set up the RPATH related options for executables anymore,\n\n# since now (wioth cmake 2.6) just the full RPATH is used always for everything.\n\n# It does create wrapper shell scripts for the executables.\n\n# It overrides the defaults set in FindKDE4Internal.cmake.\n\n# For every executable a wrapper script is created, which sets the appropriate\n\n# environment variable for the platform (LD_LIBRARY_PATH on most UNIX systems,\n\n# DYLD_LIBRARY_PATH on OS X and PATH in Windows) so  that it points to the built\n\n# but not yet installed versions of the libraries. So if RPATH is disabled, the executables\n\n# can be run via these scripts from the build tree and will find the correct libraries.\n\n# If RPATH is not disabled, these scripts are also used but only for consistency, because\n\n# they don't really influence anything then, because the compiled-in RPATH overrides\n\n# the LD_LIBRARY_PATH env. variable.\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# DYLD_LIBRARY_PATH does not work like LD_LIBRARY_PATH\n\n# OSX already has the RPATH in libraries and executables, putting runtime directories in\n\n# DYLD_LIBRARY_PATH actually breaks things\n",
        "Line" : 501,
        "CharPositionInLine" : 9
      },
      "37" : {
        "Text" : "# use add_custom_target() to have the sh-wrapper generated during build time instead of cmake time\n",
        "Line" : 510,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# under UNIX, set the property WRAPPER_SCRIPT to the name of the generated shell script\n\n# so it can be queried and used later on easily\n",
        "Line" : 520,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# under windows, set the property WRAPPER_SCRIPT just to the name of the executable\n\n# maybe later this will change to a generated batch file (for setting the PATH so that the Qt libs are found)\n",
        "Line" : 525,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# use add_custom_target() to have the batch-file-wrapper generated during build time instead of cmake time\n",
        "Line" : 533,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "#is the first argument is \"WITH_PREFIX\" then keep the standard \"lib\" prefix, otherwise set the prefix empty\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# for shared libraries/plugins a -DMAKE_target_LIB is required\n",
        "Line" : 571,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# this macro is intended to check whether a list of source\n\n# files has the \"NOGUI\" or \"RUN_UNINSTALLED\" keywords at the beginning\n\n# in _output_LIST the list of source files is returned with the \"NOGUI\"\n\n# and \"RUN_UNINSTALLED\" keywords removed\n\n# if \"NOGUI\" is in the list of files, the _nogui argument is set to\n\n# \"NOGUI\" (which evaluates to TRUE in cmake), otherwise it is set empty\n\n# (which evaluates to FALSE in cmake)\n\n# if \"RUN_UNINSTALLED\" is in the list of files, the _uninst argument is set to\n\n# \"RUN_UNINSTALLED\" (which evaluates to TRUE in cmake), otherwise it is set empty\n\n# (which evaluates to FALSE in cmake)\n\n# if \"TEST\" is in the list of files, the _test argument is set to\n\n# \"TEST\" (which evaluates to TRUE in cmake), otherwise it is set empty\n\n# (which evaluates to FALSE in cmake)\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# under Windows, build a normal executable and additionally a dummy kdeinit4_foo.lib, whose only purpose on windows is to \n\n# keep the linking logic from the CMakeLists.txt on UNIX working (under UNIX all necessary libs are linked against the kdeinit\n\n# library instead against the executable, under windows we want to have everything in the executable, but for compatibility we have to \n\n# keep the library there-\n",
        "Line" : 655,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "# add a unit test, which is executed when running make test\n\n# it will be built with RPATH pointing to the build dir\n\n# The targets are always created, but only built for the \"all\"\n\n# target if the option KDE4_BUILD_TESTS is enabled. Otherwise the rules for the target\n\n# are created but not built by default. You can build them by manually building the target.\n\n# The name of the target can be specified using TESTNAME <testname>, if it is not given\n\n# the macro will default to the <name>\n",
        "Line" : 707,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# .bat because of rpath handling\n",
        "Line" : 747,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Use .shell wrapper where available, to use uninstalled libs.\n",
        "Line" : 755,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "#MESSAGE(STATUS \"${_targetName} : Using QTestLib, can produce XML report.\")\n",
        "Line" : 762,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "#MESSAGE(STATUS \"${_targetName} : NOT using QTestLib, can't produce XML report, please use QTestLib to write your unit tests.\")\n",
        "Line" : 765,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "#    add_test( ${_targetName} ${EXECUTABLE_OUTPUT_PATH}/${_test_NAME} -xml -o ${_test_NAME}.tml )\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#not needed for the ide\n",
        "Line" : 771,
        "CharPositionInLine" : 24
      },
      "52" : {
        "Text" : "# if the tests are EXCLUDE_FROM_ALL, add a target \"buildtests\" to build all tests\n",
        "Line" : 772,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# determine additional parameters for add_executable()\n\n# for GUI apps, create a bundle on OSX\n",
        "Line" : 793,
        "CharPositionInLine" : 3
      },
      "54" : {
        "Text" : "# for GUI apps, this disables the additional console under Windows\n",
        "Line" : 799,
        "CharPositionInLine" : 3
      },
      "55" : {
        "Text" : "#is the first argument is \"WITH_PREFIX\" then keep the standard \"lib\" prefix, otherwise set the prefix empty\n",
        "Line" : 842,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# for shared libraries a -DMAKE_target_LIB is required\n",
        "Line" : 873,
        "CharPositionInLine" : 3
      },
      "57" : {
        "Text" : "# By default don't add any linked libraries to the \"exported\"\n\n# link interfaces, so that executables linking against this library\n\n# will not automatically add implicit dependencies to their link list.\n\n#\n\n# This reduces inter-package dependencies and makes it easier to remove\n\n# dependencies of shared libraries without breaking binary compatibility.\n",
        "Line" : 879,
        "CharPositionInLine" : 3
      },
      "58" : {
        "Text" : "# create source file from the .widgets file\n",
        "Line" : 900,
        "CharPositionInLine" : 6
      },
      "59" : {
        "Text" : "# create moc file\n",
        "Line" : 906,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# the files listed here will be removed by remove_obsoleted_cmake_files.cmake, Alex\n",
        "Line" : 917,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# the next line is is required, because in CMake arguments to macros are not real\n\n# variables, but handled differently. The next line create a real CMake variable,\n\n# so configure_file() will replace it correctly.\n",
        "Line" : 943,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# compared to write(FILE) configure_file() only really writes the file if the\n\n# contents have changed. Otherwise we would have a lot of recompiles.\n",
        "Line" : 947,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# adds application icon to target source list\n\n# 'appsources' - the sources of the application\n\n# 'pngfiles' - specifies the list of icon files\n\n# example: KDE4_ADD_WIN32_APP_ICON(myapp_SRCS \"pics/cr16-myapp.png;pics/cr32-myapp.png\")\n",
        "Line" : 958,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# png2ico is found by the above find_program\n",
        "Line" : 975,
        "CharPositionInLine" : 12
      },
      "65" : {
        "Text" : "#            message(\"png2ico ${_outfilename}.ico ${ARGN}\")\n",
        "Line" : 976,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# now make rc file for adding it to the sources\n",
        "Line" : 979,
        "CharPositionInLine" : 12
      },
      "67" : {
        "Text" : "# adds application icon to target source list \n",
        "Line" : 992,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# this macro adds an application icon to the specified target\n\n# mac osx notes : the application icon is added to a Mac OS X bundle so that Finder and friends show the right thing.\n\n# win32 notes: the application icon(s) are compiled into the application \n\n#                        there is some workaround in kde4_add_kdeinit_executable to make it possible for those applications as well\n\n# parameters: \n\n# 'appsources'  - specifies the list of source files; this has to end in _SRCS or _KDEINIT_SRCS\n\n#                           (see the replace stuff below)\n\n# 'pattern'     - regular expression for searching application icons \n\n# example: KDE4_ADD_APP_ICON( myapp_SRCS \"pics/cr*-myapp.png\")\n\n# example: KDE4_ADD_APP_ICON( myapp_KDEINIT_SRCS \"icons/oxygen/*/apps/myapp.png\")\n",
        "Line" : 994,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# first convert image to a tiff using the Mac OS X \"sips\" utility,\n\n# then use tiff2icns to convert to an icon\n",
        "Line" : 1063,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# we can only test for the 128-icon like that - we don't use patterns anymore\n",
        "Line" : 1069,
        "CharPositionInLine" : 12
      },
      "71" : {
        "Text" : "# first, get the basename of our app icon\n",
        "Line" : 1079,
        "CharPositionInLine" : 16
      },
      "72" : {
        "Text" : "# This will register the icon into the bundle\n",
        "Line" : 1086,
        "CharPositionInLine" : 16
      },
      "73" : {
        "Text" : "# Append the icns file to the sources list so it will be a dependency to the\n\n# main target\n",
        "Line" : 1089,
        "CharPositionInLine" : 16
      },
      "74" : {
        "Text" : "#            this doesn't seem to work for me - Use manual \"install\" instead\n\n# TODO: test again with cmake 2.6 ?\n\n#           SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR}/${target}.icns PROPERTIES MACOSX_PACKAGE_LOCATION Resources)\n",
        "Line" : 1093,
        "CharPositionInLine" : 16
      },
      "75" : {
        "Text" : "# TODO - try to scale a non-128 icon...? Try to convert an SVG on the fly?\n",
        "Line" : 1100,
        "CharPositionInLine" : 16
      },
      "76" : {
        "Text" : "# This macro is only kept around for compatibility, it is not needed/used anymore\n\n# since CMake 2.6.0. With CMake 2.6.0 it is not necessary anymore link libraries again\n\n# (\"relink\") to change their RPATH. Since this is fast now, they are now always built with\n\n# full RPATH. \n\n# Still keep this macro here, since somebody might use it and so that would break\n\n# if we would just remove it from here.\n\n# What it does now it sets the target properties of the given target the same way as\n\n# they were set by the old version of the macro with the option FULL_RPATH enabled.\n\n# This one may be a candidate for removal. Alex\n",
        "Line" : 1111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 77
    },
    "cmake/modules/KDELibs4LibraryTargets-debian.cmake" : {
      "ObjectId" : "dcc08dcb447f0ad6008a423c03245686d890f1fc",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file for configuration \"Debian\".\n\n#----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Import target \"KDE4__kdefakes\" for configuration \"Debian\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Import target \"KDE4__kdecore\" for configuration \"Debian\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import target \"KDE4__kdeui\" for configuration \"Debian\"\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Import target \"KDE4__kpty\" for configuration \"Debian\"\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Import target \"KDE4__kdesu\" for configuration \"Debian\"\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Import target \"KDE4__kjs\" for configuration \"Debian\"\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Import target \"KDE4__kjsapi\" for configuration \"Debian\"\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Import target \"KDE4__kjsembed\" for configuration \"Debian\"\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Import target \"KDE4__kntlm\" for configuration \"Debian\"\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Import target \"KDE4__kio\" for configuration \"Debian\"\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Import target \"KDE4__solid\" for configuration \"Debian\"\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Import target \"KDE4__kunittest\" for configuration \"Debian\"\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Import target \"KDE4__kde3support\" for configuration \"Debian\"\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Import target \"KDE4__kfile\" for configuration \"Debian\"\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Import target \"KDE4__knewstuff2\" for configuration \"Debian\"\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Import target \"KDE4__kparts\" for configuration \"Debian\"\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Import target \"KDE4__kutils\" for configuration \"Debian\"\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Import target \"KDE4__threadweaver\" for configuration \"Debian\"\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Import target \"KDE4__khtml\" for configuration \"Debian\"\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Import target \"KDE4__ktexteditor\" for configuration \"Debian\"\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Import target \"KDE4__kmediaplayer\" for configuration \"Debian\"\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Import target \"KDE4__kimproxy\" for configuration \"Debian\"\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Import target \"KDE4__knotifyconfig\" for configuration \"Debian\"\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Import target \"KDE4__kdnssd\" for configuration \"Debian\"\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Import target \"KDE4__krosscore\" for configuration \"Debian\"\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Import target \"KDE4__krossui\" for configuration \"Debian\"\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Import target \"KDE4__plasma\" for configuration \"Debian\"\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Import target \"KDE4__nepomuk\" for configuration \"Debian\"\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "cmake/modules/KDELibs4LibraryTargets.cmake" : {
      "ObjectId" : "b1d4500b9f8ad22e436340360c3311f08dcac7bc",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generated by CMake 2.6-patch 2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file.\n\n#----------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target KDE4__kdefakes\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create imported target KDE4__kdecore\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create imported target KDE4__kdeui\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create imported target KDE4__kpty\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create imported target KDE4__kdesu\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create imported target KDE4__kjs\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create imported target KDE4__kjsapi\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Create imported target KDE4__kjsembed\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create imported target KDE4__kntlm\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Create imported target KDE4__kio\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Create imported target KDE4__solid\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Create imported target KDE4__kunittest\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Create imported target KDE4__kde3support\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create imported target KDE4__kfile\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Create imported target KDE4__knewstuff2\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Create imported target KDE4__kparts\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Create imported target KDE4__kutils\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Create imported target KDE4__threadweaver\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Create imported target KDE4__khtml\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Create imported target KDE4__ktexteditor\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Create imported target KDE4__kmediaplayer\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Create imported target KDE4__kimproxy\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Create imported target KDE4__knotifyconfig\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Create imported target KDE4__kdnssd\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Create imported target KDE4__krosscore\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Create imported target KDE4__krossui\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Create imported target KDE4__plasma\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Create imported target KDE4__nepomuk\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Load information for each installed configuration.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "cmake/modules/KDELibs4ToolsTargets-debian.cmake" : {
      "ObjectId" : "513f572886b314ed53976c4927886dc4ec9f483e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file for configuration \"Debian\".\n\n#----------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Import target \"KDE4__kconfig_compiler\" for configuration \"Debian\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Import target \"KDE4__meinproc4\" for configuration \"Debian\"\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Import target \"KDE4__makekdewidgets\" for configuration \"Debian\"\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/KDELibs4ToolsTargets.cmake" : {
      "ObjectId" : "a73c9f9b9f117847ac947a3c0b1efcc4f3624a53",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generated by CMake 2.6-patch 2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------\n\n# Generated CMake target import file.\n\n#----------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Commands may need to know the format version.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target KDE4__kconfig_compiler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create imported target KDE4__meinproc4\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create imported target KDE4__makekdewidgets\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Load information for each installed configuration.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Commands beyond this point should not need to know the version.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/KDELibsDependencies.cmake" : {
      "ObjectId" : "20c0a5e0ece1119a63425f0d0ef4c325fd91fff7",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this file was generated during the kdelibs build process\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/MacroAddCompileFlags.cmake" : {
      "ObjectId" : "12038c00cc1846415b935f26852490933a512daa",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_ADD_COMPILE_FLAGS(<_target> \"flags...\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Oswald Buddenhagen, <ossi@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroAddFileDependencies.cmake" : {
      "ObjectId" : "9e5536072ca8bdaa2fc481f58c2d1a32311a1f0d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACRO_ADD_FILE_DEPENDENCIES(<_file> depend_files...)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroAddLinkFlags.cmake" : {
      "ObjectId" : "a10d39eadd7d02fa5c68b98e2e86787e5aea0897",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_ADD_LINK_FLAGS(<_target> \"flags...\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Oswald Buddenhagen, <ossi@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroAdditionalCleanFiles.cmake" : {
      "ObjectId" : "593182fee42ba574a089058543736dbfe666e9df",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_ADDITIONAL_CLEAN_FILES(files...)\n\n# MACRO_OPTIONAL_FIND_PACKAGE( <name> [QUIT] )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroAppendIf.cmake" : {
      "ObjectId" : "86fe014ac901201d3f5f9c53ad0c8961640eee3e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACRO_APPEND_IF(CONDITION VAR VALUE1...VALUEN )\n\n# This convenience macro appends the values VALUE1 up to VALUEN to the list\n\n# given in VAR, but only if the variable CONDITION is TRUE:\n\n#\n\n# usage example:\n\n# IF(SOMELIB_FOUND)\n\n#   SET(my_sources ${my_sources} somefile.c someotherfile.c)\n\n# ENDIF(SOMELIB_FOUND)\n\n#\n\n# becomes:\n\n# MACRO_APPEND_IF(SOMELIB_FOUND  my_sources  somefile.c someotherfile.c)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroBoolTo01.cmake" : {
      "ObjectId" : "63b9852660df493de81a41745c8d09e2f150fa86",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACRO_BOOL_TO_01( VAR RESULT0 ... RESULTN )\n\n# This macro evaluates its first argument\n\n# and sets all the given vaiables either to 0 or 1\n\n# depending on the value of the first one\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroEnsureOutOfSourceBuild.cmake" : {
      "ObjectId" : "cb26e0c3283fd6667a114a932cf8674d56c85001",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n\n# MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n\n#    Call this macro in your project if you want to enforce out-of-source builds.\n\n#    If an in-source build is detected, it will abort with the given error message.\n\n#    This macro works in any of the CMakeLists.txt of your project, but the recommended\n\n#    location to call this is close to the beginning of the top level CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroEnsureVersion.cmake" : {
      "ObjectId" : "6797e5b7dbb8b98d9b6f53c8d644712d10c43f4c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file defines the following macros for developers to use in ensuring\n\n# that installed software is of the right version:\n\n#\n\n# MACRO_ENSURE_VERSION        - test that a version number is greater than\n\n#                               or equal to some minimum\n\n# MACRO_ENSURE_VERSION_RANGE - test that a version number is greater than\n\n#                               or equal to some minimum and less than some\n\n#                               maximum\n\n# MACRO_ENSURE_VERSION2       - deprecated, do not use in new code\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MACRO_ENSURE_VERSION\n\n# This macro compares version numbers of the form \"x.y.z\" or \"x.y\"\n\n# MACRO_ENSURE_VERSION( FOO_MIN_VERSION FOO_VERSION_FOUND FOO_VERSION_OK)\n\n# will set FOO_VERSION_OK to true if FOO_VERSION_FOUND >= FOO_MIN_VERSION\n\n# Leading and trailing text is ok, e.g.\n\n# MACRO_ENSURE_VERSION( \"2.5.31\" \"flex 2.5.4a\" VERSION_OK)\n\n# which means 2.5.31 is required and \"flex 2.5.4a\" is what was found on the system\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MACRO_ENSURE_VERSION_RANGE\n\n# This macro ensures that a version number of the form\n\n# \"x.y.z\" or \"x.y\" falls within a range defined by\n\n# min_version <= found_version < max_version.\n\n# If this expression holds, FOO_VERSION_OK will be set TRUE\n\n#\n\n# Example: MACRO_ENSURE_VERSION_RANGE3( \"0.1.0\" ${FOOCODE_VERSION} \"0.7.0\" FOO_VERSION_OK )\n\n#\n\n# This macro will break silently if any of x,y,z are greater than 100.\n\n#\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NORMALIZE_VERSION\n\n# Helper macro to convert version numbers of the form \"x.y.z\"\n\n# to an integer equal to 10^4 * x + 10^2 * y + z\n\n#\n\n# This macro will break silently if any of x,y,z are greater than 100.\n\n#\n\n# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CHECK_RANGE_INCLUSIVE_LOWER\n\n# Helper macro to check whether x <= y < z\n\n#\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# parse the parts of the version string\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# compute an overall version number which can be compared at once\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "cmake/modules/MacroLibrary.cmake" : {
      "ObjectId" : "a467d84022a56533b48554a5665c51601560dd8d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - include MacroLibrary offers a collection of macros which extend the built-in cmake commands\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroLogFeature.cmake" : {
      "ObjectId" : "11861b9571cf07e42b407a57dc75ab5e035d9ccb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file defines the Feature Logging macros.\n\n#\n\n# MACRO_LOG_FEATURE(VAR FEATURE DESCRIPTION URL [REQUIRED [MIN_VERSION [COMMENTS]]])\n\n#   Logs the information so that it can be displayed at the end\n\n#   of the configure run\n\n#   VAR : TRUE or FALSE, indicating whether the feature is supported\n\n#   FEATURE: name of the feature, e.g. \"libjpeg\"\n\n#   DESCRIPTION: description what this feature provides\n\n#   URL: home page\n\n#   REQUIRED: TRUE or FALSE, indicating whether the featue is required\n\n#   MIN_VERSION: minimum version number. empty string if unneeded\n\n#   COMMENTS: More info you may want to provide.  empty string if unnecessary\n\n#\n\n# MACRO_DISPLAY_FEATURE_LOG()\n\n#   Call this to display the collected results.\n\n#   Exits CMake with a FATAL error message if a required feature is missing\n\n#\n\n# Example:\n\n#\n\n# INCLUDE(MacroLogFeature)\n\n#\n\n# FIND_PACKAGE(JPEG)\n\n# MACRO_LOG_FEATURE(JPEG_FOUND \"libjpeg\" \"Support JPEG images\" \"http://www.ijg.org\" TRUE \"3.2a\" \"\")\n\n# ...\n\n# MACRO_DISPLAY_FEATURE_LOG()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2006, Allen Winter, <winter@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# _required _minvers _comments)\n",
        "Line" : 53,
        "CharPositionInLine" : 58
      },
      "3" : {
        "Text" : "#      SET(_logtext \"${_logtext}\\n\") #double-space missing features?\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/MacroOptionalAddSubdirectory.cmake" : {
      "ObjectId" : "32e25141d40cfd43b65cf575575555e590b9b315",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_OPTIONAL_ADD_SUBDIRECTORY() combines ADD_SUBDIRECTORY() with an OPTION()\n\n# MACRO_OPTIONAL_ADD_SUBDIRECTORY( <dir> )\n\n# If you use MACRO_OPTIONAL_ADD_SUBDIRECTORY() instead of ADD_SUBDIRECTORY(),\n\n# this will have two effects\n\n# 1 - CMake will not complain if the directory doesn't exist\n\n#     This makes sense if you want to distribute just one of the subdirs\n\n#     in a source package, e.g. just one of the subdirs in kdeextragear.\n\n# 2 - If the directory exists, it will offer an option to skip the \n\n#     subdirectory.\n\n#     This is useful if you want to compile only a subset of all\n\n#     directories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroOptionalDependPackage.cmake" : {
      "ObjectId" : "1a6df36a7ad22f59398fd0be0f63ae29fe1db41f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Search if cmake module is installed in computer\n\n# cmake will not fail but signal that we must install depend package before.\n\n# add as previously name of cmake module \"_name\" and define package needed \"_module_needed\"\n\n# if return DEPEND_PACKAGE_${_name}\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Montel Laurent <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroOptionalFindPackage.cmake" : {
      "ObjectId" : "816cdb7e8723f54c6ffc4bda2349dd56fb544a8c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_OPTIONAL_FIND_PACKAGE() combines FIND_PACKAGE() with an OPTION()\n\n# MACRO_OPTIONAL_FIND_PACKAGE( <name> [QUIT] )\n\n# This macro is a combination of OPTION() and FIND_PACKAGE(), it\n\n# works like FIND_PACKAGE(), but additionally it automatically creates\n\n# an option name WITH_<name>, which can be disabled via the cmake GUI.\n\n# or via -DWITH_<name>=OFF\n\n# The standard <name>_FOUND variables can be used in the same way\n\n# as when using the normal FIND_PACKAGE()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MacroPushRequiredVars.cmake" : {
      "ObjectId" : "650b566eedfbecff8830bea953f2c4ce651a3b4d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this module defines two macros:\n\n# MACRO_PUSH_REQUIRED_VARS()\n\n# and\n\n# MACRO_POP_REQUIRED_VARS()\n\n# use these if you call cmake macros which use\n\n# any of the CMAKE_REQUIRED_XXX variables\n\n#\n\n# Usage:\n\n# MACRO_PUSH_REQUIRED_VARS()\n\n# SET(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -DSOME_MORE_DEF)\n\n# CHECK_FUNCTION_EXISTS(...)\n\n# MACRO_POP_REQUIRED_VARS()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't pop more than we pushed\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/MacroWriteBasicCMakeVersionFile.cmake" : {
      "ObjectId" : "6f9e4189835f24852519d07aade288bd4683d672",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  MACRO_WRITE_BASIC_CMAKE_VERSION_FILE( _filename _major _minor _patch)\n\n#    Writes a file for use as <package>ConfigVersion.cmake file to <_filename>.\n\n#    See the documentation of FIND_PACKAGE() for details on this.\n\n#    _filename is the output filename, it should be in the build tree.\n\n#    _major is the major version number of the project to be installed\n\n#    _minor is the minor version number of the project to be installed\n\n#    _patch is the patch version number of the project to be installed\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/NepomukMacros.cmake" : {
      "ObjectId" : "14acd2bbfa29dfcccd1e8c153d2366bdb6324cdf",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains the following macros:\n\n#\n\n# NEPOMUK_GENERATE_FROM_ONTOLOGY\n\n# Parameters:\n\n#   ontofile     - Path to the NRL ontology defining the resources to be generated.\n\n#   targetdir    - Folder to which the generated sources should be written.\n\n#   out_headers  - Variable which will be filled with the names of all generated headers.\n\n#   out_sources  - Variable which will be filled with the names of all generated sources.\n\n#   out_includes - Variable which will be filled with complete include statements of all \n\n#                  generated resource classes.\n\n#\n\n# In addition to the parameters an arbitrary number of template filenames can be set as arguments\n\n#\n\n# In case of success NEPOMUK_RESOURCES_GENERATED is true, otherwise false\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# (C) 2007 Sebastian Trueg <trueg@kde.org>\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# init\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If the first call succeeds it is very very likely that the rest will, too\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/PythonMacros.cmake" : {
      "ObjectId" : "4ae5a3c72ae0037b113b7e4415384237e56bbb52",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Python macros\n\n# ~~~~~~~~~~~~~\n\n# Copyright (c) 2007, Simon Edwards <simon@simonzone.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# This file defines the following macros:\n\n#\n\n# PYTHON_INSTALL (SOURCE_FILE DESINATION_DIR)\n\n#     Install the SOURCE_FILE, which is a Python .py file, into the\n\n#     destination directory during install. The file will be byte compiled\n\n#     and both the .py file and .pyc file will be installed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install the source file.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Byte compile and install the .pyc file.        \n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Don't copy the file onto itself.\n",
        "Line" : 44,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 4
    },
    "cmake/modules/SIPMacros.cmake" : {
      "ObjectId" : "eb5ea06ca628fd3a42ce5fcc410da6d2c8505eda",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macros for SIP\n\n# ~~~~~~~~~~~~~~\n\n# Copyright (c) 2007, Simon Edwards <simon@simonzone.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# SIP website: http://www.riverbankcomputing.co.uk/sip/index.php\n\n#\n\n# This file defines the following macros:\n\n#\n\n# ADD_SIP_PYTHON_MODULE (MODULE_NAME MODULE_SIP [library1, libaray2, ...])\n\n#     Specifies a SIP file to be built into a Python module and installed.\n\n#     MODULE_NAME is the name of Python module including any path name. (e.g.\n\n#     os.sys, Foo.bar etc). MODULE_SIP the path and filename of the .sip file\n\n#     to process and compile. libraryN are libraries that the Python module,\n\n#     which is typically a shared library, should be linked to. The built\n\n#     module will also be install into Python's site-packages directory.\n\n#\n\n# The behaviour of the ADD_SIP_PYTHON_MODULE macro can be controlled by a\n\n# number of variables:\n\n#\n\n# SIP_INCLUDES - List of directories which SIP will scan through when looking\n\n#     for included .sip files. (Corresponds to the -I option for SIP.)\n\n#\n\n# SIP_TAGS - List of tags to define when running SIP. (Corresponds to the -t\n\n#     option for SIP.)\n\n#\n\n# SIP_CONCAT_PARTS - An integer which defines the number of parts the C++ code\n\n#     of each module should be split into. Defaults to 8. (Corresponds to the\n\n#     -j option for SIP.)\n\n#\n\n# SIP_DISABLE_FEATURES - List of feature names which should be disabled\n\n#     running SIP. (Corresponds to the -x option for SIP.)\n\n#\n\n# SIP_EXTRA_OPTIONS - Extra command line options which should be passed on to\n\n#     SIP.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We give this target a long logical target name.\n\n# (This is to avoid having the library name clash with any already\n\n# install library names. If that happens then cmake dependancy\n\n# tracking get confused.)\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Output goes in this dir.\n",
        "Line" : 62,
        "CharPositionInLine" : 72
      },
      "3" : {
        "Text" : "# instead of a touch command, give out the name and append to the files\n\n# this is basically what the touch command does.\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/modules/Win32Macros.cmake" : {
      "ObjectId" : "e5a3655b018c56f1d394c224b1f1496741171781",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# win32 macros\n\n#\n\n# ADDEXPLORERWRAPPER(project)\n\n#\n\n# Exists only under Win32 !\n\n#\n\n# addExplorerWrapper creates batch files for fast access \n\n# to the build environment from the win32 explorer. \n\n# \n\n# For mingw and nmake projects it opens a command shell,\n\n# for Visual Studio IDE's (at least tested with VS 8 2005) it\n\n# opens the related .sln file with paths setting specified at \n\n# configure time. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006-2007, Ralf Habacker\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# write explorer wrappers\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# add here more pathes \n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "cmake/modules/check_installed_exports_file.cmake" : {
      "ObjectId" : "454d2a09110466353a74743322b7784661342e42",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# INSTALL_DIR - set it to the install destination\n\n# INSTALL_PREFIX - set it to CMAKE_INSTALL_PREFIX\n\n# CURRENT_BINARY_DIR - set it to CMAKE_CURRENT_BINARY_DIR\n\n# FILENAME  - the filename of the exports file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get the absolute install directory, consider absolute and relative paths and also DESTDIR\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if the file already exists at the install location, and if we can\n\n# find the exports file in the build dir, read both, and if their contents differ,\n\n# remove all configuration-specific exports files from the install dir, since\n\n# they may create conflicts if the new targets have been added/targets have been \n\n# removed/ targets have been renamed/ the namespace for the exported targets has changed\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#        else(NOT \"${installedExportsFileContents}\" STREQUAL \"${binaryDirExportsFileContents}\")\n\n#           message(STATUS \"FILES are the same\")\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/config-alsa.h.cmake" : {
      "ObjectId" : "fb9cb8ca674a6b400dec847487e5963563659822",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Define to 1 if you have the <linux/awe_voice.h> header file. */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Define to 1 if you have the <sys/awe_voice.h> header file. */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 if you have the </usr/src/sys/gnu/i386/isa/sound/awe_voice.h>\n   header file. */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 if you have the </usr/src/sys/i386/isa/sound/awe_voice.h>\n   header file. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the <awe_voice.h> header file. */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define if you have libasound.so.2 (required for ALSA 0.9.x support) */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define if libasound has snd_pcm_resume() */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the <alsa/asoundlib.h> header file. */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the <sys/asoundlib.h> header file. */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the <sys/soundcard.h> header file. */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the <machine/soundcard.h> header file. */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/modules/kde4_exec_via_sh.cmake" : {
      "ObjectId" : "6b826ff06bf71395966f4e631845717c9eb13e36",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make it executable\n\n# since this is only executed on UNIX, it is safe to call chmod\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/kde4uic.cmake" : {
      "ObjectId" : "0e2a33c90e80cbe69a95818c2afd14c18dfdd534",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#using a ui3 file with uic3\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the kde4 branch\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#replace tr218n(\"\") with QString::null to avoid warning from KLocale\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#replace image15_data with img15_filename to make enable_final work\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#fixup include guard\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/roseCMakeDetermineCXXCompiler.cmake" : {
      "ObjectId" : "6af84dcf828253bb11c01e4b3c80ee3df23edbca",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# determine the compiler to use for C++ programs\n\n# NOTE, a generator may set CMAKE_CXX_COMPILER before\n\n# loading this file to force a compiler.\n\n# use environment variable CXX first if defined by user, next use \n\n# the cmake variable CMAKE_GENERATOR_CXX which can be defined by a generator\n\n# as a default compiler\n\n# If the internal cmake variable _CMAKE_TOOLCHAIN_PREFIX is set, this is used \n\n# as prefix for the tools (e.g. arm-elf-g++, arm-elf-ar etc.)\n\n#\n\n# Sets the following variables:\n\n#   CMAKE_CXX_COMPILER\n\n#   CMAKE_COMPILER_IS_GNUCXX\n\n#   CMAKE_AR\n\n#   CMAKE_RANLIB\n\n#\n\n# If not already set before, it also sets\n\n#   _CMAKE_TOOLCHAIN_PREFIX\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefer the environment variable CXX\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# next prefer the generator specified compiler\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# finally list compilers to try\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Liao 11/25/2009, change the list order to put g++ as the first one  \n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    SET(CMAKE_CXX_COMPILER_LIST ${_CMAKE_TOOLCHAIN_PREFIX}c++ ${_CMAKE_TOOLCHAIN_PREFIX}g++ CC aCC cl bcc xlC)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the compiler.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# we only get here if CMAKE_CXX_COMPILER was specified using -D or a pre-made CMakeCache.txt\n\n# (e.g. via ctest) or set in CMAKE_TOOLCHAIN_FILE\n\n#\n\n# if CMAKE_CXX_COMPILER is a list of length 2, use the first item as \n\n# CMAKE_CXX_COMPILER and the 2nd one as CMAKE_CXX_COMPILER_ARG1\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if a compiler was specified by the user but without path, \n\n# now try to find it with the full path\n\n# if it is found, force it into the cache, \n\n# if not, don't overwrite the setting (which was given by the user) with \"NOTFOUND\"\n\n# if the CXX compiler already had a path, reuse it for searching the C compiler\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This block was used before the compiler was identified by building a\n\n# source file.  Unless g++ crashes when building a small C++\n\n# executable this should no longer be needed.\n\n#\n\n# The g++ that comes with BeOS 5 segfaults if you run \"g++ -E\"\n\n#  (\"gcc -E\" is fine), which throws up a system dialog box that hangs cmake\n\n#  until the user clicks \"OK\"...so for now, we just assume it's g++.\n\n# IF(BEOS)\n\n#   SET(CMAKE_COMPILER_IS_GNUCXX 1)\n\n#   SET(CMAKE_COMPILER_IS_GNUCXX_RUN 1)\n\n# ENDIF(BEOS)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build a small source file to identify the compiler.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: Set the compiler id.  It is probably MSVC but\n\n# the user may be using an integrated Intel compiler.\n\n# SET(CMAKE_CXX_COMPILER_ID \"MSVC\")\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Each entry in this list is a set of extra flags to try\n\n# adding to the compile line to see if it helps produce\n\n# a valid identification file.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Try compiling to an object file only.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Try to identify the compiler.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set old compiler and platform id variables.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# if we have a g++ cross compiler, they have usually some prefix, like \n\n# e.g. powerpc-linux-g++, arm-elf-g++ or i586-mingw32msvc-g++\n\n# the other tools of the toolchain usually have the same prefix\n\n# NAME_WE cannot be used since then this test will fail for names lile\n\n# \"arm-unknown-nto-qnx6.3.0-gcc.exe\", where BASENAME would be \n\n# \"arm-unknown-nto-qnx6\" instead of the correct \"arm-unknown-nto-qnx6.3.0-\"\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# if \"llvm-\" is part of the prefix, remove it, since llvm doesn't have its own binutils\n\n# but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# configure all variables set in this file\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# IMMEDIATE must be here for compatibility mode <= 2.0\n",
        "Line" : 174,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 20
    },
    "cmake/modules/roseCMakeDetermineFortranCompiler.cmake" : {
      "ObjectId" : "e494b60d41d2d458a605c040edfd0bd0386a3db2",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# determine the compiler to use for Fortran programs\n\n# NOTE, a generator may set CMAKE_Fortran_COMPILER before\n\n# loading this file to force a compiler.\n\n# use environment variable FC first if defined by user, next use \n\n# the cmake variable CMAKE_GENERATOR_FC which can be defined by a generator\n\n# as a default compiler\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefer the environment variable CC\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# next try prefer the compiler specified by the generator\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# finally list compilers to try\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Known compilers:\n\n#  f77/f90/f95: generic compiler names\n\n#  g77: GNU Fortran 77 compiler\n\n#  gfortran: putative GNU Fortran 95+ compiler (in progress)\n\n#  fort77: native F77 compiler under HP-UX (and some older Crays)\n\n#  frt: Fujitsu F77 compiler\n\n#  pgf77/pgf90/pgf95: Portland Group F77/F90/F95 compilers\n\n#  xlf/xlf90/xlf95: IBM (AIX) F77/F90/F95 compilers\n\n#  lf95: Lahey-Fujitsu F95 compiler\n\n#  fl32: Microsoft Fortran 77 \"PowerStation\" compiler\n\n#  af77: Apogee F77 compiler for Intergraph hardware running CLIX\n\n#  epcf90: \"Edinburgh Portable Compiler\" F90\n\n#  fort: Compaq (now HP) Fortran 90/95 compiler for Tru64 and Linux/Alpha\n\n#  ifc: Intel Fortran 95 compiler for Linux/x86\n\n#  efc: Intel Fortran 95 compiler for IA64\n\n#\n\n#  The order is 95 or newer compilers first, then 90, \n\n#  then 77 or older compilers, gnu is always last in the group,\n\n#  so if you paid for a compiler it is picked by default.\n\n# NOTE for testing purposes this list is DUPLICATED in\n\n# CMake/Source/CMakeLists.txt, IF YOU CHANGE THIS LIST,\n\n# PLEASE UPDATE THAT FILE AS WELL!\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#      ifort ifc efc f95 pgf95 lf95 xlf95 fort gfortran gfortran-4 g95 f90\n\n# Liao, 11/25/2009, changed the order to find gfortran first by default   \n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the compiler.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# we only get here if CMAKE_Fortran_COMPILER was specified using -D or a pre-made CMakeCache.txt\n",
        "Line" : 69,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# (e.g. via ctest) or set in CMAKE_TOOLCHAIN_FILE\n\n# if CMAKE_Fortran_COMPILER is a list of length 2, use the first item as \n\n# CMAKE_Fortran_COMPILER and the 2nd one as CMAKE_Fortran_COMPILER_ARG1\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# if a compiler was specified by the user but without path, \n\n# now try to find it with the full path\n\n# if it is found, force it into the cache, \n\n# if not, don't overwrite the setting (which was given by the user) with \"NOTFOUND\"\n\n# if the C compiler already had a path, reuse it for searching the CXX compiler\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Build a small source file to identify the compiler.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: Set the compiler id.  It is probably MSVC but\n\n# the user may be using an integrated Intel compiler.\n\n# SET(CMAKE_Fortran_COMPILER_ID \"MSVC\")\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Each entry in this list is a set of extra flags to try\n\n# adding to the compile line to see if it helps produce\n\n# a valid identification executable.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Try compiling to an object file only.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Intel on windows does not preprocess by default.\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Try to identify the compiler.\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Fall back to old is-GNU test.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Set old compiler and platform id variables.\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# configure variables set in this file for fast reload later on\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# IMMEDIATE must be here for compatibility mode <= 2.0\n",
        "Line" : 170,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 20
    },
    "cmake/modules/roseChooseBackendCompiler.cmake" : {
      "ObjectId" : "2f4480c3e76060d7e5ea71bf20b4939c94572432",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check compilers and version number\n\n#  Liao 11/25/2009\n\n# This is translated from config/choose-backend-compiler.m4\n\n#\n\n# use the results to setup rose_config.h later on\n\n# --------check C compiler -----------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Support for Visual Studio is handled in a separate file\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for unknown reason, some tail control character will show up in OUTPUT_VARIABLE\n\n# We use regex to fill out non numeric characters to get the right numbers\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# --------check CXX compiler -----------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# --------check Fortran compiler -----------------------\n\n# CMakeDetermineFortranCompiler does not recognize gfortran first\n\n# we use a slightly modified CMakeDetermineFortranCompiler.cmake to put gfortran to the highest priority\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# must have a space\n",
        "Line" : 148,
        "CharPositionInLine" : 22
      },
      "6" : {
        "Text" : "# must have a space\n",
        "Line" : 161,
        "CharPositionInLine" : 22
      },
      "7" : {
        "Text" : "# using Clang\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# using GCC\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# using Intel C++\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "cmake/modules/roseGenerateBackendCompilerSpecificHeaders.cmake" : {
      "ObjectId" : "cf346fcc8ed7ebd2db6ad52c9e3326c876ad03b3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Liao 11/25/2009\n\n# Converted from generate-backend-compiler-specific-headers.m4\n\n#\n\n# This should be called after roseChooseBackendCompiler.cmake is called\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GENERATE_BACKEND_CXX_COMPILER_SPECIFIC_HEADERS\n\n# ----------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we split several commands into different execute_process ()\n\n# otherwise cmake may skip executing the last ones!!!    \n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (2/3/2016): Uncomment this to allow errors to be detected.\n\n# the error code is too strict. don't use it for now  \n\n# if(errorVar)\n\n#   message(FATAL_ERROR \"Could not run create_system_headers properly for c++ language support\")\n\n# endif()\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GENERATE_BACKEND_C_COMPILER_SPECIFIC_HEADERS\n\n# ----------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (2/3/2016): Uncomment this to allow errors to be detected.\n\n# the error code is too strict. don't use it for now  \n\n#  if(errorVar)\n\n#    message(FATAL_ERROR \"Could not run create_system_headers properly for c language support\")\n\n#  endif()  \n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/15/2010): Copy the upc.h header file from the config directory to our include-staging/${compilerName}_HEADERS\n\n# directory.  It might be that these should be put into a UPC specific subdirectory (so that the C compiler can't\n\n# accedentally find them), but this should be discussed.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (8/22/2011): Added support for SSE.\n\n# Copy alternative SSE and MMX headers to be seen by ROSE ahead of the originals.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/roseWindowsSupport.cmake" : {
      "ObjectId" : "d1ff1ef4cd4f0c74053b28adcb2335b80e8b9ee6",
      "LastModified" : "2019-03-25T17:14:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define rose_config.h variables\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For Visual Studio, the C & CXX compilers are the same.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO:\n\n#BACKEND_JAVA_COMPILER\n\n#BACKEND_PYTHON_INTERPRETER_NAME_WITH_PATH\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# list of registry keys to help us find where VS2008 is installed\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# English SP1\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Team System English SP1\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Because it takes a while, we only copy system headers the first time.\n\n# You can trigger a rerun of this step by deleting the following file:\n\n# <rose-bin>/include-staging/cl.exe_HEADERS/Windows.h\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# check each registry key\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# if we found an existent include directory, copy its contents into\n\n# <rose-bin>/include\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# ROSE wants <string>, but Windows provides <string.h>\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#  configure_file(\n\n#    ${rose_system_headers_dir}/string.h\n\n#    ${rose_system_headers_dir}/string\n\n#    COPYONLY\n\n#  )\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/summary.cmake" : {
      "ObjectId" : "5c2c6f199e4f5dd2b803c5a94ef7944018f3cf62",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake/modules/summary.cmake\n\n#\n\n# Copyright (C) 2008  Werner Smekal\n\n#\n\n# Macro for outputting all the most important CMake variables for haru\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# =======================================================================\n\n# print summary of configuration to screen\n\n# =======================================================================\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "config/CMakeLists.txt" : {
      "ObjectId" : "368f968f0e367919169d10bd135eec87d724b3d2",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "config/Makefile.am" : {
      "ObjectId" : "8a1ef4425ad7d0ec7797cf01ddbc6461dec73121",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/3/2006): Reorganized the lists of EXTRA_DIST and include_HEADERS.\n\n# DQ (9/2/2006): Removed most of these files since I don't think that these are really required\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Phlin (8/22/2012): GCC 4.6+ starts to support AVX.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/15/2010): Added UPC header files.\n\n# DQ (8/14/2010): Added modified header file iomanip-gnu-4.5 to fix code in new 4.5 header files \n\n# that ROSE can't compile and which appear to be C++0X specific code included by mistake.\n\n# DQ (9/3/2006): Reorganized the lists of EXTRA_DIST and include_HEADERS.\n\n# Note that without the file: config.guess, depend, install-sh, and dirincludes;\n\n# the configuration will exit and the backend specific compiler header file are not built.\n\n# DQ (10/22/2003) Support for GNU header file processing (including STL header file processing)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (9/3/2006): I think that if we have config.guess, depend, install-sh, and dirincludes; then we don't need \"missing\"\n\n# missing\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (9/2/2006): These appear to only be required for development versions or ROSe (in CVS)\n\n# RV (9/12/2005): Removed 'mkinstalldirs', unnecessary with recent AutoTools versions.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (9/2/2006): I don't think these are required except in the development version of ROSE\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "config/rose_edg_required_macros_and_functions.h.cmake" : {
      "ObjectId" : "f7206f2f7fb6a2e49665acb5f702d1a3239ff5b9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* This file is not in use since the original .h.in version is being used by cmake,\n   which in turn calls the shell script create_system_headers to generate .h from .h.in.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* JJW (12/8/2008): Do not include these definitions for EDG 3.10 */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Must use C style comments so that \"--edg:old_c\" options will work! */\n/* DQ (7/13/2006): Undefine these before defining them to avoid warnings. */\n/* DQ (12/23/2006): Let EDG define this if possible, but we reset it for 64 bit systems\n   where either EDG does not get it correct or we don't setup EDG correctly!\n#undef __SIZE_TYPE__ \n*/",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "// $REPLACE_ME_WITH_MACRO_DEFINITIONS",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* DQ (7/11/2009): fix emacs coloring... with a '$' */",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Turn on use of restrict in EDG front-end using --edg:restrict */",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* for GNU g++ */",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* DQ (6/12/2005): Permit this to be optionally commented out because it makes it hard to\n    look at the AST merging graphs. The ROSE-IR graphs will now filter nodes associated\n    with declarations from this file (marked as front-end specific).\n*/",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* This macro can be defined using \"-DSKIP_ROSE_BUILTIN_DECLARATIONS\" to avoid ROSE\n   builtin functions required for compatability with the user selected backend compiler \n*/",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* PC (9/25/2006): Define __builtin_va_start to the EDG expected symbol\n   __builtin_stdarg_start */",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Outside strict ISO C mode (-ansi, -std=c89 or -std=c99), the functions _exit, alloca,\n    bcmp, bzero, dcgettext, dgettext, dremf, dreml, drem, exp10f, exp10l, exp10, ffsll,\n    ffsl, ffs, fprintf_unlocked, fputs_unlocked, gammaf, gammal, gamma, gettext, index,\n    isascii, j0f, j0l, j0, j1f, j1l, j1, jnf, jnl, jn, mempcpy, pow10f, pow10l, pow10,\n    printf_unlocked, rindex, scalbf, scalbl, scalb, signbit, signbitf, signbitl,\n    significandf, significandl, significand, sincosf, sincosl, sincos, stpcpy, strdup,\n    strfmon, toascii, y0f, y0l, y0, y1f, y1l, y1, ynf, ynl and yn may be handled as\n    built-in functions. All these functions have corresponding versions prefixed with\n    __builtin_, which may be used even in strict C89 mode.\n*/",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* extern void _exit ( int Status); */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* The ISO C99 functions _Exit, acoshf, acoshl, acosh, asinhf, asinhl, asinh, atanhf,\n    atanhl, atanh, cabsf, cabsl, cabs, cacosf, cacoshf, cacoshl, cacosh, cacosl, cacos,\n    cargf, cargl, carg, casinf, casinhf, casinhl, casinh, casinl, casin, catanf, catanhf,\n    catanhl, catanh, catanl, catan, cbrtf, cbrtl, cbrt, ccosf, ccoshf, ccoshl, ccosh,\n    ccosl, ccos, cexpf, cexpl, cexp, cimagf, cimagl, cimag, conjf, conjl, conj, copysignf,\n    copysignl, copysign, cpowf, cpowl, cpow, cprojf, cprojl, cproj, crealf, creall, creal,\n    csinf, csinhf, csinhl, csinh, csinl, csin, csqrtf, csqrtl, csqrt, ctanf, ctanhf,\n    ctanhl, ctanh, ctanl, ctan, erfcf, erfcl, erfc, erff, erfl, erf, exp2f, exp2l, exp2,\n    expm1f, expm1l, expm1, fdimf, fdiml, fdim, fmaf, fmal, fmaxf, fmaxl, fmax, fma, fminf,\n    fminl, fmin, hypotf, hypotl, hypot, ilogbf, ilogbl, ilogb, imaxabs, isblank, iswblank,\n    lgammaf, lgammal, lgamma, llabs, llrintf, llrintl, llrint, llroundf, llroundl,\n    llround, log1pf, log1pl, log1p, log2f, log2l, log2, logbf, logbl, logb, lrintf,\n    lrintl, lrint, lroundf, lroundl, lround, nearbyintf, nearbyintl, nearbyint,\n    nextafterf, nextafterl, nextafter, nexttowardf, nexttowardl, nexttoward, remainderf,\n    remainderl, remainder, remquof, remquol, remquo, rintf, rintl, rint, roundf, roundl,\n    round, scalblnf, scalblnl, scalbln, scalbnf, scalbnl, scalbn, snprintf, tgammaf,\n    tgammal, tgamma, truncf, truncl, trunc, vfscanf, vscanf, vsnprintf and vsscanf are\n    handled as built-in functions except in strict ISO C90 mode (-ansi or -std=c89). \n*/",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* extern void _Exit ( int Status); */",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* There are also built-in versions of the ISO C99 functions acosf, acosl, asinf, asinl,\n    atan2f, atan2l, atanf, atanl, ceilf, ceill, cosf, coshf, coshl, cosl, expf, expl,\n    fabsf, fabsl, floorf, floorl, fmodf, fmodl, frexpf, frexpl, ldexpf, ldexpl, log10f,\n    log10l, logf, logl, modfl, modf, powf, powl, sinf, sinhf, sinhl, sinl, sqrtf, sqrtl,\n    tanf, tanhf, tanhl and tanl that are recognized in any mode since ISO C90 reserves\n    these names for the purpose to which ISO C99 puts them. All these functions have\n    corresponding versions prefixed with __builtin_. \n*/",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* DQ (4/12/2005): Required to compile the gnu version 3.4.3 cmath header file. Defined\n//                 as functions instead of macros to avoid constant propagation issues.\n*/",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* DQ (5/15/2006): Suggested by Christian Biesinger (working with Markus Schordan) */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* The ISO C94 functions iswalnum, iswalpha, iswcntrl, iswdigit, iswgraph, iswlower,\n    iswprint, iswpunct, iswspace, iswupper, iswxdigit, towlower and towupper are handled\n    as built-in functions except in strict ISO C90 mode (-ansi or -std=c89). \n*/",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* The ISO C90 functions abort, abs, acos, asin, atan2, atan, calloc, ceil, cosh, cos,\n    exit, exp, fabs, floor, fmod, fprintf, fputs, frexp, fscanf, isalnum, isalpha,\n    iscntrl, isdigit, isgraph, islower, isprint, ispunct, isspace, isupper, isxdigit,\n    tolower, toupper, labs, ldexp, log10, log, malloc, memcmp, memcpy, memset, modf, pow,\n    printf, putchar, puts, scanf, sinh, sin, snprintf, sprintf, sqrt, sscanf, strcat,\n    strchr, strcmp, strcpy, strcspn, strlen, strncat, strncmp, strncpy, strpbrk, strrchr,\n    strspn, strstr, tanh, tan, vfprintf, vprintf and vsprintf are all recognized as\n    built-in functions unless -fno-builtin is specified (or -fno-builtin-function is\n    specified for an individual function). All of these functions have corresponding\n    versions prefixed with __builtin_.\n*/",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* DQ (7/29/2005): declarations for builtin functions used by GNU, but \n// already defined in EDG (it seems that we can provide declarations for \n// them explicitly).  These should be marked as compiler generated in \n// the AST.\n*/",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* GCC provides built-in versions of the ISO C99 floating point comparison macros that\n    avoid raising exceptions for unordered operands. They have the same names as the\n    standard macros ( isgreater, isgreaterequal, isless, islessequal, islessgreater, and\n    isunordered) , with __builtin_ prefixed. We intend for a library implementor to be\n    able to simply #define each standard macro to its built-in equivalent.\n\nDQ (6/19/2007): These might required math.h to be included.\n*/",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Return nonzero value if X is greater than or equal to Y.  */",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Return nonzero value if X is less than Y.  */",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Return nonzero value if X is less than or equal to Y.  */",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Return nonzero value if either X is less than Y or Y is less than X.  */",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Return nonzero value if arguments are unordered.  */",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* int __builtin_isgreater(x,y) isgreater(x,y);\nint __builtin_isgreaterequal(x,y) isgreaterequal(x,y);\nint __builtin_isless(x,y) isless(x,y);\nint __builtin_islessequal(x,y) islessequal(x,y);\nint __builtin_islessgreater(x,y) islessgreater(x,y);\nint __builtin_isunordered(x,y) isunordered(x,y);\n*/",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* GNU also supports a few other types of builtin functions: */",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Additional builtin functions that take or return types as arguments\n(described at http://gcc.gnu.org/onlinedocs/gcc-4.0.3/gcc/Other-Builtins.html).\nThere are more difficult to reproduce except as macros that define them away:\n\nint __builtin_types_compatible_p (type1, type2);\ntype __builtin_choose_expr (const_exp, exp1, exp2);\nint __builtin_constant_p (exp);\n\nDQ (6/19/2007): The definitions below are not correct, but should be portable, \nthey will only be a problem is the resulting code is unparsed directly from \nthe AST.  The detection of the use of these macros in the near future will help \nmake this safer.\n*/",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* This is not a correct test, but it is a weak form of equivalence that is portable */",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* This is not correct, but it should be portable */",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* This is not correct, but it should be portable, make it always return false for now */",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Additional builtin functions:\n(also from http://gcc.gnu.org/onlinedocs/gcc-4.0.3/gcc/Other-Builtins.html):\n */",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* DQ (6/19/2007): Commented out because in interferred with existing \n                   builtin function defined as int __builtin_ffs (int __builtin__x); in EDG.\nint __builtin_ffs (unsigned int __builtin__x); */",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* DQ (6/19/2007): I think these defines can be eliminated now in favor of the \n                   builtin function prototypes.\n   DQ (8/20/2006): Let the builtin values be equal to the largest possible values.\n   DQ (5/20/2006): These should be defined to be appropriate values or defined as \n   function prototypes as others are below.  These can't be functions because they \n   are used to initialize static const variables.\n\n#define __builtin_huge_valf() __FLT_MAX__\n#define __builtin_nanf(string) 0\n#define __builtin_huge_val() __DBL_MAX__\n#define __builtin_nan(string) 0\n#define __builtin_huge_vall() __LDBL_MAX__\n#define __builtin_nanl(string) 0\n*/",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* DQ and Liao (7/11/2009) Added macros to define away new GNU C++ extension (not required for newer EDG 4.0 use */\n// Only for GCC 4.3.0 and above",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "//#define __is_base_of (base_type, derived_type)",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "//void* __builtin_memmove(void * target, const void * source, unsigned long long nBytes);",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "// changed it in edg 3.3/src/sys_predef.c instead since va_list is not declared here\n//int __builtin_vsnprintf(char *str, unsigned long long size, const char *format, va_list ap);",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/*\nTarget specific builtin functions are available at:\n  http://gcc.gnu.org/onlinedocs/gcc-4.0.3/gcc/Target-Builtins.html\n    * Alpha Built-in Functions\n    * ARM Built-in Functions\n    * Blackfin Built-in Functions\n    * FR-V Built-in Functions\n    * X86 Built-in Functions\n    * MIPS Paired-Single Support\n    * PowerPC AltiVec Built-in Functions\n    * SPARC VIS Built-in Functions \n*/",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/*\nRequired builtin function as supported by Intel (gnu builtin functions supported by Intel\nC++ compiler).  I am not sure if we should include anything special specific to this, it\nappears to be a subset of the more complete handling above.\n\n__builtin_abs\n__builtin_labs\n__builtin_cos\n__builtin_cosf\n__builtin_fabs\n__builtin_fabsf\n__builtin_memcmp\n__builtin_memcpy\n__builtin_sin\n__builtin_sinf\n__builtin_sqrt\n__builtin_sqrtf\n__builtin_strcmp\n__builtin_strlen\n__builtin_strncmp\n__builtin_abort\n__builtin_prefetch\n__builtin_constant_p\n__builtin_printf\n__builtin_fprintf\n__builtin_fscanf\n__builtin_scanf\n__builtin_fputs\n__builtin_memset\n__builtin_strcat\n__builtin_strcpy\n__builtin_strncpy\n__builtin_exit\n__builtin_strchr\n__builtin_strspn\n__builtin_strcspn\n__builtin_strstr\n__builtin_strpbrk\n__builtin_strrchr\n__builtin_strncat\n__builtin_alloca\n__builtin_ffs\n__builtin_index\n__builtin_rindex\n__builtin_bcmp\n__builtin_bzero\n__builtin_sinl\n__builtin_cosl\n__builtin_sqrtl\n__builtin_fabsl\n__builtin_frame_address (IA-32 only)\n__builtin_return_address (IA-32 only)\n*/",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* DQ (6/19/2007): For handling of offsetof macro we can't build a function \nprototype so EDG provides a mechanism to support this (from the basics.h \nheader file). However, we can use the one defined in the GNU header files is \nwe only handle the __offsetof__ macro (so define it way).  Then the builtin\nfunction is just defined as being the offsetof macro.\n*/",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/*\n// DQ (2/9/2008): Don't define __builtin_offsetof in terms of offsetof since this\n// causes a recursively defined marco on Fedora Core relase 4, though it works \n// fine on Red Hat Enterprise release 9. New definition taken from common\n// implementation of offset, but modified to address specific case of where C++\n// defines a operator&() which can be a problem for the more common definition.\n// This definition is used to defin the __builtin_offsetof\n// #define __builtin_offsetof(t,memb) offsetof(t,memb)\n// #define __builtin_offsetof(t,memb) ((size_t)&(((t *)0)->memb))\n*/",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* The cast to \"char &\" below avoids problems with user-defined \"operator &\", which can appear in a POD type. */",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* matching else for SKIP_ROSE_BUILTIN_DECLARATIONS */",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* When compiling using -DSKIP_ROSE_BUILTIN_DECLARATIONS we need to have a variable\n   defined in this faile so that we can locate the file in the AST and obtain the\n   absolute path of this front-end specific header file.  This allows us to mark\n   all IR nodes in the AST as being front-end specific if they originate from this\n   header file. The following variable guarentees that a variable declaration from\n   this file will exist when -DSKIP_ROSE_BUILTIN_DECLARATIONS is used.  The \n   -DSKIP_ROSE_BUILTIN_DECLARATIONS option is typically used to reduce the size of\n   the AST and permit visualization of the whole AST using DOT (which can't layout\n   a graph containing too many IR nodes).\n */",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* matching endif for SKIP_ROSE_BUILTIN_DECLARATIONS */",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* DQ (10/30/2005): Added to allow compilation of g++ \ncomplex header, but this is likely the wrong thing to do.\nThis allows us to compile C++ code that uses the complex header file\nbut it turns \"__complex__ double x\" into just \"double x\". All this\nis because the \"__complex__\" keyword is not supported in EDG.  Not\ntoo much of a problem except that it means that the member function:\n    complex(_ComplexT __z) : _M_value(__z) { }\nneeds to be specified using the \"explicit\" keyword.   Note that\nnone of this is required in g++ or icc, just in our version of \nROSE using the g++ header files (because __complex__ is not\ndefined in EDG and the only thing to map it to is \"\", I think).\n\nThe following solution does NOT work.  Replacing\n    typedef __complex__ double _ComplexT;\nwith\n    typedef complex<double> _ComplexT;\nin the complex header file.\n\nThe following solution does work.  Replacing\n    complex(_ComplexT __z) : _M_value(__z) { }\nwith\n    explicit complex(_ComplexT __z) : _M_value(__z) { }\nin the complex header file.  It is not a great solution\nand it would have to be done in the configuration of ROSE\nto the complex header file.  It would also fool any analysis\nof the complex class into thinking that the internal type \nwas just float or double for complex<float> or complex<double>.\n */",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* DQ (8/22/2006):\n   EDG does not appear to support __complex__ as a keyword.\n   Thus we have to define it to white space to permit codes using \n   __complex__ to be compiled.  This appears to work fine, but\n   we are likely to confuse an analysis that depends upon recognizing \n   complex types.\n\n   Note that _Complex is a C99 type, also fequently recognised by C \n   compilers, so for non C++ codes we can translate __complex__ to \n   _Complex\n*/",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* #ifdef __cplusplus */\n/* #if ROSE_CPP_MODE */",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* C++ case is different because the header files will define a complex type (see hdrs1/complex) */",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* DQ (9/26/2006): Plum Hall uses this for C++ code, but I think that we have define it away */",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* This works for both C and C99 modes */",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* gcc uses the C99 name _Complex_I in <complex.h>, but our EDG doesn't handle\n   the GCC extension that they define it to. */",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Disable inclusion of complex.h on Linux */",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Disable inclusion of complex.h on Mac OS X */",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Defined this to avoid warnings (e.g. test2001_11.C) from 3.4.6 systems header files. */",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* DQ (6/19/2007): I think we can comment this out now, since it is better defined above!\n   DQ (1/31/2007): GNU modifier required to handle code using the offsetof macro in C++ g++ 3.4 and greater */",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* #define __offsetof__ */",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* DQ (7/11/2009) Added macros to define away new GNU C++ extension (not required for newer EDG 4.0 use */",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* \n   DQ (7/15/2009): Added support for MS Windows Code \n   It might be that this file in included too late when using WINE.\n */",
        "Line" : 674,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 61
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "f68f0994b4cf29127c7856f8680d4b9cc0e5c836",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n## DQ (7/24/2008): Only the developer version needs the test directory specific to Doxygen support\n\n## JJW (8/3/2008): This line will be removed in binary distributions\n\n#DEVELOPER_DISTRIBUTION_DIRECTORY = testDoxygen\n\n#\n\n## Later we will add ROSETTA documentation here ...\n\n## SUBDIRS = Rose Rosetta testDoxygen\n\n#\n\n## DQ (9/11/2006): Removed Rosetta directory, an internal tool not documented \n\n## within ROSE for use externally.\n\n## SUBDIRS = Rose Rosetta testDoxygen\n\n## SUBDIRS = Rose testDoxygen\n\n#SUBDIRS = Rose $(DEVELOPER_DISTRIBUTION_DIRECTORY)\n\n#\n\n## New rule to simplify generation of documentation (we want to avoid using the\n\n## automake generated \"docs\" rule because the generation of documentation is\n\n## dependent upon separate tools which the user might not have available\n\n## (true for bothe the LaTeX and html documentation).\n\n## documentation:\n\n#docs:\n\n#\t@echo \"    Generate all possible documentation cd Rose; make documentation;\"\n\n#\t@cd Rose; $(MAKE) docs;\n\n#\n\n#EXTRA_DIST =\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "docs/Makefile.am" : {
      "ObjectId" : "29f9f33aaaa4b385babdd8eca18f36864d6f63f3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (7/24/2008): Only the developer version needs the test directory specific to Doxygen support\n\n# JJW (8/3/2008): This line will be removed in binary distributions\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Later we will add ROSETTA documentation here ...\n\n# SUBDIRS = Rose Rosetta testDoxygen\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/11/2006): Removed Rosetta directory, an internal tool not documented \n\n# within ROSE for use externally.\n\n# SUBDIRS = Rose Rosetta testDoxygen\n\n# SUBDIRS = Rose testDoxygen\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# New rule to simplify generation of documentation (we want to avoid using the\n\n# automake generated \"docs\" rule because the generation of documentation is\n\n# dependent upon separate tools which the user might not have available\n\n# (true for bothe the LaTeX and html documentation).\n\n# documentation:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "docs/Rose/CMakeLists.txt" : {
      "ObjectId" : "4e1187b6acc3ccfa4cf09aea0e0d25a1f75126ba",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/Rose/Makefile.am" : {
      "ObjectId" : "1180c78850efba92af6456b49446dfa4e130c640",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (2/6/2010): I don't understand why this is required in every Makefile.am through out ROSE.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When debugging latex documentation skip using the --interaction=batchmode option\n\n# PDFLATEX = env TEXINPUTS=$(srcdir):$(top_srcdir)/tests:.: pdflatex --interaction=batchmode\n\n# Liao 12/18/2009, use normal mode to ease finding bugs from hudson logs\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Later we will add ROSETTA documentation here ...\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Macros and code fragements that the Sage source code depends upon\n\n# (this is where most of the documentation goes)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use Cxx_Grammar.h as a representative for all the generated source code\n\n# that Doxygen will use and make sure that it has been generated before\n\n# we try to generate the doxygen documentation from it.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name the Sage tag file used by Doxygen\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Representative files from generated Doxygen documentation\n\n# (This must be a single file to avoid spawning more than one parallel job when using parallel make)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# What the generation of doxygen output for Sage depends upon\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# What the generation of doxygen output for Rose depends upon\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the generated sage source code is older than the code used to\n\n# generate the sage source code then regenerate the sage source code\n\n# by calling make in the ROSE/ROSETTA directory.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The tag file is generated by Doxygen using the sage-docs rule\n\n# $(SAGE_DOXYGEN_TAG_FILE): sage-docs\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (1/27/2014): Add simple makefile rule to run doxygen to generate ROSE API docs.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# A more complex dependence is defined that requires the sage.tag file\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (3/4/2014): This is a redundant makefile rule (mistake).\n\n# DQ (7/11/2009): Added rule to force generation of Doxygen documentation.\n\n#doxygen_docs: $(RoseDocsDependencies) rose.cfg\n\n#\tcd $(top_builddir)/src/frontend/SageIII; $(MAKE) sage.docs\n\n#\tdoxygen rose.cfg || exit 1\n\n#\techo \"Doxygen generated documentation terminated normally.\"\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We can't specify the source directory to latex so we have to build\n\n# links to the files in the source directory.  Other ideas?\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (3/4/2009): Removed requirements.tex since it is not longer used.\n\n# requirements.tex\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\t$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='CVS\\|\\.svn\\|autom4te.cache\\|developersScratchSpace\\|testDoxygen\\|ckpt\\|compass' --basename -o=roseDirectoryMap.ps;\n\n#\t$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='\\.git\\|acmacros\\|autom4te.cache\\|docs\\|libltdl\\|scripts' --basename -o=roseDirectoryMap.ps;\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\tconvert -geometry 5000 roseDirectoryMap.ps roseDirectoryMap.pdf\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='CVS\\|\\.svn\\|autom4te.cache\\|developersScratchSpace\\|testDoxygen\\|ckpt\\|compass' --basename -o=roseDirectoryMap.ps;\n\n#\t$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='\\.git\\|acmacros\\|autom4te.cache\\|docs\\|libltdl\\|scripts' --basename -o=roseDirectoryMap.ps;\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\tconvert -geometry 5000 roseDirectoryMap.ps roseDirectoryMap.pdf\n\n#\tw=`grep '^%%BoundingBox: [0-9]' roseDirectoryMap.ps | awk '{print $$4*10;}'` ; \\\n#\th=`grep '^%%BoundingBox: [0-9]' roseDirectoryMap.ps | awk '{print $$5*10;}'` ; \\\n#\tps2pdf -g$${w}x$${h} roseDirectoryMap.ps roseDirectoryMap.pdf\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\tGenerate output from the --help commandline option for use in documentation\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\tGenerate sample output for inclusion into documentation\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Generate an example of the output from running a test program\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Build smaller versions of this file (so it fits onto two separate pages)\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# website contents\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Liao, 6/11/2008. Added a new directory (Projects) for various ROSE projects \n\n# compass_build_tooldir=$(top_builddir)/projects/compass/tools\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Liao, 8/6/2009. tutorial for autotuning\t\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Liao, 8/11/2009. QROSE Manual\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (9/15/2009): This appears to be a problem for Mac OSX\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\t$(DOXYGEN) roseQtWidgets.doxygen\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Liao, 2014/1/10, comment out $(HASKELLPORT_APIDOCS) to migrate to EDG 4.7 based rose\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\tmkdir -p ROSE_WebPages/ROSE_HaskellAPI\n\n#\tcp -fr $(HASKELLPORT_APIDOCS)/* ROSE_WebPages/ROSE_HaskellAPI/\n\n#\tcp -r $(top_srcdir)/ROSE_ResearchPapers ROSE_WebPages/ROSE_ResearchPapers\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# add a copy without version number as a permanent URL for external reference by \n\n# https://outreach.scidac.gov/docman/index.php?group_id=24&selected_doc_group_id=29&language_id=1\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Upload web pages to the LBL server \n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#       Liao 5/6/2010 migrate to the new web server\n\n#\tLiao, 7/13/2009, must ensure the file permissions here\n\n#\tLiao, 12/8/2010, use dedicated data transferring node dtn01 \n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\tcd ROSE_WebPages; chmod -R a+rx *; rsync -avz * liaoch@portal-auth.nersc.gov:/project/projectdirs/rosecompiler/www.rosecompiler.org\n\n#\tcd ROSE_WebPages; chmod -R a+rx *; rsync -avz * liaoch@web-dev.nersc.gov:/www/host/rosecompiler\n\n#\tscp $(PACKAGE_NAME)-$(PACKAGE_VERSION)-HTML-Docs.tar.gz quinlan1@cmg-1.llnl.gov:/green_dev/www/casc/rose\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Liao 12/7/2009, we mirror the content of the internal \n\n# /nfs/casc/overture/ROSE/git/ROSE_EDG_Binaries\n\n# to a public http://www.rosecompiler.org/edg_binaries/\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# *.tar.gz within rsync is essential to only synchronize .tar.gz files.\n\n# scripts/hudson/checkEDGBinaryFiles.sh untars all .tar.gz and grep for EDG files, it returns an error code \n\n# if any EDG source files are found\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Simpler rule to build pdf documentation (requires GraphViz's dot program)\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Alternative documentation rule to output error message and exit with error.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# simpler target for building manual only\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# DQ (1/4/2010): Make these separate steps (each takes a few seconds and this simplifies the debugging).\n\n# pdf-local: $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf ROSE_InstallationInstructions.pdf ROSE_DeveloperInstructions.pdf ROSE_DemoGuide.pdf \n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# DQ (9/9/2009): Added generated list of NMI compile farm platform prerequisites for ROSE documentation (ROSE_InstallationInstructions.pdf)\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# DQ (9/29/2009): Added generated list of NMI compile farm platform configure options for ROSE documentation (ROSE_InstallationInstructions.pdf)\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# DQ (1/18/2009): Added support for demo guide to support running and \n\n# presenting information from demos of different parts of ROSE.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Liao, 10/21/2009, run external tests before making manual\n\n# I do this to avoid duplicated test/translator file in both tests and doc directories\n\n# for ROSE manual: it needs generated files from OpenMP and UPC test directories\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# DQ (7/25/2004): Need to include manual.tex and reference.tex since they are build from \n\n# manual.tex.in and reference.tex.in\n\n#\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#$(PDFLATEX) manual.tex) || exit 1 &&\n\n#$(PDFLATEX) manual.tex &&\n\n#docs: html-docs latex-docs\n\n# docs: latex-docs html-docs \n\n# DQ (1/4/2010): To simplify the debugging, make these separate steps.\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# DQ (3/4/2009): Removed requirements.tex since it is not longer used.\n\n# requirements.tex\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#\tDQ (9/15/2009): wrong syntax for chmod, at least on OSX.\n\n#\ttest ! -d ROSE_WebPages || (test -d ROSE_WebPages && ( chmod +w -R ROSE_WebPages ))\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 50
    },
    "docs/Rose/Tutorial/CMakeLists.txt" : {
      "ObjectId" : "9fd4aa54267e8477f8155619463fcc180a5628b1",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## When debugging latex documentation skip using the --interaction=batchmode option\n\n##PDFLATEX = env TEXINPUTS=$(srcdir):$(srcdir)/..:$(top_srcdir)/tests:.: pdflatex --interaction=batchmode\n\n#PDFLATEX = env TEXINPUTS=$(srcdir):$(srcdir)/..:$(top_srcdir)/tests:.: pdflatex\n\n#\n\n## We can't specify the source directory to latex so we have to build\n\n## links to the files in the source directory.  Other ideas?\n\n## I have been unable to have the links be built unless I build them all the file.\n\n#latexFiles = \\\n\n#   introduction.tex ASTGraphGenerator.tex AST_PDF_Generator.tex \\\n\n#   identityTranslator.tex queryLibraryExample.tex abstractHandle.tex \\\n\n#   traversal.tex loopRecognition.tex typeInfoFromFunctionParameters.tex resolveOverloadedFunction.tex \\\n\n#   templateParameter.tex instrumentationExample.tex addVariableDeclaration.tex \\\n\n#   addAssignmentStmt.tex addExpression.tex\\\n\n#   addFunctionDeclaration.tex buildCFG.tex parallelChecker.tex defuseAnalysis.tex \\\n\n#   binaryAnalysis.tex buildCallGraph.tex classHierarchyGraph.tex loopOptimization.tex inliner.tex outliner.tex \\\n\n#   parser-docs.tex codeCoverage.tex globalVariableHandling.tex scopeInformation.tex sideeffect-docs.tex \\\n\n#   tauInstrumentation.tex templateSupport.tex dataBaseSupport.tex recognitionOfAbstractions.tex \\\n\n#   debuggingSupport.tex commandlineProcessing.tex customGraphs.tex tutorialMakefile.tex wrapup.tex \\\n\n#   appendix.tex astFileIO.tex uniqueNames.tex wholeGraphAST.tex addingComments.tex \\\n\n#   partialRedundancyElimination.tex codeGenerationFormatControl.tex copyHelp.tex \\\n\n#   roseHPCT.tex sharedMemoryTraversals.tex distributedMemoryTraversals.tex bugSeeding.tex \\\n\n#   modifiers.tex howToContribute.tex virtualCFG.tex binaryConstruction.tex reductionRecognition.tex \\\n\n#   haskell.tex\n\n#\n\n## This is an evolving list, but these are a few of the required files\n\n#generatedCodeExamples = \\\n\n#   $(top_builddir)/tutorial/inputCode_ASTGraphGenerator.ps \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_AddFunctionDeclaration.C \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_AddFunctionDeclaration2.C \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_AddFunctionDeclaration3.C \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_IdentityTranslator.C \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_AddVariableDeclaration.C \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_AddVariableDeclaration2.C \\\n\n#   $(top_builddir)/tutorial/rose_transformation_inputCode_InstrumentationTranslator1.C \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_ExampleDebugging.C \\\n\n#   $(top_builddir)/tutorial/codeCoverage.out \\\n\n#   $(top_builddir)/tutorial/vcfg.pdf \\\n\n#   $(top_builddir)/tutorial/rose_inputCode_inlineTransformations.C \\\n\n#   $(top_builddir)/tutorial/roseHPCT/profiled.out\n\n#\n\n#$(generatedCodeExamples):\n\n#\tcd $(top_builddir)/tutorial; $(MAKE) docs\n\n#\n\n#latex-docs: pdf\n\n#\n\n#TUTORIAL_NAME = $(PACKAGE_NAME)-$(PACKAGE_VERSION)-Tutorial.pdf\n\n#\n\n#pdf-local: $(TUTORIAL_NAME)\n\n#\n\n#make-web-pages: $(TUTORIAL_NAME)\n\n#\tmkdir -p ../ROSE_WebPages/ROSE_Tutorial\n\n#\tcp -fp $(TUTORIAL_NAME) ../ROSE_WebPages/ROSE_Tutorial/\n\n## a copy without version number as a permanent URL used for external references, Liao\t\n\n#\tcp -fp $(TUTORIAL_NAME) ../ROSE_WebPages/ROSE_Tutorial/ROSE-Tutorial.pdf\n\n#\n\n#$(TUTORIAL_NAME): tutorial.tex gettingStarted.tex $(latexFiles)\n\n#\tcd $(top_builddir)/tutorial; $(MAKE) docs\n\n#\t$(PDFLATEX) tutorial.tex && \\\n\n#\t$(PDFLATEX) tutorial.tex && \\\n\n#\t$(PDFLATEX) tutorial.tex && \\\n\n#\tmv tutorial.pdf $(TUTORIAL_NAME)\n\n#\n\n#docs: pdf\n\n#\n\n#EXTRA_DIST = $(latexFiles)\n\n#\n\n#CLEANFILES = *.out *.log *.aux *.lof *.toc *.dvi *.ps *.pdf *.gz\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "docs/Rose/Tutorial/Makefile.am" : {
      "ObjectId" : "bc78ce8c90f62477dd3831043df8f9cdae44e4d9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# When debugging latex documentation skip using the --interaction=batchmode option\n\n# PDFLATEX = env TEXINPUTS=$(srcdir):$(srcdir)/..:$(top_srcdir)/tests:.: pdflatex --interaction=batchmode\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We can't specify the source directory to latex so we have to build\n\n# links to the files in the source directory.  Other ideas?\n\n# I have been unable to have the links be built unless I build them all the file.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is an evolving list, but these are a few of the required files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# a copy without version number as a permanent URL used for external references, Liao\t\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Liao, 10/21/2009, run external tests before making tutorial\n\n# I do this to avoid duplicated test/translator files in both tests and doc directories\n\n#for ROSE turtorial: it needs sageInterface tests in addition to the examples from tutorial/\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "docs/Rosetta/CMakeLists.txt" : {
      "ObjectId" : "d559f3a812fa80375f561738984cde1ce590d16d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########################################################################################\n\n## This makefile is unfinished and does not yet generate Doxygen documentation for Rosetta.\n\n###########################################################################################\n\n#\n\n## Regenerate the doxygen output if the dependent source code is newer\n\n#$(RosettaDoxygenDocumentation): $(RosettaDocsDependencies) $(ROSETTA_MAINPAGE_DOCUMENTATION)\n\n#\t@echo \"Generate documentation for Rosetta (used within ROSE to generate Sage III) (using Doxygen)\"\n\n#\tdoxygen rosetta.cfg\n\n#\n\n## Makefile rules called by user (Makefile's public interface)\n\n#rosetta-docs: $(RosettaDoxygenDocumentation)\n\n#\n\n## Makefile rule called by automake (using dist or install rules)\n\n#docs:\n\n#\t@echo \"Skipping the creation of documentation within the docs rule (for now).\"\n\n#\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "docs/Rosetta/Makefile.am" : {
      "ObjectId" : "07bdb69658ad32fddcdeda25be489b92c97cd3d8",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##########################################################################################\n\n# This makefile is unfinished and does not yet generate Doxygen documentation for Rosetta.\n\n##########################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Regenerate the doxygen output if the dependent source code is newer\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Makefile rules called by user (Makefile's public interface)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Makefile rule called by automake (using dist or install rules)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "docs/testDoxygen/CMakeLists.txt" : {
      "ObjectId" : "128f5b928a8e3be51abbbd084431c8cbf315a367",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/testDoxygen/Makefile.am" : {
      "ObjectId" : "7037286cdcd40d02fa9e5e494c2489e994b2b5f1",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This directory is for experimentation with ideas specific to\n\n# how we can use Doxygen to better document the ROSE project.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tCopy the logo file to the this directory\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tCopy to the current directory where doxygen will be run so that doxygen \n\n#\tcan copy it to the where it will put the web pages (./ROSE_HTML_Reference)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (1/25/2006): Renamed clean rule since we don't want \"make clean\" \n\n# at the top level directory to always remove this documentation.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This allows us to test the development of the \n\n# documentation specific to the publications page.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This copies the experimental version of the documentation to the\n\n# location where it will permanently reside in the source tree.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (5/8/2005): Added custon headers and footers for HTML generated documentation\n\n# See use of HTML_HEADER and HTML_FOOTER in test.cfg.in file\n\n# DIST_EXTRA = htmlHeaderFile.html htmlFooterFile.html test.cfg.in\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "exampleTranslators/AstCopyReplTester/CMakeLists.txt" : {
      "ObjectId" : "9e354f0b6155c1012f99fc7509f895bfbc7464fb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/AstCopyReplTester/Makefile.am" : {
      "ObjectId" : "c3220bc7cbb429d03c957c0d1777acba1202a164",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/CMakeLists.txt" : {
      "ObjectId" : "8574dfbd9997901203c8d6f1a8fa0a5cbd2e5cfa",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/DOTGenerator/CMakeLists.txt" : {
      "ObjectId" : "e709e49efb6dd47e940ab44622f3226d9e12af75",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/DOTGenerator/Makefile.am" : {
      "ObjectId" : "44688fefa96aa65e99d9138b5dde291c97858db2",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# changes to the templates in ../src/midend/astRewriteMechanism/rewriteTreeTraversal.C\n\n# should force several files using those templates to be recompiled.\n\n# Express this explicitly:\n\n# dotGenerator.o: $(top_builddir)/src/midend/astRewriteMechanism/rewriteTreeTraversal.o\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (1/4/2008): Required to cleanup for make distcheck\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/Makefile.am" : {
      "ObjectId" : "8f58039db075f580ba4dfc2e8b9f08846c7af350",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/11/2008): We can add these later but these are older QRose examples.\n\n# Current examples are in developersScratchSpace/Dan/QRose_tests.\n\n#    graphicalUserInterfaceExamples\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "exampleTranslators/PDFGenerator/CMakeLists.txt" : {
      "ObjectId" : "81b6f381c03b5e06c72fec0c98e32381e6438840",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/PDFGenerator/Makefile.am" : {
      "ObjectId" : "50c970b506604590d9638b1cc7a56f7468d01e39",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/defaultTranslator/CMakeLists.txt" : {
      "ObjectId" : "c55f957611f399ad652ed78343f6f2d255645057",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/defaultTranslator/Makefile.am" : {
      "ObjectId" : "8d333848a9114d12dbd565ae46c99a7df61ea046",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/documentedExamples/AstRewriteExamples/CMakeLists.txt" : {
      "ObjectId" : "441bda5f327dc39ae48d9c0da9e1928a30737618",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DQ (3/21/2009): fails to compile under Cygwin.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "exampleTranslators/documentedExamples/AstRewriteExamples/Makefile.am" : {
      "ObjectId" : "dc252bd136a7e5f622e94da034da1bdc7d60fd9b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/21/2009): fails to compile under Cygwin.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ this file is used in the ROSE User Manual so we need it here\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "exampleTranslators/documentedExamples/CMakeLists.txt" : {
      "ObjectId" : "dcb91075abb3b2e6a216cad1a461e505cf792c63",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Makefile is commented out in this subdirectory\n\n#add_subdirectory(dataBaseExamples)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "exampleTranslators/documentedExamples/Makefile.am" : {
      "ObjectId" : "1d3412f4afc20612296422e52d59e0ba4e06bd43",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (1/2/2007): Most of these examples have been moved to the ROSE/tutorial directory.\n\n# And additional problem is that the absolute paths for the files exceed 100 characters\n\n# which is a posix limit not enforced by GNU tar 1.14 (2004) and so it is a hard limit \n\n# for us.\n\n# astProcessingExamples\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "exampleTranslators/documentedExamples/astProcessingExamples/CMakeLists.txt" : {
      "ObjectId" : "5c9d15afee3823154198b88fb1cd221758948cdb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#SUBDIRS = \\\n\n#     printVars printLoopInfo\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "exampleTranslators/documentedExamples/astProcessingExamples/Makefile.am" : {
      "ObjectId" : "7dcdc10a90b44bccee9050f496f35b89d8582f54",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/documentedExamples/astProcessingExamples/printLoopInfo/CMakeLists.txt" : {
      "ObjectId" : "51fbf28152e294ec5daf18cf31a97ebd9ab69c44",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#bin_PROGRAMS = printLoopInfo\n\n#\n\n#printLoopInfo_SOURCES = printLoopInfo.C LoopNestingInfoProcessing.C\n\n#printLoopInfo_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n#\n\n#\n\n## testing (generate output, dot file, pdf file)\n\n#\n\n#TESTCODES = testInput1.C\n\n#\n\n#include_HEADERS = LoopNestingInfoProcessing.h\n\n#EXTRA_DIST = $(TESTCODES)\n\n#\n\n#CLEANFILES = testInput1.C.dot testInput1.C.pdf\n\n#\n\n#TEST_Objects = ${TESTCODES:.C=.o}\n\n#\n\n## DQ (10/23/2004): This test code appears to generate an infinit loop when used with the printLoopInfo code!\n\n## I'm not clear on how to fix this so for now let's just skip the tests and hope that the documentation does\n\n## not require it.  Need to let Markus know, since this is likely his code, I think.\n\n## It generates the following error: \"PDFlib memory error: Couldn't reallocate memory in pdf_check_stream!\"\n\n#check-local:\n\n#\trm -f testInput1.o\n\n#\t@echo \"SKIPPING TEST CODES RUN BY \\\"make check\\\" rule in exampleTranslators/documentedExamples/astProcessingExamples/printLoopInfo directory ...\"\n\n##\t$(MAKE) $(TEST_Objects)\n\n#\n\n## This rule generates a dependency that forces the \"make check\" \n\n## test to always compile the test code\n\n#FORCE_TEST_CODES_TO_RUN:\n\n#\n\n#$(TEST_Objects): $(TESTCODES) FORCE_TEST_CODES_TO_RUN printLoopInfo\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\t./printLoopInfo -I$(srcdir) $(ROSE_FLAGS) -DHAVE_CONFIG_H $(INCLUDES) -c $(srcdir)/$(@:.o=.C)\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/documentedExamples/astProcessingExamples/printLoopInfo/Makefile.am" : {
      "ObjectId" : "df380753cb90fd925ee6f5ec9d52b125998cec81",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# testing (generate output, dot file, pdf file)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (10/23/2004): This test code appears to generate an infinit loop when used with the printLoopInfo code!\n\n# I'm not clear on how to fix this so for now let's just skip the tests and hope that the documentation does\n\n# not require it.  Need to let Markus know, since this is likely his code, I think.\n\n# It generates the following error: \"PDFlib memory error: Couldn't reallocate memory in pdf_check_stream!\"\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t$(MAKE) $(TEST_Objects)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/documentedExamples/astProcessingExamples/printVars/CMakeLists.txt" : {
      "ObjectId" : "68bcf83166f14fc3d3e32465af8bbd7d465d18df",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#bin_PROGRAMS = printVars\n\n#\n\n#printVars_SOURCES = printVars.C MyTraversal.C\n\n#printVars_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n#\n\n#\n\n## testing (generate output, dot file, pdf file)\n\n#\n\n#TESTCODES = testInput1.C\n\n#\n\n#include_HEADERS = MyTraversal.h\n\n#EXTRA_DIST = $(TESTCODES)\n\n#\n\n#CLEANFILES = testInput1.C.dot\n\n#\n\n#TEST_Objects = ${TESTCODES:.C=.o}\n\n#\n\n#check-local:\n\n#\trm -f testInput1.o\n\n#\t$(MAKE) $(TEST_Objects)\n\n#\n\n## This rule generates a dependency that forces the \"make check\" \n\n## test to always compile the test code\n\n#FORCE_TEST_CODES_TO_RUN:\n\n#\n\n#$(TEST_Objects): $(TESTCODES) FORCE_TEST_CODES_TO_RUN printVars\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\t./printVars -I$(srcdir) $(ROSE_FLAGS) -DHAVE_CONFIG_H $(INCLUDES) -c $(srcdir)/$(@:.o=.C)\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/documentedExamples/astProcessingExamples/printVars/Makefile.am" : {
      "ObjectId" : "3f2ff14163ddae4616663663297fb0240726395f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# testing (generate output, dot file, pdf file)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "exampleTranslators/documentedExamples/dataBaseExamples/CMakeLists.txt" : {
      "ObjectId" : "3798a326ae32aa8695f0f92025de3dd1b0fb0884",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# bin_PROGRAMS = customtable_example \\\n\n# databasegraph_example \\\n\n# rosedb_example \\\n\n# simplecallgraph_example\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# objectFile_DEPENDENCIES = \\\n\n#    $(top_builddir)/src/librose.a \\\n\n#    $(top_builddir)/EDG/src/libedg.a\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# customtable_example_SOURCES = customtable_example.C\n\n# customtable_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# databasegraph_example_SOURCES = databasegraph_example.C\n\n# databasegraph_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rosedb_example_SOURCES = rosedb_example.C\n\n# rosedb_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# simplecallgraph_example_SOURCES = simplecallgraph_example.C\n\n# simplecallgraph_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## linker needs to know about STL\n\n## By adding the -ptr. on the link line we should be able to avoid \n\n## specifying the Templates.DB/*.o file explicitly on the link line\n\n## LDFLAGS = @STL_INCLUDES@\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the purify linker is enabled, AUX_LINKER will be set by configure.\n\n# These are now set in the ROSE SUPPORT PURIFY configure macro\n\n# CCLD  = $(AUX_LINKER) $(CC)\n\n# CXXLD = $(AUX_LINKER) $(CXX)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "exampleTranslators/documentedExamples/dataBaseExamples/Makefile.am" : {
      "ObjectId" : "2338293696803b30e3a1a439fc9adb426421ed5b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# bin_PROGRAMS = customtable_example \\\n# databasegraph_example \\\n# rosedb_example \\\n# simplecallgraph_example\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# objectFile_DEPENDENCIES = \\\n#    $(top_builddir)/src/librose.a \\\n#    $(top_builddir)/EDG/src/libedg.a\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# customtable_example_SOURCES = customtable_example.C\n\n# customtable_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# databasegraph_example_SOURCES = databasegraph_example.C\n\n# databasegraph_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rosedb_example_SOURCES = rosedb_example.C\n\n# rosedb_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# simplecallgraph_example_SOURCES = simplecallgraph_example.C\n\n# simplecallgraph_example_DEPENDENCIES = $(objectFile_DEPENDENCIES)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## linker needs to know about STL\n\n## By adding the -ptr. on the link line we should be able to avoid \n\n## specifying the Templates.DB/*.o file explicitly on the link line\n\n## LDFLAGS = @STL_INCLUDES@\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the purify linker is enabled, AUX_LINKER will be set by configure.\n\n# These are now set in the ROSE SUPPORT PURIFY configure macro\n\n# CCLD  = $(AUX_LINKER) $(CC)\n\n# CXXLD = $(AUX_LINKER) $(CXX)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "exampleTranslators/documentedExamples/simpleTranslatorExamples/CMakeLists.txt" : {
      "ObjectId" : "d18211e919522d053e0a51b305b181225f4eea53",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/documentedExamples/simpleTranslatorExamples/Makefile.am" : {
      "ObjectId" : "9e35a0d6dbcb4a5fef298ca11e6917fab3e3144f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#EXTRA_DIST = testCode.C AST-dot1.ps AST-pdf2.pdf\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile everything with -g (compiler's debug flag)\n\n# AM_CPPFLAGS = -g\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This must be done in a single shell\n",
        "Line" : 28,
        "CharPositionInLine" : 54
      },
      "3" : {
        "Text" : "# This must be done in a single shell\n",
        "Line" : 30,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 4
    },
    "exampleTranslators/graphicalUserInterfaceExamples/CMakeLists.txt" : {
      "ObjectId" : "067bacd3ec31c3753b7bcb211c05646ef6b508d6",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#SUBDIRS = slicing attributes query layout\n\n#\n\n#EXTRA_DIST = test_01.cpp\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "exampleTranslators/graphicalUserInterfaceExamples/Makefile.am" : {
      "ObjectId" : "22bc6d9b3236f5a6da00b2ad2cd63d61313c6a87",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "exampleTranslators/graphicalUserInterfaceExamples/attributes/CMakeLists.txt" : {
      "ObjectId" : "9bb944735e87c851969cf2d7b6f2791135ed4c4c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QROSE\n\n#bin_PROGRAMS = attributes\n\n#\n\n#attributes_SOURCES = attrib.cpp\n\n#\n\n## Use the names of the libraries as the list of dependences\n\n#attributes_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n#\n\n## Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#\n\n#EXTRA_DIST = $(TESTCODES)\n\n#\n\n#CLEANFILES = \n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files rose_*.C\n\n#\n\n#check-local:\n\n#\trm -f test_01.o\n\n#\t$(MAKE) $(TEST_Objects)\n\n#\n\n#TESTCODES = \n\n##     test_01.cpp\n\n#\n\n## Build the list of object files\n\n#TEST_Objects = ${TESTCODES:.C=.o}\n\n#\n\n#ROSE_FLAGS =\n\n#\n\n## This rule generates a dependency that forces the \"make check\" \n\n## test to always compile the test code\n\n#FORCE_TEST_CODES_TO_RUN:\n\n#\n\n#$(TEST_Objects): $(TESTCODES) FORCE_TEST_CODES_TO_RUN attributes\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n##\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n##\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n\n#\techo \"testing of attributes GUI commented out since it won't terminate automatically\"\n\n##\t./attributes -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\n\n#test: attributes\n\n#\t./attributes -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../test_01.cpp\n\n#endif\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/graphicalUserInterfaceExamples/attributes/Makefile.am" : {
      "ObjectId" : "3a0d966c2764701acf9f21e3d5c442792c568a46",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Use the names of the libraries as the list of dependences\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#     test_01.cpp\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n#\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t./attributes -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "exampleTranslators/graphicalUserInterfaceExamples/layout/CMakeLists.txt" : {
      "ObjectId" : "8456a004237d544b08cdd9a6e977a8afd1d7aad8",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QROSE\n\n#bin_PROGRAMS = layout\n\n#\n\n#layout_SOURCES = layout.cpp\n\n#\n\n## Use the names of the libraries as the list of dependences\n\n#layout_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n#\n\n## Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#\n\n#EXTRA_DIST = $(TESTCODES)\n\n#\n\n#CLEANFILES = \n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files rose_*.C\n\n#\n\n#check-local:\n\n#\trm -f test_01.o\n\n#\t$(MAKE) $(TEST_Objects)\n\n#\n\n#TESTCODES =\n\n##     test_01.cpp\n\n#\n\n## Build the list of object files\n\n#TEST_Objects = ${TESTCODES:.C=.o}\n\n#\n\n#ROSE_FLAGS =\n\n#\n\n## This rule generates a dependency that forces the \"make check\" \n\n## test to always compile the test code\n\n#FORCE_TEST_CODES_TO_RUN:\n\n#\n\n#$(TEST_Objects): $(TESTCODES) FORCE_TEST_CODES_TO_RUN layout\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n##\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n##\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n\n#\techo \"testing of layout GUI commented out since it won't terminate automatically\"\n\n##\t./layout -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\n\n#test: layout\n\n#\t./layout -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../test_01.cpp\n\n#endif\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/graphicalUserInterfaceExamples/layout/Makefile.am" : {
      "ObjectId" : "77df697b932fb19165c7e4f22a0255e1e1d3c557",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Use the names of the libraries as the list of dependences\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#     test_01.cpp\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n#\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t./layout -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "exampleTranslators/graphicalUserInterfaceExamples/query/CMakeLists.txt" : {
      "ObjectId" : "84c3d39acd5f2151333e692eb45fe9074c3a0076",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QROSE\n\n#bin_PROGRAMS = query\n\n#\n\n#query_SOURCES = query.cpp\n\n#\n\n## Use the names of the libraries as the list of dependences\n\n#query_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n#\n\n## Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#\n\n#EXTRA_DIST = $(TESTCODES)\n\n#\n\n#CLEANFILES = \n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files rose_*.C\n\n#\n\n#check-local:\n\n#\trm -f test_01.o\n\n#\t$(MAKE) $(TEST_Objects)\n\n#\n\n#TESTCODES =\n\n##     test_01.cpp\n\n#\n\n## Build the list of object files\n\n#TEST_Objects = ${TESTCODES:.C=.o}\n\n#\n\n#ROSE_FLAGS =\n\n#\n\n## This rule generates a dependency that forces the \"make check\" \n\n## test to always compile the test code\n\n#FORCE_TEST_CODES_TO_RUN:\n\n#\n\n#$(TEST_Objects): $(TESTCODES) FORCE_TEST_CODES_TO_RUN query\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n##\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n##\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n\n#\techo \"testing of query GUI commented out since it won't terminate automatically\"\n\n##\t./query -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\n\n#test: query\n\n#\t./query -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../test_01.cpp\n\n#endif\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/graphicalUserInterfaceExamples/query/Makefile.am" : {
      "ObjectId" : "b29d93d390177549d325ea5f99fe610a9c37015f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Use the names of the libraries as the list of dependences\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#     test_01.cpp\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n#\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t./query -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "exampleTranslators/graphicalUserInterfaceExamples/slicing/CMakeLists.txt" : {
      "ObjectId" : "efc02d9f92fc7c5da6846c784971e71b29a9278b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QROSE\n\n#bin_PROGRAMS = slicing\n\n#\n\n#slicing_SOURCES = slicing.cpp\n\n#\n\n## Use the names of the libraries as the list of dependences\n\n#slicing_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n#\n\n## Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#EXTRA_DIST = $(TESTCODES)\n\n#\n\n#CLEANFILES = \n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files rose_*.C\n\n#\n\n#check-local:\n\n#\trm -f test_01.o\n\n#\t$(MAKE) $(TEST_Objects)\n\n#\n\n#TESTCODES = \n\n##     test_01.cpp\n\n#\n\n## Build the list of object files\n\n#TEST_Objects = ${TESTCODES:.C=.o}\n\n#\n\n#ROSE_FLAGS =\n\n#\n\n## This rule generates a dependency that forces the \"make check\" \n\n## test to always compile the test code\n\n#FORCE_TEST_CODES_TO_RUN:\n\n#\n\n#$(TEST_Objects): $(TESTCODES) FORCE_TEST_CODES_TO_RUN slicing\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n##\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n##\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n\n#\techo \"testing of slicing GUI commented out since it won't terminate automatically\"\n\n##\t./slicing -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\n\n#test: slicing\n\n#\t./slicing -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../test_01.cpp\n\n#endif\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "exampleTranslators/graphicalUserInterfaceExamples/slicing/Makefile.am" : {
      "ObjectId" : "76f4bcd02109ba00d7199f44b0168d9506c26c5e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Use the names of the libraries as the list of dependences\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#     test_01.cpp\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tDQ (8/13/2005): I have commented out these test since they don't terminate \n\n#\tautomatically and as a result are difficult to handle with the \"make check\" rule.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t./slicing -I$(srcdir) $(ROSE_FLAGS) -c $(srcdir)/../$(@:.o=.C)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/A++DataLayout/InterleaveAcrossArrays/Makefile.am" : {
      "ObjectId" : "a8133a33c49f8faf14bb31b782877a19b6276812",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/A++DataLayout/Makefile.am" : {
      "ObjectId" : "807a577a21c110b3da06a95056d3db4712b7c040",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/A++DataLayout/Preprocessor/ArrayAssignmentStatementQuery/Makefile.am" : {
      "ObjectId" : "110fbd5458817bab7bc20678702f3c51a70f14ea",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We have to explicily build this rule since we want to avoid the use of \"ar cru\" \n\n# (need to use the C++ compiler so that templates will be built)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#dist-hook:\n\n#\tln -s ../STL-link ${distdir}\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/A++DataLayout/Preprocessor/IndexOffsetQuery/Makefile.am" : {
      "ObjectId" : "a17cad1af80cb6c20f46f80564b268ee06dd6e1a",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/A++DataLayout/Preprocessor/Makefile.am" : {
      "ObjectId" : "5d5c446b56a7e96533dfaaf81de39ed231bbd6f4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Separate Transformations and specialied support is isolated into separate directories\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the template repository path used in the autoconf\n\n# subsitution for various C++ template control variables.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# version of A++ preprocessor (initial development)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Note that because rose dependes upon the sage and sage \n\n# depends upon rose we have to list the sage library twice.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/A++DataLayout/tests/Makefile.am" : {
      "ObjectId" : "c2c02c8d362960caf5f51ffa359daa12a7a8d3d4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/A++DataLayout/tests/transformation/Makefile.am" : {
      "ObjectId" : "90249748b6ffd35d91fe756657aad22019de176f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/A++DataLayout/tests/transformation/interleaveAcrossArrays/Makefile.am" : {
      "ObjectId" : "36cf0ea38af4ca3ba482539d8f8f66a3b9d44a61",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Set the A++ Install Directory correctly\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/A++DataLayout/tests/transformation/performance/Makefile.am" : {
      "ObjectId" : "af89192e7ff17cd2751f95c3c55fb7a99a6b6e11",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Set the A++ Install Directory correctly\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/A++DataLayout/tests/transformation/preprocessor/Makefile.am" : {
      "ObjectId" : "1e08cff756873c20d0f51e6551993657f282d93c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Set the A++ Install Directory correctly\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/A++Preprocessor2003/ArrayAssignmentStatementQuery/Makefile.am" : {
      "ObjectId" : "05d3b4713df4eda591f6f195a11221b15a297bd1",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# I think the next line should be changed : Bobby Philip 09/27/2001\n\n#noinst_LIBRARIES = libsage3.a\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# changes to the templates in ../../AST_RewriteMechanism/rewriteTreeTraversal.C should force\n\n# several files using those templates to be recompiled.  Express this explicitly:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libarrayassignmentquery_a_DEPENDENCIES =\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We have to explicily build this rule since we want to avoid the use of \"ar cru\" \n\n# (need to use the C++ compiler so that templates will be built)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#dist-hook:\n\n#\tln -s ../STL-link ${distdir}\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/A++Preprocessor2003/IndexOffsetQuery/Makefile.am" : {
      "ObjectId" : "b4d7590f5372814f181d780777f44426ba266964",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# I think the next line should be changed : Bobby Philip 09/27/2001\n\n#noinst_LIBRARIES = libsage3.a\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We have to explicily build this rule since we want to avoid the use of \"ar cru\" \n\n# (need to use the C++ compiler so that templates will be built)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#dist-hook:\n\n#\tln -s ../STL-link ${distdir}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/A++Preprocessor2003/Makefile.am" : {
      "ObjectId" : "87ee2876ef5283d44049729725e51b4aff7035b5",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Separate Transformations and specialied support is isolated into separate directories\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the template repository path used in the autoconf\n\n# subsitution for various C++ template control variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# list of dependencies for all example programs\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# version of A++ preprocessor (initial development)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# changes to the templates in ../AST_RewriteMechanism/rewriteTreeTraversal.C should force\n\n# several files using those templates to be recompiled.  Express this explicitly:\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Note that because rose dependes upon the sage and sage \n\n# depends upon rose we have to list the sage library twice.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Code added to permit tests in this directory as part of development\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#    testAxx2002_07.C\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#    testNewTraversal.C\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ROSE_FLAGS = -rose:dot -rose:test 6 -rose:outputGrammarTreeFiles -rose:outputGrammarTreeFilesForHeaderFiles\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\trm -f testTransformationSpecification.o\n\n#\t./example1 $(ROSE_FLAGS) -DHAVE_CONFIG_H $(AM_CPPFLAGS) -c $(srcdir)/testTransformationSpecification.C\n\n#\t./example2 $(ROSE_FLAGS) -DHAVE_CONFIG_H $(AM_CPPFLAGS) -c $(srcdir)/testTransformationSpecification.C\n\n#\trm -f testTransformationSpecification.o\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DISTCLEANFILES = $(TESTCODES) serial_test_script\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "projects/A++Preprocessor2003/ScalarIndexingStatementQuery/Makefile.am" : {
      "ObjectId" : "c26319fb30c89665a211afe53e3151c081878b4c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    arrayDataBase.C\n\n#    indexDataBase.C\n\n#    database.C\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libscalarIndexingQuery_a_DEPENDENCIES =\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We have to explicily build this rule since we want to avoid the use of \"ar cru\" \n\n# (need to use the C++ compiler so that templates will be built)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    scalarDataBase.h\n\n#    database.h\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#dist-hook:\n\n#\tln -s ../STL-link ${distdir}\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/ArithmeticMeasureTool/Makefile.am" : {
      "ObjectId" : "a535111dda3f541020598d1d8aaf21c578a4beef",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# where to find rose and boost libraries \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#DEBUG_LEVEL     = -g -O0\n\n#EXTRA_CCFLAGS   = -Wall\n\n#CXXFLAGS        = $(DEBUG_LEVEL) $(EXTRA_CCFLAGS)\n\n#CCFLAGS         = $(CXXFLAGS)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search path for .m4 macros\n\n#ACLOCAL_AMFLAGS = -I ./config\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# header is not included in rose.h\n\n# we have to specify the path to ai_measurement.h here.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-I$(Midend_Analysis_SOURCE_PATH) #-I$(ROSE_INSTALL)/include/rose -I$(BOOST_INSTALL)/include \n",
        "Line" : 17,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : "#SUBDIRS = src . \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#$(builddir)/src/libarithemeticMeasurement.a \n",
        "Line" : 29,
        "CharPositionInLine" : 52
      },
      "8" : {
        "Text" : "## Test input testcode with manual instrumentation already\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# test files for static counting mode. No changes to the input file at all\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# loop001.cpp hello.cpp\n\n# compilation error for some f files\n\n# InterpFace.f   \n\n#   InterpF_correct.f\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# rose_test.c will be the target\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# this does not work somehow ??\n\n#TESTS = ${check_PROGRAM}\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#jacobi-v3.out:rose_jacobi-v3.c\n\n#\tgcc -O3 rose_jacobi-v3.c -o jacobi-v3.out -lm\n\n#\n\n#nestedloops.out:rose_nestedloops.c\n\n#\tgcc -O3 rose_nestedloops.c -o nestedloops.out -lm\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# test the translator\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# test for RAJA loop support, static counting mode\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# test for code instrumentor---------------------\n\n#Generate the loop count info. file , using the translator's loop_counting mode\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# generate the instrumented code, using the loop count info. file and the translator's instrumenting mode (default one)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#compile the instrumented code: avoid using rose translator as the linker!! conflicting binary analysis when .a file is present!!\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# In the end, we want the information about loops' iteration count\t\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "projects/AstEquivalence/CMakeLists.txt" : {
      "ObjectId" : "ee72ade8d518063def4fa337188bb42ce4974423",
      "LastModified" : "2019-03-25T17:14:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/AstEquivalence/Makefile.am" : {
      "ObjectId" : "0c92e68c0be86bb6d198d038be4dfeec8ccac7a5",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/8/2009): These are included in $(ROSE_LIBS) as I understand it, plus -lrt will cause problems on OSX.\n\n# astEquivalence_LDADD = $(ROSE_LIBS) $(QT_LDFLAGS) $(QROSE_LDFLAGS) -lrt\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (3/8/2009): Removed in favor of a single LDADD rule.\n\n# createTextFiles_LDADD = $(ROSE_LIBS) $(QT_LDFLAGS) $(QROSE_LDFLAGS) -lrt\n\n# evaluateAllBinaries_LDADD = $(ROSE_LIBS) $(QT_LDFLAGS) $(QROSE_LDFLAGS) -lrt\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (3/8/2009): These are included in $(ROSE_LIBS) as I understand it.\n\n# runIDA_LDADD = $(ROSE_LIBS) $(QT_LDFLAGS) $(QROSE_LDFLAGS) -lrt \\\n#                     $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \\\n#\t\t    $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) \\\n#\t\t    $(BOOST_PROGRAM_OPTIONS_LIB) $(BOOST_REGEX_LIB) \\\n#\t\t    $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB) \n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (3/8/2009): These are included in $(ROSE_INCLUDES) as I understand it.\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) $(BOOST_CPPFLAGS) -I.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/AstEquivalence/gui/CMakeLists.txt" : {
      "ObjectId" : "e8fb675c0de2b94b3378384185861ba0972ffe71",
      "LastModified" : "2019-03-25T17:14:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/AstEquivalence/gui/Makefile.am" : {
      "ObjectId" : "c504848694948602bb1e6ff31fe3871b3848203f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/8/2009): These are included in $(ROSE_LIBS) as I understand it, plus -lrt will cause problems on OSX.\n\n# compilerFlagsGui_LDADD = $(ROSE_LIBS) $(QT_LDFLAGS) $(QROSE_LDFLAGS) -lrt\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (3/8/2009): These are included in $(ROSE_INCLUDES) as I understand it.\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) $(BOOST_CPPFLAGS) -I.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/AtermTranslation/Makefile.am" : {
      "ObjectId" : "d96e867ab60498f56ac2261883a28b4bee4b425c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This includes a standard list of tests for C++ code.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (10/23/2013): Disable so that we can try an approach modifiying the original ATerm library to be ROSE specific.\n\n# DQ (10/20/2013): Allow alternative support using ROSE ATerm library API.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (10/20/2013): Allow alternative support using ROSE ATerm library API.\n\n# The Stratego and A-Term support is outside of ROSE\n\n# This needs a configure flag so that the location outside \n\n# of ROSE can be easily specificed at configure time.\n\n# A_TERM_INCLUDE = -I$(ATERM_INSTALL_PATH)/include\n\n# A_TERM_INCLUDE = -I$(srcdir)/roseAtermAPI\n\n# A_TERM_INCLUDE = -I$(srcdir)/aterm-2.5/aterm\n\n# A_TERM_INCLUDE = -I$(ATERM_INSTALL_PATH)/include\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) $(A_TERM_INCLUDE)\n\n# AM_CPPFLAGS = $(A_TERM_INCLUDE) $(ROSE_INCLUDES)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# bin_PROGRAMS = termToStratego strategoToTerm termGraph termGraph_using_RoseAtermAPI termGraph_using_RoseAtermAPI_withForwardedFunctions\n\n# bin_PROGRAMS = termToStratego strategoToTerm termGraph termGraph_using_RoseAtermAPI testTranslation_AST_to_ATerm_to_AST testTranslation_AST_to_ATerm testTranslation_ATerm_to_AST\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# termToStratego_SOURCES = termToStratego.C astToAtermImpl.C atermTranslation.h\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/26/2015): Comment out to avoid warning in automake.\n\n# strategoToTerm_SOURCES = strategoToTerm.C atermToAstImpl.C atermTranslation.h\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (9/26/2015): Comment out to avoid warning in automake.\n\n# termGraph_SOURCES = termGraph.C\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# termGraph_using_RoseAtermAPI_SOURCES = termGraph_using_RoseAtermAPI.C\n\n# termGraph_using_RoseAtermAPI_SOURCES = termGraph_using_RoseAtermAPI.C astToAtermImpl.C atermToAstImpl.C atermTranslation.h\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# testTranslation_AST_to_ATerm_to_AST_SOURCES = testTranslation_AST_to_ATerm_to_AST.C astToAtermImpl.C atermToAstImpl.C atermTranslation.h\n\n# testTranslation_AST_to_ATerm_SOURCES = testTranslation_AST_to_ATerm.C astToAtermImpl.C atermToAstImpl.C atermTranslation.h\n\n# testTranslation_ATerm_to_AST_SOURCES = testTranslation_ATerm_to_AST.C astToAtermImpl.C atermToAstImpl.C atermTranslation.h\n\n# testTranslation_AST_to_ATerm_to_AST_SOURCES = testTranslation_AST_to_ATerm_to_AST.C atermTranslation.h\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# termGraph_using_RoseAtermAPI_withForwardedFunctions_SOURCES = termGraph_using_RoseAtermAPI_withForwardedFunctions.C\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (9/17/2014): This is not inlcuded in the ROSE_LIBS list of libraries.\n\n# Permit linking to alternative ROSE ATerm API used to support new non-serialized API for Stratego.\n\n# termGraph_using_RoseAtermAPI_withForwardedFunctions_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) ./roseAtermAPI/libATerm.la\n\n# termGraph_using_RoseAtermAPI_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) $(srcdir)/aterm-2.5/aterm/libATerm.la\n\n# termGraph_using_RoseAtermAPI_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) \n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Added new test code to increase testing\n\n# testTranslation_AST_to_ATerm_to_AST_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) \n\n# testTranslation_AST_to_ATerm_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) \n\n# testTranslation_ATerm_to_AST_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) \n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (10/1/2014): This is the complete list of passing example codes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# PASSING_TEST_Output = $(addprefix rose_,${TESTCODES})\n\n# TEST_Output = $(addprefix rose_,${ALL_TESTCODES})\n\n# PASSING_TEST_Output = $(TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# rose_%: $(srcdir)/% termToStratego\n\n#\t./termToStratego $(ROSE_FLAGS) -c $< -o $@\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DQ (9/17/2014): These are new failing tests as a result of some chages to ROSE in 2014 (or since Sept 2013).\n",
        "Line" : 868,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (9/17/2014): These are failing tests as of September 2013.\n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# DQ (9/29/2014): This test code required the TEST_STRING_MACRO macro to be defined on the command line (ignore it for these ATerm tests).\n\n# test2005_56.C \n",
        "Line" : 1047,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#PASSING_REGRESSION_TEST_Output = $(addprefix rose_,${REGRESSION_TESTCODES})\n\n# PASSING_REGRESSION_TEST_Output = ${REGRESSION_TESTCODES}\n\n# PASSING_TEST_Objects = ${TESTCODES:.C=.o} ${ROSE__CXX_TESTS__BOOST:.C=.o}\n\n# PASSING_REGRESSION_TEST_Output = ${REGRESSION_TESTCODES:.C=.C.dot} ${ROSE__CXX_TESTS:.C=.C.dot}\n",
        "Line" : 1050,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# PASSING_REGRESSION_TEST_AST_Output = ${REGRESSION_TESTCODES:.C=.C.dot}\n",
        "Line" : 1057,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# rose_%: $(srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests/% ./termGraph_using_RoseAtermAPI\n\n#$(PASSING_REGRESSION_TEST_Output): ./termGraph_using_RoseAtermAPI\n\n#\t./termGraph_using_RoseAtermAPI $(ROSE_FLAGS) $(srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests/$@\n\n#$(PASSING_REGRESSION_TEST_Output): ./termGraph_using_RoseAtermAPI\n\n#\t./termGraph_using_RoseAtermAPI $(ROSE_FLAGS) -c $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests/test2001_01.C\n\n# $(PASSING_REGRESSION_TEST_Output): ./termGraph_using_RoseAtermAPI\n",
        "Line" : 1065,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\t./testTranslation_ATerm_to_AST $(@:.C.dot=.C_TAF.aterm)\n",
        "Line" : 1079,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t./testTranslation_ATerm_to_AST $(@:.C.dot=.C_TAF.aterm)\n",
        "Line" : 1084,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# $(PASSING_REGRESSION_C_SUBSET_OF_CXX_TEST_Output): ./termGraph_using_RoseAtermAPI\n\n#\t@echo \"Part 1: Copy the file to the local build tree so that we can change the file name suffix (to be a C language file) ...\"\n\n#\tcp $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests/$(@:.C.dot=.C) $(@:.C.dot=.c)\n\n#\t./termGraph_using_RoseAtermAPI $(ROSE_FLAGS) -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests -c $(@:.C.dot=.c)\n\n#\trm -f $(@:.C.dot=.c)\n",
        "Line" : 1087,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# $(PASSING_REGRESSION_C_SUBSET_OF_CXX_TEST_ATerm_Output): ./termGraph_using_RoseAtermAPI\n\n#\t@echo \"Part 2: Copy the file to the local build tree so that we can change the file name suffix (to be a C language file) ...\"\n\n#\tcp $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests/$(@:.C.dot=.C) $(@:.C.dot=.c)\n\n#\t./testTranslation_AST_to_ATerm $(ROSE_FLAGS) -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests -c $(@:.C.dot=.c)\n\n#\trm -f $(@:.C.dot=.c)\n",
        "Line" : 1093,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# $(TEST_Output): ../../testTranslator $(srcdir)/$(@:rose_%=%)\n\n# ../../testTranslator -rose:UPC $(ROSE_FLAGS) -c $(srcdir)/$(@:rose_%=%)\n",
        "Line" : 1099,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\t./termGraph_using_RoseAtermAPI $(ROSE_FLAGS) -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests -c $(srcdir)/test2013_01.C\n",
        "Line" : 1106,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\t@$(MAKE) $(PASSING_REGRESSION_C_SUBSET_OF_CXX_TEST_Output)\n",
        "Line" : 1111,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# This test demonstrate the use of forwarded function more similar to the paper (but for C instead of Java).\n\n# testAPI_withForwardedFunctions: ./termGraph_using_RoseAtermAPI_withForwardedFunctions\n\n# \t./termGraph_using_RoseAtermAPI_withForwardedFunctions $(srcdir)/test2013_01.C\n",
        "Line" : 1127,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Output)\n\n#\t@$(MAKE) $(PASSING_REGRESSION_TEST_Output)\n\n#\t@$(MAKE) $(PASSING_REGRESSION_C_SUBSET_OF_CXX_TEST_Output)\n",
        "Line" : 1140,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\t@$(MAKE) $(PASSING_REGRESSION_C_SUBSET_OF_CXX_TEST_ATerm_Output)\n\n#\t@$(MAKE) $(PASSING_REGRESSION_TEST_ATerm_Output)\n",
        "Line" : 1144,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# rule to compile stretego program to generate a C file \n\n# which stretego compiles to generate an executable.\n",
        "Line" : 1161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "projects/AtermTranslation/roseAtermAPI/Makefile.am" : {
      "ObjectId" : "2f60afb75f7803ead0dfdd7eed8ad20755e86d6d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# These appear to be the minimal required header files for a consistant compilation of the Aterm API.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# lib_LTLIBRARIES = libroseAtermAPI.la\n\n# lib_LTLIBRARIES = libATerm.la\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libroseAtermAPI_la_SOURCES = aterm1.C aterm2.C afun.C roseSpecificCode.C\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/BabelPreprocessor/CMakeLists.txt" : {
      "ObjectId" : "d9e47897946f597b4ac928f175ce88520b622d98",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable(babelTest_2 babelTest_2.C)\n\n#add_test(babelTest_2 babelTest_2)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/BabelPreprocessor/Makefile.am" : {
      "ObjectId" : "a9b9cdbc79a884dd04b0e5de84f6222595af3ffe",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Define the template repository path used in the autoconf\n\n# subsitution for various C++ template control variables.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# version of A++ preprocessor (initial development)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    transformationOptions.C\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Code added to permit tests in this directory as part of development\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE_FLAGS = -rose:dot -rose:test 6 -rose:outputGrammarTreeFiles -rose:outputGrammarTreeFilesForHeaderFiles\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\trm -f testTransformationSpecification.o\n\n#\t./example1 $(ROSE_FLAGS) -DHAVE_CONFIG_H $(AM_CPPFLAGS) -c $(srcdir)/testTransformationSpecification.C\n\n#\t./example2 $(ROSE_FLAGS) -DHAVE_CONFIG_H $(AM_CPPFLAGS) -c $(srcdir)/testTransformationSpecification.C\n\n#\trm -f testTransformationSpecification.o\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (9/10/2005): Still fails even after update...\n\n# DQ (8/8/2005): Commented out since I don't have the latest version of this code and it fails tests.\n\n# This rule is run after automake's internal check rule (which we don't want to use)\n\n# check-local:\n\n#\t@$(MAKE) $(TEST_Objects)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/BinaryAnalysisTools/CMakeLists.txt" : {
      "ObjectId" : "fab3a221071e5358f390cac7acd71ad9973044ae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/BinaryAnalysisTools/Makefile.am" : {
      "ObjectId" : "3c063d4838961a6fa3c87f645c1bcaf4df3e4f15",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n########################################################################################################################\n\n########################################################################################################################\n\n######                                                                                                            ######\n\n######                                         _____           _                                                  ######\n\n######                                        |_   _|__   ___ | |___                                              ######\n\n######                                          | |/ _ \\ / _ \\| / __|                                             ######\n\n######                                          | | (_) | (_) | \\__ \\                                             ######\n\n######                                          |_|\\___/ \\___/|_|___/                                             ######\n\n######                                                                                                            ######\n\n######                                                                                                            ######\n\n########################################################################################################################\n\n########################################################################################################################\n\n########################################################################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# dump specimen memory to files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# linear disassembly at specified addresses\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# disassembler using the new partitioner\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Run specimen natively by single stepping\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Single-step a process and compare execution addresses with a list of addresses\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Scans memory for magic numbers\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Execute instructions\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Decode encoded strings\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Find code that cannot be reached according to static analysis\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Parse and simplify symbolic expressions\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Generate source code from a binary specimen\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Generate a program trace and show some properties of it\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Not distributed; not part of the Git repo\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Experimental \"binary ROSE on-line workbench for specimen exploration\"\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Generate programs having specific structures (for path testing)\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Find paths in the CFG\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# find similar functions in two specimens\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# maximize bijection of two sets\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# debug instruction semantics\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# x86-call-targets\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# generate XML from ROSE internals\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# DWARF line numbers\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Very fast XML to JSON converter\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Script to print historgram of instructions with missing semantics\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "########################################################################################################################\n\n########################################################################################################################\n\n########################################################################################################################\n\n######                                                                                                            ######\n\n######                                         _____         _                                                    ######\n\n######                                        |_   _|__  ___| |_ ___                                              ######\n\n######                                          | |/ _ \\/ __| __/ __|                                             ######\n\n######                                          | |  __/\\__ \\ |_\\__ \\                                             ######\n\n######                                          |_|\\___||___/\\__|___/                                             ######\n\n######                                                                                                            ######\n\n######                                                                                                            ######\n\n########################################################################################################################\n\n########################################################################################################################\n\n########################################################################################################################\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Uses the debugSemantics and a carefully crafted input specimen to test features of RegisterStateGeneric.\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Tests that the xml2json tool works correctly\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Makefile boilerplate\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "projects/BinaryCloneDetection/CMakeLists.txt" : {
      "ObjectId" : "8bf76089f8a8fcdba9fc4af7c4e553c2321afb7b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Nothing to do in this directory. All work is in subdirectories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/BinaryCloneDetection/Makefile.am" : {
      "ObjectId" : "36e8fc6d354f166c60f8048d96d3fda63d36be23",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/BinaryCloneDetection/compression/Makefile.am" : {
      "ObjectId" : "45afa6b8967a3c61cc4e7cee5709f7b3d543ea13",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Binary clone detection.  Finds semantically similar functions based on fuzz testing. See Andreas and Earl for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Forward declarations for \"+=\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 00-09: initializing database (non-incremental)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/BinaryCloneDetection/semantic/Makefile.am" : {
      "ObjectId" : "3b8cde573ae85d7f0653fc82b0504e36a719df26",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Binary clone detection.  Finds semantically similar functions based on fuzz testing. See Andreas and Earl for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Forward declarations for \"+=\"\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 00-09: initializing database (non-incremental)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 10-19: initializing database (incremental)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 20-29: running tests\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 30-39: analysing test results\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 80-89: database maintenance\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 90-99: querying results\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Note to Andreas: Please fix the README file since you're defining a new range of numbers here.\n\n# Level 100-109: analysing api similarity\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Commented out because it doesn't compile with gcc-4.8, gcc-4.9, llvm-3.5 [Robb Matzke, 2015-10-26]\n\n#noinst_PROGRAMS += 101-api-similarity-worklist\n\n#101_api_similarity_worklist_SOURCES = 101-api-similarity-worklist.C\n\n#101_api_similarity_worklist_CPPFLAGS = $(ROSE_INCLUDES)\n\n#101_api_similarity_worklist_LDFLAGS = $(ROSE_RPATHS)\n\n#101_api_similarity_worklist_LDADD = $(BOOST_LDFLAGS) libCloneDetection.la $(ROSE_LIBS)\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 110-120: run evaluation metrics on pairwise binaries\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Commented out because it doesn't compile with gcc-4.8, gcc-4.9, llvm-3.5 [Robb Matzke, 2015-10-26]\n\n#noinst_PROGRAMS += 115_syscall_usage\n\n#115_syscall_usage_SOURCES = 115-syscall-usage.C linux_syscalls.C  \n\n#115_syscall_usage_CPPFLAGS = $(ROSE_INCLUDES)\n\n#115_syscall_usage_LDFLAGS = $(ROSE_RPATHS)\n\n#115_syscall_usage_LDADD = $(BOOST_LDFLAGS) libCloneDetection.la $(ROSE_LIBS)\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Utilities\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Built-in functions (used when not linking specimens with the C library)\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# A very simple test to ensure that basic things are working\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "projects/BinaryCloneDetection/semantic/tests/Makefile" : {
      "ObjectId" : "3b79135c914ca3064318e710192ae24b45bea830",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This makefile is not intended to be part of the ROSE build system.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Binaries where all optimization levels are combined into a single executable\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Binaries where each optimization level is its own executable\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Relatively simple specimens to help learn the basic capabilities of binary clone detection from Andreas\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Same again, but this time create multiple executables\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# More simple specimens to help learn the basic capabilities of binary clone detection from Robb\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Same again, but this time create multiple executables\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# More simple specimens that gcc -O3 does a good job of optimizing.\n\n# These are always compiled separately\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Some complex examples of sorting algorithms\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Same again, but this time create multiple executables\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# The usual suspects...\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "projects/BinaryCloneDetection/syntactic/CMakeLists.txt" : {
      "ObjectId" : "78d3c57935a4b310e316df49dfc47b8b66eaae8e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use --with-libxml2 on configure command-line for ROSE to activate this\n\n#if ROSE_USE_SSL_SUPPORT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/BinaryCloneDetection/syntactic/Makefile.am" : {
      "ObjectId" : "3084fc1430b82ac6ab2250118091ab9b4c02d653",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Liao 1/15/2014. Move this file outside of conditinoals since automake will scan _SOURCES unconditionally for dependencies\n\n# which will bring in SyntacticSchema.C into the distribution package.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: We should not have to depend on all of SSL just to compute MD5 sums.  We should be using libgcrypt instead. This\n\n# would also avoid the SSL/Java conflict mentioned in the ROSE manual. [RPM 2013-04-11]\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# (Re)creates the tables for syntactic clone detection\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Scans the specimen with sliding windows and populates the \"vectors\" and \"function_ids\" tables.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Scans the specimen with sliding windows and populates the \"vectors\" and \"function_ids\" tables.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Reads the database created by createVectorsBinary and finds windows that are similar, inserting them into the \"clusters\" table.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Computes how much overlap there is between pairs of similar functions.  Reads the \"clusters\" and \"vectors\" table and\n\n# creates a new table called cluster_pairs.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These are undocumented as to what they do\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These are undocumented as to what they do\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Example code on how to use RoseBin\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Used to compute grouping ranges for vectors. It only generates a set of ranges.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find all exact disjoint sets\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Finds largest clone pairs (not clusters) by decoupling the clone clusters into a set of clone pairs and\n\n# then optimistically merging adjacent clone pairs.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# undocumented\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# undocumented\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# undocumented\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# undocumented\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# undocumented\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Generate the GML file for visualizing the largest clones\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# undocumented\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-----------------------------------------------------------------------------------------------------------------------------\n\n# Level 110-120: run evaluation metrics on pairwise binaries\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Andreas is looking into whether any of these files are actually necessary or if they\n\n# can be removed from the source tree. [Robb Matzke, 2013-03-12]\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "projects/BinaryCloneDetection/syntactic/gui/CMakeLists.txt" : {
      "ObjectId" : "b132717c02abc50d57ddeaa0af7f5356a892c664",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/BinaryCloneDetection/syntactic/gui/Makefile.am" : {
      "ObjectId" : "8e18f290c52382f95a97b12b5da8467a88ac859c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/BinaryDataStructureRecognition/Makefile.am" : {
      "ObjectId" : "66947ca1327ca6c05accf395f8559af657356899",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CXXFLAGS = $(ROSE_CPPFLAGS) $(BOOST_CPPFLAGS) ${SQLITE3_CFLAGS}\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AM_LDFLAGS  = $(ROSE_LDFLAGS) $(ROSE_LIB) $(BOOST_LDFLAGS)   $(BOOST_PROGRAM_OPTIONS_LIB) \\\n#              $(BOOST_REGEX_LIB) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(BOOST_FILESYSTEM_LIB) $(SQLITE3_LDFLAGS)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# AM_LDFLAGS += -Wl,-rpath -Wl,@prefix@/lib @prefix@/lib/librose.so\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# AM_CPPFLAGS = -I@prefix@/include $(ROSE_INCLUDES)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# shortestPathBoostExample\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ******************************************************\n\n#              Standard Makefile Content\n\n# ******************************************************\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#testProgram_1: $(srcdir)/testProgram_1.C\n\n#\tg++ -g -o testProgram_1 $(srcdir)/testProgram_1.C\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test of astEquivalence on Binary Executable\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t./astStructRecognition -rose:read_executable_file_format_only testProgram_1 testProgram_2\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Skip the link step using the backend compiler on the generated code since it will not have a \"main()\" function.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This demo generates the edit graph for two similar source code files\n\n# and displays the generated visualization of the graph using zgrviewer.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ******************************************************\n\n#              Standard Makefile Content\n\n# ******************************************************\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# PASSING_TEST_Objects = ${TESTCODES}\n\n# TEST_Objects = ${ALL_TESTCODES}\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "projects/CMakeLists.txt" : {
      "ObjectId" : "633b4ded119573a95d5d4e44fc36733d7c1784ef",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###################################################################################################################\n\n# Some projects are disabled by commenting them out even when projects in general are enabled. This is done when a\n\n# project is not portable, does not pass testing, or is no longer maintained.  If you are the project owner, please\n\n# test your project and re-enable it.\n\n###################################################################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#add_subdirectory(arrayOptimization)\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#add_subdirectory(autoParallelization)\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#add_subdirectory(CertSecureCodeProject)\n\n#add_subdirectory(checkPointExample)\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# add_subdirectory(DocumentationGenerator)\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#add_subdirectory(FiniteStateModelChecker)\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#add_subdirectory(HeaderFilesInclusion)\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#add_subdirectory(highLevelGrammars)\n\n#add_subdirectory(javaport)\n\n#add_subdirectory(MacroRewrapper)\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#add_subdirectory(minitermite)\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#add_subdirectory(roseToLLVM)\n\n#add_subdirectory(RTC)\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "projects/C_to_Promela/CMakeLists.txt" : {
      "ObjectId" : "b81cadab0195f7e07fc7e2a03987872490593988",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/C_to_Promela/Makefile.am" : {
      "ObjectId" : "2e4a262e858ec23c2c4909c2d135117a84e21188",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Define the template repository path used in the autoconf\n\n# subsitution for various C++ template control variables.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (5/5/2007): This does not link properly, need to talk to Christian\n\n# CtoPromelaTransformation\n\n# CtoPromelaTransformation_SOURCES = CtoPromelaTransformation.C \n\n# CtoPromelaTransformation_DEPENDENCIES = MPICallListHelper.h\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generated header file for MPI prototypes\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/CertSecureCodeProject/CMakeLists.txt" : {
      "ObjectId" : "01e1437995436701fec8a7301defb3c5550f3f60",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noinst_PROGRAMS = certTests\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# certTests_SOURCES = \\\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is a shorted list that tests more quickly.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is only supposed to be a cross section of codes.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (8/16/2009): A lot of these are failing...\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Example codes to use for tests\n\n# TESTCODES_REQUIRED_TO_PASS = input_test_01.C\n\n# TESTCODES_REQUIRED_TO_PASS = $(SHORT_LIST_TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (8/28/2006): Verified non-working code\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export\n\n#ROSE_FLAGS = -rose:verbose 0 --edg:restrict --edg:export\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Include the path to A++ and the transformation specification\n\n# TESTCODE_INCLUDES = -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Make rule to build the QMTest database files\n\n# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(QMTEST_Objects): preprocessor $(srcdir)/$(@:.qmt=.C)\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\t@echo \"Calling QMTEST_Objects rule for Cpp_tests directory: \"\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "projects/CertSecureCodeProject/Makefile.am" : {
      "ObjectId" : "4961964f34935fbfd0b8eeaea24733dd6005e8f6",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# certTests_XXX = \n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is a shorted list that tests more quickly.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is only supposed to be a cross section of codes.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (8/16/2009): A lot of these are failing...\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Example codes to use for tests\n\n# TESTCODES_REQUIRED_TO_PASS = input_test_01.C\n\n# TESTCODES_REQUIRED_TO_PASS = $(SHORT_LIST_TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (8/28/2006): Verified non-working code\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export\n\n#ROSE_FLAGS = -rose:verbose 0 --edg:restrict --edg:export\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Include the path to A++ and the transformation specification\n\n# TESTCODE_INCLUDES = -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Make rule to build the QMTest database files\n\n# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(QMTEST_Objects): preprocessor $(srcdir)/$(@:.qmt=.C)\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t@echo \"Calling QMTEST_Objects rule for Cpp_tests directory: \"\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "projects/CloneDetection/CMakeLists.txt" : {
      "ObjectId" : "e4b500202251e93f3ddc213b63e078bd39f91280",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/CloneDetection/Makefile.am" : {
      "ObjectId" : "a05d89758d28b12f1c30da7d4002229edc3eae25",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# -I$(top_srcdir)/src/util/graphs -I$(top_srcdir)/src/midend/astUtil/astInterface/\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/CodeProperties/Makefile.am" : {
      "ObjectId" : "abd77b219053e2e72f26899b5c42b50bd8b5842c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Forwards\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Header files, etc\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Specimens, test inputs\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# findEnvironmentVars (using \"fev_\" as a unique test prefix)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# findFileInput (usig \"ffi_\" as a unique test prefix)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# findSocketInput (using \"fsi_\" as a unique test prefix)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# findSharedMemory (using \"fsm_\" as a unique test prefix)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake check and clean rules\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/CodeThorn/Makefile.am" : {
      "ObjectId" : "4d6656da85946b3b66504bfbbca47ca971e280a7",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/12/2013): We need a way to exclude older versions of Boost\n\n# without accepting each specific version of boost.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# demo target (for plugin demos)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/CodeThorn/docs/manual/Makefile" : {
      "ObjectId" : "cf122f6dfe77e096ddcbc9f65373e9bd7a771005",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/CodeThorn/src/Makefile.am" : {
      "ObjectId" : "49bf2148a4a8544f3dd5dfbf132565b8bc2794ae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# yacc flags for LTL parser\n",
        "Line" : 274,
        "CharPositionInLine" : 27
      },
      "1" : {
        "Text" : "# this line create speparately named object files\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#codethorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lspray -lspot -lbdd -lz3\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# workaround to intentionally fool policy\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#      end of fake target\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  DFAnalysisBase.C \\\n#  DFAnalysisBase.h\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# obsolete since integration into ROSE\n\n# explicit rules because of multiple bison parser\n\n#matcherparser.C: $(srcdir)/matcherlexer.ll $(srcdir)/matcherparser.yy\n\n#\t$(YACC) $(YFLAGS) -d -p matcherparser $(srcdir)/matcherparser.yy # generates y.tab.h/c\n\n#\t$(LEX) $(LFLAGS) $(AM_LFLAGS) -Pmatcherparser $(srcdir)/matcherlexer.ll\n\n#\tmv y.tab.h matcherparser.h\n\n#\tcat lex.yy.c y.tab.c > matcherparser.C\n\n#\trm lex.yy.c y.tab.c\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MS: matcher_demo\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#MS: iterator_test not ingegrated yet\n\n#iterator_test_SOURCES = iterator_test.C ShowSeq.h\n\n#iterator_test_LDADD = -lrose libmatcher.la\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#MS: ast_demo not integrated yet\n\n#ast_demo_SOURCES = ast_demo.C Timer.cpp Timer.h  RoseAst.C RoseAst.h\n\n#ast_demo_LFLAGS = -Pmatcher\n\n#ast_demo_YFLAGS = -d -p matcher\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t./ast_demo $(srcdir)/tests/basictest5.C\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#CHECK_WITH_SPOT_ONLY=check-ltl check-ltl-driven\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#check-flow-insensitive: check-analyterix check-const-analysis\n",
        "Line" : 674,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Run analyterix tests\n",
        "Line" : 681,
        "CharPositionInLine" : 132
      },
      "14" : {
        "Text" : "# outdated tests (but still passing)\n",
        "Line" : 695,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# failing tests due to changes in domain\n\n#check-ltl-failing: check-ltl-rers-array\n",
        "Line" : 698,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# current tests all passing\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#run RERS Problem1 from 2012 in several versions and compare to previous results\n",
        "Line" : 711,
        "CharPositionInLine" : 98
      },
      "18" : {
        "Text" : "#test the parallel analysis of RERS Problem1402 (4 threads, problem features arithmetic)\n",
        "Line" : 714,
        "CharPositionInLine" : 98
      },
      "19" : {
        "Text" : "#test the analysis of RERS Problem1403 (which features arrays)\n",
        "Line" : 717,
        "CharPositionInLine" : 93
      },
      "20" : {
        "Text" : "#test the analysis of RERS Problem1403, abstracting from global variables after 10,000 transitions\n",
        "Line" : 720,
        "CharPositionInLine" : 87
      },
      "21" : {
        "Text" : "# SKIPPED\n",
        "Line" : 722,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#test the analysis of RERS Problem1603 while using up to 1GB of RAM up to and including the STG computation (4 threads)\n",
        "Line" : 724,
        "CharPositionInLine" : 92
      },
      "23" : {
        "Text" : "#test the analysis of RERS Problem1402 and terminate after 5 seconds (4 threads)\n",
        "Line" : 727,
        "CharPositionInLine" : 88
      },
      "24" : {
        "Text" : "#one test for the loop-aware-sync analysis (solver 12, ISoLA'16 paper)\n",
        "Line" : 729,
        "CharPositionInLine" : 94
      },
      "25" : {
        "Text" : "#run CEGPRA tests\n",
        "Line" : 731,
        "CharPositionInLine" : 86
      },
      "26" : {
        "Text" : "# seg-faults with --reset-analyzer=no. Works with --reset-analyzer=yes\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\t@diff tmp.nsdump $(srcdir)/tests/jacobi-1d-imper_mod.c.nsdump\n",
        "Line" : 755,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# MS: 1-6 is reasonable for V1.2\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "projects/CodeThorn/src/addressTakenAnalysis_obsolete/Makefile.am" : {
      "ObjectId" : "f9bf183e6da7cab53e8fe496ccac8ba8137eb84f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#arrRefExpLhsTypeCheck\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#arrRefExpLhsTypeCheck_SOURCES = arrRefExpLhsTypeCheck.C\n\n#arrRefExpLhsTypeCheck_LDADD = -lrose\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# has r-value references\t\n",
        "Line" : 91,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# Files that represent header files from ROSE that we can now compilie with ROSE.\n\n#TESTCODES_REQUIRED_TO_PASS = \\\ntestRoseHeaders_00.C \\\ntestRoseHeaders_01.C \\\ntestRoseHeaders_02.C \\\ntestRoseHeaders_04.C \\\ntestRoseHeaders_05.C \\\ntestRoseHeaders_06.C \\\ntestRoseHeaders_07.C \\\ntestRoseHeaders_08.C\n",
        "Line" : 1450,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#testRoseHeaders_03.C\n",
        "Line" : 1462,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#TEST_OBJECTS = $(TESTCODES_REQUIRED_TO_PASS:.C=.o)\n\n#ROSE_EXAMPLE_TESTS_DIR=$(top_srcdir)/tests/nonsmoke/functional/CompileTests/RoseExample_tests\n",
        "Line" : 1464,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#ROSE_FLAGS = --edg:no_warnings -w --edg:restrict\n",
        "Line" : 1467,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#$(TEST_OBJECTS): arrRefExpLhsTypeCheck $(ROSE_EXAMPLE_TESTS_DIR)/$(@:.o=.C)\n\n#\t./arrRefExpLhsTypeCheck $(ROSE_FLAGS) -I$(top_builddir) $(ROSE_INCLUDES) -c $(ROSE_EXAMPLE_TESTS_DIR)/$(@:.o=.C)\n",
        "Line" : 1469,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#check-arrRefExpLhsTypeCheck: $(TEST_OBJECTS)\n",
        "Line" : 1472,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/CodeThorn/src/counterexamples/Makefile" : {
      "ObjectId" : "53f90a51f49c0bbfb8d0cf930e5b1e381ff7a9b3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\t$(shell for i in `seq 14`; do $(MAKE) clean && $(MAKE) -j1 Problem$$i.log)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cp Problem$$i-qc.csv ../regressiondata/ ; MS: we don't copy over the old data anymore\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/CodeThorn/src/intervalLattice/Makefile" : {
      "ObjectId" : "15eee31ff79b786b3d355ab77e8a351d525f82ec",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/CodeThorn/src/spotconnection/Makefile" : {
      "ObjectId" : "63891f4b4d4df30533537e84526526110d772380",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# set environment variable SPOT_PREFIX and BOOST_HOME\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/CodeThorn/src/spotconnection/previousVersion/Makefile" : {
      "ObjectId" : "54da6c7dae87d23e4b92c17faa9a02840ecd125c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# set environment variable SPOT_PREFIX\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# YES\n",
        "Line" : 7,
        "CharPositionInLine" : 42
      },
      "2" : {
        "Text" : "# YES\n",
        "Line" : 8,
        "CharPositionInLine" : 39
      },
      "3" : {
        "Text" : "# YES\n",
        "Line" : 9,
        "CharPositionInLine" : 84
      },
      "4" : {
        "Text" : "# input A precedes output X (YES)\n\n# input A precedes output Y (YES)\n\n# output X precedes input A (NO)\n\n# output Y precedes input A (NO)\n",
        "Line" : 10,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "# output X does never occur (NO)\n",
        "Line" : 14,
        "CharPositionInLine" : 43
      },
      "6" : {
        "Text" : "# for experimental testing only. create a link to an executable of codethorn.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#./codethorn --rersmode=yes /home/schordan1/development/rers13/rersmon/rers2013/whitebox/Problem901.c --spot-stg=Problem901.spot --input-values=\"{1,2,3,4,5,6}\"\n\n#./codethorn whitebox/Problem901.c --rersmode=yes --semantic-fold=yes --report-semantic-fold=yes --input-values=\"{1,2,3,4,5,6}\" --spot-stg=Problem901.spot\n\n#./codethorn whitebox/Problem901.c --rersmode=yes --semantic-fold=yes --report-semantic-fold=yes --viz=yes\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# YES\n",
        "Line" : 30,
        "CharPositionInLine" : 45
      },
      "9" : {
        "Text" : "# YES\n",
        "Line" : 31,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : "# YES\n",
        "Line" : 32,
        "CharPositionInLine" : 87
      },
      "11" : {
        "Text" : "# input A precedes output X (YES)\n\n# input A precedes output Y (YES)\n\n# output X precedes input A (NO)\n\n# output Y precedes input A (NO)\n",
        "Line" : 33,
        "CharPositionInLine" : 42
      },
      "12" : {
        "Text" : "# output X does never occur (NO)\n",
        "Line" : 37,
        "CharPositionInLine" : 46
      },
      "13" : {
        "Text" : "# NOTES\n\n# Problem 901:\n\n# Formula: (true U oV)\n\n# \"output V occurs eventually\"\n\n# Formula is not satisfied! An error path is \n\n# [iD, oU] ([iA, oZ])*\n\n# output of V does occur (on an error free path) but there is another path which leads into an error. Therefore it is not always the case that V occurs.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# output Z occurs after input B until output X (YES)\n",
        "Line" : 47,
        "CharPositionInLine" : 82
      },
      "15" : {
        "Text" : "# output Z precedes output W before input E\" (YES)\n",
        "Line" : 48,
        "CharPositionInLine" : 70
      },
      "16" : {
        "Text" : "# output V occurs eventually (NO)\n",
        "Line" : 49,
        "CharPositionInLine" : 45
      },
      "17" : {
        "Text" : "# output W occurs after input A until output U (NO)\n",
        "Line" : 50,
        "CharPositionInLine" : 82
      },
      "CommentCount" : 18
    },
    "projects/CodeThorn/src/termindent/Makefile" : {
      "ObjectId" : "c7e61437225bc76077e85a1c8fdb80494ccd2616",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/CompilationDB/Makefile.am" : {
      "ObjectId" : "ac7161eb864b95c947d2ffa8833b1e1ea85d3599",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/CompilationDB/examples/demo/Makefile.am" : {
      "ObjectId" : "cdef965b27b94b08532176af0e1d5066d4a1ab77",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/CompilationDB/examples/doxygen/Makefile.am" : {
      "ObjectId" : "c6d24a29c31445fd4e4b88ea3bc7e9fd495c75aa",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# testTranslator\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# genInstFlowGraph\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# buildCallGraph\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\trm -rf $(abs_builddir)/doxygen-src\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/CompilationDB/examples/kripke/Makefile.am" : {
      "ObjectId" : "b7a76c612d7446baf2567204f17dd29545076509",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# testTranslator\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# rajaChecker\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# genInstFlowGraph\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# buildCallGraph\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\trm -rf $(abs_builddir)/kripke-src\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/CompilationDB/scripts/Makefile.am" : {
      "ObjectId" : "bb13a8db7d2098b95c88f87855bdb98777ae81a3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/CompilationDB/static/css/Makefile.am" : {
      "ObjectId" : "2791bc013275b789624063fe10484006a78e1d90",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/CompilationDB/static/js/Makefile.am" : {
      "ObjectId" : "9762e25ce8b1f60770fa95b88542c3de2a71c8e9",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/ConstructNameSimilarityAnalysis/CMakeLists.txt" : {
      "ObjectId" : "2788f943ffe9b47b072fe6fd64dd8f28ef2bd345",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## To keep compile commands tidy, please ONLY put required include flags here.\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS\n\n#\n\n#bin_PROGRAMS = nameTests\n\n#\n\n## This transltor output source position info\n\n#nameTests_SOURCES = nameTests.C\n\n#\n\n## DQ (8/14/2004) Developer's Note:\n\n## This permits the use of the pair of libraries -lrose -ledg OR the longer \n\n## list of libraries (the later option is much faster for development work).\n\n## LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n#LDADD = $(LIBS_WITH_RPATH) $(ROSE_SEPARATE_LIBS)\n\n#\n\n## Turn on GNU Coverage Tool (gcov)\n\n## CXX += -fprofile-arcs -ftest-coverage\n\n#\n\n## This is a shorted list that tests more quickly.\n\n#TESTCODES_REQUIRED_TO_PASS = \\\n\n#test_CplusplusMacro_Cpp.C \\\n\n#test2001_01.C \\\n\n#test2001_02.C \\\n\n#test2001_03.C \\\n\n#test2001_04.C \\\n\n#test2001_05.C \\\n\n#test2001_06.C \\\n\n#test2001_07.C \\\n\n#test2001_08.C \\\n\n#test2001_09.C \\\n\n#test2001_10.C \\\n\n#test2001_11.C \n\n#\n\n## This is only supposed to be a cross section of codes.\n\n#LONG_LIST_TESTCODES_REQUIRED_TO_PASS = \\\n\n#test_CplusplusMacro_Cpp.C \\\n\n#test2001_01.C \\\n\n#test2001_02.C \\\n\n#test2001_03.C \\\n\n#test2001_04.C \\\n\n#test2001_05.C \\\n\n#test2001_06.C \\\n\n#test2001_07.C \\\n\n#test2001_08.C \\\n\n#test2001_09.C \\\n\n#test2001_10.C \\\n\n#test2001_11.C \\\n\n#test2001_12.C \\\n\n#test2001_13.C \\\n\n#test2001_14.C \\\n\n#test2001_15.C \\\n\n#test2001_16.C \\\n\n#test2001_17.C \\\n\n#test2001_18.C \\\n\n#test2001_19.C \\\n\n#test2001_20.C \\\n\n#test2001_21.C \\\n\n#test2001_22.C \\\n\n#test2001_23.C \\\n\n#test2001_24.C \\\n\n#test2001_25.C \\\n\n#test2001_26.C \\\n\n#test2001_27.C \\\n\n#test2001_28.C \\\n\n#test2001_29.C \\\n\n#test2002_01.C \\\n\n#test2003_01.C \\\n\n#test2003_02.C \\\n\n#test2003_03.C \\\n\n#test2003_04.C \\\n\n#test2003_05.C \\\n\n#test2003_06.C \\\n\n#test2003_08.C \\\n\n#test2003_09.C \\\n\n#test2003_10.C \\\n\n#test2003_11.C \\\n\n#test2003_12.C \\\n\n#test2003_13.C \\\n\n#test2003_14.C \\\n\n#test2003_15.C \\\n\n#test2003_16.C \\\n\n#test2003_17.C \\\n\n#test2003_18.C \\\n\n#test2003_19.C \\\n\n#test2003_20.C \\\n\n#test2003_21.C \\\n\n#test2003_23.C \\\n\n#test2003_24.C \\\n\n#test2003_25.C \\\n\n#test2003_26.C \\\n\n#test2003_27.C \\\n\n#test2003_28.C \\\n\n#test2003_29.C \\\n\n#test2003_30.C \\\n\n#test2003_31.C \\\n\n#test2003_32.C \\\n\n#test2003_35.C \\\n\n#test2003_36.C \\\n\n#test2003_37.C \\\n\n#test2003_38.C \\\n\n#test2004_01.C \\\n\n#test2004_02.C \\\n\n#test2004_03.C \\\n\n#test2004_04.C \\\n\n#test2004_05.C \\\n\n#test2004_06.C \\\n\n#test2004_07.C \\\n\n#test2004_08.C \\\n\n#test2004_09.C \\\n\n#test2004_10.C \\\n\n#test2004_11.C \\\n\n#test2004_12.C \\\n\n#test2004_13.C \\\n\n#test2004_14.C \\\n\n#test2004_15.C \\\n\n#test2004_16.C \\\n\n#test2004_17.C \\\n\n#test2004_18.C \\\n\n#test2004_19.C \\\n\n#test2004_23.C \\\n\n#test2004_24.C \\\n\n#test2004_26.C \\\n\n#test2004_27.C \\\n\n#test2004_28.C \\\n\n#test2004_29.C \\\n\n#test2004_30.C \\\n\n#test2004_31.C \\\n\n#test2004_32.C \\\n\n#test2004_33.C \\\n\n#test2004_34.C \\\n\n#test2004_35.C \\\n\n#test2004_36.C \\\n\n#test2004_37.C \\\n\n#test2004_38.C \\\n\n#test2004_39.C \\\n\n#test2004_40.C \\\n\n#test2004_42.C \\\n\n#test2004_43.C \\\n\n#test2004_44.C \\\n\n#test2004_45.C \\\n\n#test2004_47.C \\\n\n#test2004_48.C \\\n\n#test2004_49.C \\\n\n#test2004_50.C \\\n\n#test2004_51.C \\\n\n#test2004_52.C \\\n\n#test2004_53.C \\\n\n#test2004_54.C \\\n\n#test2004_55.C \\\n\n#test2004_56.C \\\n\n#test2004_58.C \\\n\n#test2004_59.C \\\n\n#test2004_60.C \\\n\n#test2004_61.C \\\n\n#test2004_62.C \\\n\n#test2004_63.C \\\n\n#test2004_64.C \\\n\n#test2004_65.C \\\n\n#test2004_67.C \\\n\n#test2004_68.C \\\n\n#test2004_69.C \\\n\n#test2004_70.C \\\n\n#test2004_71.C \\\n\n#test2004_72.C \\\n\n#test2004_73.C \\\n\n#test2004_74.C \\\n\n#test2004_75.C \\\n\n#test2004_76.C \\\n\n#test2004_77.C \\\n\n#test2004_78.C \\\n\n#test2004_79.C \\\n\n#test2004_80.C \\\n\n#test2004_81.C \\\n\n#test2004_82.C \\\n\n#test2004_84.C \\\n\n#test2004_85.C \\\n\n#test2004_86.C \\\n\n#test2004_87.C \\\n\n#test2004_88.C \\\n\n#test2004_89.C \\\n\n#test2004_90.C \\\n\n#test2004_91.C \\\n\n#test2004_93.C \\\n\n#test2004_94.C \\\n\n#test2004_95.C \\\n\n#test2004_96.C \\\n\n#test2004_97.C \\\n\n#test2004_98.C \\\n\n#test2004_99.C \\\n\n#test2004_100.C \\\n\n#test2004_101.C \\\n\n#test2004_102.C \\\n\n#test2004_103.C \\\n\n#test2004_104.C \\\n\n#test2004_105.C \\\n\n#test2004_106.C \\\n\n#test2004_107.C \\\n\n#test2004_108.C \\\n\n#test2004_109.C \\\n\n#test2004_110.C \\\n\n#test2004_111.C \\\n\n#test2004_112.C \\\n\n#test2004_113.C \\\n\n#test2004_114.C \\\n\n#test2004_115.C \\\n\n#test2004_116.C \\\n\n#test2004_117.C \\\n\n#test2004_118.C \\\n\n#test2004_119.C \\\n\n#test2004_120.C \\\n\n#test2004_121.C \\\n\n#test2004_122.C \\\n\n#test2004_123.C \\\n\n#test2004_124.C \\\n\n#test2004_125.C \\\n\n#test2004_127.C \\\n\n#test2004_128.C \\\n\n#test2004_129.C \\\n\n#test2004_130.C \\\n\n#test2004_131.C \\\n\n#test2004_132.C \\\n\n#test2004_133.C \\\n\n#test2004_134.C \\\n\n#test2004_135.C \\\n\n#test2004_136.C \\\n\n#test2004_137.C \\\n\n#test2004_138.C \\\n\n#test2004_139.C \\\n\n#test2004_140.C \\\n\n#test2004_141.C \\\n\n#test2004_142.C \\\n\n#test2004_143.C \\\n\n#test2004_144.C \\\n\n#test2004_145.C \\\n\n#test2004_146.C \\\n\n#test2004_147.C \\\n\n#test2004_148.C \\\n\n#test2004_149.C \\\n\n#test2004_150.C \\\n\n#test2004_151.C \\\n\n#test2004_152.C \\\n\n#test2004_153.C \\\n\n#test2004_154.C \\\n\n#test2004_155.C \\\n\n#test2004_156.C \\\n\n#test2004_157.C \\\n\n#test2004_158.C \\\n\n#test2004_159.C \\\n\n#test2004_160.C \\\n\n#test2004_161.C \\\n\n#test2004_162.C \\\n\n#test2004_163.C \\\n\n#test2004_164.C \\\n\n#test2005_01.C \\\n\n#test2005_02.C \\\n\n#test2005_03.C \\\n\n#test2005_04.C \\\n\n#test2005_05.C \\\n\n#test2005_06.C \\\n\n#test2005_07.C \\\n\n#test2005_08.C \\\n\n#test2005_09.C \\\n\n#test2005_10.C \\\n\n#test2005_11.C \\\n\n#test2005_12.C \\\n\n#test2005_13.C \\\n\n#test2005_14.C \\\n\n#test2005_15.C \\\n\n#test2005_16.C \\\n\n#test2005_17.C \\\n\n#test2005_19.C \\\n\n#test2005_20.C \\\n\n#test2005_21.C \\\n\n#test2005_22.C \\\n\n#test2005_23.C \\\n\n#test2005_24.C \\\n\n#test2005_25.C \\\n\n#test2005_26.C \\\n\n#test2005_27.C \\\n\n#test2005_28.C \\\n\n#test2005_29.C \\\n\n#test2005_30.C \\\n\n#test2005_31.C \\\n\n#test2005_32.C \\\n\n#test2005_33.C \\\n\n#test2005_34.C \\\n\n#test2005_35.C \\\n\n#test2005_36.C \\\n\n#test2005_37.C \\\n\n#test2005_38.C \\\n\n#test2005_39.C \\\n\n#test2005_40.C \\\n\n#test2005_41.C \\\n\n#test2005_42.C \\\n\n#test2005_43.C \\\n\n#test2005_44.C \\\n\n#test2005_45.C \\\n\n#test2005_46.C \\\n\n#test2005_47.C \\\n\n#test2005_48.C \\\n\n#test2005_49.C \\\n\n#test2005_50.C \\\n\n#test2005_51.C \\\n\n#test2005_52.C \\\n\n#test2005_53.C \\\n\n#test2005_55.C \\\n\n#test2005_57.C \\\n\n#test2005_58.C \\\n\n#test2005_59.C \\\n\n#test2005_60.C \\\n\n#test2005_61.C \\\n\n#test2005_62.C \\\n\n#test2005_63.C \\\n\n#test2005_64.C \\\n\n#test2005_65.C \\\n\n#test2005_66.C \\\n\n#test2005_67.C \\\n\n#test2005_68.C \\\n\n#test2005_70.C \\\n\n#test2005_71.C \\\n\n#test2005_72.C \\\n\n#test2005_73.C \\\n\n#test2005_74.C \\\n\n#test2005_75a.C \\\n\n#test2005_75b.C \\\n\n#test2005_76.C \\\n\n#test2005_77.C \\\n\n#test2005_78.C \\\n\n#test2005_79.C \\\n\n#test2005_80.C \\\n\n#test2005_81.C \\\n\n#test2005_82.C \\\n\n#test2005_83.C \\\n\n#test2005_84.C \\\n\n#test2005_86.C \\\n\n#test2005_87.C \\\n\n#test2005_88.C \\\n\n#test2005_89.C \\\n\n#test2005_90.C \\\n\n#test2005_91.C \\\n\n#test2005_92.C \\\n\n#test2005_93.C \\\n\n#test2005_94.C \\\n\n#test2005_95.C \\\n\n#test2005_96.C \\\n\n#test2005_97.C \\\n\n#test2005_98.C \\\n\n#test2005_99.C \\\n\n#test2005_100.C \\\n\n#test2005_101.C \\\n\n#test2005_102.C \\\n\n#test2005_103.C \\\n\n#test2005_104.C \\\n\n#test2005_105.C \\\n\n#test2005_106.C \\\n\n#test2005_107.C \\\n\n#test2005_108.C \\\n\n#test2005_109.C \\\n\n#test2005_110.C \\\n\n#test2005_111.C \\\n\n#test2005_112.C \\\n\n#test2005_113.C \\\n\n#test2005_114.C \\\n\n#test2005_116.C \\\n\n#test2005_117.C \\\n\n#test2005_118.C \\\n\n#test2005_119.C \\\n\n#test2005_120.C \\\n\n#test2005_121.C \\\n\n#test2005_122.C \\\n\n#test2005_123.C \\\n\n#test2005_124.C \\\n\n#test2005_125.C \\\n\n#test2005_126.C \\\n\n#test2005_127.C \\\n\n#test2005_128.C \\\n\n#test2005_129.C \\\n\n#test2005_130.C \\\n\n#test2005_131.C \\\n\n#test2005_132.C \\\n\n#test2005_133.C \\\n\n#test2005_134.C \\\n\n#test2005_135.C \\\n\n#test2005_136.C \\\n\n#test2005_137.C \\\n\n#test2005_138.C \\\n\n#test2005_139.C \\\n\n#test2005_140.C \\\n\n#test2005_141.C \\\n\n#test2005_142.C \\\n\n#test2005_143.C \\\n\n#test2005_144.C \\\n\n#test2005_145.C \\\n\n#test2005_146.C \\\n\n#test2005_147.C \\\n\n#test2005_148.C \\\n\n#test2005_149.C \\\n\n#test2005_150.C \\\n\n#test2005_152.C \\\n\n#test2005_153.C \\\n\n#test2005_154.C \\\n\n#test2005_155.C \\\n\n#test2005_156.C \\\n\n#test2005_157.C \\\n\n#test2005_158.C \\\n\n#test2005_159.C \\\n\n#test2005_160.C \\\n\n#test2005_161.C \\\n\n#test2005_162.C \\\n\n#test2005_163.C \\\n\n#test2005_164.C \\\n\n#test2005_165.C \\\n\n#test2005_166.C \\\n\n#test2005_167.C \\\n\n#test2005_169.C \\\n\n#test2005_170.C \\\n\n#test2005_171.C \\\n\n#test2005_173.C \\\n\n#test2005_174.C \\\n\n#test2005_175.C \\\n\n#test2005_176.C \\\n\n#test2005_177.C \\\n\n#test2005_178.C \\\n\n#test2005_179.C \\\n\n#test2005_180.C \\\n\n#test2005_181.C \\\n\n#test2005_182.C \\\n\n#test2005_183.C \\\n\n#test2005_184.C \\\n\n#test2005_185.C \\\n\n#test2005_187.C \\\n\n#test2005_188.C \\\n\n#test2005_189.C \\\n\n#test2005_190.C \\\n\n#test2005_191.C \\\n\n#test2005_192.C \\\n\n#test2005_193.C \\\n\n#test2005_194.C \\\n\n#test2005_195.C \\\n\n#test2005_196.C \\\n\n#test2005_197.C \\\n\n#test2005_198.C \\\n\n#test2005_199.C \\\n\n#test2005_202.C \\\n\n#test2005_203.C \\\n\n#test2005_205.C \\\n\n#test2005_206.C \\\n\n#test2005_207.C \\\n\n#test2005_208.C \\\n\n#test2005_209.C \\\n\n#test2006_01.C \\\n\n#test2006_02.C \\\n\n#test2006_03.C \\\n\n#test2006_04.C \\\n\n#test2006_05.C \\\n\n#test2006_06.C \\\n\n#test2006_07.C \\\n\n#test2006_08.C \\\n\n#test2006_10.C \\\n\n#test2006_12.C \\\n\n#test2006_13.C \\\n\n#test2006_14.C \\\n\n#test2006_16.C \\\n\n#test2006_17.C \\\n\n#test2006_18.C \\\n\n#test2006_19.C \\\n\n#test2006_20.C \\\n\n#test2006_22.C \\\n\n#test2006_23.C \\\n\n#test2006_25.C \\\n\n#test2006_26.C \\\n\n#test2006_28.C \\\n\n#test2006_34.C \\\n\n#test2006_37.C \\\n\n#test2006_38.C \\\n\n#test2006_39.C \\\n\n#test2006_40.C \\\n\n#test2006_41.C \\\n\n#test2006_42.C \\\n\n#test2006_44.C \\\n\n#test2006_46.C \\\n\n#test2006_47.C \\\n\n#test2006_50.C \\\n\n#test2006_52.C \\\n\n#test2006_53.C \\\n\n#test2006_54.C \\\n\n#test2006_55.C \\\n\n#test2006_56.C \\\n\n#test2006_57.C \\\n\n#test2006_58.C \\\n\n#test2006_59.C \\\n\n#test2006_61.C \\\n\n#test2006_62.C \\\n\n#test2006_63.C \\\n\n#test2006_66.C \\\n\n#test2006_67.C \\\n\n#test2006_68.C \\\n\n#test2006_69.C \\\n\n#test2006_70.C \\\n\n#test2006_71.C \\\n\n#test2006_72.C \\\n\n#test2006_73.C \\\n\n#test2006_74.C \\\n\n#test2006_75.C \\\n\n#test2006_76.C \\\n\n#test2006_77.C \\\n\n#test2006_78.C \\\n\n#test2006_79.C \\\n\n#test2006_80.C \\\n\n#test2006_81.C \\\n\n#test2006_82.C \\\n\n#test2006_83.C \\\n\n#test2006_84.C \\\n\n#test2006_85.C \\\n\n#test2006_86.C \\\n\n#test2006_87.C \\\n\n#test2006_88.C \\\n\n#test2006_89.C \\\n\n#test2006_90.C \\\n\n#test2006_91.C \\\n\n#test2006_92.C \\\n\n#test2006_93.C \\\n\n#test2006_94.C \\\n\n#test2006_95.C \\\n\n#test2006_96.C \\\n\n#test2006_97.C \\\n\n#test2006_98.C \\\n\n#test2006_99.C \\\n\n#test2006_101.C \\\n\n#test2006_102.C \\\n\n#test2006_103.C \\\n\n#test2006_104.C \\\n\n#test2006_105.C \\\n\n#test2006_106.C \\\n\n#test2006_107.C \\\n\n#test2006_108.C \\\n\n#test2006_109.C \\\n\n#test2006_111.C \\\n\n#test2006_112.C \\\n\n#test2006_113.C \\\n\n#test2006_115.C \\\n\n#test2006_116.C \\\n\n#test2006_117.C \\\n\n#test2006_118.C \\\n\n#test2006_119.C \\\n\n#test2006_120.C \\\n\n#test2006_121.C \\\n\n#test2006_122.C \\\n\n#test2006_123.C \\\n\n#test2006_124.C \\\n\n#test2006_125.C \\\n\n#test2006_126.C \\\n\n#test2006_129.C \\\n\n#test2006_139.C \\\n\n#test2006_140.C \\\n\n#test2006_141.C \\\n\n#test2006_142.C \\\n\n#test2006_143.C \\\n\n#test2006_144.C \\\n\n#test2006_145.C \\\n\n#test2006_146.C \\\n\n#test2006_147.C \\\n\n#test2006_148.C \\\n\n#test2006_149.C \\\n\n#test2006_150.C \\\n\n#test2006_151.C \\\n\n#test2006_152.C \\\n\n#test2006_153.C \\\n\n#test2006_154.C \\\n\n#test2006_155.C \\\n\n#test2006_156.C \\\n\n#test2006_157.C \\\n\n#test2006_158.C \\\n\n#test2006_159.C \\\n\n#test2006_160.C \\\n\n#test2006_161.C \\\n\n#test2006_162.C \\\n\n#test2006_163.C \\\n\n#test2006_164.C \\\n\n#test2006_165.C \\\n\n#test2006_166.C \\\n\n#test2006_180.C \\\n\n#test_int_lexemes.C \\\n\n#test_int_lexemes_donot_pass.C \\\n\n#test_simple_int.C \\\n\n#test_wchars.C \\\n\n#lexPhase2003_01.C \\\n\n#math.C \\\n\n#inputForLoopLocator.C\n\n#\n\n## DQ (8/28/2006): Verified non-working code\n\n#TESTCODE_CURRENTLY_FAILING = \n\n#\n\n#\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \\\n\n#$(TESTCODE_CURRENTLY_FAILING)\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n## VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n### Include the path to A++ and the transformation specification\n\n#TESTCODE_INCLUDES = -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code\n\n#\n\n#ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0\n\n#\n\n## A number of tests require the path to the A++ include directory \n\n## and a number of other tests require a path to the source directory.\n\n## $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n\n#$(TEST_Objects): nameTests\n\n##\t$(VALGRIND) ./statements $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n\n#\techo \"Copy the file to the local build tree so that the tview program can access it with the generated .highlight file ...\"\n\n#\tcp $(srcdir)/../Cxx_tests/$(@:.o=.C) $(@:.o=.C)\n\n#\t$(VALGRIND) ./nameTests $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(@:.o=.C)\n\n#\n\n## This was a bug specific to the normalization of source file names to absolute paths\n\n#testNames: nameTests\n\n#\t./nameTests -rose:verbose 0 -c $(srcdir)/input_nameTests.C\n\n#\n\n#check-local:\n\n#\t@$(MAKE) testNames\n\n##\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@echo \"Dan Quinlan's development tests.\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/constructName_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#else\n\n#check-local:\n\n#\t@echo \"\\nDan Quinlan's source position development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"******************************************************************************************\"\n\n#\t@echo \"************ make check not run here: configure --enable-dq-developer-tests **************\"\n\n#\t@echo \"******************************************************************************************\"\n\n#endif\n\n#\n\n#distclean-local:\n\n#\trm -rf Makefile\n\n#\n\n#clean-local:\n\n#\trm -rf *.o *.ps *.dot rose_*.C rose_*.c core *.int.c a.out *.highlight test*_*.C\n\n#\n\n#cleandata:\n\n#\trm -f *.ti *.ii rose_*.C rose_*.c *.dot test*.o rose_*.o\n\n#\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/ConstructNameSimilarityAnalysis/Makefile.am" : {
      "ObjectId" : "9b021ddf7f1b7de620c6af7af86c9b6bee32b833",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This transltor output source position info\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is a shorted list that tests more quickly.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (8/28/2006): Verified non-working code\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t$(VALGRIND) ./statements $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/DataFaultTolerance/CMakeLists.txt" : {
      "ObjectId" : "47f2510a0b14dd0224b69d0886673d6fc10c2990",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/Makefile.am" : {
      "ObjectId" : "0c04d990e00d90690fd9920874123de2e53e2df1",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/includes/Makefile.am" : {
      "ObjectId" : "689105b1e3163df6d1025bda8e6d132a6ee6bcc4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/src/CMakeLists.txt" : {
      "ObjectId" : "89f596c4798319d5b98bf67492a3aa55e710d9dc",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(element)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/DataFaultTolerance/src/Makefile.am" : {
      "ObjectId" : "142242adea3c1eee3297efb40f5c543868e051f5",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#CXXFLAGS += -DDEBUG\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/DataFaultTolerance/src/element/CMakeLists.txt" : {
      "ObjectId" : "78de9b8db0d2d257c99e626890f1f2d32fc399dd",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/src/element/Makefile.am" : {
      "ObjectId" : "7305cc49c79df884ed7ec89f9916c89bdac6cfc5",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/test/CMakeLists.txt" : {
      "ObjectId" : "e08f74baa6a038733b8e64eea3c1e17ac7ef42ec",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/test/Makefile.am" : {
      "ObjectId" : "a561233c53847b0b2bbcb1ae4eed2ae42713bfbb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/test/array/CMakeLists.txt" : {
      "ObjectId" : "aa10d38d8a456a1d932e505cac303d9d699eca54",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/test/array/Makefile.am" : {
      "ObjectId" : "49f3b716b9837eb25b9419bedbc90a3fb2f118bb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/test/array/faultCheck/CMakeLists.txt" : {
      "ObjectId" : "76afdbd1b603bed4cf84801b440e2a930701d649",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CXX_TESTCODES_REQUIRED_TO_PASS\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TESTCODE_CURRENTLY_FAILING\n\n#add_executable(rose_test_10Elem rose_test_10Elem.C)\n\n#add_executable(rose_testCode rose_testCode.C)\n\n#add_executable(rose_test_1Elem rose_test_1Elem.C)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/DataFaultTolerance/test/array/faultCheck/Makefile.am" : {
      "ObjectId" : "947ea00a38cc26d919782bd796bab47887b0d939",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# used to find .h, added it as one of  rose headers\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/DataFaultTolerance/test/array/transformation/CMakeLists.txt" : {
      "ObjectId" : "88c05163602afabc81c663eb0fd0b3db882b2a3b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/test/array/transformation/Makefile.am" : {
      "ObjectId" : "871b8759d0977055550d1c97de99a943c3f0d5d4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/DataFaultTolerance/test/array/transformation/tests/CMakeLists.txt" : {
      "ObjectId" : "b5d0b69bd6d46e3c301f570be9800b33db3a371f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CXX_TESTCODES_REQUIRED_TO_PASS\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/DataFaultTolerance/test/array/transformation/tests/Makefile.am" : {
      "ObjectId" : "3dd514e530be37fec65a860d1bfc429658d38082",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# diff the output of 2 executables      \n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/DatalogAnalysis/CMakeLists.txt" : {
      "ObjectId" : "b67dd5f0e847e885ab36046baef3a16c00415b3f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DatalogAnalysis/Makefile.am" : {
      "ObjectId" : "0f8337474ff284adb014d8597998f0a00afd7e80",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Note that relationTranslatorGenerator must be processed before \n\n# src because files built there are needed in src.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake conditional to control use of ROSE with bddbddb\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/DatalogAnalysis/relationTranslatorGenerator/CMakeLists.txt" : {
      "ObjectId" : "aed7806bd7475eddcbc95ad791849be321421f12",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DatalogAnalysis/relationTranslatorGenerator/Makefile.am" : {
      "ObjectId" : "1c0e65c8bd18d6a91d8f7423de7bd289981a5d56",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with BDDBDDB\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Bug fix suggested by Rich which is required for automake 1.9.2, but not for version 1.9.6\n\n# libastBinaryRelations_la_SOURCES = output/RelationVisitor.cc\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libastBinaryRelations_la_LIBADD = RelationVisitor.lo ChildVisitor.lo\n\n# libastBinaryRelations_la_LIBADD = RelationVisitor.lo\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# RelationVisitor.lo: output/RelationVisitor.cc output/RelationVisitor.hh\n\n# ChildVisitor.lo: output/ChildVisitor.cc\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#RelationVisitor.lo: $(generated_relation_source_code)\n\n#\t$(CXX) $(AM_CPPFLAGS) -Ioutput -c output/RelationVisitor.cc\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# generated_relation_source_code = ../src/RelationVisitor.cc  ../src/RelationVisitor.hh\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Python must be version 2.4\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tcp -f output/* .\n\n#\tcp -f output/* ../src\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/DatalogAnalysis/relationTranslatorGenerator/generate_relation_source_code.cmake" : {
      "ObjectId" : "fcaca02ce0f257fefb109e0891f7f869f5136ea4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DatalogAnalysis/src/CMakeLists.txt" : {
      "ObjectId" : "fe3e335dddef68f655313b1b3e8aa1a473057c66",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DatalogAnalysis/src/DBFactories/CMakeLists.txt" : {
      "ObjectId" : "9f8e4ad8e81b5bdd9b0e162f268da948ec60c8d3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/DatalogAnalysis/src/DBFactories/Makefile.am" : {
      "ObjectId" : "7450e16fd6e5493a039eaee2b884bf517a9ff9af",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with BDDBDDB\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/DatalogAnalysis/src/Makefile.am" : {
      "ObjectId" : "37a465126a66937c5ab03e34ba3f71202a650d93",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with BDDBDDB\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GENERATED_SOURCE = $(GENERATED_SOURCE_DIR)/output/RelationVisitor.cc\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#$(GENERATED_SOURCE):\n\n#\t@echo \"Need to generated the RelationVisitor.cc and ChildVisitor.cc files (call make)\"\n\n#\tcd $(GENERATED_SOURCE_DIR); $(MAKE)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#RelationVisitor.cc: ../relationTranslatorGenerator/output/RelationVisitor.cc\n\n#\tcp -f ../relationTranslatorGenerator/output/RelationVisitor.cc .\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ChildVisitor.cc:../relationTranslatorGenerator/output/ChildVisitor.cc\n\n#\tcp -f ../relationTranslatorGenerator/output/ChildVisitor.cc .\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some of the source files are generated, so only use these for the distribution.\n\n# DIST_SOURCES = CFGVisitor.cc  main.cc  misc.cc ChildVisitor.cc\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/28/2006): Reinclude the sources for RelationVisitor.cc ChildVisitor.cc since they\n\n# are required to make the build work!  We need to figure this problem out, since they\n\n# have to be present for the \"make\" rule, but are a problem for \"make dist\" rule.\n\n# DQ (9/24/2006): Don't include the generated source files\n\n# relationTranslator_SOURCES = CFGVisitor.cc  main.cc  misc.cc  RelationVisitor.cc ChildVisitor.cc\n\n# relationTranslator_SOURCES = CFGVisitor.cc  main.cc  misc.cc\n\n# relationTranslator_SOURCES = CFGVisitor.cc  main.cc  misc.cc  RelationVisitor.cc ChildVisitor.cc\n\n# relationTranslator_SOURCES = $(GENERATED_SOURCE) CFGVisitor.cc  main.cc  misc.cc\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# relationTranslator_LDADD = DBFactories/libDBFactories.a\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) DBFactories/libDBFactories.a\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) DBFactories/libDBFactories.la\n\n# LDADD = $(GENERATED_SOURCE_DIR)/RelationVisitor.lo $(GENERATED_SOURCE_DIR)/ChildVisitor.lo $(LIBS_WITH_RPATH) $(ROSE_LIBS) DBFactories/libDBFactories.la\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) DBFactories/libDBFactories.la\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) DBFactories/libDBFactories.la $(GENERATED_SOURCE_DIR)/astBinaryRelations.la \n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) DBFactories/libDBFactories.la\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\trm -f RelationVisitor.cc ChildVisitor.cc\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/DatalogAnalysis/tests/Makefile.am" : {
      "ObjectId" : "15968abb6e0cee35a5d3009891567a98350a432c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (12/28/2006): Later versions of automake don't seem to work when this is a directory!\n\n# EXTRA_DIST = datalogExamples\n\n# JJW (3/12/2008) Palette uses this example\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake conditional to control use of ROSE with BDDBDDB\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tcp $(srcdir)/datalogExamples $(distdir)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/DistributedMemoryAnalysisCompass/Makefile.am" : {
      "ObjectId" : "f5e555671320d3b6fb83742752b207bb0c9899a0",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\tmpirun -l -np 1 ./parallel_functionBased_dynamicBalance$(EXEEXT) $(srcdir)/buffer2.c -shared\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\t$(LN_S) ../compass/compass_parameters compass_parameters\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/DocumentationGenerator/CMakeLists.txt" : {
      "ObjectId" : "74d489d69e0d314bf223e00cc94717f6d09f295d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this one needs execvp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/DocumentationGenerator/Makefile.am" : {
      "ObjectId" : "4bb1744bb7acdf1df539d6c747e8e8df64041f08",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# BIN = correctAllComments correctExternalComments\n\n# TEST = testParser01 testParser02 testParser03 testParser06 testParser08 testParser09 testParser10 testParser11 \n\n# LIB = commentObj.o doxygenComment.o doxygenGrammar.o sageDoxygen.o\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t-Pdx changes generated symbols to use \"dx\" intead of \"yy\", this avoids conflicts within ROSE.\n\n#\tlex -Pdx -o$@ $<\n\n#\t$(LEX) -Pdx -o$(srcdir)/doxygenComment.C $(srcdir)/doxygenComment.lex\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This tests the generation of the Doxygen *.docs file separate from the sorce code\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This tests the updating of any Doxygen comments into the generated source code.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# OPTIONS = -doxygen:createNewFiles -doxygen:classNameTemplate %s.docs -doxygen:functionNameTemplate global.docs -doxygen:variableNameTemplate global.docs \n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# PC (8/21/2006): This test takes a long time (up to 12 minutes on a 2.8GHz Intel Xeon)\n\n# and thus is not performed as part of the normal run\n\n# For some reason this test also generates a 'limits' file and 2 headers, which\n\n# confuse the build process if rebuilt, so we remove them.\n\n# docs/SgNode.docs: $(top_srcdir)/docs/testDoxygen_copy/SgNode.docs\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tcp -a $(top_srcdir)/docs/testDoxygen_copy/Sg*.docs docs\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tMoved this to the location used for the construction of all ROSE documentation.\n\n#\tmv -f *.docs $(top_srcdir)/docs/testDoxygen_copy\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/EditDistanceMetric/CMakeLists.txt" : {
      "ObjectId" : "edd97ddb1b3927f7bcfdd456055ed10c768f7922",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/EditDistanceMetric/Makefile.am" : {
      "ObjectId" : "cfd813c57042c3072ecbd23ee03ba9021c5cb829",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------\n\n# Source demo\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---------------------------------------------------------\n\n# Binary demo\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------\n\n# shortestPathBoostExample_SOURCES = shortestPathBoostExample.C\n\n# shortestPathBoostExample_LDADD   = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ******************************************************\n\n#              Standard Makefile Content\n\n# ******************************************************\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test of astEquivalence on Binary Executable\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Test of astEquivalence on Source Code\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This demo generates the edit graph for two similar source code files\n\n# and displays the generated visualization of the graph using zgrviewer.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This demo generates the edit graph for two similar binary files (one\n\n# compiled with debug and the other without), and displays a pre-generated\n\n# image of a visualization of the a quadrant of the whole graph (takes \n\n# 20+ minutes to layout in dot so the image has been pre-computed).\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ******************************************************\n\n#              Standard Makefile Content\n\n# ******************************************************\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\t$(VALGRIND) ./binaryReader $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.c)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (1/21/2009): Used as part of demos (since zgrviewer takes too long to visualize the associated dot file (25 minutes).\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "projects/FiniteStateModelChecker/CMakeLists.txt" : {
      "ObjectId" : "97a81ba3a319397d2bba3b9cb44cfbfb29bc8555",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/FiniteStateModelChecker/Makefile.am" : {
      "ObjectId" : "16988a932b46f4a50fb5dfce9c100fb43519c826",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# SUBDIRS = MopsForROSE src\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/FiniteStateModelChecker/MopsForROSE/CMakeLists.txt" : {
      "ObjectId" : "170539dc95a26c4fb28477c955ee7674cde8a51d",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to compile the source file again to produce suitable input for gcjh\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/FiniteStateModelChecker/MopsForROSE/Makefile.am" : {
      "ObjectId" : "9ec7517227f23663aff20937a254498ab99751cf",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#libMopsForROSE.a: $(libMopsForROSE_a_OBJECTS)\n\n#\t-rm -f $@\n\n#\t${CXX_STATIC_LIB_UPDATE} $@ $(libMopsForROSE_a_OBJECTS)\n\n#\ttest -f $@ || exit 1\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need to compile the source file again to produce suitable input for gcjh\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/FiniteStateModelChecker/src/Makefile.am" : {
      "ObjectId" : "a83ad976b0065267c34645145fa6546d29ba674f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ensure Java stuff links correctly\n",
        "Line" : 3,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : "# The following test case will not work until the expression-granularity CFG is in place\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/Fortran_to_C/CMakeLists.txt" : {
      "ObjectId" : "5b6c31660beae5e213eb8c49e35d32610ce1b429",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/Fortran_to_C/Makefile.am" : {
      "ObjectId" : "7e46d05fbface90d5d6e7fbcffa7fce28e1e552b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Fortran_to_C/src/CMakeLists.txt" : {
      "ObjectId" : "a53240453258fbe3cc34fbb09493506a037e418a",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/Fortran_to_C/src/Makefile.am" : {
      "ObjectId" : "44899bf65b7701410fb60cf3a3b2cc50cb60bb91",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Fortran_directive\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/Fortran_to_C/tests/CMakeLists.txt" : {
      "ObjectId" : "f1a6c5a874a686eb2df657b68d9481f4e710d995",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TESTCODES_REQUIRED_TO_PASS = \\\n\n#\t\t\t\t\t\t\t   doloop1.F \\\n\n#\t\t\t\t\t\t\t   doloop2.F \\\n\n#\t\t\t\t\t\t\t   doloop3.F \\\n\n#\t\t\t\t\t\t\t   implicitVariable1.F \\\n\n#\t\t\t\t\t\t\t   implicitVariable2.F \\\n\n#\t\t\t\t\t\t\t   array1.F \\\n\n#\t\t\t\t\t\t\t   array2.F \\\n\n#\t\t\t\t\t\t\t   array3.F \\\n\n#\t\t\t\t\t\t\t   array4.F \\\n\n#\t\t\t\t\t\t\t   program1.F \\\n\n#\t\t\t\t\t\t\t   subroutine1.F \\\n\n#\t\t\t\t\t\t\t   function1.F\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/Fortran_to_C/tests/Makefile.am" : {
      "ObjectId" : "684d237cfba2ad35a0a24fb25720e476c18f2d45",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/HeaderFilesInclusion/CMakeLists.txt" : {
      "ObjectId" : "f981cddfdf34ed09cc6199dd245c867c1a85ac9f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/HeaderFilesInclusion/HeaderFilesGraphGenerator/CMakeLists.txt" : {
      "ObjectId" : "82a581d71303f56a188800534776330e5c965b3f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/HeaderFilesInclusion/HeaderFilesGraphGenerator/Makefile.am" : {
      "ObjectId" : "7e03637157147f9c446f3a56b2b6aff746f63f0b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This file does not compile using ROSE (skip testing it for now)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/HeaderFilesInclusion/HeaderFilesNotIncludedList/CMakeLists.txt" : {
      "ObjectId" : "d00ffdbd67155e2ffc46fe5054dc41e319ee4058",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/HeaderFilesInclusion/HeaderFilesNotIncludedList/Makefile.am" : {
      "ObjectId" : "7e565f105a6839a7e44929631bdc398c10247054",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This file does not compile using ROSE (skip testing it for now)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/HeaderFilesInclusion/Makefile.am" : {
      "ObjectId" : "0c3032c98b4985eca1ab9cf22358b5193c766115",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# bin_PROGRAMS = reverse\n\n# reverse_SOURCES = reverse.cpp\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES)\n\n# LDADD    = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/Jovial_to_C/CMakeLists.txt" : {
      "ObjectId" : "1a20e7825e4488605c4db771194e558710a1825e",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/Jovial_to_C/Makefile.am" : {
      "ObjectId" : "eac7af738b7ff2729ed7c17f4d67fb4abfffac81",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Jovial_to_C/src/CMakeLists.txt" : {
      "ObjectId" : "c765410f5fdee97e0986da9156a337fcc60b3161",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/Jovial_to_C/src/Makefile.am" : {
      "ObjectId" : "0c4290d7eab105c154639948fedd4ac22755b82b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Jovial_directive\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/Jovial_to_C/tests/CMakeLists.txt" : {
      "ObjectId" : "eb20ef671f9ef1c80812269827c30939c611be22",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TESTCODES_REQUIRED_TO_PASS = \\\n\n#\t\t\t\t\t\t\t   tiny.jov\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/Jovial_to_C/tests/Makefile.am" : {
      "ObjectId" : "b49af3fb0eddfb86f26769afa2f49241e403fe38",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/LineDeleter/Makefile.am" : {
      "ObjectId" : "798919324fb4f502b72ab7d6cd6c3e5343baba11",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\ttests\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/LineDeleter/src/Makefile.am" : {
      "ObjectId" : "60c612d3b61f8f767054186a4c7a6a24d587e99f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Uncomment the following lines once ROSE starts to handle duff's device correctly.\n\n#rm -f sample3.*\n\n#cp $(srcdir)/../tests/sample3.ref $(builddir)/\n\n#./deleted_`basename $< .c` sample3.ref\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Milind Chabbi (9/20/2013) : The bzip2 target is failing. LineDeleter is not robust enough, hence deleting bzip2 target\n\n#lineDeleter_TEST_TARGETS = $(lineDeleter_TOY_TARGETS) $(lineDeleter_bzip2_TARGET)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/LineDeleter/tests/Makefile.am" : {
      "ObjectId" : "a778b3114f86b63df3abdacf68c1c610289a54dc",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/MPI_Tools/CMakeLists.txt" : {
      "ObjectId" : "a1b9840c9788d9600540dd2dddcb471c305922fe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/MPI_Tools/MPICodeMotion/CMakeLists.txt" : {
      "ObjectId" : "db07af3c8ea3e951fc94cdca954e70e1812c72f3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/MPI_Tools/MPICodeMotion/Makefile.am" : {
      "ObjectId" : "8b0267bef8815532359b2f219c65ab6c3bf1af38",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#include_HEADERS=DependenceGraph.h CallGraph.h CallGraphQuery.h MotionInformation.h MPINonBlockingCodeMotion.h\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/MPI_Tools/MPIDeterminismAnalysis/CMakeLists.txt" : {
      "ObjectId" : "e493053bb04f10c4bb52471d351703523806cb1f",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/MPI_Tools/MPIDeterminismAnalysis/Makefile.am" : {
      "ObjectId" : "f10314615bd5bcec9a338f330337c982e85bc7d4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/MPI_Tools/Makefile.am" : {
      "ObjectId" : "6d54b2d5d544cdc5d87cb1617766bbe8195d8bae",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Add projects that apply ROSE specifically to MPI code here\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/MacroRewrapper/CMakeLists.txt" : {
      "ObjectId" : "8a12fe6093e8b0794a1039ff78fe904affc11183",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/MacroRewrapper/Makefile.am" : {
      "ObjectId" : "e885f85ddf23781632063437c6216c55e67a83a6",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#matchTokenStreamToAST\n",
        "Line" : 5,
        "CharPositionInLine" : 72
      },
      "1" : {
        "Text" : "#bin_PROGRAMS =\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (3/8/2009): Fixed error: If only SQLite is required, do not include $(QT_LDFLAGS) $(QROSE_LDFLAGS)\n\n# macroRewrapper_LDADD = $(ROSE_LIBS) $(QT_LDFLAGS) $(QROSE_LDFLAGS) -lrt\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (3/8/2009): Fixed error: If only SQLite is required, do not include $(QT_LDFLAGS) $(QROSE_LDFLAGS)\n\n# macroRewrapper_LDADD = $(ROSE_LIBS) $(QT_LDFLAGS) $(QROSE_LDFLAGS) -lrt\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (3/8/2009): Fixed error: -I. and $(BOOST_CPPFLAGS) is included in $(ROSE_INCLUDES).\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) $(BOOST_CPPFLAGS) -I.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/Makefile.am" : {
      "ObjectId" : "212cc029b3579dbdeaac1a4034c6067b75748e90",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# List of all project subdirectories (SUBDIRS)\n\n########################################################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ideally, each project's makefile should know whether it should build anything based on what features (such as\n\n# dependencies, frontend languages) are available and selected by the configuration.  However, some of the earlier\n\n# projects have errors if you run \"make\" in the project directory when ROSE is not configured to support the project,\n\n# thus we have various \"if\" statements here to support that.\n\n#\n\n# Projects that use the \"rose.config\" mechanism need not be listed here. Their makefile MUST know how to avoid building\n\n# the project if its dependencies are not met.\n\n#\n\n# To use the \"rose.config\" mechanism: add a \"rose.config\" file to your project directory and then you don't have to\n\n# change any of the ROSE build system -- your project will be found automatically by the \"build\" script, your\n\n# rose.config will be incorporated into the configuration system, and your project will become part of the recursive\n\n# \"make\" commands.  To disable your project, just rename its rose.config file and rerun \"build\" and \"configure\".\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#QY (6/11/2018): this directory is no longer used; moved code to POET-ROSE/manycore-stencil\n\n# DQ (4/20/2016): Clang has a problem within compiling POET, which is used in the StencilManyCore project.\n\n#if !USING_CLANG_COMPILER\n\n#SUBDIRS += StencilManyCore \n\n#endif\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (3/16/2015): Test for a version of g++ that will allow use of C++11 for the AMR Shift Calculs DSL work.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (3/23/2016): Note that we currently require the dsl_infrastructure directory to be built before both of \n\n# the arrayDSLcompiler and amrShiftDSLcompiler directories.\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Liao, 2014/2/11, with Dan's permission, comment out this project since it is broken now.\n\n#   BinaryDataStructureRecognition \n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/2/2013): This fails to compile (at least with some versions of Boost).\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (9/26/2011): Directory removed for failing new AST consistancy test for references to deleted IR nodes.\n\n# UpcTranslation (fails only a single test code shared_2.upc)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (6/25/2011): Removed from being tested (failing symbolicAnalysisFramework/tests/test_examples/dominator_example.cpp)\n\n# Matzke (10/31/2014): Removed symbolicAnalysisFramework from being compiled. It depends on boost having been installed with\n\n# -DBOOST_REGEX_MATCH_EXTRA, but we decided in Sep 2014 that we would not require users to compile and install boost with\n\n# this non-default configuration.  If a program is compiled with this switch but boost is not compiled with this switch then\n\n# all sorts of nastiness occurs without any compiler or runtime warning (segfaults, std::bad_alloc, etc)\n\n#SUBDIRS += symbolicAnalysisFramework\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TOO (2/16/2011): Errors with Tensilica's Xtensa compilers as alternative backend compilers. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (9/26/2011): Directory removed for failing new AST consistancy test for references to deleted IR nodes.\n\n# OpenMP_Translator\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (9/2/2013): This is overly complex to process with internal debugging turned on in the new EDG support.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (4/17/2011):This is hanging (worst kind of failing) on tux324 (for two Hudson tests a50-ROSE-BOOST-matrix-scratch in a row #334 and #335).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (4/16/2011): This is hanging (worst kind of failing) on tux324 (for two Hudson tests in a row #2290 and #2291).\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (4/8/2011): Directories of tests are a current problem for Insure++.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (9/22/2013): This project is now excluded from being tested within ROSE.\n\n# The haskellport/README file details specific issues with the current implementation\n\n# the project will compile byt when run the generated code does not compile.\n\n# Please see the haskellport/README file for more detailed information about the status.\n\n#   SUBDIRS += haskellport \n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (7/21/2010): Removed RTED since it is a problem to compile with ROSE (projects/RTED/CppRuntimeSystem/test.cpp).\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DQ (2/12/2010): compass appears to be a problem for the code generation support\n\n# in ROSE, so lets' move on and return to compass later for this level of support\n\n# of ROSE compiling the compass tool as a test of ROSE.\n\n#    compass\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (10/17/2010): This seems to be problem for Java, we can fix this later.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# DQ (4/17/2016): Restrict this to requiring both C/C++ language support and Binary analysis support.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# DQ (10/17/2010): Since we can't process Compass with Java we can't compiler palette (which requires Compass).\n\n# DQ (2/13/2010): This appears to have a dependence on compass, but I don't know why.\n\n# All projects should be independent of each other so that they should be able to be\n\n# compiled in any order. It was originally listed after \"haskellport\".\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Disable the use of the interpreter except on GNU 4.2\n\n# interpreter\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DQ (9/30/2009): This is classified as an old version of compiler and some parts of\n\n# ROSE are restricted from use (this is currently the only example due to internal \n\n# compiler errors).\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (4/8/2011): Directories of tests are a current problem for Insure++.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (3/23/2013): Adding support for aterm translation.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Pei-Hung (12/17/2014): adding PolyOpt only when POCC is available\n\n# Pei-Hung (09/24/2015): MultiLevelMemory requires POCC\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (2/28/2010): We can't make this conditionsl this since then the Makefile.in will \n\n# be missing at configure time.\n\n# if ROSE_USE_SAT\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# endif\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# SUBDIRS += rose-tooling\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# DQ (9/12/2009): This was not added to ROSE correctly, please let me help you do this.\n\n#     StaticDynamicAnalysis/DynamicCPU\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "########################################################################################################################\n\n# Associate projects with developers\n\n########################################################################################################################\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# List the projects you want to be tested after your name. By doing so, you are sponsoring the project and will\n\n# be responsible for fixing bugs (either yourself or by delegation).  The names listed here should be the same as the names\n\n# listed here will be intersected with the $(SUBDIRS) value before tests are run, which means you can safely list\n\n# subdirectories that might not be present or might not be configured.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "########################################################################################################################\n\n# Rules for testing projects having particular core developer sponsors\n\n########################################################################################################################\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "projects/ManyCoreRuntime/CMakeLists.txt" : {
      "ObjectId" : "a361ea36c2ed112d2351a379e4ec6aa05a1b21e4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/ManyCoreRuntime/Makefile.am" : {
      "ObjectId" : "ab4d97320b171817470ec9ca83414bbf5eabf81a",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# LDADD    = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lz\n\n# LDADD    = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CXXFLAGS += -fopenmp -O2\n\n# CXXFLAGS += \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ROSE configure script has a check for the existence of numa.h header and triggers this automake conditional.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# VALGRIND =\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DEPENDENT_SOURCE_FILES = $(srcdir)/core.h $(srcdir)/multicore.h $(srcdir)/core.C $(srcdir)/multicore.C\n\n# valgrind: jacobi $(DEPENDENT_SOURCE_FILES)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tDQ (11/2/2011): This appears to fail for 32bit system, we will debug this separately.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/ManyCoreRuntime/docs/Makefile.am" : {
      "ObjectId" : "70e105837e7272cc57013ea43001e71fbf9afb2b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# soft links to required files (.sty, .tex, .png. .c etc)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/ManyCoreRuntime2/CMakeLists.txt" : {
      "ObjectId" : "6599cbe6a8e95a66aec0b43726cb37190ab85e1c",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/ManyCoreRuntime2/Makefile.am" : {
      "ObjectId" : "08711bf25e21c144cf837a89b7f8344558ba9fa4",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/ManyCoreRuntime2/docs/Makefile.am" : {
      "ObjectId" : "70e105837e7272cc57013ea43001e71fbf9afb2b",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# soft links to required files (.sty, .tex, .png. .c etc)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/ManyCoreRuntime2/runtime/Makefile.am" : {
      "ObjectId" : "2799add3c36a933997606c0626862bd0977f22cc",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/ManyCoreRuntime2/tests/Makefile.am" : {
      "ObjectId" : "368eac56bf764640b4e129277d740ef525e029cb",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#AUTOMAKE_OPTIONS = subdir-objects\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#AM_CPPFLAGS = $(ROSE_INCLUDES)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# LDADD    = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lz\n\n# LDADD    = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ROSE configure script has a check for the existence of numa.h header and triggers this automake conditional.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes --suppressions=$(top_srcdir)/scripts/rose-suppressions-for-valgrind\n\n#VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DEPENDENT_SOURCE_FILES = $(srcdir)/core.h $(srcdir)/multicore.h $(srcdir)/core.C $(srcdir)/multicore.C\n\n# valgrind: jacobi $(DEPENDENT_SOURCE_FILES)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#test: jacobi \n\n#\t./jacobi\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#permutations: testPermutations \n\n#\t./testPermutations\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##test_hypercube: hypercube\n\n#\t./hypercube\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#valgrind: jacobi\n\n#\t$(VALGRIND) ./jacobi\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#valgrind_permutations: testPermutations \n\n#\t$(VALGRIND) ./testPermutations\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tDQ (11/2/2011): This appears to fail for 32bit system, we will debug this separately.\n\n#\t./testPermutations\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "projects/ManyCoreRuntime2/transformation/Makefile.am" : {
      "ObjectId" : "7c6535bb0700cc9925e7b75f5c21084d75a05c65",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Fortran_directive\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/MapleDSL/Makefile.am" : {
      "ObjectId" : "74efe48ab6087e6bd5c0c954a28099e504071ab3",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/23/2013): Disable so that we can try an approach modifiying the original ATerm library to be ROSE specific.\n\n# DQ (10/20/2013): Allow alternative support using ROSE ATerm library API.\n\n# SUBDIRS = tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (10/27/2014): Added support for optional connection to Maple when ROSE is configured using --with-maple=/nfs/apps/maple/12\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  LDADD += -L$(MAPLE_LIBDIR) -lmaple -lmaplec\n\n#  LDADD += -L$(MAPLE_LIBDIR) -lmaplec -lmaple\n\n#  omexample_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -L$(MAPLE_LIBDIR) -lmaplec -lmaple\n\n#  omexample_LDADD = -L$(MAPLE_LIBDIR) -lmaplec -lmaple -lmclient -lprocessor64\n\n#  omexample_INCLUDES = $(MAPLE_INCLUDES)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note test1 is a 2D Laplacian defined from first-order discretization operators.\n\n# Note that test2 is a subset of test1 for testing.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Output)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/MatlabTranslation/CMakeLists.txt" : {
      "ObjectId" : "a85864c11096276702688ca0dc210ff8681285b0",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/MatlabTranslation/Makefile.am" : {
      "ObjectId" : "8cba208c7c9a84ab815086c7cf44afdabf178efa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Matlab to C++ Translator\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/MatlabTranslation/src/Makefile.am" : {
      "ObjectId" : "81ce9a1d76ebab2ae734ae6bc91b3846122a2b69",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Matlab to C++ Translator\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#~ m2cxx_LDADD =  libroseMatlabFrontend.la\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# $(ROSE_LIBS) #-ldl $(LIBLTDL)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n\n## Project requires Matlab support\n\n##\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/MatlabTranslation/tests/Makefile.am" : {
      "ObjectId" : "d1c0c71d7ef774d2133fff1b5d635e16687c2ade",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/MatrixTesting/Makefile.am" : {
      "ObjectId" : "573322ce033be725ba0c6222799848d1462205b0",
      "LastModified" : "2019-01-31T14:17:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/MatrixTestingProject/CMakeLists.txt" : {
      "ObjectId" : "0fa1ac7c4d6929c58c2b1bd31d5956457081373a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This project is not intended to be built as part of ROSE. Instead, it serves as an example for how to compile an\n\n# external project that depends on an installed version of ROSE. Therefore, instead of building this project, we should\n\n# install its source code.  Matrix testing depends on this project.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/MatrixTestingProject/Makefile" : {
      "ObjectId" : "5b66bf9678bf29ad1bf6ff540f813f23dfc87248",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "################################################################################\n\n# Variables\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle broken ROSE header files that don't use \"#include <rose/...>\"\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n\n# Rules to build the main artifacts\n\n################################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libtool is used for compiling and linking this project, providing platform independence.\n\n# This requires the use of libtool's naming convention for object files (*.lo).\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################\n\n# Scripts for testing the project\n\n################################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n\n# Scripts to install the software\n\n################################################################################\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install this project's user-level artifacts into the ROSE prefix\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################\n\n# Prerequisites\n\n################################################################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/MultiLevelMemory/Makefile" : {
      "ObjectId" : "e649aefe058347fdc654ab0e25e02a799bea06f9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## A sample Makefile to build a ROSE tool.\n\n##\n\n## Important: remember that Makefile rules must contain tabs:\n\n##\n\n##     <target>: [ <dependency > ]*\n\n##         [ <TAB> <command> <endl> ]+\n\n## \n\n## Please replace space with TAB if you copy & paste this file to create your Makefile!!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## ROSE installation contains\n\n##   * libraries, e.g. \"librose.la\"\n\n##   * headers, e.g. \"rose.h\"\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE uses the BOOST C++ libraries, the --prefix path\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Your translator\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Input testcode for your translator\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------\n\n# Makefile Targets\n\n# #-------------------------------------------------------------\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# # compile the translator and generate an executable\n\n# # -g is recommended to be used by default to enable debugging your code\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n#         # test the translator\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/MultiLevelMemory/Makefile.am" : {
      "ObjectId" : "15992914b1c65a07a177215e46eceed8dc04a9d0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/MultiLevelMemory/src/Makefile.am" : {
      "ObjectId" : "eddfa311e51f8c8451c13fef4e04ff320008e6d4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  MultiLevelMemory\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/MultiLevelMemory/tests/Makefile.am" : {
      "ObjectId" : "431ad835ef431ba279967c4fc26e47f47ab12b13",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#DIFF=diff\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#$(COMPARE_OUTPUTS): \n\n#\tif $(DIFF) $(top_srcdir)/projects/mlm/tests/$(@:=.c) $(@:=.c); then \\\n#\t\techo \"mlm: diff translated ouput: \" $@;   \\\n#\telse    \\\n#\t\techo \"Files differ; test falied\"; \\\n#\t\texit 1; \\\n#\tfi\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t@$(MAKE) $(COMPARE_OUTPUTS)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/NameConsistancyChecker/Makefile.am" : {
      "ObjectId" : "69712d152b02238f3d17606529d3b54275eac7c6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with Maple Symbolic Algebra Package\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (1/15/2007): Use the correct boost library with suffix.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (3/14/2009): Don't overwrite existing values in LDFLAGS.\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) $(WAVE_LDFLAGS) $(REGEX_LIBS)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check-local: test1 test2 test3 \n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/OpenK/Makefile.am" : {
      "ObjectId" : "9e63edb6a273ef50191f5cdc9eaf0d873e7ddf1e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/OpenK/knowledgeBuilder/Makefile.am" : {
      "ObjectId" : "24d64dea5fe5c8676652e9d9508750c89cdaf53b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# change .c to .c.owl\n",
        "Line" : 23,
        "CharPositionInLine" : 70
      },
      "1" : {
        "Text" : "#$(TEST_CODES_REQUIRED_TO_PASS:.cpp=.output)\n",
        "Line" : 29,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "# each .c.owl file depends on the corresponding .c file\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: this does not work yet since run.pl uses relative path, which will be translated into a path in build tree. \n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#check-alive:\n\n#\t./rosePrgKnowledgeBuilder -alive true -c $(TESTDIR)/$(TESTCODE)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/OpenK/test/npb2.3-omp-c/BT/Makefile" : {
      "ObjectId" : "6301857872eb9f505a353d327e214825ec9cef91",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenK/test/npb2.3-omp-c/CG/Makefile" : {
      "ObjectId" : "0a67b6f94187df4dd87ed10a5997ce3baeb929b0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/OpenK/test/npb2.3-omp-c/EP/Makefile" : {
      "ObjectId" : "24ea58aeec887b6040541f8249fa1beaa9e8832a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/OpenK/test/npb2.3-omp-c/FT/Makefile" : {
      "ObjectId" : "d611f2751c223afbbca561e2c3327ce0aeed6848",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#../omp-prof.o\n",
        "Line" : 8,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 1
    },
    "projects/OpenK/test/npb2.3-omp-c/IS/Makefile" : {
      "ObjectId" : "02c6b99501a47bbc153499a2cb736f5b01731dfb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/OpenK/test/npb2.3-omp-c/LU/Makefile" : {
      "ObjectId" : "c75344904d922ebf54113eea3d937811be0a99c1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by applu.incl\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# applu.incl: npbparams.h\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenK/test/npb2.3-omp-c/MG/Makefile" : {
      "ObjectId" : "27463918e67206606e56599765facaa43bfdbc1a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/OpenK/test/npb2.3-omp-c/Makefile" : {
      "ObjectId" : "73fe0714007a6c07a1fe3a3f4b85ec8b9b07628a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Awk script courtesy cmg@cray.com\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# It would be nice to make clean in each subdirectory (the targets\n\n# are defined) but on a really clean system this will won't work\n\n# because those makefiles need config/make.def\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenK/test/npb2.3-omp-c/SP/Makefile" : {
      "ObjectId" : "2bb7f0c65ae4d007afb231fca832f3cd323778b3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenK/test/npb2.3-omp-c/sys/Makefile" : {
      "ObjectId" : "14e6d314897fbd2b44ebcad71cb524f76fa5809f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Note that COMPILE is also defined in make.common and should\n\n# be the same. We can't include make.common because it has a lot\n\n# of other garbage. \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setparams creates an npbparam.h file for each benchmark \n\n# configuration. npbparams.h also contains info about how a benchmark\n\n# was compiled and linked\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenMPPreprocessor/Makefile.am" : {
      "ObjectId" : "f5647f34429ec14192a56db112745144ec956d19",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Makefile info for query to decide if we can parallelize iterations\n\n# over user-defined containers.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# changes to the templates in ../AST_RewriteMechanism/rewriteTreeTraversal.C should force\n\n# several files using those templates to be recompiled.  Express this explicitly:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    testOpenMP_01.C\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tg++ -o example example.o example_support.o -lnthsup -lintone -lnthreads -lqt\n\n#\tg++ -o example example.o example_support.o -L/home/dquinlan/ROSE/OpenMP_Nanos/nanos/local/lib -lnthsup -lintone -lnthreads -lqt\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tld -o example example.o example_support.o /home/dquinlan/ROSE/OpenMP_Nanos/nanos/local/lib/libnthsup.a /home/dquinlan/ROSE/OpenMP_Nanos/nanos/local/lib/libintone.a /home/dquinlan/ROSE/OpenMP_Nanos/nanos/local/lib/libnthreads.a /home/dquinlan/ROSE/OpenMP_Nanos/nanos/local/lib/libqt.a -lc\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Working example of how to compile and link (however it does seg fault)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tgcc -I. -o nanosBug $(srcdir)/nanosBug.C -Wl,-rpath=/home/dquinlan/ROSE/OpenMP_Nanos/nanos/local/lib -lnthsup -lintone -lnthreads -lqt\n\n#\tgcc -o nanosBug nanosBug.o -L/home/dquinlan/ROSE/OpenMP_Nanos/nanos/local/lib -lnthsup -lintone -lnthreads -lqt\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/OpenMP_Analysis/CMakeLists.txt" : {
      "ObjectId" : "60c7c98b2a57b1de0a88f72b2ba1dbba4a94331e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/OpenMP_Analysis/Makefile.am" : {
      "ObjectId" : "cc3ece088be48202d57cbbf98a8b3b96d8d2dac5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-rose:wave\n",
        "Line" : 18,
        "CharPositionInLine" : 87
      },
      "1" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenMP_Checker/CMakeLists.txt" : {
      "ObjectId" : "0d5e72161e42da4af3d573adf93829d9d0a504da",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/OpenMP_Checker/Makefile.am" : {
      "ObjectId" : "ff9aebc5d9a24002fbc78d6470f5744d7ea216e0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-rose:wave\n",
        "Line" : 22,
        "CharPositionInLine" : 87
      },
      "1" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenMP_Translator/Makefile.am" : {
      "ObjectId" : "9fcef0a833a1c37645d4e2eea1f687c50ec9cfb1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Need to build the ompTranslator in the current directory first, or\n\n# make the subdirectories trigger the build in this directory (better).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (1/6/2007): Try to turn this on so that we at least \n\n# compile the OpenMP translator even if we don't run it!\n\n# Automake conditional to control use of ROSE with OpenMP\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Later this should reference the external Omni OMP runtile library include directory\n\n# This is a parameter provided through the ROSE configure script (configure commandline)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/OpenMP_Translator/includes/Makefile.am" : {
      "ObjectId" : "21c5a345ba6c544dd16225413a463723952e37fc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# install this header \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#We don't install this copy of omp.h\n\n# another copy under ./src/frontend/SageIII will be installed.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenMP_Translator/tests/Makefile.am" : {
      "ObjectId" : "df1190249a9ae8ab6b64d33fb62439a8bb2febc2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with OpenMP\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/OpenMP_Translator/tests/cvalidationsuite/Makefile.am" : {
      "ObjectId" : "540bdfe33266274fdf233d8cca327f782c87cca3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Must let ROSE OpenMP translator process main.c to add necessary variables and code supporting OpenMP\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fails when -rose:C_only is used\n\n# ROSE_FLAGS = -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:C_only -rose:verbose 0 --edg:restrict\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t@echo \"Calling Copy AST mechanism using TEST_Objects rule: \"\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# enable make check to build and run the final executable, Liao 1/31/2008\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#check-local:$(PASSING_TEST_Objects)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# else\n\n# check-local:\n\n#\t@echo \"\\nOpenMP tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"****************************************************************************\"\n\n#\t@echo \"****** make check not run here: configure --with-omp_runtime_support=<path> ******\"\n\n#\t@echo \"****************************************************************************\"\n\n# endif\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "projects/OpenMP_Translator/tests/developmentTests/Makefile.am" : {
      "ObjectId" : "2a3a5a29f39a059cf570e0c38aa7c61f462755cf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#inputBug320.c , this is not directly related to OpenMP, removed, Liao 11/14/2007\n\n#inputNomain.c: assume all tests are selfcontained. so skip this one\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ: Need to get C++ codes into tests but this is a bit of a problem for our simple make rule\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# moved them to test code required to pass\n\n# Liao, 11/14/2007\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# $(CXX_TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:C -rose:verbose 0 --edg:restrict\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Liao, 11/14/2007, enable linking and running compiled code \n\n# leverage the simple tests support from automake\n\n# Note: assume each test code is self-contained and has main() inside.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#LDADD = -L$(OMNI_RUNTIME_LIBRARY_PATH) -lompc -ltlog -lpthread -lm\n\n#LDADD = $(OMNI_RUNTIME_LIBRARY_PATH)/libompc.a $(OMNI_RUNTIME_LIBRARY_PATH)/libtlog.a -lpthread -lm\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# otherwise just generate object files\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "projects/OpenMP_Translator/tests/epcc-c/Makefile.am" : {
      "ObjectId" : "1b3da9313296c656dd24a6bb7dd10318514d482a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/BT/Makefile.am" : {
      "ObjectId" : "9864b92b23c0fe0eb645ed500a0507fce521001b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/CG/Makefile.am" : {
      "ObjectId" : "78cbd304ea823e367f7da04741db15d15bb0ae81",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/EP/Makefile.am" : {
      "ObjectId" : "35446bb8cecb5bed000d4d4ea5d78ca66d5c90b5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with OpenMP\n\n# if ROSE_USE_OMNI_OPENMP\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES)\n\n# bin_PROGRAMS = copyExample\n\n# copyExample_SOURCES = copyExample.C\n\n# copyExample_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# if ROSE_USE_OMNI_OPENMP\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# else\n\n# check-local:\n\n#\t@echo \"OpenMP tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"****************************************************************************\"\n\n#\t@echo \"****** make check not run here: configure --with-omp_runtime_support=<path> ******\"\n\n#\t@echo \"****************************************************************************\"\n\n# endif\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/FT/Makefile.am" : {
      "ObjectId" : "5c870e80ecfab520116b93edaba00d7fad67dc85",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (1/11/2007): This is an error on 64 bit systems at least.\n\n# error: `::__rose_generated_structure_tag_name_22' has not been declared\n\n# if ROSE_USE_OMNI_OPENMP\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# else\n\n# check-local:\n\n#\t@echo \"OpenMP tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"****************************************************************************\"\n\n#\t@echo \"****** make check not run here: configure --with-omni_omp_runtime_support=<path> ******\"\n\n#\t@echo \"****************************************************************************\"\n\n# endif\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/IS/Makefile.am" : {
      "ObjectId" : "facad045c02e74079cb0ebd1e4ab2f1cf5c47a4e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:C -rose:verbose 0 --edg:restrict\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/LU/Makefile.am" : {
      "ObjectId" : "1c943b686a45d66541583ed5676ea39784a08200",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with OpenMP\n\n# if ROSE_USE_OMNI_OPENMP\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES)\n\n# bin_PROGRAMS = copyExample\n\n# copyExample_SOURCES = copyExample.C\n\n# copyExample_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# else\n\n# check-local:\n\n#\t@echo \"OpenMP tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"****************************************************************************\"\n\n#\t@echo \"****** make check not run here: configure --with-omni_omp_runtime_support=<path> ******\"\n\n#\t@echo \"****************************************************************************\"\n\n# endif\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/MG/Makefile.am" : {
      "ObjectId" : "465a016c3b92c7befff29a6505fcb8477f0494c3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/Makefile.am" : {
      "ObjectId" : "7922835419ac7ba2062e2d35eab9652fe151b78b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\tDQ (9/27/2011): This is a redundant rule since there is a local make check rule in each subdirectory.\n\n#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/OpenMP_Translator/tests/npb2.3-omp-c/SP/Makefile.am" : {
      "ObjectId" : "356ad3dfc538a9cd5fb408c0747778f1f42b47a5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 --edg:restrict\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/POET_ROSE/Makefile.am" : {
      "ObjectId" : "a1d4a99bbf2653debecb615b0d9cb62877cc8fe4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/POET_ROSE/manycore-stencil/Makefile.am" : {
      "ObjectId" : "8d813a8eb1d7e030a6b25743734e7bc8119e6b43",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/POET_ROSE/manycore-stencil/benchmarks/Makefile.am" : {
      "ObjectId" : "e03f87501e04b8c95f66a67e67aa0cdad5437557",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/POET_ROSE/manycore-stencil/include/Makefile.am" : {
      "ObjectId" : "acab685b835ac1cafb0936f55baed8873b8fd943",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/POET_ROSE/test/Makefile.am" : {
      "ObjectId" : "988d18aa46fceaa695dc529e063a849b09990e87",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyOpt/Makefile.am" : {
      "ObjectId" : "f8a2cc4fea509f50cbb5c339ea96bf62d37a6541",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Makefile.am: this file is part of the PACE project.\n\n# <INSERT-LICENSE>\n\n#\n\n# Author:\n\n# Louis-Noel Pouchet <Louis-Noel.Pouchet@inria.fr>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/PolyOpt/benchmarks/Makefile.am" : {
      "ObjectId" : "3025daa82d5ad8bfaab0808d2a0aa04e5ad6f2a0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyOpt/doc/Makefile.am" : {
      "ObjectId" : "acf27616321ea713d10368c77fc046e4c0ab929e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: HEADER\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The following requires a fixed version of the Emacs 19.30 etags.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5,
      "Errorlog" : "line 20:33 token recognition error at: '\\1'\n"
    },
    "projects/PolyOpt/polyopt/Makefile.am" : {
      "ObjectId" : "ab0478f808f32d163b9b349ab7f42f65a45ca4af",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: Headers!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## LNP: FIXME: Remove this: Rose is deprecated.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/PolyOpt/src/Makefile.am" : {
      "ObjectId" : "9a15f606ffbc7e5c341f0e25294bb9eec6079ade",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: Insert headers!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/PolyOpt/tests/Makefile.am" : {
      "ObjectId" : "64ee3d6b3c9660c4f94b065d3b9f967c670157d0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Makefile.am: this file is part of the PACE/PolyOpt project.\n\n#\n\n# Author:\n\n# Louis-Noel Pouchet <pouchet@cse.ohio-state.edu>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check_SCRIPTS\t\t=\t\t\t\\\n# \tscripts/checker_passthru.sh\t\t\\\n# \tscripts/checker_plutotile.sh\t\t\\\n# \tscripts/checker_plutotilepar.sh\t\t\\\n# \tscripts/checker_plutotileparunroll.sh\t\\\n# \tscripts/checker_ptpup.sh\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Replace by program names when needed\n\n# check_PROGRAMS = ...\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############################################################################\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/PolyOpt2-deprecated/Makefile.am" : {
      "ObjectId" : "d9fa4be829def869acec9d0bea2e9f07b6e118a9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/PolyOpt2-deprecated/polyopt/Makefile.am" : {
      "ObjectId" : "b45a6ae777a83789e120e11de394f5bf5a7b6a83",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: Headers!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#libpolyopt_la_CPPFLAGS\t=\n\n#\t-DHAVE_LIBPOCC_UTILS $(ROSE_INCLUDES) \n\n#\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## LNP: FIXME: Remove this: Rose is deprecated.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/PolyOpt2-deprecated/src/Makefile" : {
      "ObjectId" : "008239b6d512eb3a6fe20373a6774943292c8b71",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile.in generated by automake 1.11.3 from Makefile.am.\n\n# src/Makefile.  Generated from Makefile.in by configure.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n\n# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n\n# Foundation, Inc.\n\n# This Makefile.in is free software; the Free Software Foundation\n\n# gives unlimited permission to copy and/or distribute it,\n\n# with or without modifications, as long as this notice is preserved.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n\n# PARTICULAR PURPOSE.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################################\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############################################################################\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tsource='$<' object='$@' libtool=no \\\n#\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \\\n#\t$(CXXCOMPILE) -c -o $@ $<\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tsource='$<' object='$@' libtool=no \\\n#\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \\\n#\t$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tsource='$<' object='$@' libtool=yes \\\n#\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \\\n#\t$(LTCXXCOMPILE) -c -o $@ $<\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\tsource='Main.cpp' object='PolyOpt-Main.o' libtool=no \\\n#\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \\\n#\t$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PolyOpt_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PolyOpt-Main.o `test -f 'Main.cpp' || echo '$(srcdir)/'`Main.cpp\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tsource='Main.cpp' object='PolyOpt-Main.obj' libtool=no \\\n#\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \\\n#\t$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PolyOpt_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PolyOpt-Main.obj `if test -f 'Main.cpp'; then $(CYGPATH_W) 'Main.cpp'; else $(CYGPATH_W) '$(srcdir)/Main.cpp'; fi`\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This directory's subdirectories are mostly independent; you can cd\n\n# into them and run `make' without going through this Makefile.\n\n# To change the values of `make' variables: instead of editing Makefiles,\n\n# (1) if the variable is set in `config.status', edit `config.status'\n\n#     (which will cause the Makefiles to be regenerated when you run `make');\n\n# (2) otherwise, pass the desired values on the `make' command line.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# -gt 0; then \\\n\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n\t      \"$$@\" $$unique; \\\n\t  else \\\n\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n\t      $$unique; \\\n\t  fi; \\\n\tfi\n",
        "Line" : 554,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 14,
      "Errorlog" : "line 94:31 token recognition error at: '\\1'\nline 96:30 token recognition error at: '\\1'\nline 679:34 token recognition error at: '\" || rm -f $(MAINTAINERCLEANFILES)\\nclean: clean-recursive\\n\\nclean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am\\n\\ndistclean: distclean-recursive\\n\\t-rm -rf ./$(DEPDIR)\\n\\t-rm -f Makefile\\ndistclean-am: clean-am distclean-compile distclean-generic \\\\n\\tdistclean-tags\\n\\ndvi: dvi-recursive\\n\\ndvi-am:\\n\\nhtml: html-recursive\\n\\nhtml-am:\\n\\ninfo: info-recursive\\n\\ninfo-am:\\n\\ninstall-data-am:\\n\\ninstall-dvi: install-dvi-recursive\\n\\ninstall-dvi-am:\\n\\ninstall-exec-am: install-binPROGRAMS\\n\\ninstall-html: install-html-recursive\\n\\ninstall-html-am:\\n\\ninstall-info: install-info-recursive\\n\\ninstall-info-am:\\n\\ninstall-man:\\n\\ninstall-pdf: install-pdf-recursive\\n\\ninstall-pdf-am:\\n\\ninstall-ps: install-ps-recursive\\n\\ninstall-ps-am:\\n\\ninstallcheck-am:\\n\\nmaintainer-clean: maintainer-clean-recursive\\n\\t-rm -rf ./$(DEPDIR)\\n\\t-rm -f Makefile\\nmaintainer-clean-am: distclean-am maintainer-clean-generic\\n\\nmostlyclean: mostlyclean-recursive\\n\\nmostlyclean-am: mostlyclean-compile mostlyclean-generic \\\\n\\tmostlyclean-libtool\\n\\npdf: pdf-recursive\\n\\npdf-am:\\n\\nps: ps-recursive\\n\\nps-am:\\n\\nuninstall-am: uninstall-binPROGRAMS\\n\\n.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) ctags-recursive \\\\n\\tinstall-am install-strip tags-recursive\\n\\n.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \\\\n\\tall all-am check check-am clean clean-binPROGRAMS \\\\n\\tclean-generic clean-libtool ctags ctags-recursive distclean \\\\n\\tdistclean-compile distclean-generic distclean-libtool \\\\n\\tdistclean-tags distdir dvi dvi-am html html-am info info-am \\\\n\\tinstall install-am install-binPROGRAMS install-data \\\\n\\tinstall-data-am install-dvi install-dvi-am install-exec \\\\n\\tinstall-exec-am install-html install-html-am install-info \\\\n\\tinstall-info-am install-man install-pdf install-pdf-am \\\\n\\tinstall-ps install-ps-am install-strip installcheck \\\\n\\tinstallcheck-am installdirs installdirs-am maintainer-clean \\\\n\\tmaintainer-clean-generic mostlyclean mostlyclean-compile \\\\n\\tmostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \\\\n\\ttags tags-recursive uninstall uninstall-am \\\\n\\tuninstall-binPROGRAMS\\n\\n\\n#############################################################################\\n\\n# Tell versions [3.59,3.63) of GNU make to not export all variables.\\n# Otherwise a system limit (for SysV at least) may be exceeded.\\n.NOEXPORT:\\n\u0000'\n"
    },
    "projects/PolyOpt2-deprecated/src/Makefile.am" : {
      "ObjectId" : "ab0c9bc99d52110677054110a093896307883da7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: Insert headers!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#PolyOpt_CFLAGS\t\t=\t\t\t\t\t\\\n#\t-DPOCC_ROOT_DIR=$(abs_top_srcdir)/pocc $(ROSE_CPPFLAGS) $(BOOST_CPPFLAGS)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/PolyOpt2/Makefile.am" : {
      "ObjectId" : "fccd60330e998aecd51dde6798aef9dac3189cab",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Makefile.am: this file is part of the PolyOpt project.\n\n# <INSERT-LICENSE>\n\n#\n\n# Author:\n\n# Louis-Noel Pouchet <Louis-Noel.Pouchet@inria.fr>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### LNP: From Pei-Hung. Should not be needed?\n\n#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#POCC_INSTALL = $(top_builddir)/src/3rdPartyLibraries/pocc\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/PolyOpt2/benchmarks/Makefile.am" : {
      "ObjectId" : "3025daa82d5ad8bfaab0808d2a0aa04e5ad6f2a0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyOpt2/doc/Makefile.am" : {
      "ObjectId" : "acf27616321ea713d10368c77fc046e4c0ab929e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: HEADER\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The following requires a fixed version of the Emacs 19.30 etags.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5,
      "Errorlog" : "line 20:33 token recognition error at: '\\1'\n"
    },
    "projects/PolyOpt2/polyopt/Makefile.am" : {
      "ObjectId" : "544909a5041140cd71caa5fcc9ac68c690eae6ba",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: Headers!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## LNP: FIXME: Remove this: Rose is deprecated.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/PolyOpt2/src/Makefile.am" : {
      "ObjectId" : "9098983872ed31cf94edec5de4bb58d49f103842",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## LNP: FIXME: Insert headers!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################################################################\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/PolyOpt2/tests/Makefile.am" : {
      "ObjectId" : "2e90406c608bc7efbac6aec9b46ef2d849c77e77",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Makefile.am: this file is part of the PACE/PolyOpt project.\n\n#\n\n# Author:\n\n# Louis-Noel Pouchet <pouchet@cse.ohio-state.edu>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check_SCRIPTS\t\t=\t\t\t\\\n# \tscripts/checker_passthru.sh\t\t\\\n# \tscripts/checker_plutotile.sh\t\t\\\n# \tscripts/checker_plutotilepar.sh\t\t\\\n# \tscripts/checker_plutotileparunroll.sh\t\\\n# \tscripts/checker_ptpup.sh\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Replace by program names when needed\n\n# check_PROGRAMS = ...\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############################################################################\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/PolyhedralModel/CMakeLists.txt" : {
      "ObjectId" : "ca22bba242343ae12910c9793ee4192ac321ebe2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/Makefile.am" : {
      "ObjectId" : "6329320a7bb49565921ddf14fa6eef8c634193be",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/docs/CMakeLists.txt" : {
      "ObjectId" : "ad954b1fe07c9b97cde4ec324bec130a6251838f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#EXTRA_DIST= biblio.docs doxy.conf intro_poly_model.docs \\\n\n#illustrations/Polyhedron/domain-poster.eps  \\\n\n#illustrations/Polyhedron/domain-poster.pdf \\\n\n#illustrations/Polyhedron/empty.png \\\n\n#illustrations/Polyhedron/full.png \\\n\n#illustrations/Polyhedron/i_eq_i.png \\\n\n#illustrations/Polyhedron/j_eq_0.png \\\n\n#illustrations/Polyhedron/vp-dep.eps \\\n\n#illustrations/Polyhedron/vp-dep.pdf \\\n\n#illustrations/Polyhedron/vp-dep.png\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/PolyhedralModel/docs/Makefile.am" : {
      "ObjectId" : "1b81226e2de511989a57153f1371666c62e72a75",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/CMakeLists.txt" : {
      "ObjectId" : "9379a79c96342ea5c1e7983a53f3bc65d13a72b1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/Makefile.am" : {
      "ObjectId" : "e37f106251f8682cd5f2d3c5127b4858d91fdba7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/loop-ocl/CMakeLists.txt" : {
      "ObjectId" : "4b052d1364bb2048f486c104a88f7ba4ba1e447a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/loop-ocl/Makefile.am" : {
      "ObjectId" : "aa50b70a26837f767e1f03a7ce39022d34b7a144",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/polygraph/CMakeLists.txt" : {
      "ObjectId" : "1aa3084e1629c900ba1b29621bee1da1377db92e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/polygraph/Makefile.am" : {
      "ObjectId" : "910f27501366911bc03d6759ad55f77802c0fddd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/spmd-generator/CMakeLists.txt" : {
      "ObjectId" : "de566c590f22779c8cb5ba811ba893be96f9a044",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/spmd-generator/Makefile.am" : {
      "ObjectId" : "225bd39cf2a80408fc88b80e78acabcac2df3b66",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/utils/CMakeLists.txt" : {
      "ObjectId" : "64ab2b5b1ab01769aa7e8cb524f371c71912347a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/projects/utils/Makefile.am" : {
      "ObjectId" : "6add969eb7a3193670880eb622a3be7f9fae0e2c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/src/CMakeLists.txt" : {
      "ObjectId" : "ffcdfe31c98051ca2fcd6c07c64edb0403da007a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  libPolyModelRoseFromPolyDesc.la\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/PolyhedralModel/src/Makefile.am" : {
      "ObjectId" : "04fbbd5491632710c86cae64e021d7ff1ae59ffe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#  libPolyModelRoseFromPolyDesc.la\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COMMON directory\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MATHS directory\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# SYSTEM directory\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ROSE directory\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ROSE-PRAGMA directory\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE-KERNEL directory\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ROSE-MAX-COVER directory\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ROSE-FROM-POLY-DESC directory\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#libPolyModelRoseFromPolyDesc_la_SOURCES         = \n\n#libPolyModelRoseFromPolyDesc_la_CXXFLAGS        =  $(CXXFLAGS) \\\n#  -I$(PPL_PATH)/include/ \\\n#  $(ROSE_INCLUDES)\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#if ROSE_USE_CLOOG\n\n#  libPolyModelRoseFromPolyDesc_la_CXXFLAGS     += -DCLOOG_INT_GMP -I$(CLOOG_PATH)/include\n\n#endif\n\n#libPolyModelRoseFromPolyDesc_la_LIBADD          = \n\n#if ROSE_USE_CLOOG\n\n#  libPolyModelRoseFromPolyDesc_la_LIBADD       += -L$(CLOOG_PATH)/lib -lcloog-isl\n\n#endif\n\n#libPolyModelRoseFromPolyDesc_la_includedir      = $(includedir)/polyhedral-model/rose-from-poly-desc\n\n#libPolyModelRoseFromPolyDesc_la_include_HEADERS = \n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# SCOPLIB directory\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "projects/PolyhedralModel/tests/CMakeLists.txt" : {
      "ObjectId" : "cb19659717ae628c8bdf16f56495b1819f98fb18",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(rose-pragma)\n\n#add_subdirectory(rose-max-cover)\n\n#add_subdirectory(cuda-kernel)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/PolyhedralModel/tests/Makefile.am" : {
      "ObjectId" : "cd7609de2fffc74c977c6f647da64efd467bc2ee",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/tests/cuda-kernel/Makefile.am" : {
      "ObjectId" : "52b4a52e752fa645c12b0d47a3bfcdae579dcbb8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/tests/rose-max-cover/Makefile.am" : {
      "ObjectId" : "f2a74b686906c264956e9f19dd827ec0faa85702",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/PolyhedralModel/tests/rose-pragma/Makefile.am" : {
      "ObjectId" : "33ee7ec50eea06f561ffb1951a9a511e28f61ff2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#include ../../makefile.inc\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include ../../src/test-rose-pragma/make_rule.inc\n\n#include ../../src/rose-pragma/make_rule.inc\n\n#include ../../src/rose/make_rule.inc\n\n#include ../../src/common/make_rule.inc\n\n#include ../../src/maths/make_rule.inc\n\n#include ../../src/system/make_rule.inc\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/PowerAwareCompiler/CMakeLists.txt" : {
      "ObjectId" : "1a485cb26766332401b8ceb9711651792b0e9c04",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/PowerAwareCompiler/Makefile.am" : {
      "ObjectId" : "752643594bd2adbe24a60a5ff4d9d31c4e09372b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Location of Thrifty simulator\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Example of running the simulator\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Required flags to build executables for use with Thrifty simulator.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This can be empty for now since we don't have ROSE set up to \n\n# take a path to the MIPS cross-compilers so that we can test \n\n# this using Hudson.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/QtDesignerPlugins/CMakeLists.txt" : {
      "ObjectId" : "c1e568efaa3a32345688f3af1a1c6f054bb53703",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/QtDesignerPlugins/Makefile.am" : {
      "ObjectId" : "e43e649053816017caaeb95c9eb6ea4d18d32326",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ QtDesignerPlugins Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/RTC/CMakeLists.txt" : {
      "ObjectId" : "a3bb236b5dcca51a56ccfb4084a9f4da2528e00a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/RTC/Makefile.am" : {
      "ObjectId" : "b55bd9043ef196995368974563a154a390096c0a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-ldl $(LIBLTDL)\n",
        "Line" : 8,
        "CharPositionInLine" : 40
      },
      "1" : {
        "Text" : "#.PHONY: plainrun instrun\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#check: plainrun instrun \n\n#\t@echo \"Executing commands for check\"\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#plainrun: RTC\n\n#\tfor test in $(RTED_TESTS); do \\\n#\t\techo \"$$test\"; \\\n#\t\techo \"./RTC -plain -rose:o $$test.out.c $$test.cpp;\"; \\\n#\t\t./RTC -plain -rose:o $$test.out.c $$test.cpp; \\\n#\t\t./a.out;\\\n#\tdone\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#instrun: RTC\n\n#\techo \"Instrumented Run\"; \\\n#\tfor test in $(RTED_TESTS); do \\\n#\t\t./RTC -rose:o $$test.out.c $$test.cpp ptr_lib.o; \\\n#\t\tg++ $$test.out.c ptr_lib.o; \\\n#\t\t./a.out >& instrun.txt; \\\n#\tdone\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#runclean:\n\n#\trm -f instrun.txt plainrun.txt\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/RTC2/Makefile.am" : {
      "ObjectId" : "f0a5e820c9a2a94ed2c5fd23f5f05df7819738ea",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Runtime Error Checking C Programs (RTC)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/RTC2/src/Makefile" : {
      "ObjectId" : "5bc9f8e501e2e0849ae7986765eb46955bd5b852",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Example Makefile for ROSE users\n\n# This makefile is provided as an example of how to use ROSE when ROSE is\n\n# installed (using \"make install\").  This makefile is tested as part of the\n\n# \"make distcheck\" rule (run as part of tests before any CVS checkin).\n\n# The test of this makefile can also be run by using the \"make installcheck\"\n\n# rule (run as part of \"make distcheck\").\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of include directory after \"make install\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Location of Boost include directory\n\n#BOOST_CPPFLAGS = -pthread -I/usr/include\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Location of Dwarf include and lib (if ROSE is configured to use Dwarf)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#CXXCPPFLAGS           = @CXXCPPFLAGS@\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Location of library directory after \"make install\"\n\n# ROSE_LIB_DIR = /opt/rose-edg4/install/lib\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#ROSE_LIB_DIR = /opt/rose-edg4/build/src\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Default make rule to use\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Example suffix rule for more experienced makefile users\n\n# .C.o:\n\n#\tg++ -c -O0 -I$(ROSE_INCLUDE_DIR) -o $@ $(@:.o=.C)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compile the exampleTranslator using the file identityTranslator.C\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# tests\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# metadata lib - duplicates the target in ../tests/Makefile\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# clean\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "projects/RTC2/src/Makefile.am" : {
      "ObjectId" : "7dd3ebeb8a554872e3c2738735170c701af3abf4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Runtime Error Checking C Programs (RTC)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/RTC2/tests/Makefile" : {
      "ObjectId" : "5f074bad220547c0dab48b7e8208b40a76806669",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Example Makefile for ROSE users\n\n# This makefile is provided as an example of how to use ROSE when ROSE is\n\n# installed (using \"make install\").  This makefile is tested as part of the\n\n# \"make distcheck\" rule (run as part of tests before any CVS checkin).\n\n# The test of this makefile can also be run by using the \"make installcheck\"\n\n# rule (run as part of \"make distcheck\").\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of include directory after \"make install\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## Specified tests below\n\n##\n\n## tests are suffixed with either good (should run w/o error)\n\n## or fail (should terminate with error code).\n\n##\n\n## notes: c_A_10_d.c is an RTED pointer test (c/pointer). Not sure what is\n\n##                   wrong with it. Tagged as good.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## BUGS where instrumentation fails\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## BUGS where runtime yields false po\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# tests\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# RTC\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# metadata lib\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# instrument codes\n\n# - depending on the location of the test files,\n\n#   one of the following rules should trigger for every test\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# compile instrumented codes\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# link instrumented codes\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# clean\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "projects/RTC2/tests/Makefile.am" : {
      "ObjectId" : "6a25221013d2ef807beebe3e5dfe0ae5ab8d0fc3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##\n\n## Specified tests below\n\n##\n\n## tests are suffixed with either \".fail\" or \".good\"\n\n## indicating whether a test should run w/ or w/o error.\n\n##\n\n## notes: c_A_10_d.c is an RTED pointer test (c/pointer). Not sure what is\n\n##                   wrong with it. Tagged as good.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## BUGS where instrumentation fails\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## BUGS where runtime yields false positives or false negatives\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#~ RTC_TEST_OBJECTS = \\\n#~ \t$(patsubst %.m,output/rose_%.cc,$(ACTIVE_TESTS))\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# instrument codes\n\n# - depending on the location of the test files,\n\n#   one of the following rules should trigger for every test\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compile instrumented codes\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# link instrumented codes\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# general things\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/RTC2/tests/unsorted/par_examples/a.out_pthread-link/Makefile" : {
      "ObjectId" : "621539fcae4890fa3f2a29bf746ae107cfc0e962",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile generated by upcc, the Berkeley UPC compiler.\n\n# The files in this directory were created to link the executable \n\n#   'a.out'.  \n\n#\n\n# You may delete this directory at any time, but keeping it may speed \n\n# up building the application again.\n\n#\n\n# Why this is here:  under pthreads, all UPC .o files are really still C source\n\n# files.  At link time we must create a single large 'struct' that contains all\n\n# the thread-local variables in the application, and ensure that 'real' .o\n\n# files have been compiled with that struct definition.  We use this directory\n\n# and Makefile to avoid recompiling every source file each time you link:\n\n# recompiling all files is only required if the struct has changed (i.e. you\n\n# have added, removed, or changed an unshared global/static variable in your\n\n# application).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sort by alignment, then eliminate duplicate tentative entries with same\n\n# size/alignment.  Other duplicate names will cause linker error (good)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/RTC2/tests/unsorted/par_examples/upc_pthread_hello_world_translated.c_pthread-link/Makefile" : {
      "ObjectId" : "d5aeee65dd5641100afeb43f95a13aeff103e249",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile generated by upcc, the Berkeley UPC compiler.\n\n# The files in this directory were created to link the executable \n\n#   'upc_pthread_hello_world_translated.c'.  \n\n#\n\n# You may delete this directory at any time, but keeping it may speed \n\n# up building the application again.\n\n#\n\n# Why this is here:  under pthreads, all UPC .o files are really still C source\n\n# files.  At link time we must create a single large 'struct' that contains all\n\n# the thread-local variables in the application, and ensure that 'real' .o\n\n# files have been compiled with that struct definition.  We use this directory\n\n# and Makefile to avoid recompiling every source file each time you link:\n\n# recompiling all files is only required if the struct has changed (i.e. you\n\n# have added, removed, or changed an unshared global/static variable in your\n\n# application).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sort by alignment, then eliminate duplicate tentative entries with same\n\n# size/alignment.  Other duplicate names will cause linker error (good)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/RTED/CppRuntimeSystem/DebuggerQt/Makefile.am" : {
      "ObjectId" : "0ee79e4973bbcfe757a92b06873197952c546a7f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RTED/CppRuntimeSystem/Makefile.am" : {
      "ObjectId" : "45c0c3b6f7e9537f037c7b82bfec378fd087d0fe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RTED/Makefile.am" : {
      "ObjectId" : "59a95495605a4792e02102020f16065068503dff",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# required/upc.h\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Currently, we exclude 32bit and MacOS\n\n#if !OS_VENDOR_REDHAT_32BIT\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n\n# tps removed -pthreads from AM_CPPFLAGS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Qt Debugger is now linked into CppRuntimeSystem\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This test program does not require the rest of ROSE so it can be handled locally\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#$(top_builddir)/projects/RTED/CppRuntimeSystem/libCppRuntimeSystem.a\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#$(LIBTOOL) --tag=CXX  --mode=link $(AM_PROG_UPC)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# \\pp included: RuntimeSystem.h RuntimeSystem.cpp\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# \\pp was: runtimeCheck_LDADD =  $(ROSE_LIBS) CppRuntimeSystem/libCppRuntimeSystem.la\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (7/16/2011): rted_source/tests/Cxx/io/cxx_stream2.cpp is failing.\n\n#  $(srcdir)/tests/Cxx/io\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t\t\t\t $(srcdir)/tests/Cxx/templates # temporarily removed b/c unparsed code\n\n#                                      # cannot be fed into GCC4.3\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\t\t $(rted_path)/C/floating_point_errors \\ \\pp excluded from tests b/c do not work\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\t\t $(rted_path)/C++/floating_point_errors \\\t\\pp excluded from tests b/c do not work\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#~\t    $(rted_path)/UPC/E_Outofbnds  arrays as arguments to std function\n\n#~      $(rted_path)/UPC/A_Deadlcks   not our task\n\n#~      $(rted_path)/UPC/B_RacCond    not our task\n\n#~      $(rted_path)/UPC/F_Argmterr   not yet handled\n\n#~      $(rted_path)/UPC/I_Wronorder  not yet handled\n\n#~      $(rted_path)/UPC/J_Nonportbl  not yet handled\n\n#~      $(rted_path)/UPC/K_Warnings   not yet handled\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# rule to copy the sources into our current working directory\n\n#------------------------------------------------------------------------------\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#testcases in $(top_srcdir)/projects/RTED/tests\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#testcases in $(top_srcdir)/projects/RTED/tests\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#testcases in $(top_srcdir)/projects/RTED/tests\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#testcases in rted distribution\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# TODO 2: Remove this once the assert( sym != null ) issue is fixed.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# rules to create _rose.c and _s_rose.c files\n\n#------------------------------------------------------------------------------\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# parameters:\n\n#  1: file extension (.c, .cpp, .f, ... )\n\n#  2: compile command\n\n#  3: rose option, for example: C_Only\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#TRANSFORMING_FILES += echo -n \"$(2) -g -o $(patsubst %_rose$(strip $(1)), %.bin, $@) \\\n#\t\t      $(filter rted_source/%$(strip $(1)), $^) \\\n#\t\t      -I$(dir $(patsubst rted_source/%, $(rted_path)/%, $@)) \\\n#\t\t      -I$(dir $(patsubst rted_source/%, $(srcdir)/%, $@)) \\\n#\t\t      -I$(top_builddir) -I$(srcdir) $(RTED_LIB) \";\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#was:TRANSFORMING_FILES += echo -n \"   adding line information ... \";\n\n#was:TRANSFORMING_FILES += cat rose_$(notdir $(patsubst %_rose$(strip $(1)), %$(strip $(1)), $@ ) ) | \\\n#was:\t\t\t  nl -p -b 'a' | \\\n#was:\t\t\t  sed -e 's/^ \\+\\([0-9]\\+\\)\\t\\(.*\\)x%%x\\(.*\\)/\\2\\1\\3/; t end; s/^ \\+\\([0-9]\\+\\)\\t//; : end' > $@;\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#was: TRANSFORMING_FILES += cat rose_$(notdir $(patsubst %_rose$(strip $(1)), %$(strip $(1)), $@ ) ) > $@;\n\n#was: TRANSFORMING_FILES += rm rose_$(notdir $(patsubst %_rose$(strip $(1)), %$(strip $(1)), $@ ) );\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# \\pp \\todo remove the mv and have the Makefile operate on rose_* instead of *_rose files\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#was:\t\t\t    sed -e 's/^ \\+\\([0-9]\\+\\)\\t\\(.*\\)x%%x\\(.*\\)/\\2\\1\\3/; t end; s/^ \\+\\([0-9]\\+\\)\\t//; : end' > $(patsubst %_rose$(strip $(1)), %_s_rose$(strip $(1)), $@ ); \\\n#was:\t\t      fi;\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#was:TRANSFORMING_FILES += rm -f rose_$(notdir $(patsubst %_rose$(strip $(1)), %_s$(strip $(1)), $@ ) );\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# rules to create the binary files\n\n#------------------------------------------------------------------------------\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# parameters:\n\n#  1: file extension (.c, .cpp, .f, ... )\n\n#  2: compile command\n\n#  3: additional parameters, like linking against debugger ...\n\n#COMPILING_RUNTIME_SYSTEM =  @echo -n \"$(2) -g -o $@ $(filter rted_source/%$(strip $(1)), $^) \\\n#\t\t\t\t      $(srcdir)/$(RTS) \\\n#\t\t\t\t      $(AM_CPPFLAGS) \\\n#\t\t\t\t      -I$(dir $(patsubst rted_source/%, $(rted_path)/%, $@)) \\\n#\t \t\t              -I$(dir $(patsubst rted_source/%, $(srcdir)/%, $@)) \\\n#\t\t\t\t      -I$(top_builddir) \\\n#\t\t\t\t      -I$(srcdir) \\\n#\t\t\t\t      $(3) $(RTED_LIB)\";\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# TODO: make this aware of different file extensions ...\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# parameters:\n\n#  1: file extension (.c, .cpp, .f, ... )\n\n#  2: location to search ( $(srcdir), $(rted_path), ... )\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# was: upcrun -quiet -n 4 ./$(filter rted_source/%.bin, $?) 2> $$RESULT;\n\n#\t\t\t./$(filter rted_source/%.bin, $?) -n 4 2> $$RESULT;\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#   to shared (as in \"int shared * shared\", where a stack value -the pointer-\n\n#   cannot be shared)\n",
        "Line" : 879,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Test bugs prevent us from finding expected errors\n\n# BUG Description\n\n# c_C_10_2_a_L  (F/D) unexpected out of bounds access (allocates int, means other type[L,F,D])\n\n# c_C_10_2_b_L  same\n\n# c_C_10_4_a_L  same\n\n#               note, the S version does not have a bug, b/c the array is allocated\n\n#               in terms of int, thus no out of bounds access occurs.\n\n# c_C_10_4_b_L  same\n\n# c_C_11_2_a_L  same\n\n# c_C_11_2_b_L  same\n\n# c_C_11_4_a_L  same (see c_C_10_4_a_S)\n\n# c_C_11_4_b_L  same\n\n# c_H_2_c       forward declares a function, but calls that function differently in the call\n\n# c_H_1_d       wrong line number for expected errors\n\n# c_H_7_b       memory is allocated using upc_global_alloc, but released with free (C library function)\n",
        "Line" : 1140,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Late bugs do not prevent us from finding expected errors (the unexpected bug\n\n# occurs after the expected one).\n",
        "Line" : 1188,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 1227,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#checkfast:\truntimeCheck\n",
        "Line" : 1233,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DQ (7/16/2011): These are the tests that are failing with the new name qualification.\n\n#\t\t\t\t$(patsubst $(srcdir)/%, run/%, $(RTED_CPP_LOCAL_TEST_DIRS))\n",
        "Line" : 1242,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# DQ (7/16/2011): These are isolated tests that fail for the new name qualification (some progress).\n\n# test_name_qualification_1: $(patsubst $(srcdir)/%, run/%, $(RTED_CPP_LOCAL_TEST_DIRS))\n\n# test_name_qualification_1: $(patsubst $(srcdir)/%, run/%, $(srcdir)/tests/Cxx/io)\n\n# RTED_CPP_LOCAL_TEST_DIRS_TEST = $(srcdir)/tests/Cxx/io $(srcdir)/tests/Cxx/types\n\n# test_name_qualification_1: $(patsubst $(srcdir)/%, run/%, $(RTED_CPP_LOCAL_TEST_DIRS_NQ_TEST))\n",
        "Line" : 1245,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# run/C/floating_point_errors\n",
        "Line" : 1255,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# DQ (7/16/2011): Something in here fails\n\n#\t\t\t\trun/C++/array_index_out_of_bound\n",
        "Line" : 1275,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# DQ (11/10/2009): Comment out, with permission from Thomas, the RTED test until we\n\n# can explore the RedHat version 5 problem, 32-bit problem, and Mac OSX problem.\n\n# check-local: runtimeCheck checkfast\n",
        "Line" : 1279,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#endif\n",
        "Line" : 1291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46
    },
    "projects/RaaS/Makefile.am" : {
      "ObjectId" : "ed859a9f0c535e3d2682882dfccef608705c98c5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RaaS/examples/demo/Makefile.am" : {
      "ObjectId" : "2746fb567702b4dade63c412a3a6d44f386ae22a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RaaS/include/nlohmann/Makefile.am" : {
      "ObjectId" : "a430461f1048fb38493b39c89cffc7d03c7860de",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RaaS/src/Makefile.am" : {
      "ObjectId" : "9f84858cf63cfc8adcbb7d271e3a6e676349630d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CompDBtoAstIO_LDADD= -L$(builddir)/../lib $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/Rose-To-LLVM/Makefile.am" : {
      "ObjectId" : "d2cdc407953a6cda7ed750b13cc74ff4089a6df1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Rose-To-LLVM/src/Makefile.am" : {
      "ObjectId" : "65837c3dc2102dd48bf3d5c2e542ae2f61a0f796",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#bin_PROGRAMS\t\t= rose2llvm fold\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#rose2llvm_LDFLAGS  = \\\n#  $(ROSE_LIBS) $(LLVM_LDFLAGS)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#fold_SOURCES  = fold.cpp\n\n#fold_CXXFLAGS = -Wno-deprecated\n\n#fold_CPPFLAGS = \\\n#  -I$(srcdir)/rosetollvm/include \\\n#  $(LLVM_CPPFLAGS) -std=c++11\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#fold_LDFLAGS  = \\\n#  $(ROSE_LIBS) $(LLVM_LDFLAGS)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#fold_LDADD = \\\n#  $(builddir)/rosetollvm/librosetollvm.la \\\n#  $(LLVM_LIBS)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#############################################################################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\trm -rf *.lo .libs rose2llvm fold \n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/Rose-To-LLVM/src/rosetollvm/Makefile.am" : {
      "ObjectId" : "c4738963e8e4884f8d9f38a10af781aa86a15778",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#librosetollvm_la_LDFLAGS = $(ROSE_LIBS) $(LLVM_LDFLAGS)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/Rose-To-LLVM/tests/Makefile.am" : {
      "ObjectId" : "2d4f0a52d8d0fef7bf4e2cf3008d396014085b6e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n##################################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/RoseBlockLevelTracing/Makefile.am" : {
      "ObjectId" : "031c70e8a4c699abec442427650c7d8cd3a697df",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\ttests\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/RoseBlockLevelTracing/src/Makefile.am" : {
      "ObjectId" : "7328fdde0da6e8d8e90503f7d4aaa78f4b4b3a04",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### TODO: enable the line below once the bug on inlined class is fixed. I have reported it to Dan in an email on Sep/18/2013. \n\n### RoseBlockLevelTracing_TEST_TARGETS = $(RoseBlockLevelTracing_TOY_TARGETS)  $(RoseBlockLevelTracingCompileOnly_TEST_TARGETS)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/RoseBlockLevelTracing/tests/Makefile.am" : {
      "ObjectId" : "7272597f3a66b9f18db56b661d8fe787d29b8e4b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/RosePolly/Makefile.am" : {
      "ObjectId" : "27e08fbb034c2428ae3891b3da479d516e753290",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  rosepoly\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GMP_PATH = /Users/konstantinid1/Development/opt\n\n# ISL_PATH = /Users/konstantinid1/Internship/Tools/ISL\n\n# CLOOG_PATH = /Users/konstantinid1/Internship/Tools/CLOOG\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -L$(GMP_PATH)/lib    -lgmp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  rosepoly.la\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/RosePolly/examples/Makefile" : {
      "ObjectId" : "1bf4828edc3cfad9dd809040cf428a36367f146d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/fdtd-2d/Makefile.am" : {
      "ObjectId" : "dc30f3c49e8a30df10412256bbb826b32e9e22b7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/gemver/Makefile.am" : {
      "ObjectId" : "c1384f41d079367fc16328bbf232d7dd05566160",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/jacobi-1d-imper/Makefile.am" : {
      "ObjectId" : "06f2836a953a86034fafdb69033eca1d326cf584",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/jacobi-2d-imper/Makefile.am" : {
      "ObjectId" : "2153000262e45bd3b367471e787ae1cfc711abc6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/lu/Makefile.am" : {
      "ObjectId" : "8718680702aff6e593170bfee5c68e1a444b59dd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/matmul/Makefile.am" : {
      "ObjectId" : "ac37fd8f7e88b316b9da3e50e18f00109c235f15",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/mvt/Makefile.am" : {
      "ObjectId" : "e04c2c6fc9171e6f78d49ac1eb3dca71662d2acc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/seidel/Makefile.am" : {
      "ObjectId" : "d73d96b42d56ca7ec8e8d59fb0c86d7e9c581c6f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/examples/template/Makefile.am" : {
      "ObjectId" : "672b26e027b02345cc3667c23b9c515789b8fd91",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RosePolly/include/rosepoly/Makefile.am" : {
      "ObjectId" : "dcad672ab2a26e1ee90353fd75aba2091e176fe1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RoseQt/AstViewer/CMakeLists.txt" : {
      "ObjectId" : "a3f620bd4cf2647a02875e0f644ce45bdcef6357",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/RoseQt/AstViewer/Makefile.am" : {
      "ObjectId" : "1de0a449e88457306b0dd192faec95ab61bce665",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/RoseQt/CMakeLists.txt" : {
      "ObjectId" : "2d9e610d5976b805987c8bef87e9990b0bd7bfcf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/RoseQt/Makefile.am" : {
      "ObjectId" : "1a6ce072194c37a70fd1f1872d66223bd662b8d3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ demo Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#AM_CPPFLAGS += $(ROSEQT_INCLUDES) $(QT_INCLUDES) $(ROSE_INCLUDES) $(ROSEHPCT_DEP_INCLUDES)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/RoseQt/TextEditPainter/CMakeLists.txt" : {
      "ObjectId" : "1e137fdb561a6d5e7fe322ed14f218404eed6bf1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Libraries\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Type of build:\n\n#set(CMAKE_BUILD_TYPE Debug)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Compiler Flags\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# File Listing\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# End File Listing\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# -----------------------  EXECUTABLES AND LINKING ---------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Main Programm\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/RoseQt/TextEditPainter/Makefile.am" : {
      "ObjectId" : "5924daa4d04e90f841bc8c210245efa4480e7dec",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ TextEditPainter Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#only included for the Qt compiler rules\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/SATIrE/Makefile.am" : {
      "ObjectId" : "f6bddaf23ab3c7aa7434e972f80105fefe4206ea",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#docs\n",
        "Line" : 10,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "#docs\n",
        "Line" : 12,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# clang connection is currently not maintained and may be discontinued\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MS 2012: This list intentionally circumvents the ROSE policy /scripts/policies/UnusedSources.pl\n\n# most of these files are test files and iterated on by a test script, but\n\n# not installed. There is no (good) reason to mention those in a Makefile\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# end of list of unlisted SATIrE test files\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/SATIrE/docs/Makefile.am" : {
      "ObjectId" : "c1cc92135093911486597b3ab630bf2163add0fc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# pig-doc is not using bibtex, thus we make these to steps explicit here\n\n# without invoking bibtex (you cannot invoke bibtex without bibliography)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We can't use pdlatex to include *.ps graphics\n",
        "Line" : 68,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "# We can't use pdlatex to include *.ps graphics\n",
        "Line" : 74,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# ---------------------------------------------------------------------\n\n# TERMITE documentation\n\n# ---------------------------------------------------------------------\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# underscores confuse the machina!\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# --------------------------------------------------\n",
        "Line" : 109,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# MS: deactivated HTML here (target is still available)\n",
        "Line" : 111,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : "# Sadly, ltx2html does not understand the listings package...\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# LaTeX -> HTML from SWI-Prolog\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# -----------------------------------------------------------------\n",
        "Line" : 279,
        "CharPositionInLine" : 5
      },
      "10" : {
        "Text" : "# ----------------------------------------------------------------\n",
        "Line" : 284,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 11,
      "Errorlog" : "line 154:54 token recognition error at: '\\0'\nline 155:37 token recognition error at: '\\1'\nline 156:43 token recognition error at: '\\1'\nline 160:7 token recognition error at: '\\e'\nline 164:7 token recognition error at: '\\b'\nline 168:7 token recognition error at: '\\e'\nline 172:7 token recognition error at: '\\b'\nline 176:7 token recognition error at: '\\e'\n"
    },
    "projects/SATIrE/examples/Makefile.am" : {
      "ObjectId" : "760a7877a8f0f52c91bb7ee22b371a46d906ce76",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# The tests are now split into separate targets to facilitate a\n\n# parallelized run of the testsuite (make -j #N installcheck)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MS: deactivated loopbounds test (9.1.2012) [to be fixed]\n\n#TESTS_WITH_PAG += itvl_stresstest loopbounds\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the freshly copied TEST0.c has the permissions of the original file, which\n\n# is read-only in distcheck mode\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# some test cases need header files...\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MS FIX: if SWI Prolog is not available, termite_lint is not built.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# MS FIX: if SWI Prolog is not available, termite_lint is not built.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tcp $(top_srcdir)/examples/*/tests/* $(testdir)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# known fails...\n\n#$(MAKE) -j1 $(patsubst %.C,%.termite,$(wildcard $(top_srcdir)/examples/*/tests/*.C))\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#($(CC) -std=c99 -E -I$(BLASTHOME)/test/headers intvlassert.c > intvlassert.i;\n\n#$(BLAST) -clp intvlassert.i -main main)\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cd $(testdir) ; bash testsuite/testsuite.sh interval/interval testsuite\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/SATIrE/src/Makefile.am" : {
      "ObjectId" : "98ab1c863ce411a9b2e0f4869695c583aa8f9662",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/analyzer/Makefile.am" : {
      "ObjectId" : "7d8fdaf86f8b44742699a3be83ada0a7bb3f1530",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/analyzer/annotation/Makefile.am" : {
      "ObjectId" : "35663767a2b86c094d9bc24a33b3a9f5eb22da28",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# not necessary because of pure template code\n\n#noinst_LIBRARIES = libStatementAttributeTraversal.a\n\n#libStatementAttributeTraversal_a_SOURCES = StatementAttributeTraversal.C\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/SATIrE/src/analyzer/astaccess/Makefile.am" : {
      "ObjectId" : "a1cbb4aa7adbde52c0dc6959625f45aaeeca446b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Does PAG expect those really to be in the same directory as the\n\n# the includes, our could we put them into $(prefix)/share/ ?\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#dist_pkgdata_DATA = edges syn pagoptions\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#syn edges pagoptions\n",
        "Line" : 64,
        "CharPositionInLine" : 22
      },
      "3" : {
        "Text" : "# This trick won't work with a newer automake any more -- adrian\n\n#syntree.o: satire/syntree.c satire/syntree.h\n\n#\t$(CXXCOMPILE) -c -o syntree.o -Isatire satire/syntree.c\t \n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# An ugly hack indeed, but haven't found a better way \n\n# to confine those header files into include/satire\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# dummy dependency for parallel builds\n",
        "Line" : 84,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 6
    },
    "projects/SATIrE/src/analyzer/astnumbering/Makefile.am" : {
      "ObjectId" : "53a2e005368ddf100979f0600dac20309b6e03b8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/analyzer/commandlineinterface/Makefile.am" : {
      "ObjectId" : "ef0babcb4fcadeb7ec908d2b6a94638ac42b5652",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/analyzer/icfgbuilder/Makefile.am" : {
      "ObjectId" : "6bf57935e399ae1b92923e67bee1b4814d965e20",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Black magic: There is a header file naming conflict between ROSE and PAG,\n\n# both have a \"general.h\" header. SATIrE won't build with some versions of\n\n# PAG unless the PAG headers have priority in this directory.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/SATIrE/src/analyzer/provided/Makefile.am" : {
      "ObjectId" : "e058837fd6642a8b4d0b4a24043b8bb42989a405",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/analyzer/provided/aslan/Makefile.am" : {
      "ObjectId" : "5766b346016a8f960867e96e78b7f5ed7dc3e9a0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/src/analyzer/provided/dataflow/Makefile.am" : {
      "ObjectId" : "a47b2cf3f8295973dfb7120682310bc96f15f662",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This Makefile is responsible for building the libsatiredfa library that\n\n# contains pre-built versions of some of the PAG data-flow analyzers that\n\n# come with SATIrE. These analyzers become part of libsatire and can be\n\n# called easily from programs using SATIrE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These are the analyzers we want to put into libsatiredfa. Add the analyzer\n\n# name to this line, ignore the rest of this file, and try it out. If\n\n# something doesn't work, you can still come back and mess around with the\n\n# stuff below.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----- no need to look beyond this line -----\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# See if there is really anything to build.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is what we're producing here.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Explicit rule to override default (which assumes a certain C source file).\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Stuff we need in order to build satiredfa.C\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All the objects and archives we want to go into libsatiredfa, based on\n\n# $(ANALYZERS) specified above.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Configure the newanalysis script and Makefile template for use during the\n\n# build process.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# let satire-libtool point to builddir instead of $prefix/bin/satire-libtool\n",
        "Line" : 56,
        "CharPositionInLine" : 72
      },
      "10" : {
        "Text" : "# We manually instantiate newanalysis.in and Makefile-template.in according\n\n# to our needs here; also, we copy all the SATIrE headers, and some other\n\n# files to include, to a local directory here. Analyzer objects are built\n\n# with -fPIC so we can put them into a shared library.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Build an analyzer directory for each analysis and initialize it using the\n\n# newanalysis script.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Each foo/foo.a depends on the foo directory; each foo/foo_implementation.o\n\n# depends on foo/foo.a (because building foo.a calls PAG and thus also\n\n# generates the headers needed to build foo_implementation.o). Note that we\n\n# can build these objects, but we would not be able to link a complete\n\n# executable, as the SATIrE libraries do not exist yet.\n\n# The .SECONDEXPANSION feature of GNU make allows us to use quoted special\n\n# variables in the target list -- expanding these twice gives the desired\n\n# result.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The analyzer archive foo/foo.a is built by the default Makefile generated\n\n# by SATIrE. That archive also contains a copy of syntree.o; however, since\n\n# syntree.o is already contained in libsatire, we delete it from the\n\n# archive.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The analyzer class implementation foo/foo_implementation.o is also built\n\n# by calling the corresponding rule in the Makefile generated by SATIrE.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Each analyzer's foo_implementation.h header is generated by newanalysis\n\n# when the analyzer directory is created above. In satiredfa.h, we collect\n\n# include directives for each of these analyzers to make them easy to\n\n# include elsewhere.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "projects/SATIrE/src/analyzer/provided/pointsto/Makefile.am" : {
      "ObjectId" : "b9f98495db52169768b494c9fa50e32ad99d8309",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/src/analyzer/skeletons/Makefile.am" : {
      "ObjectId" : "79cf9f7df98c1998496d4cb5ac58f8b670108dba",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# necessary to get the right path for the skeletons..\n\n# TODO: replace this with AC_SUBST()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# dummy dep. for make -j\n",
        "Line" : 37,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 2
    },
    "projects/SATIrE/src/analyzer/support/Makefile.am" : {
      "ObjectId" : "ae68115b7307f674bb69d057c8de807bef40f573",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/aral/Makefile.am" : {
      "ObjectId" : "af437a64d6d80a47ea903fd842a648fc59cbcd9a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/src/aral/src/Makefile.am" : {
      "ObjectId" : "38eafcf4131747d869e620f983dda8de9da986f4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/experimental/Makefile" : {
      "ObjectId" : "ff28e1a8b09a92ccb9ec71d5efeab6c2faaab983",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/SATIrE/src/experimental/specs/Makefile" : {
      "ObjectId" : "1e2c272667ac509d7bb2c40b782472525a595eec",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "projects/SATIrE/src/experimental/specs/nielson/Makefile" : {
      "ObjectId" : "1edbf3180cd3b53f734d5c1e98a5a5621a22bf5e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# we deliberately do not use \"-I\" for the first dir because a libname is\n\n# expected in the gerated include file\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# you do not usually need to edit this file\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/SATIrE/src/experimental/specs/pred/Makefile" : {
      "ObjectId" : "b9faa26350a901c6e306fa76359c36c7da488e40",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#PAGDIR\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# you do not usually need to edit this file\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/SATIrE/src/experimental/specs/shape/Makefile" : {
      "ObjectId" : "2e2befa5475bb1c24283bf1699d3bbf29bbdbc7f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# we deliberately do not use \"-I\" for the first dir because a libname is\n\n# expected in the gerated include file\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# you do not usually need to edit this file\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/SATIrE/src/experimental/specs/shape2/Makefile" : {
      "ObjectId" : "d6f010819b04d026d71b0a0f26a9a1858e0e3d40",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# shape analysis experimentation makefile\n\n# Viktor Pavlu, 2008\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include Makefile_template for srw98 and nnh99\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t/usr/local/mstools/bin/gnuplot < diagrams.gp\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# vim: noexpandtab:\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/SATIrE/src/experimental/specs/typeexpr/Makefile" : {
      "ObjectId" : "362b772276d30815493d2b8879ffa1080d20613a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# you do not usually need to edit this file\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this is the only variable that must be set (all other vars are set with this\n\n# variable as rootdir\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/SATIrE/src/grato/Makefile.am" : {
      "ObjectId" : "685e0aef41c655bd4baca2e93f1646bcfb1ed842",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/src/pig/Makefile.am" : {
      "ObjectId" : "bcc42b1f0d7df26b13c1540dc1793734dd6ece7c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# dependency for parallel builds: yacc must run before lex\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/SATIrE/src/pig/examples/Makefile" : {
      "ObjectId" : "36403a9215e2ce71308532bddf2fa7fc118a701d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# set OCE_DIR to point to the devsrc directory containing the compiler sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set PAG to point to the pag executable\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set PIG to point to the pig executable; this should be correct for you\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/SATIrE/src/termite/Makefile.am" : {
      "ObjectId" : "f5acf02e0886b0854e67725e866ba6ee64fd8e91",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#dfiparser.tab.h++\n",
        "Line" : 62,
        "CharPositionInLine" : 35
      },
      "2" : {
        "Text" : "#dfiparser.tab.c++ dfiparser.tab.h++ \n",
        "Line" : 68,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# ---------------------------------------------------\n",
        "Line" : 70,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# -----------------------------------------------------------------\n",
        "Line" : 81,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# ----------------------------------------------------------------\n",
        "Line" : 96,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# need to do this explicitly to replace the \"yy_\" prefix with \"dfi_\"\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/SATIrE/tools/Makefile.am" : {
      "ObjectId" : "96ab638ef65cde339763419c02e335ac77c7f2ed",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/tools/annotcheck/Makefile.am" : {
      "ObjectId" : "7562932ede71be5be81b7bfe0a6c38f2da3b6e73",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/tools/icfgbuilder/Makefile.am" : {
      "ObjectId" : "ef51f39e57e3c7e4ce7da24b676446ec3b9ddf1e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#bin_PROGRAMS = icfgbuilder\n\n#icfgbuilder_SOURCES = main.C\n\n#icfgbuilder_LDADD = -lsatire -lpag -ltermite -lrose\n\n#icfgbuilder_LDFLAGS = -L$(top_builddir)/src -L$(ROSE_LIB_DIR) \\\n# \t\t      -L$(top_builddir)/src/termite \\\n# \t\t      -L$(PAG_LIB_DIR) \\\n#                     -Wl,-rpath\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#icfgbuilder -I$(top_srcdir)/examples/test/...\n",
        "Line" : 17,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 4
    },
    "projects/SATIrE/tools/loopbounds/Makefile.am" : {
      "ObjectId" : "025ea972b7326400cf0add4d2feaffd66e2d9f98",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##\n\n# We need to inject this wrapper into the SWI-Prolog excutable image:\n\n##\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 20:83 token recognition error at: '\\1'\n"
    },
    "projects/SATIrE/tools/optimizer/Makefile.am" : {
      "ObjectId" : "33f1a27f371bf29caa7663f1614d712395268e5d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/tools/profiler/Makefile.am" : {
      "ObjectId" : "87bb759bdb4f84c2126324c828e5f296eaa25818",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/tools/unparser/Makefile.am" : {
      "ObjectId" : "c10d06662e718b1abe249a7d99ca277952bd8f6f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SATIrE/tools/wcetcc/Makefile.am" : {
      "ObjectId" : "3d2c5da14d1df35289c92084ed5e9bffc4629782",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/SMTPathFeasibility/Makefile.am" : {
      "ObjectId" : "32ba3f23f05e8f1cceab69cfe476ac3b9fd43287",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#Z3_RESULT_QUERY_TESTS=\\\n#\t$(C_RESULT_QUERY_TESTS_PREFIX)/test2.c.RQ.smt2\\\n#\t$(C_RESULT_QUERY_TESTS_PREFIX)/test3.c.RQ.smt2\\\n#\t$(C_RESULT_QUERY_TESTS_PREFIX)/test4.c.RQ.smt2\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#analyzePath_SPECIMENS = $(C_RESULT_QUERY_TESTS)\n\n#analyzePath_TEST_TARGETS=$(analyzePath_SPECIMENS)\n\n#$(analyzePath_TEST_TARGETS): analyzePath\n\n#\t./analyzePath $@ > $@.RQ.smt2;\n\n#\n\n#TEST_TARGETS+=$(analyzePath_TEST_TARGETS)\n\n#\n\n#if USE_Z3\n\n#z3_SPECIMENS=$(Z3_RESULT_QUERY_TESTS)\n\n#z3_TEST_TARGETS=$(z3_SPECIMENS)\n\n#$(z3_TEST_TARGETS): z3\n\n#\tz3 -smt2 $@ > $@.output;\n\n#\n\n#TEST_TARGETS+=$(z3_TEST_TARGETS)\n\n#endif\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#smtSolvePragmaPath_SPECIMENS = $(C_PASSING_TESTS)\n\n#smtSolvePragmaPath_TEST_TARGETS = $(smtSolvePragmaPath_SPECIMENS)\n\n#$(smtSolvePragmaPath_TEST_TARGETS): smtSolvePragmaPath\n\n#\t./smtSolvePragmaPath $@ >> pragmaPathResults;\n\n#\t./listStatements $@;\n\n#\t./translateASTZ3 $@ >> translationResults;\n\n#TEST_TARGETS+=$(smtSolvePragmaPath_TEST_TARGETS)\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#.PHONY: check-smtSolvePragmaPath\n\n#check-local: $(TEST_TARGETS)\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/SatSolver/Makefile.am" : {
      "ObjectId" : "5ec1e5b775213b7c5983fb2575668d5639515725",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (5/28/2010): It is not enought to have this controled by an automake conditional.\n\n# these need to be commented out explicitly to avoid requiring that \n\n# the sat solver source code be distributed.\n\n# bin_PROGRAMS = sat\n\n# EXTRA_DIST = \n\n# sat_SOURCES = \n\n# if ROSE_USE_SAT\n\n#    sat_SOURCES += sat.C main.C\n\n#    EXTRA_DIST += sat.h dimacsParser.h\n\n# endif\n\n# bin_PROGRAMS = sat\n\n# sat_SOURCES = sat.C main.C\n\n# EXTRA_DIST = sat.h dimacsParser.h\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/ShiftCalculus/Makefile.am" : {
      "ObjectId" : "9cf96eb30cfc5b2585b40039d564621cfd922961",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/23/2013): Disable so that we can try an approach modifiying the original ATerm library to be ROSE specific.\n\n# DQ (10/20/2013): Allow alternative support using ROSE ATerm library API.\n\n# SUBDIRS = tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that test1 and test3 are zero dimensional stencils that are not supported for code generation yet.\n\n# test2 is including STL and other library code\n\n# test4 is a version of test2 which excludes STL and library code (and it thus smaller to work with but the same API).\n\n# test5 - test8 test subsets of the stencil specification.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#rose_laplacian_lite_v2.cu rose_laplacian_lite_v3.cu\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Output)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/ShiftCalculus2/Makefile.am" : {
      "ObjectId" : "a90ccf3ff6a8eff73807a14859e28999010792a7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/23/2013): Disable so that we can try an approach modifiying the original ATerm library to be ROSE specific.\n\n# DQ (10/20/2013): Allow alternative support using ROSE ATerm library API.\n\n# SUBDIRS = tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Liao, 9/14/15 C++11 has only been available since G++ 4.3. \n\n# In versions pre-G++ 4.7, you'll have to use -std=c++0x, for more recent versions you can use -std=c++11.\n\n#CXX11FLAG = -std=c++0x\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# wait until the dsl compiler generates correct sequential code\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#rose_laplacian_lite_v3_mpi.cpp: shiftCalculusCompiler\n\n#\t@echo \"********************************************************************************************\"\n\n#\t@echo \"******* ROSE/projects/ShiftCalculus: code generation for MPI ********\"\n\n#\t@echo \"********************************************************************************************\"\n\n#\t./shiftCalculusCompiler -c -rose:dslcompiler:mpi -std=c++11 -I$(srcdir)/runtime -rose:output $@  $(srcdir)/laplacian_lite_v3.cpp \n\n#\t#./shiftCalculusCompiler -c -rose:dslcompiler:mpi -std=c++11 -rose:skipfinalCompileStep -rose:output $@  $(srcdir)/laplacian_lite_v3.cpp \n\n#\t&> /dev/null\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Note that test1 and test3 are zero dimensional stencils that are not supported for code generation yet.\n\n# test2 is including STL and other library code\n\n# test4 is a version of test2 which excludes STL and library code (and it thus smaller to work with but the same API).\n\n# test5 - test8 test subsets of the stencil specification.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#rose_laplacian_lite_v3_mpi.cpp\n\n#rose_laplacian_lite_v4_mpi.cpp \n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#rose_test_mpi_v1.cpp \n",
        "Line" : 181,
        "CharPositionInLine" : 26
      },
      "8" : {
        "Text" : "#mpiTests\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Output)\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# demo2015 collects successful code generations for March meeting\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\t@$(MAKE) localTests cudaTests\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "projects/ShiftCalculus3/Makefile.am" : {
      "ObjectId" : "eef211260b310f574e7910721652f079491edbf8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/23/2013): Disable so that we can try an approach modifiying the original ATerm library to be ROSE specific.\n\n# DQ (10/20/2013): Allow alternative support using ROSE ATerm library API.\n\n# SUBDIRS = tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that test1 and test3 are zero dimensional stencils that are not supported for code generation yet.\n\n# test2 is including STL and other library code\n\n# test4 is a version of test2 which excludes STL and library code (and it thus smaller to work with but the same API).\n\n# test5 - test8 test subsets of the stencil specification.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Output)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/ShiftCalculus4/Makefile.am" : {
      "ObjectId" : "24b694497cfc06585821b9c8b1d14f17a571d224",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/23/2013): Disable so that we can try an approach modifiying the original ATerm library to be ROSE specific.\n\n# DQ (10/20/2013): Allow alternative support using ROSE ATerm library API.\n\n# SUBDIRS = tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (1/26/2016): Commented out since this does not compile any more (API change and only the version in ShiftCalculus2 is supported.\n\n# noinst_PROGRAMS = mpiCodeGenerator \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Liao, 9/14/15 C++11 has only been available since G++ 4.3. \n\n# In versions pre-G++ 4.7, you'll have to use -std=c++0x, for more recent versions you can use -std=c++11.\n\n#CXX11FLAG = -std=c++0x\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# mpiCodeGenerator_SOURCES = mpiCodeGenerator.C mpiCodeGenerator.h\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (1/19/2016): Added test code for std::function support required in DSL recognition and evaluation.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Simple example\n\n# array_SOURCES = array.C\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# wait until the dsl compiler generates correct sequential code\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#rose_laplacian_lite_v3_mpi.cpp: shiftCalculusCompiler\n\n#\t@echo \"********************************************************************************************\"\n\n#\t@echo \"******* ROSE/projects/ShiftCalculus: code generation for MPI ********\"\n\n#\t@echo \"********************************************************************************************\"\n\n#\t./shiftCalculusCompiler -c -rose:dslcompiler:mpi -std=c++11 -I$(srcdir)/runtime -rose:output $@  $(srcdir)/laplacian_lite_v3.cpp \n\n#\t#./shiftCalculusCompiler -c -rose:dslcompiler:mpi -std=c++11 -rose:skipfinalCompileStep -rose:output $@  $(srcdir)/laplacian_lite_v3.cpp \n\n#\t&> /dev/null\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Note that test1 and test3 are zero dimensional stencils that are not supported for code generation yet.\n\n# test2 is including STL and other library code\n\n# test4 is a version of test2 which excludes STL and library code (and it thus smaller to work with but the same API).\n\n# test5 - test8 test subsets of the stencil specification.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#rose_laplacian_lite_v3_mpi.cpp\n\n#rose_laplacian_lite_v4_mpi.cpp \n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (1/26/2016): Commented out mpi code generation (only the newr version in ShiftCalculus2 is supported/maintained).\n\n# demo2015: test10 cudaTests test10vector mpiTests\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Multigrid shift Calculus\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Multigrid shift Calculus\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\tThis file does not have anything to optimize (though it does also faile to compile because of this point -- FIXME).\n\n#\t./shiftCalculusCompiler -std=c++11 -DDIM=2 $(MULTIGRID_INCLUDES) -c $(srcdir)/CODE.v0.2/Multigrid/multigridTest.cpp\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Output)\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# demo2015 collects successful code generations for March meeting\n\n#\tDQ (1/15/2016): Commented out demo tests.\n\n#\t@$(MAKE) demo2015\n\n#\t@$(MAKE) localTests cudaTests\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "projects/SnippetTools/Makefile.am" : {
      "ObjectId" : "4327e780dbca400bc6d8dedf6e7ddd72ef71bc65",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/StaticDynamicAnalysis/DynamicCPU/Makefile.am" : {
      "ObjectId" : "2833211e5c8bdcf1301a6c4a3fc49b9933f15b02",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# EXTRA_DIST = introduction.tex design.tex appendix.tex \\\n#    bugSeeding.h bugSeedingSupport.h bugSeedingAttributes.h \\\n#    cloneGrainularity.h  vulnerabilityDetection.h \\\n#    bufferOverFlowSecurityFlaw.h inputCode_bufferOverflow_arrayIndexing.C\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\trm -rf examples\n\n#\tmkdir examples\n\n#\tcp $(srcdir)/*.[hC] examples\n\n#\tcp *.dot examples\n\n#\tcp *.pdf examples\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/TALCDataLayout/Makefile.am" : {
      "ObjectId" : "2f7c33d6182234d9a196c6d6557461d55107d7ef",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/src/Makefile.am" : {
      "ObjectId" : "1aa53d6848de172b4fdb15ae4d1ae11ea16ff00e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/src/haopt/Makefile.am" : {
      "ObjectId" : "b341c56de7491b5f9f0b106f17a42426c65f4d7e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/src/main/Makefile.am" : {
      "ObjectId" : "d572c239538d7cbd5f3cf6bd715a57a2ab797d9e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/src/meta/Makefile.am" : {
      "ObjectId" : "55795bdfdb99d8cc08b6a3182937d81b859f2db0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/src/modules/Makefile.am" : {
      "ObjectId" : "cfac7219b0c56504ac2ff77ace73e89eef9f9607",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/src/runtime/Makefile.am" : {
      "ObjectId" : "a06317eb4e9e3587376b671dd99d422fea12907b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/src/utilities/Makefile.am" : {
      "ObjectId" : "ffde3d289487aa434181d8a1417195eb6f30960f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TALCDataLayout/tests/Makefile.am" : {
      "ObjectId" : "5c2287b6e70206fd3637ae276bb9cff916f6dcae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Tests\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/TemplateAnalysis/Makefile.am" : {
      "ObjectId" : "81f931d6d91f931b59352f98fc8965eb70be8ecc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/examples/Makefile.am" : {
      "ObjectId" : "8b9f7a4aa53cbfe9109a8ba581740f9e7a0ae955",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/examples/inspect-autovar/Makefile.am" : {
      "ObjectId" : "0e7d8cb7cc4055e16d15d83ce6c47b1db2f80c25",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/include/ROSE/Analysis/Template/Makefile.am" : {
      "ObjectId" : "5970cef0f61c8a97277c27a4428229cbfc91fa23",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/include/ROSE/proposed/Makefile.am" : {
      "ObjectId" : "018e0a257503db814446e0714399c4cdc84917eb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/include/nlohmann/Makefile.am" : {
      "ObjectId" : "a430461f1048fb38493b39c89cffc7d03c7860de",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/lib/ROSE/Analysis/Template/Makefile.am" : {
      "ObjectId" : "70d607f1cc496d2ab15ed080767f24ebb078fd46",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/lib/ROSE/proposed/Makefile.am" : {
      "ObjectId" : "925d45561562d90923c26221f18db0fc402e3bea",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TemplateAnalysis/src/Makefile.am" : {
      "ObjectId" : "226ae309e68febf6144e825ab33b67acdf70622e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# mfbEnv sage2json\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#genInstFlowGraph_LIBADD=$(MFB_LIB_PATHS) $(MFB_LIBS) $(RAT_LIB_PATH) $(RAT_LIBS)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#mfbEnv_SOURCES=mfb-environment.cpp\n\n#mfbEnv_CXXFLAGS=-g $(MFB_INC_PATHS) $(RAT_INC_PATHS) $(PROP_INC_PATHS) $(ROSE_INCLUDES)\n\n#mfbEnv_LIBADD=$(PROP_LIB_PATH) $(PROP_LIBS) $(MFB_LIB_PATHS) $(MFB_LIBS) $(RAT_LIB_PATH) $(RAT_LIBS)\n\n#mfbEnv_LDADD=$(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#sage2json_SOURCES=sage-to-json.cpp\n\n#sage2json_CXXFLAGS=-g $(RAT_INC_PATHS) $(ROSE_INCLUDES)\n\n#sage2json_LIBADD=$(RAT_LIB_PATH) $(RAT_LIBS)\n\n#sage2json_LDADD=$(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/TileK/Makefile.am" : {
      "ObjectId" : "9e1ee78574bfe3f72354e3015dfea7f436d0c994",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/doc/Makefile.am" : {
      "ObjectId" : "254c1b1279e441aecefae1ce095fc5229858e1b2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/include/DLX/TileK/Makefile.am" : {
      "ObjectId" : "5635a41e785c8438351b3891effcfa72e366134e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/include/MDCG/TileK/Makefile.am" : {
      "ObjectId" : "b809bbadfedb34ddd5e5b6a0cd83884489f39c58",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/include/RTL/Host/Makefile.am" : {
      "ObjectId" : "07fbe0f883ef20af91999131ce146fc48f9ac2fc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/include/RTL/Kernel/CUDA/Makefile.am" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/include/RTL/Kernel/OpenCL/Makefile.am" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/lib/Makefile.am" : {
      "ObjectId" : "5e0ca9890dc3e2c1aaf5ae0490b403760023998f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DLX (frontend)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# KLT (backend)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Runtime\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/TileK/src/Makefile.am" : {
      "ObjectId" : "0c5142bca73ce1dea5dd5fe3ae5c67ea23baad9b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################################\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#########################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/TileK/tests/accelerator/CUDA/Makefile.am" : {
      "ObjectId" : "80f3220380157ba58432e28fe0d9cf4bfa4a05fc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#NVCC_FLAGS+=--compiler-bindir=@CUDA_BIN_DIR@/gcc-4.4\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#########################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########################################\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########################################\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/TileK/tests/accelerator/Makefile.am" : {
      "ObjectId" : "49b71e5a454e265dd3402c69b4ba4be14ef20e02",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/TileK/tests/accelerator/OpenCL/Makefile.am" : {
      "ObjectId" : "bebeae686777cf7ae2238b85713cebb3b30bdd9e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -DSKIP_ROSE_BUILTIN_DECLARATIONS\n",
        "Line" : 18,
        "CharPositionInLine" : 68
      },
      "3" : {
        "Text" : "#########################################\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########################################\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########################################\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########################################\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/TileK/tests/basic/Makefile.am" : {
      "ObjectId" : "50ea2e4fd741af0e5ab16759c0e3e0a506746a39",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#########################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#########################################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########################################\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########################################\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########################################\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########################################\n\n#\n\n#test_%-kernel.c: rose_test_%.c\n\n#test_%-static.c: rose_test_%.c\n\n#rose_test_%.c: $(srcdir)/test_%.c $(TILEK)\n\n#\t$(TILEK) $(ROSE_FLAGS) -c $(srcdir)/test_%.c\n\n#\n\n#rose_test_%.o: rose_test_%.c\n\n#\tgcc $(C_FLAGS) -c rose_test_%.c -o rose_test_%.o\n\n#\n\n#test_%-kernel.o: test_%-kernel.c\n\n#\tgcc $(C_FLAGS) -c test_%-kernel.c -o test_%-kernel.o\n\n#\n\n#test_%-static.o: test_%-static.c\n\n#\tgcc $(C_FLAGS) -c test_%-static.c -o test_%-static.o\n\n#\n\n#test_%: rose_test_%.o test_%-kernel.o test_%-static.o $(TILEK_RTL) $(KLT_RTL)\n\n#\tlibtool --mode=link gcc rose_test_%.o test_%-kernel.o test_%-static.o $(LD_FLAGS) -o test_%\n\n#\n\n#check-test_%: test_%\n\n#\t./test_%\n\n#\n\n#########################################\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#########################################\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#########################################\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/TileK/tests/rtl/Makefile.am" : {
      "ObjectId" : "36e1d71a67d7af6cb1c745b6f9c3f9ee01a257e4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###################################################################################################\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###################################################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################################################################################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################################################################################################\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###################################################################################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###################################################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/TileK/tests/threads/Makefile.am" : {
      "ObjectId" : "7ac497263f2a608757eb6adf3a25a961cd4cfdba",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#########################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#########################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########################################\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########################################\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########################################\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/UpcTranslation/CMakeLists.txt" : {
      "ObjectId" : "28aca5514090c5ff929e918481029285b4df73c2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/UpcTranslation/Makefile.am" : {
      "ObjectId" : "fa168ac1d8b2582e6673181760896a46645a597a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# . is necessary to ensure building the translator before building the tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/UpcTranslation/tests/Makefile.am" : {
      "ObjectId" : "35c1d1a3c1c5c96941e78dba67e49614769ecad2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# path to headers for ROSE, BUPC, and global.tld \n\n# BUPC_INCLUDE = $(ROSE_INCLUDES) -I$(srcdir)/../include \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (9/26/2011): Added optional test for dangling pointers to IR nodes in the AST (level 1 causes only an error message if dangling pointers is found).\n\n# ROSEUPCC_FLAGS = -rose:skipfinalCompileStep --edg:no_warnings \n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#individual compilation targets\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# various shared variables\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#unshared_1.upc refers to an extern variable defined in extern.upc\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (9/20/2010): This test code must be compiled as a UPC++ test using the \"-rose:UPCxx\" option.\n\n# This is because the type checking is different with C++ as a base language for the UPC support.\n\n# In general the typechecking is more strict so that UPC++ might fail and UPC pass, but this is \n\n# reversed for this example.\n\n# unshared pointers\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# generate global thread local data structure\t\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test linking phase processing: \n\n#   find per-file alloc/init functions from multiple files and \n\n#   insert calls of them into bupcr_magic.c\t\n\n#   current build dir is needed to include global.tld\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check\trules\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tDQ (9/26/2011): This test fails the new AST consistancy test for references to dangling pointers to IR nodes.\n\n# Liao, 3/28/2013. Turn this off based on Dan's suggestion. UPCxx is not supported in EDG 4.4 + ROSE\n\n#\t$(MAKE) rose_unshared_2.c\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/Viz/Makefile.am" : {
      "ObjectId" : "7097daf3341e0bf7bfa7d716946714ef5d3ee735",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Viz/examples/Makefile.am" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Viz/include/Makefile.am" : {
      "ObjectId" : "4292c8a7ca8f1aa32301a0fbdf47309f6bbe62b8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Viz/include/Viz/Makefile.am" : {
      "ObjectId" : "decee9d3e46a9c63fcd43c940830cdb4511f5a09",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Viz/include/Viz/Traversals/Makefile.am" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/Viz/lib/Makefile.am" : {
      "ObjectId" : "b0a5e83ccbea850542ac623dd4453515daf0b923",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##############\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/Viz/src/Makefile.am" : {
      "ObjectId" : "dc15494eddc138e398fbf9c9d208a1606e0e896e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##############\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/Viz/tools/Makefile.am" : {
      "ObjectId" : "71fbac7fd5acc5f46d8ad1c3dacc52d13790082b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##############\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "############\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/ZFPTool/Makefile.am" : {
      "ObjectId" : "74a61b92c51e715d7971b4d5e93b0023f127eca0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/ZFPTool/src/Makefile.am" : {
      "ObjectId" : "d978e9f564b875107a1cf87631e40f2d604c265d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# where to find rose and boost libraries \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/ZFPTool/tests/Makefile.am" : {
      "ObjectId" : "db44d0be4c0f2ceb39706fd2ab1e2f5605158363",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/amrShiftDSLcompiler/AMRShift/Makefile.am" : {
      "ObjectId" : "dd650dea19b9ebfe95fca62529ef9f14ee5927bf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# CPPFLAGS += -Wunknown-pragma\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# multigridTest.cpp\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/amrShiftDSLcompiler/Makefile.am" : {
      "ObjectId" : "22cad339d270dde3069954990626a98896e7dc9c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# amrShiftDSLcompiler_SOURCES = amrShiftDSLcompiler.C array.C\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# amrShiftDSLcompiler_LIBS = $(MULTIGRID_TARGET_ABSTRACTION_BIN)/amrShift.la\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/19/2016): Added test code for std::function support required in DSL recognition and evaluation.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include_HEADERS = -I$(DSL_INFRASTRUCTURE_SRC)\n\n# INCLUDES = -I$(DSL_INFRASTRUCTURE_SRC)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ATERM_LIB_DIR = $(ATERM_INSTALL_PATH)/lib\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate DOT graphs of the kind of code we need to generate using ROSE.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tComment out if we don't need to regenerate the generated code for the DSL compiler.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is force to depend upon a single dependent file, even though dslSupport.o \n\n# depends upon generated_dsl_attributes_header.C insted of generated_dsl_attributes.C.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t$(MAKE) -C../dsl_infrastructure attributeGenerator\n\n#\tcd ../dsl_infrastructure; $(MAKE) attributeGenerator\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t./amrShiftDSLcompiler -Wunknown-pragmas -DSKIP_ROSE_BUILTIN_DECLARATIONS -std=c++11 -DSKIP_ROSE_HEADERS -DDIM=2 $(AMR_INCLUDES) $(srcdir)/AMRShift/Multigrid/multigridTest.cpp\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "projects/arrayDSLcompiler/Makefile.am" : {
      "ObjectId" : "7872e8a1edeaebf07d253e1166ec18cefdbe7850",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (1/19/2016): Added test code for std::function support required in DSL recognition and evaluation.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include_HEADERS = -I$(DSL_INFRASTRUCTURE_SRC)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate DOT graphs of the kind of code we need to generate using ROSE.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is force to depend upon a single dependent file, even though dslSupport.o \n\n# depends upon generated_dsl_attributes_header.C insted of generated_dsl_attributes.C.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t$(MAKE) -C../dsl_infrastructure attributeGenerator\n\n#\tcd ../dsl_infrastructure; $(MAKE) attributeGenerator\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is for testing the generation of the DSL code input to the DSL compiler only.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\t$(DSL_INFRASTRUCTURE_BIN)/attributeGenerator -std=c++11 -DSKIP_ROSE_HEADERS $(srcdir)/array_header.C\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# testAMRShift: attributeGenerator\n\n#\t./attributeGenerator -std=c++11 -DSKIP_ROSE_HEADERS $(AMR_INCLUDES) $(srcdir)/AMRShiftAbstractions.C\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# testAMRShiftCompiler: amrShiftDSLcompiler\n\n#\t./amrShiftDSLcompiler -Wunknown-pragmas -DSKIP_ROSE_BUILTIN_DECLARATIONS -std=c++11 -DSKIP_ROSE_HEADERS $(AMR_INCLUDES) $(srcdir)/AMRShift/Multigrid/multigridTest.cpp\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/arrayOptimization/CMakeLists.txt" : {
      "ObjectId" : "3ab4959a0e55c64b2655054563420127b1374994",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/arrayOptimization/Makefile.am" : {
      "ObjectId" : "ccb386c693783ffa55c4e5c1567943ae39c76de8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#     -I$(top_srcdir)/src/util \\\n#     -I$(top_srcdir)/src/util/support \\\n#     -I$(top_srcdir)/src/util/graphs \\\n#     -I$(top_srcdir)/src/midend/astUtil \\\n#     -I$(top_srcdir)/src/midend/astUtil/astInterface \\\n#     -I$(top_srcdir)/src/midend/astUtil/astSupport \\\n#     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \\\n#     -I$(top_srcdir)/src/midend/astUtil/annotation \\\n#     -I$(top_srcdir)/src/midend/programAnalysis \\\n#     -I$(top_srcdir)/src/midend/programAnalysis/CFG \\\n#     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \\\n#     -I$(top_srcdir)/src/midend/programAnalysis/CFG \\\n#     -I$(top_srcdir)/src/midend/loopProcessing/driver \\\n#     -I$(top_srcdir)/src/midend/loopProcessing/depInfo\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#lib_LIBRARIES = libarrayOptimization.a\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#libarrayOptimization_a_SOURCES = ArrayAnnot.C  ArrayInterface.C  ArrayRewrite.C \n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#LDADD = libarrayOptimization.a $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#include_HEADERS =  ArrayAnnot.h  ArrayInterface.h  ArrayRewrite.h\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/arrayOptimization/test/Makefile.am" : {
      "ObjectId" : "a3a3e78faa4a22fea85f1a11c2b9def80a60ddf3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-fs2 means multi-level loop fusion for more reuses for loop translation\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to deactivate tests comment out check-local.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/autoParallelization/CMakeLists.txt" : {
      "ObjectId" : "62b82c5416129ee383ca3d4eb87a8b8d6979adcd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/autoParallelization/Makefile.am" : {
      "ObjectId" : "ffd04bb7ed3a47e8017a649467100e21fd0d5f24",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# . is necessary to ensure building the translator before building the tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/autoParallelization/difftests/Makefile.am" : {
      "ObjectId" : "bd769d095f2c6cca6d296a1784fdedbc66a9857d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# name qualification of constructor is wrongly unparsed for 4.2 and 4.4 testing\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Turned of the debug flag to have a cleaner screen output, Liao, 9/16/2009\n\n#-rose:autopar:enable_distance\n\n#-rose:autopar:enable_debug \n\n# -rose:autopar:enable_patch\n\n# -rose:autopar:unique_indirect_index\n\n# -rose:autopar:no_aliasing\n\n# --edg:restrict\n\n# --edg:no_warnings\n\n# -rose:verbose 0\n\n#  We focus on testing the check for existing directives\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-fopenmp, automatically add this option \n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for C++ input codes, \n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# build the translator\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we want to use diff to compare generated files with reference files\n\n# TODO: diff patches is a better choice.  Tolerate other differences introduced by ROSE.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# we remove -c to test linking , all test input files must have the main() entry now.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# diff files\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/autoParallelization/tests/Makefile.am" : {
      "ObjectId" : "955b3a47857fd5e29f85b75a5dea3e7ea2c1fa34",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# -----------------------------------------------------------------\n\n# the code which can not yet be parallelized now\n\n# Or the needed analyses(def-use, liveness, or dependence analysis) cannot handle them yet.\n\n# -----------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bitRightShift.c # << operator is not supported, skipping the entire loop.\n\n# null_for_test.c  TODO Liao 6/9/2016\n\n# We also put C++ file list here\n\n# StressWork_setup.C // need to assume no pointer aliasing\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -----------------------------------------------------------------\n\n# This list is now copied to C_TESTCODES_REQUIRED_TO_VERIFY, Liao 3/9/2016\n\n# the code which can be parallelized or confirmed as not parallelizable now\n\n# -----------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are different depending upon use of EDG 4.7 and EDG 4.8 vs. EDG 4.9.\n\n# This is because translation of floating poitn is more precise using EDG 4.9\n\n# (examples such as \"0.\" are not normalized to \"0.0\").\n\n#  ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# a list of c tests for default use of autoPar: without passing any special commond options\n\n#\n\n#------------------------------------------------------------------------------\n\n# rose_v1_input.c\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rose_v1_input.c.diff\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# current failing if no aliasing cannot be assumed.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# current failing if no aliasing cannot be assumed.\n\n# name qualification of constructor is wrongly unparsed for 4.2 and 4.4 testing\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Turned of the debug flag to have a cleaner screen output, Liao, 9/16/2009\n\n#-rose:autopar:enable_distance\n\n#-rose:autopar:enable_debug \n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For C input codes\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# for C++ input codes\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#C_TEST_Output = ${C_TESTCODES_REQUIRED_TO_PASS:.c=.out}\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# rules for testing the default use of autoPar \n\n# rose_v1_input.C\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# we want to use diff to compare generated files with reference files\n\n# Pending test cases: TODO\n\n# TODO: diff patches is a better choice.  Tolerate other differences introduced by ROSE.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# when all semantics flags are turned on\n\n# rose_input.c, \n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# object files means rose_ *.c files also exist\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# diff of default tests\n\n# rose_v1_input.c.diff from rose_v1_input.c\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# a shortcut to test default use\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# special file to debug dep graph information\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#$(VALGRIND) ../autoPar $(ROSE_CFLAGS) $(TESTCODE_INCLUDES) -c $(srcdir)/$(@:.o=.c) | fold >$(@:.o=.out) # pipeline buries return code\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#--------------------- C++ test with annotations\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#--------------------- test enable_diff\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Two files are singled out since their output will be put in tutorial text\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# special flags, no aliasing flag is used        \n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "projects/autoTuning/Makefile.am" : {
      "ObjectId" : "64aac51df9e9e49bb7464c6c8b6bdc83e922a48b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# . is necessary to ensure building the translator before building the tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROSEHPCT_DEP_INCLUDES contains include paths to libxml2\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSEHPCT_DEP_LIBS: for libxml2 \t\t\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# this lib contains supporting functions for dlopen(), checkpointing, etc\n\n# the transformation will generated calls to them and insert their header.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#we share CXXs debug flags for C compiler \n",
        "Line" : 21,
        "CharPositionInLine" : 24
      },
      "5" : {
        "Text" : "#--------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#noinst_HEADERS = autoTuningSupport.h\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 37,
        "CharPositionInLine" : 5
      },
      "8" : {
        "Text" : "# ROSE_BUILD_ROSEHPCT\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 9
    },
    "projects/autoTuning/doc/Makefile.am" : {
      "ObjectId" : "8ef809e551821e4cbc71681d91dba38bd3d1befe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# soft links to required files (.sty, .tex, .png. .c etc)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/autoTuning/tests/Makefile.am" : {
      "ObjectId" : "3636faeed389a839f6d5bbd7eb2512429d368b7d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# the eqpath has to be the absolute path \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gprof result's equavilent path\n\n# The performance data can be collected from another machine with different paths\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# test command line options for outliner, They are set automatically by the translator now\n\n#ROSE_FLAGS+= -rose:outline:parameter_wrapper -rose:outline:new_file -rose:outline:temp_variable -rose:outline:exclude_headers \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source file annotation with performance metrics\n\n# -rose:hpct:enable_debug -rose:autotuning:enable_debug \n\n#ROSE_FLAGS+=-rose:autotuning:triage_threshold 0.75\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# experimental flags. not well sorted out for the interaction between OpenMP and outlining\n\n# TODO reduction clause with omp for  should ignored if all reduction variables are no longer shared\n\n# this should be fixed in outliner's Transform.cc: \n\n# OmpSupport::generatePragmaFromOmpAttribute(firstloop);\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# basic code triage based on inner-most consecutive loops\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# aggressive code triage based on outer most OpenMP for loop\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# alternative performance information collected by GNU gprof -L -l, line-by-line profiling results\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# And using outlining support dlopen(): this is not necessary now since autoTuning will turn on -rose:outline:use_dlopen transparently\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# test code triage only\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-------------------------------\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (2/5/2011): These could be run in parallel...or is there a problem with that?\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-------------------------------\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "projects/binCompass/Makefile.am" : {
      "ObjectId" : "33afcb22fc5bd66e4c0cd1f55a08d919f527eb49",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (4/20/2009): Added valgrind support...\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/binCompass/analyses/Makefile.am" : {
      "ObjectId" : "9c514464a69b631c115bece3e982887be50e15d3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/14/2009): This is defined in config/Makefile.for.ROSE.includes.and.libs\n\n# LDFLAGS = -module\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure these SAGE specific header files are placed into a distribution\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/binCompass/graphanalyses/Makefile.am" : {
      "ObjectId" : "e0a399bb4efd60ee422b4e725df75bcd065afd35",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/14/2009): This is defined in config/Makefile.for.ROSE.includes.and.libs\n\n# LDFLAGS = -module\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure these SAGE specific header files are placed into a distribution\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/binaryVisualization/CMakeLists.txt" : {
      "ObjectId" : "600689415cc5aa5399d4fd21a4355893a48ea911",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/binaryVisualization/Makefile.am" : {
      "ObjectId" : "472cf49e427c75b947de2ab8e503b0ac49d13052",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (11/13/2008): Can't use builddir on some machines and \"-I.\" is already included by default.\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(builddir) $(GL_CFLAGS)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-L/home/panas2/programs/freeglut/lib -lglut\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/bugSeeding/CMakeLists.txt" : {
      "ObjectId" : "4b90191527e31c3d2b26e0e4a9143b452d3466d1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/bugSeeding/Makefile.am" : {
      "ObjectId" : "664b874b1848300d1ebb0aa512ac4aa9fac9781f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# bugSeeding_HEADERS = bugSeeding.h bugSeedingSupport.h bugSeedingAttributes.h bufferOverFlowSecurityFlaw.h\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\t$(top_srcdir)/scripts/dotgenLetterPDF inputCode_bufferOverflow_arrayIndexing.C_afterSeedingOfSecurityFlaws.dot inputCode_bufferOverflow_arrayIndexing_C_afterSeedingOfSecurityFlaws.pdf\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/checkPointExample/CMakeLists.txt" : {
      "ObjectId" : "4e615bd2d681940e65ba9cf0c7ac0ca0294ec45c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DQ (8/11/2004): Commented out to avoid compilation (link fails with older Linux OS)\n\n# bin_PROGRAMS = eigenvalue\n\n# eigenvalue_SOURCES = eigenvalue.C main.C simple_matvec.C\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# LDADD = $(top_builddir)/src/3rdPartyLibraries/checkPointLibrary/libckpt.so\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/checkPointExample/Makefile.am" : {
      "ObjectId" : "4e615bd2d681940e65ba9cf0c7ac0ca0294ec45c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/11/2004): Commented out to avoid compilation (link fails with older Linux OS)\n\n# bin_PROGRAMS = eigenvalue\n\n# eigenvalue_SOURCES = eigenvalue.C main.C simple_matvec.C\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# LDADD = $(top_builddir)/src/3rdPartyLibraries/checkPointLibrary/libckpt.so\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/compass/CMakeLists.txt" : {
      "ObjectId" : "dabbe5420fd1ce2725b4eef0dfaa201b491788cd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#SUBDIRS = src tools\n\n#\n\n#EXTRA_DIST = extensions\n\n#\n\n#check-local:\n\n#\t@echo \"***************************************************************************\"\n\n#\t@echo \"****** ROSE/projects/compass: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"***************************************************************************\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass/Makefile.am" : {
      "ObjectId" : "e5420f251cafad968e70eaaab7bc8a52829edf09",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/compass/src/CMakeLists.txt" : {
      "ObjectId" : "0d2b0e4dc858c76d1e5046dd78a94af944f788ca",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#SUBDIRS = compassSupport util\n\n#\n\n#EXTRA_DIST = in compass_scripts tests\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass/src/Makefile.am" : {
      "ObjectId" : "b95f8ccb94c45f318b8f15003e27dae93d6f2fcb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/compass/src/compassSupport/Makefile.am" : {
      "ObjectId" : "858e015826fe64cecd1cda2f737dfc0c3327b660",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#compassEmptyMain_LDADD = libCompass.la $(ROSE_LIBS_WITH_PATH)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a bad solution: binary analysis may not be turned on\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\tenv COMPASS_PARAMETERS=$(srcdir)/compass_parameters ./compassEmptyMain $(compass_test_dir)/exampleTest_1.C\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/compass/src/util/C-API/Makefile.am" : {
      "ObjectId" : "bce2a9f17824e36d4c6114caccf69b5b5691aa65",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#==========================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==========================================================================\n\n# Auxiliary library.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#LTCXXCOMPILE = \\\n#\t$(LIBTOOL) --tag=CXX --mode=compile $(MPICXX) $(DEFS) \\\n#        $(DEFAULT_INCLUDES) $(AM_CPPFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n#        $(AM_CXXFLAGS) $(CXXFLAGS)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(MPICXX) $(AM_CXXFLAGS) \\\n#        $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#==========================================================================\n\n# Unit test\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CH (2/22/2010): put $(ROSE_LIBS_WITH_PATH) ahead to avoid the linker to find boost libraries in usr/lib first\n\n# this problem still need to be solved in the future\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#LDADD = ../../compassSupport/libCompass.la libC-API.la $(ROSE_LIBS_WITH_PATH)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND  = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#==========================================================================\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# eof\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "projects/compass/src/util/CMakeLists.txt" : {
      "ObjectId" : "de3da8c1cee8cc82ccf5b957c06dc0feda0c133a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Utility support for Compass-based checkers.\n\n#\n\n#SUBDIRS = C-API MPIAbstraction\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass/src/util/MPIAbstraction/CMakeLists.txt" : {
      "ObjectId" : "dc80a2d636211e97b75c71be439093c818be18f1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########### install files ###############\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##==========================================================================\n\n#\n\n#SUBDIRS = alt-mpi-headers\n\n#\n\n#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../../compassSupport \\\n\n#           $(ROSE_INCLUDES)\n\n#\n\n##==========================================================================\n\n## Auxiliary library.\n\n#\n\n#noinst_LTLIBRARIES = libMPIAbstraction.la\n\n#\n\n#libMPIAbstraction_la_SOURCES = Recognizer.C Recognizer.h\n\n#\n\n##==========================================================================\n\n## Unit test\n\n#\n\n#noinst_PROGRAMS = testMPIAbstraction\n\n#\n\n#LDADD = libMPIAbstraction.la ../C-API/libC-API.la \\\n\n#  $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n#\n\n#testMPIAbstraction_SOURCES = testMPIAbstraction.C\n\n#\n\n##==========================================================================\n\n#\n\n#TEST_RUN_FLAGS = --edg:no_warnings -w -rose:verbose 0 -rose:C_only \\\n\n#                 -I. -Ialt-mpi-headers/include -I$(srcdir)/testCodes \\\n\n#                 --mpi-api $(srcdir)/MPI.api\n\n#\n\n#test: libMPIAbstraction.la testMPIAbstraction$(EXEEXT) \\\n\n#\t    $(srcdir)/testCodes/is.c \\\n\n#\t    $(srcdir)/testCodes/npbparams.h \\\n\n#\t    $(srcdir)/MPI.api\n\n#\t@echo \"============================================================\"\n\n#\t@echo \"Trying to recognize MPI abstractions in 'is.c'...\"\n\n#\t@echo \"============================================================\"\n\n#\t./testMPIAbstraction$(EXEEXT) $(TEST_RUN_FLAGS) \\\n\n#\t  -c $(srcdir)/testCodes/is.c\n\n#\t@echo \"============================================================\"\n\n#\t@echo \"Compare to a grep-based search (functions only)...\"\n\n#\t@echo \"============================================================\"\n\n#\t@grep -E --line-number 'MPI_[^ ]*[ ]*\\(' $(srcdir)/testCodes/is.c\n\n#\n\n#check-local:\n\n#\t@$(MAKE) test\n\n#\t@echo \"*********************************************************************************************************************\"\n\n#\t@echo \"*** ROSE/projects/compass/util/C-API: make check rule complete (terminated normally) ***\"\n\n#\t@echo \"*********************************************************************************************************************\"\n\n#\n\n#EXTRA_DIST = MPI.api MPI-api.c testCodes\n\n#\n\n#clean-local:\n\n#\trm -f *.ti a.out rose_*.c\n\n#\n\n## eof\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/compass/src/util/MPIAbstraction/Makefile.am" : {
      "ObjectId" : "a4830c7140d314e7a959ce9f0c244150db8bbbb6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#==========================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==========================================================================\n\n# Auxiliary library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#==========================================================================\n\n# Unit test\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CH (2/22/2010): put $(ROSE_LIBS_WITH_PATH) ahead to avoid the linker to find boost libraries in usr/lib first\n\n# this problem still need to be solved in the future\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#==========================================================================\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# eof\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/compass/src/util/MPIAbstraction/alt-mpi-headers/CMakeLists.txt" : {
      "ObjectId" : "f5f7db859fd0ebd0be699f04c94a1209527f4255",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##==========================================================================\n\n#\n\n#SUBDIRS = mpich-1.2.7p1\n\n#\n\n#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#MPI_ROOT_DIR = $(srcdir)/mpich-1.2.7p1\n\n#MPI_INC_DIR = $(MPI_ROOT_DIR)/include\n\n#MPI_HDRS = \\\n\n#\t$(MPI_INC_DIR)/mpi.h \\\n\n#\t$(MPI_INC_DIR)/mpidefs.h \\\n\n#\t$(MPI_INC_DIR)/mpi_fortdefs.h \\\n\n#\t$(MPI_INC_DIR)/mpio.h \\\n\n#\t$(MPI_INC_DIR)/mpi_errno.h\n\n#\n\n## ALTMPI_OUT_DIR = ./include\n\n## ALTMPI_LIB_OUT_DIR = ./lib\n\n#ALTMPI_OUT_DIR = include\n\n#ALTMPI_LIB_OUT_DIR = lib\n\n#\n\n## The distribution builds the $(ALTMPI_OUT_DIR) and the $(ALTMPI_LIB_OUT_DIR)\n\n## into the source tree (different from the development bversion of ROSE, so \n\n## include the directory for that location as well.\n\n#INCLUDES = -I. -I$(srcdir) -I$(ALTMPI_OUT_DIR) -I$(srcdir)/$(ALTMPI_OUT_DIR)\n\n#\n\n##==========================================================================\n\n#\n\n#ALTMPI_HDRS_MAIN = $(ALTMPI_OUT_DIR)/mpi.h\n\n#ALTMPI_HDRS_OTHERS = \\\n\n#\t$(ALTMPI_OUT_DIR)/mpidefs.h \\\n\n#\t$(ALTMPI_OUT_DIR)/mpi_fortdefs.h \\\n\n#\t$(ALTMPI_OUT_DIR)/mpio.h \\\n\n#\t$(ALTMPI_OUT_DIR)/mpi_errno.h\n\n#ALTMPI_HDRS = $(ALTMPI_HDRS_MAIN) $(ALTMPI_HDRS_OTHERS)\n\n#ALTMPI_SRCS = $(ALTMPI_LIB_OUT_DIR)/def.c\n\n#\n\n#noinst_LTLIBRARIES = libmpi-alt-defs.la\n\n## libmpi_alt_defs_la_SOURCES = $(ALTMPI_SRCS) $(ALTMPI_HDRS)\n\n#libmpi_alt_defs_la_SOURCES = $(ALTMPI_SRCS)\n\n#\n\n##==========================================================================\n\n#\n\n#$(ALTMPI_HDRS_OTHERS) $(ALTMPI_SRCS): $(ALTMPI_HDRS_MAIN)\n\n#\n\n#$(ALTMPI_HDRS_MAIN): $(MPI_HDRS) $(srcdir)/gen-headers.py\n\n#\tpython $(srcdir)/gen-headers.py \\\n\n#\t  --out-incs=$(ALTMPI_OUT_DIR) \\\n\n#\t  --out-srcs=$(ALTMPI_LIB_OUT_DIR) \\\n\n#\t  $(MPI_ROOT_DIR)\n\n#\n\n##==========================================================================\n\n#\n\n#EXTRA_DIST = gen-headers.py\n\n#\n\n#clean-local:\n\n#\trm -f *.ti a.out rose_*.c\n\n#\trm -rf $(ALTMPI_OUT_DIR) $(ALTMPI_LIB_OUT_DIR)\n\n#\n\n## eof\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/compass/src/util/MPIAbstraction/alt-mpi-headers/Makefile.am" : {
      "ObjectId" : "6f8b9b7a8c779040e069b60018b8d3a362c94ece",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#==========================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ALTMPI_OUT_DIR = ./include\n\n# ALTMPI_LIB_OUT_DIR = ./lib\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The distribution builds the $(ALTMPI_OUT_DIR) and the $(ALTMPI_LIB_OUT_DIR)\n\n# into the source tree (different from the development bversion of ROSE, so \n\n# include the directory for that location as well.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#==========================================================================\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# libmpi_alt_defs_la_SOURCES = $(ALTMPI_SRCS) $(ALTMPI_HDRS)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#==========================================================================\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#==========================================================================\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# eof\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/compass/src/util/MPIAbstraction/alt-mpi-headers/mpich-1.2.7p1/CMakeLists.txt" : {
      "ObjectId" : "0d0dfdeb906d81971c096f58978152ccfce358e9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SUBDIRS = include\n\n#\n\n## eof\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass/src/util/MPIAbstraction/alt-mpi-headers/mpich-1.2.7p1/Makefile.am" : {
      "ObjectId" : "528ff67fe474ebac6a0b0726c02eec22cc7f5efc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# eof\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass/src/util/MPIAbstraction/alt-mpi-headers/mpich-1.2.7p1/include/Makefile.am" : {
      "ObjectId" : "3ab5de41d2e8b3f4c00e6c21a1eccb1e5d5d7fd4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# eof\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass/src/util/MPIAbstraction/alt-mpi-headers/mpich-1.2.7p1/include/mpi2c++/Makefile.am" : {
      "ObjectId" : "482b5198aa298ded4c7df2082e41e2ee3fdabd68",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# eof\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass/src/util/Makefile.am" : {
      "ObjectId" : "f54de3d13f4dcc03515d087d9c0ae0079b9126da",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Utility support for Compass-based checkers.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/compass/tools/Makefile.am" : {
      "ObjectId" : "a0806b7e44dcd80f139bef8d159d1c92843dac72",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#SUBDIRS = compass compassVerifier sampleCompassSubset \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass/tools/compass/Makefile.am" : {
      "ObjectId" : "7fb2f84b1308a4c496946db666bc90548a4ee80c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (9/10/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (3/2/2017): This makefile rule will modify the source tree and the CHECKER_LIST file which is a \n\n# problem for development because the modification is done to the source tree and the new directory\n\n# will not be a part of the git repository, and which the work is commited and tested the modified\n\n# CHECKER_LIST file will reference a checker \"blankTestChecker\" that does not exist.  This rule\n\n# should be modified to only make changes to the build tree.\n\n#\t@$(MAKE) testNewChecker\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (3/2/2017): This makefile rule will modify the source tree and the CHECKER_LIST file which is a \n\n# problem for development because the modification is done to the source tree and the new directory\n\n# will not be a part of the git repository, and which the work is commited and tested the modified\n\n# CHECKER_LIST file will reference a checker \"blankTestChecker\" that does not exist.  This rule\n\n# should be modified to only make changes to the build tree.\n\n#\t@$(MAKE) testNewChecker\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GNU Compiler version numbers 4.8 and and greater and strictly less than 6.1\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Test Compass using a small test file\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test Compass using a large file within ROSE\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Flymake Support in ROSE\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#       @$(top_builddir)/projects/compass/compassMain --compass:silent -I$(top_builddir) $(ROSE_INCLUDES) -I$(srcdir)/compassSupport -I$(srcdir)/util $(COMPASS_INCLUDES) -rose:excludeFile .code -rose:excludeFile .macro -rose:includeFile $(CHK_SOURCES) $(CHK_SOURCES)\n\n#       $(top_builddir)/projects/compass/compassMain --compass:silent -I$(top_builddir) $(ROSE_INCLUDES) -I$(srcdir)/compassSupport -I$(srcdir)/util $(COMPASS_INCLUDES) -rose:includeFile $(CHK_SOURCES:_flymake.C=) $(CHK_SOURCES)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#testEmacs: compassMain compass_parameters\n\n#\tenv COMPASS_PARAMETERS=./compass_parameters ./compassMain --compass:silent -I$(top_builddir) $(ROSE_INCLUDES) -I$(srcdir)/compassSupport -I$(srcdir)/util $(COMPASS_INCLUDES) -rose:includeFile $(srcdir)/testEmacs.C $(srcdir)/testEmacs.C\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#testEmacsSize: compassMain compass_parameters\n\n#\tg++ -E -I$(top_builddir) $(ROSE_INCLUDES) -I$(srcdir)/compassSupport -I$(srcdir)/util $(COMPASS_INCLUDES) $(srcdir)/testEmacs.C > wc.out\n\n#\twc -l wc.out\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (1/15/2009): This fails in a Boost problem of some sort!\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This runs compass on the compass binary, small because this is dynamically linked\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Note that gzip.c appears to take over ten minutes in the Defuse Analysis (something is wrong here).\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\t./gui/compassMainGui $(top_srcdir)/developersScratchSpace/Dan/C_tests/gzip.c\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "projects/compass/tools/compass/buildInterpreter/Makefile.am" : {
      "ObjectId" : "8aae6f87a4b64c9aa2e9f352e7d0abaacf186772",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (1/12/2009): Removed -lrt since it fails on Mac OSX\n\n# buildInterpreter_LDADD = $(ROSE_LIBS) -lrt\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ROSE_REGRESSION_ROOT=../../../../../tests/nonsmoke/functional/CompileTests/C_tests/\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#test: compass_parameters compassMainGui $(compass_test_dir)/exampleTest_1.C\n\n#\tenv COMPASS_PARAMETERS=./compass_parameters ./compassMainGui $(compass_test_dir)/exampleTest_1.C\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (1/11/2009): Modified this, since it was not checked into SVN and does not appear to be required.\n\n# EXTRA_DIST = compassChecker.h compassGui.h compassInterface.h compassResult.h compassViolation.h icons.h timer.h disks.xpm \n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/compass/tools/compass/doc/Makefile.am" : {
      "ObjectId" : "928e09009b242a5522e84ed41369986e11e7e6cc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\tpdflatex compass.tex \n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# pointless file moving\t??\n\n#\t@mv -f compass.pdf ..\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/compass/tools/compass/gui/Makefile.am" : {
      "ObjectId" : "ad7f7f255ac50344009e6f881b343995baff74da",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) $(QT_INCLUDES) $(QROSE_CXXFLAGS) $(BOOST_CPPFLAGS) -I$(compass_support_dir) -I$(compass_srcdir) -I$(compass_checker_dir) -I$(compass_prereqs_dir) -I$(compass_support_bdir) -I.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This demo copys a collection of C source files and builds an SQLite database of there command lines and uses that with Compass.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tDQ (2/22/2009): In the SciDAC distribution there are no header files in this directiry, but there are in my version and also in the internal SVN).\n\n#\tcp $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests/*.c $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests/*.h .\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass/tools/compass/gui2/Makefile.am" : {
      "ObjectId" : "de82b5eec1ef0f99e517b7996ba77e631410c3bd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Include Paths for the roseQt-widgets  and rules for Qt's metacompiler moc,uic,rcc\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass/tools/compass/tests/Compass_C_tests/Makefile.am" : {
      "ObjectId" : "48767563ffe48fcf7fd1c45d977162254f0daf9f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bin_PROGRAMS = statements\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This transltor output source position info\n\n# statements_SOURCES = statements.C\n\n# statements_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (8/14/2004) Developer's Note:\n\n# This permits the use of the pair of libraries -lrose -ledg OR the longer \n\n# list of libraries (the later option is much faster for development work).\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Turn on GNU Coverage Tool (gcov)\n\n# CXX += -fprofile-arcs -ftest-coverage\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# GNU Compiler version numbers 4.8 and and greater and strictly less than 6.1\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# GNU Compiler version numbers 4.8 and and greater and strictly less than 6.1\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (3/1/2017): These are failing tests for newer versions of GNU compiler (e.g. GNU 4.8), but work fine on the GNU 6.1 compiler.\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Since these file reference file in the ../Cxx_tests direcotry we have to \n\n# shorten this file list but not more than it is done there, else \"make distcheck\"\n\n# will fail.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# JJW 5-22-2008 This test is not portable to Mac OS X\n\n# test2006_44.C\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# test2007_95.C -- broken test case\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# JJW: Add touch command so tests will not be run more than once\n\n# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t$(VALGRIND) ./statements $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# DQ (9/11/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "projects/compass/tools/compass/tests/Compass_Cxx_tests/Makefile.am" : {
      "ObjectId" : "4fbf5215f284715d820c04dfad5e0a4681a2c769",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bin_PROGRAMS = statements\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This transltor output source position info\n\n# statements_SOURCES = statements.C\n\n# statements_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (8/14/2004) Developer's Note:\n\n# This permits the use of the pair of libraries -lrose -ledg OR the longer \n\n# list of libraries (the later option is much faster for development work).\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Turn on GNU Coverage Tool (gcov)\n\n# CXX += -fprofile-arcs -ftest-coverage\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# GNU Compiler version numbers 4.8 and and greater and strictly less than 6.1\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# GNU Compiler version numbers 4.8 and and greater and strictly less than 6.1\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (3/1/2017): These are failing tests for newer versions of GNU compiler (e.g. GNU 4.8), but work fine on the GNU 6.1 compiler.\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Since these file reference file in the ../Cxx_tests direcotry we have to \n\n# shorten this file list but not more than it is done there, else \"make distcheck\"\n\n# will fail.\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# JJW 5-22-2008 This test is not portable to Mac OS X\n\n# test2006_44.C\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n",
        "Line" : 662,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# JJW: Add touch command so tests will not be run more than once\n\n# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t$(VALGRIND) ./statements $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# DQ (9/11/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 704,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "projects/compass/tools/compass/tests/Compass_OpenMP_tests/Makefile.am" : {
      "ObjectId" : "e9247f788510a2d732d45cadb70cd4420028f32d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bin_PROGRAMS = statements\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This transltor output source position info\n\n# statements_SOURCES = statements.C\n\n# statements_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (8/14/2004) Developer's Note:\n\n# This permits the use of the pair of libraries -lrose -ledg OR the longer \n\n# list of libraries (the later option is much faster for development work).\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n# LDADD = $(LIBS_WITH_RPATH) $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Turn on GNU Coverage Tool (gcov)\n\n# CXX += -fprofile-arcs -ftest-coverage\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Since these file reference file in the ../Cxx_tests direcotry we have to \n\n# shorten this file list but not more than it is done there, else \"make distcheck\"\n\n# will fail.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# JJW: Add touch command so tests will not be run more than once\n\n# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\t$(VALGRIND) ./statements $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n\n#\techo \"Copy the file to the local build tree so that the we can process it with compass (not required by compass) ...\"\n\n#\tcp $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests/$(@:.o=.C) $(@:.o=.c)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (9/11/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "projects/compass/tools/compass/tests/Makefile.am" : {
      "ObjectId" : "f3c46fcc9dab2fe473769a5bc3c229a50cf20666",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n# TESTCODES = exampleTest_1.C \n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GNU Compiler version numbers 4.8 and and greater and strictly less than 6.1\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This test just takes a long time and is not critical now that we have seperate C and C++ test directories.\n\n# exampleTest_2.C \n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/11/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/compass/tools/compassVerifier/Makefile.am" : {
      "ObjectId" : "7e4370da7573e59cfac4647e5a97d0565a7ce305",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# compassVerifier\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This does not contribute to the link line\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (9/10/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#oneBigVerify: compassVerifier compass_parameters $(TOOLBUILD)/CHECKER_LIST_WITHOUT_COMMENTS\n\n#\trm -f catChecker.C catCheckerIncludes.txt catChecker.ti\n\n#\t@echo \"Concatenating all checker sources\"\n\n#\t@sh -c '\\\n#\tfor file in `cut -f 1 -d \\  < $(TOOLBUILD)/CHECKER_LIST_WITHOUT_COMMENTS` ;\\\n#\tdo \\\n#\t\tlin=`grep -n \"static void run\" $(compass_checker_dir)/$${file}/$${file}.C | cut -d: -f1` ;\\\n#\t\thead -$$((lin-1)) $(compass_checker_dir)/$${file}/$${file}.C >> catChecker.C ;\\\n# \t\techo \"-I$(compass_checker_dir)/$${file}\" >> catCheckerIncludes.txt ;\\\n# \tdone ;\\\n# \texport CAT_CHECKER_INCLUDES=`cat catCheckerIncludes.txt` ;\\\n# \techo \"env COMPASS_PARAMETERS=./compass_parameters ./compassVerifier -I$(top_builddir) $(AM_CPPFLAGS) $${CAT_CHECKER_INCLUDES} catChecker.C\" ;\\\n# \tenv COMPASS_PARAMETERS=./compass_parameters ./compassVerifier -rose:verbose 0 -I$(top_builddir) $(AM_CPPFLAGS) $${CAT_CHECKER_INCLUDES} catChecker.C ;\\\n# \t'\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#for prefix in `cut -f 1 -d \\  < $(TOOLBUILD)/CHECKER_LIST_WITHOUT_COMMENTS`;\\\n#\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\techo \"AllowedFunctions.Library0=$(prefix)/include\" >> compass_parameters\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tdeclare -i count=`wc -l $(compass_srcdir)/allowedFunctions/custom_parameters | gawk '{print $$1}'` ;\\\n\techo \"AllowedFunctions.FunctionNum=$$count\" >> compass_parameters ;\\\n\twhile ((count > 0)) ;\\\n\tdo \\\n\t\techo \"AllowedFunctions.Function$$((count-1))=`head -$$count $(compass_srcdir)/allowedFunctions/custom_parameters | tail -1`\" >> compass_parameters ;\\\n\t\t((count--)) ;\\\n\tdone\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/compass/tools/sampleCompassSubset/Makefile.am" : {
      "ObjectId" : "8cd3e0ca331d55c7b1b0ef26b3baca70bcc4986e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#################################################################################\n\n# This is a sample of how one would create a subset of compass as a separate \n\n# tool\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (3/1/2017): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/10/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/compass2/CMakeLists.txt" : {
      "ObjectId" : "2a25d9b9ff8a7a25b138ce37db48089ccdd8d134",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/compass2/Makefile.am" : {
      "ObjectId" : "4d9289d6b2036aa5e6b28f5d51ed3e9e60bbda54",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid naming collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Compass2\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  libcompass2.la\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#libcompass2_YFLAGS = -p ltl_ # yacc flags for LTL parser\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -O3 -march=native -ftree-vectorize\n",
        "Line" : 37,
        "CharPositionInLine" : 47
      },
      "5" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Compass2 main executable\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Checkers\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#PLACEHOLDER\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  XML Schemas\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## The nobase_ prefix instructs Automake to not strip the directory part from\n\n## each filename. For example,\n\n##\n\n##     Install to ${PREFIX}/share/compass2/xml/compass_parameters.xsd\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Tests\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Documentation\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "projects/compass2/docs/Makefile.am" : {
      "ObjectId" : "44108132ecf2c45bc0a0dfecd7552cdf1fa67259",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Compass2 documentation\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass2/docs/asciidoc/Makefile" : {
      "ObjectId" : "f167cc5325f6846b7d80fca2a94131e9d78afc45",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (C) 2009 The Android Open Source Project\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass2/docs/asciidoc/Makefile.am" : {
      "ObjectId" : "329bf733c2b167b4b7073373b337e02f6f777e04",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Compass2 AsciiDoc documentation\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass2/docs/doxygen/Makefile.am" : {
      "ObjectId" : "3efd4f25129a2556c5c39908c88dc231c72efde5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Compass2 main library\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass2/tests/Makefile.am" : {
      "ObjectId" : "1f78a1dd35e4d4c9884fa827138f71c9e538a34a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid naming collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass2/tests/checkers/Makefile.am" : {
      "ObjectId" : "c1f72af46cf4d79fe57c7deac11793bd7b45967d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid naming collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/compass2/tests/checkers/allocate_and_free_in_the_same_module/Makefile.am" : {
      "ObjectId" : "b358c738885bf7967be16161d350e68a6087ecd5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/asynchronous_signal_handler/Makefile.am" : {
      "ObjectId" : "8af2e2da8219b5e7089bdbbf9ade9050d6f9f25d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/boolean_is_has/Makefile.am" : {
      "ObjectId" : "42c14eaec1b510ec27cfea94441bb6e61b930a92",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/byte_by_byte_structure_comparison/Makefile.am" : {
      "ObjectId" : "5f377385da34d1dc288a16e2bf6bad0c153a1c60",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/comma_operator/Makefile.am" : {
      "ObjectId" : "1d6b0036f6617f908b7880e3ebd4072181074059",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/dangerous_overload/Makefile.am" : {
      "ObjectId" : "42de24433979e7b94fc331f95980b94efa2cd315",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/data_member_access/Makefile.am" : {
      "ObjectId" : "a19695f9a970a4870a8c7ff8a453f1a52b3570f8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/dead_function/Makefile.am" : {
      "ObjectId" : "2ed46080e2a1c639db08df081f53c0f1050bc5b7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/default_argument/Makefile.am" : {
      "ObjectId" : "680f9cb5586a47dab0395b201465e43816589ff3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/discard_assignment/Makefile.am" : {
      "ObjectId" : "9924ae9b209e4a30d4f91f973d1d83a59f8dc0d6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/do_not_delete_this/Makefile.am" : {
      "ObjectId" : "d204d90c54a1e5089dff1d8b0ca34738b08e2c48",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/explicit_test_for_non_boolean_value/Makefile.am" : {
      "ObjectId" : "724ca84af70701ff9d8bfd44d42684fbed94d0c6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/float_for_loop_counter/Makefile.am" : {
      "ObjectId" : "5ef005a86482c97d5a1b889b62651697aaa72c24",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/floating_point_exact_comparison/Makefile.am" : {
      "ObjectId" : "59ceb357de6e9bc7e69cda9ca1082a44dd428760",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/forbidden_functions/Makefile.am" : {
      "ObjectId" : "c2ef131a0d88a8be4e468ac1aecedf756e298b4b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/function_pointer/Makefile.am" : {
      "ObjectId" : "da28cd9ae0d6b73161e0cafdc6886c9ff778f042",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/function_prototype/Makefile.am" : {
      "ObjectId" : "0cab3073485fb097b7048a21eb6830bfdc5e59d2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/function_with_multiple_returns/Makefile.am" : {
      "ObjectId" : "93d7686d732f157abdf7a03514708bd74ca83c5d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/global_variables/Makefile.am" : {
      "ObjectId" : "a1e6e2d67d6bbb98e84c86f8e01bfb541b0840fb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/keyword_macro/Makefile.am" : {
      "ObjectId" : "84ce871c1b36f127584d50b0bdb037f027149d96",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/magic_number/Makefile.am" : {
      "ObjectId" : "9fa0b4797c783d50e5c21bb6cd711abf24a7d869",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/no_goto/Makefile.am" : {
      "ObjectId" : "c81cd042486a2ccab970a27976ab27259da0542e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/no_rand/Makefile.am" : {
      "ObjectId" : "250b9db58a37adbf1aa9c90ab2a725be0b36ca68",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/no_variadic_functions/Makefile.am" : {
      "ObjectId" : "e75a4da5afb8d757842e28dc276e3004714dc49d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/no_vfork/Makefile.am" : {
      "ObjectId" : "50dd3dcb488128f59ddbe822b045b67dd59f8c3b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/non_global_cpp_directive/Makefile.am" : {
      "ObjectId" : "3abb0bc772b94a8efe1ae345680d36cb13b715b1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/non_static_array_size/Makefile.am" : {
      "ObjectId" : "e133c43c37dd42ce2cbfa9369a5b7b6d66f930be",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TESTCODES=\\\n#\tnon_static_array_size_test_1.cpp\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/compass2/tests/checkers/pointer_comparison/Makefile.am" : {
      "ObjectId" : "132c9aabb889c2dd563a1d145556a8a5a93b43fb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/size_of_pointer/Makefile.am" : {
      "ObjectId" : "17fa98a9dc20edfbdc481151dafa564f049fe8fe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/ternary_operator/Makefile.am" : {
      "ObjectId" : "608c8692184a46012033b8ed221a9b8a01dba0c6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/unary_minus/Makefile.am" : {
      "ObjectId" : "eedeaa68e601cb17aeb0b3f1f9a40d28aeb79a35",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/checkers/variable_name_similarity/Makefile.am" : {
      "ObjectId" : "8066cae90ab912ac7544b27a8e8d9d0bd1ec4f29",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/compass2/tests/core/Makefile.am" : {
      "ObjectId" : "ee04736db3d505a7d1989f6c8ccbfb1b2741376e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Globals\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Test rules\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/dataStructureGraphing/Makefile.am" : {
      "ObjectId" : "6a2949f51faa0d56595507f45750fb8a9bb158b2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Define the template repository path used in the autoconf\n\n# subsitution for various C++ template control variables.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/2/2004): Not clear why ROSE_LIBS is not enough.  Need to fix ROSE to use just two libraries!\n\n# LDADD = $(ROSE_LIBS)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (12/5/2009): Skip testing of this code to establish the size of the problem!\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if ROSE_BUILD_OS_IS_CYGWIN\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    handle.C\n\n#    helpMethods.C\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Need to get together with Andreas to get this working.\n\n# He will be here in another week, so I will not worry about this now!\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/demos-dlx-mdcg/Makefile.am" : {
      "ObjectId" : "4bd0c2deec2764d2d2e57b31ea9f4307ed3088cd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/include/DLX/Logger/Makefile.am" : {
      "ObjectId" : "6063f0af667416b235cf3b2c845985515e8fd72c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/include/DLX/Makefile.am" : {
      "ObjectId" : "a602bdde01ecb015e26941486279415fc239c23f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/include/MDCG/Logger/Makefile.am" : {
      "ObjectId" : "bf044f49749741b38ccc790ebdc25cce2630aa2d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/include/MDCG/Makefile.am" : {
      "ObjectId" : "a602bdde01ecb015e26941486279415fc239c23f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/include/Makefile.am" : {
      "ObjectId" : "3058e0b7cc4c2374cac9b5711547e3af4f6c7550",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/include/libLogger/Makefile.am" : {
      "ObjectId" : "2850fa14e8f1f15d0b9fd0077446797beb7dfa53",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/lib/Makefile.am" : {
      "ObjectId" : "d39271e2cc8498de15e4aee85444a92789107b61",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/lib/dlx/Makefile.am" : {
      "ObjectId" : "38150a4ce3d0c798d8a0ca58f139b678bb690300",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/lib/dlx/logger/Makefile.am" : {
      "ObjectId" : "e4b96c354127533b58490852f2c508a05c767490",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/lib/liblogger/Makefile.am" : {
      "ObjectId" : "fd73089e803d81357f9be4d63ea102bdc3f7f195",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/lib/mdcg/Makefile.am" : {
      "ObjectId" : "38150a4ce3d0c798d8a0ca58f139b678bb690300",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/lib/mdcg/logger/Makefile.am" : {
      "ObjectId" : "728ce97108b358e4f6639f76c6e91b24a22eb0f4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/src/Makefile.am" : {
      "ObjectId" : "a2e952a9f07f6cd04933fc0a1973e6476649f455",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/demos-dlx-mdcg/tests/Makefile.am" : {
      "ObjectId" : "29d1794d6d9e8429a19ec099289aa779f7a363d3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/dsl_infrastructure/Makefile.am" : {
      "ObjectId" : "c8b415ef43a50f1a9a2384cb9b44d8efa3231e59",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This included test programs demonstrating the std::function use and API.\n\n# bin_PROGRAMS    = attributeGenerator testFunctionCallBack_01 testFunctionCallBack_02 testFunctionCallBack_03 testFunctionCallBack_04 array_main arrayDSLcompiler\n\n# bin_PROGRAMS    = attributeGenerator array_main arrayDSLcompiler\n\n# bin_PROGRAMS    = attributeGenerator array_main arrayDSLcompiler amrShiftDSLcompiler\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Switch between the two different DSL compilers that we build (these need to be in seperate directories at some point soon).\n\n# bin_PROGRAMS    = attributeGenerator array_main arrayDSLcompiler\n\n# bin_PROGRAMS    = attributeGenerator array_main amrShiftDSLcompiler\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# attributeGenerator_SOURCES = attributeGenerator.C attributeGenerator.h\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (5/5/2016): Add use of dsl_infrastrcutre library to the attributeGenerator.\n\n# attributeGenerator_LDADD = -ldsl_infrastructure\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note that dsl_attributes.C is ultimately a generated file.\n\n# array_main_SOURCES = array_main.C array.C generated_dsl_attributes.C generated_dsl_attributes_wrapper.C \n\n# array_main_SOURCES = array_main.C array.C generated_dsl_attributes.C\n\n# array_main_SOURCES = array_main.C array.C generated_dsl_attributes.C generated_dsl_attributes_wrapper.C\n\n# array_main_SOURCES = array_main.C array.C \n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# arrayDSLcompiler_SOURCES = arrayDSLcompiler.C dsl_detection.C dslSupport.C generated_dsl_attributes.C array.C\n\n# arrayDSLcompiler_SOURCES = arrayDSLcompiler.C dsl_detection.C dslSupport.C nongenerated_dsl_attributes.C array.C\n\n# arrayDSLcompiler_SOURCES = arrayDSLcompiler.C dsl_detection.C dslSupport.C generated_dsl_attributes_wrapper.C generated_dsl_attributes.C generated_dsl_attributes_header.C array.C\n\n# arrayDSLcompiler_SOURCES = arrayDSLcompiler.C dsl_detection.C dslSupport.C generated_dsl_attributes_wrapper.C array.C\n\n# arrayDSLcompiler_SOURCES = arrayDSLcompiler.C dsl_detection.C dslSupport.C array.C \n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# amrShiftDSLcompiler_SOURCES = arrayDSLcompiler.C dsl_detection.C dslSupport.C\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# dsl_detection_SOURCES = dsl_detection.C\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (1/19/2016): Added test code for std::function support required in DSL recognition and evaluation.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Simple example\n\n# array_SOURCES = array.C\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ATERM_LIB_DIR = $(ATERM_INSTALL_PATH)/lib\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TESTCODES_REQUIRED_TO_PASS = test2014_01.C\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We can optionally by-pass the dsl_attributes.C by copying a version from the srcdir.\n\n# generated_dsl_attributes.h: $(srcdir)/nongenerated_dsl_attributes.h \n\n#\tcp $(srcdir)/nongenerated_dsl_attributes.h generated_dsl_attributes.h\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# generated_dsl_attributes.C: $(srcdir)/nongenerated_dsl_attributes.C generated_dsl_attributes.h \n\n#\tcp $(srcdir)/nongenerated_dsl_attributes.C generated_dsl_attributes.C\n\n# generated_dsl_attributes.C: testAttributeGenerator\n\n# generated_dsl_attributes_header.C: testAttributeGenerator\n\n# $(builddir)/generated_dsl_attributes.C $(builddir)/generated_dsl_attributes_header.C: testAttributeGenerator\n\n# $(builddir)/generated_dsl_attributes.C $(builddir)/generated_dsl_attributes_header.C: attributeGenerator\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This is for generating the code used to build the DSL compiler.\n\n# This needs to have a single target else it will be called twice. Note that generated_dsl_attributes_header.C\n\n# is also a dependence, but that we can't express it explicitly. \n\n# $(builddir)/generated_dsl_attributes.C: attributeGenerator\n\n#\t./attributeGenerator -std=c++11 -DSKIP_ROSE_HEADERS $(srcdir)/array_header.C\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Generate DOT graphs of the kind of code we need to generate using ROSE.\n\n# generateDotOfTargetGeneratedCode: generated_dsl_attributes.C generated_dsl_attributes.h \n\n#\t$(top_builddir)/tests/nonsmoke/functional/testGraphGeneration -DSKIP_ROSE_HEADERS -I. $(srcdir)/nongenerated_dsl_attributes.C\n\n#\t$(top_builddir)/tests/nonsmoke/functional/testGraphGeneration -std=c++11 $(ROSE_INCLUDES) -I. -I$(top_builddir) $(srcdir)/nongenerated_dsl_attributes.C\n\n#\t$(top_builddir)/tests/nonsmoke/functional/testGraphGeneration -std=c++11 -DSKIP_ROSE_HEADERS -rose:skipfinalCompileStep -I. $(srcdir)/nongenerated_dsl_attributes.C\n\n#\t$(top_builddir)/tests/nonsmoke/functional/testGraphGeneration -std=c++11 -DSKIP_ROSE_HEADERS -rose:skipfinalCompileStep -I. $(srcdir)/dsl_attributes.C\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This is force to depend upon a single dependent file, even though dslSupport.o \n\n# depends upon generated_dsl_attributes_header.C insted of generated_dsl_attributes.C.\n\n# arrayDSLcompiler.o : $(builddir)/generated_dsl_attributes.C\n\n# dslSupport.o : $(builddir)/generated_dsl_attributes.C\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This is for testing the generation of the DSL code input to the DSL compiler only.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\t./attributeGenerator -DSKIP_ROSE_HEADERS -DSKIP_ROSE_BUILTIN_DECLARATIONS $(srcdir)/array_header.C\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# testArrayDSLCompiler: arrayDSLcompiler generated_dsl_attributes.o\n\n# testArrayDSLCompiler: arrayDSLcompiler generated_dsl_attributes_wrapper.o\n\n# testArrayDSLCompiler: testAttributeGenerator arrayDSLcompiler \n\n# testArrayDSLCompiler: generated_dsl_attributes.C generated_dsl_attributes_header.C arrayDSLcompiler \n\n# testArrayDSLCompiler: arrayDSLcompiler \n\n# testArrayDSLCompiler: $(builddir)/generated_dsl_attributes.C\n\n# testArrayDSLCompiler: arrayDSLcompiler\n\n#\t./arrayDSLcompiler -Wunknown-pragmas -DSKIP_ROSE_BUILTIN_DECLARATIONS -c $(srcdir)/array_main.C\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# testDSLCompiler: dsl_attributes.C\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# testAMRShiftCompiler: amrShiftDSLcompiler\n\n#\t./amrShiftDSLcompiler -Wunknown-pragmas -DSKIP_ROSE_BUILTIN_DECLARATIONS -std=c++11 -DSKIP_ROSE_HEADERS $(AMR_INCLUDES) $(srcdir)/AMRShift/Multigrid/multigridTest.cpp\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "projects/extractMPISkeleton/CMakeLists.txt" : {
      "ObjectId" : "febd4f0ab6f826fc669a9047b2c86fd7dc8c351d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/extractMPISkeleton/Makefile.am" : {
      "ObjectId" : "b1caa959b804ff261acfbc6e179e63357b56dafa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/extractMPISkeleton/src/CMakeLists.txt" : {
      "ObjectId" : "531f4e2b17d230d119e5a6b98231c6010ede3fcf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/extractMPISkeleton/src/Makefile.am" : {
      "ObjectId" : "55381b32fa05f8925d4ec7e4cae14633954c0d44",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# note: this expands!\n",
        "Line" : 37,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 1
    },
    "projects/extractMPISkeleton/tests/Makefile.am" : {
      "ObjectId" : "df245a33bac1d69a341f6cc20e920be7917f41b3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/fuse/Makefile.am" : {
      "ObjectId" : "a4593771bd43752305d1819c2c4e381fd497c186",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/fuse/src/Makefile.am" : {
      "ObjectId" : "30a0f6feed92ed8feb05b1713526065395c0bfbd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Liao, 1/16/2014, comment out missing files to pass make dist\n\n#\tdbglog/index.html  # used by the dbglog system\n\n#\tsrc/factor_trans_systemTest.C \n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for .C files\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for .cpp files\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#FUSE_C_CHECKS = ${FUSE_C_TESTS:.C=.C-o}\n\n#FUSE_CPP_CHECKS = ${FUSE_CPP_TESTS:.cpp=.cpp-o}\n\n#$(FUSE_C_CHECKS): fuse $(FUSE_TESTS_DIR)/$(@:.C=.C-o)\n\n#\t./fuse -c --edg:no_warnings $(@:.C-o=.C)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#$(FUSE_CPP_CHECKS):fuse $(FUSE_TESTS_DIR)/$(@:.cpp=.cpp-o)\n\n#\t./fuse -c --edg:no_warnings $(@:.cpp-o=.cpp)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (6/1/2014): Failing test.\n\n# test2005_163.C \n\n# test2011_77.C \n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#FUSE_CXX_TESTS_REQUIRED_TO_PASS = ${CXX_TESTS_REQUIRED_TO_PASS:.C=.C-o}\n",
        "Line" : 751,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#$(FUSE_CXX_TESTS_REQUIRED_TO_PASS): fuse $(CXX_TESTDIR)/$(@:.C=.C-o)\n\n#\t./fuse -c --edg:no_warnings $(ROSE_FLAGS) $(FUSE_FLAGS) -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests $(CXX_TESTDIR)/$(@:.C-o=.C)\n",
        "Line" : 753,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# command to run fuse ./fuse -fuse:\"lc(cp)\"\n\n# runs constant propagation on all cxx_ tests\n",
        "Line" : 757,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/fuse/src/dbglog/widgets/canviz-0.1/Makefile" : {
      "ObjectId" : "cb3568fbce9edd081d46fb55530b72f88b7decfb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This file is part of Canviz. See http://www.canviz.org/\n\n# $Id: Makefile 259 2009-01-20 22:52:24Z ryandesign.com $\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#EXAMPLE_GRAPHS_SRC_DIR:=$(GRAPHVIZ_SRC)/rtest/graphs\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/fuse/tests/Makefile.am" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/graphColoring/CMakeLists.txt" : {
      "ObjectId" : "1d540c61524ae1407a9f4ffa9d07f03bef5876b7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/graphColoring/Makefile.am" : {
      "ObjectId" : "b190e0b56124e7925c1677a6b0fd9e8f51bb4c10",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-rose:wave\n",
        "Line" : 17,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 1
    },
    "projects/haskellport/CMakeLists.txt" : {
      "ObjectId" : "ef90bf2c8232e3e2091f49d2d4f23bdf6d33394e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########### install files ###############\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#NONGENERATED_HSFILES = LICENSE ROSE.hs \\\n\n#  Data/DataMc.hs \\\n\n#  ROSE/CxxContainers.hs \\\n\n#  ROSE/Sage3.hs \\\n\n#  ROSE/Sage3/Misc.hs \\\n\n#  ROSE/Sage3/Misc.hs-boot \\\n\n#  ROSE/Sage3/SYB.hs\n\n#\n\n#TEST_HSFILES = tests/identityTranslator/Main.hs \\\n\n#               tests/simplify/Main.hs\n\n#\n\n#TEST_CFILES = tests/simplify/simplifyTest.C\n\n#\n\n#EXTRA_DIST = $(NONGENERATED_HSFILES) sage3.h.C WrapCxxContainers.h $(TEST_HSFILES) $(TEST_CFILES) disabled.html\n\n#\n\n#if USE_HASKELL\n\n#\n\n#INCLUDES = \\\n\n#     $(ROSE_INCLUDES) -I$(top_srcdir)/projects/DocumentationGenerator\n\n#\n\n#noinst_PROGRAMS = genStubsAndWrappers\n\n#lib_LTLIBRARIES = librosehswrap.la\n\n#\n\n#SRC_NONGENERATED_HSFILES = $(addprefix $(srcdir)/,$(NONGENERATED_HSFILES))\n\n#\n\n#LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -ldl $(LIBLTDL) $(top_builddir)/projects/DocumentationGenerator/libROSEDoxygen.a\n\n#\n\n#genStubsAndWrappers_SOURCES = genStubsAndWrappers.C\n\n#\n\n#ROSE/Sage3/Classes.hs WrapSage3Classes.C rose.cabal: run-genStubsAndWrappers-stamp\n\n#\ttouch -c $@\n\n#\n\n#headersWithoutLineDirective: $(wildcard $(top_builddir)/src/frontend/SageIII/*.h)\n\n#\tmkdir -p $@\n\n#\tfor file in $(top_builddir)/src/frontend/SageIII/*.h ; do \\\n\n#\t\tbase=`basename $$file` ; \\\n\n#\t\tgrep -v '^#line' $$file > $@/$$base ; \\\n\n#\tdone\n\n#\ttouch $@\n\n#\n\n#run-genStubsAndWrappers-stamp: genStubsAndWrappers sage3.h.C rose.cabal.in headersWithoutLineDirective\n\n#\tmkdir -p ROSE/Sage3/Methods\n\n#\t./genStubsAndWrappers -rose:collectAllCommentsAndDirectives -isystem headersWithoutLineDirective -IheadersWithoutLineDirective $(ROSE_INCLUDES) -I$(top_builddir) -IheadersWithoutLineDirective $(srcdir)/sage3.h.C\n\n#\ttouch $@\n\n#\n\n#librosehswrap_la_SOURCES = WrapROSE.C WrapSage3.C WrapCxxContainers.C\n\n#nodist_librosehswrap_la_SOURCES = WrapSage3Classes.C\n\n#librosehswrap_la_LIBADD = $(top_builddir)/src/librose.la\n\n#\n\n#all-local: cabal-build-stamp\n\n#\n\n#install-exec-local: cabal-install-stamp\n\n#\n\n#uninstall-local: cabal-configure-stamp\n\n#\t-$(GHCBIN)/runghc Setup.hs unregister\n\n#\trm -rf $(prefix)/lib/rose-$(PACKAGE_VERSION_NUMERIC) $(prefix)/share/doc/rose-$(PACKAGE_VERSION_NUMERIC)\n\n#\n\n#clean-local: cabal-clean\n\n#\trm -rf headersWithoutLineDirective\n\n#\trm -f identityTranslator simplify simplifyTest\n\n#\trm -f rose_*\n\n#\trm -rf WrapSage3Classes.C ROSE/Sage3/Classes.hs ROSE/Sage3/Methods ROSE/Sage3/Methods.hs\n\n#\trm -f tests/*/*.o tests/*/*.hi\n\n#\tif test \"x$(srcdir)\" != \"x.\" ; then rm -rf Data ROSE tests ; fi\n\n#\trm -f sage3.h.ti\n\n#\n\n#cabal-clean:\n\n#\tif [ -e cabal-configure-stamp ] ; then $(GHCBIN)/runghc Setup.hs clean ; fi\n\n#\tif test \"x$(srcdir)\" != \"x.\" ; then rm -f $(NONGENERATED_HSFILES) ; fi\n\n#\trm -f run-genStubsAndWrappers-stamp rose.cabal cabal-configure-stamp cabal-build-stamp cabal-install-stamp\n\n#\trm -rf checkHome\n\n#\n\n## The distclean-generic rule removes the autoconf generated files,\n\n## including Setup.hs which is used by the cabal-clean rule.  This causes\n\n## problems for parallel builds.  So we impose a precondition that\n\n## distclean-generic must run after cabal-clean\n\n#distclean-generic: cabal-clean\n\n#\t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n\n#\n\n#cabal-configure-stamp: ROSE/Sage3/Classes.hs rose.cabal Setup.hs $(SRC_NONGENERATED_HSFILES) librosehswrap.la\n\n#\tif test \"x$(srcdir)\" != \"x.\" ; then \\\n\n#\t\tfor file in $(NONGENERATED_HSFILES) ; do \\\n\n#\t\t\tif test ! $$file -nt $(srcdir)/$$file ; then \\\n\n#\t\t\t\tdir=`dirname $$file` ; \\\n\n#\t\t\t\tmkdir -p $$dir ; \\\n\n#\t\t\t\tcp $(srcdir)/$$file $$dir ; \\\n\n#\t\t\tfi ; \\\n\n#\t\tdone ; \\\n\n#\tfi\n\n#\t$(GHCBIN)/runghc Setup.hs configure $(HS_CONFIG_OPTS)\n\n#\ttouch $@\n\n#\n\n#cabal-build-stamp: cabal-configure-stamp\n\n#\t$(GHCBIN)/runghc Setup.hs build\n\n#\ttouch $@\n\n#\n\n#cabal-install-stamp: cabal-build-stamp\n\n#\t$(GHCBIN)/runghc Setup.hs install\n\n#\ttouch $@\n\n#\n\n#docs: cabal-configure-stamp\n\n#\t$(GHCBIN)/runghc Setup.hs haddock --html-location=\"http://haskell.org/ghc/docs/latest/html/libraries/\\$$pkg/\"\n\n#\n\n#check-local: check-identityTranslator check-simplify\n\n#\n\n#checkHome: cabal-build-stamp\n\n#\tmkdir -p checkHome\n\n#\tenv HOME=checkHome $(GHCBIN)/runghc Setup.hs install --inplace --user\n\n#\ttouch checkHome\n\n#\n\n#identityTranslator: tests/identityTranslator/Main.hs checkHome\n\n#\tmkdir -p tests/$@\n\n#\tenv HOME=checkHome $(GHCBIN)/ghc -package rose -o $@ -odir tests/$@ -hidir tests/$@ -i $<\n\n#\n\n#check-identityTranslator: identityTranslator\n\n#\t./$< -c $(top_srcdir)/exampleTranslators/documentedExamples/simpleTranslatorExamples/testCode.C\n\n#\n\n#simplify: tests/simplify/Main.hs checkHome\n\n#\tmkdir -p tests/$@\n\n#\tenv HOME=checkHome $(GHCBIN)/ghc -package rose -o $@ -odir tests/$@ -hidir tests/$@ -i $<\n\n#\n\n#check-simplify: tests/simplify/simplifyTest.C simplify\n\n#\t./simplify -o simplifyTest $<\n\n#\t./simplifyTest\n\n#\n\n#else\n\n#\n\n#docs: disabled.html\n\n#\t@echo \"Haskell support disabled, unable to build Haddock docs!\"\n\n#\tmkdir -p dist/doc/html/rose\n\n#\tcp $< dist/doc/html/rose/index.html\n\n#\n\n#endif\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/haskellport/Makefile.am" : {
      "ObjectId" : "ac08a80298f37f85ab4d33bb46ac2c1b4547f6df",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#if !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#endif\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Liao 12/21/2009,  people could build haskellport first\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We should not be using both \"-isystem\" and \"-I\" with the headersWithoutLineDirective directory.\n\n#\t./genStubsAndWrappers -rose:collectAllCommentsAndDirectives -isystem headersWithoutLineDirective -IheadersWithoutLineDirective $(ROSE_INCLUDES) -I$(top_builddir) -IheadersWithoutLineDirective $(srcdir)/sage3.h.C\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#endif\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (6/25/2011): \n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (6/23/2011): Added test makefile rule to support debugging ROSE name qualification.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#if !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t./genStubsAndWrappers -rose:collectAllCommentsAndDirectives -isystem headersWithoutLineDirective -IheadersWithoutLineDirective $(ROSE_INCLUDES) -I$(top_builddir) -IheadersWithoutLineDirective test_out.C\n\n#endif\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#if !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#endif\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The distclean-generic rule removes the autoconf generated files,\n\n# including Setup.hs which is used by the cabal-clean rule.  This causes\n\n# problems for parallel builds.  So we impose a precondition that\n\n# distclean-generic must run after cabal-clean\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#if !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t$(GHCBIN)/runghc Setup.hs configure $(HS_CONFIG_OPTS) --verbose=3 --extra-lib-dirs=$dwarf_path\n\n#\t$(GHCBIN)/runghc Setup.hs configure $(HS_CONFIG_OPTS) --verbose=3 --extra-lib-dirs=@dwarf_path@\n\n#\t$(GHCBIN)/runghc Setup.hs configure $(HS_CONFIG_OPTS) --verbose=3 --extra-lib-dirs=@LIBDWARF_LDFLAGS@\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if ROSE_HAVE_LIBDWARF\n\n# \t$(GHCBIN)/runghc Setup.hs configure $(HS_CONFIG_OPTS) --verbose=3 --gcc-option=@dwarf_path@/libdwarf.so --gcc-option=-lelf\n\n# else\n\n# \t$(GHCBIN)/runghc Setup.hs configure $(HS_CONFIG_OPTS) --verbose=3\n\n# endif\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#else\n\n#cabal-configure-stamp:\n\n#endif\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#if !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#endif\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#if !ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#endif\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "projects/highLevelGrammars/CMakeLists.txt" : {
      "ObjectId" : "e27b55703b35f936f56cab5f047790abf4017599",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/highLevelGrammars/Makefile.am" : {
      "ObjectId" : "b7a65d039530cac46d5d645cee7669b3db51762d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#    AplusplusAbstractionGeneratedSource.h\n\n#    AplusplusAbstractionGeneratedSource.C\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#     AplusplusAbstractionGeneratedSource.h\n\n#     AplusplusAbstractionGeneratedSource.C\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This rule generates a dependency that forces the \"make check\" \n\n# test to always compile the test code\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# AplusplusAbstractionGeneratedSource.C\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Provide a simple interface to the Makefile which outputs the relavant make-rules\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/interpreter/Makefile.am" : {
      "ObjectId" : "d15070f76d30365709a9aac3c29dd80f1e9699be",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Liao 3/28/2013. It is possible the libltdlc.la is not yet built\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Liao 3/28/2013. 10 tests fail now after switching to EDG 4.4. We comment them out for now based on Dan's suggestion.\n\n# They are agginit.c pointersFunctions.C constructors.C arrays.C md5.c nestedUnion.c anonUnionStruct.c anonUnionCtor.C initunion.c varargs.c\n\n# TODO: revisit this project with Markus when it is needed in future.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t./coreTest -interp:expectedReturnValue 12 $(srcdir)/testInput/core/agginit.c\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t./coreTest -interp:expectedReturnValue 91 $(srcdir)/testInput/core/pointersFunctions.C\n\n#\t./coreTest -interp:expectedReturnValue 20 $(srcdir)/testInput/core/constructors.C\n\n#\t./coreTest -interp:expectedReturnValue 59 $(srcdir)/testInput/core/arrays.C\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Liao 2/9/2011. Mac OS X 10.6: builtin functions have no definition.     \n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t./coreTest -interp:expectedReturnStr $$'\\xb4\\xc3\\x03\\x45\\x04\\x5f\\x6c\\x35\\x36\\xef\\x43\\x59\\xef\\xfc\\x34\\xd8' $(srcdir)/testInput/md5.c\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t./coreTest -interp:expectedReturnValue 4 $(srcdir)/testInput/core/nestedUnion.c\n\n#\t./coreTest -interp:expectUndefinedReturnValue $(srcdir)/testInput/core/anonUnionStruct.c\n\n#\t./coreTest -interp:expectedReturnValue 42 $(srcdir)/testInput/core/anonUnionCtor.C\n\n#\t./coreTest -interp:expectedReturnValue 0 $(srcdir)/testInput/core/initunion.c\n\n#\t./coreTest -interp:expectedReturnValue 10 $(srcdir)/testInput/core/varargs.c\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tDQ (1/12/2010): This appears to fail under Mac OSX (at least version 10.5).\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "projects/javaport/CMakeLists.txt" : {
      "ObjectId" : "369bd5b28251ca0d99d2f0620f5fe08c3e69eba7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\t\t\t\t\t\t\t-*- Makefile -*-\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GMY Javaport links to libCompass (sometimes --with-mpi) needs to find\n\n# MPI symbols \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#LTCXXCOMPILE = \\\n\n#        $(LIBTOOL) --tag=CXX --mode=compile $(MPICXX) $(DEFS) \\\n\n#        $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n\n#        $(AM_CXXFLAGS) $(CXXFLAGS)\n\n#CXXCOMPILE = \\\n\n#        $(MPICXX) $(DEFS) \\\n\n#        $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n\n#        $(AM_CXXFLAGS) $(CXXFLAGS)\n\n#CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(MPICXX) $(AM_CXXFLAGS) \\\n\n#        $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#INCLUDES\t=\t\t\t\t\t\t\\\n\n#\t-I.\t\t\t\t\t\t\t\\\n\n#\t-I$(top_srcdir)/src/frontend/SageIII\t\t\t\\\n\n#\t-I$(top_builddir)/src/frontend/SageIII\t\t\t\\\n\n#\t-I$(top_srcdir)/src/midend/astProcessing\t\t\\\n\n#\t-I$(top_srcdir)/src/3rdPartyLibraries/MSTL\t\t\\\n\n#\t-I$(top_srcdir)/src/frontend/SageIII/virtualCFG\t\t\\\n\n#\t-I$(top_srcdir)/src/util/stringSupport\t\t\t\\\n\n#\t-I$(top_srcdir)/src/roseSupport\t\t\t\t\\\n\n#\t-I$(top_srcdir)/src/util/commandlineProcessing\t\t\\\n\n#\t-I$(top_srcdir)/src/util\t\t\t\t\\\n\n#\t-I$(top_srcdir)/src\t\t\t\t\t\\\n\n#\t-I$(top_srcdir)/src/frontend/SageIII/astPostProcessing\t\\\n\n#\t-I$(top_srcdir)/src/frontend/SageIII/astFixup\t\t\\\n\n#\t-I$(top_srcdir)/src/frontend/SageIII/sageInterface\t\\\n\n#\t-I$(top_srcdir)/src/midend/astDiagnostics\t\t\\\n\n#\t-I$(top_srcdir)/src/backend/unparser\t\t\t\\\n\n#\t-I$(top_srcdir)/src/midend/astRewriteMechanism\t\t\\\n\n#\t-I$(top_srcdir)/src/midend/astQuery\t\t\t\\\n\n#\t-I$(top_srcdir)/src/frontend/SageIII/astMerge\t\t\\\n\n#\t-I$(top_builddir)/src/frontend/SageIII/astFileIO\t\\\n\n#\t-I$(top_srcdir)/src/midend/astInlining\t\t\t\\\n\n#\t-I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination\t\\\n\n#\t-I$(top_srcdir)/src/midend/programTransformation/constantFolding\t\\\n\n#\t-I$(top_srcdir)/src/midend/programAnalysis/CFG\t\t\\\n\n#\t-I$(top_srcdir)/src/midend/astUtil/astInterface\t\t\\\n\n#\t-I$(top_srcdir)/src/util/support\t\t\t\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is just to get the environment for Java.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This programs just make sure that no symbol are missing.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# testlink.o: libsage3_wrap.la\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#libsage3_wrap_la_SOURCES\t= sage3_wrap.cxx\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t\t$(top_builddir)/src/frontend/SageIII/Cxx_Grammar.h \n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# gov/llnl/casc/rose/GenericVector.java: GenericVector.java\n\n# \tmkdir -p gov/llnl/casc/rose\n\n# \tln -sf ../../../../$< $@\n\n# \n\n# gov/llnl/casc/rose/Ptr.java: Ptr.java\n\n# \tcp $< $@\n\n# \n\n# gov/llnl/casc/rose/Log.java: Log.java\n\n# \tcp $< $@\n\n# \n\n# gov/llnl/casc/rose/MakeSgNode.java: MakeSgNode.java\n\n# \tcp $< $@\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TESTS=testjava.sh\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#line/d' | \\\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Still export source files.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "projects/javaport/Makefile.am" : {
      "ObjectId" : "ebc8af71403d043ecd2017f504c9940b2fe2f9aa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# I would like to not have this be removed when we kill SWIG.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure that no intermediate files are removed by make when SWIG is killed.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (3/6/2013): We need a version of the ROSE_INLCUDES paths that excludes any possability of including the -isystem option.\n\n# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This case is not handled.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is just to get the environment for Java.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This programs just make sure that no symbols are missing.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# SWIG_DEBUG_OPTIONS = \n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (3/10/2013): This will only suppress warnings if -Wall and/or -v are NOT used.\n\n# Some of these are useful to track progress though large files (which takes a few minutes or could just hang).\n\n# SWIG_OPTIONS = -w315,325,350,351,401,451,503,516,822\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TESTS=testjava.sh\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Put the source files into the distribution.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/minitermite/CMakeLists.txt" : {
      "ObjectId" : "f175620fdd6e28b8e2029359ad73512d5d1ef141",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ############################################\n\n# Documentation\n\n# ############################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#info_TEXINFOS = doc/src2term.texi doc/term2src.texi\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We are distributing the compiled manpage so we don't depend on rst2man\n\n# Insert the output of xxx --help into the MAN page.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# bug in automake 1.9\n",
        "Line" : 67,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 5,
      "Errorlog" : "line 46:53 token recognition error at: '\\1'\n"
    },
    "projects/mint/CMakeLists.txt" : {
      "ObjectId" : "d9c78d52125d351f2346b1fc893ba923fe13cb2c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/mint/Makefile.am" : {
      "ObjectId" : "01ed94ac35bfe7cac45a516242314f2412996b79",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/mint/src/CMakeLists.txt" : {
      "ObjectId" : "1fe6888bc0f9dc3e31e2cba62190ff0afb1a4d19",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/mint/src/Makefile.am" : {
      "ObjectId" : "1d8f8b517a5555e9db38ffcdf397382a1e6cbf36",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  mint\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/mint/tests/CMakeLists.txt" : {
      "ObjectId" : "e0cf17860bd0bacae179221ab811a1408bdb855c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TESTCODES=\\\n\n#\t3D-variable-heat.c \\\n\n#\theat3D.c \\\n\n#\tpoisson19.c\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/mint/tests/Makefile.am" : {
      "ObjectId" : "fc2f62e06714daaba21710ef6622eaf114c6f5fc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/palette/Makefile.am" : {
      "ObjectId" : "a10d4d0d6883e35731026dad1486148e8e9896ac",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (12/5/2009): Skip testing of this code to establish the size of the problem!\n\n# if !ROSE_BUILD_OS_IS_CYGWIN\n\n# if ROSE_BUILD_OS_IS_CYGWIN\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If we are generating the smaller source files then Cxx_Grammar.h can't be used\n\n# to gather information required to run Palette, so skip this test.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t@if [ -e compass_parameters ]; then echo \"Please remove compass_parameters before running \\\"make check\\\"\" 1>&2; exit 1; fi\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# endif\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/pragmaParsing/CMakeLists.txt" : {
      "ObjectId" : "ac378dd8ab85d660c7c37de771ef18c5ee22e92a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/pragmaParsing/Makefile.am" : {
      "ObjectId" : "f4e235e1f0cce2d99bffc6961705538ce96694da",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-rose:wave\n",
        "Line" : 18,
        "CharPositionInLine" : 65
      },
      "1" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/programModeling/CMakeLists.txt" : {
      "ObjectId" : "b4fa7ec763be1eee48543c3674d04817f4e8feb6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/programModeling/Makefile.am" : {
      "ObjectId" : "e877eedba4b083bdd7bfc1da21f45a378ae4c43e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake conditional to control use of ROSE with Maple Symbolic Algebra Package\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# mapleAPIExample3\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# mapleAPIExample3_SOURCES = mapleAPIExample3.C\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/rose-tooling/Makefile.am" : {
      "ObjectId" : "4bd0c2deec2764d2d2e57b31ea9f4307ed3088cd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/include/DLX/Makefile.am" : {
      "ObjectId" : "1acee76dc1b6d3b8999229904f13e6064e45d4ed",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/include/DLX/Tooling/Makefile.am" : {
      "ObjectId" : "76b3a37fc3232a2a13c3493e9899062d93b03a58",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/include/Makefile.am" : {
      "ObjectId" : "7d33856c2f1aa80eef40786db13bf02f0eb5e182",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/lib/Makefile.am" : {
      "ObjectId" : "40d4e6f90542f3c2792d3488679f109b77e76aac",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/lib/dlx/Makefile.am" : {
      "ObjectId" : "c26d441e5a84705e3159016fc85dfd8906d199b4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/lib/dlx/tooling/Makefile.am" : {
      "ObjectId" : "a1ca8ccc4007b4e2e208adf12f593b638ccb3c32",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/src/Makefile.am" : {
      "ObjectId" : "78ecf7fee47cb6bac714d288907bd15c212e56b0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/rose-tooling/tests/Makefile.am" : {
      "ObjectId" : "99858a15fa5f58f262458cd3e1cd31e740338e11",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/Analysis/Alias/Makefile.am" : {
      "ObjectId" : "8a68c9f33946461a4b2efa7b25c3ba0efaee5c10",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/Analysis/Alias/src/Makefile.am" : {
      "ObjectId" : "06cd7cfa17c149612e375ce0b22474678687f938",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#include_HEADERS = AliasAnalysisModule.h\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/roseToLLVM/Analysis/Alias/tests/Makefile.am" : {
      "ObjectId" : "70eb559c25477c178d647fd9fd2e41e4cb88ab95",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# example2.c - rose2llvm cannot compile\n\n# switch5.c, switch6.c - output files differ\n\n# test.c - need to remove test script for this to run\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GENERATE Executables using rose2llvm\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/roseToLLVM/Analysis/Makefile.am" : {
      "ObjectId" : "986df8030d74972e55d7572f56d515e5e4238623",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/CMakeLists.txt" : {
      "ObjectId" : "d3e6a65111d6e8fcce38af5e3f90968303e8cc35",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/Makefile.am" : {
      "ObjectId" : "bd1f80cf2ca86ce6902a088b8c11c0719f21125b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/src/CMakeLists.txt" : {
      "ObjectId" : "83f00e7ef4eb42a530ae5db4dc2b2d949bf93837",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/src/Makefile.am" : {
      "ObjectId" : "1fb7133a8842e5bd67700c0cfb0964fe927e616c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n\n#MAINTAINERCLEANFILES\t= Makefile.in\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#rose2llvm_CFLAGS\t\t= \t\t\t\t\t\\\n#\t$(ROSE_CPPFLAGS) $(LLVM_CPPFLAGS)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/roseToLLVM/src/rosetollvm/CMakeLists.txt" : {
      "ObjectId" : "73ff0142c4ec8757e7aa51a80d5519396a4503b9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/src/rosetollvm/Makefile.am" : {
      "ObjectId" : "119c69230117a5213418f04897b1916051e9d113",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#pkginclude_HEADERS \t= \\\n#\tinclude/rosetollvm/RootAstAttribute.h \\\n#\tinclude/rosetollvm/ManagerAstAttribute.h \\\n#\tinclude/rosetollvm/AggregateAstAttribute.h \\\n#\tinclude/rosetollvm/AttributesAstAttribute.h \\\n#\tinclude/rosetollvm/CaseAstAttribute.h \\\n#\tinclude/rosetollvm/CodeAttributesVisitor.h \\\n#\tinclude/rosetollvm/CodeEmitter.h \\\n#\tinclude/rosetollvm/CodeGeneratorVisitor.h \\\n#\tinclude/rosetollvm/ConditionalAstAttribute.h \\\n#\tinclude/rosetollvm/ConditionalComponentAstAttribute.h \\\n#\tinclude/rosetollvm/DeclarationsAstAttribute.h \\\n#\tinclude/rosetollvm/DoAstAttribute.h \\\n#\tinclude/rosetollvm/ForAstAttribute.h \\\n#\tinclude/rosetollvm/FunctionAstAttribute.h \\\n#\tinclude/rosetollvm/IfAstAttribute.h \\\n#\tinclude/rosetollvm/IfComponentAstAttribute.h \\\n#\tinclude/rosetollvm/IntAstAttribute.h \\\n#\tinclude/rosetollvm/LLVMAstAttributes.h \\\n#\tinclude/rosetollvm/LLVMVisitor.h \\\n#\tinclude/rosetollvm/LogicalAstAttribute.h \\\n#\tinclude/rosetollvm/Option.h \\\n#\tinclude/rosetollvm/Optimize.h \\\n#\tinclude/rosetollvm/ObjectGenerator.h \\\n#\tinclude/rosetollvm/Control.h \\\n#\tinclude/rosetollvm/RoseToLLVMModule.hpp \\\n#\tinclude/rosetollvm/SgTypeAstAttribute.h \\\n#\tinclude/rosetollvm/SizeOfAstAttribute.h \\\n#\tinclude/rosetollvm/StringAstAttribute.h \\\n#\tinclude/rosetollvm/StringSet.h \\\n#\tinclude/rosetollvm/SwitchAstAttribute.h \\\n#\tinclude/rosetollvm/WhileAstAttribute.h\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\t$(ROSE_CPPFLAGS) $(BOOST_CPPFLAGS) $(LLVM_CPPFLAGS)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MAINTAINERCLEANFILES = Makefile.in\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/roseToLLVM/src/rosetollvm/include/Makefile.am" : {
      "ObjectId" : "977098ce08557862620f92b1a86f1a9d988bbd80",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/tests/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/roseToLLVM/tests/Makefile.am" : {
      "ObjectId" : "bf79c9e2371efedad3bdddff26105725b77ee9af",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# example2.c - rose2llvm cannot compile\n\n# switch5.c, switch6.c - output files differ\n\n# test.c - need to remove test script for this to run\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GENERATE Executables using rose2llvm\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate executables using clang\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# run the executables by rose2llvm\t\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# run the executables by clang\t\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# diff the output of 2 executables\t\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/scalarization/Makefile.am" : {
      "ObjectId" : "75a588793b4916c20e929be4f2852dd0732c1adb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/scalarization/src/Makefile.am" : {
      "ObjectId" : "604fbeeff095071973ca722eda573c7233409557",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# where to find rose and boost libraries \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/scalarization/tests/Makefile.am" : {
      "ObjectId" : "86120a07ae334f2f80a2cf53796bf1e137f49a14",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/simulator2/Makefile.am" : {
      "ObjectId" : "bb7fbd1ffc2faa52287e0f2386e4407fd959452a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Makefile for an x86 simulator called \"x86sim\". At this time the simulator is highly Linux-specific.  On platforms other\n\n# than Linux, this simulator is simply a main() that prints an error message and exits.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Forward declarations for \"+=\"\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################################################################\n\n#  DOCUMENTATION, CONFIGURATION, ETC\n\n###############################################################################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################################################################\n\n#  SIMULATOR LIBRARY\n\n###############################################################################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################################################################\n\n#  PROGRAMS\n\n###############################################################################################################################\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do not install RSIM_Private.h -- it is only used during compilation.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The simulator, which uses ROSE interfaces where possible.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# help debug the initial stack\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# demo to show how to monitor some file-related system calls\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################################################################\n\n#  INTERNAL SIMULATOR TESTS\n\n###############################################################################################################################\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################################################################\n\n#  SYSTEM CALL TESTS\n\n###############################################################################################################################\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Sources to generate the 32- or 64-bit specimen executables.  These come in three flavors depending on how they're linked:\n\n#    SyscallTests_Standalone   -- stand-alone, no additional source required\n\n#    SyscallTests_WithTestLib  -- use the SYS_TEST_SUPPORT library\n\n#    SyscallTests_WithRtLib    -- require linking with librt\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The test support library, statically compiled into each test\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Each test...\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-----------------------------------------------------------------------\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# SYS_TEST_INPUTS_TS_SRC = $(wildcard $(srcdir)/syscall_tests/syscall_ts*.c)\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (2/13/2011): This test fails to terminate when run on Hudson \n\n# (failed on hudson-rose-07, email with error details sent morning of 2/13/2011 to Robb and Andreas).\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.183.3.c\n\n# Liao 2/16/2011: I have to comment out this since  ERROR: Cannot create file /tmp/notty\t\t   \n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.54.c\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# These cannot be run reliably (at least not concurrently with other tests.\n\n# This variable is unused, but the scripts/policies/UnusedSources policy picks up these names to make these\n\n# otherwise unused fails as used.\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\tComments about $(TEST_INPUTS_FAILING) and why they're commented out.\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgget.03.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.shmget.03.c\n\n#  \t\t\tTries to create message queues or shared memory segments until all resources are exhausted in order\n\n#                       to see what kind of error number is returned. Unfortunately, other tests are also requiring these\n\n#\t\t\tresources at the same time.\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.78.2.c\n\n#\t\t\tCalls gettimeofday() in rapid succession for 30 seconds to make sure the value is monotonically\n\n#\t\t\tincreasing. However, some versions of the kernel have a bug in the way they interact with the RTC\n\n#\t\t\twhich can cause the clock to go backward by small amounts every so often.  See this discussion\n\n#\t\t\tfor an example: http://www.gossamer-threads.com/lists/linux/kernel/813344.\n\n#\t\t\tThis test can also fail if run while a leap-second is introduced since POSIX time goes backward\n\n#\t\t\tnear the leap second (slim chance we're actually testing right then!)\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.95.c \n\n#\t\t\tThis test does not pass natively on some systems, therefore we shouldn't expect it to pass\n\n#\t\t\tunder x86sim either.\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgctl.06.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgctl.07.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgget.04.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgrcv.02.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgsnd.02.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.semctl.02.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.semctl.03.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.semctl.04.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.semget.02.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.semop.02.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.shmat.02.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.shmat.03.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.shmctl.02.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.shmctl.03.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.shmget.04.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.shmget.05.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.195.1.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.195.2.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.195.3.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.196.2.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.196.3.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.221.18.c  (tries to setreud in a privileged way)\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.83.3.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.99.3.c\n\n#\t\t\tThese tests either explicitly check for root effective uid, or the fail with EACCESS on some\n\n#\t\t\tkernels. We can't be testing ROSE as root!\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgctl.09.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgctl.10.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.msgctl.11.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.117.semctl.06.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.221.14.c\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.221.15.c\n\n#\t\t\tDisabled because of deadlocks in simulated futex() call.  These need more work and should be enabled\n\n#\t\t\twhen possible. [FIXME RPM 2011-01-07]\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.140.1.c\n\n#\t\t\tThis test cannot be run under the simulator with stderr redirected to a file (it enters an infinite loop\n\n#\t\t\tsomewhere in the setrlimit() syscall emulation). Since \"make check\" runs tests with their stderr\n\n#\t\t\tredirected to a file, we will skip this test.\n\n#\t\t   $(srcdir)/syscall_tests/syscall_tst.118.2.c\n\n#\t\t\tUses floating point instructions\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The test inputs. These will not be generated if ENABLE_I386 is not defined.\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Target to manually build the syscall test inputs. (Not used internally)\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The test support library. These will not be generated if ENABLE_I386 is not defined.\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# The ipc support library\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Test targets are test names suffixed with \".passed\" (but when a test fails it produces \".failed\" instead).\n\n# Each target runs \"x86sim\" on one of the TEST_INPUT files. Exit status determines success or failure.\n\n# Test targets must be 32-bit x86; if we don't have that capability then the tests are not run.\n",
        "Line" : 692,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Some of the tests create files name \"tfile_%d_%d\" where the two numbers are a serial number and a PID. About 5000 of\n\n# these files are created in total and many of them are not placed in the specified temporary directories. Therefore\n\n# we have to remove them with a wildcard instead. Sorry if you had your own files with similar names (we tried to be careful).\n",
        "Line" : 703,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Cleanup targets. We can't put all the generated files in MOSTLYCLEANFILES because the list gets too long to pass\n\n# as arguments to \"rm\" (deficiency in automake).  Therefore we'll create a *.clean target for each test and have\n\n# clean-local depend on it.\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Main syscall testing target, on which \"make check\" depends.\n",
        "Line" : 728,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "###############################################################################################################################\n\n#  PTHREAD TESTS\n\n###############################################################################################################################\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Details about why things are listed in $(PTHREAD_INPUTS_FAILING)\n\n#\ttest result is non-deterministic when run natively\n\n#\t\t    $(srcdir)/pthread_tests/pthread_create.10-1.c\n\n# \tcompile error in these tests with undeclared variables\n\n#\t\t    $(srcdir)/pthread_tests/pthread_mutexattr_getprotocol.1-2.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_mutexattr_setprotocol.1-1.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_mutexattr_setprotocol.3-1.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_mutexattr_setprotocol.3-2.c\n\n# \tthese tests just take a very long time\n\n#\t\t    $(srcdir)/pthread_tests/pthread_spin_trylock.1-1.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_cond_init.1-3.c\n\n# \tthese jobs doen't stop even when terminated with control c and make terminates\n\n# \tit has to be killed by 'kill -9 '\n\n#\t\t    $(srcdir)/pthread_tests/pthread_mutexattr_settype.2-1.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_barrier_wait.6-1.c\n\n# \tno main function: \n\n#\t\t    $(srcdir)/pthread_tests/pthread_once.4-1.c\n\n#\tthese tests fail when run natively, outside the simulator, within 2 minutes.\n\n#\t\t    $(srcdir)/pthread_tests/pthread_cond_destroy.2-1.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_cond_init.4-2.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_cond_signal.1-2.c\n\n#       these tests require special privileges that aren't available for many users\n\n#\t\t    $(srcdir)/pthread_tests/pthread_attr_setinheritsched.2-2.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_attr_setinheritsched.2-3.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_attr_setinheritsched.2-4.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_attr_setschedparam.1-3.c\n\n#\t\t    $(srcdir)/pthread_tests/pthread_attr_setschedparam.1-4.c\n\n#\tthese tests are hard coded to always fail\n\n#\t\t    $(srcdir)/pthread_tests/pthread_attr_setscope.5-1.c\n",
        "Line" : 1122,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Target to manually build the test inputs. (Not used internally)\n",
        "Line" : 1221,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Liao 2/11/2011, ensure PTHREAD_TEST_TARGETS = warn_no_tests on MAC\n\n# The assignment of PTHREAD_TEST_TARGETS must be in the same if -statement.\n\n# Without this, the order of this statement and the following if-ENABLE_I386 may be rearranged on MAC\n",
        "Line" : 1225,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# warn_no_tests was already defined in the \"SYSTEM CALL TESTS\" section of this makefile\n",
        "Line" : 1233,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Cleanup targets. We can't put all the generated files in MOSTLYCLEANFILES because the list gets too long to pass\n\n# as arguments to \"rm\" (deficiency in automake).  Therefore we'll create a *.clean target for each test and have\n\n# clean-local depend on it.\n",
        "Line" : 1237,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Main pthread testing target, on which \"make check\" depends.\n",
        "Line" : 1245,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "###############################################################################################################################\n\n# Misc targets\n\n###############################################################################################################################\n",
        "Line" : 1249,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Conveniently build all test inputs in case we want to run some manually\n",
        "Line" : 1253,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#check-local:  #run-tests\n\n#\t@echo \"The simulator project is excluded from make check for now due to random hanging problems.\"\n\n#\t@echo \"Run 'make run-tests' in $$(pwd) instead.\"\n",
        "Line" : 1262,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# \"tmp-sim\" is the temp directory used to run the tests. See x86sim.conf.\n\n# Rather than stuffing *everything* in MOSTLYCLEANFILES, we use cleanup targets. This is to avoid argument lists that\n\n# are too long due.  In general, we don't want to use wild cards because some users might have some similarly named files\n\n# that they wouldn't expect a \"make clean\" to delete.\n",
        "Line" : 1266,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "###############################################################################################################################\n\n# These things are reported by the policy checkers as being unused. They should be investigated and them removed. Some of them\n\n# likely don't work anymore anyway since we never compile them.\n\n###############################################################################################################################\n",
        "Line" : 1277,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "projects/symbolicAnalysisFramework/Makefile.am" : {
      "ObjectId" : "2894178461a2cd6ceb599ad13e2e607308c9f4ae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Liao 10/6/2010.  add Greg's symbolic analysis work into ROSE\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/symbolicAnalysisFramework/include/Makefile.am" : {
      "ObjectId" : "79770f8e873f75375bfb505bb0a12e7f38486d9d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/symbolicAnalysisFramework/src/Makefile.am" : {
      "ObjectId" : "057753f783dcf6cb5c43258dfdadfdae9af8eccc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#Liao, 2.24.2012\n\n# removed duplicated subdirectories\n\n#         common \\\n#         analysis \\\n#         arrIndexLabeler \\\n#         cfgUtils \\\n#         lattice \\\n#         rwAccessLabeler \\\n#         simpleAnalyses \\\n#         state \\\n#         variables \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# there are inter dependencies among sub directories, parallel build is a bad idea for now\n\n#.NOTPARALLEL:\n\n#\techo \"parallel build is disabled in this directory to ease complex inter-directory dependencies\"\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Saf stands for symbolic analysis framework\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#          $(top_builddir)/projects/symbolicAnalysisFramework/src/common/libSafcommon.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/analysis/libSafanalysis.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/arrIndexLabeler/libSafarrIndexLabeler.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/cfgUtils/libSafcfgUtils.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/lattice/libSaflattice.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/rwAccessLabeler/libSafrwAccessLabeler.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/simpleAnalyses/libSafsimpleAnalyses.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/state/libSafstate.la \\\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/variables/libSafvariables.la\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Liao, not yet compilable \t  \n\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/varLatticeVector/libSafvarLatticeVector.la\n\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/chkptRangeAnalysis/libSafchkptRangeAnalysis.la \n\n#          $(top_builddir)/projects/symbolicAnalysisFramework/src/mpiAnal/libSafmpiAnal.la\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "projects/symbolicAnalysisFramework/src/chkptRangeAnalysis/Makefile.am" : {
      "ObjectId" : "51ab9551afeeba5305de96eadb324eef95fbb577",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------test program -------------------\n\n#.NOTPARALLEL:selfTest\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t./selfTest $(srcdir)/test_example.c\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/symbolicAnalysisFramework/src/external/Makefile.am" : {
      "ObjectId" : "dfd39430466d591af28083f5906884f413d5c6d7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#AM_CPPFLAGS = $(ROSE_INCLUDES) \\\n#           -I$(srcdir)/../external\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/symbolicAnalysisFramework/src/mpiAnal/Makefile.am" : {
      "ObjectId" : "c8f81f0c16bc4c48c489bb5eb09d5fabe92c28de",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n\n# strange error for corrupted mesgExpr.lo, disabling parallel build for this target\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------test program -------------------\n\n#.NOTPARALLEL: commTopoAnalTest  selfTest \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Liao 10/12/2010, this test fails on our boost version test for 1.39.0 , 1.42.0 and 1.43.0\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t./selfTest $(srcdir)/test_example.c\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "projects/symbolicAnalysisFramework/src/ompAnal/Makefile.am" : {
      "ObjectId" : "abc39ac9acaf556bdc90225a98a1197f55f5e118",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ompNormalForm.C\n",
        "Line" : 7,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : "# Liao 10/7/2010, boost issue with ompNormalForm.C\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ompNormalForm.h\n",
        "Line" : 10,
        "CharPositionInLine" : 29
      },
      "4" : {
        "Text" : "# ----------test program -------------------\n\n#.NOTPARALLEL:selfTest errorExample\n\n#noinst_PROGRAMS = selfTest errorExample\n\n#selfTest_SOURCES = selfTest.C\n\n#errorExample_SOURCES = errorExample.C\n\n#selfTest_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) \\\n#         libSafompAnal.la \\\n#         $(SAF_BUILD_ROOT)/src/common/libSafcommon.la \\\n#         $(SAF_BUILD_ROOT)/src/cfgUtils/libSafcfgUtils.la \\\n#         $(SAF_BUILD_ROOT)/src/variables/libSafvariables.la \\\n#         $(SAF_BUILD_ROOT)/src/unionFind/libSafunionFind.la \\\n#         $(SAF_BUILD_ROOT)/src/varBitVector/libSafvarBitVector.la \\\n#         $(SAF_BUILD_ROOT)/src/rwAccessLabeler/libSafrwAccessLabeler.la \\\n#         $(SAF_BUILD_ROOT)/src/arrIndexLabeler/libSafarrIndexLabeler.la\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n#errorExample_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n#\n\n#check-local:selfTest\n\n#\t./selfTest $(srcdir)/test_example.C\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "projects/symbolicAnalysisFramework/src/parallelCFG/Makefile.am" : {
      "ObjectId" : "08bbe593d3052364b918f4216ca4a2d7a242787f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Currently dataflow framework cannot handle mpicxx.h\n\n# we use .c to test this code\n\n# more test codes to be added after optimizing the match\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#check-local: check-c\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) \\\n#\t$(SAF_BUILD_ROOT)/src/parallelCFG/libSafpcfgAnalyses.la\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\t$(SAF_BUILD_ROOT)/src/analysis/libSafanalysis.la \\\n#\t$(SAF_BUILD_ROOT)/src/simpleAnalyses/libSafsimpleAnalyses.la \\\n#\t$(SAF_BUILD_ROOT)/src/lattice/libSaflattice.la \\\n#\t$(SAF_BUILD_ROOT)/src/common/libSafcommon.la \\\n#\t$(SAF_BUILD_ROOT)/src/cfgUtils/libSafcfgUtils.la \\\n#\t$(SAF_BUILD_ROOT)/src/variables/libSafvariables.la \\\n#\t$(SAF_BUILD_ROOT)/src/state/libSafstate.la \\\n#\t$(SAF_BUILD_ROOT)/src/rwAccessLabeler/libSafrwAccessLabeler.la \\\n#\t$(SAF_BUILD_ROOT)/src/arrIndexLabeler/libSafarrIndexLabeler.la \\\n#\t$(SAF_BUILD_ROOT)/src/external/libSafexternal.la\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------test program -------------------\n\n#noinst_PROGRAMS = selfTest\n\n#selfTest_SOURCES = selfTest.C\n\n#selfTest_LDADD = $(SAF_BUILD_ROOT)/src/common/libSafcommon.la \\\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n#\n\n#check-local:selfTest\n\n#\t./selfTest test_example.c\n\n#\n\n#EXTRA_DIST =  test_example.c\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/symbolicAnalysisFramework/src/taintAnalysis/Makefile.am" : {
      "ObjectId" : "f23ce876e35740760fb3a621e66f787cbd694059",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ: This should be handled differently.  No analysis should not have its own makefile include file.\n\n# include $(top_srcdir)/projects/symbolicAnalysisFramework/common.for.dep.libs\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SAF_SRC_ROOT   = $(top_srcdir)/projects/symbolicAnalysisFramework\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# codes with references and pointers\n\n# no support in the framework yet\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#C_FILES = $(TESTCODES_TO_PASS)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#cp $(srcdir)/taintFlowTests/$(@:.C-o=.C) ./taintFlowTests/$(@:.C-o=.temp.C)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#NOTE: taintFlowTests in the file's path is critical to enable the test\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#$(C_FILES): $(TEST_ANALYSIS)\n\n#\t$(TEST_ANALYSIS) $(ROSE_FLAGS) -I$(srcdir)/taintFlowTests -c $(srcdir)/taintFlowTests/$@\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "projects/symbolicAnalysisFramework/src/unionFind/Makefile.am" : {
      "ObjectId" : "38f758de79b4a090c7423944273eb1a053716e29",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------test program -------------------\n\n#.NOTPARALLEL:selfTest\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t./selfTest $(srcdir)/test_example.c\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/symbolicAnalysisFramework/src/varBitVector/Makefile.am" : {
      "ObjectId" : "1431db051b2244e5908492cc4c26c554ac32a210",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------test program -------------------\n\n#.NOTPARALLEL:selfTest\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Liao assertion failure here\n\n#\t./selfTest $(srcdir)/test_example.cpp\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/symbolicAnalysisFramework/src/varLatticeVector/Makefile.am" : {
      "ObjectId" : "e9a5493cd7942f22a3ea767fbdf63bf4984bc53f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Saf is the short for symbolic analysis framework.\n\n# it is used to avoid possible name collision \n\n#noinst_LTLIBRARIES = libSafvarLatticeVector.la\n\n#libSafvarLatticeVector_la_SOURCES = boolPlus.C VarLatticeVector.C\n\n#include_HEADERS = boolPlus.h  VarLatticeVector.h\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## ----------test program -------------------\n\n#.NOTPARALLEL:selfTest\n\n#noinst_PROGRAMS = selfTest\n\n#selfTest_SOURCES = selfTest.C\n\n#selfTest_LDADD = \\\n#         $(SAF_BUILD_ROOT)/src/varLatticeVector/libSafvarLatticeVector.la \\\n#         $(SAF_BUILD_ROOT)/src/cfgUtils/libSafcfgUtils.la \\\n#         $(SAF_BUILD_ROOT)/src/variables/libSafvariables.la \\\n#         $(SAF_BUILD_ROOT)/src/rwAccessLabeler/libSafrwAccessLabeler.la\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)\n\n#\n\n#check-local:selfTest\n\n#\t./selfTest test_example.c\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/symbolicAnalysisFramework/tests/Makefile.am" : {
      "ObjectId" : "092a1c8348ef19a9c71f93ab0d5933ae46602c6e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ----------test program -------------------\n\n#SAF_BUILD_ROOT = $(top_builddir)/projects/symbolicAnalysisFramework\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#pathSensitive sequenceStructAnalysisSelfTest \n",
        "Line" : 6,
        "CharPositionInLine" : 160
      },
      "2" : {
        "Text" : "# DQ (9/28/2011): These test have been moved to the tests/nonsmoke/functional/roseTests/programAnalysisTests/generalDataFlowAnalysisTests directory.\n\n# constantPropagationTest taintedFlowAnalysisTest\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# runtimeBoundAnalysis.C  scalarFWDataflow_example.C\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#sequenceStructAnalysisSelfTest_SOURCES = sequenceStructAnalysisSelfTest.C\n\n#pathSensitive_SOURCES = pathSensitive.C pathSensitive.h\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (9/28/2011): These test have been moved to the tests/nonsmoke/functional/roseTests/programAnalysisTests/generalDataFlowAnalysisTests directory.\n\n#constantPropagationTest_SOURCES = constantPropagationTest.C\n\n#taintedFlowAnalysisTest_SOURCES = taintedFlowAnalysisTest.C\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Liao 10/7/2010\n\n# the order of some la files matter:\n\n# e.g. lattice and analysis.la should be listed first\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#         $(SAF_BUILD_ROOT)/src/analysis/libSafanalysis.la \\\n#         $(SAF_BUILD_ROOT)/src/simpleAnalyses/libSafsimpleAnalyses.la \\\n#         $(SAF_BUILD_ROOT)/src/lattice/libSaflattice.la \\\n#         $(SAF_BUILD_ROOT)/src/common/libSafcommon.la \\\n#         $(SAF_BUILD_ROOT)/src/cfgUtils/libSafcfgUtils.la \\\n#         $(SAF_BUILD_ROOT)/src/variables/libSafvariables.la \\\n#         $(SAF_BUILD_ROOT)/src/state/libSafstate.la \\\n#         $(SAF_BUILD_ROOT)/src/rwAccessLabeler/libSafrwAccessLabeler.la \\\n#         $(SAF_BUILD_ROOT)/src/arrIndexLabeler/libSafarrIndexLabeler.la \\\n#         $(SAF_BUILD_ROOT)/src/external/libSafexternal.la\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#pathSensitive\n\n#\t./factPlacer    $(srcdir)/test_examples/factPlacer_example.cpp > factPlacer_out\n\n# This test passes all but make distcheck for gcc 4.1.2\t\n\n#\t./latticePlacer $(srcdir)/test_examples/latticePlacer_example.c > latticePlacer_out\n\n# scalarFWDataflow_example.c is not compilable , Liao\n\n#\t./scalarFWDataflow $(srcdir)/test_examples/scalarFWDataflow_example.c > scalarFWDataflow_out\n\n# assertion failure\t\n\n#\t./pathSensitive $(srcdir)/test_examples/pathSensitive_example.cpp > pathSensitive_out\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t./sequenceStructAnalysisSelfTest $(srcdir)/test_examples/SendRecvMD.cpp > sequenceStructAnalysis_out\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "projects/taintcheck/CMakeLists.txt" : {
      "ObjectId" : "29dcd19a3170c4fe1521c0f5634225b25c6ca1f0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/taintcheck/Makefile.am" : {
      "ObjectId" : "f0d03c12fb1e95803acccf5dc12f78ffe3b83eec",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-ldl $(LIBLTDL)\n",
        "Line" : 8,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 1
    },
    "projects/traceAnalysis/Makefile.am" : {
      "ObjectId" : "a8520ae6ff73eda46d1acd9c51f1f3e67a9be38a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# The main executable for this project\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# Tests\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# The usual automake boilerplate\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/typeforge/Makefile.am" : {
      "ObjectId" : "07bfbe633f1761ecc62e2d6407c474b95a3d9aef",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# excluding old versions of boost\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/typeforge/src/Makefile.am" : {
      "ObjectId" : "23e9383611c37e544a5cefbe4f77f720c39f9aab",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# yacc flags for specification parser (not used yet)\n",
        "Line" : 10,
        "CharPositionInLine" : 27
      },
      "1" : {
        "Text" : "#\t./typeforge -DSKIP_ROSE_BUILTIN_DECLARATIONS --dot-type-graph $(srcdir)/tests/casttest1.C \n\n#\tdot -Tpdf typegraph.dot -o type-graph.pdf\n\n#\t./typeforge --explicit $(srcdir)/tests/casttest1.C\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "projects/vectorization/CMakeLists.txt" : {
      "ObjectId" : "1a20e7825e4488605c4db771194e558710a1825e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/vectorization/Makefile.am" : {
      "ObjectId" : "1c26cee05458d4a9a6a19c0657efda6018f354c9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "projects/vectorization/src/Makefile.am" : {
      "ObjectId" : "2f4c4082bef04da052902af1d7f39b9ff2ce7520",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  vectorization\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -msse and -msse2 are enabled for x86-64 compiler by default.\n\n# they have to be enabled on i386 - i686 compilers.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "projects/vectorization/tests/CMakeLists.txt" : {
      "ObjectId" : "11725e5ba82f7f4289c835ac2797cdb1965e1581",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TESTCODES_REQUIRED_TO_PASS = \\\n\n#\tsimpleArithmetic.c \\\n\n#\tsimpleIntegerArithmetic.c \\\n\n#\tmultiDimensionArray.c \\\n\n#\tFMA.c\n\n#\n\n#COMPARE_CODES = \\\n\n#\trose_simpleArithmetic.c \\\n\n#\trose_simpleIntegerArithmetic.c \\\n\n#\trose_multiDimensionArray.c \\\n\n#\trose_FMA.c\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/vectorization/tests/Makefile.am" : {
      "ObjectId" : "fa31ec7d28e53d071ca3ea09b89f4d90b742f6ae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\t@$(MAKE) $(COMPARE_OUTPUTS)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/xgenTranslator/Makefile.am" : {
      "ObjectId" : "1f051040ca648e9e2a6191b912454396005e69b3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# where to find rose and boost libraries \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Test input testcode with manual instrumentation already\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "python/Makefile.am" : {
      "ObjectId" : "c42ec41e31847526c248c3da58ec5ff2d0a0fd0c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "python/Rose/BinaryAnalysis/Makefile.am" : {
      "ObjectId" : "b809c5b94273385841c50addd42ac83e9f76ff8f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "python/Rose/BinaryAnalysis/Partitioner2/Makefile.am" : {
      "ObjectId" : "c48d1050a26b0f3fbee6d184f9bada22f8e6cf26",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "python/Rose/BinaryAnalysis/Unparser/Makefile.am" : {
      "ObjectId" : "e3fb94ebd0972f7aabae500ef3b6057a6838cee5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "python/Rose/Makefile.am" : {
      "ObjectId" : "77e402226970e3214beefa0a0370909f844e304b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "rose_config.h.in.cmake" : {
      "ObjectId" : "cb4f321649354e12ac90f317cb813d24999c1164",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmakedefine ROSE_SCM_VERSION_ID \"@ROSE_SCM_VERSION_ID@\"\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cmakedefine ROSE_SCM_VERSION_UNIX_DATE @ROSE_SCM_VERSION_UNIX_DATE@\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#cmakedefine ROSE_PACKAGE_VERSION \"@ROSE_PACKAGE_VERSION@\"\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#cmakedefine HAVE_ARGZ_APPEND 1\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#cmakedefine HAVE_ARGZ_CREATE_SEP 1\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#cmakedefine HAVE_ARGZ_INSERT 1\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#cmakedefine HAVE_ARGZ_NEXT 1\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#cmakedefine HAVE_ARGZ_STRINGIFY 1\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#cmakedefine HAVE_ARGZ_H 1\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#cmakedefine HAVE_BOOST\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#cmakedefine HAVE_BOOST_DATE_TIME\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#cmakedefine HAVE_BOOST_FILESYSTEM \n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#cmakedefine HAVE_BOOST_PROGRAM_OPTIONS\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#cmakedefine HAVE_BOOST_REGEX\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#cmakedefine HAVE_BOOST_SYSTEM\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#cmakedefine HAVE_BOOST_THREAD\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#cmakedefine HAVE_BOOST_WAVE\n\n#cmakedefine USE_ROSE_BOOST_WAVE_SUPPORT\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#cmakedefine HAVE_BOOST_SERIALIZATION_LIB 1\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#cmakedefine ROSE_HAVE_Z3\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#cmakedefine ROSE_Z3 \"@ROSE_Z3@\"\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#cmakedefine ROSE_HAVE_Z3_VERSION_H\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#cmakedefine ROSE_HAVE_LIBGCRYPT\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#cmakedefine ROSE_HAVE_LIBYAML\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#cmakedefine ROSE_HAVE_DLIB\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#cmakedefine HAVE_BYTESWAP_H 1\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#cmakedefine HAVE_CLOSEDIR 1\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#cmakedefine HAVE_CTYPE_H 1\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#cmakedefine HAVE_C_ASM_H 1\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#cmakedefine HAVE_DIRENT_H 1\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#cmakedefine HAVE_DLADDR \n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#undef HAVE_DLD */\n",
        "Line" : 105,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "#undef HAVE_DLD_H */\n",
        "Line" : 109,
        "CharPositionInLine" : 3
      },
      "32" : {
        "Text" : "#cmakedefine HAVE_DLERROR 1\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#cmakedefine HAVE_DLFCN_H 1\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#cmakedefine HAVE_DL_H 1\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#cmakedefine HAVE_DOPRNT 1\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#cmakedefine HAVE_DYLD \n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#cmakedefine HAVE_ERRNO_H 1\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#define HAVE_ERROR_T 1\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#define HAVE_EXPLICIT_TEMPLATE_INSTANTIATION \n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#cmakedefine HAVE_FFI_H 1 \n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#cmakedefine HAVE_GETCWD 1\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#cmakedefine HAVE_GETHRTIME 1\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#cmakedefine HAVE_GETPAGESIZE 1\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#cmakedefine HAVE_GETWD 1\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#cmakedefine HAVE_HRTIME_T 1\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#cmakedefine HAVE_INDEX 1\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#cmakedefine HAVE_INTRINSICS_H \n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#cmakedefine HAVE_INTTYPES_H 1\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#cmakedefine HAVE_IO_H 1\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#cmakedefine HAVE_LIMITS_H 1\n\n#cmakedefine HAVE_LOCALE_H 1\n\n#cmakedefine HAVE_PROCESS_H 1\n\n#cmakedefine HAVE_STDLIB_H 1\n\n#cmakedefine HAVE_SYS_STAT_H 1\n\n#cmakedefine HAVE_SYS_TIME_H 1\n\n#cmakedefine HAVE_SYS_TYPES_H 1\n\n#cmakedefine HAVE_SYS_UTIME_H 1\n\n#cmakedefine HAVE_SYS_SOCKET_H 1\n\n#cmakedefine HAVE_UNISTD_H 1\n\n#cmakedefine HAVE_INTTYPES_H 1\n\n#cmakedefine HAVE_UTIME_H 1\n\n#cmakedefine HAVE_STRING_H 1\n\n#cmakedefine HAVE_STRINGS_H 1\n\n#cmakedefine HAVE_ISTREAM 1\n\n#cmakedefine HAVE_OSTREAM 1\n\n#cmakedefine HAVE_IOS 1\n\n#cmakedefine HAVE_LOCALE 1\n\n#cmakedefine HAVE_OPEN 1\n\n#cmakedefine HAVE_CHMOD 1\n\n#cmakedefine HAVE_CLOSE 1\n\n#cmakedefine HAVE_DCGETTEXT 1\n\n#cmakedefine HAVE_POPEN 1\n\n#cmakedefine HAVE_PCLOSE 1\n\n#cmakedefine HAVE__OPEN 1\n\n#cmakedefine HAVE__CLOSE 1\n\n#cmakedefine HAVE__POPEN 1\n\n#cmakedefine HAVE__PCLOSE 1\n\n#cmakedefine HAVE_GETPID 1\n\n#cmakedefine HAVE__GETPID 1\n\n#cmakedefine HAVE_GETTEXT 1\n\n#cmakedefine HAVE_MKDIR 1\n\n#cmakedefine HAVE__MKDIR 1\n\n#cmakedefine HAVE_PUTENV 1\n\n#cmakedefine HAVE_MKTEMP 1\n\n#cmakedefine HAVE_MKSTEMP 1\n\n#cmakedefine HAVE_STRERROR 1\n\n#cmakedefine HAVE_STD_COUNT 1\n\n#cmakedefine HAVE_ASPRINTF 1\n\n#cmakedefine HAVE_WPRINTF 1\n\n#cmakedefine HAVE_SNPRINTF 1\n\n#cmakedefine HAVE_POSIX_PRINTF 1\n\n#cmakedefine HAVE_FCNTL 1\n\n#cmakedefine HAVE_INTMAX_T 1\n\n#cmakedefine HAVE_INTTYPES_H_WITH_UINTMAX 1\n\n#cmakedefine HAVE_DECL_ISTREAMBUF_ITERATOR 1\n\n#cmakedefine CXX_GLOBAL_CSTD 1\n\n#cmakedefine HAVE_GETCWD 1\n\n#cmakedefine HAVE_STPCPY 1\n\n#cmakedefine HAVE_STRCASECMP 1\n\n#cmakedefine HAVE_STRDUP 1\n\n#cmakedefine HAVE_STRTOUL 1\n\n#cmakedefine HAVE___FSETLOCKING 1\n\n#cmakedefine HAVE_MEMPCPY 1\n\n#cmakedefine HAVE___ARGZ_COUNT 1\n\n#cmakedefine HAVE___ARGZ_NEXT 1\n\n#cmakedefine HAVE___ARGZ_STRINGIFY 1\n\n#cmakedefine HAVE_SETLOCALE 1\n\n#cmakedefine HAVE_TSEARCH 1\n\n#cmakedefine HAVE_GETEGID 1\n\n#cmakedefine HAVE_GETGID 1\n\n#cmakedefine HAVE_GETUID 1\n\n#cmakedefine HAVE_WCSLEN 1\n\n#cmakedefine HAVE_MKFIFO 1\n\n#cmakedefine HAVE_WPRINTF 1\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#cmakedefine HAVE_LONG_DOUBLE 1\n\n#cmakedefine HAVE_LONG_LONG 1\n\n#cmakedefine HAVE_WCHAR_T 1\n\n#cmakedefine HAVE_WINT_T 1\n\n#cmakedefine HAVE_STDINT_H_WITH_UINTMAX 1\n\n#cmakedefine HAVE_LC_MESSAGES 1    \n\n#cmakedefine HAVE_SSTREAM 1\n\n#cmakedefine HAVE_ARGZ_H 1\n\n#cmakedefine SIZEOF_WCHAR_T_IS_2 1\n\n#cmakedefine SIZEOF_WCHAR_T_IS_4 1\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#define BACKEND_CXX_IS_GNU_COMPILER \"${BACKEND_CXX_IS_GNU_COMPILER}\"\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#define BACKEND_CXX_COMPILER_NAME_WITH_PATH \"${CMAKE_CXX_COMPILER}\"\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#define BACKEND_CXX_COMPILER_NAME_WITHOUT_PATH \"${BACKEND_CXX_COMPILER_NAME_WITHOUT_PATH}\"\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#define BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER ${BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER}\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#define BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER ${BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER}\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#define BACKEND_C_COMPILER_NAME_WITH_PATH \"${CMAKE_C_COMPILER}\"\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#define BACKEND_C_COMPILER_NAME_WITHOUT_PATH \"${BACKEND_C_COMPILER_NAME_WITHOUT_PATH}\"\n\n#define BACKEND_C_COMPILER_MAJOR_VERSION_NUMBER ${BACKEND_C_COMPILER_MAJOR_VERSION_NUMBER}\n\n#define BACKEND_C_COMPILER_MINOR_VERSION_NUMBER ${BACKEND_C_COMPILER_MINOR_VERSION_NUMBER}\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#define BACKEND_FORTRAN_COMPILER_NAME_WITH_PATH \"${CMAKE_Fortran_COMPILER}\"\n\n#define BACKEND_FORTRAN_COMPILER_NAME_WITHOUT_PATH \"${BACKEND_FORTRAN_COMPILER_NAME_WITHOUT_PATH}\"\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#define BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER ${BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER}\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#define BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER ${BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER}\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#define BACKEND_JAVA_COMPILER_NAME_WITH_PATH \"${BACKEND_JAVA_COMPILER}\"\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#define BACKEND_PYTHON_INTERPRETER_NAME_WITH_PATH \"${BACKEND_PYTHON_INTERPRETER_NAME_WITH_PATH}\"\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#define BACKEND_X10_COMPILER_NAME_WITH_PATH \"${BACKEND_X10_COMPILER_NAME_WITH_PATH}\"\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#define CHECKING 1\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#undef AC_APPLE_UNIVERSAL_BUILD\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "#undef CHECKING\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#cmakedefine CXX_INCLUDE_STRING @CXX_INCLUDE_STRING@\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#define CXX_SPEC_DEF {\"-D__GNUG__=${BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER}\", \"-D__GNUC__=${BACKEND_C_COMPILER_MAJOR_VERSION_NUMBER}\", \"-D__GNUC_MINOR__=${BACKEND_C_COMPILER_MINOR_VERSION_NUMBER}\", \"-D__GNUC_PATCHLEVEL__=${BACKEND_C_COMPILER_PATCH_LEVEL_NUMBER}\", \"--preinclude\", \"rose_edg_required_macros_and_functions.h\"}\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#cmakedefine C_INCLUDE_STRING @C_INCLUDE_STRING@\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#undef HASH_ROSE_USE_BINARYSQL\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#cmakedefine HAVE_CLOCK_GETTIME 1\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#cmakedefine HAVE_LIBDL 1\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#undef HAVE_LIBDLLOADER\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "#cmakedefine HAVE_MACHINE_ENDIAN_H 1\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#cmakedefine HAVE_MACH_ABSOLUTE_TIME 1\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#cmakedefine HAVE_MACH_MACH_TIME_H 1\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#cmakedefine HAVE_MACH_O_DYLD_H 1\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "#cmakedefine HAVE_MEMORY_H 1 \n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "#cmakedefine HAVE_MKTIME 1\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#cmakedefine HAVE_MMAP 1\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#cmakedefine MYSQL_FOUND\n\n#ifdef MYSQL_FOUND\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "#define HAVE_MYSQL\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "#endif\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#cmakedefine HAVE_NDIR_H 1\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#cmakedefine HAVE_OPENDIR 1\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "#cmakedefine HAVE_PRELOADED_SYMBOLS\n",
        "Line" : 366,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "#cmakedefine HAVE_READDIR 1\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "#cmakedefine HAVE_READ_REAL_TIME 1\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#cmakedefine HAVE_SHL_LOAD 1\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "#cmakedefine HAVE_SQLITE3\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#cmakedefine HAVE_STDINT_H 1\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#cmakedefine HAVE_STDLIB_H 1\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "#cmakedefine HAVE_STRCOLL 1\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "#cmakedefine HAVE_STRCSPN 1\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "#cmakedefine HAVE_STRERROR 1\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "#cmakedefine HAVE_STRFTIME 1\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "#cmakedefine HAVE_STRINGS_H 1\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "#cmakedefine HAVE_STRING_H 1 \n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "#cmakedefine HAVE_STRLCAT 1 \n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "#cmakedefine HAVE_STRLCPY 1 \n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "#cmakedefine HAVE_STRSPN 1\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "#cmakedefine HAVE_STRSTR 1\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "#cmakedefine HAVE_STRTOD\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "#cmakedefine HAVE_STRTOL 1\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "#cmakedefine HAVE_STRTOUL 1\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "#cmakedefine HAVE_SYS_DIR_H 1\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "#cmakedefine HAVE_SYS_DL_H 1\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "#cmakedefine HAVE_SYS_NDIR_H\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "#cmakedefine HAVE_SYS_STAT_H 1\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "#cmakedefine HAVE_SYS_TIME_H 1\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "#cmakedefine HAVE_SYS_TYPES_H 1\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "#cmakedefine HAVE_TIME_BASE_TO_TIME 1\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "#cmakedefine HAVE_UNISTD_H 1\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "#cmakedefine HAVE_PTHREAD_H 1\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "#cmakedefine HAVE_VPRINTF 1\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "#undef HAVE_WORKING_ARGZ\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "#undef HAVE__RTC\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "#define IDA_PRO_PATH \"${with_ida}\"\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "#define JAVA_JVM_PATH \"${JAVA_RUNTIME}\"\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "#undef LTDL_DLOPEN_DEPLIBS\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "#undef LT_DLSEARCH_PATH\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "#undef LT_LIBEXT\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "#undef LT_MODULE_EXT\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "#undef LT_MODULE_PATH_VAR\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "#undef LT_OBJDIR\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "#undef NEED_USCORE\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "#undef PACKAGE\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "#undef PACKAGE_BUGREPORT\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "#undef PACKAGE_NAME\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "#undef PACKAGE_STRING\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "#undef PACKAGE_TARNAME\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "#undef PACKAGE_VERSION\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "#undef RETSIGTYPE\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "#define ROSE_BOOST_PATH \"${BOOST_ROOT}\"\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "#define ROSE_COMPILE_TREE_PATH ${ROSE_TOP_BINARY_DIR}\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "#define ROSE_SHLIBPATH_VAR \"${ROSE_SHLIBPATH_VAR}\"\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "#cmakedefine ROSE_USE_EDG_VERSION_4\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "#cmakedefine ROSE_USE_EDG_VERSION_4_4\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "#cmakedefine ROSE_USE_EDG_VERSION_4_7\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "#cmakedefine ROSE_USE_NEW_EDG_INTERFACE\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "#undef ROSE_USE_VALGRIND\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "#undef ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY\n",
        "Line" : 557,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "#define ROSE_WAVE_DEFAULT false\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "#undef ROSE_WAVE_PATH\n",
        "Line" : 565,
        "CharPositionInLine" : 2
      },
      "146" : {
        "Text" : "#define SAGE_TRANSFORM 1\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "#define SIZEOF_CHAR ${SIZEOF_CHAR}\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "#define SIZEOF_DOUBLE ${SIZEOF_DOUBLE}\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "#define SIZEOF_FLOAT ${SIZEOF_FLOAT}\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "#define SIZEOF_INT ${SIZEOF_INT}\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "151" : {
        "Text" : "#define SIZEOF_LONG ${SIZEOF_LONG}\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "152" : {
        "Text" : "#define SIZEOF_LONG_DOUBLE ${SIZEOF_LONG_DOUBLE}\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "#define SIZEOF_LONG_LONG ${SIZEOF_LONG_LONG}\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "#define SIZEOF_SHORT ${SIZEOF_SHORT}\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "#define SIZEOF_VOID_P ${SIZEOF_VOID_P}\n",
        "Line" : 597,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "#cmakedefine STDC_HEADERS 1\n",
        "Line" : 600,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "#cmakedefine TIME_WITH_SYS_TIME 1\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "#cmakedefine TM_IN_SYS_TIME 1\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "#cmakedefine USE_GFORTRAN_IN_ROSE 1\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "#undef USE_INSURE\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "#cmakedefine USE_PURIFY\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "#cmakedefine USE_PURIFY_API\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "#cmakedefine USE_PURIFY_LINKER\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "#undef USE_ROSE_BDDBDDB_SUPPORT\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "#undef USE_ROSE_DWARF_SUPPORT\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "166" : {
        "Text" : "#cmakedefine USE_ROSE_EDG_DEBUGGING_SUPPORT\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "#undef USE_ROSE_GCC_OMP\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "#undef USE_ROSE_IDA_SUPPORT\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "#undef USE_ROSE_INTEL_PIN_SUPPORT\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "#cmakedefine JAVA_RUNTIME\n\n#ifdef JAVA_RUNTIME\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "171" : {
        "Text" : "#define USE_ROSE_JAVA_SUPPORT\n",
        "Line" : 652,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "#endif\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "173" : {
        "Text" : "#undef USE_ROSE_MAPLE_SUPPORT\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "174" : {
        "Text" : "#undef USE_ROSE_OMNI_OPENMP_SUPPORT\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "#undef USE_ROSE_OPEN_FORTRAN_PARSER_SUPPORT\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "#undef USE_ROSE_PHP_SUPPORT\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "#undef USE_ROSE_RTED_SUPPORT\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "178" : {
        "Text" : "#undef USE_ROSE_SSL_SUPPORT\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "#undef USE_ROSE_WINDOWS_ANALYSIS_SUPPORT\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "180" : {
        "Text" : "#undef USE_ROSE_YICES_SUPPORT\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "181" : {
        "Text" : "#undef USING_PURIFY\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "#define VERSION \"0.9.10\"\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "#if defined AC_APPLE_UNIVERSAL_BUILD\n\n# if defined __BIG_ENDIAN__\n\n#  define WORDS_BIGENDIAN 1\n\n# endif\n\n#else\n\n# ifndef WORDS_BIGENDIAN\n\n#  undef WORDS_BIGENDIAN\n\n# endif\n\n#endif\n",
        "Line" : 703,
        "CharPositionInLine" : 0
      },
      "184" : {
        "Text" : "#undef X_DISPLAY_MISSING\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "185" : {
        "Text" : "#undef YYTEXT_POINTER\n",
        "Line" : 718,
        "CharPositionInLine" : 0
      },
      "186" : {
        "Text" : "#ifndef __CHAR_UNSIGNED__\n\n# undef __CHAR_UNSIGNED__\n\n#endif\n",
        "Line" : 721,
        "CharPositionInLine" : 0
      },
      "187" : {
        "Text" : "#undef __error_t_defined\n",
        "Line" : 726,
        "CharPositionInLine" : 0
      },
      "188" : {
        "Text" : "#undef const\n",
        "Line" : 729,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "#undef error_t\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "190" : {
        "Text" : "#ifndef __cplusplus\n\n#undef inline\n\n#endif\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "191" : {
        "Text" : "#undef off_t\n",
        "Line" : 741,
        "CharPositionInLine" : 0
      },
      "192" : {
        "Text" : "#undef size_t\n",
        "Line" : 744,
        "CharPositionInLine" : 0
      },
      "193" : {
        "Text" : "#define ROSE_OFP_MAJOR_VERSION_NUMBER 0\n\n#define ROSE_OFP_MINOR_VERSION_NUMBER 8\n\n#define ROSE_OFP_PATCH_VERSION_NUMBER 3\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "194" : {
        "Text" : "#define ROSE_EDG_MAJOR_VERSION_NUMBER @EDG_MAJOR_VERSION@\n",
        "Line" : 754,
        "CharPositionInLine" : 0
      },
      "195" : {
        "Text" : "#define ROSE_EDG_MINOR_VERSION_NUMBER @EDG_MINOR_VERSION@\n",
        "Line" : 757,
        "CharPositionInLine" : 0
      },
      "196" : {
        "Text" : "#cmakedefine USE_CMAKE\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "#cmakedefine BINARY_EDG\n",
        "Line" : 763,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "#cmakedefine TEMPLATE_DECLARATIONS_DERIVED_FROM_NON_TEMPLATE_DECLARATIONS\n",
        "Line" : 767,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "#cmakedefine ROSE_BUILD_BINARY_ANALYSIS_SUPPORT\n",
        "Line" : 770,
        "CharPositionInLine" : 0
      },
      "200" : {
        "Text" : "#cmakedefine ROSE_BUILD_CUDA_LANGUAGE_SUPPORT\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "201" : {
        "Text" : "#cmakedefine ROSE_BUILD_CXX_LANGUAGE_SUPPORT\n",
        "Line" : 776,
        "CharPositionInLine" : 0
      },
      "202" : {
        "Text" : "#cmakedefine ROSE_BUILD_C_LANGUAGE_SUPPORT\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "203" : {
        "Text" : "#cmakedefine ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT\n",
        "Line" : 782,
        "CharPositionInLine" : 0
      },
      "204" : {
        "Text" : "#cmakedefine ROSE_BUILD_JAVA_LANGUAGE_SUPPORT\n\n#cmakedefine USE_ROSE_INTERNAL_JAVA_SUPPORT\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "205" : {
        "Text" : "#cmakedefine ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "206" : {
        "Text" : "#cmakedefine ROSE_BUILD_PHP_LANGUAGE_SUPPORT\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "207" : {
        "Text" : "#cmakedefine ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "208" : {
        "Text" : "#cmakedefine ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "209" : {
        "Text" : "#cmakedefine ROSE_SUPPORT_GNU_EXTENSIONS\n\n#cmakedefine ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT\n\n#cmakedefine ROSE_SUPPORT_MICROSOFT_EXTENSIONS\n",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "210" : {
        "Text" : "#cmakedefine CMAKE_COMPILER_IS_GNUCC\n\n#cmakedefine CMAKE_COMPILER_IS_GNUCXX\n\n#cmakedefine CMAKE_COMPILER_IS_GNUG77\n",
        "Line" : 805,
        "CharPositionInLine" : 0
      },
      "211" : {
        "Text" : "#define ROSE_CONFIG_TOKEN \"${ROSE_CONFIG_TOKEN}\"\n",
        "Line" : 810,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 212
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "9658b7873ea7936c67baca2098d9a121f97c9033",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List in \"distributedScripts\" only those scripts that are useful after ROSE is installed\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(distributedScripts)\n\n#install(FILES ${distributedScripts} DESTINATION bin)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "scripts/Makefile.am" : {
      "ObjectId" : "c3b672bb97d5edbcb3970d8de9f1b2345102ad13",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# copy the tools (scripts only) from the source tree to the source destination in the distribution\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# scripts put into the distribution\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# install the tools in 'bin' (a subsect of EXTRA_DIST)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (12/7/2009): Test for the ROSE example workspace generator.\n\n# Build the directory in the compile tree.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This tests the new ROSE workspace\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This may be the cause of recursion in the make \"check rule\"\n\n#\tmake check\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (12/7/2009): Run a test of the ROSE example workspace generator.\n\n# This requires an installed version of ROSE so it should be an \n\n# installcheck rule.\n\n# check-local:\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "scripts/buildExampleRoseWorkspaceDirectory/Makefile.am" : {
      "ObjectId" : "fa8503cbdf3330e83e99ac04e3be8d1e1bbe7b02",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This is a generated Autoconf/Automake based workspace for using ROSE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List subdirectories of the ROSE workspace here (if any).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Specify the libraries required to link a ROSE application \n\n# using rpath so that we don't have to set LD_LIBRARY_PATH.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make rule to automate testing using Automake's \"check\" rule\n\n# Use the \"--help\" option to avoid an error.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rdPartyLibraries/CMakeLists.txt" : {
      "ObjectId" : "babe6de2bd5b119297d6a76010a3fe70510d774e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/MSTL/CMakeLists.txt" : {
      "ObjectId" : "380e8858a3fcb3bbf0605ee5db6d7bc155b69a06",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/MSTL/Makefile.am" : {
      "ObjectId" : "7cc2104d115bebdc772fd418cf9bf30d3ed6e36e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# lib_LIBRARIES = libmstl.a\n\n# libmstl_a_SOURCES  = $(libmstlSources)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some source files are included so that templates can be included\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/3rdPartyLibraries/Makefile.am" : {
      "ObjectId" : "04b3ebc2eaa753eec10c6f1e4c23d9f308140f60",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This should not depend on ROSE in any way so I don't think we need this\n\n# include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SUBDIRS = MSTL libharu-2.1.0 fortran-parser java-parser antlr-jars qrose\n\n# checkPointLibrary\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/14/2017): Remove POET uniformally until it can be added to provide greater portability (working on Ubuntu systems).\n\n# # DQ (12/18/2016): Disable use of POET on DEBIAN and UBUNTU systems because \n\n# # its built system is not sufficently general to avoid linking issues.\n\n# # SUBDIRS += POET\n\n# if !OS_VENDOR_UBUNTU\n\n# if !OS_VENDOR_DEBIAN\n\n#    SUBDIRS += POET\n\n# endif\n\n# endif\n\n# Pei-Hung (06/28/2017): add POET support\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Pei-Hung (12/17/2014): installing POCC\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rdPartyLibraries/POET/CMakeLists.txt" : {
      "ObjectId" : "a374d67207afa7418d573a95eaaddcd5326b428b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/POET/Makefile.am" : {
      "ObjectId" : "0f04835f7ba788f0cb2549ec2da955ae94e8ad95",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#Faizur:(07/21/2011): For CMAKE the POET_VERSION is defined in src/CMakeLists.txt\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/POET/lib/Makefile.am" : {
      "ObjectId" : "03d7eadb0033f970552bfbc5d3fd3b184931ddc1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/antlr-jars/CMakeLists.txt" : {
      "ObjectId" : "d160d8b01a5a94db07f39554fbb2d50f2e4e69ae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/antlr-jars/Makefile.am" : {
      "ObjectId" : "1ec1956026167e854088db54baffbbd236f9d441",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ  (3/11/2010): Updating to new Fortran OFP version 0.7.2 with Craig.\n\n# CER (6/09/2011): antlr-3.3-complete.jar is used with OFP version 0.8.3\n\n# CER (2/12/2019): antlr-3.5.2-complete.jar is used with OFP version 0.8.5\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/checkPointLibrary/CMakeLists.txt" : {
      "ObjectId" : "4e4e8220f4633450d7665dba1a4fc4794b7347fd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########### install files ###############\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## This should not depend on ROSE in any way so I don't think we need this\n\n#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#lib_LIBRARIES = libckpt.so librestart.so\n\n#\n\n#noinst_PROGRAMS = btoc restart\n\n#\n\n### Specifications for building the different parts of the check point library.\n\n#LIB_CKPT_SRCS =\\\n\n#\tckpt.c\\\n\n#\tinit.c\\\n\n#\tmem.c\\\n\n#\tsignals.c\\\n\n#\tckptclt.c\\\n\n#\tsockaddr.c\\\n\n#\tutil.c\\\n\n#\tconfig.c\\\n\n#\tfd.c\\\n\n#\telfckpt.c \\\n\n#   wraprestart.c\n\n#\n\n#LIB_RESTART_SRCS = safe.c\n\n#\n\n#RESTART_SRCS =\\\n\n#\trestartmain.c\\\n\n#\trestart.c\\\n\n#\tmem.c\\\n\n#\tutil.c\\\n\n#\tckptclt.c\\\n\n#\tsockaddr.c\\\n\n#\twrapsafe.c\\\n\n#\telfrestart.c\n\n#\n\n#CKPT_SRCS =\\\n\n#\tckptmain.c\\\n\n#\twrapckpt.c\\\n\n#\thijack.c\\\n\n#\trefun.c\\\n\n#\tutil.c\n\n#\n\n#CKPTSRV_SRCS =\\\n\n#\tckptsrv.c\\\n\n#\tutil.c\\\n\n#\tsockaddr.c\n\n#BTOC_SRCS = btoc.c\n\n#TEST_SRCS = foo.c\n\n#\n\n#wrapsafe.c: btoc librestart.so\n\n#\t./btoc librestart < librestart.so > wrapsafe.c\n\n#\n\n#wraprestart.c: btoc restart\n\n#\t./btoc restartbin < restart > wraprestart.c\n\n#\n\n#wrapckpt.c: btoc libckpt.so\n\n#\t./btoc libckpt < libckpt.so > wrapckpt.c\n\n#\n\n#libckpt_so_SOURCES = $(LIB_CKPT_SRCS)\n\n## libckpt_so_DEPENDENCIES = $(LIB_CKPT_SRCS)\n\n#\n\n#librestart_so_SOURCES = $(LIB_RESTART_SRCS)\n\n#\n\n#restart_SOURCES = $(RESTART_SRCS)\n\n#btoc_SOURCES    = $(BTOC_SRCS)\n\n#\n\n#restart_LDFLAGS = -Xlinker --script=$(srcdir)/restart.script\n\n#\n\n#\n\n#\n\n#libckpt.a: $(libckpt_a_OBJECTS)\n\n#\t-rm -f $@\n\n#\t$(CXX_STATIC_LIB_UPDATE) $@ $(libckpt_a_OBJECTS)\n\n#\ttest -f $@ || exit 1\n\n#\n\n#libckpt.so: $(libckpt_so_OBJECTS)\n\n#\t-rm -f $@\n\n#\t$(CXX_SHARED_LIB_UPDATE) $@ -nostartfiles $(libckpt_so_OBJECTS)\n\n#\ttest -f $@ || exit 1\n\n#\n\n## librestart.a: $(librestart_a_OBJECTS)\n\n##\t-rm -f $@\n\n##\t$(CXX_STATIC_LIB_UPDATE) $@ $(librestart_a_OBJECTS)\n\n##\ttest -f $@ || exit 1\n\n#\n\n##librestart.so: $(librestart_so_OBJECTS)\n\n##\t-rm -f $@\n\n##\t$(CXX_SHARED_LIB_UPDATE) $@ $(librestart_so_OBJECTS)\n\n##\ttest -f $@ || exit 1\n\n#\n\n#noinst_HEADERS = ckpt.h  ckptimpl.h  cs.h  sys.h\n\n#\n\n## include_HEADERS = \n\n#\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/3rdPartyLibraries/checkPointLibrary/Makefile.am" : {
      "ObjectId" : "d1b02ba113169a0ef1a8f6c083b1b155030c1e3e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This should not depend on ROSE in any way so I don't think we need this\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Specifications for building the different parts of the check point library.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libckpt_so_DEPENDENCIES = $(LIB_CKPT_SRCS)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# librestart.a: $(librestart_a_OBJECTS)\n\n#\t-rm -f $@\n\n#\t$(CXX_STATIC_LIB_UPDATE) $@ $(librestart_a_OBJECTS)\n\n#\ttest -f $@ || exit 1\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#librestart.so: $(librestart_so_OBJECTS)\n\n#\t-rm -f $@\n\n#\t$(CXX_SHARED_LIB_UPDATE) $@ $(librestart_so_OBJECTS)\n\n#\ttest -f $@ || exit 1\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# include_HEADERS = \n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/3rdPartyLibraries/experimental-fortran-parser/sdf_syntax/Makefile.am" : {
      "ObjectId" : "1a71bba666164a03db598493bc064665b6b99d6d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# TEST_DIR = ../../tests/rule-tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# all : Fortran.tbl FortranFixed.tbl\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/3rdPartyLibraries/experimental-fortran-parser/syntax-v0.14/Makefile" : {
      "ObjectId" : "1c4c9c2a1c22d0a65b9a84d0738fe8b46bd889d1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/experimental-fortran-parser/syntax-v0.14/Makefile.am" : {
      "ObjectId" : "1a71bba666164a03db598493bc064665b6b99d6d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# TEST_DIR = ../../tests/rule-tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# all : Fortran.tbl FortranFixed.tbl\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/3rdPartyLibraries/fortran-parser/CMakeLists.txt" : {
      "ObjectId" : "ef027b53c9c3ddbc920eeed663a42beb9a6a7ec3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# this file also needs to be in the binary directory for\n\n# related tests to pass\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "src/3rdPartyLibraries/fortran-parser/Makefile.am" : {
      "ObjectId" : "ba783a172cff1032f37eef094e5e2d5cbfd7b7c1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# CER (10/09/2011): Since we now distribute the OFP jar file with ROSE\n\n# I'm removing references to versions other than the jar file supplied\n\n# by configure.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CER (10/03/2011): Switched to using date-based tag for the OFP version.\n\n# The macro variable ROSE_OFP_VERSION_NUMBER must be changed when a new\n\n# date/version of OFP is added.  I think the wget code should go away as\n\n# the jar file is now distributed with ROSE.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CER (10/10/2011): Disabled OFP version number in favor of version distributed with ROSE\n\n# OFP_VERSION=@ROSE_OFP_MAJOR_VERSION_NUMBER@.@ROSE_OFP_MINOR_VERSION_NUMBER@.@ROSE_OFP_PATCH_VERSION_NUMBER@\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (4/5/2010): Think about if we need the test using an Automake conditional since the jar file always exists.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (4/4/2010): This needs to be an explicit path list for each file since some are all located in different subdirectories.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (4/5/2010): And we need a version of this macro withouth the paths.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (10/17/2010): This is the better way to control this.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Liao 8/4/2010, based on Jean Utke's suggestion on [Rose-public] Fortran built-ins\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (9/26/2010): Add the jar file as a dependency so that when it is \n\n# updated it will force the required files to be extracted automatically.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tDQ (10/13/2010): \"jar\" is not in the path of some system, but our configure tests \n\n#\tfor this and only passes if it is found (and sets the JAR macro, so use it).\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# source directory of the distribution they are not extracted from the OpenFortranParser-${OFP_DIST_VERSION}.jar\n\n# file and thus are not in the build tree for use in compiling sage_support.cpp in the src/frontend/SageIII/sage_support\n\n# directory.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/3rdPartyLibraries/java-parser/CMakeLists.txt" : {
      "ObjectId" : "8119e50f0d6039f98d13e35c3a6ce51a3680d24d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file also needs to be in the binary dir for related\n\n# tests to pass\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# path separator varies by platform\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This is needed when distcheck compiles the code, I don't know why.\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# I assume this is needed the same as for the JavaParserSupport.class rule\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# DQ (4/16/2011): Added support for Java specific tokens (to support source position information in ROSE).\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# DQ (4/16/2011): Added support for Java specific tokens (to support source position information in ROSE).\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# charles4: (2/23/2012):\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "########### install files ###############\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "src/3rdPartyLibraries/java-parser/Makefile.am" : {
      "ObjectId" : "1bc1556b09a6bd47bdff0a74d4074cad9e0c9ff5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Liao 8/4/2010, based on Jean Utke's suggestion on [Rose-public] Fortran built-ins\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put in a target so that this can be called by default to build the Java/ROSE AST translation support.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This rule is called from the ECJ_ROSE_Connection/Makefile.am\n\n# extract_rose_required_ecj_source_files: buildJavaSupport\n\n# extract_rose_required_ecj_source_files: ${srcdir}/JavaTraversal.java\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t@echo \"In extract_rose_required_ecj_source_files: After building JavaTraversal.java, copy ecj-3.8.2.jar from srcdir to builddir\"\n\n#\tcp ${srcdir}/ecjROSE.jar ecj-3.8.2.jar\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# buildJavaSupport: ${srcdir}/JavaTraversal.java\n\n# JavaTraversal.class:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tDQ (11/23/2010): javah only requires the class file which are in the build directory.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tDQ (10/13/2010): I want to avoid copying ecj-3.8.2.jar into the build tree, but it is required for now.\n\n#\tOnly ROSE translators need it, not the javac and javah commands (above).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# I assume this is needed the same as for the JavaParserSupport.class rule\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is needed when distcheck compiles the code, I don't know why.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# I assume this is needed the same as for the JavaParserSupport.class rule\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# These are the commands to generate the files we need (in the build tree).\n\n# JavaTraversal.class JavaTraversal.h: ${srcdir}/JavaTraversal.java\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (4/16/2011): Added support for Java specific tokens (to support source position information in ROSE).\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (4/16/2011): Added support for Java specific tokens (to support source position information in ROSE).\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# charles4: (2/23/2012): \n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# JavaParser* JavaTraversal* JavaParserSupport* ecjASTVisitor* ExtendedASTVisitor*\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/3rdPartyLibraries/libharu-2.1.0/CMakeLists.txt" : {
      "ObjectId" : "6d92929fab83405d3984be0282b63fb194dcd023",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/libharu-2.1.0/Makefile.am" : {
      "ObjectId" : "3ce5be1f0daa54d28ce1fd1be25d14af7ac110e3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/17/2011): Commented out to trace down why we don't have automatically generated dependencies.\n\n# AUTOMAKE_OPTIONS=foreign no-dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/libharu-2.1.0/include/CMakeLists.txt" : {
      "ObjectId" : "f60cbcaea4dbd3554eeb2774dec1536da0aa443a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/libharu-2.1.0/include/Makefile.am" : {
      "ObjectId" : "c16c474ffe750c6b036ad4ac8b07ea43be574432",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/17/2011): Commented out to trace down why we don't have automatically generated dependencies.\n\n# AUTOMAKE_OPTIONS = foreign no-dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#pkginclude_HEADERS =   hpdf.h hpdf_annotation.h hpdf_encoder.h hpdf_ext_gstate.h \\\n#\t\t\t\t\thpdf_mmgr.h hpdf_pages.h hpdf_utils.h hpdf_catalog.h \\\n#\t\t\t\t\thpdf_consts.h hpdf_encryptdict.h hpdf_fontdef.h hpdf_image.h \\\n#\t\t\t\t\thpdf_objects.h hpdf_streams.h hpdf_conf.h hpdf_destination.h \\\n#\t\t\t\t\thpdf_encrypt.h hpdf_font.h hpdf_info.h hpdf_outline.h hpdf_types.h \\\n#\t\t\t\t\thpdf_doc.h hpdf_error.h hpdf_gstate.h hpdf_list.h hpdf_page_label.h \\\n#\t\t\t\t\thpdf_u3d.h hpdf_config.h hpdf_version.h\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/3rdPartyLibraries/libharu-2.1.0/src/CMakeLists.txt" : {
      "ObjectId" : "257e90c67392b29d0f5d2b51479c99ca3f775ed6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#target_link_libraries(libhpdf ${KDE4_KDECORE_LIBS})\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set_target_properties(hpdf PROPERTIES VERSION 1.0.0 SOVERSION 1)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rdPartyLibraries/libharu-2.1.0/src/Makefile.am" : {
      "ObjectId" : "200771e4f3010264ffea99c02dfa97c85a552a0a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/17/2011): Commented out to trace down why we don't have automatically generated dependencies.\n\n# AUTOMAKE_OPTIONS = foreign no-dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# JJW for ROSE: Added this line to enable building outside source tree\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/3rdPartyLibraries/qrose/CMakeLists.txt" : {
      "ObjectId" : "a5243f21d017635c41fa0ab14a5f92a78fa85869",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/qrose/Components/CMakeLists.txt" : {
      "ObjectId" : "12168c159789816a9741cc728bb236671fc96a6f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## the library search path.\n\n#\n\n#SUBDIRS = Common QueryBox SourceBox TreeBox\n\n# \n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/3rdPartyLibraries/qrose/Components/Common/CMakeLists.txt" : {
      "ObjectId" : "e7e6bd8a3d438c847131e81b1d35bbe952fa2ab8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#SUBDIRS=icons\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(QT_INCLUDES) \n\n#\n\n#METASOURCES = auto\n\n#include_HEADERS = QRAstInfo.h QRCoords.h  QRIcons.h QRPixmap.h QRAttribute.h  QRoseComponent.h\n\n#\n\n#noinst_LTLIBRARIES = libqrcommon.la\n\n#\n\n## DQ (2/11/2009): Using nodist_ rule to support specification of files to be built at compile time and not distrivuted in the distribution.\n\n#libqrcommon_la_SOURCES = QRAstInfo.C QRCoords.C  QRIcons.C  QRPixmap.C QRAttribute.C  QRoseComponent.C\n\n# \n\n#CLEANFILES = \n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = QRAstInfo.h QRCoords.h  QRIcons.h QRPixmap.h QRAttribute.h  QRoseComponent.h\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rdPartyLibraries/qrose/Components/Common/Makefile.am" : {
      "ObjectId" : "57bb1cba7f61e6061cc124cd206a22c905212ea4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (2/11/2009): Using nodist_ rule to support specification of files to be built at compile time and not distrivuted in the distribution.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/qrose/Components/Common/icons/CMakeLists.txt" : {
      "ObjectId" : "95150f33ac828299a921302dfed1e3a0fc4c53f6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(QT_INCLUDES) \n\n#\n\n#  \n\n#METASOURCES = auto\n\n#\n\n#CLEANFILES = \n\n#\n\n#iconsdir = $(prefix)/include/icons\n\n#\n\n#icons_DATA= \\\n\n#   cachebroadcast.xpm \\\n\n#   doquery.xpm   \\\n\n#   method_npublic_decl.xpm \\\n\n#   source_c.xpm \\\n\n#   cacheclear.xpm  \\\n\n#   empty.xpm    \\\n\n#   method_npublic_defn.xpm  \\\n\n#   target.xpm \\\n\n#   cachecollect.xpm   \\\n\n#   func_decl.xpm  \\\n\n#   method_public_decl.xpm \\\n\n#   typedf.xpm \\\n\n#   cacheview.xpm    \\\n\n#   func_defn.xpm \\\n\n#   method_public_defn.xpm  \\\n\n#   var.xpm \\\n\n#   class_decl.xpm  \\\n\n#   gotoline.xpm   \\\n\n#   no.xpm         \\\n\n#   yes.xpm       \\\n\n#   clear_results.xpm  \\\n\n#   highlight.xpm  \\\n\n#   project.xpm    \\\n\n#   zoomin.xpm   \\\n\n#   default.xpm    \\\n\n#   lookup.xpm     \\\n\n#   setdomain.xpm  \\\n\n#   zoomout.xpm\n\n#endif\n\n#\n\n#EXTRA_DIST = \\\n\n#   cachebroadcast.xpm \\\n\n#   doquery.xpm   \\\n\n#   method_npublic_decl.xpm \\\n\n#   source_c.xpm \\\n\n#   cacheclear.xpm  \\\n\n#   empty.xpm    \\\n\n#   method_npublic_defn.xpm  \\\n\n#   target.xpm \\\n\n#   cachecollect.xpm   \\\n\n#   func_decl.xpm  \\\n\n#   method_public_decl.xpm \\\n\n#   typedf.xpm \\\n\n#   cacheview.xpm    \\\n\n#   func_defn.xpm \\\n\n#   method_public_defn.xpm  \\\n\n#   var.xpm \\\n\n#   class_decl.xpm  \\\n\n#   gotoline.xpm   \\\n\n#   no.xpm         \\\n\n#   yes.xpm       \\\n\n#   clear_results.xpm  \\\n\n#   highlight.xpm  \\\n\n#   project.xpm    \\\n\n#   zoomin.xpm   \\\n\n#   default.xpm    \\\n\n#   lookup.xpm     \\\n\n#   setdomain.xpm  \\\n\n#   zoomout.xpm\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/3rdPartyLibraries/qrose/Components/Common/icons/Makefile.am" : {
      "ObjectId" : "a88ae705d10efeedd3e7a50079ade088baa84e17",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/qrose/Components/Makefile.am" : {
      "ObjectId" : "6b5b1708a1d5c6b95ae06308706ae3f63bfe8fc1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# the library search path.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/qrose/Components/QueryBox/CMakeLists.txt" : {
      "ObjectId" : "e6273140b17b5bc2fe6aba1a8562171b63a04d19",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(QT_INCLUDES) \n\n#\n\n##LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n\n#METASOURCES = auto\n\n#\n\n#include_HEADERS = QRQueryBox.h QRQueryDomain.h QRQueryOp.h QRQueryRange.h \n\n#\n\n#noinst_LTLIBRARIES = libqrquerybox.la\n\n#\n\n#MOC_SOURCES = moc_QRQueryBox.C \n\n#\n\n#libqrquerybox_la_SOURCES = QRQueryBox.C QRQueryDomain.C QRQueryOp.C QRQueryRange.C  \n\n#nodist_libqrquerybox_la_SOURCES = $(MOC_SOURCES)\n\n#\n\n#CLEANFILES = moc_*.C\n\n#\n\n#if QROSE_USE_WINDOWS\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ `cygpath -w $<` -p$(srcdir)\n\n#else\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ $< -frose.h -f$(notdir $<)\n\n#endif \n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = QRQueryBox.h \\\n\n#             QRQueryDomain.h \\\n\n#             QRQueryOp.h \\\n\n#             QRQueryRange.h \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/3rdPartyLibraries/qrose/Components/QueryBox/Makefile.am" : {
      "ObjectId" : "7681ba1a2758216a9df53c0a3a97b71559999ff8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/qrose/Components/SourceBox/CMakeLists.txt" : {
      "ObjectId" : "44901a608ed673779525ea728e1f0249a4460c53",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(QT_INCLUDES) \n\n#\n\n##LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n\n#METASOURCES = auto\n\n#\n\n#include_HEADERS = QRSourceBox.h \n\n#\n\n#noinst_LTLIBRARIES = libqrsourcebox.la\n\n#\n\n#MOC_SOURCES = moc_markerwidget.C moc_qeditor.C moc_levelwidget.C \\\n\n#              moc_linenumberwidget.C  moc_q3richtext_px.C  moc_QRSourceBox.C \n\n#\n\n#libqrsourcebox_la_SOURCES = cindent.C markerwidget.C  q3richtextx.C  \\\n\n#                            QRUnparser.C cpp_colorizer.C paragdata.C \\\n\n#                            qeditor.C qsourcecolorizer.C levelwidget.C \\\n\n#                            parenmatcher.C  qeditor_indenter.C  simple_indent.C \\\n\n#                            linenumberwidget.C  q3richtext_px.C  QRSourceBox.C  \\\n\n#                            yyindent.C\n\n#  \n\n#nodist_libqrsourcebox_la_SOURCES = $(MOC_SOURCES)\n\n#\n\n#CLEANFILES = moc_*.C\n\n#\n\n#if QROSE_USE_WINDOWS\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ `cygpath -w $<` -p$(srcdir)\n\n#else\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ $<\n\n#endif \n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = cindent.h \\\n\n#             markerwidget.h \\\n\n#             qeditor.h   \\\n\n#             qsourcecolorizer.h \\\n\n#             cpp_colorizer.h  \\\n\n#             paragdata.h \\\n\n#             qeditor_indenter.h \\\n\n#             simple_indent.h \\\n\n#             levelwidget.h  \\\n\n#             parenmatcher.h  \\\n\n#             QRSourceBox.h \\\n\n#             linenumberwidget.h \\\n\n#             q3richtext_px.h \\\n\n#             QRUnparser.h\n\n#             \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/3rdPartyLibraries/qrose/Components/SourceBox/Makefile.am" : {
      "ObjectId" : "62033efb86683792450fe45ba3cbf6945650551d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/qrose/Components/TreeBox/CMakeLists.txt" : {
      "ObjectId" : "4b60d466e5e12b5643d31a7ca9ffff89ee898f92",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(QT_INCLUDES) \n\n#\n\n##LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n\n#METASOURCES = auto\n\n#\n\n#include_HEADERS = QRTreeBox.h\n\n#\n\n#noinst_LTLIBRARIES = libqrtreebox.la\n\n#\n\n#MOC_SOURCES = moc_QRTreeBox.C \n\n#\n\n#libqrtreebox_la_SOURCES = QRListViewItem.C QRTreeBox.C QRTreeVisitor.C\n\n#  \n\n#nodist_libqrtreebox_la_SOURCES = $(MOC_SOURCES)\n\n#\n\n#CLEANFILES = moc_*.C\n\n#\n\n#if QROSE_USE_WINDOWS\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ `cygpath -w $<` -p$(srcdir)\n\n#else\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ $<\n\n#endif \n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = QRListViewItem.h \\\n\n#             QRTreeBox.h \\\n\n#             QRTreeVisitor.h\n\n#              \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rdPartyLibraries/qrose/Components/TreeBox/Makefile.am" : {
      "ObjectId" : "e96847d0588b511197b809043a6530b88996bb93",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/qrose/Framework/CMakeLists.txt" : {
      "ObjectId" : "c09fe63be9071bd684ea3bb4b08c094ede11c86b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(QT_INCLUDES) \n\n#\n\n#  \n\n##LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n\n#METASOURCES = auto\n\n#include_HEADERS = qrose.h QRMacros.h QRMain.h QRException.h QRTiledWidget.h QRWidgetAccess.h QRWindow.h QRPanel.h QRSpaceWidget.h QRGroup.h\n\n#noinst_LTLIBRARIES = libqrframework.la \n\n#\n\n#MOC_SOURCES = moc_QRMain_p.C moc_QRWindow.C moc_QRTiledWidget.C moc_QRSpaceWidget.C moc_QRGroup.C\n\n#\n\n## DQ (2/11/2009): Using nodist_ rule to support specification of files to be built at compile time and not distrivuted in the distribution.\n\n#libqrframework_la_SOURCES = QRMain.C QRMain_p.C QRException.C QRTiledWidget.C QRWidgetAccess.C QRWindow.C QRPanel.C QRSpaceWidget.C QRGroup.C\n\n#nodist_libqrframework_la_SOURCES = $(MOC_SOURCES)\n\n#\n\n#CLEANFILES = moc_*.C\n\n#\n\n#if QROSE_USE_WINDOWS\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ `cygpath -w $<` -p$(srcdir)\n\n#else\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ $<\n\n#endif \n\n#\n\n#else\n\n#\n\n## DQ (2/11/2009): If not configured to use Qt then we can't save the $(MOC_SOURCES) files\n\n## MOC_SOURCES = \n\n## CLEANFILES =\n\n## libqrframework_la_SOURCES = \n\n#\n\n## moc_%.C: $(srcdir)/%.h \n\n## \ttouch $<\n\n#\n\n#endif\n\n#\n\n## DQ (2/11/2009): Save the $(MOC_SOURCES) files into the distribution.\n\n#EXTRA_DIST = QRException.h \\\n\n#             QRMacros.h \\\n\n#             QRMain.h \\\n\n#             QRMain_p.h \\\n\n#             qrose.h \\\n\n#             QRPanel.h \\\n\n#             QRSpaceWidget.h \\\n\n#             QRTiledWidget.h \\\n\n#             QRWidgetAccess.h \\\n\n#             QRWindow.h \\\n\n#             QRGroup.h\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rdPartyLibraries/qrose/Framework/Makefile.am" : {
      "ObjectId" : "a42c43a99de16fcf89231ae7e2f01d2743d5bb7b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/11/2009): Using nodist_ rule to support specification of files to be built at compile time and not distrivuted in the distribution.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (2/11/2009): If not configured to use Qt then we can't save the $(MOC_SOURCES) files\n\n# MOC_SOURCES = \n\n# CLEANFILES =\n\n# libqrframework_la_SOURCES = \n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# moc_%.C: $(srcdir)/%.h \n\n# \ttouch $<\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (2/11/2009): Save the $(MOC_SOURCES) files into the distribution.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/3rdPartyLibraries/qrose/Makefile.am" : {
      "ObjectId" : "53fae5e3e5f036a96d17e0074833a3b31f6c7948",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# the library search path.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/3rdPartyLibraries/qrose/QRoseLib/CMakeLists.txt" : {
      "ObjectId" : "698c757869ed7164c6f1d34bf23046f85dc5fb0e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#lib_LTLIBRARIES = libqrose.la\n\n#libqrose_la_LIBADD = ../Framework/libqrframework.la \\\n\n#                     ../Widgets/libqrwidgets.la \\\n\n#                     ../Components/Common/libqrcommon.la \\\n\n#                     ../Components/QueryBox/libqrquerybox.la \\\n\n#                     ../Components/SourceBox/libqrsourcebox.la \\\n\n#                     ../Components/TreeBox/libqrtreebox.la\n\n#                     \n\n#libqrose_la_SOURCES = qroselib.C\n\n#if QROSE_USE_MINGW32\n\n#   libqrose_la_LDFLAGS = -no-undefined @QT_LDFLAGS@\n\n#else\n\n#   libqrose_la_LDFLAGS = @QT_LDFLAGS@\n\n#endif\n\n#\n\n#endif\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/3rdPartyLibraries/qrose/QRoseLib/Makefile.am" : {
      "ObjectId" : "1bec5d3f29c6a23ff62ec1641ce364bad74a860d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/3rdPartyLibraries/qrose/Widgets/CMakeLists.txt" : {
      "ObjectId" : "5be449c2c825e4ed1d318ddbbc1072a290ead833",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_QT\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(QT_INCLUDES) \n\n#\n\n##LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n\n#METASOURCES = auto\n\n#\n\n#include_HEADERS = QRButtons.h QRToolBar.h QRTable.h QREdit.h QRSelect.h QRProgress.h QRSeparator.h QRTree.h \n\n#\n\n#noinst_LTLIBRARIES = libqrwidgets.la\n\n#\n\n#MOC_SOURCES = moc_QRButtons.C moc_QRToolBar.C moc_QRTable.C moc_QREdit.C moc_QRSelect.C moc_QRProgress.C moc_QRSeparator.C moc_QRSelect_p.C moc_QRTree.C \n\n#\n\n#libqrwidgets_la_SOURCES = QRTable_p.C QREdit_p.C QRProgress_p.C QRSeparator_p.C QRButtons.C QRButtons_p.C QRToolBar.C QRTable.C  QREdit.C  QRSelect.C QRSelect_p.C QRProgress.C QRSeparator.C QRTree.C \n\n#nodist_libqrwidgets_la_SOURCES = $(MOC_SOURCES)\n\n#\n\n#CLEANFILES = moc_*.C\n\n#\n\n#if QROSE_USE_WINDOWS\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ `cygpath -w $<` -p$(srcdir)\n\n#else\n\n#moc_%.C: $(srcdir)/%.h \n\n#\t$(MOC) -o $@ $<\n\n#endif \n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = QRButtons.h  \\\n\n#\t     QRButtons_p.h \\\n\n#             QREdit_p.h \\\n\n#             QRProgress_p.h \\\n\n#             QRSelect_p.h \\\n\n#             QRSeparator_p.h \\\n\n#             QRTable_p.h \\\n\n#             QREdit.h \\\n\n#             QRProgress.h \\\n\n#             QRSelect.h \\\n\n#             QRSeparator.h \\\n\n#             QRTable.h \\\n\n#             QRToolBar.h \n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/3rdPartyLibraries/qrose/Widgets/Makefile.am" : {
      "ObjectId" : "6e22bce401a62b11f3dd4f789b9851d07c1c942f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LD_FLAGS = @LIB_ROSE@ @ROSE_LDFLAGS@  @LIB_QT@ @QT_LDFLAGS@\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e90a0845be3572c5b3f4d4c6c9dca81cbdf50013",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# Configuration header files\n\n########################################################################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The rose_config.h file generated during the configuration process contains CPP symbols that indicate what features are\n\n# available during compilation.  This file cannot be included into end-user source code because it pollutes the global\n\n# namespace.  Therefore, we create a copy called rosePublicConfig.h containing only certain symbols and whose names are\n\n# modified by prepending \"ROSE_\".\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################################################\n\n# ROSETTA\n\n########################################################################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Header files needed to build ROSETTA\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ROSETTA-generated headers files. If one of these headers is no longer generated, \"make\" will repeatedly run the rule\n\n# to try to generate it.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ROSETTA-generated source files.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Tell cmake that these files are generated by ROSETTA and will only be available at compile time\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################################################################\n\n# Subdirs for the ROSE library\n\n########################################################################################################################\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build in the subdirectories that make up the ROSE source code\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "########################################################################################################################\n\n# The ROSE library\n\n########################################################################################################################\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################################################################\n\n# The ROSE library itself (librose.so, librose.a, librose.dll)\n\n########################################################################################################################\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################################################################\n\n# Dependencies of the ROSE library. librose depends on additional libraries.\n\n########################################################################################################################\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Z3 has an executable component and a development (library and headers) component that can be installed independently\n\n# of each other. Therfore Z3_FOUND_EXE says whether the executable component was found, and Z3_FOUND_LIB says whether\n\n# the development component was found; Z3_FOUND is set if either component is found.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# YAML-cpp is for parsing YAML and JSON files.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Dlib is a C++ support library. ROSE uses matrices and some graph algorithms currently.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# The GNU GCrypt library is used for computing a wide variety of hashes. It needs the GPG-Error library.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Zlib is a compression library and is needed by Boost. Make sure you compiled Boost with this same zlib.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If POET is enabled in ROSE, we need to link in some additional dependencies.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ???\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Depending on which language analysis (frontend) features are enabled in ROSE, we may need some additional libraries.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# This was an experiment to generate smaller files from ROSETTA. (I'm not sure of the status [Matzke 2019-02-02].)\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# If OpenMP is enabled, ROSE has some additional depenendencies\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# SQLite3 has an executable component and a development (library and headers) component that can be installed\n\n# independently of each other. Therfore SQLITE3_FOUND_EXE says whether the executable component was found, and\n\n# SQLITE3_FOUND_LIB says whether the development component was found; SQLITE3_FOUND is set if either component is found.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# CORY: Maybe you can help. When sqlite is enabled, I get errors from cmake (when run in a clean build directory) that\n\n#       say \"Cannot find source file /home/matzke/junk/_build-cmake/src/util/CMakeFiles/util_main.dir/rose_paths.C.o;\n\n#       Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp .hxx .in .txx\". I'm not sure why\n\n#       cmake things \"rose_paths.C.o\" should be a source file. The $ROSE/src/util/CMakeLists.txt has the CMake\n\n#       commands for creating rose_paths.C and rose_paths.h, and is the only CMakeLists.txt file that mentions\n\n#       \"rose_paths\". The error goes away if I comment out the following line (but then of course there's linking\n\n#       problems later).\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "########################################################################################################################\n\n# testSharedRoseLib -- a basic test to make sure the ROSE library works\n\n########################################################################################################################\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "########################################################################################################################\n\n# The rose-config tool (Deprecated; use the rose-config.cfg file directly instead)\n\n########################################################################################################################\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#LIB_INSTALL_DIR ?\n",
        "Line" : 299,
        "CharPositionInLine" : 73
      },
      "27" : {
        "Text" : "########################################################################################################################\n\n# rose-config.cfg -- text file that contains various settings for user-level makefiles.\n\n########################################################################################################################\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "src/Makefile.am" : {
      "ObjectId" : "d6d31c57a02c66e3c23e43818f9e3ee9a59f7ec4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This lists a large number of directories.  If \"make install\"\n\n# is run then we only need a single directory\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (7/23/2008): New handling of EDG builds a single library instead of two.\n\n# Binary distributions of ROSE store the binary for EDG related code in the source tree.\n\n# JJW (8/3/2008): See src/frontend/CxxFrontend/Makefile.am.forBinaryEDG for\n\n# more information on this process.\n\n# TV (08/2012): changed 'libroseEDGlibraries' to 'libroseCxxlibraries' while adding Clang support to ROSE\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Rasmussen (01/21/2018): Adding general support for experimental languages\n\n# Rasmussen (05/29/2018): Moved parse tables for installation in $(prefix)/share/rose\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Rasmussen (01/29/2018): Removed building of ATerm traversal in 3rdPartyLibraries. Replaced with C++ traversals of ATerms.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (8/15/2011): Revert back to what we had before to fix Hudson java only test.\n\n# DQ (8/14/2011): Need this change to match Makefile changes in ECJ_ROSE_Connection/Makefile.am\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (28/8/2017): Adding more general language support.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (28/8/2017): Adding more general language support.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (31/8/2017): This library needs to be provided at configure time.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (31/8/2017): At least the Asis library needs to be provided built in to GNAT (atypical installation of GNAT).\n\n#  asis_lib_dir = @gnat_home@/lib/asis/asislib\n\n#  gnat_lib_dir = @gnat_home@/lib/gcc/x86_64-pc-linux-gnu/6.3.1/adalib\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (31/8/2017): Some of these need to be built in ROSE as libtool constructed libraries (maybe also as dynamic libraries).\n\n# Charles is working on this and it should be ready 4/9/2017.\n\n# libroseAdalibraries += ${dot_asis_lib_dir}/libdot_asis.a ${asis_lib_dir}/libasis.a ${gnat_lib_dir}/libgnarl.a ${gnat_lib_dir}/libgnat.a\n\n#  libroseAdalibraries += ${dot_asis_lib_dir}/libdot_asis.so\n\n#  libroseAdalibraries += -Wl,-rpath -Wl,${dot_asis_lib_dir}/libdot_asis.so\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (28/8/2017): Adding more general language support.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (28/8/2017): Adding more general language support.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Rasmussen (11/19/2017): Adding language support for Matlab\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TOO (11/22/2011): flattening midend Makefiles => TODO: move conditional compilation to Makefile.\n\n# TODO: correct list!\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (12/18/2016): Moved below to make POET optional.\n\n#  $(top_builddir)/src/3rdPartyLibraries/POET/libpoet.la\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (6/10/2017): Added libhpdf.la library and removed it from LIBADD rule.\n\n# This is being done to fix the \"make install\" rule (which failes for me).\n\n# Added: $(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/src/libhpdf.la above.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (12/18/2016): Moved below to make POET optional.\n\n#  $(top_builddir)/src/3rdPartyLibraries/POET/libpoet.la\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DQ (1/14/2017): Remove POET uniformally until it can be added to provide greater portability (working on Ubuntu systems).\n\n# if !OS_VENDOR_UBUNTU\n\n# if !OS_VENDOR_DEBIAN\n\n# # DQ (12/18/2016): make POET optional (skip on Debian and Ubuntu systems until the \n\n# # build is better and can avoid linking issues for these operating systems.\n\n#    libroseLibraries += $(top_builddir)/src/3rdPartyLibraries/POET/libpoet.la\n\n# endif\n\n# endif\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (4/17/2010): Added support to permit minimal ROSE configurations (e.g. --enable-only-fortran).\n\n# used $(libroseOpenFortranParserlibraries) to replace $(top_builddir)/src/frontend/OpenFortranParser_SAGE_Connection/libroseFortran.la\n\n# used $(librosePHPlibraries) to replace $(top_builddir)/src/frontend/PHPFrontend/librosePHPFrontend.la\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Header files that need to be included in the distribution\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "########################################################################################################################\n\n# Test that a simple ROSE program can run, and as a side effect, print some version numbers.\n\n# DQ (9/8/2006): The ROSE/docs/Rose/Makefile references the testSharedRoseLib program, so maybe is should be installed?\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (4/12/2016): This is required for use with clang (not clear how to compile ROSE with out it).\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# testSharedRoseLib_LDADD += -lstdc++\n\n# testSharedRoseLib_LDADD += -lstdc++ -fno-rtti\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Matzke (8/11/2016) I think \"--version\" is always supported now regardless of which frontends are compiled\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "########################################################################################################################\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (9/22/2006): Because we now use libtool, the shared library is a reference to the separate\n\n# dynamic libraries in each directory and so testMultiRoseLib is redundant with testSharedRoseLib.\n\n# This is true only if we have configured --with-development-libraries, else we have static\n\n# in each directory and we will link with the collection of all static libraries.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# PC (9/15/2006): force the use of the C++ linker\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# OpenFortranParser-${OFP_VERSION}.jar:\n\n#\tcd ${top_builddir}/src/3rdPartyLibraries/fortran-parser; $(MAKE) get_jar_file\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# DQ (6/9/2017): Removed because it failes for \"make install\" rule on my machine.\n\n# This was located after the BOOST_WAVE_LIB line in the librose_la_LIBADD rule above.\n\n#          -L$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/src -lhpdf \n\n# Added this library to the libroseLibraries rule farther above in this file.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# libelf is a prerequisite for using libdwarf\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# DQ (6/5/2010): Suggested change by Peter to support dwarf that would simplify use with Haskell\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# librose_la_LDFLAGS = -no-undefined --rpath $(INTEL_PIN_PATH)/intel64/lib-ext\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#librose_la_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# DQ (4/12/2016): This is required for use with clang (not clear how to compile ROSE with out it).\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# librose_la_LIBADD += -lstdc++\n\n# librose_la_LIBADD += -lstdc++ -fno-rtti\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n\n# librose_la_DEPENDENCIES += OpenFortranParser-${OFP_VERSION}.jar\n\n# endif\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Build list of all required libraries so that they can be built in parallel\n\n# REQUIRED_LIBS = $(libdir)/libedg.la\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# DQ (3/14/2009): In this file we have to overwrite existing values in LDFLAGS (to build librose.so).\n\n# DQ (3/14/2009): We have to clear the LDFLAGS variable...  This is not so great.\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "########################################################################################################################\n\n# This tool spits out information that tells users how to compile and link programs that use ROSE. Therefore, we have to\n\n# build a configuration file and compile its installed name into the rose-config tool. It's also especially important\n\n# that this tool uses rpaths to find its dynamically-linked libraries, otherwise the user will be tempted to use\n\n# LD_LIBRARY_PATH and complain when the tool segfaults, not realizing that the fault is because they told the tool to\n\n# use a library that is incompatible with the one it was compiled to use.\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Additional items useful to include in Makefiles\";\t\\\n\t\techo \"ROSE_RPATHS       = $(ROSE_RPATHS)\";\t\t\t\\\n\t\techo \"ROSE_LINK_RPATHS  = $(ROSE_LINK_RPATHS)\";\t\t\t\\\n\t) >$@\n",
        "Line" : 489,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "########################################################################################################################\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Rasmussen (3/23/2018): Added installing libtool to the bin directory to support\n\n# linking an application using ROSE from a ROSE installations.\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# DQ (1/10/2004): remove the librose.a and libedg.a files so that distclean will work cleanly\n\n# Do not remove libraries indiscriminately with wildcards [Matzke, 2017-06-19]\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# DQ (9/14/2006): These are required!\n\n# Note that uninstall-hook does not work, but uninstall-local does.\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\trm -f $(libdir)/libedg.so\n\n#\trm -f $(libdir)/librose.so\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#\tDQ (12/21/2009): The locaion of the EDG directory has been changed now that it is a submodule in our git repository.\n\n#\trm -f frontend/CxxFrontend/EDG_3.3/util/edg_prelink.lo\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "src/ROSETTA/CMakeLists.txt" : {
      "ObjectId" : "305c53f748b99f9ace5a46e4b01ce8f739dffcaa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Liao, 11/10/2009, This is not a project here\n\n#project(ROSETTA)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#SUBDIRS = src\n\n#\n\n#ACLOCAL = @ACLOCAL@ -I ../config -I ../acmacros\n\n#\n\n#LIBS = @LIBS@ ${ROSETTA_LIBS}\n\n#\n\n#EXTRA_DIST = astNodeList\n\n#\n\n## ***********************************************************************\n\n##                      Documentation Support\n\n## ***********************************************************************\n\n## Don't build a \"docs\" rule just yet since the dist rule (which builds distributions)\n\n## will call it to generate documentation and this both causes errors and we don't\n\n## want to test the generation of doxygen just yet (too long of a process).\n\n#\n\n#docs:\n\n#\t@echo \"Skipping the creation of documentation within the docs rule.\"\n\n#\n\n## sage-docs:\n\n##\t@echo \"Generate documentation for C++ grammar (using Doxygen)\"\n\n##\tmkdir -p ../docs/CxxGrammar\n\n##\tdoxygen $(srcdir)/ROSE_CxxGrammar.cfg\n\n#\n\n#clean-docs:\n\n#\t@echo Removing generated documentation\n\n#\trm -rf docs\n\n#\n\n## DQ (7/4/2004)\n\n## We need this to copy the Grammar directory into the distribution once in\n\n## the distribution it is linked in the compile tree to the source tree.\n\n#dist-hook: docs\n\n##\t: dist-hook explanations:\n\n##\t: Copy non-automake-controled items (Grammar) into the distribution directory.\n\n##\tln -s Grammar ${distdir}\n\n#\tfor i in Grammar; do    \\\n\n#\t  cp -rp ${top_srcdir}/src/ROSETTA/$$i ${distdir} &&        \\\n\n#\t  rm -rf ${distdir}/$$i/CVS ${distdir}/$$i/*~   ;\\\n\n#\tdone\n\n#\n\n## Purify related flags\n\n## PURIFY_USE_WINDOWS = -windows=yes\n\n## PURIFY_FLAGS  = $(PURIFY_USE_WINDOWS) -recursion-depth-limit=40000 -chain-length=12 -first-only=yes -l -at-exit=yes -inuse-at-exit=yes -always-use-cache-dir=yes -cache-dir=/home/dquinlan/tmp\n\n## PURIFY        = purify4.5 $(PURIFY_FLAGS)\n\n#\n\n## PURIFY_DIR    = `purify4.5 -print-home-dir`\n\n## PURIFY_STUBS  = $(PURIFY_DIR)/purify_stubs.a\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n## AUTOMAKE_OPTIONS = foreign\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/ROSETTA/Makefile.am" : {
      "ObjectId" : "c42b632097f54a9b2d72b95e019e9cecde2f8614",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ***********************************************************************\n\n#                      Documentation Support\n\n# ***********************************************************************\n\n# Don't build a \"docs\" rule just yet since the dist rule (which builds distributions)\n\n# will call it to generate documentation and this both causes errors and we don't\n\n# want to test the generation of doxygen just yet (too long of a process).\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sage-docs:\n\n#\t@echo \"Generate documentation for C++ grammar (using Doxygen)\"\n\n#\tmkdir -p ../docs/CxxGrammar\n\n#\tdoxygen $(srcdir)/ROSE_CxxGrammar.cfg\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (7/4/2004)\n\n# We need this to copy the Grammar directory into the distribution once in\n\n# the distribution it is linked in the compile tree to the source tree.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t: dist-hook explanations:\n\n#\t: Copy non-automake-controled items (Grammar) into the distribution directory.\n\n#\tln -s Grammar ${distdir}\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Purify related flags\n\n# PURIFY_USE_WINDOWS = -windows=yes\n\n# PURIFY_FLAGS  = $(PURIFY_USE_WINDOWS) -recursion-depth-limit=40000 -chain-length=12 -first-only=yes -l -at-exit=yes -inuse-at-exit=yes -always-use-cache-dir=yes -cache-dir=/home/dquinlan/tmp\n\n# PURIFY        = purify4.5 $(PURIFY_FLAGS)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# PURIFY_DIR    = `purify4.5 -print-home-dir`\n\n# PURIFY_STUBS  = $(PURIFY_DIR)/purify_stubs.a\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# AUTOMAKE_OPTIONS = foreign\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/ROSETTA/src/CMakeLists.txt" : {
      "ObjectId" : "d6161540b1132176a27414c122e8b992e82afaa0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# source files for the code generator\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# input files to generate source files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build ROSETTA code generator\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define a custom command to call the code generator and generate source/header files\n\n# Generate the edg-sage connection using ROSETTA\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# depend on the code generator and input files\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# We need to copy the input files to the build tree since the code generator will output the generated source files\n\n# into the same directory as where the input files locate\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# create this directory is needed since a few generated files will be put there        \n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# define a custom command to call the code generator and generate source/header files\n\n# Generate the edg-sage connection using ROSETTA\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# depend on the code generator and input files\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We need to copy the input files to the build tree since the code generator will output the generated source files\n\n# into the same directory as where the input files locate\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# create this directory is needed since a few generated files will be put there        \n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# COMMAND echo  \"META_EXE_LOC =  ${META_EXE_LOC} ARGS ${ROSE_TOP_BINARY_DIR}/src/frontend/SageIII/\"\n\n# STRING(REGEX REPLACE \"\\\\\\\\\" \"/\" META_EXE_LOC ${META_EXE_LOC} )\n\n# COMMAND echo  \"META_EXE_LOC =  ${META_EXE_LOC} ARGS ${ROSE_TOP_BINARY_DIR}/src/frontend/SageIII/\"\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# COMMAND \"C:/ROSE/git-rose-tps/build/src/ROSETTA/src/Debug/CxxGrammarMetaProgram.exe \"\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# a custom target depending on generated rosetta source and header files to trigger the building process\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/ROSETTA/src/Makefile.am" : {
      "ObjectId" : "32ef36af5bdb056f774ce162059334e0945b4120",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Define the template repository path used in the autoconf\n\n# subsitution for various C++ template control variables.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#                   $(CXX_GRAMMAR_DIR)/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The generation of the ROSE Grammars depend upon source code from these files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (4/6/2006): Removed from Jochen's new version\n\n# ../Grammar/grammarConstructorOfStorageClass.macro\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (11/9/2016): Use option to turn off the memory leak detection because we are not \n\n# conserned with memory leaks in the ROSE code generator.\n\n# VALGRIND = $(ADDRESS_SANITIZER_OPTIONS)\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build the grammar for generating the C++ preprocessor.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  Build a link so that the executable can find the *.code file in ../Grammar\n\n#\trm -f Grammar\n\n#\tln -s $(top_srcdir)/src/ROSETTA/Grammar Grammar\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#       Add \"--verbose\" if you want the old, noisy output from CxxGrammarMetaProgram\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# buildConstructorsWithoutSourcePositionInformation.o: buildConstructorsWithoutSourcePositionInformation.C\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (4/12/2016): This is required for use with clang (not clear how to compile ROSE with out it).\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (9/11/2008):\n\n# The rose_paths.c is built in ROSE/src/util and this dependence causes\n\n# ROSE to rebuild a lot of code each time configure is rerun. Let's see\n\n# if this can be make a little more tolerable for those without larger\n\n# computers working on ROSE (e.g. students).\n\n# CxxGrammarMetaProgram_DEPENDENCIES = $(CxxGrammarMetaProgram_LDADD)\n\n# CxxGrammarMetaProgram_DEPENDENCIES = \n\n# CxxGrammarMetaProgram_DEPENDENCIES = $(CxxGrammarMetaProgram_SOURCES)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (7/8/2005): Avoid building Sage III when util changes!\n\n# $(top_builddir)/util/libroseutil.so:\n\n#\tcd $(top_builddir)/util; $(MAKE)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Force recompilation of source files if any of the header files \n\n# are changed (does not work if *.o files are not present).\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "src/backend/CMakeLists.txt" : {
      "ObjectId" : "2560e5c05128f3f59eb8c57b973e6813b38bdffa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/backend/Makefile.am" : {
      "ObjectId" : "61c8953a3553fa8d0ad9470928c755d421f5da9c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Non-recursive Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Subdirectory specifics\n\n# TOO (01/26/11): relative paths must be updated for each propagation upward\n\n# in the flattening of Makefiles\n\n#\n\n# Caution: include path cannot contain variable,\n\n#\te.g. include $(cxxCodeGenerationPath)/Makefile_variables\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if ROSE_BUILD_MATLAB_LANGUAGE_SUPPORT\n\n# include $(srcdir)/unparser/MatlabCodeGeneration/Makefile_variables\n\n# matlabCodeGenerationPath=$(srcdir)/unparser/MatlabCodeGeneration#\n\n# else\n\n# matlabCodeGenerationPath=\n\n# endif\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 34,
        "CharPositionInLine" : 31
      },
      "4" : {
        "Text" : "#\n",
        "Line" : 35,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 36,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : "#\n",
        "Line" : 37,
        "CharPositionInLine" : 66
      },
      "7" : {
        "Text" : "#\n",
        "Line" : 38,
        "CharPositionInLine" : 78
      },
      "8" : {
        "Text" : "#\n",
        "Line" : 39,
        "CharPositionInLine" : 58
      },
      "9" : {
        "Text" : "#\n",
        "Line" : 40,
        "CharPositionInLine" : 64
      },
      "10" : {
        "Text" : "#\n",
        "Line" : 41,
        "CharPositionInLine" : 37
      },
      "11" : {
        "Text" : "#\n",
        "Line" : 42,
        "CharPositionInLine" : 60
      },
      "12" : {
        "Text" : "#\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 58
      },
      "13" : {
        "Text" : "#\n",
        "Line" : 45,
        "CharPositionInLine" : 64
      },
      "14" : {
        "Text" : "###############################################################################\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##################################################################\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (10/29/2010): We have to include \"asmUnparser\" directory so that its header files \n\n# will be installed by \"make install\", even with language only options are used.\n\n#SUBDIRS = unparser asmUnparser\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "src/backend/asmUnparser/CMakeLists.txt" : {
      "ObjectId" : "3506113466b266095d35a60cad151b1478957070",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/backend/unparser/AdaCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "2ea1e4f2cf2441810d90bbb9c486e7fd9fe61d30",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/backend/unparser/CMakeLists.txt" : {
      "ObjectId" : "833c5bcd1c2346f55ce94164f778f6af0bda85bd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tps (11/23/2009) commented out fortran and php for windows for now\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Excluding these subdirectories based on which analyses languages are supported is not sufficient because\n\n# the headers are still included from unparser.h and so need to still be installed.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "########### next target ###############\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########### install files ###############\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/backend/unparser/CxxCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "f914abe324e012af26557eaae3e97b0a61a8cfac",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#unparseCxxCodeGeneration_headers = unparseCxx.h unparseCxx_types.h\n\n#\n\n#unparseCxxCodeGeneration_sources = unparseCxx_expressions.C unparseCxx_statements.C unparseCxx_types.C\n\n#\n\n#include_HEADERS = $(unparseCxxCodeGeneration_headers)\n\n#\n\n#noinst_LTLIBRARIES = libunparseCxx.la\n\n#\n\n#libunparseCxx_la_SOURCES = $(unparseCxxCodeGeneration_sources)\n\n#\n\n#clean-local:\n\n#\trm -rf ii_files ti_files core\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/backend/unparser/FortranCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "d3adf5a468a922d504c145a93bf66a932fba36fa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#unparseFortranCodeGeneration_headers = unparseFortran.h unparseFortran_types.h unparseFortran_modfile.h\n\n#unparseFortranCodeGeneration_sources = unparseFortran_expressions.C unparseFortran_statements.C unparseFortran_types.C unparseFortran_modfile.C\n\n#\n\n#include_HEADERS = $(unparseFortranCodeGeneration_headers)\n\n#\n\n#noinst_LTLIBRARIES = libunparseFortran.la\n\n#\n\n#libunparseFortran_la_SOURCES = $(unparseFortranCodeGeneration_sources)\n\n#\n\n#clean-local:\n\n#\trm -rf ii_files ti_files core\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/backend/unparser/JavaCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "9607093b9dc7ecbec5d357519c41d2d670828bd7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/backend/unparser/JovialCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "1eaf5d9abdd16de1519d78c49ae6995ce8bbd93e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/backend/unparser/MatlabCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "ebab803781c45a7a05754395864740c63bc14971",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/backend/unparser/PHPCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "33c39cbc2b75a79399fdef6d4febf8387cbae6f1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#unparsePHPCodeGeneration_headers = unparsePHP.h\n\n#\n\n#unparsePHPCodeGeneration_sources = unparsePHP.C\n\n#\n\n#include_HEADERS = $(unparsePHPCodeGeneration_headers)\n\n#\n\n#noinst_LTLIBRARIES = libunparsePHP.la\n\n#\n\n#libunparsePHP_la_SOURCES = $(unparsePHPCodeGeneration_sources)\n\n#\n\n#clean-local:\n\n#\trm -rf ii_files ti_files core\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/backend/unparser/PythonCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "6ff4b22dfd40bbbf4ad1ad848313eabc08e37196",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/backend/unparser/X10CodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "4c239d936a9266ca7eed60055e23b53f3db40225",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/backend/unparser/formatSupport/CMakeLists.txt" : {
      "ObjectId" : "749d7c5496839beaafafef81d53e139912be96d7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#unparseFormat_sources = $(unparseFormat_headers:.h=.C)\n\n#\n\n#include_HEADERS = $(unparseFormat_headers)\n\n#\n\n#noinst_LTLIBRARIES = libunparseFormatSupport.la\n\n#\n\n#libunparseFormatSupport_la_SOURCES = $(unparseFormat_sources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/backend/unparser/languageIndependenceSupport/CMakeLists.txt" : {
      "ObjectId" : "94632cec5f77cc3e92b2aed9ee00bc21ffe0a1b7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#unparseLanguageIndependenceSupport_headers = unparseLanguageIndependentConstructs.h name_qualification_support.h unparser_opt.h modified_sage.h unparse_debug.h \n\n## unparseLanguageIndependenceSupport_sources = $(unparseOpt_headers:.h=.C) modified_sage_isUnaryOp.C\n\n#unparseLanguageIndependenceSupport_sources = unparseLanguageIndependentConstructs.C name_qualification_support.C unparser_opt.C modified_sage.C unparse_debug.C modified_sage_isUnaryOp.C\n\n#\n\n#include_HEADERS = $(unparseLanguageIndependenceSupport_headers)\n\n#noinst_LTLIBRARIES = libunparseLanguageIndependenceSupport.la\n\n#\n\n#libunparseLanguageIndependenceSupport_la_SOURCES = $(unparseLanguageIndependenceSupport_sources)\n\n#\n\n#clean-local:\n\n#\trm -rf ii_files ti_files core\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/frontend/BinaryFormats/CMakeLists.txt" : {
      "ObjectId" : "0a64e4df74aeaa8bdd0f9d887fb91fb670cd6f1a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Utilities ###\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "### Generic Base Classes ###\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "### Executable Linking Format (ELF) ###\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "### Microsoft Windows PE Format */\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "### Other Formats (partial implementations and not so well tested) ###\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "src/frontend/BinaryFormats/Makefile.am" : {
      "ObjectId" : "5a37845dd100a2f345b81c40192abea1e09b96e9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Added INTEP PIN support to collect dynamic binary analysis info.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  Use the path specified on the configuration command line (e.g. --with-Intel_Pin=<path>)\n\n#   INTEL_PIN_PATH          = @IntelPin_path@\n\n#   INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext\n\n#   INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include\n\n#   INTEL_PIN_TOOLS_PATH    = $(INTEL_PIN_PATH)/source/tools/SimpleExamples\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This will cause the dynamic library to be built (as libroseBinaryFormats.so)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make sure that this is distributed even if ROSE was not configured using: -with-IntelPin=<path>\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/frontend/BinaryLoader/CMakeLists.txt" : {
      "ObjectId" : "233542a30b645e4afef1d2aa2a30e72b532f79f2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/frontend/BinaryLoader/Makefile.am" : {
      "ObjectId" : "65f0ae6a072a557ad76a022151dfc244e2bdc7dd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/frontend/CMakeLists.txt" : {
      "ObjectId" : "626c1ccc1b492addd6c124f7f5d6215d08a70d6d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/frontend/CxxFrontend/CMakeLists.txt" : {
      "ObjectId" : "eee926434e8a81d11a82c9a634b8bdd7b6bf2760",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There are three ways to get the EDG library:\n\n#   If C/C++ analysis is not configured in ROSE, we can use a mostly empty dummy library.\n\n#   If we have EDG source code (\"EDG\" subdirectory) we can compile it.\n\n#   Otherwise we can download a precompiled version from the ROSE team.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/CxxFrontend/Clang/Makefile.am" : {
      "ObjectId" : "bfbcb95edc871a578e8dc982117cc46ff84c4dbf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES)\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) -fno-rtti\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (4/5/2017): eliminate warnings in initial development.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/frontend/CxxFrontend/Makefile.am" : {
      "ObjectId" : "9aebcf92e4fd8a4559332b7d87e8bb4cbef32ef8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# How to install ROSE without EDG source code on a machine with no network:\n\n#  See http://rosecompiler.org/ROSE_HTML_Reference/group__installing__edg.html\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#If we have Clang, then we don't need EDG at all.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Who to contact if something goes wrong with these scripts\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The script for computing the EDG hash\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is where EDG binaries are stored\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The EDG hash is stored in a file, which gets around problems of using $(shell...), but means that we shouldn't use\n\n# EDGBIN_SIGNATURE as a target or dependency.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The name of the EDG binary is a bit complex.  Most of these variables come from the configure script. Be careful\n\n# not to use EDGBIN_NAME as a target or dependency in this makefile since make needs to parse those before the\n\n# $(EDGBIN_SIGNATURE_FILE) can be created.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All the .PHONY's need to be outside any automake \"if\" statements otherwise automake complains.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Phony target to build EDG dependencies. We have to build EDG's prerequisites in order to compute the EDG hash.\n\n#(see above): .PHONY: edg-prerequisites\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Run the edg-generate-sig script to find an appropriate version number.  We don't use make's $(shell...) function\n\n# because it sometimes discards standard error and doesn't cause make to fail if edg-generate-sig fails.  If\n\n# edg-generate-sig fails then remove the edg-generate-sig.output file so that re-running make will fail the same way\n\n# next time.  Also, we don't want to change the modification time of this file if not necessary, since doing so would\n\n# cause targets that depend on it to become out of date.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Phony targets to show useful information. See .PHONY above.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################################################################\n\n# We have the EDG source code (ROSE_HAS_EDG_SOURCE)\n\n###############################################################################################################################\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# When building the library we have to make sure that it's dependencies were built first.  These are the same things that\n\n# go into calculating the EDG binary version number (see scripts/edg-generate-sig)\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Create EDG binary tarball without using $(EDGBIN_NAME) which hasn't been computed when make parses this rule (but is\n\n# computed by time this rule's commands run). The \"upload-\" prefix is necessary because we can't have the same target\n\n# in the \"if\" and \"else\" part of an automake file, and we'd prefer to use \"EDG.tar.gz\" at the download end (the \"else\").\n\n#\n\n# Also, whenever we create the uploadable tarball (regardless of whether we actually upload it) we should also make it\n\n# look like we just downloaded it, because Jenkins tests that the EDG upload/download functionality is working by faking\n\n# an upload/download. It runs \"make binary_edg_tarball\", then deletes the EDG source code, reconfigures ROSE, and runs\n\n# \"make\" again to see if we can build ROSE with the EDG binary.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# for upload\n\n# make it look like we downloaded also\n",
        "Line" : 102,
        "CharPositionInLine" : 45
      },
      "15" : {
        "Text" : "# Phony target to generate a tarball but not upload it\n\n#(see above): .PHONY: binary_edg_tarball\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Phony target to upload EDG tarballs to the staging area and the local area. Do not use $(EDGBIN_NAME) in the target or\n\n# dependencies because it hasn't been computed at the time that make parses that part of the rule. It's okay to use it\n\n# in the commands of this rule.\n\n#(see above): .PHONY: upload_edg_binary\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "###############################################################################################################################\n\n# We don't have the EDG source code (!ROSE_HAS_EDG_SOURCE)\n\n###############################################################################################################################\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Figure out how to download a binary version of EDG that the ROSE team distributes.  The ROSE team distributes EDG\n\n# binaries by compiling EDG within particular revisions of ROSE and then uploading the EDG binaries to a public web\n\n# server.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#(see above): .PHONY: check-network\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Only here for backward compatibility. Maybe we don't need it?\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Try to get the EDG binary tarball if we don't have it.  Team members might be able to get it from a local directory,\n\n# but others will need to go to a Web server.  We use wget rather than curl because curl was sometimes placing error\n\n# messages inside the tarball. Don't use $(EDGBIN_NAME) in the target or dependencies because it hasn't been computed\n\n# yet when make parses that part of this rule; it's okay to use it in the commands though.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# This target can be used to explicitly download the EDG tarball without needing to know its name.\n\n#(see above): .PHONY: download-edg\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Unpack the EDG tarball. Note: $(am__untar) comes from configure and if it's not set then there's something wrong with configure.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "###############################################################################################################################\n\n# Stuff that's common to both uploading and downloading EDG tarballs\n\n###############################################################################################################################\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Cleanup\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (3/1/2017): Need to be able to run make clean whenClang frontend support is defined.\n\n#\trm -rf EDG/.libs $(EDGBIN_NAME_PREFIX)-*.tar.gz\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "src/frontend/DLX/Makefile.am" : {
      "ObjectId" : "12341e3ea8e8da0b820728ce1823a2dda2257e68",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/frontend/DLX/include/DLX/Core/Makefile.am" : {
      "ObjectId" : "a3383cfda2ed49ee8af08e885c07a6f448baa750",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/frontend/DLX/lib/core/Makefile.am" : {
      "ObjectId" : "f87bb3b65204a1614d02cbd480ac20e9069595a8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/frontend/Disassemblers/CMakeLists.txt" : {
      "ObjectId" : "5aa39b816cb0914978e0037d45ea0cfe0ca9b2a4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/Disassemblers/Makefile.am" : {
      "ObjectId" : "d99acf15a16f8cebbd2f24c875d9e32507b68211",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This will cause the dynamic library to be built (as libroseDisassemblers.so)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/ECJ_ROSE_Connection/CMakeLists.txt" : {
      "ObjectId" : "344dc107410473e3896aaaddb89bda6f2a970406",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "########### install files ###############\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/frontend/ECJ_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "556920fc9a7835a3026ebbd304da2180ce0f71c3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To build a similar library using libtool we indicate that we want an installed \n\n# library (which will then be made into a dynamic shared library).\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use BUILT_SOURCES to ensure JavaTraversal.h is built before any other Target\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#JavaTraversal.C: JavaTraversal.h\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make this dependent on files that will be unpacked (untared) \n\n# from the src/3rdPartyLibraries/java-parser/ecjROSE.jar file.\n\n#JavaParserActionROSE.C: JavaTraversal.h\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule will build both: $(ECJ_DIR)/JavaTraversal.h and $(ECJ_DIR)/JavaParser.h\n\n# in the event that they don't already exist in $(ECJ_DIR).\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compile using a function that represents the API of the Open Fortran Parser\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "src/frontend/Experimental_Ada_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "78874fb0121a68c5ad3bfea8db30eb306834fef8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/23/2017): I'm not clear if we need makefile conditionals, since the directory is already conditionally processed in the parent directory.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile using a function that represents the API of the Ada support.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/5/2017): We don't need this here, and linking is represented in ROSE/src directory's Makefile.am.\n\n# Temporary location, but these libraries need to be built into ROSE's build tree, and later installed into ROSE's install tree.\n\n# dot_asis_lib_dir = /home/quinlan1/ROSE/ADA/dot_asis/dot_asis_library/lib\n\n# asis_lib_dir = @GNAT_HOME@/lib/asis/asislib\n\n# gnat_lib_dir = @GNAT_HOME@/lib/gcc/x86_64-pc-linux-gnu/6.3.1/adalib\n\n# libexperimentalRoseAda_la_DEPENDENCES = ${dot_asis_lib_dir}/libdot_asis.a ${asis_lib_dir}/libasis.a ${gnat_lib_dir}/libgnarl.a ${gnat_lib_dir}/libgnat.a\n\n# ${gcc_home}/bin/gcc ${tool_name}.o ${dot_asis_lib_dir}/libdot_asis.a ${asis_lib_dir}/libasis.a ${gnat_lib_dir}/libgnarl.a ${gnat_lib_dir}/libgnat.a -static-libgcc -lpthread -lrt -ldl -o ${tool_name} || status=1\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/frontend/Experimental_Cobol_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "1203cbf0f767c0c809909e52373385d5ba106319",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/23/2017): I'm not clear if we need makefile conditionals, since the directory is already conditionally processed in the parent directory.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile using a function that represents the API of the cobol support.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/frontend/Experimental_Csharp_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "253b1d687596f5371f6091e97409df9d761bf57d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/23/2017): I'm not clear if we need makefile conditionals, since the directory is already conditionally processed in the parent directory.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libexperimentalRoseCsharp_la_SOURCES = csharp_support.C csharp_support_lib.C\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/12/2017): These dependences cause librose to always be rebuilt, which should not be required and is annoying.\n\n# libexperimentalRoseCsharp_la_DEPENDENCIES = build_dynamic_library build_csharp_entry_point\n\n# libexperimentalRoseCsharp_la_DEPENDENCIES = csharp_support_lib.so build_csharp_entry_point\n\n#~   libexperimentalRoseCsharp_la_DEPENDENCIES = \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#~   libroseCsharpBuilder_la_DEPENDENCIES = csharpBuilder.so\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compile using a function that represents the API of the Csharp support.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (8/24/2017): Does this require C++11?\n\n# all:\n\n#\t$(CXX) -std=c++11 -Wall -fPIC -O2 -I$(MONO_INCLUDE) -c $(srcdir)/csharp_support_lib.C `pkg-config -cflags -libs mono-2`\n\n#\t$(CXX) -std=c++11 -Wl,--no-undefined -shared -o csharp_support_lib.so csharp_support_lib.o -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt `pkg-config -cflags -libs mono-2`\n\n#\t$(CXX) -std=c++11 -I$(MONO_INCLUDE) $(ROSE_INCLUDES) $(srcdir)/csharp_support.C -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt\n\n#\t$(CXX) -std=c++11 -I$(MONO_INCLUDE) -I$(top_srcdir)/src/util -I$(top_srcdir)/src/frontend/SageIII $(srcdir)/csharp_support.C -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt\n\n#\t$(CXX) -std=c++11 -I$(MONO_INCLUDE) $(srcdir)/csharp_support.C -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt\n\n#\t$(CXX) -std=c++11 -I$(MONO_INCLUDE) -I$(top_srcdir)/src/util -I$(top_srcdir)/src/frontend/SageIII $(srcdir)/csharp_support.C -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt\n\n#\tmcs /target:library $(srcdir)/csharp_main.cs /reference:$(srcdir)/RGiesecke.DllExport.Metadata.dll\n\n#\tmcs /target:library $(srcdir)/csharp_main.cs /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/RGiesecke.DllExport.Metadata.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.Analyzers.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.Analyzers.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.VisualBasic.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.dll\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#~ csharpB%.o: $(srcdir)/csharpB%.C\n\n#~ \t$(CXX) -std=c++11 -Wall -fPIC -O2 $(ROSE_INCLUDES) -c $< -o $@\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#~ -I$(top_srcdir)/src/util -I$(top_srcdir)/src/frontend/SageIII \t\n\n# build_dynamic_library: $(srcdir)/csharp_support_lib.C\n\n# csharp_support_lib.so: $(srcdir)/csharp_support_lib.C $(srcdir)/csharp_support.h $(srcdir)/src/util/rose_paths.C\n\n#~ csharpB%.so: csharpBuilder.o csharpBuilder_wrap.o\n\n#~ \t$(CXX) -std=c++11 -Wl,--no-undefined -shared -o $@ $^ -lpthread -ldl -lrt \n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#~ csharp_support_lib.so: $(srcdir)/csharp_support_lib.C $(srcdir)/csharp_support.h\n\n#\t$(CXX) -std=c++11 -Wall -fPIC -O2 -I$(MONO_INCLUDE) -I$(top_srcdir)/src/util -I$(top_srcdir)/src/frontend/SageIII -c $(srcdir)/csharp_support_lib.C `pkg-config -cflags -libs mono-2`\n\n#\t$(CXX) -std=c++11 -Wl,--no-undefined -shared -o csharp_support_lib.so csharp_support_lib.o -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt `pkg-config -cflags -libs mono-2`\n\n#~ \t$(CXX) -std=c++11 -Wall -fPIC -O2 -I$(MONO_INCLUDE) -I$(top_srcdir)/src/util -I$(top_srcdir)/src/frontend/SageIII -c $(srcdir)/csharp_support_lib.C `pkg-config --cflags --libs mono-2`\n\n#\t$(CXX) -std=c++11 -Wl,--no-undefined -shared -o csharp_support_lib.so csharp_support_lib.o -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt `pkg-config --cflags --libs mono-2`\n\n#\t$(CXX) -std=c++11 -Wall -fPIC -I$(top_srcdir)/src/util -I$(top_srcdir)/src/frontend/SageIII -c $(builddir)/../../util/rose_paths.C\n\n#\t$(CXX) -std=c++11 -Wl,--no-undefined -shared -o csharp_support_lib.so csharp_support_lib.o rose_paths.o -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt `pkg-config --cflags --libs mono-2`\n\n#~ \t$(CXX) -std=c++11 -Wl,--no-undefined -shared -o csharp_support_lib.so csharp_support_lib.o -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt `pkg-config --cflags --libs mono-2`\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tmcs /target:library $(srcdir)/csharp_main.cs -o$(buildir)/csharp_main.dll /reference:$(srcdir)/RGiesecke.DllExport.Metadata.dll\n\n#\tmcs /target:library $(srcdir)/csharp_main.cs /reference:$(srcdir)/RGiesecke.DllExport.Metadata.dll\n\n#\tmcs /target:library $(srcdir)/csharp_main.cs /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/RGiesecke.DllExport.Metadata.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.Analyzers.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.Analyzers.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.VisualBasic.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.dll\n\n#\t/reference:$(srcdir)/RGiesecke.DllExport.Metadata.dll\n\n#\tmcs /target:library $(srcdir)/csharp_main.cs /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/RGiesecke.DllExport.Metadata.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.Analyzers.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.Analyzers.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.CSharp.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.VisualBasic.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.Workspaces.dll /reference:/nfs/casc/overture/ROSE/opt/rhel7/x86_64/csharp/libs/Microsoft.CodeAnalysis.dll\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## $(srcdir)/parseTreeTraversal.cs $(srcdir)/abstractSyntaxTreeTraversal.cs $(srcdir)/buildDotGraph.cs \n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# build_executable: build_dynamic_library build_csharp_entry_point\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\t$(CXX) -std=c++11 -DBUILD_EXECUTABLE -I$(MONO_INCLUDE) $(srcdir)/csharp_support.C -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt\n\n#\t$(CXX) -std=c++11 -DBUILD_EXECUTABLE -I$(MONO_INCLUDE) -I$(top_srcdir)/src/util -I$(top_srcdir)/src/frontend/SageIII $(srcdir)/csharp_support.C -L$(MONO_LIBS) -lmono-2.0 -lpthread -ldl -lrt\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (9/22/2017): This is the compilation command that works for the example using roslyn from sandbox/roslyn/llnl\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/frontend/Experimental_General_Language_Support/ATerm/Makefile.am" : {
      "ObjectId" : "69f29d5c37e1587bc88513f28807622b9a0637b7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/frontend/Experimental_General_Language_Support/Makefile.am" : {
      "ObjectId" : "6ff0d56079940ba1f351f7e52c8dc9c11bca6e2b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/frontend/Experimental_Jovial_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "d7526dc1e5ce0dd63773bd11aa79c21bb3cdb714",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/23/2017): I'm not clear if we need makefile conditionals, since the directory is already conditionally processed in the parent directory.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile using a function that represents the API of the Jovial support.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/frontend/Experimental_Matlab_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "cee6bbc6a16afbafbbb494b5a47c4184ef72441e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include $(srcdir)/sage_support/Makefile_variables\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_VERBOSE = -rose:verbose 2\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Bison flags\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flex flags\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/frontend/Experimental_OpenFortranParser_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "86ea3be4e5a98f25eca37559e303ba935ae22dea",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (6/7/2013): I'm not clear if we need makefile conditionals, since the directory is already conditionally processed in the parent directory.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile using a function that represents the API of the Open Fortran Parser\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/frontend/Makefile.am" : {
      "ObjectId" : "d99cb0cbc7f4925fdc6309df4057a21e8b501aa7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Note that CXX and C are either both defined or both undefined.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rasmussen (01/21/2018): Adding general support for experimental languages\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Until we revisit this this, we want to include specific documentation that has been put into this directory.\n\n# Note that OpenFortranParser_SAGE_Connection has the newer work to support Fortran in ROSE.  This work\n\n# is part of a contract to add Fortran support to ROSE using the Open 64 compiler.  It supports a roughly\n\n# Fortran 77 level of details, however it uses IR nodes that have been extended or removed (in a few cases)\n\n# as part of adding the Fortran 2003 support using the Open Fortan Parser.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Header files for the binary partitioner must be installed under the Partitioner2 subdirectory and included as\n\n# <Partitioner2/*.h> to avoid conflicts with other headers.  Thus, we need to list them here instead of in the subdirectory.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/frontend/OpenFortranParser_SAGE_Connection/CMakeLists.txt" : {
      "ObjectId" : "1b6792b62a2e0882141d22c0991387046e65fd9a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Using FLEX_TARGET() would be cleaner, but the autoconf buildsystem\n\n# requires outfile=\"lex.yy.c\" in the .ll files.\n\n#\n\n# FLEX_TARGET(Preproc preproc-fortran.ll\n\n#   ${CMAKE_CURRENT_BINARY_DIR}/preproc-fortran.cc)\n\n# FLEX_TARGET(PreprocFixed preproc-fortran-fixed.ll\n\n#   ${CMAKE_CURRENT_BINARY_DIR}/preproc-fortran-fixed.cc)\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Compile using a function that represents the API of the Open Fortran Parser\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "########### next target ###############\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "########### install files ###############\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/frontend/OpenFortranParser_SAGE_Connection/Makefile.am" : {
      "ObjectId" : "ef7b34212b71e331fc890d37d3ee6d3610648156",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (11/3/2010): Include the jni.h file by specifying the location explicitly. Note that\n\n# on systems where the \"jni.h\" file is installed in the gcc includes\n\n# (e.g. at LLNL in: /nfs/apps/gcc/4.2.4/lib/gcc/x86_64-unknown-linux-gnu/4.2.4/include/jni.h)\n\n# this will not prevent the wrong jni.h from being included.\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection -I${top_builddir}/src/3rdPartyLibraries/fortran-parser\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (1/26/2017): Added to handled Clang 3.8 on Ubuntu system.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To build a similar library using libtool we indicate that we want an installed \n\n# library (which will then be made into a dynamic shared library).\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (10/21/2007): build (JJW: either empty or non-empty) lib file so that ROSE/src/Makefile.am need not be conditional on Fortran.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compile using a function that represents the API of the Open Fortran Parser\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (3/13/2010): Moved OFP specific files to 3rdPartyLibraries/fortran-parser\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (3/13/2010): Extract the required OFP source files needed for ROSE Fortran support.\n\n#OFP_SOURCE_FILES = \\\n#   $(OFP_DIR)/FortranParserAction.h \\\n#   $(OFP_DIR)/c_actions_jni.c \\\n#   $(OFP_DIR)/token.h \\\n#   $(OFP_DIR)/token.c \\\n#   $(OFP_DIR)/ActionEnums.h \\\n#   $(OFP_DIR)/jni_token_funcs.h \\\n#   $(OFP_DIR)/jni_token_funcs.c\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (3/13/2010): The OFP files are extracted when we build the sage_support.cpp file\n\n# (well before buildign the files here).  We don't want to specify the rules twice \n\n# since that is a problem for the \"make distcheck\" rule.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Make a rule so that --enable-only-c \"make dist\" will not have problems.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/frontend/PHPFrontend/CMakeLists.txt" : {
      "ObjectId" : "66127d636c13beb4dfb9bdca566b96c0cea3bd73",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/frontend/PHPFrontend/Makefile.am" : {
      "ObjectId" : "ed3ee0d19daa09d253ab3721bad155ab21bfe000",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This will cause the dynamic library to be built (as librosePHPFrontend.so)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/Partitioner2/CMakeLists.txt" : {
      "ObjectId" : "f4c42d1fec79c2bd3deb63958d6f17cb2519cad4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/frontend/Partitioner2/Makefile.am" : {
      "ObjectId" : "aae28464cd37f9d71baf63501f50f3de480e043b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Binary partitioner -- partitions instructions into basic blocks and\n\n# functions.  Header files must be installed under the Partitioner2\n\n# subdirectory and included as <Partitioner2/*.h> to avoid conflicts\n\n# with other headers, thus the header file list is in the parent\n\n# makefile.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/PythonFrontend/CMakeLists.txt" : {
      "ObjectId" : "e3111eaee755707005b4161bf1883fd381bd33e5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/frontend/PythonFrontend/Makefile.am" : {
      "ObjectId" : "3a3dbb8fb02050ff46194b583808f3cde97dd9dd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This will cause the dynamic library to be built (as librosePythonFrontend.so)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/CMakeLists.txt" : {
      "ObjectId" : "8a3c740d536a55337334f115c7fc838b69d66a06",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tps (04/01/2010) : Added  GENERATED_CODE_DIRECTORY_Cxx_Grammar subdirectory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##AS Commented out for simpler build\n\n###add_subdirectory(astFileIO)\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "########### next target ###############\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GENERATING THE ROSE PREPROCESSOR\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########### next target ###############\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#GENERATING the OpenMP parser\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#BISON generates a ompparser.H file and we need a ompparser.h file\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Mark these files as generated\n\n#SET_SOURCE_FILES_PROPERTIES(\n\n#    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/lex.yy.C\n\n#    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/ompparser.C\n\n#    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/ompparser.h\n\n#    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/omp-lex.yy.C\n\n#    PROPERTIES GENERATED 1\n\n#    )\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "########### next target ###############\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#omplexer.ll\n\n#ompparser.yy\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "########### install files ###############\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/frontend/SageIII/GENERATED_CODE_DIRECTORY_Cxx_Grammar/CMakeLists.txt" : {
      "ObjectId" : "1b223c46f78053de99a3764fc48c8e956871a8b4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use this as a way to turn off this optional use to build smaller files\n\n# so that we test this unter Linux before worring about use within Windows.\n\n# tps (01/04/10) : Added name for if condition\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define a custom command to call the code generator and generate source/header files\n\n# Generate the edg-sage connection using ROSETTA\n",
        "Line" : 653,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# depend on the code generator and input files\n",
        "Line" : 657,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# We need to copy the input files  to the build tree since \n\n# the code generator will output the generated source files into the same directory as where the input files locate\n",
        "Line" : 659,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# create this directory is needed since a few generated files will be put there        \n",
        "Line" : 664,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Need to define a mechanism to collect a list of all files (later).\n",
        "Line" : 671,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "src/frontend/SageIII/GENERATED_CODE_DIRECTORY_Cxx_Grammar/Makefile.am" : {
      "ObjectId" : "68312d67e38c690d46b8a064c2bf99593e06f742",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This directory support the separation of the generated files used for the ROSE IR\n\n# into smaller files (to avoid a few large 300K line files).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use a makefile include meachanism.  However I can't make this work!\n\n# include $(top_builddir)/src/frontend/SageIII/GENERATED_CODE_DIRECTORY_Cxx_Grammar/generatedFileList.inc\n\n# GENERATED_SOURCE = SgAddOp.C\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force ROSETTA to be run to generate the ROSE IR source code.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# nodist_libgeneratedIR_la_SOURCES = $(GENERATED_SOURCE)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (10/18/2007): Added AST_FILE_IO.h StorageClasses.h\n\n# Removed sla.h (redundant with location in src/util/commandlineProcessing/sla.h)\n\n# include_HEADERS = *.h\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\trm -rf libgeneratedIR.la\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (12/29/2009): It seems that I am forced to express the list of source files explicitly.\n\n# So it seems that this list will have to be modified if any new IR nodes are added.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/frontend/SageIII/Makefile.am" : {
      "ObjectId" : "48a16242198dd7b835b7df20a7635a738a814c0e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Don't use $(srcdir) in conjunction with [subdir-objects], otherwise\n\n# object files will be built in the source tree. Therefore, we need to\n\n# use relative paths.\n\n#\n\n#mptPartialRedundancyEliminationPath=$(srcdir)/partialRedundancyElimination#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 15,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# DQ (6/25/2011): Readded this directory so that we can support the older behavior as a default\n\n# although this will likely fail at least some of the nearly one hundred new name qualification tests.\n\n# DQ (6/22/2011): I think that the astHiddenTypeAndDeclarationLists directory is no longer required in ROSE.\n\n# SUBDIRS = astFileIO astMerge astFixup astPostProcessing sageInterface virtualCFG astTokenStream astHiddenTypeAndDeclarationLists astVisualization astFromString\n\n# SUBDIRS = astFileIO astMerge astFixup astPostProcessing sageInterface virtualCFG astTokenStream astVisualization astFromString\n\n# SUBDIRS = astFileIO astMerge astFixup astPostProcessing sageInterface virtualCFG astTokenStream astHiddenTypeAndDeclarationLists astVisualization astFromString includeDirectivesProcessing\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (12/29/2009): This is only used to handle generated code as smaller files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (5/2/2009): This supports the optimization of the new \n\n# Graph IR nodes (makes about 25% improvement, I think).\n\n# ROSE_OPTIMIZATION_LEVEL = -O3\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE_VERBOSE = -rose:verbose 2\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Liao, 3/31/2009, moved the OpenMP parser here\n\n#Liao, 10/27/2008. I decide to parse OpenMP pragma string here\n\n# Bison flags\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Flex flags\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# avoid unused Flex functions which are automatically generated\n\n#CXXFLAGS+= -DYY_NO_TOP_STATE -DYY_NO_POP_STATE $(ROSE_OPTIMIZATION_LEVEL)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (11/14/2011): Add debug support when doing selective frontend development.\n\n# This cause the link time to incread about 4X.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# CXXFLAGS += -g\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# omplexer.cc needs a header generaetd from ompparser.yy\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Force sage.docs to be make by default \n\n# (if sage.docs.in is modified)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES)\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/src/frontend/EDG_SAGE_Connection -I$(top_srcdir)/src/frontend/EDG/EDG_3.3/src $(WAVE_INCLUDES)\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/src/frontend/EDG_SAGE_Connection -I$(top_srcdir)/src/frontend/EDG/EDG_3.3/src\n\n# JJW 6-2-2008: We shouldn't be using anything from EDG outside these two directories\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) # -I$(top_srcdir)/src/frontend/EDG_SAGE_Connection -I$(top_srcdir)/src/frontend/EDG/EDG_3.3/src\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (3/13/2010): sage_support.cpp requires the OFP fortran source files to be made available.\n\n# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Copy the original lex file and the C++ file generated from it to the distribution\n\n# so that users don't have to find an appropriate version of lex (flex).  Flex should\n\n# be used by developers so that ANSI C code is generated for g++.  This is something\n\n# for developers to worry about in the generation of sufficently portable distributions.\n\n# EXTRA_DIST = preproc.lex preproc.C sageClasses.docs sage.docs.in docs\n\n# EXTRA_DIST = preproc.lex preproc.C astGraphTemplate.C docs\n\n# EXTRA_DIST = preproc.ll docs rtiHelpers.h attributeListMap.h\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (9/29/2009): Renamed preproc.ll to preproc-c.ll in SVN.\n\n# This will hopefull avoid a linking problem where multiple files\n\n# are called preproc.o (from here and from EDG).\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Some source code is generated (call make in ROSE/src/ROSETTA/src to generate these files)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# DQ (4/23/2009): This file depends upon other files\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (2/15/2010): This fails in Hudson tests of ROSE compiling ROSE for code generation, but I can't \n\n# get it to fail in my own tests.  Skip it for now and see if there are more of these cases.\n\n# attachPreprocessingInfo.C\n\n# if !ROSE_USING_ROSE_CODE_GENERATION\n\n#    libsage3Sources += attachPreprocessingInfo.C\n\n# endif\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# $(GENERATED_SOURCE) is handled separately\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (5/27/2007): Files moved or removed\n\n#   generateAST.C\n\n#   AstAttributeDOT.C\n\n#   astGraph.C\n\n#   insert.C\n\n#   stripWrapper.C\n\n#   grammarBaseClass.C\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (12/16/2008): Removed as part of rewrite of CPP and comment handling.\n\n#   attach_all_info.C \n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# libsage3_la_SOURCES = $(libsage3Sources) preproc.ll rose_paths.h omplexer.ll ompparser.yy\n\n# libsage3_la_SOURCES = $(libsage3Sources) preproc.ll omplexer.ll ompparser.yy\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (3/8/2009): I think that the dependence upon $(top_builddir)/rose_config.h \n\n# is what was forcing a lot of files to be compiled after reruning configure.\n\n# nodist_libsage3_la_SOURCES = $(GENERATED_SOURCE) $(top_builddir)/rose_config.h\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (6/25/2011): Readded this directory so that we can support the older behavior as a default\n\n# although this will likely fail at least some of the nearly one hundred new name qualification tests.\n\n# DQ (6/24/2011): Removed now the the name qualification support in a part of src/backend/unparser.\n\n# astHiddenTypeAndDeclarationLists/libastHiddenTypeAndDeclarationLists.la \n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# TPS (11Feb2009): PCH only works when multithreading is off.\n\n# We should not use PCH and MPI together.\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# DQ (2/11/2009): This is part of the support for Precompiled Headers (PCH) using GNU g++\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\tDQ (2/10/2009): Rush for the off switch on precompiled header files, comment out to skip use of PCH.\n\n#       TPS (23 Feb 2009): Hardcoded -fpic and -DPIC for now because \n\n#       for some reason it is used by most files although not specified on configure\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# default, do nothing.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# DQ (10/18/2007): Added AST_FILE_IO.h StorageClasses.h\n\n# Removed sla.h (redundant with location in src/util/commandlineProcessing/sla.h)\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# DQ (4/5/2009): Moved rose_paths.h to src/util (where the source file is located).\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# DQ (9/9/2007): Put C++_include_files.h back into place\n\n# since it is a convinient mechanism to handle included headers \n\n# in the Cxx_Grammar.C file (a ROSETTA generated file).\n\n# DQ (5/27/2007): Files moved or removed\n\n# grammarBaseClass.h \n\n# AstAttributeDOT.h\n\n# astGraph.h\n\n# astGraphTemplate.C\n\n# C++_include_files.h\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "src/frontend/SageIII/astFileIO/CMakeLists.txt" : {
      "ObjectId" : "a1cb7b6043b1f77a4a5c27da21a2f89d7efc7d52",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install(FILES  AstSpecificDataManagingClass.h DESTINATION ${INCLUDE_INSTALL_DIR})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astFileIO/Makefile.am" : {
      "ObjectId" : "fbe1ca0bcfa38514b3cbc87ca21b60e773eba426",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# noinst_LTLIBRARIES = libastFileIO.la\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (10/18/2007): These have been moved to the src/frontend/SageIII directory\n\n# to provde greater parallelism to the make -jn parallel make feature.\n\n# libastFileIO_la_SOURCES  =  AST_FILE_IO.C StorageClasses.C\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# AST_FILE_IO.lo: StorageClassMemoryManagement.h \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file is generated\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    AST_FILE_IO.h\n\n#    StorageClasses.h\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (3/28/2006): Remove all generated code\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/frontend/SageIII/astFixup/CMakeLists.txt" : {
      "ObjectId" : "afd19c84b6ffb26b68053343c9864fd936af940e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astFixup/Makefile.am" : {
      "ObjectId" : "dc0ddda29b9517a152ccf0d659a058ead9163346",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/frontend/SageIII/astFromString/CMakeLists.txt" : {
      "ObjectId" : "872eda85b9cc0139cd4dfb95d54439b44993ce33",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/frontend/SageIII/astFromString/Makefile.am" : {
      "ObjectId" : "bd816441cd6479ef423284cb8805be3201ca455d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# EXTRA_DIST = AstFromString.h ParserBuilder.hpp ParserBuilder.tpp\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astHiddenTypeAndDeclarationLists/CMakeLists.txt" : {
      "ObjectId" : "669539e3dfd3c0a0425350494299e4ef043a34f5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astHiddenTypeAndDeclarationLists/Makefile.am" : {
      "ObjectId" : "1e0057020f8218d0b5206308925c2e787684ae92",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (6/25/2011): We want to include all of these for a while to provide a window of transition for users.\n\n# DQ (6/22/2011): I think all of these files are no longer required in ROSE\n\n# libastHiddenTypeAndDeclarationLists_la_SOURCES = HiddenList.C  newHiddenList.C  HiddenList_Intersection.C HiddenList_Output.C NamespacesAndClassTraversal.C\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HiddenList_main.C  HiddenList_Output.C\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (6/22/2011): I think all of these files are no longer required in ROSE.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/frontend/SageIII/astMerge/CMakeLists.txt" : {
      "ObjectId" : "36f75a17925a5d0b3d1589ae6bad771963996bb7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astMerge/Makefile.am" : {
      "ObjectId" : "4ef94480ddf0287464e07ca2b927f4550b64428f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Some source code is generated (call make in ROSE/src/ROSETTA/src to generate these files)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astPostProcessing/CMakeLists.txt" : {
      "ObjectId" : "5e80fbd5c8987ca82b14bc91aa385c19495515c4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astPostProcessing/Makefile.am" : {
      "ObjectId" : "f0e898bcebac63b18276da27c235a6e72bc8997f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/17/2011): Alternative header file dependency support.\n\n# If this is required we can use this as a way of supporting the header file\n\n# dependency tailored to exclude system headers.  But it is a more complex form of what is alreay\n\n# supported more directly via automake.  So we have decided to use the automake version for now.\n\n# Specification of where we put the *.P files (the comiler will build the *.d files there by default).\n\n# DQ (10/16/2011): Added support for makefile dependences of header files (requested by Rice).\n\n# Need to get this into the compileer command line to generate the *.d file in the .libs directory.\n\n# AM_CPPFLAGS += -MMD\n\n# DEPEND_FILE_DIR = .libs\n\n# This is a specific variable name used by either Make (or automake generated makefiles).\n\n# DEPDIR = $(DEPEND_FILE_DIR)\n\n# dependeFileName = $(DEPEND_FILE_DIR)/$(*F)\n\n# $(DEPEND_FILE_DIR)/%.P : %.lo\n\n#\tsed -e 's/.libs\\///'  -e 's/o:/lo:/' < $(dependeFileName).d >> $(dependeFileName).P;\n\n# -include $(libastPostProcessing_la_SOURCES:%.C=$(DEPEND_FILE_DIR)/%.P)\n\n# clean-dep:\n\n#\trm -rf $(DEPEND_FILE_DIR)/*.d $(DEPEND_FILE_DIR)/*.P \n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astTokenStream/CMakeLists.txt" : {
      "ObjectId" : "d27e0e17b9632672201d74c275fdd725b58fa0b5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astTokenStream/Makefile.am" : {
      "ObjectId" : "eb8b36904518cdf2302014f79d5095236c4fc81a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/27/2013): Commented out for now from this Makefile.am (experimenting with replacing with new implementation independent of WAVE).\n\n# libastTokenStream_la_SOURCES      = createMap.C  doCompleteMapping.C  linearizeAST.C unparseMacro.C\n\n# libastTokenStream_la_LIBADD       = \n\n# libastTokenStream_la_DEPENDENCIES = \n\n# include_HEADERS = createMap.h  doCompleteMapping.h  linearizeAST.h unparseMacro.h\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (10/27/2013): This is a new definition of libastTokenStream\n\n# noinst_LTLIBRARIES = libastTokenStream.la\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (10/27/2013): This is the new support for token stream mapping.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (10/27/2013): These are required for the older tests in tests/nonsmoke/functional/roseTests/astTokenStreamTests\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Leave these header file reference in the Makefile.am (so we will pass the policy tests).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/frontend/SageIII/astVisualization/CMakeLists.txt" : {
      "ObjectId" : "5080c1fa1c01aa0e4e78457cb003647168cec391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/astVisualization/Makefile.am" : {
      "ObjectId" : "a7a0aa6deadc0e41f902320623b9de789bdf2061",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (2/26/2009): Added copyGraph.[hC], also note that copyGraph.C has\n\n# a dependence on a TCLSH script that is located in the scripts directory.\n\n# libastVisualization_la_SOURCES = astGraph.C AstAttributeDOT.C wholeAST.C copyGraph.C walrus.C intermediateRepresentationNodeGraphs.C\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   colorFilesTraversal.C  colorMemoryPoolTraversal.C \\\n#   customAstDOTGeneration.C  customAstDOTGenerationData.C \\\n#   customMemoryPoolDOTGeneration.C  customMemoryPoolDOTGenerationData.C\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/frontend/SageIII/includeDirectivesProcessing/CMakeLists.txt" : {
      "ObjectId" : "c3c85452f047978a1693c1dcb9759a6e1f06b5f9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/includeDirectivesProcessing/Makefile.am" : {
      "ObjectId" : "d1c5c63b4e35bae6491c1689a8be38b15cfd06b6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# EXTRA_DIST = CMakeLists.txt\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/sageInterface/CMakeLists.txt" : {
      "ObjectId" : "689e3a45393e1e2981b22cbd8112695ba08180fd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/frontend/SageIII/sageInterface/Makefile.am" : {
      "ObjectId" : "2d9930e0c19c2804dace6e59207eaa362e55bf1f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#     highLevelInterface.C\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#     buildSetOfFrontendSpecificNodes.C\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#     highLevelInterface.h\n\n#     loopHelpers.h\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if ROSE_BUILD_BINARY_ANALYSIS_SUPPORT\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# endif\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#libsageInterface.la: $(libastFixup_la_OBJECTS) $(libastFixup_la_DEPENDENCIES)\n\n#\t-rm -f $@\n\n#\t$(CXX_SHARED_LIB_UPDATE) $@ $(libastFixup_la_OBJECTS) $(libastFixup_la_LIBADD)\n\n#\ttest -f $@ || exit 1\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# noinst_PROGRAMS = testForBug\n\n# testForBug_SOURCES = testForBug.C\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/frontend/SageIII/virtualCFG/CMakeLists.txt" : {
      "ObjectId" : "35ab0e8a127fca88a52c8f32eb018150d3f76670",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/SageIII/virtualCFG/Makefile.am" : {
      "ObjectId" : "05987e1da418b7b8176d2735215c681794eeda84",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Some source code is generated (call make in ROSE/src/ROSETTA/src to generate these files)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (10/29/2010): virtualBinCFG.h must be released as a header file since the function \n\n# declarations in SgAsmStatement require it in the generated Cxx_Grammar.h file.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/frontend/X10_ROSE_Connection/CMakeLists.txt" : {
      "ObjectId" : "10c02ac4db70e6fef9afb5d6aa3340d87c034e7d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontend/X10_ROSE_Connection/Makefile.am" : {
      "ObjectId" : "3de373de1c404d2af4a0e52bcf0a7b67cb7daca5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# BOOST_CPPFLAGS is included because that's where the -pthread switch is located if user desires it.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/BinaryAnalysis/CMakeLists.txt" : {
      "ObjectId" : "6ccfcf04d8056f432a45126a221767db519b4162",
      "LastModified" : "2019-04-16T16:13:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/BinaryAnalysis/Makefile.am" : {
      "ObjectId" : "55acabd8fdbba578bc67ef979e74207dc7171740",
      "LastModified" : "2019-04-16T16:14:12Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AUTOMAKE_OPTIONS = subdir-objects\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/CMakeLists.txt" : {
      "ObjectId" : "076fd05d388bf7e3d73d019d08f1f21e7d57ef2f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/Makefile.am" : {
      "ObjectId" : "06074eff5add5214224c60938a4ce2c88efc0226",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/include/KLT/Core/Makefile.am" : {
      "ObjectId" : "f6a31dcda3afbf3b908a56462977cc883baa51be",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/include/KLT/DLX/Makefile.am" : {
      "ObjectId" : "df6ed371e21e16434d2c4d17ebc747f88688151b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/include/KLT/MDCG/Makefile.am" : {
      "ObjectId" : "9bfb971680008640e124ebe7641318f88c8c8740",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/include/KLT/RTL/Makefile.am" : {
      "ObjectId" : "6a3fa8eb407b764791fc647d0222386439497778",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/lib/core/Makefile.am" : {
      "ObjectId" : "3b17a47c10275e156e2a000bab3980009b174ce1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/lib/mdcg/Makefile.am" : {
      "ObjectId" : "bca7986683aec437bc4dd2adcdf980e2dccf0df1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/KLT/lib/rtl/Makefile.am" : {
      "ObjectId" : "3531174e195526f024b96d298800640e667d8cc7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MDCG/Makefile.am" : {
      "ObjectId" : "298a8daf96504b9417c13f402ac04a3dbe22baf9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MDCG/include/MDCG/Model/Makefile.am" : {
      "ObjectId" : "8b9c1593cc9589202e006e45e5f76e4193959f5e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MDCG/include/MDCG/Tools/Makefile.am" : {
      "ObjectId" : "6287bbd62da586aa010c632502afcbe18833cb60",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MDCG/lib/model/Makefile.am" : {
      "ObjectId" : "92df66bc7c5c53301fb59854e6168d4b5b4ce2fe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MDCG/lib/tools/Makefile.am" : {
      "ObjectId" : "28d4b10496aab77d9d9b0c9a5fd378cda8dc2d43",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MFB/Makefile.am" : {
      "ObjectId" : "b73480e488515cd261c7fcaa4bdd533534c314c5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MFB/include/MFB/KLT/Makefile.am" : {
      "ObjectId" : "f79508ba6f3c3b3b939fd51aef6aa596aa58739c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MFB/include/MFB/Makefile.am" : {
      "ObjectId" : "1fd5dc528490ef2c90dbb25df5ff1478ad476e7c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MFB/include/MFB/Sage/Makefile.am" : {
      "ObjectId" : "a512aaa2f1872d9b840b275ec0620b05cd8d67a2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MFB/lib/klt/Makefile.am" : {
      "ObjectId" : "43b6c23c7cfc37a31fae655538c4fa4cd5733d2b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MFB/lib/sage/Makefile.am" : {
      "ObjectId" : "5e49383ccc2679ad2b3fcee2f7f50c645c664acc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/MFB/lib/utils/Makefile.am" : {
      "ObjectId" : "2b5e0acc57b3371ab69ed3333e63568cdf84b86a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/Makefile.am" : {
      "ObjectId" : "6b2c4fe244ddaad78ced8a297529cb55d67cf984",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Non-recursive Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Subdirectories\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Don't use $(srcdir) in conjunction with [subdir-objects], otherwise\n\n# object files will be built in the source tree. Therefore, we need to\n\n# use relative paths.\n\n#\n\n#mptPartialRedundancyEliminationPath=$(srcdir)/partialRedundancyElimination#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n",
        "Line" : 44,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "6" : {
        "Text" : "#\n",
        "Line" : 46,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : "#\n",
        "Line" : 47,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "#\n",
        "Line" : 48,
        "CharPositionInLine" : 32
      },
      "9" : {
        "Text" : "#\n",
        "Line" : 49,
        "CharPositionInLine" : 28
      },
      "10" : {
        "Text" : "#\n",
        "Line" : 50,
        "CharPositionInLine" : 44
      },
      "11" : {
        "Text" : "#\n",
        "Line" : 51,
        "CharPositionInLine" : 22
      },
      "12" : {
        "Text" : "#\n",
        "Line" : 52,
        "CharPositionInLine" : 26
      },
      "13" : {
        "Text" : "#\n",
        "Line" : 53,
        "CharPositionInLine" : 20
      },
      "14" : {
        "Text" : "#\n",
        "Line" : 54,
        "CharPositionInLine" : 48
      },
      "15" : {
        "Text" : "#\n\n# DQ (10/29/2010): We have to include \"binaryAnalyses\" directory so that its header files\n\n# will be installed by \"make install\", even with language only options are used.\n\n#\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (12/2/2016): These directories have poorly formated Makefile.am files have\n\n# and are a source of portability problem on Ubuntu systems (because they overload \n\n# the CXXFLAGS makefile variable).\n\n#       MFB MDCG KLT\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Library: programTransformation.la\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# astProcessing _la_LIBADD = $(CXX_TEMPLATE_OBJECTS)\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "src/midend/abstractHandle/CMakeLists.txt" : {
      "ObjectId" : "c1a37d54e7cd77ca08dce1e8279964da9df521aa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pei-Hung (07/28/16) loopAdapter.cpp is only in EXTRA_DIST for Autotool\n\n# Remove it from add_library due to return types covariant\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/midend/abstractLayer/CMakeLists.txt" : {
      "ObjectId" : "2ad7c88ca8663edf1ba4f33faf50ea4214863c35",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/abstractMemoryObject/CMakeLists.txt" : {
      "ObjectId" : "38c7d3d2f202e45e26cb1c4e78185b163bbe9169",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/astDiagnostics/CMakeLists.txt" : {
      "ObjectId" : "e80ad8f7b2b3e4bd8a0e329bf10764a16cfa2ed4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/astMatching/CMakeLists.txt" : {
      "ObjectId" : "44ac0237aeae4cfe293e9e384e93180c9fca2546",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/astProcessing/CMakeLists.txt" : {
      "ObjectId" : "1373dfb1fba5eaa3f11b15e366d18799d6951fdc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#tps commented out AstSharedMemoryParallelProcessing.h for Windows\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "src/midend/astQuery/CMakeLists.txt" : {
      "ObjectId" : "5277100c6ffe1d132f113641bdf65ec87e900d31",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libquerySources = \\\n\n#     nodeQuery.C    nodeQueryInheritedAttribute.C    \\\n\n#     booleanQuery.C booleanQueryInheritedAttribute.C \\\n\n#     nameQuery.C    nameQueryInheritedAttribute.C    \\\n\n#     numberQuery.C  numberQueryInheritedAttribute.C  \\\n\n#     astQuery.C     astQueryInheritedAttribute.C\n\n#\n\n## queryVariant.C\n\n#\n\n#nodeQuery.o : nodeQuery.C queryVariant.C\n\n#\n\n## lib_LTLIBRARIES = libquery.a\n\n## libquery_a_SOURCES  = $(libquerySources)\n\n#\n\n#noinst_LTLIBRARIES = libquery.la\n\n#libquery_la_SOURCES = $(libquerySources)\n\n#\n\n#libquery_la_DEPENDENCIES = nodeQuery.o\n\n#\n\n#include_HEADERS = \\\n\n#     nodeQuery.h nodeQueryInheritedAttribute.h \\\n\n#     booleanQuery.h booleanQueryInheritedAttribute.h \\\n\n#     nameQuery.h nameQueryInheritedAttribute.h \\\n\n#     numberQuery.h numberQueryInheritedAttribute.h \\\n\n#     astQuery.h astQueryInheritedAttribute.h \\\n\n#     roseQueryLib.h\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n## Note: queryVariant.C is included in nodeQuery.C\n\n#EXTRA_DIST = queryVariant.C QueryLib.docs \n\n#\n\n## A way to add additional error checking at compile time\n\n## ROSE_WARNINGS = -Wall -W -Wswitch-enum -Wswitch-default -Wswitch\n\n## GXX_COMPILER_REPORT = -fmem-report -ftime-report\n\n## GXX_COMPILER_REPORT =\n\n## AM_CXXFLAGS = $(ROSE_WARNINGS) $(GXX_COMPILER_REPORT)\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/astRewriteMechanism/CMakeLists.txt" : {
      "ObjectId" : "4cba28cf1d12264425ecb63c166640105a553baf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/astUtil/CMakeLists.txt" : {
      "ObjectId" : "77b9ef14d7dfe30192d314ab0d5911de79e5705b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/astUtil/annotation/CMakeLists.txt" : {
      "ObjectId" : "e04b7e026606cfff78ec232250ee879071ddcc7b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I$(srcdir)/../astInterface -I$(srcdir)/../symbolicVal -I$(srcdir)/../astSupport -I$(top_srcdir)/src/util -I$(top_srcdir)/src/util/support\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libannotationSources = \\\n\n#   AnnotCollect.C      AnnotExpr.C  OperatorAnnotation.C   TypeAnnotation.C \\\n\n#   AnnotDescriptors.C  AnnotIO.C    OperatorDescriptors.C\n\n#\n\n## lib_LTLIBRARIES = libannotation.a\n\n## libannotation_a_SOURCES = $(libannotationSources)\n\n#\n\n#noinst_LTLIBRARIES = libannotation.la\n\n#libannotation_la_SOURCES = $(libannotationSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = \\\n\n#   AnnotCollect.h      AnnotExpr.h  AnnotStmt.h           OperatorDescriptors.h \\\n\n#   AnnotDescriptors.h  AnnotIO.h    OperatorAnnotation.h  TypeAnnotation.h \\\n\n#   CPPAnnotation.h\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/astUtil/astInterface/CMakeLists.txt" : {
      "ObjectId" : "9aa7b4b8379e86a52ae37224bf0db3ee8d591a16",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(top_srcdir)/src/util -I$(top_srcdir)/src/util/support\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libastInterfaceSources = AstInterface.C CPPAstInterface.C\n\n#\n\n## lib_LTLIBRARIES = libastInterface.a\n\n## libastInterface_a_SOURCES  = $(libastInterfaceSources)\n\n#\n\n#noinst_LTLIBRARIES = libastInterface.la\n\n#libastInterface_la_SOURCES = $(libastInterfaceSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  AstInterface.h  CPPAstInterface.h AstInterface_ROSE.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/astUtil/astSupport/CMakeLists.txt" : {
      "ObjectId" : "7f99f829023c5b6789445396d345c062144208a4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I$(srcdir)/../astInterface -I$(srcdir)/../symbolicVal -I$(top_srcdir)/src/util -I$(top_srcdir)/src/util/support\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libastSupportSources = ProcessAstTree.C  StmtInfoCollect.C\n\n#\n\n## lib_LTLIBRARIES = libastSupport.a\n\n## libastSupport_a_SOURCES  = $(libastSupportSources)\n\n#\n\n#noinst_LTLIBRARIES = libastSupport.la\n\n#libastSupport_la_SOURCES = $(libastSupportSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  AnalysisInterface.h  ProcessAstTree.h  StmtInfoCollect.h LoopInfoInterface.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/astUtil/symbolicVal/CMakeLists.txt" : {
      "ObjectId" : "a647492e7d2abe7371498c2a084a3f8bf4a83d46",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I$(srcdir)/../astInterface -I$(top_srcdir)/src/util -I$(top_srcdir)/src/util/support\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libsymbolicValSources = \\\n\n#   SymbolicBound.C  SymbolicExpr.C  SymbolicFind.C  SymbolicOperator.C \\\n\n#   SymbolicUnwrapCond.C SymbolicVal.C \n\n#\n\n## lib_LTLIBRARIES = libsymbolicVal.a\n\n## libsymbolicVal_a_SOURCES  = $(libsymbolicValSources)\n\n#\n\n#noinst_LTLIBRARIES = libsymbolicVal.la\n\n#libsymbolicVal_la_SOURCES = $(libsymbolicValSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  SymbolicMultiply.h  SymbolicPlus.h    SymbolicVal.h \\\n\n#                   SymbolicExpr.h  SymbolicSelect.h  SymbolicBound.h \n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/CFG/CMakeLists.txt" : {
      "ObjectId" : "c040065d823ecebfa719f7d89d5b23dd90a56512",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(srcdir)/../OAWrap -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/astInterface\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libCFGSources =  CFG_ROSE.C CFG_OA.C \n\n#\n\n## lib_LTLIBRARIES = libCFG.a\n\n## libCFG_a_SOURCES  = $(libCFGSources)\n\n#\n\n#noinst_LTLIBRARIES = libCFG.la\n\n#libCFG_la_SOURCES = $(libCFGSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  CFG.h CFGImpl.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/CFG/Makefile.am" : {
      "ObjectId" : "a697d5ed323bd5519301a4e224c13a81c675c09a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/11/2010): ROSE currently fails to generate code for this CFG_OA.C file (it does however compile for analysis only).\n\n# Also it does not appear that ROSE requires this CFG_OA.C file, so I have removed it.\n\n# libCFGSources =  CFG_ROSE.C CFG_OA.C \n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\trm -rf ./Templates.DB ./ii_files ./ti_files ./cxx_templates\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\trm -rf ./Templates.DB\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/CMakeLists.txt" : {
      "ObjectId" : "16c1ce91ec1fe17329fbb543d1672dd73302b922",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DQ (11/25/2009) Comment out under Windows.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programAnalysis/CallGraphAnalysis/CMakeLists.txt" : {
      "ObjectId" : "f7a07f84c0087588b66985612c66ea9588ca417c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) $(BOOST_CPPFLAGS) \n\n#libCallGraphSources =  CallGraph.C CallGraphDB.C ClassHierarchyGraph.C\n\n#\n\n#noinst_LTLIBRARIES = libCallGraph.la\n\n#libCallGraph_la_SOURCES = $(libCallGraphSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = CallGraph.h ClassHierarchyGraph.h\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/CallGraphAnalysis/Makefile.am" : {
      "ObjectId" : "9fcdf19b36d8f467389d475e988f1c9b893acc01",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\trm -rf ./Templates.DB ./ii_files ./ti_files ./cxx_templates\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\trm -rf ./Templates.DB\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/midend/programAnalysis/EditDistance/CMakeLists.txt" : {
      "ObjectId" : "812733f98ea23e3df97f92cf11c79af9bd6b5fcf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/Makefile.am" : {
      "ObjectId" : "d42968dae546841160da9e6081cf15b30568e254",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Non-recursive Makefile\n\n# dominatorTreesAndDominanceFrontiers is not utilized (config/support-rose.m4 does not\n\n# generate a Makefile for it)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AUTOMAKE_OPTIONS = subdir-objects\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (10/7/2015): We don't want this to depend on this variable which is about what \n\n# backend compiler is used more than what compiler is used to compile ROSE itself.\n\n#if ROSE_USING_GCC_VERSION_LATER_4_6\n\n#SUBDIRS = staticSingleAssignment ssaUnfilteredCfg\n\n#else\n\n#SUBDIRS = staticSingleAssignment ssaUnfilteredCfg systemDependenceGraph\n\n#endif\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (4/3/2017): Boost 1.62 is not working due to internal Boost header files issues (Boost group suggestes using alternative version).\n\n#SUBDIRS = staticSingleAssignment ssaUnfilteredCfg\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SUBDIRS += staticSingleAssignment\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# SUBDIRS += staticSingleAssignment ssaUnfilteredCfg\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# SUBDIRS += ssaUnfilteredCfg\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###############################################################################\n\n# Subdirectory specifics\n\n# TOO (01/26/11): relative paths must be updated for each propagation upward\n\n# in the flattening of Makefiles\n\n#\n\n# Caution: include path cannot contain variable,\n\n#>..e.g. include $(cxxCodeGenerationPath)/Makefile_variables\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n",
        "Line" : 55,
        "CharPositionInLine" : 56
      },
      "9" : {
        "Text" : "#\n",
        "Line" : 56,
        "CharPositionInLine" : 66
      },
      "10" : {
        "Text" : "#\n",
        "Line" : 57,
        "CharPositionInLine" : 52
      },
      "11" : {
        "Text" : "#\n",
        "Line" : 58,
        "CharPositionInLine" : 24
      },
      "12" : {
        "Text" : "#\n",
        "Line" : 59,
        "CharPositionInLine" : 52
      },
      "13" : {
        "Text" : "#\n",
        "Line" : 60,
        "CharPositionInLine" : 64
      },
      "14" : {
        "Text" : "#\n",
        "Line" : 61,
        "CharPositionInLine" : 46
      },
      "15" : {
        "Text" : "#\n",
        "Line" : 62,
        "CharPositionInLine" : 68
      },
      "16" : {
        "Text" : "#\n",
        "Line" : 63,
        "CharPositionInLine" : 52
      },
      "17" : {
        "Text" : "#\n",
        "Line" : 64,
        "CharPositionInLine" : 48
      },
      "18" : {
        "Text" : "#\n",
        "Line" : 65,
        "CharPositionInLine" : 30
      },
      "19" : {
        "Text" : "#\n",
        "Line" : 66,
        "CharPositionInLine" : 40
      },
      "20" : {
        "Text" : "#\n",
        "Line" : 67,
        "CharPositionInLine" : 54
      },
      "21" : {
        "Text" : "#\n",
        "Line" : 68,
        "CharPositionInLine" : 74
      },
      "22" : {
        "Text" : "#\n\n#\n",
        "Line" : 69,
        "CharPositionInLine" : 50
      },
      "23" : {
        "Text" : "#\n",
        "Line" : 71,
        "CharPositionInLine" : 42
      },
      "24" : {
        "Text" : "###############################################################################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Taken from midend/programAnalysis/annotationLanguageParser\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##################################################################\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (10/7/2015): We don't want this to depend on this variable which is about what \n\n# backend compiler is used more than what compiler is used to compile ROSE itself.\n\n# if ROSE_USING_GCC_VERSION_LATER_4_6\n\n# libprogramAnalysis_la_LIBADD = staticSingleAssignment/libSSA.la ssaUnfilteredCfg/libSSA_UnfilteredCfg.la\n\n# else\n\n# libprogramAnalysis_la_LIBADD = staticSingleAssignment/libSSA.la ssaUnfilteredCfg/libSSA_UnfilteredCfg.la systemDependenceGraph/libSDG.la\n\n# endif\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (4/3/2017): Boost 1.62 is a problem and it is suggested that people not use it.  We disable some minimal parts of ROSE to address this.\n\n# libprogramAnalysis_la_LIBADD = staticSingleAssignment/libSSA.la ssaUnfilteredCfg/libSSA_UnfilteredCfg.la\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\trm -rf Templates.DB ii_files ti_files cxx_templates\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\trm -rf Templates.DB\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "src/midend/programAnalysis/OAWrap/CMakeLists.txt" : {
      "ObjectId" : "434ac185f78aa66c3c3dd0860c6e85423a4398ce",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES =  $(ROSE_INCLUDES) -I$(top_srcdir)/src/midend/programAnalysis/OAWrap -I$(top_srcdir)/src/midend/programAnalysis\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libOAWrapSources = OAWrap.C SAGE2OA.C \n\n#\n\n## lib_LTLIBRARIES = libOAWrap.a\n\n## libOAWrap_a_SOURCES  = $(libOAWrapSources)\n\n#\n\n#noinst_LTLIBRARIES = libOAWrap.la\n\n#libOAWrap_la_SOURCES = $(libOAWrapSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  OAWrap.h SAGE2OA.h OAConfig.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/OAWrap/Makefile.am" : {
      "ObjectId" : "f266031b19e3d1c0433105341c1ff1a8d2ebbff7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/10/2010): ROSE currently fails to generate code for this file (it does however compile for analysis only).\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#libOAWrapSources = SAGE2OA.C \n\n#if !ROSE_USING_ROSE_CODE_GENERATION\n\n#   libOAWrapSources += OAWrap.C\n\n#endif\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programAnalysis/OpenAnalysis/CFG/Makefile" : {
      "ObjectId" : "6176a56e87f5e43aeb34c9bfc93501fb13f6f381",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $Id: Makefile,v 1.1 2004/07/07 10:26:34 dquinlan Exp $\n\n# -*-makefile-*-\n\n## * BeginRiceCopyright *****************************************************\n\n## \n\n## Copyright ((c)) 2002, Rice University \n\n## All rights reserved.\n\n## \n\n## Redistribution and use in source and binary forms, with or without\n\n## modification, are permitted provided that the following conditions are\n\n## met:\n\n## \n\n## * Redistributions of source code must retain the above copyright\n\n##   notice, this list of conditions and the following disclaimer.\n\n## \n\n## * Redistributions in binary form must reproduce the above copyright\n\n##   notice, this list of conditions and the following disclaimer in the\n\n##   documentation and/or other materials provided with the distribution.\n\n## \n\n## * Neither the name of Rice University (RICE) nor the names of its\n\n##   contributors may be used to endorse or promote products derived from\n\n##   this software without specific prior written permission.\n\n## \n\n## This software is provided by RICE and contributors \"as is\" and any\n\n## express or implied warranties, including, but not limited to, the\n\n## implied warranties of merchantability and fitness for a particular\n\n## purpose are disclaimed. In no event shall RICE or contributors be\n\n## liable for any direct, indirect, incidental, special, exemplary, or\n\n## consequential damages (including, but not limited to, procurement of\n\n## substitute goods or services; loss of use, data, or profits; or\n\n## business interruption) however caused and on any theory of liability,\n\n## whether in contract, strict liability, or tort (including negligence\n\n## or otherwise) arising in any way out of the use of this software, even\n\n## if advised of the possibility of such damage. \n\n## \n\n## ******************************************************* EndRiceCopyright *\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Best seen in 120-column wide window (or print in landscape mode).\n\n#---------------------------------------------------------------------------------------------------------------------\n\n# This file is part of Mint.\n\n# Arun Chauhan (achauhan@cs.rice.edu), Dept of Computer Science, Rice University, 2000, 2001.\n\n#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This Makefile must be invoked from the root Makefile\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n\n# file related definitions\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n\n# compilation rules\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# header file dependencies\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/midend/programAnalysis/OpenAnalysis/CallGraph/Makefile" : {
      "ObjectId" : "c166512823dc146d0b3f140817a2d2abd3aa4902",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $Id: Makefile,v 1.1 2004/07/07 10:26:34 dquinlan Exp $\n\n# -*-makefile-*-\n\n## * BeginRiceCopyright *****************************************************\n\n## \n\n## Copyright ((c)) 2002, Rice University \n\n## All rights reserved.\n\n## \n\n## Redistribution and use in source and binary forms, with or without\n\n## modification, are permitted provided that the following conditions are\n\n## met:\n\n## \n\n## * Redistributions of source code must retain the above copyright\n\n##   notice, this list of conditions and the following disclaimer.\n\n## \n\n## * Redistributions in binary form must reproduce the above copyright\n\n##   notice, this list of conditions and the following disclaimer in the\n\n##   documentation and/or other materials provided with the distribution.\n\n## \n\n## * Neither the name of Rice University (RICE) nor the names of its\n\n##   contributors may be used to endorse or promote products derived from\n\n##   this software without specific prior written permission.\n\n## \n\n## This software is provided by RICE and contributors \"as is\" and any\n\n## express or implied warranties, including, but not limited to, the\n\n## implied warranties of merchantability and fitness for a particular\n\n## purpose are disclaimed. In no event shall RICE or contributors be\n\n## liable for any direct, indirect, incidental, special, exemplary, or\n\n## consequential damages (including, but not limited to, procurement of\n\n## substitute goods or services; loss of use, data, or profits; or\n\n## business interruption) however caused and on any theory of liability,\n\n## whether in contract, strict liability, or tort (including negligence\n\n## or otherwise) arising in any way out of the use of this software, even\n\n## if advised of the possibility of such damage. \n\n## \n\n## ******************************************************* EndRiceCopyright *\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Best seen in 120-column wide window (or print in landscape mode).\n\n#---------------------------------------------------------------------------------------------------------------------\n\n#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This Makefile must be invoked from the root Makefile\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n\n# file related definitions\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n\n# compilation rules\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# header file dependencies\n\n# FIXME\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/midend/programAnalysis/OpenAnalysis/SSA/Makefile" : {
      "ObjectId" : "ac469d4b8561e27e2da42cd222f6aa2739d7fa90",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $Id: Makefile,v 1.1 2004/07/07 10:26:34 dquinlan Exp $\n\n# -*-makefile-*-\n\n## * BeginRiceCopyright *****************************************************\n\n## \n\n## Copyright ((c)) 2002, Rice University \n\n## All rights reserved.\n\n## \n\n## Redistribution and use in source and binary forms, with or without\n\n## modification, are permitted provided that the following conditions are\n\n## met:\n\n## \n\n## * Redistributions of source code must retain the above copyright\n\n##   notice, this list of conditions and the following disclaimer.\n\n## \n\n## * Redistributions in binary form must reproduce the above copyright\n\n##   notice, this list of conditions and the following disclaimer in the\n\n##   documentation and/or other materials provided with the distribution.\n\n## \n\n## * Neither the name of Rice University (RICE) nor the names of its\n\n##   contributors may be used to endorse or promote products derived from\n\n##   this software without specific prior written permission.\n\n## \n\n## This software is provided by RICE and contributors \"as is\" and any\n\n## express or implied warranties, including, but not limited to, the\n\n## implied warranties of merchantability and fitness for a particular\n\n## purpose are disclaimed. In no event shall RICE or contributors be\n\n## liable for any direct, indirect, incidental, special, exemplary, or\n\n## consequential damages (including, but not limited to, procurement of\n\n## substitute goods or services; loss of use, data, or profits; or\n\n## business interruption) however caused and on any theory of liability,\n\n## whether in contract, strict liability, or tort (including negligence\n\n## or otherwise) arising in any way out of the use of this software, even\n\n## if advised of the possibility of such damage. \n\n## \n\n## ******************************************************* EndRiceCopyright *\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Best seen in 120-column wide window (or print in landscape mode).\n\n#---------------------------------------------------------------------------------------------------------------------\n\n# This file is part of Mint.\n\n# Arun Chauhan (achauhan@cs.rice.edu), Dept of Computer Science, Rice University, 2000, 2001.\n\n#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This Makefile must be invoked from the root Makefile\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n\n# file related definitions\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n\n# compilation rules\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# header file dependencies\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/midend/programAnalysis/OpenAnalysis/Utils/Makefile" : {
      "ObjectId" : "d901ef65efc9674f957f35115451ef81f8292e80",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# $Id: Makefile,v 1.1 2004/07/07 10:26:34 dquinlan Exp $\n\n# -*-makefile-*-\n\n## * BeginRiceCopyright *****************************************************\n\n## \n\n## Copyright ((c)) 2002, Rice University \n\n## All rights reserved.\n\n## \n\n## Redistribution and use in source and binary forms, with or without\n\n## modification, are permitted provided that the following conditions are\n\n## met:\n\n## \n\n## * Redistributions of source code must retain the above copyright\n\n##   notice, this list of conditions and the following disclaimer.\n\n## \n\n## * Redistributions in binary form must reproduce the above copyright\n\n##   notice, this list of conditions and the following disclaimer in the\n\n##   documentation and/or other materials provided with the distribution.\n\n## \n\n## * Neither the name of Rice University (RICE) nor the names of its\n\n##   contributors may be used to endorse or promote products derived from\n\n##   this software without specific prior written permission.\n\n## \n\n## This software is provided by RICE and contributors \"as is\" and any\n\n## express or implied warranties, including, but not limited to, the\n\n## implied warranties of merchantability and fitness for a particular\n\n## purpose are disclaimed. In no event shall RICE or contributors be\n\n## liable for any direct, indirect, incidental, special, exemplary, or\n\n## consequential damages (including, but not limited to, procurement of\n\n## substitute goods or services; loss of use, data, or profits; or\n\n## business interruption) however caused and on any theory of liability,\n\n## whether in contract, strict liability, or tort (including negligence\n\n## or otherwise) arising in any way out of the use of this software, even\n\n## if advised of the possibility of such damage. \n\n## \n\n## ******************************************************* EndRiceCopyright *\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Best seen in 120-column wide window (or print in landscape mode).\n\n#---------------------------------------------------------------------------------------------------------------------\n\n# This file is part of Mint.\n\n# Arun Chauhan (achauhan@cs.rice.edu), Dept of Computer Science, Rice University, 2000, 2001.\n\n#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This Makefile must be invoked from the root Makefile\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n\n# file related definitions\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# header file dependencies\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/midend/programAnalysis/VirtualFunctionAnalysis/CMakeLists.txt" : {
      "ObjectId" : "d8acb4760bd9faba3025c9baf901801ef0056ef6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(srcdir)/../CFG -I$(top_srcdir)/src/util -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/util/support \n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libdataflowAnalysisSources = DataFlowAnalysis.C  DefUseChain.C  ReachingDefinition.C\n\n##libdataflowAnalysisSources = DataFlowAnalysis.C  ReachingDefinition.C\n\n#\n\n## lib_LTLIBRARIES = libdataflowAnalysis.a\n\n## libdataflowAnalysis_a_SOURCES  = $(libdataflowAnalysisSources)\n\n#\n\n#noinst_LTLIBRARIES = libdataflowAnalysis.la\n\n#libdataflowAnalysis_la_SOURCES = $(libdataflowAnalysisSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = DataFlowAnalysis.h DefUseChain.h ReachingDefinition.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/VirtualFunctionAnalysis/Makefile.am" : {
      "ObjectId" : "70c46ea5c07e347249c10d2ab3c15dbebd797c81",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\trm -rf ./Templates.DB ./ii_files ./ti_files ./cxx_templates\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\trm -rf ./Templates.DB\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programAnalysis/annotationLanguageParser/CMakeLists.txt" : {
      "ObjectId" : "7b68ef65b41676b71e79aabea880d006dbd98658",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#noinst_HEADERS = \\\n\n#     actionchanger.h analyze.h annvariable.h callingcontext.h diagnostic.h \\\n\n#     localstl.h property.h set_property.h action.h ann.h bdwy_liveness.h \\\n\n#     constantprop.h enum_property.h pointerrule.h report.h structure.h \\\n\n#     adaptor_statistics.h annotations.h broadway.h cpattern.h broadway_expr.h \\\n\n#     procedure.h rule.h unification_ann.h\n\n#\n\n#include_HEADERS = \n\n#\n\n#noinst_LTLIBRARIES = libannotationLanguageParser.la\n\n#\n\n### Specifications for building the pdf library.\n\n#libannotationLanguageParser_la_SOURCES = \\\n\n#   language-lexer.cc language-parser.cc \\\n\n#   annotations.cc \\\n\n#   annvariable.cc \\\n\n#   structure.cc \\\n\n#   enum_property.cc \\\n\n#   procedure.cc \\\n\n#   set_property.cc \\\n\n#   pointerrule.cc \\\n\n#   analyze.cc \\\n\n#   rule.cc \\\n\n#   broadway_expr.cc \\\n\n#   report.cc \\\n\n#   language.tab.h\n\n#\n\n#libannotationLanguageParser_la_DEPENDENCES = language-lexer.cc language-parser.cc language.tab.h\n\n## libannotationLanguageParser_la_LIBADD = \n\n#\n\n#BUILT_SOURCES = language-lexer.cc language-parser.cc language.tab.h\n\n#\n\n#AM_CXXFLAGS = -D__LOCALSTL_H\n\n#\n\n#language-parser.cc: $(srcdir)/language.y\n\n#\tbison -d -pann -o ./tempBisonOutput.c $(srcdir)/language.y\n\n#\tmv tempBisonOutput.c language-parser.cc\n\n#\tmv tempBisonOutput.h language.tab.h\n\n#\n\n#language-lexer.cc: $(srcdir)/language.l language-parser.cc\n\n#\tflex $(srcdir)/language.l\n\n#\tmv lex.ann.c language-lexer.cc\n\n#\n\n#language.tab.h: language-parser.cc\n\n#\n\n#clean:\n\n#\trm -f language-lexer.cc lex.ann.c language-parser.cc language.tab.h tempBisonOutput.*\n\n#\trm -f *.lo *.la\n\n#\n\n#EXTRA_DIST = language.l language.y\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/annotationLanguageParser/Makefile.am" : {
      "ObjectId" : "226d03b9d91af7f76c57602a7710d2a0103a557d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Specifications for building the pdf library.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libannotationLanguageParser_la_LIBADD = \n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/midend/programAnalysis/arithmeticIntensity/Makefile.am" : {
      "ObjectId" : "010211bddabdcdd1a4af11423c2c298cb2c82ec3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# where to find rose and boost libraries \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#DEBUG_LEVEL     = -g -O0\n\n#EXTRA_CCFLAGS   = -Wall\n\n#CXXFLAGS        = $(DEBUG_LEVEL) $(EXTRA_CCFLAGS)\n\n#CCFLAGS         = $(CXXFLAGS)\n\n# search path for .m4 macros\n\n#ACLOCAL_AMFLAGS = -I ./config\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#libinstrumentor.a\n",
        "Line" : 13,
        "CharPositionInLine" : 46
      },
      "3" : {
        "Text" : "#libinstrumentor_a_SOURCES = instrumentor_lib.c\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#include_HEADERS = ai_measurement.h\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/midend/programAnalysis/bitvectorDataflow/CMakeLists.txt" : {
      "ObjectId" : "430a6f25ceddfbc9f4ad3de4e290ac435cd2e10f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programAnalysis/bitvectorDataflow/Makefile.am" : {
      "ObjectId" : "b0123b4066f4b2934626a074bf83dd0e4a4c7537",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#libdataflowAnalysisSources = DataFlowAnalysis.C  ReachingDefinition.C\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lib_LTLIBRARIES = libdataflowAnalysis.a\n\n# libdataflowAnalysis_a_SOURCES  = $(libdataflowAnalysisSources)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\trm -rf ./Templates.DB ./ii_files ./ti_files ./cxx_templates\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\trm -rf ./Templates.DB\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/midend/programAnalysis/dataflowAnalysis/CMakeLists.txt" : {
      "ObjectId" : "6836da7ca1ed08beeac4e551c8b1e6da60f09928",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/defUseAnalysis/CMakeLists.txt" : {
      "ObjectId" : "f73e1ac7c87017c3018cd4a00c8394853c3609cf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_USE_GCC_OMP\n\n#INCLUDES_OMP = -DROSE_GCC_OMP \n\n#endif\n\n#\n\n#INCLUDES =  $(ROSE_INCLUDES) \\\n\n#   -I$(srcdir)/.. -I$(srcdir)/../dataflowAnalysis -I$(srcdir)/../CFG -I$(top_srcdir)/src/midend/loopProcessing \\\n\n#   -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/midend/astUtil/astInterface \\\n\n#   -I$(top_srcdir)/src/midend/astUtil/annotation -I$(top_srcdir)/src/midend/astUtil/symbolicVal  \\\n\n#   -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs \\\n\n#   $(INCLUDES_OMP)\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#\n\n#noinst_LTLIBRARIES = libDefUseAnalysis.la\n\n#\n\n## DQ (11/8/2007): The runTest.cpp file was moved to tests/nonsmoke/functional/roseTests/programAnalysisTests/defUseAnalysisTests/runTest.C by Thomas.\n\n## libDefUseAnalysis_la_SOURCES = $(srcdir)/GlobalVarAnalysis.cpp $(srcdir)/DefUseAnalysis.cpp $(srcdir)/DefUseAnalysis_perFunction.cpp $(srcdir)/dfaToDot.cpp $(srcdir)/runTest.cpp\n\n#libDefUseAnalysis_la_SOURCES = $(srcdir)/GlobalVarAnalysis.cpp $(srcdir)/DefUseAnalysis.cpp $(srcdir)/DefUseAnalysis_perFunction.cpp $(srcdir)/dfaToDot.cpp $(srcdir)/LivenessAnalysis.cpp $(srcdir)/DefUseAnalysisAbstract.cpp\n\n#\n\n#\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  DefUseAnalysis.h  BottomUpTraversalLiveness.h DefUseAnalysis_perFunction.h  DFAFilter.h  DFAnalysis.h  dfaToDot.h  GlobalVarAnalysis.h  support.h LivenessAnalysis.h DefUseAnalysisAbstract.h\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/defUseAnalysis/Makefile.am" : {
      "ObjectId" : "2892db3dc08db7f6744aa961e604e3bdf38bcc94",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (11/8/2007): The runTest.cpp file was moved to tests/nonsmoke/functional/roseTests/programAnalysisTests/defUseAnalysisTests/runTest.C by Thomas.\n\n# libDefUseAnalysis_la_SOURCES = $(srcdir)/GlobalVarAnalysis.cpp $(srcdir)/DefUseAnalysis.cpp $(srcdir)/DefUseAnalysis_perFunction.cpp $(srcdir)/dfaToDot.cpp $(srcdir)/runTest.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\trm -rf ./Templates.DB ./ii_files ./ti_files ./cxx_templates\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\trm -rf ./Templates.DB\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/distributedMemoryAnalysis/CMakeLists.txt" : {
      "ObjectId" : "a83a09f5a498d8de1e2e6c81ee5a1534cea33bea",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#if ROSE_MPI\n\n#\n\n#INCLUDES =  $(ROSE_INCLUDES) -DROSE_MPI \n\n#\n\n##LTCXXCOMPILE = \\\n\n##\t$(LIBTOOL) --tag=CXX --mode=compile $(MPICXX) $(DEFS) \\\n\n##        $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n\n##        $(AM_CXXFLAGS) $(CXXFLAGS)\n\n##CXXCOMPILE = \\\n\n##\t$(MPICXX) $(DEFS) \\\n\n##        $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n\n##        $(AM_CXXFLAGS) $(CXXFLAGS)\n\n##CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(MPICXX) $(AM_CXXFLAGS) \\\n\n##        $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n\n#\n\n#noinst_LTLIBRARIES = libdistributedMemoryAnalysis.la\n\n#libdistributedMemoryAnalysis_la_SOURCES = DistributedMemoryAnalysis.C functionNames.C\n\n#\n\n#include_HEADERS =  functionNames.h DistributedMemoryAnalysis.h DistributedMemoryAnalysisImplementation.h functionLevelTraversal.h\n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = DistributedMemoryAnalysis.C functionNames.C functionNames.h \\\n\n#             DistributedMemoryAnalysis.h \\\n\n#\t     DistributedMemoryAnalysisImplementation.h functionLevelTraversal.h\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/distributedMemoryAnalysis/Makefile.am" : {
      "ObjectId" : "bf843c6b35a5d060e560dfff66252be5393e7456",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LTCXXCOMPILE = \\\n#\t$(LIBTOOL) --tag=CXX --mode=compile $(MPICXX) $(DEFS) \\\n#        $(DEFAULT_INCLUDES) $(AM_CPPFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n#        $(AM_CXXFLAGS) $(CXXFLAGS)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CXXCOMPILE = \\\n#\t$(MPICXX) $(DEFS) \\\n#        $(DEFAULT_INCLUDES) $(AM_CPPFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n#        $(AM_CXXFLAGS) $(CXXFLAGS)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(MPICXX) $(AM_CXXFLAGS) \\\n#        $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programAnalysis/dominanceAnalysis/CMakeLists.txt" : {
      "ObjectId" : "ebdd8251179f52fb034470aac1df061b478cced3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  DominatorTree.h filteredCFG.h DominanceFrontier.h DominatorTreeImpl.h\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programAnalysis/dominanceAnalysis/Makefile.am" : {
      "ObjectId" : "da0135eb590b29ee68538efb6bd7c60ef2d80b00",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\trm -rf ./Templates.DB ./ii_files ./ti_files ./cxx_templates\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\trm -rf ./Templates.DB\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers/CMakeLists.txt" : {
      "ObjectId" : "e51154e454fdd2c00922eb191488291402543248",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libdominance_la_SOURCES =  ControlFlowGraph.C  DominanceFrontier.C  DominatorTree.C\n\n#\n\n#noinst_LTLIBRARIES = libdominance.la\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = ControlFlowGraph.h  SimpleDirectedGraph.h  DominanceFrontier.h  DominatorTree.h\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers/Makefile.am" : {
      "ObjectId" : "dea4b45eebbf15f82d1cc1051137d360b5726024",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programAnalysis/genericDataflow/CMakeLists.txt" : {
      "ObjectId" : "b8df123935f0fb9d60337ff7014298beda605b8a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/pointerAnal/CMakeLists.txt" : {
      "ObjectId" : "15e1a0c36494b703355c3d754298f6b8b203c81b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES =  $(ROSE_INCLUDES) -I../CFG -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/astInterface \n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#EXTRA_DIST = steensgaard.h PtrAnal.h SteensgaardPtrAnal.h\n\n#\n\n#noinst_LTLIBRARIES = libpointerAnal.la\n\n#libpointerAnal_la_SOURCES = PtrAnal.C PtrAnalCFG.C\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = steensgaard.h PtrAnal.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/pointerAnal/Makefile.am" : {
      "ObjectId" : "c4afbaa6fefa28aeb770ea405e6bfdc1c625e184",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programAnalysis/proceduralSlicing/CMakeLists.txt" : {
      "ObjectId" : "640291d065b31bd5ed80bde975efd9786ae41146",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n## DQ (9/10/2005): Commented out until Millind can get this code compiled (Qing changed the Graph interface)\n\n# libalternativeProgramSlicing_la_SOURCES =  FindStatements.cpp  MarkingNodes.cpp  RemovalOfNodes.cpp  Slicing.cpp  SlicingCriterion.cpp  SlicingInfo.C\n\n#noinst_LTLIBRARIES = libalternativeProgramSlicing.la\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = CheckWhichAreMarked.h  FindStatements.h  KeepAttribute.h  MarkingNodes.h  RemovalOfNodes.h  SlicingCriterion.h  Slicing.h\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/proceduralSlicing/Makefile.am" : {
      "ObjectId" : "5b0f4591a99df319dcd235568b771f11a97e55bc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (9/10/2005): Commented out until Millind can get this code compiled (Qing changed the Graph interface)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/midend/programAnalysis/proceduralSlicing/doc/Makefile" : {
      "ObjectId" : "19fb440a5e54d2ba771a73afe5b642bf447294a4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/sideEffectAnalysis/CMakeLists.txt" : {
      "ObjectId" : "1f04d57f9046031fd5b79d51d0e44e6f4df20a07",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programAnalysis/sideEffectAnalysis/Makefile.am" : {
      "ObjectId" : "afe3f76e25dc4da13b57901f4b26e97ace62b711",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#sideEffect analysis doesn't build, it's broken\n\n#AM_CPPFLAGS = $(ROSE_INCLUDES) $(BOOST_CPPFLAGS) $(SQLITE_DATABASE_INCLUDE)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#noinst_HEADERS = sideEffect.h\n\n#pkginclude_HEADERS = sideEffect.h SqliteDatabaseGraph.h\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#noinst_LTLIBRARIES = libsideEffect.la\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Specifications for building the pdf library.\n\n#libsideEffect_la_SOURCES = sideEffect.C\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/ssaUnfilteredCfg/CMakeLists.txt" : {
      "ObjectId" : "fb2e46563bd705ae3cafea2360a3b8667ea17f76",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/ssaUnfilteredCfg/Makefile.am" : {
      "ObjectId" : "905829452db1b02a977eca74e04bbb9403c09dda",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# noinst_LTLIBRARIES lists all the libraries that should be built, but not installed\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programAnalysis/staticInterproceduralSlicing/CMakeLists.txt" : {
      "ObjectId" : "78cff93ce70811a3431e1061ec9b629c120b4bb8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## INCLUDES =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(srcdir)/../dataflowAnalysis -I$(srcdir)/../CFG -I$(top_srcdir)/src/midend/loopProcessing -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/midend/astUtil/annotation -I$(top_srcdir)/src/midend/astUtil/symbolicVal  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs -I$(srcdir)/../dominatorTreesAndDominanceFrontiers\n\n#INCLUDES =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(srcdir)/../dataflowAnalysis -I$(srcdir)/../CFG -I$(top_srcdir)/src/midend/loopProcessing -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/midend/astUtil/annotation -I$(top_srcdir)/src/midend/astUtil/symbolicVal  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs\n\n#\n\n#noinst_LTLIBRARIES = libStaticSlicing.la\n\n#\n\n## DQ (1/2/2007): Copied the ControlFlowGraph.C and ControlFlowGraph.h from ../dominatorTreesAndDominanceFrontiers\n\n## since that directory has been deprecated.\n\n#\n\n#libStaticSlicing_la_SOURCES = \\\n\n#   $(srcdir)/ControlDependenceGraph.C  $(srcdir)/DataDependenceGraph.C  \\\n\n#   $(srcdir)/MergedDependenceGraph.C $(srcdir)/CreateSlice.C $(srcdir)/SlicingInfo.C $(srcdir)/CreateSliceSet.C \\\n\n#   $(srcdir)/DependenceGraph.C $(srcdir)/FunctionDependenceGraph.C \\\n\n#   $(srcdir)/SystemDependenceGraph.C $(srcdir)/DefUseExtension.C $(srcdir)/EDefUse.C \\\n\n#   ControlFlowGraph.C\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = DebugTool.h  DefUseExtension.h  DependenceGraph.h  InterproceduralInfo.h  SimpleDirectedGraph.h  SlicingInfo.h EDefUse.h SDGLibraryExtender.h CreateSlice.h CreateSliceSet.h ControlFlowGraph.h\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/staticInterproceduralSlicing/Makefile.am" : {
      "ObjectId" : "5120508ef2c42cc9217f594e9e9beec7b460b5ad",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CPPFLAGS =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(srcdir)/../bitvectorDataflow -I$(srcdir)/../CFG -I$(top_srcdir)/src/midend/loopProcessing -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/midend/astUtil/annotation -I$(top_srcdir)/src/midend/astUtil/symbolicVal  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs -I$(srcdir)/../dominatorTreesAndDominanceFrontiers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (1/2/2007): Copied the ControlFlowGraph.C and ControlFlowGraph.h from ../dominatorTreesAndDominanceFrontiers\n\n# since that directory has been deprecated.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# New files (not yet used) and representing bug fixes from University of Wisc not yet passing\n\n# \"make check\" rule in tests/nonsmoke/functional/roseTests/programAnalysisTests/staticInterproceduralSlicingTests\n\n# This is an intermediate step to getting this into place.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programAnalysis/staticSingleAssignment/CMakeLists.txt" : {
      "ObjectId" : "99cba873202dd2cd5989bd61d4ba98bbeb91dc3a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/staticSingleAssignment/Makefile.am" : {
      "ObjectId" : "2371ed73086947ebbcb053b6f700b71c408ea6c7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/systemDependenceGraph/CMakeLists.txt" : {
      "ObjectId" : "d7d393f82d44e6d0355f796750d65c3dc01af8ac",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programAnalysis/systemDependenceGraph/Makefile.am" : {
      "ObjectId" : "ee578f8a66a0b7cf92d6a278ef495aebe1aac82e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/7/2015): I think we don't want to support this code any more (was not supported \n\n# on GNU compilers greater than 4.6 and so should not be supported on Intel compilers.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noinst_LTLIBRARIES =  libSDG.la\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (10/7/2015): I think we don't want to support this code any more (was not supported \n\n# on GNU compilers greater than 4.6 and so should not be supported on Intel compilers.\n\n# DQ (2/9/2014): This code does not compile using GNU g++ version 4.7 and later compilers.\n\n# This requires more investigation to decide on a fix, but we might eliminate \n\n# this code in favor of more recent analysis work so it might not be work fixing).\n\n# Not clear if this is redundant with modification in src/midend/programAnalysis/Makefile.am\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libSDG_la_SOURCES = staticCFG.C PDG.C SDG.C util.C defUseChains.C newDDG.C newCDG.C\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# not supported anymore\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# not supported anymore\n\n# pkginclude_HEADERS = cong_staticCFG.h PDG.h util.h SDG.h defUseChains.h  newCDG.h newDDG.h\n\n# libSDG_la_DEPENDENCIES =\n\n# libSDG_la_SOURCES = staticCFG.C PDG.C SDG.C util.C defUseChains.C newDDG.C newCDG.C\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/midend/programAnalysis/valuePropagation/CMakeLists.txt" : {
      "ObjectId" : "ebcc1891d9fe9f46a0438a0996c45144bdc5a4cf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## INCLUDES =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(top_srcdir)/src/midend/loopProcessing -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util\n\n#\n\n#INCLUDES =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(srcdir)/../dataflowAnalysis -I$(srcdir)/../CFG -I$(top_srcdir)/src/midend/loopProcessing -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/midend/astUtil/annotation -I$(top_srcdir)/src/midend/astUtil/symbolicVal  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libvaluePropagationSources = ArrayAnnot.C ValueAnnot.C  ValuePropagate.C\n\n#\n\n## lib_LTLIBRARIES = libvaluePropagation.a\n\n## libvaluePropagation_a_SOURCES  = $(libvaluePropagationSources)\n\n#\n\n#noinst_LTLIBRARIES = libvaluePropagation.la\n\n#libvaluePropagation_la_SOURCES = $(libvaluePropagationSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  ArrayAnnot.h ValueAnnot.h ValuePropagate.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programAnalysis/valuePropagation/Makefile.am" : {
      "ObjectId" : "8f39e4f041da9cf95faf12e1d0283efba87fc725",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CPPFLAGS =  $(ROSE_INCLUDES) -I$(srcdir)/.. -I$(top_srcdir)/src/midend/loopProcessing -I$(top_srcdir)/src/midend/astUtil -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lib_LTLIBRARIES = libvaluePropagation.a\n\n# libvaluePropagation_a_SOURCES  = $(libvaluePropagationSources)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programAnalysis/variableRenaming/CMakeLists.txt" : {
      "ObjectId" : "65c14847dbc3ea37bbea170bec7b4dee32ca9e3b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  DominatorTree.h filteredCFG.h DominanceFrontier.h DominatorTreeImpl.h\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programAnalysis/variableRenaming/Makefile.am" : {
      "ObjectId" : "fd4708cf3244b133b766114702f4cd5e4071cf46",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programTransformation/CMakeLists.txt" : {
      "ObjectId" : "ba743ef57ca531088f15b6f5f2287d63ac24fcda",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programTransformation/astInlining/CMakeLists.txt" : {
      "ObjectId" : "ec58580394ce36cc1ce30e8f6f7f0568c9097111",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#libastinliningSources = \\\n\n#   inliner.C inlinerSupport.C isPotentiallyModified.C \\\n\n#   replaceExpressionWithStatement.C \n\n#\n\n## lib_LTLIBRARIES = libastinlining.a\n\n## libastinlining_a_SOURCES  = $(libastinliningSources)\n\n#\n\n#noinst_LTLIBRARIES = libastinlining.la\n\n#libastinlining_la_SOURCES = $(libastinliningSources)\n\n#\n\n#include_HEADERS = replaceExpressionWithStatement.h inlinerSupport.h inliner.h\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/astOutlining/CMakeLists.txt" : {
      "ObjectId" : "17b83375bd8f0b8ce12034528ecd9fcd7696a21d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#noinst_LTLIBRARIES = libastOutliner.la\n\n#\n\n#libastOutliner_la_SOURCES = \\\n\n#\tCheck.cc \\\n\n#\tOutliner.cc \\\n\n#\tNameGenerator.cc \\\n\n#\tPragmaInterface.cc \\\n\n#\tASTtools.cc \\\n\n#\tCopy.cc \\\n\n#\tJumps.cc \\\n\n#\tPrePostTraversal.cc \\\n\n#\tPreprocessingInfo.cc \\\n\n#\tStmtRewrite.cc \\\n\n#\tThis.cc \\\n\n#\tVarSym.cc \\\n\n#\tCase.cc \\\n\n#\tExtractIfs.cc \\\n\n#\tIf.cc \\\n\n#\tIfDirectiveContextFinder.cc \\\n\n#\tIfDirectiveExtractor.cc \\\n\n#\tBlock.cc \\\n\n#\tNonLocalDecls.cc \\\n\n#\tPreprocIfs.cc \\\n\n#\tNonLocalControlFlow.cc \\\n\n#\tPreprocess.cc \\\n\n#\tThisExprs.cc \\\n\n#\tCollectVars.cc \\\n\n#\tGenerateCall.cc \\\n\n#\tGenerateFunc.cc \\\n\n#\tInsert.cc \\\n\n#\tTransform.cc\n\n#\n\n#include_HEADERS = \\\n\n#\tOutliner.hh \\\n\n#\tNameGenerator.hh \\\n\n#\tASTtools.hh \\\n\n#\tCopy.hh \\\n\n#\tJumps.hh \\\n\n#\tPrePostTraversal.hh \\\n\n#\tPreprocessingInfo.hh \\\n\n#\tStmtRewrite.hh \\\n\n#\tThis.hh \\\n\n#\tVarSym.hh \\\n\n#\tIfDirectiveContextFinder.hh \\\n\n#\tIfDirectiveExtractor.hh \\\n\n#\tIf.hh \\\n\n#        Preprocess.hh \n\n##        Transform.hh\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n\n#\n\n#EXTRA_DIST = README\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/constantFolding/CMakeLists.txt" : {
      "ObjectId" : "6d7a42bb80558319e0b80f11b164b64a09e37f88",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#libconstantFoldingSources = \\\n\n#   constantFolding.C\n\n#\n\n#noinst_LTLIBRARIES = libconstantFolding.la\n\n#libconstantFolding_la_SOURCES = $(libconstantFoldingSources)\n\n#\n\n#include_HEADERS = constantFolding.h\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/extractFunctionArgumentsNormalization/CMakeLists.txt" : {
      "ObjectId" : "859357b7396a60bae74d40ac5c62c5cf8c4c8512",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programTransformation/extractFunctionArgumentsNormalization/Makefile.am" : {
      "ObjectId" : "4d9b1a853a7a6de5497c4bf6362835e82915a37d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LINK\t = $(CXXLINK)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noinst_LTLIBRARIES lists all the libraries that should be built, but not installed\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EXTRA_DIST are files that are not compiled or installed. These include readme's, internal header files, etc.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programTransformation/finiteDifferencing/CMakeLists.txt" : {
      "ObjectId" : "b85e121a4800267915d29d7138e0763b8890c149",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I${top_srcdir}/src/midend/programAnalysis/CFG \n\n#\n\n#libfiniteDifferencingSources = \\\n\n#   finiteDifferencing.C patternRewrite.C\n\n#\n\n#noinst_LTLIBRARIES = libfiniteDifferencing.la\n\n#libfiniteDifferencing_la_SOURCES = $(libfiniteDifferencingSources)\n\n#\n\n#include_HEADERS = finiteDifferencing.h patternRewrite.h\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/functionCallNormalization/CMakeLists.txt" : {
      "ObjectId" : "e037b05d58229269f7ca33a8d6d2495b5670a070",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#libfunctionCallNormalizationSources = \\\n\n#   FunctionNormalization.C\n\n#\n\n#noinst_LTLIBRARIES = libfunctionCallNormalization.la\n\n#libfunctionCallNormalization_la_SOURCES = $(libfunctionCallNormalizationSources)\n\n#\n\n#include_HEADERS = FunctionNormalization.h\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/implicitCodeGeneration/CMakeLists.txt" : {
      "ObjectId" : "cb46e4311fdd3b5436db63ce33cb324eb384c379",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#noinst_LTLIBRARIES = libimplicitCodeGeneration.la\n\n#\n\n#libimplicitCodeGeneration_la_SOURCES = analysisUtils.C defaultFunctionGenerator.C destructorCallAnnotator.C shortCircuitingTransformation.C\n\n#\n\n#include_HEADERS = analysisUtils.h defaultFunctionGenerator.h destructorCallAnnotator.h shortCircuitingTransformation.h\n\n#\n\n#EXTRA_DIST = README\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/loopProcessing/CMakeLists.txt" : {
      "ObjectId" : "a6e3a4dd07849a6fd12e304b07a152ff8a3dc702",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programTransformation/loopProcessing/Makefile.am" : {
      "ObjectId" : "8ad49387bc1c00ee3abf78c463ccff31c402ec09",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Non-recursive Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Subdirectories\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Place generated object files (.o) into the same directory as their source\n\n## files, in order to avoid collisions when non-recursive make is used.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Don't use $(srcdir) in conjunction with [subdir-objects], otherwise\n\n# object files will be built in the source tree. Therefore, we need to\n\n# use relative paths.\n\n#\n\n#mptlpDepInfoPath=$(srcdir)/depInfo#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n",
        "Line" : 27,
        "CharPositionInLine" : 24
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 28,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "#\n",
        "Line" : 29,
        "CharPositionInLine" : 32
      },
      "7" : {
        "Text" : "#\n",
        "Line" : 30,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "#\n",
        "Line" : 31,
        "CharPositionInLine" : 24
      },
      "9" : {
        "Text" : "#\n",
        "Line" : 32,
        "CharPositionInLine" : 22
      },
      "10" : {
        "Text" : "#\n",
        "Line" : 33,
        "CharPositionInLine" : 52
      },
      "11" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Library: programTransformationLoopProcessing.la\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/midend/programTransformation/loopProcessing/computation/CMakeLists.txt" : {
      "ObjectId" : "84d89f8dda356eb4d195a31e9116f68f7c11cfb1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = -I$(srcdir)/../driver -I$(srcdir)/../depGraph -I$(srcdir)/../depInfo -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/astInterface  -I$(top_srcdir)/src/midend/astUtil/symbolicVal\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libcomputationSources = \\\n\n#   LoopTree.C   LoopTreeDummyNode.C  LoopTreeShadow.C LoopTreeLocality.C\\\n\n#   LoopTreeDepComp.C  DepCompTransform.C LoopTreeTransform.C\n\n#\n\n## lib_LTLIBRARIES = libcomputation.a\n\n## libcomputation_a_SOURCES  = $(libcomputationSources)\n\n#\n\n#noinst_LTLIBRARIES = libcomputation.la\n\n#libcomputation_la_SOURCES = $(libcomputationSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS = \\\n\n#   LoopTreeDummyNode.h  LoopTreeShadow.h LoopTreeLocality.h \\\n\n#   LoopTreeBuild.h    LoopTree.h           LoopTreeObserver.h  LoopTreeTransform.h \\\n\n#   LoopTreeDepComp.h  LoopTreeHoldNode.h    DepCompTransform.h \n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/loopProcessing/depGraph/CMakeLists.txt" : {
      "ObjectId" : "ce7c31904e7306d1172f0babedac5d4d465d4bbf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = -I$(srcdir)/../driver -I$(srcdir)/../depInfo  -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/midend/astUtil/symbolicVal \n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libdepGraphSources = DepGraphBuild.C  LoopAnalysis.C  TransDepGraph.C\n\n#\n\n## lib_LTLIBRARIES = libdepGraph.a\n\n## libdepGraph_a_SOURCES  = $(libdepGraphSources)\n\n#\n\n#noinst_LTLIBRARIES = libdepGraph.la\n\n#libdepGraph_la_SOURCES = $(libdepGraphSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  DepGraphBuild.h  DepGraph.h  DepGraphTransform.h  LoopAnalysis.h  TransDepGraph.h TransDepGraphImpl.h\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/loopProcessing/depInfo/CMakeLists.txt" : {
      "ObjectId" : "4a0157821fc9cbcaecc211b8b3a841e1b13c4c24",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/midend/astUtil/symbolicVal -I$(top_srcdir)/src/midend/loopProcessing/driver\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libdepInfoSources = \\\n\n#   DepEDD.C  DepInfoAnal.C ReuseAnalysis.C DepInfo.C  \\\n\n#   DepInfoSet.C  DepRel.C  DomainInfo.C  StmtDepAnal.C\n\n#\n\n## lib_LTLIBRARIES = libdepInfo.a\n\n## libdepInfo_a_SOURCES  = $(libdepInfoSources)\n\n#\n\n#noinst_LTLIBRARIES = libdepInfo.la\n\n#libdepInfo_la_SOURCES = $(libdepInfoSources)\n\n#\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  DepEDD.h       DepInfo.h     DepInfoUpdate.h  DomainInfo.h \\\n\n#                   DepInfoAnal.h  DepInfoSet.h  DepRel.h   DomainInfoUpdate.h \\\n\n#                   ReuseAnalysis.h StmtDepAnal.h\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/loopProcessing/driver/CMakeLists.txt" : {
      "ObjectId" : "7d11df8ad5db03def832534c2a4f2530b8881dac",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I$(srcdir)/../prepostTransformation -I$(srcdir)/../slicing -I$(srcdir)/../computation -I$(srcdir)/../depGraph -I$(srcdir)/../depInfo  -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/symbolicVal -I$(top_srcdir)/src/midend/astUtil/astInterface\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libdriverSources = \\\n\n#   BlockingAnal.C  FusionAnal.C    CopyArrayAnal.C   LoopTransformOptions.C   \\\n\n#   TransformComputation.C InterchangeAnal.C  TypedFusionImpl.C LoopTransformInterface.C \\\n\n#   NormalizeCPP.C\n\n#\n\n## lib_LTLIBRARIES = libdriver.a\n\n## libdriver_a_SOURCES  = $(libdriverSources)\n\n#\n\n#noinst_LTLIBRARIES = libdriver.la\n\n#libdriver_la_SOURCES = $(libdriverSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  BlockingAnal.h  InterchangeAnal.h  CopyArrayAnal.h  \\\n\n#                    LoopTransformOptions.h  LoopTransformInterface.h\\\n\n#                   FusionAnal.h   \n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/loopProcessing/outsideInterface/CMakeLists.txt" : {
      "ObjectId" : "2bf115b09d278ad2ae22984539a94743391224fa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Liao, 11/14/2008, Moved from project/arrayOptimization\n\n#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#noinst_LTLIBRARIES=libarrayOptimization.la\n\n#\n\n#libarrayOptimization_la_SOURCES = \\\n\n#  ArrayAnnot.C ArrayInterface.C ArrayRewrite.C \n\n#\n\n#include_HEADERS = \\\n\n#   ArrayAnnot.h ArrayInterface.h ArrayRewrite.h \n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n\n#\n\n#EXTRA_DIST = \n\n#   \n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/loopProcessing/prepostTransformation/CMakeLists.txt" : {
      "ObjectId" : "9eb36c4edec8afb4c2d0eb46db370a1bb0a2e848",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = -I$(srcdir)/../driver -I$(srcdir)/../depInfo -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/symbolicVal -I$(top_srcdir)/src/midend/astUtil/astInterface -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow -I$(top_srcdir)/src/midend/programAnalysis/CFG -I$(top_srcdir)/src/util/graphs\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libprepostloopSources = BreakupStmt.C  LoopUnroll.C PrivatizeScalar.C\n\n#\n\n## lib_LTLIBRARIES = libprepostloop.a\n\n## libprepostloop_a_SOURCES  = $(libprepostloopSources)\n\n#\n\n#noinst_LTLIBRARIES = libprepostloop.la\n\n#libprepostloop_la_SOURCES = $(libprepostloopSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  BreakupStmt.h  LoopUnroll.h  PrePostTransformation.h PrivatizeScalar.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/loopProcessing/slicing/CMakeLists.txt" : {
      "ObjectId" : "bfeec89044689dc3dcc2a86822123ccf3c725fdd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = -I$(srcdir)/../driver -I$(srcdir)/../computation -I$(srcdir)/../depGraph -I$(srcdir)/../depInfo -I$(top_srcdir)/src/util/support -I$(top_srcdir)/src/util/graphs  -I$(top_srcdir)/src/midend/astUtil/astSupport -I$(top_srcdir)/src/midend/astUtil/symbolicVal -I$(top_srcdir)/src/midend/astUtil/astInterface\n\n#\n\n### The grammar generator (ROSETTA) should use its own template repository\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n#libslicingSources = \\\n\n#   CompSlice.C  DynamicCompSlice.C CompSliceDepGraph.C  CompSliceLocality.C  DependenceHoisting.C\n\n#\n\n## lib_LTLIBRARIES = libslicing.a\n\n## libslicing_a_SOURCES  = $(libslicingSources)\n\n#\n\n#noinst_LTLIBRARIES = libslicing.la\n\n#libslicing_la_SOURCES = $(libslicingSources)\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files cxx_templates\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#include_HEADERS =  CompSliceDepGraph.h  CompSliceImpl.h      DynamicCompSlice.h CompSliceObserver.h \\\n\n#                   CompSlice.h          CompSliceLocality.h  CompSliceRegistry.h\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/ompLowering/CMakeLists.txt" : {
      "ObjectId" : "c105962d0ba15d9d50a782adaad4a7fbf2983ae4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/midend/programTransformation/partialRedundancyElimination/CMakeLists.txt" : {
      "ObjectId" : "bd3877a75947f7dd70fa53b5a65f1865b0d5c042",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I${top_srcdir}/src/midend/programAnalysis/CFG \n\n#\n\n#libpreSources = \\\n\n#   expressionTreeEqual.C pre.C preControlFlowGraph.C\n\n#\n\n#noinst_LTLIBRARIES = libpre.la\n\n#libpre_la_SOURCES = $(libpreSources)\n\n#\n\n#include_HEADERS = expressionTreeEqual.h pre.h preControlFlowGraph.h\n\n#\n\n#clean-local:\n\n#\trm -rf Templates.DB ii_files ti_files core\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/midend/programTransformation/singleStatementToBlockNormalization/CMakeLists.txt" : {
      "ObjectId" : "e658fd4b8c42e68a7955d1a2fff81b258dc37574",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programTransformation/singleStatementToBlockNormalization/Makefile.am" : {
      "ObjectId" : "fdd755120c1168c73ef0acdcf7178b138ffd53ae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#LINK\t = $(CXXLINK)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# noinst_LTLIBRARIES lists all the libraries that should be built, but not installed\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EXTRA_DIST are files that are not compiled or installed. These include readme's, internal header files, etc.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/midend/programTransformation/transformationTracking/CMakeLists.txt" : {
      "ObjectId" : "4e854bcab87efd23210ad465873f84d3ec5204e9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/midend/programTransformation/transformationTracking/Makefile.am" : {
      "ObjectId" : "a62255ae7eaf828cc20eeb941b6f59100882f119",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/roseExtensions/CMakeLists.txt" : {
      "ObjectId" : "c603d6fab9c2855f22f8bb9ba511330bca22f405",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/Makefile.am" : {
      "ObjectId" : "c17864c30d26c3e15a754c276de900faebf856d4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/dataStructureTraversal/CMakeLists.txt" : {
      "ObjectId" : "2f04af83c5c2a716a4358a4b7ddfa54882bf4a33",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include ../../../config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n## Define the template repository path used in the autoconf\n\n## subsitution for various C++ template control variables.\n\n#CXX_TEMPLATE_REPOSITORY_PATH = .\n\n#\n\n## DQ (2/8/2004): Disabled\n\n## bin_PROGRAMS = cgraphpp\n\n#\n\n## list of dependencies for all example programs\n\n#EXAMPLE_PROGRAMS_DEPENDENCY_LIST = $(ROSE_LIBS) \n\n#\n\n## DQ (2/8/2004): Disabled\n\n## cgraphpp_SOURCES = ControlStructure.C  GenGeneration.C  GenRepresentation.C helpFunctions.C  main.C\n\n#\n\n## DQ (2/8/2004): Disabled\n\n## Can't use $(ROSE_LIBS) since it would make librewrite.a be compiled \n\n## (and it appears after src in the SUBDIRS line).  But then we can't\n\n## compile the cgraphpp translator.  Need tomove the AST_RewriteMechanism \n\n## directory into ROSE/src so that the ordering can be handled in the \n\n## ROSE/src/Makefile.am.  This is too much to do right now.  So it\n\n## is reseverd for the next checkin.\n\n## cgraphpp_DEPENDENCIES = $(EXAMPLE_PROGRAMS_DEPENDENCY_LIST)\n\n## cgraphpp_DEPENDENCIES = \n\n#\n\n#LDADD = $(ROSE_LIBS)\n\n#\n\n### Code added to permit tests in this directory as part of development\n\n#\n\n### Add bugs to this line as they are fixed so that they can be used as test problems\n\n### At least we should not reintroduce these fixed bugs again later.\n\n#TESTCODES = \n\n#\n\n## DQ (2/8/2004): Disabled\n\n##   exampleTest.C\n\n#\n\n## Use of this test code requires specification of EDG include files\n\n## dataStructureTest_1.C\n\n#\n\n## Build the list of object files\n\n#TEST_Objects = ${TESTCODES:.C=.o}\n\n#\n\n## ROSE_FLAGS = -rose:dot -rose:test 6 -rose:outputGrammarTreeFiles -rose:outputGrammarTreeFilesForHeaderFiles\n\n#ROSE_FLAGS = -rose:dot -rose:test 6 -rose:outputGrammarTreeFiles -rose:outputGrammarTreeFilesForHeaderFiles -rose:outputGrammarTreeFilesForEDG\n\n#\n\n## How to run Andreas' graphing preprocessor (note -gall option causes g++ warning -fgall ???)\n\n## 1) cgraphpp --gall exampleTest.C\n\n## 2) dotgl Static_exampleTest.C.dot &\n\n#\n\n#$(TEST_Objects): $(TESTCODES)\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\t./cgraphpp --gall exampleTest.C\n\n#\t: remove this so that we can force the examples to be run\n\n#\trm -f $(TEST_Objects)\n\n#\n\n## helpFunctions.h need to be put into the util directory\n\n#include_HEADERS = \\\n\n#     ControlStructure.h  GenGeneration.h  GenRepresentation.h  helpFunctions.h\n\n#\n\n#EXTRA_DIST = $(TESTCODES)\n\n#\n\n#clean-local:\n\n#\trm -rf $(CXX_TEMPLATE_OBJECTS) Templates.DB ii_files ti_files\n\n#\trm -f *.o rose_*.C *.sage.C \\\n\n#              *.C.pdf *.C.edg.pdf *.pdf *.dot *.sidl *.int.C rose_directives_list.txt core\n\n#\trm -rf ti_files\n\n#\n\n## This rule is run after automake's internal check rule (which we don't want to use)\n\n#check-local:\n\n#\t@$(MAKE) $(TEST_Objects)\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/dataStructureTraversal/Makefile.am" : {
      "ObjectId" : "c500f2f59efce8c7c3a7d2bde69407e8c8c98114",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Define the template repository path used in the autoconf\n\n# subsitution for various C++ template control variables.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/8/2004): Disabled\n\n# bin_PROGRAMS = cgraphpp\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# list of dependencies for all example programs\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (2/8/2004): Disabled\n\n# cgraphpp_SOURCES = ControlStructure.C  GenGeneration.C  GenRepresentation.C helpFunctions.C  main.C\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (2/8/2004): Disabled\n\n# Can't use $(ROSE_LIBS) since it would make librewrite.a be compiled \n\n# (and it appears after src in the SUBDIRS line).  But then we can't\n\n# compile the cgraphpp translator.  Need tomove the AST_RewriteMechanism \n\n# directory into ROSE/src so that the ordering can be handled in the \n\n# ROSE/src/Makefile.am.  This is too much to do right now.  So it\n\n# is reseverd for the next checkin.\n\n# cgraphpp_DEPENDENCIES = $(EXAMPLE_PROGRAMS_DEPENDENCY_LIST)\n\n# cgraphpp_DEPENDENCIES = \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Code added to permit tests in this directory as part of development\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (2/8/2004): Disabled\n\n#   exampleTest.C\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use of this test code requires specification of EDG include files\n\n# dataStructureTest_1.C\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ROSE_FLAGS = -rose:dot -rose:test 6 -rose:outputGrammarTreeFiles -rose:outputGrammarTreeFilesForHeaderFiles\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# How to run Andreas' graphing preprocessor (note -gall option causes g++ warning -fgall ???)\n\n# 1) cgraphpp --gall exampleTest.C\n\n# 2) dotgl Static_exampleTest.C.dot &\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# helpFunctions.h need to be put into the util directory\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/roseExtensions/failSafe/CMakeLists.txt" : {
      "ObjectId" : "2519dce583c6951b19d64d408dc32405bd72c73e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/failSafe/Makefile.am" : {
      "ObjectId" : "95211f6f1eeba08ffdce146afb4811cc27f26efa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/roseExtensions/highLevelGrammar/CMakeLists.txt" : {
      "ObjectId" : "90275a330d0819ee129cf25f7d55737ec3f05c75",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/highLevelGrammar/Makefile.am" : {
      "ObjectId" : "ba6a73ee2d2c3c27882b891915210be9d7cccd43",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/AsmInstructionBar/CMakeLists.txt" : {
      "ObjectId" : "edc39766c7eb025466d952217a6ab9cddd9111fb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/AsmInstructionBar/Makefile.am" : {
      "ObjectId" : "e0cfaf3abf8cb0b235b9ba1e0bafc3d828f74a5a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ AsmInstructionBar Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/AsmView/CMakeLists.txt" : {
      "ObjectId" : "36d6d5ddd248dfc1c3cd6d47f5b97aa42e53a287",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/AsmView/Makefile.am" : {
      "ObjectId" : "19addf3ed9342338b09d272bb443ade895ac5de4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ AsmView Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/AstBrowserWidget/CMakeLists.txt" : {
      "ObjectId" : "dbe771f1afbf9746f73f57bc1a1e2b07403d42b5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/AstBrowserWidget/Makefile.am" : {
      "ObjectId" : "d50eab8ec38b15ea4f7cf630b4217c93e23c8a38",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ AstBrowserWidget Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/AstGraphWidget/CMakeLists.txt" : {
      "ObjectId" : "f449b961bb9f22fa2bd3830e86801333b48decff",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/AstGraphWidget/Makefile.am" : {
      "ObjectId" : "ffc1025151d67169b9e8adb805182c646bfa8454",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ AstGraphWidget Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/AstProcessing/CMakeLists.txt" : {
      "ObjectId" : "bb9bbf7a8dea1c9905cf49b6e8f56e51a6333adf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/AstProcessing/Makefile.am" : {
      "ObjectId" : "6b4ebd43b4329369524db948863ef71636ddf42c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ AstProcessing Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/BeautifiedAst/CMakeLists.txt" : {
      "ObjectId" : "82868377613be2e5047b470da933d79ebbf972e0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/BeautifiedAst/Makefile.am" : {
      "ObjectId" : "96e4fa4f4cb14b6f5060f280bde9f56c7ba3abd9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ BeautifiedAst Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/CMakeLists.txt" : {
      "ObjectId" : "9ca708dfa7414fe1c6964b3d34a829eee916f224",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/FlopCounter/CMakeLists.txt" : {
      "ObjectId" : "c5b65b4e3035d60db26e23903bb223aacdcf65fe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/FlopCounter/Makefile.am" : {
      "ObjectId" : "d36510ebf3d6a375908d5b3008756d4d18f4ec26",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ FlopCounter Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/InstructionCountAnnotator/CMakeLists.txt" : {
      "ObjectId" : "156ee27222ba12bd247ab4f748727151ee8696e2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/InstructionCountAnnotator/Makefile.am" : {
      "ObjectId" : "a07ceca74886f4dbda5caf0effbeaadad0fd55e5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ InstructionCountAnnotator Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/KiviatView/CMakeLists.txt" : {
      "ObjectId" : "bc78ef7b749c03f038ab2eda9c3ab552263dd09a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/KiviatView/Makefile.am" : {
      "ObjectId" : "20e112f0418c23a4df154624418f9d86e3b1c568",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ KiviatView Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/Makefile.am" : {
      "ObjectId" : "62823c5b17dbde8d638ca1a73a88521227504b36",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Rose Widgets Makefile.am\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#docs: \n\n#\trm -rf doc\n\n#\tmkdir doc \n\n#\tcp  $(top_srcdir)/src/roseExtensions/qtWidgets/doc/* doc/\n\n#\tdoxygen $(top_srcdir)/src/roseExtensions/qtWidgets/doc/doc.doxyfile\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/MetricFilter/CMakeLists.txt" : {
      "ObjectId" : "0c1e52db6843f59c3096e78387bf40376d1b986a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/MetricFilter/Makefile.am" : {
      "ObjectId" : "26a5d9c1ce91a1ebd55eebea8d011252b7b5008f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ MetricFilter Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/MetricsConfig/CMakeLists.txt" : {
      "ObjectId" : "572715bc365fac83f3c1d19ff1653faf135d1484",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/MetricsConfig/Makefile.am" : {
      "ObjectId" : "e661987bd2e969091ece04ee10d34b54b57f656b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ MetricsConfig Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/MetricsKiviat/CMakeLists.txt" : {
      "ObjectId" : "3544132b7de0e349170b85d7ba7cf4f9f33cc32f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/MetricsKiviat/Makefile.am" : {
      "ObjectId" : "33e39959b7f4e0801f9c33a9890998b7ab8af483",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ MetricsKiviat Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/NodeInfoWidget/CMakeLists.txt" : {
      "ObjectId" : "8043d4935479492b16e6f643469ae301fbda42e0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/NodeInfoWidget/Makefile.am" : {
      "ObjectId" : "f2b40f76f11d6ead7620d78903b279a4210c7289",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ NodeInfoWidget Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/ProjectManager/CMakeLists.txt" : {
      "ObjectId" : "b73dc29194f772b58921c633dcde410d87bdea33",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/ProjectManager/Makefile.am" : {
      "ObjectId" : "cbc303e9ee05e12c8cf89e22fa10a63c2c711207",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ ProjectManager Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/PropertyTreeWidget/CMakeLists.txt" : {
      "ObjectId" : "5b72943add5ef8ea6b6b551f1de91a27501a09c8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/PropertyTreeWidget/Makefile.am" : {
      "ObjectId" : "bf794344dd33c7e9cf5938facce02ef0080a1dcd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ PropertyTreeWidget Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/CMakeLists.txt" : {
      "ObjectId" : "7bfb6c6d5c609a1faae4d0f2faac2d64aa413fcb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/Makefile.am" : {
      "ObjectId" : "f52523556cca43e4b1fa1c8416847d7ae9b2226f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ QCodeEditWidget Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Contents of Makefile.am.pre\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# End of Makefile.am.pre Content\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Target for installing header \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/CMakeLists.txt" : {
      "ObjectId" : "d52e9298edeba31b758f3765fe496a3f15c961e1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/Makefile.am" : {
      "ObjectId" : "141b9a27cd4b3738bc43f216b0a5c21fb82111cf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ QCodeEdit Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Contents of Makefile.am.pre\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# End of Makefile.am.pre Content\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Target for installing header \n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/CMakeLists.txt" : {
      "ObjectId" : "83c7f842fdef7726ccacf7a764b581fbcca761e3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##------------ document Makefile.am -----------\n\n#include $(top_srcdir)/src/roseExtensions/qtWidgets/Make.inc \n\n#\n\n#if ROSE_WITH_ROSEQT\n\n#\n\n#noinst_LTLIBRARIES = libdocument.la \n\n#\n\n#\n\n## Contents of Makefile.am.pre\n\n#INCLUDES += -I$(srcdir)/..  -I$(srcdir)/../qnfa -I$(srcdir)/../widgets\n\n#\n\n## End of Makefile.am.pre Content\n\n#\n\n#libdocument_la_SOURCES = qdocument.cpp\\\n\n#                         qdocumentbuffer.cpp\\\n\n#                         qdocumentcommand.cpp\\\n\n#                         qdocumentcursor.cpp\\\n\n#                         qdocumentline.cpp\\\n\n#                         qdocumentsearch.cpp\n\n#\n\n#nodist_libdocument_la_SOURCES = moc_qdocument.cxx\n\n#\n\n#\n\n#\n\n## Target for installing header \n\n#headerTargetdir    =  $(roseQtWidgetsHeaderInstallPath)/QCodeEdit\n\n#headerTarget_HEADERS = qdocument.h\\\n\n#                       qdocument_p.h\\\n\n#                       qdocumentbuffer.h\\\n\n#                       qdocumentcommand.h\\\n\n#                       qdocumentcursor.h\\\n\n#                       qdocumentcursor_p.h\\\n\n#                       qdocumentline.h\\\n\n#                       qdocumentline_p.h\\\n\n#                       qdocumentsearch.h\n\n#\n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = \n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/Makefile.am" : {
      "ObjectId" : "e2fdfe5c1d30772c554b80cc3fdd49263f44a7b2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ document Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Contents of Makefile.am.pre\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# End of Makefile.am.pre Content\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Target for installing header \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/CMakeLists.txt" : {
      "ObjectId" : "1bf0d1a3cb04d986c17a396f1d32ac73bced3303",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##------------ qnfa Makefile.am -----------\n\n#include $(top_srcdir)/src/roseExtensions/qtWidgets/Make.inc \n\n#\n\n#if ROSE_WITH_ROSEQT\n\n#\n\n#noinst_LTLIBRARIES = libqnfa.la \n\n#\n\n#\n\n## Contents of Makefile.am.pre\n\n#INCLUDES += -I$(srcdir)/..  -I$(srcdir)/../document -I$(srcdir)/../widgets \n\n#\n\n## End of Makefile.am.pre Content\n\n#\n\n#libqnfa_la_SOURCES = qnfa.cpp\\\n\n#                     qnfadefinition.cpp\\\n\n#                     xml2qnfa.cpp\n\n#\n\n#\n\n#\n\n#\n\n#\n\n## Target for installing header \n\n#headerTargetdir    =  $(roseQtWidgetsHeaderInstallPath)/QCodeEdit\n\n#headerTarget_HEADERS = light_vector.h\\\n\n#                       qnfa.h\\\n\n#                       qnfadefinition.h\n\n#\n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = \n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/Makefile.am" : {
      "ObjectId" : "152b78047122d6523dca1f88d2e507f8c3d2cc14",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ qnfa Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Contents of Makefile.am.pre\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# End of Makefile.am.pre Content\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Target for installing header \n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/widgets/CMakeLists.txt" : {
      "ObjectId" : "a9d5c2c5670b10645230f2d00e91f82601e6fa72",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##------------ widgets Makefile.am -----------\n\n#include $(top_srcdir)/src/roseExtensions/qtWidgets/Make.inc \n\n#\n\n#if ROSE_WITH_ROSEQT\n\n#\n\n#noinst_LTLIBRARIES = libwidgets.la \n\n#\n\n#\n\n## Contents of Makefile.am.pre\n\n#INCLUDES += -I$(srcdir)/..  -I$(srcdir)/../document -I$(srcdir)/../qnfa \n\n#\n\n## End of Makefile.am.pre Content\n\n#\n\n#libwidgets_la_SOURCES = qcalltip.cpp\\\n\n#                        qeditconfig.cpp\\\n\n#                        qfoldpanel.cpp\\\n\n#                        qformatconfig.cpp\\\n\n#                        qgotolinedialog.cpp\\\n\n#                        qlinechangepanel.cpp\\\n\n#                        qlinemarkpanel.cpp\\\n\n#                        qlinenumberpanel.cpp\\\n\n#                        qpanel.cpp\\\n\n#                        qsearchreplacepanel.cpp\\\n\n#                        qsimplecolorpicker.cpp\\\n\n#                        qstatuspanel.cpp\n\n#\n\n#nodist_libwidgets_la_SOURCES = moc_qeditconfig.cxx\\\n\n#                               moc_qfoldpanel.cxx\\\n\n#                               moc_qformatconfig.cxx\\\n\n#                               moc_qgotolinedialog.cxx\\\n\n#                               moc_qlinechangepanel.cxx\\\n\n#                               moc_qlinemarkpanel.cxx\\\n\n#                               moc_qlinenumberpanel.cxx\\\n\n#                               moc_qpanel.cxx\\\n\n#                               moc_qsearchreplacepanel.cxx\\\n\n#                               moc_qsimplecolorpicker.cxx\\\n\n#                               moc_qstatuspanel.cxx\\\n\n#                               ui_editconfig.h\\\n\n#                               ui_formatconfig.h\\\n\n#                               ui_gotoline.h\\\n\n#                               ui_searchreplace.h\n\n#\n\n#BUILT_SOURCES = ui_editconfig.h\\\n\n#                ui_formatconfig.h\\\n\n#                ui_gotoline.h\\\n\n#                ui_searchreplace.h\n\n#\n\n## Target for installing header \n\n#headerTargetdir    =  $(roseQtWidgetsHeaderInstallPath)/QCodeEdit\n\n#headerTarget_HEADERS = qcalltip.h\\\n\n#                       qeditconfig.h\\\n\n#                       qfoldpanel.h\\\n\n#                       qformatconfig.h\\\n\n#                       qgotolinedialog.h\\\n\n#                       qlinechangepanel.h\\\n\n#                       qlinemarkpanel.h\\\n\n#                       qlinenumberpanel.h\\\n\n#                       qpanel.h\\\n\n#                       qsearchreplacepanel.h\\\n\n#                       qsimplecolorpicker.h\\\n\n#                       qstatuspanel.h\n\n#\n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = editconfig.ui \\\n\n#\tformatconfig.ui \\\n\n#\tgotoline.ui \\\n\n#\tsearchreplace.ui\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/widgets/Makefile.am" : {
      "ObjectId" : "eccf306c094392f282a36fe7ffa2e9d83821a948",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ widgets Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Contents of Makefile.am.pre\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# End of Makefile.am.pre Content\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Target for installing header \n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/qtWidgets/QtGradientEditor/CMakeLists.txt" : {
      "ObjectId" : "e6861d76fca9a2a72a68a38d293d9aa32f22da15",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# dependencies for QtGradientEditor\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/roseExtensions/qtWidgets/QtGradientEditor/Makefile.am" : {
      "ObjectId" : "38cd28b0aafead1c8471007a1fd30f80ba9ae633",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ QtGradientEditor Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/QtGradientEditor/qtcolorbutton.pri" : {
      "ObjectId" : "0e41068f8a4a06ccb97035f7f6d2187913af5da6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/QtGradientEditor/qtgradienteditor.pri" : {
      "ObjectId" : "4cf059e1f27c626824e5f30b16d4525881b65e76",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/RoseCodeEdit/CMakeLists.txt" : {
      "ObjectId" : "689702c00e6c328a8b643c9725c5a8a95787965c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/RoseCodeEdit/Makefile.am" : {
      "ObjectId" : "e60fe0e25b3128b3a883a69a09ede926cc82afaf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ RoseCodeEdit Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/RoseFileSelector/CMakeLists.txt" : {
      "ObjectId" : "eae21690d53da497fecb44b1f07efb5b3b3ff5e7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/RoseFileSelector/Makefile.am" : {
      "ObjectId" : "628f077a908d26aaf1b2af590d4ae3f87c1c01b2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ RoseFileSelector Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/SrcBinView/CMakeLists.txt" : {
      "ObjectId" : "f7bae37b45067ac1556ff2ea01aa5db4f9ef1ea0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/SrcBinView/Makefile.am" : {
      "ObjectId" : "1c341e7808f7c28975d114132adc97e99d39bb91",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ AsmView Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/TaskSystem/CMakeLists.txt" : {
      "ObjectId" : "dda85768b73f413a45a512cc23bf2cc5a5cf18d5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/TaskSystem/Makefile.am" : {
      "ObjectId" : "92bfaba83330d5d5e94b750700b6c75acd1a9ea1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ TaskSystem Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/TreeModel/CMakeLists.txt" : {
      "ObjectId" : "120d04931595cc9b673f254d4aa98e4ec11ada6d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/TreeModel/Makefile.am" : {
      "ObjectId" : "7fa1fc602614497ed0345d11d92d48b17358d12c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ TreeModel Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/WidgetCreator/CMakeLists.txt" : {
      "ObjectId" : "3d986502dadff425cdbddbc854ab550917b1714b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/WidgetCreator/Makefile.am" : {
      "ObjectId" : "7d82eca2dd04c412e5e34789e3566395018c13aa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ WidgetCreator Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/qtWidgets/util/CMakeLists.txt" : {
      "ObjectId" : "242651127dda799ac0c7538064f57e77b8ea5e81",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/qtWidgets/util/Makefile.am" : {
      "ObjectId" : "05f2a02fd56af5560c2df1a826ef19b08c566322",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------ util Makefile.am -----------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target for installing header \n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/CMakeLists.txt" : {
      "ObjectId" : "4e857847aca00062fea31cec6b3397fab9068fbf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/roseHPCToolkit/Makefile.am" : {
      "ObjectId" : "149c95901928fbbe74035fc269be62558ef0094f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Module\n\n#examples is moved to tests/nonsmoke/functional/roseTests/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/docs/CMakeLists.txt" : {
      "ObjectId" : "fd7b9c38cd136557572c93eca80afafc9c5a1f5d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT module documentation\n\n#\n\n#EXTRA_DIST = roseHPCToolkit.docs\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/docs/Makefile.am" : {
      "ObjectId" : "a0c69800bc8bc0c31da347f8015211f3bfec5c3e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT module documentation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/CMakeLists.txt" : {
      "ObjectId" : "f58ce5e8a12475f04226fe132a7dc86c596b3346",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseExtensions/roseHPCToolkit/include/Makefile.am" : {
      "ObjectId" : "9a69f75a8f5439b7c80cfbc47822ba63cc0404c2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/CMakeLists.txt" : {
      "ObjectId" : "3113c703b7f432a3cf8902cb319faa59d9e115be",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT header files\n\n#\n\n#SUBDIRS = util xml profir xml2profir sage profir2sage \\\n\n#          xml-xercesc gprof\n\n#\n\n#include ../../Make.inc\n\n#\n\n#rosehpctinc_HEADERS = rosehpct.hh\n\n#\n\n## eof\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/Makefile.am" : {
      "ObjectId" : "f710bf6e914bb114848e70d356fd85260284347e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/gprof/CMakeLists.txt" : {
      "ObjectId" : "aff711a04d44356fc3a4ba79b4f8511ebf67ff1c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT Sage IR interface submodule -- header files\n\n#\n\n#include ../../../Make.inc\n\n#sageincdir = $(rosehpctincdir)/gprof\n\n#sageinc_HEADERS = gprof_info.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/gprof/Makefile.am" : {
      "ObjectId" : "036236879c5ca3db520c6422957f635842ef6873",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Sage IR interface submodule -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/profir/CMakeLists.txt" : {
      "ObjectId" : "1ca5faedc1e93019def95ac74d294c95db3437f6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT Profile IR submodule -- header files\n\n#\n\n#include ../../../Make.inc\n\n#profirincdir = $(rosehpctincdir)/profir\n\n#profirinc_HEADERS = profir.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/profir/Makefile.am" : {
      "ObjectId" : "8bbdf2377642562c7a7ac59de54692e11195c5a6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Profile IR submodule -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/profir2sage/CMakeLists.txt" : {
      "ObjectId" : "e2d086415eeb8e4db617137a30f91c66d787f329",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT Profile IR-to-Sage IR conversion -- header files\n\n#\n\n#include ../../../Make.inc\n\n#profir2sageincdir = $(rosehpctincdir)/profir2sage\n\n#profir2sageinc_HEADERS = profir2sage.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/profir2sage/Makefile.am" : {
      "ObjectId" : "5528885571d95d26a2c498d7ce3198ab57bf47e8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Profile IR-to-Sage IR conversion -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/sage/CMakeLists.txt" : {
      "ObjectId" : "0720ce7e219a621faf296c505260deb33018d4d6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT Sage IR interface submodule -- header files\n\n#\n\n#include ../../../Make.inc\n\n#sageincdir = $(rosehpctincdir)/sage\n\n#sageinc_HEADERS = sage.hh collectors.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/sage/Makefile.am" : {
      "ObjectId" : "55bf15e2a60e304a4e49536cf9e14132c308500a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Sage IR interface submodule -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/util/CMakeLists.txt" : {
      "ObjectId" : "80922a9225a6295d1103242ea0d7e500b81249a1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT General Utilities -- header files\n\n#\n\n#include ../../../Make.inc\n\n#utilincdir = $(rosehpctincdir)/util\n\n#utilinc_HEADERS = general.hh tree2.hh types.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/util/Makefile.am" : {
      "ObjectId" : "912dd32ea84ef411646c02bc1dbae6c5046be99d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT General Utilities -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/xml-xercesc/CMakeLists.txt" : {
      "ObjectId" : "1ccfc47bf2e51b19565f64b4ab381e49d87fd667",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT XML wrapper around Xerces-C library -- header files\n\n#\n\n#include ../../../Make.inc\n\n#xmlincdir = $(rosehpctincdir)/xml-xercesc\n\n#xmlinc_HEADERS = xml.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/xml-xercesc/Makefile.am" : {
      "ObjectId" : "6517575649e89983f29bca8aed505d38e8f9e8a9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT XML wrapper around Xerces-C library -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/xml/CMakeLists.txt" : {
      "ObjectId" : "6d34850f3c8cc034b1318f6662e1a32d954b2c6b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT XML submodule -- header files\n\n#\n\n#include ../../../Make.inc\n\n#xmlincdir = $(rosehpctincdir)/xml\n\n#xmlinc_HEADERS = xml.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/xml/Makefile.am" : {
      "ObjectId" : "040d5c35ef773d21d0d362de1b711602a98f0429",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT XML submodule -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/xml2profir/CMakeLists.txt" : {
      "ObjectId" : "557f54eb0190e4c2483a001943e722380e0205c6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT Profile IR submodule -- header files\n\n#\n\n#include ../../../Make.inc\n\n#xml2profirincdir = $(rosehpctincdir)/xml2profir\n\n#xml2profirinc_HEADERS = xml2profir.hh\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/include/rosehpct/xml2profir/Makefile.am" : {
      "ObjectId" : "7e992b40c0a4f2754a5d6a3069c02362a4bdfdbe",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Profile IR submodule -- header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/src/CMakeLists.txt" : {
      "ObjectId" : "31f601e61a1c479236be105ec73639e01de9b6f5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT sources\n\n#\n\n#SUBDIRS = util xml profir xml2profir sage profir2sage \\\n\n#          xml-xercesc gprof\n\n#\n\n#include ../Make.inc\n\n#\n\n#EXTRA_DIST = rosehpct.cc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#rosehpctlibdir = $(libdir)\n\n#rosehpctlib_LTLIBRARIES = librosehpct.la\n\n#librosehpct_la_SOURCES = rosehpct.cc\n\n#librosehpct_la_LIBADD = \\\n\n#\tutil/libutil.la \\\n\n#\txml/libxml.la \\\n\n#\tprofir/libprofir.la \\\n\n#\txml2profir/libxml2profir.la \\\n\n#\tsage/libsage.la \\\n\n#\tgprof/libgprof.la \\\n\n#\tprofir2sage/libprofir2sage.la\n\n#\n\n#clean-local:\n\n#\trm -rf $(CXX_TEMPLATE_OBJECTS) Templates.DB ii_files ti_files\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\n\n#endif # ROSE_BUILD_ROSEHPCT\n\n#\n\n## eof\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/src/Makefile.am" : {
      "ObjectId" : "6053b34b8fdee35d8aafdc90aee0c8184414c6de",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROSE_BUILD_ROSEHPCT\n",
        "Line" : 24,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "src/roseExtensions/roseHPCToolkit/src/gprof/CMakeLists.txt" : {
      "ObjectId" : "49a1dc1dcf934c13d645dbf634025cf2ca8aa49c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ROSE-HPCT Sage IR interface -- source files\n\n#\n\n#include ../../Make.inc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libgprof.la\n\n#libgprof_la_SOURCES = gprof_info.cc\n\n#\n\n#else # !ROSE_BUILD_ROSEHPCT\n\n#\n\n#EXTRA_DIST = gprof_info.cc\n\n#\n\n#endif\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/gprof/Makefile.am" : {
      "ObjectId" : "85b1622c90cc9ff6df64712594411feade83b242",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Sage IR interface -- source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/10/2010): ROSE currently fails to generate code for this file (it does however compile for analysis only).\n\n# libgprof_la_SOURCES = gprof_info.cc\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 16,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# eof\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/profir/CMakeLists.txt" : {
      "ObjectId" : "675642a8d3d7efb590c51546d6201480e7e59f10",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ROSE-HPCT Profile IR -- source files\n\n#\n\n#include ../../Make.inc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libprofir.la\n\n#libprofir_la_SOURCES = profir.cc\n\n#\n\n#else # !ROSE_BUILD_ROSEHPCT\n\n#\n\n#EXTRA_DIST = profir.cc\n\n#\n\n#endif\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/profir/Makefile.am" : {
      "ObjectId" : "c9e876cd3105b4cb9ee83e55a61e0b2f270e26b0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Profile IR -- source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 10,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# eof\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/src/profir2sage/CMakeLists.txt" : {
      "ObjectId" : "7f7210cbd5736b7bdc7be0846204393dbbd42896",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ROSE-HPCT Profile IR--to-Sage IR conversion -- source files\n\n#\n\n#include ../../Make.inc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libprofir2sage.la\n\n#libprofir2sage_la_SOURCES = attach.cc\n\n#\n\n#else # !ROSE_BUILD_ROSEHPCT\n\n#\n\n#EXTRA_DIST = attach.cc\n\n#\n\n#endif\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/profir2sage/Makefile.am" : {
      "ObjectId" : "782d141c48c73ead8790690744225e33833e04cc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Profile IR--to-Sage IR conversion -- source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/10/2010): ROSE currently fails to generate code for this file (it does however compile for analysis only).\n\n# libprofir2sage_la_SOURCES = attach.cc\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 16,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# eof\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/sage/CMakeLists.txt" : {
      "ObjectId" : "d741ab909f22e9e8e8a232ebbf3956902ad9c21b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ROSE-HPCT Sage IR interface -- source files\n\n#\n\n#include ../../Make.inc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libsage.la\n\n#libsage_la_SOURCES = collect.cc  depth.cc  metric.cc  propagate.cc\n\n#\n\n#else # !ROSE_BUILD_ROSEHPCT\n\n#\n\n#EXTRA_DIST = collect.cc  depth.cc  metric.cc  propagate.cc\n\n#\n\n#endif\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/sage/Makefile.am" : {
      "ObjectId" : "80f88ad477d807d0b38cc63aaaeb76e8a39ec131",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Sage IR interface -- source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 10,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# eof\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/src/util/CMakeLists.txt" : {
      "ObjectId" : "d89e94363faf7b3aa69c8ac1eaec13d680c3f6c6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ROSE-HPCT General Utilities -- source\n\n#\n\n#include ../../Make.inc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libutil.la\n\n#libutil_la_SOURCES = general.cc\n\n#EXTRA_DIST = tree_demo.cc\n\n#\n\n#else  # !ROSE_BUILD_ROSEHPCT --------------------\n\n#\n\n#EXTRA_DIST = general.cc tree_demo.cc\n\n#\n\n#endif\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/util/Makefile.am" : {
      "ObjectId" : "554c9ec0989122a98105ae482dbcca4b61052988",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT General Utilities -- source\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT --------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# eof\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/src/xml-xercesc/CMakeLists.txt" : {
      "ObjectId" : "38f58f2d19b075041a71662abac9c2b6b8ad8235",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## ROSE-HPCT XML wrappers around Xerces-C library -- sources\n\n#\n\n#include ../../Make.inc\n\n#\n\n##if ROSE_BUILD_ROSEHPCT\n\n##\n\n##noinst_LTLIBRARIES = libxml.la\n\n##libxml_la_SOURCES = elem.cc handler.cc parser.cc util.cc\n\n##\n\n##else # !ROSE_BUILD_ROSEHPCT\n\n#\n\n#EXTRA_DIST = elem.cc handler.cc parser.cc util.cc\n\n#\n\n##endif\n\n#\n\n## eof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/src/xml-xercesc/Makefile.am" : {
      "ObjectId" : "a4ef7289b1c759c7413cdd5df8ac14806d7009dd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT XML wrappers around Xerces-C library -- sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libxml.la\n\n#libxml_la_SOURCES = elem.cc handler.cc parser.cc util.cc\n\n#\n\n#else # !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#endif\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# eof\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/xml/CMakeLists.txt" : {
      "ObjectId" : "92dc79275369213669b673baf32f72664335bdb4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ROSE-HPCT XML -- sources\n\n#\n\n#include ../../Make.inc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libxml.la\n\n#libxml_la_SOURCES = elem.cc handler.cc parser.cc util.cc\n\n#\n\n#else # !ROSE_BUILD_ROSEHPCT\n\n#\n\n#EXTRA_DIST = elem.cc handler.cc parser.cc util.cc\n\n#\n\n#endif\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/xml/Makefile.am" : {
      "ObjectId" : "b957fcc0e1d5e2023e3e0a99ee53e91cefffef54",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT XML -- sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 10,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# eof\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/roseHPCToolkit/src/xml2profir/CMakeLists.txt" : {
      "ObjectId" : "e2d197e7af5154f2cfc3ee7526497d1a8d9e594f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ROSE-HPCT XML-to-Profile IR conversion -- source files\n\n#\n\n#include ../../Make.inc\n\n#\n\n#if ROSE_BUILD_ROSEHPCT\n\n#\n\n#noinst_LTLIBRARIES = libxml2profir.la\n\n#libxml2profir_la_SOURCES = convert.cc factory.cc process.cc query.cc\n\n#\n\n#else # !ROSE_BUILD_ROSEHPCT\n\n#\n\n#EXTRA_DIST = convert.cc factory.cc process.cc query.cc\n\n#\n\n#endif\n\n#\n\n## eof\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseExtensions/roseHPCToolkit/src/xml2profir/Makefile.am" : {
      "ObjectId" : "128508208aa5a3132bf9976b7cd714d2179284e4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT XML-to-Profile IR conversion -- source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 10,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# eof\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseExtensions/sqlite3x/CMakeLists.txt" : {
      "ObjectId" : "5023923d5f9ef387c423ddd141419932a87204bb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Must link to roseUtil in order to have access to ROSE_AUTOMAKE_* strings\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/roseExtensions/sqlite3x/Makefile.am" : {
      "ObjectId" : "ce0a86aa77a99455fb05f2b2e811b946cb090eae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# The SQLite3x library, a C++ wrapper around the libsqlite3 C API.  This is an old version of libsqlite3x, but the\n\n# API changed in newer versions, so we're sticking with the old version.  We've also made a few changes to it ourselves.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SQLite3 is missing some common string and arithmetic functions, but we can provide them through a dynamic plugin.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseIndependentSupport/CMakeLists.txt" : {
      "ObjectId" : "ed80ca7f23357ae9cc20b969d8774b2f6c92c9f2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/roseIndependentSupport/Makefile.am" : {
      "ObjectId" : "b4175bfcdbd59cbd2f28d5c9b23fba3a6410e696",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (1/18/2008): The visualization work is not superseded by zgrviewer which is availalble on the web.\n\n#                 The graphics directory contains an old STL based graphics interface that is no longer \n\n#                 used. A newer design is being implemented to support graphs in ROSE.\n\n#                 The dot2gml is only compiled if the DOT_TO_GML_TRANSLATOR configure option is used\n\n#                 The graphicalUserInterface is compiled only if the ROSE_USE_QROSE configure option is used\n\n# SUBDIRS = graphicalUserInterface graphics visualization dot2gml\n\n# SUBDIRS = graphicalUserInterface dot2gml\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/roseIndependentSupport/dot2gml/CMakeLists.txt" : {
      "ObjectId" : "c1279895aeab28ff0b36af9e97729892c04c5a15",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#AM_YFLAGS = -d\n\n#\n\n## \"if\" for DOT_TO_GML_TRANSLATOR (AutoMake conditional block)\n\n#if DOT_TO_GML_TRANSLATOR\n\n#\n\n#bin_PROGRAMS = dot2gml\n\n#\n\n#dot2gml_SOURCES = \\\n\n#     main.C parseDot.ll parseDotGrammar.yy\n\n#\n\n#BUILT_SOURCES = parseDotGrammar.h\n\n#DISTCLEANFILES = parseDotGrammar.h parseDotGrammar.cc parseDot.cc\n\n#\n\n## Header files that need to be included in the distribution\n\n#include_HEADERS = parse_header.h\n\n#\n\n#clean-local:\n\n#\trm -f *.o *~ *.gml\n\n#\n\n## DQ (9/10/2005): This should be moved to the tests directory\n\n##check:\n\n##\t./dot2gml $(srcdir)/onefileonly.C.dot\n\n#\n\n#endif\n\n#\n\n#EXTRA_DIST = parse_header.h parseDot.ll parseDotGrammar.yy README main.C \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseIndependentSupport/dot2gml/Makefile.am" : {
      "ObjectId" : "7517e5e3aecf64e0b448c056461ef9582ace0382",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# \"if\" for DOT_TO_GML_TRANSLATOR (AutoMake conditional block)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files that need to be included in the distribution\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/10/2005): This should be moved to the tests directory\n\n#check:\n\n#\t./dot2gml $(srcdir)/onefileonly.C.dot\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseIndependentSupport/graphics/CMakeLists.txt" : {
      "ObjectId" : "b6e6f2939e043c65996ac40519ec0a92867fc9e4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## Header files that need to be included in the distribution\n\n## include_HEADERS = \\\n\n##     DOTGraphInterface.h \\\n\n##     DOTSubgraphRepresentation.h \\\n\n##     DOTSubgraphRepresentation.C \\\n\n##     stlDOTgraph.h \\\n\n##     stlgraph.h\n\n#\n\n#include_HEADERS = \\\n\n#     stlDOTgraph.h \\\n\n#     stlgraph.h\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/roseIndependentSupport/graphics/Makefile.am" : {
      "ObjectId" : "92330a7dd64ae79bcef52edff3b01a6f351e5aa3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Header files that need to be included in the distribution\n\n# include_HEADERS = \\\n#     DOTGraphInterface.h \\\n#     DOTSubgraphRepresentation.h \\\n#     DOTSubgraphRepresentation.C \\\n#     stlDOTgraph.h \\\n#     stlgraph.h\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/roseIndependentSupport/visualization/CMakeLists.txt" : {
      "ObjectId" : "f072da9281bb4b2a04c9970b1eecd4fe3bd9ea38",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n##  ROSE_USE_VISUALIZATION\n\n#if ROSE_USE_VISUALIZATION\n\n#\n\n## FLTK_INCLUDE     = -I/home/thuerey1/local/include/ \n\n## GRAPHVIZ_INCLUDE = -I/home/thuerey1/local/include/graphviz\n\n## OPENGL_INCLUDE   =\n\n## FLTK_LIBS     = -L/home/thuerey1/local/lib/ -L/usr/X11R6/lib -lfltk -lfltk_gl -lX11\n\n## GRAPHVIZ_LIBS = -L/home/thuerey1/local/lib/graphviz  -ldotneato -lfreetype -lpng -ljpeg -lz\n\n## OPENGL_LIBS   = -lGL -lGLU -lglut\n\n#\n\n#FLTK_INCLUDE     = -I@FLTK_include_path@\n\n#GRAPHVIZ_INCLUDE = -I@GraphViz_include_path@\n\n#GLUT_INCLUDE     = -I@GLUT_include_path@\n\n#\n\n#FLTK_LIBS     = -L@FLTK_libs_path@ -L/usr/X11R6/lib -lfltk -lfltk_gl -lX11\n\n#GRAPHVIZ_LIBS = -L@GraphViz_libs_path@ -ldotneato -lfreetype -lpng -ljpeg -lz\n\n#GLUT_LIBS     = -L@GLUT_libs_path@\n\n#OPENGL_LIBS   = -lGL -lGLU -lglut\n\n#\n\n##FLTK_LIBS     = -lfltk -lfltk_gl -lX11\n\n##GRAPHVIZ_LIBS = -ldotneato -lfreetype -lpng -ljpeg -lz\n\n##OPENGL_LIBS   = -lGL -lGLU -lglut\n\n#\n\n## DQ (4/20/2005): New variables that are required (from Andreas)\n\n## LDFLAGS = -L/usr/local/lib/graphviz/ -L/usr/lib/ -L/usr/X11/lib/ -L/usr/local/lib/\n\n## LD_INCLUDE_PATH = /usr/lib/:/usr/include/:/usr/local/include/graphviz:/usr/X11/include/:$LD_INCLUDE_PATH\n\n## CPPFLAGS = -I/usr/local/include/graphviz/ -I/usr/include/ -I/usr/X11/include/\n\n## CFLAGS   = -I/usr/local/include/graphviz/ -I/usr/include/ -I/usr/X11/include/\n\n#\n\n## LDFLAGS = -L/usr/local/lib/graphviz/ -L/usr/lib/ -L/usr/X11R6/lib/ -L/usr/local/lib/\n\n## CPPFLAGS = -I/usr/local/include/graphviz/ -I/usr/X11R6/include/\n\n## CFLAGS   = -I/usr/local/include/graphviz/ -I/usr/X11R6/include/\n\n#\n\n#INCLUDES =  $(FLTK_INCLUDE) $(GRAPHVIZ_INCLUDE) $(GLUT_INCLUDE) $(OPENGL_INCLUDE)\n\n#\n\n#bin_PROGRAMS = dotgl\n\n#\n\n#dotgl_SOURCES = \\\n\n#     dotvisualizer.cpp \\\n\n#     glcodegen.cpp \\\n\n#     glf.c \\\n\n#     graphinfo.cpp \\\n\n#     mapcodegen.cpp \\\n\n#     vizgroup.cpp \\\n\n#     main.cpp\n\n#\n\n#DEPENDENCIES = \n\n#\n\n## Header files that need to be included in the distribution\n\n#include_HEADERS = \\\n\n#     dotvisualizer.h \\\n\n#     glcodegen.h \\\n\n#     glf.h \\\n\n#     graphinfo.h \\\n\n#     mapcodegen.h \\\n\n#     style.h \\\n\n#     vizgroup.h \\\n\n#     ntl_vector3dim.h\n\n#\n\n## LDFLAGS = -Xlinker -rpath/home/thuerey1/local/lib/ -Xlinker -rpath/usr/X11R6/lib -Xlinker -rpath/home/thuerey1/local/lib/graphviz\n\n#LDADD =  $(FLTK_LIBS) $(GRAPHVIZ_LIBS) $(GLUT_LIBS) $(OPENGL_LIBS) -lm\n\n#\n\n## Extra flags specified exlicitly\n\n#AM_CXXFLAGS = -Wno-unknown-pragmas\n\n## CXXFLAGS = -g -Wall -Wno-unknown-pragmas\n\n#\n\n#endif\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/roseIndependentSupport/visualization/Makefile.am" : {
      "ObjectId" : "f79a8245dedacf727d52618570c1dadca998a780",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#  ROSE_USE_VISUALIZATION\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FLTK_INCLUDE     = -I/home/thuerey1/local/include/ \n\n# GRAPHVIZ_INCLUDE = -I/home/thuerey1/local/include/graphviz\n\n# OPENGL_INCLUDE   =\n\n# FLTK_LIBS     = -L/home/thuerey1/local/lib/ -L/usr/X11R6/lib -lfltk -lfltk_gl -lX11\n\n# GRAPHVIZ_LIBS = -L/home/thuerey1/local/lib/graphviz  -ldotneato -lfreetype -lpng -ljpeg -lz\n\n# OPENGL_LIBS   = -lGL -lGLU -lglut\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FLTK_LIBS     = -lfltk -lfltk_gl -lX11\n\n#GRAPHVIZ_LIBS = -ldotneato -lfreetype -lpng -ljpeg -lz\n\n#OPENGL_LIBS   = -lGL -lGLU -lglut\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (4/20/2005): New variables that are required (from Andreas)\n\n# LDFLAGS = -L/usr/local/lib/graphviz/ -L/usr/lib/ -L/usr/X11/lib/ -L/usr/local/lib/\n\n# LD_INCLUDE_PATH = /usr/lib/:/usr/include/:/usr/local/include/graphviz:/usr/X11/include/:$LD_INCLUDE_PATH\n\n# CPPFLAGS = -I/usr/local/include/graphviz/ -I/usr/include/ -I/usr/X11/include/\n\n# CFLAGS   = -I/usr/local/include/graphviz/ -I/usr/include/ -I/usr/X11/include/\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# LDFLAGS = -L/usr/local/lib/graphviz/ -L/usr/lib/ -L/usr/X11R6/lib/ -L/usr/local/lib/\n\n# CPPFLAGS = -I/usr/local/include/graphviz/ -I/usr/X11R6/include/\n\n# CFLAGS   = -I/usr/local/include/graphviz/ -I/usr/X11R6/include/\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Header files that need to be included in the distribution\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# LDFLAGS = -Xlinker -rpath/home/thuerey1/local/lib/ -Xlinker -rpath/usr/X11R6/lib -Xlinker -rpath/home/thuerey1/local/lib/graphviz\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Extra flags specified exlicitly\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CXXFLAGS = -g -Wall -Wno-unknown-pragmas\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/roseSupport/CMakeLists.txt" : {
      "ObjectId" : "40076fd800cd379932aa820b851938d5d819873c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### build library ###############\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/roseSupport/Makefile.am" : {
      "ObjectId" : "0d34b7ef856210ccc0d673466ec36a8e981cdcb4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Don't use the repository in ../src\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The stringify.h and stringify.C files contain functions for converting an enum constant into a string. We once had\n\n# this configured to rebuild these two files for every fresh build, but there's no good reason that end users need to\n\n# run this command when developers can do it instead.  On a reasonable machine it takes around a minute; on a misconfigured\n\n# Ubuntu 14.04 it takes >12 hours.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All files mentiond in BUILT_SOURCES will be built before the normal compilation rules run.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (10/11/2007): This used to be part of the template instationation mechanism, but it was \n\n# based on nm and was not robust.  Instead we instantiate all templates and figure out which \n\n# are truely required.\n\n# templateSupport.h\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "0acb7433c71a10f836cc394d8ba2058026cd6945",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######## Generate rose_paths.C #########\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Simplifies variable reference and escape sequence evaluation in the following file generating commands.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FIXME: may be a different directory at times. Not sure what the semantics are.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# needed to properly define ROSE_UTIL_API\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "######## build sub libraries ##########\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "######## build main library ###########\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########### install files ###############\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/util/Makefile.am" : {
      "ObjectId" : "c1426ef1f300e144e05eeece911ed14813348dd8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AUTOMAKE_OPTIONS = subdir-objects\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Don't use the repository in ../src\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (7/4/2004): Need this to be explicit so that it will not be set to \"libroseutil.a.c\"\n\n# DIST_SOURCES =\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# lib_LIBRARIES = libroseutil.a\n\n# libroseutil_a_DEPENDENCIES = $(libroseutilDependencies)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (4/5/2009): I have moved rose_paths.h file from src/frontend/SageIII to src/util\n\n# so that it is better matched with where the source file is build (even though the\n\n# source file is generated in the associated compile tree instead of the source tree).\n\n# The rose_paths.[hC] data is referenced by both ROSETTA and ROSE (so it is located in src/util).\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# libroseutil_la_SOURCES = processSupport.C processSupport.h\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (4/5/2009): I don't think this needs to be specified using this Automake technique.\n\n# The use of this technique for force rose_paths.C to be built was also what was causing\n\n# large parts of ROSE to be rebuilt when configure was return (this appears to be fixed now).\n\n# BUILT_SOURCES = rose_paths.C\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (4/5/2009): Added rose_paths.C to clean rule, instead of to the DISTCLEANFILES\n\n# DISTCLEANFILES = rose_paths.C\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "########################################################################################################################\n\n# rules for the Sawyer subdirectory\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# These are used in the doxygen documentation examples\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# # This rule should really be in the subdirectory's makefile, but if we place it there\n\n# # it won't work because the library on which the tool depends is built in this directory.\n\n# bin_PROGRAMS += stringify-enums\n\n# stringify_enums_SOURCES = Sawyer/stringifyEnums.C\n\n# stringify_enums_LDFLAGS = libroseSawyer.la $(filter-out %/librose.la, $(ROSE_LIBS))\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################################################################\n\n# automake boilerplate\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (4/5/2009): Added rose_paths.C to clean rule, instead of to the DISTCLEANFILES\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/util/Sawyer/CMakeLists.txt" : {
      "ObjectId" : "99820a70fbc23188aba1ed671e0f877eeddb43a2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# installed in $PREFIX/Sawyer, not $PREFIX/rose/Sawyer.\n",
        "Line" : 16,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 1
    },
    "src/util/commandlineProcessing/CMakeLists.txt" : {
      "ObjectId" : "3c04bc0e15b39b5652355c1044f4cd747027faa4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/util/commandlineProcessing/Makefile.am" : {
      "ObjectId" : "f20a6f776cc45b4cf0006731afd7b83d6fd782e5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Don't use the repository in ../src\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libRoseCommandlineUtilSources = commandline_processing.C sla.c sla++.C\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# lib_LIBRARIES = libRoseCommandlineUtil.a\n\n# libRoseCommandlineUtil_a_SOURCES  = $(libRoseCommandlineUtilSources)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We have to explicily build this rule since we want to avoid the use of \"ar cru\"\n\n# (need to use the C++ compiler so that templates will be built)\n\n# libRoseCommandlineUtil.a: $(libRoseCommandlineUtil_a_OBJECTS)\n\n#\t-rm -f $@\n\n#\t$(CXX_STATIC_LIB_UPDATE) $@ $(libRoseCommandlineUtil_a_OBJECTS)\n\n#\t$(RANLIB) $@\n\n#\ttest -f $@ || exit 1\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#libRoseCommandlineUtil.so: $(libRoseCommandlineUtil_so_OBJECTS)\n\n#\t-rm -f $@\n\n#\t$(CXX_SHARED_LIB_UPDATE) $@ $(libRoseCommandlineUtil_so_OBJECTS)\n\n#\ttest -f $@ || exit 1\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/28/2010): New binary AST merge tests.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# READ_TRANSLATOR = $(top_builddir)/tests/nonsmoke/functional/parallelASTMerge\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t$(READ_TRANSLATOR) $(libRoseCommandlineUtilSources)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/util/graphs/CMakeLists.txt" : {
      "ObjectId" : "bdc053c4640c7886e0b3682ca2460e1609b3b9d1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/util/graphs/Makefile.am" : {
      "ObjectId" : "ed44659449c5349fb2780d155da7da61e2bfddef",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# lib_LIBRARIES = libgraphs.a\n\n# libgraphs_a_SOURCES  = $(libgraphsSources)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use BOOST_CPPFLAGS because that's where the \"-pthread\" switch is if user wants multi-thread support.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/util/stringSupport/CMakeLists.txt" : {
      "ObjectId" : "79a71b0d015a4e9f92b385d1952b4db375e3991a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/util/stringSupport/Makefile.am" : {
      "ObjectId" : "b2974cd9a71f69d6190dd7454f0418bcc45c3ed4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tell automake install to copy this library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (2/8/2010): This reproduces a bug from before the FileNameClassifier.C was cleaned up.\n\n# The code that failes has been added as: test2010_01.C in the tests/nonsmoke/functional/CompileTests/Cxx_tests directory.\n\n# testBug: bug_FileNameClassifier.o\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/util/support/CMakeLists.txt" : {
      "ObjectId" : "0d2c818048723f48a7e27bdb9412fdbffb712d2b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/util/support/Makefile.am" : {
      "ObjectId" : "22f1a4669699313c64a953a7bd7b6fdedfbde7fa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CPPFLAGS = -I$(top_srcdir)/src/frontend/SageIII\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/src/frontend/SageIII\n\n# INCLUDES = -I$(top_srcdir)/src/frontend/SageIII\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that CPPFLAGS works where AM_CPPFLAGS fails (fixed in config/Makefile.for.ROSE.includes.and.libs).\n\n# CPPFLAGS = -I$(top_srcdir)/src/frontend/SageIII\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## The grammar generator (ROSETTA) should use its own template repository\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compile with BOOST_CPPFLAGS because that's where the \"-pthread\" switch is if user wants mult-thread support.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "a0e534241a7571a8a28edbddced2a631dc0faee9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CompileTests/Makefile.am" : {
      "ObjectId" : "baed319a785355c38d223a2fab0a2488edbd746d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Temporary makefile for Jenkins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tDQ (3/7/2017): These tests are already run (in nonsmoke/functional) or skipped for specific versions of EDG and certain compilers.\n\n#\t(e.g. EDG 4.9 and Clang, for which we require EDG 4.12 or later version of EDG).\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/CompileTests/OpenMP_tests/Makefile.am" : {
      "ObjectId" : "16b21e9daf77d31479aae1ac9e96c7be813134dd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Temporary makefile for Jenkins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tDQ (3/7/2017): These tests are already run (in nonsmoke/functional) or skipped for specific versions of EDG and certain compilers.\n\n#\t(e.g. EDG 4.9 and Clang, for which we require EDG 4.12 or later version of EDG).\n\n#\t$(MAKE) $(AM_MAKEFLAGS) -C $(top_builddir)/tests/nonsmoke/functional/CompileTests/OpenMP_tests $@\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/CompileTests/x10_tests/Makefile.am" : {
      "ObjectId" : "2a920651d2765d2d757a1d9a8191612355a423c8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Temporary makefile for Jenkins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tDQ (3/7/2017): These tests are already run (in nonsmoke/functional) or skipped for specific versions of EDG and certain compilers.\n\n#\t$(MAKE) $(AM_MAKEFLAGS) -C $(top_builddir)/tests/nonsmoke/functional/CompileTests/x10_tests $@\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/Makefile.am" : {
      "ObjectId" : "7fef8cc6759071e42bbfba5403767e0304f80d2e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# These are temporary for Jenkins\n\n# DQ (3/7/2017): These tests are already run (in nonsmoke/functional) or skipped for specific versions of EDG and certain compilers.\n\n# (e.g. EDG 4.9 and Clang, for which we require EDG 4.12 or later version of EDG).\n\n# SUBDIRS += CompileTests roseTests\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/CMakeLists.txt" : {
      "ObjectId" : "cf1140c98e0dc80bff901033576b38938166bd03",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/ExamplesForTestWriters/Makefile.am" : {
      "ObjectId" : "50c5253941ff9f78ce8960504962152bf5681f53",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This makefile serves as the canonical example for writing tests.  When creating your own, don't both\n\n# copying these extensive comments -- refer back to this file instead if you want.\n\n#\n\n# See also, tests/smoke/ExamplesForTestWriters/Makefile.am\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################################################################\n\n# Prologue\n\n#\n\n# All makefiles start with these tidbits.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Definitions for lots of common things.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if you are building ROSE translators, remember to set include path and libraries.\n\n#AM_CPPFLAGS = $(ROSE_INCLUDES)\n\n#AM_LDFLAGS = $(ROSE_RPATHS)\n\n#LDADD    = $(ROSE_LIBS)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Forward declarations so we can use make's \"+=\" operator.  We use \"noinst_PROGRAMS\" instead of \"bin_PROGRAMS\" because\n\n# we generally don't want checkers used in testing to be installed by \"make install\".  The \"TEST_TARGETS\" variable\n\n# will be a list of all the make targets that should be run: one for each test where a \"test\" is some \"checker\" run\n\n# with one input \"specimen\" (or no inputs).\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################################################################################################\n\n# Input specimens.\n\n#\n\n# Many checkers (programs that test something) process a specimen (input) in order to test (verify) that some feature\n\n# or ROSE works as expected.  If a specimen is expected to be used by many checkers in many directories, then put the\n\n# specimen in a directory that contains only specimens. For non-smoke binary analysis specimens, that directory is\n\n# $ROSE/tests/nonsmoke/specimens/binary.  On the other hand, if you expect a specimen to be useful only to checkers\n\n# in one directory you might as well keep the two together for easier maintenance.\n\n#\n\n# A directory containing only specimens should organize those specimens into a list (or lists) that are stored in\n\n# a \"Specimens.inc\" file that can be included into a makefile. All variables in a Specimen.inc file should have a\n\n# common prefix so makefiles can include Specimen.inc files from multiple directories.  For instance, the variables\n\n# defined in $ROSE/tests/nonsmoke/specimens/binary/Specimens.inc all start with \"nonsmoke_specimens_binary_\".  Other\n\n# specimen directories should use a similar naming scheme (i.e., prefix reflects location in the directory hierarchy).\n\n#\n\n# Note about binary secimens in particular: The Specimens.inc file organizes the binary specimens into lists by\n\n# container, file-type, and architecture as in \"nonsmoke_specimens_binary_elf_exe_x86\". There's also a SpecimenSets.inc\n\n# file generated from Specimens.inc which creates wild-card lists using \"any\" for one or more of the parts of the\n\n# variable names, as in \"nonsmoke_specimens_binary_elf_exe_any\" which means any ELF executable regardless of architecture.\n\n# This example includes the latter file, which indirectly includes the former.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########################################################################################################################\n\n# A checker to test that something compiles.\n\n#\n\n# This is the simplest kind of checker -- all we do is make sure it compiles, and we never try to run it.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################################################################\n\n# A checker taking no specimen (i.e., a single test)\n\n#\n\n# The next level of checker is one that we compile and run, but it doesn't need to process any specimens.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# In this case, the test is one checker run with no specimens. We'll use the checker name as the basis for the\n\n# make target. The convention is that test targets end with \".passed\", and that the list of all targets is saved\n\n# in a make variable named $(TEST_TARGETS).\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The test itself should depend on the checker and all specimens (in this case none). The command should be to run\n\n# the ROSE Test Harness (RTH). It's documentation can be found by running \"$ROSE/scripts/rth_run.pl --help\". In short,\n\n# it takes variables of the form \"VAR=VALUE\", the name of some RTH configuration file, and the name of the make target.\n\n# RTH substitutes the variables in the config file, processes the test, and saves the output either in the make target\n\n# or a file created by substituting \".passed\" with \".failed\".  In this example, the test_exit_status config file needs\n\n# variables for the test title (output by $(RTH_RUN)), the command to run, and whether to run the command in its own\n\n# temporary directory (useful for parallel runs and cleaning up).  The title should always include \"[$@]\" so a\n\n# user/developer knows how to run this test individually without needing to understand the makefile. $(RTH_RUN) will\n\n# add the word \"TEST\" to the beginning of your title, so use something that's not awkward.\n\n#\n\n# You might ask, \"Why are we hiding the commands behind a complicated test harness layer instead of executing them\n\n# directly from the makefile?\"  Here's what $(RTH_RUN) gets us:\n\n#   1. It keeps the make output quiet by emitting standard output/error only if the test fails.\n\n#   2. When it does emit output, each line is prefixed by the test name (important for parallel testing)\n\n#   3. It stores the standard input and output of each test in its own *.passed or *.failed file for later perusal\n\n#   4. It honors the \"V=0\" and \"V=1\" verbosity settings of make\n\n#   5. It captures and saves the shell command(s) in the *.passed or *.failed file\n\n#   6. It knows how to compare standard output with a precomputed, known, good answer file using \"diff\" and filters\n\n#   7. It can run tests is temporary directories, which is useful for parallel testing and cleanup\n\n#   8. A test can be disabled with a single-line explaination in the makefile and will show up in make's output\n\n#   9. It enforces a timeout on the commands, which is important for automated testing in Jenkins and the matrix\n\n#  10. It can optionally skip tests if the machine on which they run has too little memory\n\n#  11. It can organize tests so that they don't need to run again if they already passed (i.e., *.passed exists)\n\n#  12. Tests can share RTH configuration files so commands don't need to be repeated in the makefile.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################################################################\n\n# A checker taking specified specimens (i.e., many tests)\n\n#\n\n# Here's a checker that runs on three specific specimens. It's written using pattern rules so that the specific\n\n# specimens can be easily changed, although in such a small example it might be clearer to list all three tests\n\n# explicitly.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (3/12/2017): Interestingly, this test will detect if the CXX variable was specficied with \"clang\" or \"clang++\".\n\n# With \"clang++\" specified on the configure command-line for ROSE this works fine.\n\n# if !USING_CLANG_COMPILER\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# endif\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The explicit list of specimens. If you have specimens coming from multiple specimen directories you'll have to\n\n# include the directory name and make special provisions below to prevent conflicts in the test target names.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Create test target names by combining the checker name with the specimen name.  There are three specimens, thus\n\n# we'll have three test names corresponding to three make targets. Again, we use the convention that test targets\n\n# always end with \".passed\".\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For this example, we expect our checker to produce some output and we want to match that output against a\n\n# known, good answer.  The convention for $(RTH_RUN) is that the answer is stored in the same directory as\n\n# the checker and that they have the extension \".ans\".  It's fine (and works) to use some other convention, although\n\n# doing so ends up being slightly more work in the long run.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Declare the make targets for these tests using a pattern rule. Each test target depends on the checker, the\n\n# input specimen, and the expected answer that corresponds with the test. The \"$*\" in the body expands to whatever\n\n# the \"%\" matches in the pattern, which in this example is the specimen file name (without directory).  One could\n\n# simplify this rule by making better use of $<, $^, and other make variables. The \"USE_SUBDIR=yes\" reminds us that\n\n# file names passed to $(RTH_RUN) must be absolute; if the checker doesn't produce any output files then it might be\n\n# easier to just run it in the current working directory (you could do that regardless, but then you're responsible\n\n# for cleaning up after it without indiscriminately removing any additional files that a developer might have put\n\n# there himself -- don't just say things like \"rm *.o\"!).\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This step is optional, but sometimes it's useful to have additional make targets for running one group of tests,\n\n# such as this checker run on these three specimens.  You can use whatever names you like (this is your makefile), but\n\n# my approach is to use \"check-<checkername>\"\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################################################################\n\n# A checker that runs on many specimens (i.e., many tests)\n\n#\n\n# Here's a more complicated example that runs one checker on many specimens with the specimen list coming from some\n\n# other location. As the list is updated we automatically create more tests.\n\n#\n\n# We'll use the same \"parser\" checker as above, so no need for adding it noinst_PROGRAMS again.  However, we will need\n\n# to use some other prefix for our variables, such as \"parser2\".\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Our specimens are all ELF executables except those for the MIPS architecture. This wildcard matching is why we've\n\n# included SpecimenSets.inc instead of (or really, in addition to) Specimens.inc. The pattern is\n\n# nonsmoke_specimens_binary_<container>_<filetype>_<architecture>. Another common example is filtering out specific\n\n# specimens that you know are not meant to work (not shown here).\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Create the list of test targets\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Create the make target rules. This time we don't compare with an answer file because it would mean that if someone\n\n# added a new specimen they'd need to know how to also create a new answer file. Binary analysis often takes this\n\n# approach (using answers) but everyone that would add a new binary specimen also knows how to create and manually\n\n# verify the answers for each checker.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# A rule for running just these tests\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "########################################################################################################################\n\n# A smoke checker that needs to run on non-smoke specimens\n\n#\n\n# This time we have a checker on the smoke side (presumably because it needs to be run on some smoke specimens) that\n\n# we also want to run on some non-smoke specimens.  The only change that needs to be made is that instead of compiling\n\n# the checker in this directory, we need to compile it in the smoke directory.  If you have a lot of this situation then\n\n# it's convenient to declare these two variables at the top of this non-smoke makefile:\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Smoke directories corresponding to our non-smoke $(srcdir) and $(blddir) directories\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# If the checker's dependencies are simple, here's the easy way to build it.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Get a list of specimens. We'll hard code a list this time.\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Create the test targets\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# The test rules need to depend on the checker in the smoke build directory\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# A rule for running just these tests\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "########################################################################################################################\n\n# Boilerplate.\n\n#\n\n# All testing makefiles have the following stuff, although it might vary a little.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "tests/nonsmoke/Makefile.am" : {
      "ObjectId" : "48291c8ca0d96d2f43146508dfbcbe7deaab7c40",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/acceptance/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/BinaryAnalysis/Dwarf_tests/CMakeLists.txt" : {
      "ObjectId" : "ad7cb349c78abc2f0081f357ddc995ca43e4f71d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########### install files ###############\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/BinaryAnalysis/Dwarf_tests/Makefile.am" : {
      "ObjectId" : "05472d373d13dcece3627039631796df91ea166b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Removd dwarfDumpMinimal from list of programs compiled by default because it is not part of libdwarf, but rather a\n\n# separate package and therefore shouldn't be tied to the --with-dwarf configuration switch.\n\n#noinst_PROGRAMS = dwarfReader roseDwarfReader dwarfDumpMinimal\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Untested, but was missing from makefile (detected by policy checks) [Robb P. Matzke 2015-09-16]\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Collect using: \"size /sbin/* | sort -rn\"\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use \"-g3\" to get macro information into Dwarf (default is \"-g2\").\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#BINARY_ANALYSIS_FLAGS = -rose:read_executable_file_format_only\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a test of the reader where these is no dwarf information in the binary executable (negative test)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ******************************************************\n\n#              Standard Makefile Content\n\n# ******************************************************\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n\n#\t$(VALGRIND) ./binaryReader $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.c)\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "tests/nonsmoke/functional/BinaryAnalysis/Makefile.am" : {
      "ObjectId" : "e97d114693f999b671d57de02164cd5d5c445a9e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Forward declarations\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of binary specimens\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Corresponding smoke directory\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some tests are disabled for certain combinations of compiler vendor, compiler version, and compiler language. We do that\n\n# by calling this program, which returns a non-empty string describing why something is disabled, or an empty string if\n\n# not disabled. Furthermore, if a test cannot even be compiled for a certain combination, we use conditionalDisable.h in\n\n# the test program itself to cause it to compile an alternative main which prints a message and aborts.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################################################################\n\n# Check parsing of symbolic expressions via Rose::BinaryAnalysis::SymbolicExprParser\n\n###############################################################################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###############################################################################################################################\n\n# Parses an executable to produce a dump file (*.dump), an assembly file (rose_*.s), and a new executable created by unparsing\n\n# the AST (*.new). The *.new file is typically identical to the original executable. This is essentially the same as\n\n# tutorial/identityTranslator and is used by some of the other binary tests in this directory.\n\n###############################################################################################################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################################################################\n\n# Tests for BinaryAnalysis::ControlFlow class.\n\n###############################################################################################################################\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################################################################\n\n# Test the binary CFG that points to instructions rather than basic blocks. No test is necessary since this\n\n# is tested by testControlFlow already.  The cfg2.C file serves mostly as a clear example of how to generate an\n\n# instruction-based CFG and write it to a GraphViz file along with some extra info on each vertex.\n\n###############################################################################################################################\n\n# FIXME ROSE-475 [Robb P. Matzke 2016-08-31]: This is an example, not a test. Move it to the documentation instead.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################################################################\n\n# Tests for the BinaryAnalysis::FunctionCall class.\n\n###############################################################################################################################\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################################################################\n\n# Tests ELF string table reallocation functions by changing some strings.  At first glance this would appear to be something\n\n# quite easy to do, but it turns out to involve lots of details.\n\n###############################################################################################################################\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###############################################################################################################################\n\n# Reads in an ELF executable and changes the byte order from little-endian to big-endian or vice versa and writes out a new\n\n# file. Note that the byte order change affects the ELF file format but not the executable described by that format.\n\n###############################################################################################################################\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###############################################################################################################################\n\n# Reads in an ELF executable and changes the word size from eight to four bytes or vice versa and writes out a new file. Note\n\n# that the word size change affects the ELF file format but not the executable described by that format.\n\n###############################################################################################################################\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "###############################################################################################################################\n\n# Demonstrates how to change names of dynamically-linked functions. This example reads an ELF executable dynamically linked to\n\n# the MPI library and changes all calls to PMPI_* functions with calls to XMPI_* functions. See the top of the source file\n\n# for more details.\n\n###############################################################################################################################\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###############################################################################################################################\n\n# Demonstrates how to build an ELF executable from scratch. Lots of comments in the source code. The resulting file is executable\n\n# on an x86 Linux using syscall 1 to exit with a particular value.\n\n###############################################################################################################################\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "###############################################################################################################################\n\n# Demonstrates how to build a PE executable from scratch. This demo is not as complete at the ELF version, but does show how to\n\n# create a file that contains multiple format headers (a DOS header and a PE header).\n\n###############################################################################################################################\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "###############################################################################################################################\n\n# Changes the size and/or location of a section in an executable file.\n\n###############################################################################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###############################################################################################################################\n\n# Test ROSE + XEN Ether interface\n\n###############################################################################################################################\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "###############################################################################################################################\n\n# Program to show function boundary information for a binary executable\n\n###############################################################################################################################\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "###############################################################################################################################\n\n# Program to add read-only data to ELF core dumps.\n\n###############################################################################################################################\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "###############################################################################################################################\n\n# Program that encodes/decodes data similar to ROT-13 but acceping binary data\n\n###############################################################################################################################\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "###############################################################################################################################\n\n# Program to test the assembler\n\n###############################################################################################################################\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "###############################################################################################################################\n\n# Program to test that we can write and then read an AST for a binary executable\n\n###############################################################################################################################\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "###############################################################################################################################\n\n# Program to test that SgAsmGenericFile::neuter works across AST-IO.\n\n###############################################################################################################################\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###############################################################################################################################\n\n# Program to test the RegisterDescriptor and RegisterDictionary classes.\n\n###############################################################################################################################\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "###############################################################################################################################\n\n# Tests reading past the end-of-file\n\n###############################################################################################################################\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "###############################################################################################################################\n\n# Not sure what this does.\n\n###############################################################################################################################\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "###############################################################################################################################\n\n# Tests reading import sections from PE files\n\n###############################################################################################################################\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "###############################################################################################################################\n\n# Binary CFG test from Cory Cohen that doesn't compile.  This is only a linking test--do not run it.\n\n###############################################################################################################################\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###############################################################################################################################\n\n# Test certain RegisterStateGeneric stuff\n\n###############################################################################################################################\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "###############################################################################################################################\n\n# Test register clearing in subclass constructor\n\n###############################################################################################################################\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "###############################################################################################################################\n\n# Test disassembling between functions\n\n###############################################################################################################################\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "###############################################################################################################################\n\n# Test and demonstrate binary attributes\n\n###############################################################################################################################\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################################################################\n\n# Test base objects in SgAsmIntegerValueExpression\n\n###############################################################################################################################\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "###############################################################################################################################\n\n# Test symbolic semantics memory read-after-write\n\n###############################################################################################################################\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "###############################################################################################################################\n\n# Test the WorkList class\n\n###############################################################################################################################\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "###############################################################################################################################\n\n# Test ROSE's Map<T> class\n\n###############################################################################################################################\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# DQ (11/17/2017): The testMap.C code causes an internal compiler error for the Intel v16 compiler.\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "###############################################################################################################################\n\n# Test pointer detection\n\n###############################################################################################################################\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# This is not currently working: it finds the local variable used as a pointer, but not the L-values used to assign\n\n# to the local variable.\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "###############################################################################################################################\n\n# Test function call detection\n\n###############################################################################################################################\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "###############################################################################################################################\n\n# Test analysis to see whether a function returns a value\n\n###############################################################################################################################\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#   long when extensive debugging is enabled on heavily loaded or slow machines.\n",
        "Line" : 847,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Be careful where the comma is located!\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Another set of partitioner tests, but using the map-based semantic memory\n",
        "Line" : 876,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "###############################################################################################################################\n\n# CFG dominance tests\n\n###############################################################################################################################\n",
        "Line" : 899,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "###############################################################################################################################\n\n# Instruction semantics tests.\n\n#\n\n# Binary instruction semantics are a plug-n-play architecture, so we try to test a number of different combinations, usually\n\n# all compiled from a single source file.  Files with \"1\" in their name use the older, template-based API while files with\n\n# \"2\" in their name use the newer run-time plug-n-play API.\n\n###############################################################################################################################\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Convenience target to run all these semantics tests. This target is not run automatically by \"make check\" (which instead\n\n# depends on each of the targets individually rather than just this one).\n",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#       API2 (the newer stuff)               Extra tests\n",
        "Line" : 939,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# TOO1 (3/24/2015): Failing jenkins-release GCC 4.2.4; removing temporarily until fixed\n\n#multiSemantics2.passed\n",
        "Line" : 951,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Null semantics\n",
        "Line" : 954,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Partial symbolic semantics\n",
        "Line" : 970,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Interval semantics\n",
        "Line" : 986,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Symbolic semantics, no SMT solver\n",
        "Line" : 1002,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Tracing symbolic semantics, no SMT solver\n",
        "Line" : 1018,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Symbolic semantics, Yices executable\n",
        "Line" : 1035,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Symbolic semantics, Yices library\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Symbolic semantics, Z3 executable\n",
        "Line" : 1071,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Symbolic semantics, Z3 library\n",
        "Line" : 1089,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Multi-domain semantics, new API\n\n# TOO1 (3/24/2015): Failing jenkins-release GCC 4.2.4; removing temporarily until fixed\n\n#noinst_PROGRAMS += multiSemantics2\n\n#multiSemantics2_SOURCES = semantics.C\n\n#multiSemantics2_CPPFLAGS = -DSEMANTIC_DOMAIN=MULTI_DOMAIN\n\n#multiSemantics2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)\n\n#TEST_TARGETS += multiSemantics2.passed\n\n#EXTRA_DIST += semantics.conf multiSemantics2.ans\n\n#multiSemantics2.passed: semantics.conf multiSemantics2\n\n#\t@$(RTH_RUN) CMD=multiSemantics2 INPUT=i686-test1.O3.bin SPECIMEN_DIR=\"$(SPECIMEN_DIR)\" $< $@\n",
        "Line" : 1107,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Demo how to subclass something from SymbolicSemantics\n",
        "Line" : 1118,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "###############################################################################################################################\n\n# Instruction semantics speed tests.  These aren't actually run automatically, we just compile them to make sure they\n\n# compile.  To run them, just run the executable with one argument: the name of a binary file.  The test just starts\n\n# executing instructions at the entry address until it reaches a branch whose condition is not known, at which time the\n\n# test repeats.  It does this for one minute and then prints out the execution rate.\n\n###############################################################################################################################\n",
        "Line" : 1130,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Tests speed of null instruction semantics with and without using templates\n",
        "Line" : 1137,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Tests speed of partial symbolic instruction semantics with and without using templates\n",
        "Line" : 1143,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Tests speed of symbolic semantics with and without using templates\n",
        "Line" : 1149,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Tests speed of interval semantics with and without using templates\n",
        "Line" : 1155,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Tests speed of multi-domain semantics with and without using templates\n",
        "Line" : 1161,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "###############################################################################################################################\n\n# LLVM tests\n\n###############################################################################################################################\n",
        "Line" : 1168,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#-------------- basic test to make sure we can transcode each pre-compiled 32-bit x86 specimen\n",
        "Line" : 1176,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# The \"llvm-as\" tool might not be installed, in which case $(llvmVersion) will be an empty string.\n",
        "Line" : 1178,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# 128-bit registers are not supported, so don't try to test them (pentium-xxm)\n\n# Test takes too long when compiled with debugging (puttytel.exe)\n\n# Only x86 32-bit is fully supported\n",
        "Line" : 1181,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#--------------- tests that run LLVM analysis passes using LLVM's \"opt\" command\n",
        "Line" : 1205,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# This appears to not be present for llvm-3.5.0, so don't try to test it.\n\n#\tpostdomfrontier.c\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Do not run these tests automatically by \"make check\" because LLVM is not always installed.  Therefore, we\n\n# also need to mention the outputs in MOSTLYCLEANFILES.\n\n#TEST_TARGETS += $(llvmAnalysis_TestTargets)\n",
        "Line" : 1238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 75,
      "Errorlog" : "line 1179:109 token recognition error at: '\\1'\nline 1249:13 token recognition error at: '\"$(shell perl -ne '/OPT:\\s'\nline 1249:45 token recognition error at: '\\s'\nline 1249:53 token recognition error at: '\\s'\nline 1576:60 token recognition error at: '\"\\nendif\\n\\n# Don't delete things indiscriminately--sometimes developers have other related files that should not be touched!\\n# Rather than use one big MOSTLYCLEANFILES, split things into smaller parts so we don't get command lines that are too big.\\nclean-local:\\n\\trm -f $(MOSTLYCLEANFILES)\\n\\n.PHONY: $(PHONIES)\\n\u0000'\n"
    },
    "tests/nonsmoke/functional/BinaryAnalysis/Pin_tests/CMakeLists.txt" : {
      "ObjectId" : "e110dc51fe2b621e05dd5f4d0bbbc990998dea54",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########### next target ###############\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########### next target ###############\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########### next target ###############\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########### install files ###############\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#########################################################################################################\n\n## This directory demonstrates the use of the INTEL PIN Dynamic Binary Instrumentation Tool within ROSE #\n\n#########################################################################################################\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS \n\n#\n\n## if configured to use Intel Pin\n\n#if ROSE_USE_INTEL_PIN\n\n#\n\n## Reference location to where some of the example pin tools are located in the Intel Pin distribution.\n\n#INTEL_PIN_TOOLS_PATH = $(INTEL_PIN_PATH)/source/tools/SimpleExamples\n\n#\n\n## INTEL PIN paths are now included in ROSE_INCLUDES with --with-Intel_Pin.\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n## These are ROSE analysis applications that mix static and dynamic analysis.\n\n#noinst_PROGRAMS = dynamicStaticBinaryAnalysis staticDynamicBinaryAnalysis staticBinaryAnalysis commandlineHandling staticCallGraphEmbeddedTraceBinaryAnalysis \n\n#\n\n## These are example Pin tools (some ruse ROSE and demonstrat how to link pin tools with ROSE for mixed analysis).\n\n#noinst_OBJECTS = graphTrace.o imageload.o dynamicBinaryInfo.o memcopy-elf.o\n\n#\n\n#LIBTOOL_RPATH_LDADD = $(ROSE_LIBS_WITH_PATH) $(RT_LIBS) $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n#\n\n## DQ (3/14/2009): This factors the lib paths (now defined in config/Makefile.for.ROSE.includes.and.libs).\n\n## INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#\n\n## This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n## as a result is must link to both ROSE and Pin.\n\n#dynamicStaticBinaryAnalysis_SOURCES = dynamicStaticBinaryAnalysis.C\n\n#dynamicStaticBinaryAnalysis_LDADD   = $(LIBTOOL_RPATH_LDADD)\n\n#\n\n## This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n## as a result is must link to both ROSE and Pin.\n\n#staticDynamicBinaryAnalysis_SOURCES = staticDynamicBinaryAnalysis.C\n\n#staticDynamicBinaryAnalysis_LDADD   = $(LIBTOOL_RPATH_LDADD)\n\n#\n\n## Since this does not use Intel Pin yet, it need not include more libs (simple ROSE link step).\n\n## This ROSE application mixes static analysis with dynamic analysis (static analysis first and then dynamic analysis)\n\n#staticBinaryAnalysis_SOURCES = staticBinaryAnalysis.C\n\n#staticBinaryAnalysis_LDADD   = $(ROSE_LIBS_WITH_PATH) $(RT_LIBS)\n\n#\n\n## This code demonstrates the commandline handling required to mix Pin with ROSE.\n\n#commandlineHandling_SOURCES = commandlineHandling.C\n\n#commandlineHandling_LDADD   = $(LIBTOOL_RPATH_LDADD)\n\n#\n\n#staticCallGraphEmbeddedTraceBinaryAnalysis_SOURCES = staticCallGraphEmbeddedTraceBinaryAnalysis.C\n\n#staticCallGraphEmbeddedTraceBinaryAnalysis_LDADD   = $(LIBTOOL_RPATH_LDADD)\n\n#\n\n## This is a general variable to link against (uses -lrose and works with static or dynamic linking):\n\n## NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n## NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\n\n#\n\n#\n\n## This we were we will put test codes (not there yet):\n\n#TESTCODES_REQUIRED_TO_PASS = \n\n##  pintest2008_01.C\n\n#\n\n#TESTCODE_CURRENTLY_FAILING = \n\n##  pintest2008_02.C \n\n#\n\n## \"make check\" tests to be run:\n\n#ROSE_PIN_TESTS = testMemcopy testGraphTrace testImageload testDynamicBinaryInfo\n\n#\n\n#\n\n## This is a test code (executable) to be used with the Intel Pin dynamic instrumentation\n\n## (it can be linked staticly or dynamically).\n\n#input_testcode: $(srcdir)/input_testcode.C\n\n##\tg++ -static $(srcdir)/input_testcode.C -o input_testcode\n\n#\tg++ $(srcdir)/input_testcode.C -o input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This tests the Intel Pin tool using one of its internal tools (should have been built if Intel Pin was built)\n\n## This tests the installation of Pin and nothing about the use of Pin with ROSE.\n\n#testPinInstallation: input_testcode $(INTEL_PIN_TOOLS_PATH)/obj-intel64/icount.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t $(INTEL_PIN_TOOLS_PATH)/obj-intel64/icount.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This Pin tool generates a dot graph of the trace of execution of a binary (and uses support functions in ROSE).\n\n## So it must be linked explicitly (not using libtool) and reference either the shared library or the static library.\n\n## When the shared library (librose.so) is used, $(top_builddir)/src/.libs must be in the LD_LIBRARY_PATH.\n\n#graphTrace.so: graphTrace.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o graphTrace.so graphTrace.o $(NON_LIBTOOL_RPATH)\n\n#\n\n## Test example program generate a graph of the execution trace of a binary\n\n#testGraphTrace: graphTrace.so input_testcode\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t graphTrace.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This Pin tool generates log of the image loading and unloading (of shared libraries) of a binary\n\n#imageload.so: imageload.o\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\n\n#\n\n## Test example program generate a graph of the execution trace of a binary\n\n#testImageload: imageload.so input_testcode\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t imageload.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This Pin tool generates log of the information take from each image (main program and each loaded shared library) of the binary\n\n#dynamicBinaryInfo.so: dynamicBinaryInfo.o\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\n\n#\n\n## Test example program generates information about the binary (from section data for main program and each shared library).\n\n#testDynamicBinaryInfo: dynamicBinaryInfo.so input_testcode\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t dynamicBinaryInfo.so -- ./input_testcode\n\n#\n\n## **************************************************************************\n\n## This Pin tool is a start an a tool to write out the memory image of a process (ongoing work).\n\n#memcopy-elf.so: memcopy-elf.o\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o memcopy-elf.so memcopy-elf.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o memcopy-elf.so memcopy-elf.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o memcopy-elf.so memcopy-elf.o $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\n\n#\n\n## Test example program to dump memory image of process (ongoing work).\n\n#testMemcopy: memcopy-elf.so input_testcode\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t memcopy-elf.so -- ./input_testcode\n\n## **************************************************************************\n\n#\n\n#\n\n## **************************************************************************\n\n## This builds an Intel Pin tool (for testing the command line handling with ROSE)\n\n#commandlineHandling.so: commandlineHandling.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o commandlineHandling.so commandlineHandling.o $(NON_LIBTOOL_RPATH)\n\n#\n\n#testCommandlineHandling: input_testcode commandlineHandling.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t commandlineHandling.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n## This allows for mixed static and dynamic analysis.\n\n#dynamicStaticBinaryAnalysis.so: dynamicStaticBinaryAnalysis.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicStaticBinaryAnalysis.so dynamicStaticBinaryAnalysis.o $(NON_LIBTOOL_RPATH)\n\n#\n\n## DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n## This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n## In this case the dynamic instrumentation can call static analysis.\n\n#testDynamicStaticBinaryAnalysis: input_testcode dynamicStaticBinaryAnalysis.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t dynamicStaticBinaryAnalysis.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n## This allows for mixed static and dynamic analysis (first static analysis then dynamic analysis).\n\n#staticDynamicBinaryAnalysis.so: staticDynamicBinaryAnalysis.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o staticDynamicBinaryAnalysis.so staticDynamicBinaryAnalysis.o $(NON_LIBTOOL_RPATH)\n\n#\n\n## DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n## This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n## In this case the dynamic instrumentation can call static analysis.\n\n#testStaticDynamicBinaryAnalysis: input_testcode staticDynamicBinaryAnalysis.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t staticDynamicBinaryAnalysis.so -- input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n## This allows for mixed static and dynamic analysis (first static analysis then dynamic analysis).\n\n#staticCallGraphEmbeddedTraceBinaryAnalysis.so: staticCallGraphEmbeddedTraceBinaryAnalysis.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o staticCallGraphEmbeddedTraceBinaryAnalysis.so staticCallGraphEmbeddedTraceBinaryAnalysis.o $(NON_LIBTOOL_RPATH)\n\n#\n\n## DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n## This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n## In this case the dynamic instrumentation can call static analysis.\n\n#testStaticCallGraphEmbeddedTraceBinaryAnalysis: input_testcode staticCallGraphEmbeddedTraceBinaryAnalysis.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t staticCallGraphEmbeddedTraceBinaryAnalysis.so -- input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This is a simple test of calling the static analysis on a binary.\n\n#testStaticBinaryAnalysis: input_testcode staticBinaryAnalysis\n\n#\t./staticBinaryAnalysis input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS)\n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \\\n\n#$(TESTCODE_CURRENTLY_FAILING)\n\n#\n\n## File option to accumulate performance information about the compilation\n\n#PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/PIN_ROSE_PERFORMANCE_DATA.csv\n\n#\n\n#ROSE_FLAGS = -rose:verbose 0 $(PERFORMANCE_REPORT_OPTION)\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n## $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n\n#$(TEST_Objects): \n\n#\techo \"Calling ...\"\n\n#\t$(VALGRIND) ./staticBinaryAnalysis $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C)\n\n#\n\n#copyFiles:\n\n#\tcp $(srcdir)/*.h $(top_srcdir)/tests/CompilerTests/Pin_tests\n\n#\tcp $(srcdir)/*.C $(top_srcdir)/tests/CompilerTests/Pin_tests\n\n#\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's development tests for Intel Pin tests.\"\n\n##  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n##\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n##\t@$(MAKE) $(PASSING_TEST_Objects)\n\n##\t@$(MAKE) testMemcopy testGraphTrace testImageload testDynamicBinaryInfo\n\n#\t@$(MAKE) $(ROSE_PIN_TESTS)\n\n#\t@$(MAKE) testStaticBinaryAnalysis\n\n#\t@$(MAKE) testStaticDynamicBinaryAnalysis\n\n#\t@$(MAKE) testDynamicStaticBinaryAnalysis\n\n#\t@echo \"***********************************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/Pin_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"***********************************************************************************************************************\"\n\n#\n\n#else\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's Intel Pin development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"*******************************************************************************************************\"\n\n#\t@echo \"*************** make check not run here: configure --with-IntelPin=<path to Intel Pin> ****************\"\n\n#\t@echo \"*******************************************************************************************************\"\n\n#\n\n## endif fo configuration for ROSE_USE_INTEL_PIN\n\n#endif\n\n#\n\n#else\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's Intel Pin development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"***********************************************************************************************\"\n\n#\t@echo \"*************** make check not run here: configure --enable-dq-developer-tests ****************\"\n\n#\t@echo \"***********************************************************************************************\"\n\n#endif\n\n#\n\n#EXTRA_DIST = \\\n\n#     README dynamicStaticBinaryAnalysis.C staticDynamicBinaryAnalysis.C dynamicBinaryInfo.C \\\n\n#     graphTrace.C imageload.C input_testcode.C memcopy-elf.C staticBinaryAnalysis.C \\\n\n#     commandlineHandling.C\n\n#\n\n#clean-local:\n\n#\trm -f *.o rose_*.[s] *.dot *.pdf *~ *.ps *.out *.new *.dump rose_performance_report_lockfile.lock *.so\n\n#\trm -f pinRoseTranslator.so  input_testcode pin.log\n\n#\trm -rf QMTest\n\n#\n\n#print:\n\n#\t@echo \"INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\"\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/BinaryAnalysis/Pin_tests/Makefile.am" : {
      "ObjectId" : "888c705150bb974095aad9ab2dbd0287d1fbe491",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################\n\n# This directory demonstrates the use of the INTEL PIN Dynamic Binary Instrumentation Tool within ROSE #\n\n########################################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if configured to use Intel Pin\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reference location to where some of the example pin tools are located in the Intel Pin distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# INTEL PIN paths are now included in ROSE_INCLUDES with --with-Intel_Pin.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are ROSE analysis applications that mix static and dynamic analysis.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These are example Pin tools (some ruse ROSE and demonstrat how to link pin tools with ROSE for mixed analysis).\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (3/14/2009): This factors the lib paths (now defined in config/Makefile.for.ROSE.includes.and.libs).\n\n# INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n# as a result is must link to both ROSE and Pin.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n# as a result is must link to both ROSE and Pin.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Since this does not use Intel Pin yet, it need not include more libs (simple ROSE link step).\n\n# This ROSE application mixes static analysis with dynamic analysis (static analysis first and then dynamic analysis)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This code demonstrates the commandline handling required to mix Pin with ROSE.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is a general variable to link against (uses -lrose and works with static or dynamic linking):\n\n# NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n# NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This we were we will put test codes (not there yet):\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#  pintest2008_01.C\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  pintest2008_02.C \n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# \"make check\" tests to be run:\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This is a test code (executable) to be used with the Intel Pin dynamic instrumentation\n\n# (it can be linked staticly or dynamically).\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\tg++ -static $(srcdir)/input_testcode.C -o input_testcode\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# **************************************************************************\n\n# This tests the Intel Pin tool using one of its internal tools (should have been built if Intel Pin was built)\n\n# This tests the installation of Pin and nothing about the use of Pin with ROSE.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# **************************************************************************\n\n# This Pin tool generates a dot graph of the trace of execution of a binary (and uses support functions in ROSE).\n\n# So it must be linked explicitly (not using libtool) and reference either the shared library or the static library.\n\n# When the shared library (librose.so) is used, $(top_builddir)/src/.libs must be in the LD_LIBRARY_PATH.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Test example program generate a graph of the execution trace of a binary\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# **************************************************************************\n\n# This Pin tool generates log of the image loading and unloading (of shared libraries) of a binary\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Test example program generate a graph of the execution trace of a binary\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# **************************************************************************\n\n# This Pin tool generates log of the information take from each image (main program and each loaded shared library) of the binary\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Test example program generates information about the binary (from section data for main program and each shared library).\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# **************************************************************************\n\n# This Pin tool is a start an a tool to write out the memory image of a process (ongoing work).\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o memcopy-elf.so memcopy-elf.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o memcopy-elf.so memcopy-elf.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Test example program to dump memory image of process (ongoing work).\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# **************************************************************************\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# **************************************************************************\n\n# This builds an Intel Pin tool (for testing the command line handling with ROSE)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# **************************************************************************\n\n# This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n# This allows for mixed static and dynamic analysis.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n# This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n# In this case the dynamic instrumentation can call static analysis.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# **************************************************************************\n\n# This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n# This allows for mixed static and dynamic analysis (first static analysis then dynamic analysis).\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n# This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n# In this case the dynamic instrumentation can call static analysis.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# **************************************************************************\n\n# This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n# This allows for mixed static and dynamic analysis (first static analysis then dynamic analysis).\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n# This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n# In this case the dynamic instrumentation can call static analysis.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# **************************************************************************\n\n# This is a simple test of calling the static analysis on a binary.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# **************************************************************************\n\n# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@$(MAKE) testMemcopy testGraphTrace testImageload testDynamicBinaryInfo\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# endif of configuration for ROSE_USE_INTEL_PIN\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46
    },
    "tests/nonsmoke/functional/BinaryAnalysis/libraryIdentification_tests/CMakeLists.txt" : {
      "ObjectId" : "ba72f5138eb025edd4d5a6e6a8b17b224ae0d6a3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/BinaryAnalysis/libraryIdentification_tests/Makefile.am" : {
      "ObjectId" : "5cd74d95c29af34cc394288b6a7b64449c0fbaf1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Forward declarations\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This work requires the SQLite support...\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################\n\n# Tests\n\n##############################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These tests are disabled on Mac OS X because that system's \"ar\" command cannot unpack\n\n# an archive file generated on a Linux machine (such as libTest-amd64.a).  And we cannot\n\n# use a OS X archive containing MachO files because those object files cannot be parsed\n\n# (yet) by ROSE.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Conditionally link to SSL support since they disable use of Java (and so Fortran support in ROSE).\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ****************************************************\n\n#                     Demo Rules\n\n# ****************************************************\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ******************************************************\n\n#              Standard Makefile Content\n\n# ******************************************************\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/CMakeLists.txt" : {
      "ObjectId" : "75b0122954c18e4f033c34c7e40d3dd8039bf966",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(RunTests)\n\n#add_subdirectory(PerformanceTests)\n\n#add_subdirectory(CompilerOptionsTests)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/A++Code/CMakeLists.txt" : {
      "ObjectId" : "cc4c9ce655fb50036a89a803dff1d554f1d6ae96",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/A++Code/Makefile.am" : {
      "ObjectId" : "c637d34ba5d5929a20d067e1d58d68d05752c3ec",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Comment out these test to make the distcheck tests faster\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/18/2012): Failing test codes:\n\n#   lazy_expression.C \n\n#   lazyarray.C \n\n#   array_notemplates.C\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Files which don't compile (but used to do so) (this has been isolated as test2001_23.C)\n\n# f_op_all.C i_op_all.C d_op_all.C\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Short tests (since these test can take a while!)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tThis fails for the Intel icc or icpc compiler.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/CompileTests/A++Tests/CMakeLists.txt" : {
      "ObjectId" : "85ea49e273fc316125c2d147bd80c59ba3ba68dd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/A++Tests/Makefile.am" : {
      "ObjectId" : "1fa5f0b85ce6525dcabbb3b8f58bbeb929e386f0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Files which don't compile (but used to do so) (this has been isolated as test2001_23.C)\n\n# f_op_all.C i_op_all.C d_op_all.C\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n# ROSE_FLAGS = -rose:test 6\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## These tests use the version of A++ source code (really only the header files) \n\n## that are a part of ROSE (located in ROSE/TESTS/CompileTests/A++Tests\n\n# AM_CPPFLAGS = -I. -I../../.. -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Tests -I$(top_srcdir)/include\n\n# AM_CPPFLAGS = -I. -I../../.. -I$(srcdir)/../A++Code\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/CompileTests/C++Code/CMakeLists.txt" : {
      "ObjectId" : "3b1034940c9e43d368d27a1d4b4d9c269c911ebd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test for Old-Style C function definitions\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Test for Old-Style C function definitions\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Test for Old-Style C function definitions\n\n#test2005_172.o: ${CMAKE_CURRENT_SOURCE_DIR}/test2005_172.c\n\n#\trm -f test2005_172\n\n#\t${valgrind} testTranslator ${ROSE_FLAGS} -rose:verbose 0 ${C_ONLY} ${CMAKE_CURRENT_SOURCE_DIR}/test2005_172.c -o test2005_172\n\n#\trm -f test2005_172.o\n\n#\t${valgrind} testTranslator ${ROSE_FLAGS} -rose:verbose 0 ${C_ONLY} -c ${CMAKE_CURRENT_SOURCE_DIR}/test2005_172.c\n\n#\trm -f test2005_172\n\n#\t${valgrind} testTranslator ${ROSE_FLAGS} -rose:verbose 0 ${C_ONLY} test2005_172.o -o test2005_172\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# This code requires access to Python.h\n\n# (in the ${CMAKE_CURRENT_SOURCE_DIR}/pythonDir directory)\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Test of export keyword\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Test of simple STL (list) example code\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/CompileTests/C++Code/Makefile.am" : {
      "ObjectId" : "85b51a12abe27dc0b670fa0f2445c7ac7a52b075",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n\n# TESTCODES = \\\n#      test2001_11.C \\\n#      test2001_01.C \\\n#      test2001_02.C \\\n#      test2001_03.C \\\n#      test2001_04.C \\\n#      test2001_05.C \\\n#      test2001_06.C \\\n#      test2001_07.C \\\n#      test2001_08.C \\\n#      test2001_09.C \\\n#      test2001_10.C \\\n#      test2001_14.C \\\n#      test2001_15.C \\\n#      test2001_17.C \\\n#      test2001_18.C \\\n#      test2001_19.C \\\n#      test2001_20.C \\\n#      test2001_21.C \\\n#      test2001_22.C \\\n#      test_treeTrav_MK_01.C \\\n#      test_treeTrav_MK_02.C\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shorter list for testing of make distcheck distribution tests\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (9/4/2005): Generated code with name qualification \n\n# \"namespace std { template<> struct std::X < int > }\" \n\n# not allowed in g++ 3.4.3 (test commented out for now).\n\n# There are still several cases like this so that the \n\n# code generation within ROSE will not pass with 3.4.x\n\n# at present.\n\n#    test2005_81.C\n\n#    test2005_93.C\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (7/27/2005): Example generates instanatiations for template static data members (redifinition error)\n\n#    test2005_69.C\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (9/10/2005): This code fails with 3.4.x, but passes with 3.3.x\n\n#    test2005_98.C\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (7/25/2005): Example which breaks g++ 3.4.3 (from Peter), also breaks ROSE :-)\n\n#    test2005_115.C\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This demonstrates a bug in g++ (ROSE can't handle it until g++ can handle it)\n\n#    test2005_151.C\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (6/30/2005): Removed to compile Kull (submitted by Jeremiah Willcock)\n\n#    test2005_85.C (Duff's Device)\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Moved to explicit rule below so that we could include -I<pythonDir>\n\n#     test2005_18.C\n\n#     test2005_54.C\n\n#     test2005_24.C\n\n#     test2004_62.C \n\n#     test2004_63.C \n\n#     test2004_41.C\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is now an explicit makefile rule (so that we can use the -rose:C_only option)\n\n#     test2004_21.C\n\n#     test2004_21.c \n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This fails since it uses old style C and must be compiled in a file with *.c (instead of *.C)\n\n#      test2004_20.C\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# These require special options and have specific makefile rules\n\n#     test2004_22.C\n\n#     test2004_30.C\n\n#     test2004_41.C\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (8/8/2005): requires use od Python.h not included in ROSE distribution\n\n#     test2004_92.C\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n# ROSE_FLAGS = -rose:test 6\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Suppress all warnings (in EDG: --no_warnings) (in g++: -w) \n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ROSE_VERBOSE =\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# C_ONLY =\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Test for Old-Style C function definitions\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\tgcc -c $(srcdir)/test2004_19.C\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Test for Old-Style C function definitions\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\tgcc -c $(srcdir)/test2004_21.c\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Test for UPC example code\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Test of export keyword\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Test of simple STL (list) example code\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Test for STL example code\n\n# test2004_92.o: $(srcdir)/test2004_92.C $(TRANSLATOR_EXECUTABLE)\n\n#\t$(VALGRIND) $(TEST_TRANSLATOR) -rose:verbose 2 -I$(srcdir)/pythonDir -c $(srcdir)/test2004_92.C \n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#test2005_56.o: $(srcdir)/test2005_56.C\n\n#\t$(TEST_TRANSLATOR) -DTEST_STRING_MACRO=\\\"\"Thu Apr 14 08:18:33 PDT 2005\"\\\" $(srcdir)/test2005_56.C -o test2005_56\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# This code requires access to Python.h (in the $(srcdir)/pythonDir directory)\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\techo \"Calling the linker: test2005_74.ti file ...\"\n\n#\tcat test2005_74.ti\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\techo \"Testing multiple file linking: call ROSE translator with *.o files ...\"\n\n#\t$(VALGRIND) $(TEST_TRANSLATOR) -rose:verbose 0 -I$(srcdir) test2005_75a.o test2005_75b.o -o test2005_75\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# This C program must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Test for Old-Style C function definitions\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# check-local:\n\n#\t@echo \"ROSE Test Codes.\"\n\n#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\t@$(MAKE) test2004_21.o\n\n#\t@$(MAKE) test2004_22.o\n\n#\t@$(MAKE) test2004_30.o\n\n#\t@$(MAKE) test2004_41.o\n\n#\t@$(MAKE) $(TEST_Objects)\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "tests/nonsmoke/functional/CompileTests/C11_tests/Makefile.am" : {
      "ObjectId" : "92878931d8407b2f5deb5288e692d8dc520473be",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Note: last.C just simplifies the Makefile.am it\n\n# avoids common makefle errors in adding new files.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n############\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 127,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 135,
        "CharPositionInLine" : 5
      },
      "15" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 140,
        "CharPositionInLine" : 5
      },
      "17" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 143,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (2/28/2017): Skip these tests until we can return to this problem later.\n\n#\t@$(MAKE) $(PASSING_TEST_Source_passed)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 164,
        "CharPositionInLine" : 5
      },
      "25" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 170,
        "CharPositionInLine" : 5
      },
      "27" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 173,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# DQ (1/18/2017): EDG 4.9 is the default now, and EDG 4.12 will be the default shortly.\n\n# # if ROSE_USE_EDG_VERSION_4_9\n\n# if ROSE_USING_GCC_VERSION_LATER_4_8\n\n#\t@echo \"C11 tests using GNU version 4.8 backend compiler.\"\n\n#\t@$(MAKE) $(PASSING_TEST_Source_passed)\n\n# else\n\n# if ROSE_USING_GCC_VERSION_LATER_4_9\n\n# \t@echo \"C11 tests using GNU version 4.9 backend compiler.\"\n\n#\t@$(MAKE) $(PASSING_TEST_Source_passed)\n\n# endif\n\n# endif\n\n# else\n\n# \t@echo \"C11 tests require configuration with EDG version 4.9 and GNU version 4.8 or 4.9 backend compilers.\"\n\n# endif\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "tests/nonsmoke/functional/CompileTests/C89_std_c89_tests/CMakeLists.txt" : {
      "ObjectId" : "03b917dcd50b31a9c66581885485ecb26644818d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/C89_std_c89_tests/Makefile.am" : {
      "ObjectId" : "6238b54d5232c65d41ae76634bb7eb4f0051712c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# TOO (2/10/11): set the correct linker and linker-flags for the alternate\n\n# backend C compiler.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TOO (2/10/11): don't run these tests if they were cross-compiled, otherwise\n\n# they will just fail.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################################################################\n\n# These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n##################################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (9/25/2013): All of these before test2013_78.c were a part fo the \n\n# C_tests directory.  This subset compiles using the -std=c89 where as\n\n# all the rest had required the -std=gnu89 option (default for GNU gcc).\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n############\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# builtin-types.def, Liao, 1/15/2014, no reference to this file at all. remove it from the list\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/nonsmoke/functional/CompileTests/C99_tests/CMakeLists.txt" : {
      "ObjectId" : "1e427c1636431f74ad54b588db59b227254ae6b5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the following tests currently fail\n\n# complex_02.c\n\n# complex_04.c\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/C99_tests/Makefile.am" : {
      "ObjectId" : "0e5bf1485b0a40ff3df626290e7ca03a721d05a7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###########################################################################################\n\n# These are C99 testcodes targeting aspects of C99 that might not be a subset of C or C++ #\n\n###########################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (7/3/2013): This demonstrates the GNU gcc does not default to C99, at least for gcc \n\n# version 4.4.5. ROSE was modified in March 2013 to default to C99, but this might have \n\n# to be version number dependent (on GNU gcc).  For now comment this file out so we can \n\n# figure out what the versions numbers of GNU gcc default to which C language standards.\n\n#    test2013_01.c \n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n############\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/CompileTests/CAF2_tests/CMakeLists.txt" : {
      "ObjectId" : "e3774dd84a91c9531158d72b6ce4e63fcad1ebcc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the following tests currently fail\n\n# X-copointer-operations-long.caf\n\n# X-cotarget-declarations-long.caf\n\n# X-test-copointer4_1.caf\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/CAF2_tests/Makefile" : {
      "ObjectId" : "c4a73c0525f3bd200531aff56d56b2d66af44828",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (c) 2005, 2006 Los Alamos National Security, LLC.  This\n\n# material was produced under U.S. Government contract DE-\n\n# AC52-06NA25396 for Los Alamos National Laboratory (LANL), which is\n\n# operated by the Los Alamos National Security, LLC (LANS) for the\n\n# U.S. Department of Energy. The U.S. Government has rights to use,\n\n# reproduce, and distribute this software. NEITHER THE GOVERNMENT NOR\n\n# LANS MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY\n\n# LIABILITY FOR THE USE OF THIS SOFTWARE. If software is modified to\n\n# produce derivative works, such modified software should be clearly\n\n# marked, so as not to confuse it with the version available from\n\n# LANL.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Additionally, this program and the accompanying materials are made\n\n# available under the terms of the Eclipse Public License v1.0 which\n\n# accompanies this distribution, and is available at\n\n# http://www.eclipse.org/legal/epl-v10.html\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FLAGS=--RiceCAF --dump\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompileTests/CAF2_tests/Makefile.am" : {
      "ObjectId" : "edd92f524795773e289a165331bcc95216a04fe4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#####################################################################################\n\n# Translator-only tests for Rice CAF 2.0 extensions to Fortran                      #\n\n#####################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# put the headers here for now. TODO: Move them to a better place\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#../../testTranslator:\n\n#\tcd ../..; $(MAKE) testTranslator\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Fortran support not available in ROSE unless specified on the configure command line.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/CompileTests/CMakeLists.txt" : {
      "ObjectId" : "68caf4386f12854eaf44935c792a088beefdccc6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# setup ROSE_INCLUDE_FLAGS variable (used by some compile tests)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default values for our compile tests\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define compile_test CMake function\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# optional argument to omit include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# determine what subdirectories to enter based on our configuration settings.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (7/14/2013): Temporarily commented out this test to evaluate\n\n# progress on tests/nonsmoke/functional/CompileTests directory.\n\n#add_subdirectory(CAF2_tests)\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# ROSE-1738\n\n#     add_subdirectory(RoseExample_tests)\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# requires Valgrind\n\n#add_subdirectory(uninitializedField_tests)\n",
        "Line" : 88,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# end of !ROSE_USE_EDG_VERSION_4_3\n",
        "Line" : 114,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "#add_subdirectory(Python_tests)\n",
        "Line" : 117,
        "CharPositionInLine" : 5
      },
      "10" : {
        "Text" : "# end of ROSE_USE_CLANG_FRONTEND\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "tests/nonsmoke/functional/CompileTests/C_subset_of_Cxx_tests/CMakeLists.txt" : {
      "ObjectId" : "0ac6fb6a907ca516d3d9de46c5acfdfa6d6aa67a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This requires a special rule\n\n# Note that this will not link since gcc (typically) is used as the\n\n# backend compiler and the source file lacks a \"*.c\" suffix.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/C_subset_of_Cxx_tests/Makefile.am" : {
      "ObjectId" : "2499992177c6f08839f216f6236badd449eae0be",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "######################################################\n\n# These are C testcodes targeting aspects of both C  #\n\n# and C++ that can be compiled using a C++ compiler  #\n\n######################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n############\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/CompileTests/C_tests/CMakeLists.txt" : {
      "ObjectId" : "08290df28dead066526286b43cd2953cc6dea80d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#EXPECTED FAILURES: test2012_51.c test2013_31.c  \n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# DQ (9/26/2009): Conditionally compile this file (fails in OSX due to lack of\n\n# OSX  support for thread local storage). Liao know more about the details of\n\n# this test.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/CompileTests/C_tests/Makefile.am" : {
      "ObjectId" : "61345e71d7e35184aa5d1cdbe6c576d26bc1b49a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# TOO (2/10/11): set the correct linker and linker-flags for the alternate\n\n# backend C compiler.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TOO (2/10/11): don't run these tests if they were cross-compiled, otherwise\n\n# they will just fail.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################################################################\n\n# These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n##################################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (1/16/2017): Clang C support appears to be missign the typeof operator (C11 mode).\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (4/11/2015): New failing tests:\n",
        "Line" : 755,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (4/13/2015): The best examples of remaining bugs are:\n\n# Makefile rules:\n\n#    test_using_explicit_output_file_option:\n\n#    test_rtd_use: \n\n#    test_m32_use: \n\n# And test codes:\n\n#    test2015_87.c (demonstrated need for 32-bit mode for EDG front-end, waiting on fix from EDG)\n\n#    test2015_88.c (may require edits to source code where this happens)\n\n#    test2015_89.c (only fails when tested using -m32 -mrtd options using makefile rule: test_rtd_use)\n\n#    test2015_93.c  (demonstrates use of GNU statement-expression in default case of switch statement)\n\n#    test2015_95.c  (demonstrates 32-bit mode requirement for EDG front-end)\n\n#    test2015_100.c (demonstrates that the typeof operator not output in argument type for function type unparsing)\n\n#    test2015_102.c (demonstrates unparsing of alias attribute on non-defining declaration)\n\n#    test2015_103.c (demonstrates unparsing of CPP directive before closing \";\" of expanded macro)\n\n#    test2015_105.c (demonstrates unparsing of __asm__() in wrong position)\n\n#    test2015_106.c (demonstrated use of volatile with va_list (not allowed)\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (8/14/2014) List these files explicitly to avoid failing the policy tests.\n",
        "Line" : 814,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (1/5/2014): Some failing test codes:\n\n#     test2014_03.c  (demonstrates nested functions (not supported in EDG))\n\n#     test2014_11.c  (simpler case of test2014_10.c)\n\n#     test2014_45.c  (inconsitant function declarations, but consistant through typedefs)\n\n#     test2014_54.c  (old-stype C function parameters in wrong order, appears to be legal C but a problem for ROSE)\n\n#     test2014_59.c  (complex macro handling where variables are named using the __LINE__ macro)\n\n#     test2014_61.c  (example of assigned goto (gnu extension))\n\n#     test2014_71.c  (macro namespace intrudes into application namespace (macro suppression using \"()\")\n\n#     test2014_73.c  (example of anonymous union in an initializer)\n\n#     test2014_74.c  (another example similar to test2014_73.c)\n\n#     test2014_75.c  (incomplete code from application example, will not compile with gcc).\n\n#     test2014_90.c  (asm command that is incomplete -- the version built using CPP is in test2014_91.c).\n",
        "Line" : 835,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (1/16/2017): This file name is already mentioned previously (need not be repeated).\n\n# test2010_12.c \n",
        "Line" : 849,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (12/3/2016): Moved test2012_09.c to not be tested withon Mac OSX OS.\n\n# Note that these might just be an issue specific to Clang version 3.8\n\n# or we don't have the correct emulation of the clang compiler since on Mac\n\n# we are detecting clang as GNU 4.2, where as on Linux we can correctly \n\n# detect it as clang 3.8 (with some trouble).\n\n# Also, the only file previously in the list below was test2009_19.c.\n\n# DQ (9/26/2009): Conditionally compile this file (fails in OSX due to lack of OSX\n\n# support for thread local storage). Liao know more about the details of this test.\n\n# test2009_19.c\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Liao, 5/16/2009 add a set of self-verifiable test code with main() \n\n# and let them run during make check\n\n# TV, 9/7/12 do not run them if using Clang\n",
        "Line" : 901,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 914,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# QMTest allows both passing and failing tests.\n\n# ALL_TESTCODES = $(TESTCODES_REQUIRED_TO_PASS) $(TESTCODE_CURRENTLY_FAILING) $(OLD_TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 917,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# File option to accumulate performance information about the compilation\n\n# PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/C_ROSE_PERFORMANCE_DATA.csv\n",
        "Line" : 921,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (4/18/2015): Uncommented this so that it can be properyl tested after being fixed!\n\n# if !ROSE_USE_EDG_VERSION_4_4\n\n# if !ROSE_USE_EDG_VERSION_4_7\n\n# any programs needed by your tests that does not need to be built by make all.\n",
        "Line" : 932,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# a list of programs or scripts to run in order to do the testing \n",
        "Line" : 937,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# endif\n\n# endif\n",
        "Line" : 939,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 942,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 951,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 957,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 971,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 982,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n############\n",
        "Line" : 1015,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\t$(TEST_TRANSLATOR) -rose:unparse_in_same_directory_as_input_file $(ROSE_FLAGS) -c test_directory/test2013_73.c -o test_directory/test2013_73.o\n",
        "Line" : 1025,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (9/13/2013): Added new test for -rose:unparse_includes (which has a bug in how it unparses C++ style comments\n\n# and should maybe not be unparsing declarations that are front-end specific (e.g. builtin function declarations).\n",
        "Line" : 1028,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\t$(TEST_TRANSLATOR) -rose:unparse_includes $(ROSE_FLAGS) -c $(srcdir)/test2013_75.c -o test2013_75_unparse_headers.o\n",
        "Line" : 1031,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (9/16/2013): Test linking the resulting translated file. Phil Miller reported an error and the issue\n\n# is that va_start() and va_end() must be unparsed to be __builtin_va_start() and __builtin_va_end() (at least for GNU).\n",
        "Line" : 1034,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\t$(TEST_TRANSLATOR) -rose:unparse_includes $(ROSE_FLAGS) $(srcdir)/test2013_76.c -o test2013_76_unparse_headers\n",
        "Line" : 1037,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (9/17/2013): Added autoconf style link test.\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\t$(TEST_TRANSLATOR) -I$(srcdir) $(ROSE_FLAGS) $(srcdir)/conftest.c -o conftest_configure_test\n",
        "Line" : 1042,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# This is a simple demonstration of the token unparsing and how it preserves macros\n\n# in the generated ROSE code (for the case where the statement is not transformed).\n",
        "Line" : 1045,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\trm -f test2003_12.c.mapping.passed\n\n#\t@$(MAKE) test2003_12.c.mapping.passed\n",
        "Line" : 1048,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# DQ (1/19/2014): Test the use of the gnu \"-S\" option.\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# DQ (2/17/2014): Added to force test of two week old asm fix for linking that didn't make it out in github.\n",
        "Line" : 1059,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Liao 11/19/2009\n\n# Custom tests to test rose translators as a linker (generating the final executables) for multiple files\n\n# simplest case: generate .o with -c\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# default case: generate executable a.out from any number of input files\t\n",
        "Line" : 1068,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# DQ (4/18/2015): Add the execution of the generated executable.\n",
        "Line" : 1071,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Customized test that modifies testTranslator to remove empty elses to test dangling else unparsing\n\n# test2008_02.o: $(srcdir)/test2008_02.c\n\n#\tenv ROSE_TEST_ELSE_DISAMBIGUATION=x $(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -c $(srcdir)/test2008_02.c\n",
        "Line" : 1075,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# test2008_02.o: $(srcdir)/test2008_02.c\n",
        "Line" : 1079,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# DQ (4/8/2015): This causes an error due to a bug which outputs a redundant \"-o <file>\" option\n",
        "Line" : 1084,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DQ (8/28/2015): Exclude tests using the GNU specific \"-m32\" option when using the Intel v14 compiler.\n\n# DQ (4/9/2015): Added test for using -m32 -mrtd options (required for Xen).\n",
        "Line" : 1091,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# DQ (8/28/2015): Exclude tests using the GNU specific \"-m32\" option when using the Intel v14 compiler.\n\n# DQ (4/10/2015): Added test for using -m32 option which fouces __uint128_t to be undefined (required for Xen).\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# DQ (5/12/2015): Test demonstrated by Xen build system (where test2015_133.S is a generated C source code file).\n",
        "Line" : 1105,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# DQ (8/28/2015): Exclude tests using the GNU specific \"-m32\" option when using the Intel v14 compiler.\n\n# DQ (5/24/2015): Added test for using -mregparm=3 -m32 option which fouces the regparm(0) parameter in __attribute__ (( cdecl, regparm(0) )) to be significant.\n",
        "Line" : 1109,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# DQ (5/24/2015): Added test for using -mregparm=3 -m32 option which fouces the regparm(0) parameter in __attribute__ (( cdecl, regparm(0) )) to be significant.\n",
        "Line" : 1116,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# DQ (5/27/2015): This was a bug in the internal generation of the backend compiler command line\n\n# it was removing the 2nd parameter after the \"-o\" option, instead of the next parameter after \n\n# the \"-o\" option. Note that the isue was independent of what the 2nd parameter was after the \n\n# \"-o\" option, it was just initially demonstrated with -DNDEBUG.\n",
        "Line" : 1129,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#\t@$(MAKE) test_m32_use\n",
        "Line" : 1212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "tests/nonsmoke/functional/CompileTests/CudaTests/CMakeLists.txt" : {
      "ObjectId" : "f193dc89a9ddbbd3dfcc9a81c8a244ba6c98e433",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/CudaTests/Makefile.am" : {
      "ObjectId" : "423855b1b689f5b869f1a67aed008cdb7adaaf4d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (1/25/2016): These are conditional upon EDG 4.9 which is the only version with the C++11 support.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/6/2017): We can't use C++11 mode on GNU 4.9 and greater with EDG 4.9 (requires EDG 4.12).\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 83,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 88,
        "CharPositionInLine" : 5
      },
      "9" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# NOT USING_GNU_COMPILER\n",
        "Line" : 102,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (2/28/2017): Skipping these tests for now.\n\n#\t@$(MAKE) $(TESTCODES_Objects)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 108,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 115,
        "CharPositionInLine" : 5
      },
      "18" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 118,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "#\t@$(MAKE) $(TESTCODES_Objects)\n\n#if ROSE_USE_EDG_VERSION_4_9\n\n#if !ROSE_USING_GCC_VERSION_LATER_4_9\n\n#\t@$(MAKE) testDeviceTransformation_01\n\n#\t@$(MAKE) testDeviceTransformation_02\n\n#endif\n\n#endif\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tests/nonsmoke/functional/CompileTests/Cxx11_tests/Makefile.am" : {
      "ObjectId" : "84c7f591cad8120e86b454248c1f8025bb747704",
      "LastModified" : "2019-04-15T00:38:41Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# noinst_PROGRAMS = globalVariablesInLambdas\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# globalVariablesInLambdas_SOURCES = globalVariablesInLambdas.C\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# globalVariablesInLambdas_TESTS = test_1.C\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTE: test2016_40.C fails due to a problem isolated into test2019_167.C (which required a more general form of name qualification support).\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NOTE: Best examples of current issue are: test2019_50.C and test2019_52.C\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOTE: test2019_34.C, test2019_37.C, and test2019_38.C don't compile with at least some versions of GNU g++ (e.g. version 5.1) but will \n\n# compile with EDG and ROSE now.  And the generated code is correct,\n\n# NOTE: test2019_15.C fails for the GNU 4.8.5, but passes for everything else (or at least later versions of gnu, versions 5.1 and later).\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NOTE: test2012_10.C works on with GNU 5.1, but not GNU 6.1 (something different in the header files, not handled by EDG 4.12).\n\n# Priority to fix: test2014_85.C, test2015_11.C, test2016_41.C, test2017_17.C\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (1/4/2019): These tests fail with the EDG 4.9 and GNU 4.8 compiler (Note: EDG 4.9 is only tested with the GNU 4.8 compiler).\n",
        "Line" : 703,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 776,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes\n",
        "Line" : 784,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 786,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (12/13/2017): Need to add support for multiple versions of Raja.\n\n# Use --with-research-raja=... and --with-ares-raja=... , and for other specific applications dependent on Raja.\n",
        "Line" : 801,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (2/25/2019): Combined compilation of two files has particular errors.\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (2/26/2019): Combined compilation of two files has particular errors.\n",
        "Line" : 812,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (2/27/2019): Combined compilation of two files has particular errors.\n",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 828,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 842,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n############\n",
        "Line" : 866,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n",
        "Line" : 869,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 873,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t@echo \"C++11 tests using EDG 4.9 and GNU version 4.9 backend compiler are disabled.\"\n",
        "Line" : 884,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 887,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 890,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 891,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 892,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 895,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n\n#\t@echo \"USING_CLANG_COMPILER == true\"\n",
        "Line" : 899,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 902,
        "CharPositionInLine" : 5
      },
      "33" : {
        "Text" : "#\t@echo \"USING_CLANG_COMPILER == false\"\n",
        "Line" : 903,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == true\"\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 908,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 909,
        "CharPositionInLine" : 5
      },
      "37" : {
        "Text" : "# This is an unknown compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == false\"\n",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 912,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n\n#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == false\"\n",
        "Line" : 916,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 923,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 927,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# DQ (2/21/2017): Too many failing files due to builtin functions that are missing.\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 930,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 932,
        "CharPositionInLine" : 5
      },
      "44" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 935,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 939,
        "CharPositionInLine" : 5
      },
      "46" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 940,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 942,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 48
    },
    "tests/nonsmoke/functional/CompileTests/Cxx14_tests/Makefile.am" : {
      "ObjectId" : "4fecc6724a8fdb8b6d2d2d933376366a06cea725",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (11/19/2016): This test is failing in the unparsed code (a RAJA example) at least for the GNU 6.1 compiler and using EDG 4.11).\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: last.C just simplifies the Makefile.am it\n\n# avoids common makefle errors in adding new files.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n############\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_5_1\n",
        "Line" : 168,
        "CharPositionInLine" : 5
      },
      "19" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_5_1\n\n# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 174,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (2/28/2017): Skip these tests until we can return to this problem later.\n\n#\t@$(MAKE) $(PASSING_TEST_Source_passed)\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 182,
        "CharPositionInLine" : 5
      },
      "25" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 188,
        "CharPositionInLine" : 5
      },
      "27" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 191,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 29
    },
    "tests/nonsmoke/functional/CompileTests/Cxx17_tests/Makefile.am" : {
      "ObjectId" : "ac33fd1e8386ed9a0969770ca9a1da56cf237d8a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#  EXAMPLE_TESTCODES_REQUIRED_TO_PASS +=\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    EXAMPLE_TESTCODES_REQUIRED_TO_PASS +=\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    TESTCODE_CURRENTLY_FAILING +=\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Note: last.C just simplifies the Makefile.am it\n\n# avoids common makefle errors in adding new files.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n############\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 187,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_5_1\n",
        "Line" : 198,
        "CharPositionInLine" : 5
      },
      "21" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_5_1\n\n# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 200,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 204,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (2/28/2017): Skip these tests until we can return to this problem later.\n\n#\t@$(MAKE) $(PASSING_TEST_Source_passed)\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 212,
        "CharPositionInLine" : 5
      },
      "27" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 218,
        "CharPositionInLine" : 5
      },
      "29" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 221,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 31
    },
    "tests/nonsmoke/functional/CompileTests/Cxx_tests/CMakeLists.txt" : {
      "ObjectId" : "03d2869ced628ffb079262511d4020f0c7ab6be9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this defines ROSE__CXX_TESTS and ROSE__CXX_TESTS__BOOST\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (5/28/2015): Removed test2013_257.C and test2013_260.C to avoid race condition.\n\n# test2013_257.C\n\n# test2013_260.C\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (6/12/2013): This fails to compile with EDG 4.7\n\n# (EDG complains: line 13: error: constructor or destructor may not have its\n\n#  address taken)\n\n# Skip this test code while we report the problem to EDG (and investigate\n\n# more in internally).\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Configure-time conditional\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# !ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 31,
        "CharPositionInLine" : 7
      },
      "6" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Note that the tests test2001_02.C and test2001_03.C are required because the\n\n# tests in ../C_subset_of_Cxx use them and that test2004_116.C is required\n\n# because the tests in ROSE/tests/nonsmoke/functional/roseTests/programTransformationTests use it.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# DQ (5/8/2011): Adding -rose:skipfinalCompileStep so that we can test the new name qualification support that is not yet hooked up to the unparser.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This requires a special makefile rule\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (9/13/2013): Added new test for -rose:unparse_includes (which has a bug in\n\n# how it unparses C++ style comments and should maybe not be unparsing\n\n# declarations that are front-end specific (e.g. builtin function declarations).\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (9/16/2013): Test linking the resulting translated file. Phil Miller\n\n# reported an error and the issue is that va_start() and va_end() must be\n\n# unparsed to be __builtin_va_start() and __builtin_va_end() (at least for GNU).\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (9/17/2013): Added autoconf style link test.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (9/22/2013): Added autoconf style link test.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (5/28/2015): This is a failing test (expected to fail).\n\n# add_test(\n\n#  NAME common_configure_test_with_link_part_3\n\n#  COMMAND testTranslator ${ROSE_FLAGS}\n\n#\t        -I${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/conftest_3.C\n\n#          -o conftest_configure_test_part_3\n\n# )\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/CompileTests/Cxx_tests/Cxx_Testcodes.cmake" : {
      "ObjectId" : "00ca2bfaf3e42e5988302182a55a3057a004edfd",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#EXPECTED FAIL: test2013_195.C  test2013_242.C test2012_51.C test2013_31.C\n\n#EXPECTED FAILURES in tests/nonsmoke/functional/CompileTests/unparseToString: \n\n# test2013_38.C test2013_39.C test2013_40.C test2013_63.C\n\n# test2013_234.C test2013_240.C test2013_241.C test2013_246.C \n\n# DQ (1/20/2018): This is failing due to the new duff's device support. Commenting out for now.\n\n# Note: this is not tested in the Autoconf testing, and only in the CMake testing. \n\n# But it is a new failing code.\n\n# test2013_60.C\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/Cxx_tests/Makefile.am" : {
      "ObjectId" : "0c307f0b9fcedc27c696bda6235058a5913d235e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Import list of C++ test cases that should pass:\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS_SHORT\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# EXAMPLE_TESTCODES_REQUIRED_TO_PASS = \\\n#  $(TESTCODE_CURRENTLY_FAILING)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EXAMPLE_TESTCODES_REQUIRED_TO_PASS = $(NEVER_PASING_TESTCODE_CURRENTLY_FAILING)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TOO1 (2013-08-05): Refactored testcode specification into separate global file:\n\n#\n\n#                      $ROSE/tests/nonsmoke/functional/input_codes/cxx/Makefile_variables\n\n#\n\n#                  This way all $ROSE/tests can utilize the same growing suite\n\n#                  of ROSE testcodes.\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (2/2/2019): EDG 5.0 fails for this use of __Float128, but Tristan is fixing it.\n",
        "Line" : 1124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Switch between full and short list of test codes\n",
        "Line" : 1313,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 1320,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 1324,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Note the quotes and escapes that are required:\n\n# ADDRESS_SANITIZER_OPTIONS = \"ASAN_OPTIONS=symbolize=1 ASAN_SYMBOLIZER_PATH=\\`which llvm-symbolizer\\`\"\n\n# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes\n",
        "Line" : 1329,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 1333,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 1336,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 1347,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 1353,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 1367,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 1378,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n############\n",
        "Line" : 1391,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (9/18/2011): Added testing for new option to use folded constants or the original express trees.\n",
        "Line" : 1394,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DQ (9/18/2011): This is testing the option to process the AST to use the constant folded values (contained in the AST).\n",
        "Line" : 1410,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (9/18/2011): This is the equivalent to the default using testTranslator (so not critical to run this).\n",
        "Line" : 1414,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# DQ (9/18/2011): This is testing the option to process the AST to use the constant folded values (contained in the AST).\n",
        "Line" : 1418,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# DQ (4/6/2010): Added test for parsing only (tested here for C++ code)\n",
        "Line" : 1422,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# This requires a special makefile rule\n",
        "Line" : 1426,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DQ (9/13/2013): Added new test for -rose:unparse_includes (which has a bug in how it unparses C++ style comments\n\n# and should maybe not be unparsing declarations that are front-end specific (e.g. builtin function declarations).\n",
        "Line" : 1454,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (9/16/2013): Test linking the resulting translated file. Phil Miller reported an error and the issue\n\n# is that va_start() and va_end() must be unparsed to be __builtin_va_start() and __builtin_va_end() (at least for GNU).\n",
        "Line" : 1459,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (9/17/2013): Added autoconf style link test.\n",
        "Line" : 1464,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (9/22/2013): Added autoconf style link test.\n",
        "Line" : 1469,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (9/22/2013): Added autoconf style link test.\n",
        "Line" : 1474,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (12/28/2015): Added test for new option to not normalize variable declarations.\n",
        "Line" : 1479,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (7/20/2015): Added template tests using new testTemplates translator that forces \n\n# output of instantiated templates (part of ongoing improvements to template support).\n\n# This test translator will work for test2015_32.C - test2015_36.C\n\n# I will make this in the a better organized set of tests later.\n\n# DQ (10/12/2015): Note that tests test2015_37.C through test2015_54.C are these tests.\n",
        "Line" : 1488,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n\n#      $(TESTCODE_CURRENTLY_FAILING_ON_OSX) $(STATISTICALLY_FAILING_TESTS) $(UNMENTIONED_SOURCE_FILES)\n",
        "Line" : 1516,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# DQ (6/18/2008): All of these should be present...\n\n# confdefs.h     test2001_11.h   test2001_18B.h  test2003_12.h  test2003_25.h   test2005_154.h  test2005_159.h  test2005_26.h  test2005_88.h    test2006_187b.h  test2006_42.h   test2007_113.h  test2007_137.h   test2007_167.h  test2007_42.h  test2007_97.h\n\n# foo.h          test2001_15.h   test2003_08.h   test2003_14.h  test2004_40.h   test2005_157.h  test2005_15.h   test2005_75.h  test2006_136.h   test2006_33.h    test2007_08.h   test2007_114.h  test2007_160a.h  test2007_40.h   test2007_47.h\n\n# test2001_05.h  test2001_18A.h  test2003_09.h   test2003_24.h  test2005_133.h  test2005_158.h  test2005_160.h  test2005_81.h  test2006_187a.h  test2006_36.h    test2007_101.h  test2007_136.h  test2007_160.h   test2007_41.h   test2007_48.h\n",
        "Line" : 1532,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n\n# DQ (12/11/2009): At the moment it is an failing test because \"thisIsAnError\" will be \n\n# interpreted to be a file.\n",
        "Line" : 1537,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n",
        "Line" : 1544,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n",
        "Line" : 1549,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# This was always worked but is the alternative to the normalization of source file names to absolute paths\n",
        "Line" : 1554,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# DQ (10/23/2010): Added MPI tests that I can at least run locally to debug when Hudson MPI tests fail.\n",
        "Line" : 1559,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# DQ (7/24/2018): Test for output spew from multiple files on the same command line.\n",
        "Line" : 1567,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# DQ (7/24/2011): These test fail the AST IO but pass the compilation tests.  Debug these for AST File I/O separately.\n",
        "Line" : 1571,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\techo $(TESTCODES)\n",
        "Line" : 1575,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Added performance test for ROSE evaluation:\n",
        "Line" : 1578,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DQ (3/17/2017): Added PDF test for ROSE evaluation (forces testing of parts of ROSE for lcov):\n",
        "Line" : 1582,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# DQ (11/19/2012): HPCToolKit use.  This makes some significant assumptions on how we have setup HPCToolKit.\n",
        "Line" : 1589,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\thpcprof hpctoolkit-lt-testTranslator-measurements/lt-testTranslator-000000-000-0f802c45-7612-0.hpcrun\n",
        "Line" : 1592,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\thpcviewer /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-4.2.4-dq-edg4x-rc-debug_mode_off/tests/nonsmoke/functional/CompileTests/Cxx_tests/hpctoolkit-lt-testTranslator-database-11205 &\n",
        "Line" : 1594,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# if ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 1599,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 1604,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "#  ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 1608,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 1613,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 1616,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 1620,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 1628,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "#\tI'm not sure why these are coded to run in serial [RPM 2014-08-29]\n",
        "Line" : 1629,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# DQ (2/27/2017): Adding additional restrictions for EDG 4.9 (fails for Clang and Boost 1.55).\n",
        "Line" : 1632,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#\tDQ (9/22/2013): I think this failes on later versions of GNU (e.g. gnu 4.4.5).\n\n#\t@$(MAKE) test_common_configure_test_with_link_part_3\n",
        "Line" : 1637,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#------------------------------------------------------------------------------\n\n#                           Performance Timing Tests\n\n#------------------------------------------------------------------------------\n\n## Purpose\n\n#\n\n#  Enforce a time limit constraint on testcode compilation.\n\n#\n\n### Make Targets\n\n#\n\n#  Note: A testcode's object files are removed before running the individual\n\n#  steps in these make targets.\n\n#\n\n#### Default\n\n#\n\n#  $ make <testcode>.timed\n\n#\n\n#    Compiles <testcode> with a $TIMEOUT limit\n\n#\n\n#    E.g.  $ make test2005_35.timed\n\n#\n\n#  $ make check-performance-timing\n\n#\n\n#    Compiles all testcodes with a $TIMEOUT limit\n\n#\n\n#### Threshold\n\n#\n\n#  $ make <testcode>.timed_with_threshold\n\n#\n\n#    Compiles <testcode> with g++ and then uses the g++ compile time\n\n#    as a $TIMEOUT threshold to compile <testcode> with ROSE.\n\n#\n\n#    E.g.  $ make test2005_35.timed_with_threshold\n\n#\n\n#  $ make check-performance-timing-with-threshold\n\n#\n\n#    Compiles all testcodes with a $TIMEOUT limit calculated from\n\n#    the g++ compile time threshold.\n\n#\n\n### Environment Variables\n\n#\n\n#  TIMEOUT              Maximum time limit for the compilation of a <testcode>\n\n#  TIMEOUT_TOLERANCE    $gnu_time * $TIMEOUT_TOLERANCE (threshold tests only)\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1655,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# DQ (6/30/2013): Increased this to support compiling Boost example tests. We \n\n# need to rethink how we want to handl this. I suggest restricting this to a \n\n# few tests instead of each test. Compiling with optimization also makes about\n\n# a factor of four difference for test2013_241.C (boost example test code).\n\n# Since Jenkins testing is currently done without optimization we need the \n\n# larger timeout value just to handle the newer boost test codes.\n\n# TIMEOUT            ?= 60  # Default timeout value\n",
        "Line" : 1699,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Default timeout value\n",
        "Line" : 1706,
        "CharPositionInLine" : 27
      },
      "57" : {
        "Text" : "# Default timeout tolerance value for threshold\n\n# tests = $gnu_time * $TIMEOUT_TOLERANCE\n",
        "Line" : 1707,
        "CharPositionInLine" : 26
      },
      "58" : {
        "Text" : "# 1. Time and Compile testcode with g++\n\n# 2. Compile with ROSE, using TIMEOUT relative to time results from g++\n\n#\n\n# Uses $(TESTCODES_REQUIRED_TO_PASS)\n\n#\n",
        "Line" : 1725,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 59
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/CMakeLists.txt" : {
      "ObjectId" : "d9a4159e352146fb470ca1b9d2c26e9f0e3ed73e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/Makefile.am" : {
      "ObjectId" : "7ad37ff5691ba13b1099da248fc99b34bdc2d921",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (1/28/2017): This test code (testing __builtin_next_arg()) is failing for GNU 4.8 (so backup the exclusion of this test to GNU 4.8).\n\n# DQ (1/19/2017): This test code (testing __builtin_next_arg()) is failing for GNU 5.1\n\n# if !ROSE_USING_GCC_VERSION_LATER_5_1\n\n# if !ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Will it never end!  g++ version 4.0.2 fails to pass\n\n# this test with the ROSE generated code. They to pass \n\n# with g++ version 3.3.2.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#t0147.cc\\\n#t0148.cc\\\n#t0157.cc\\\n#t0159.cc\\\n#t0162.cc\\\n#t0163.cc\\\n#t0177.cc\\\n#t0178.cc\\\n#t0196.cc\\\n#t0209.cc\\\n#t0215.cc\\\n#t0216.cc\\\n#t0221.cc\\\n#t0224.cc\\\n#t0228.cc\\\n#t0230.cc\\\n#t0242.cc\\\n#t0243.cc\\\n#t0244.cc\\\n#t0249.cc\\\n#t0251.cc\\\n#t0258.cc\\\n#t0261.cc\\\n#t0263.cc\\\n#t0264.cc\\\n#t0265.cc\\\n#t0267.cc\\\n#t0279.cc\\\n#t0282.cc\\\n#t0287.cc\\\n#t0288.cc\\\n#t0297.cc\\\n#t0299.cc\\\n#t0309.cc\\\n#t0310.cc\\\n#t0311.cc\\\n#t0339.cc\\\n#t0342.cc\\\n#t0345.cc\\\n#t0346.cc\\\n#t0347.cc\\\n#t0354.cc\\\n#t0371.cc\\\n#t0380.cc\\\n#t0383.cc\\\n#t0385.cc\\\n#t0401.cc\\\n#t0402.cc\\\n#t0403.cc\\\n#t0408.cc\\\n#t0416.cc\\\n#t0423.cc\\\n#t0427.cc\\\n#t0429.cc\\\n#t0431.cc\\\n#t0452.cc\\\n#t0466.cc\\\n#t0509.cc\\\n#t0511.cc\\\n#t0516.cc\\\n#t0518.cc\\\n#t0519.cc\\\n#t0520.cc\\\n#t0529.cc\\\n#t0533.cc\\\n#t0561.cc\\\n#t0576.cc\\\n#t0578.cc\\\n#d0041.cc\\\n#d0050elab.cc\\\n#d0053.cc\\\n# RECURSIVE: d0062.cc\\\n# RECURSIVE: d0063.cc\\\n# d0103.cc\\\n#d0110.cc\\\n#d0112.cc\\\n#d0115.cc\\\n#d0123.cc\\\n#std/13.3.3.1.4.cc\\\n#std/13.3.3.2d.cc\\\n#std/7.3.3g.cc\\\n#std/7.3.3j.cc\\\n#std/13.3.3.2a.cc\\\n#std/13.3.3b.cc\\\n#std/3.4.5.cc\\\n#std/7.3.1.cc\\\n#std/7.3.3e.cc\\\n#std/7.3.3h.cc\\\n#std/7.3.4c.cc\\\n#std/13.3.3.2b.cc\\\n#std/13.cc\\\n#std/7.3.3i.cc\\\n#std/7.3.4a.cc\\\n#gnu/d0076.cc\\\n#gnu/g0023.cc\\\n#gnu/g0024.cc\\\n#gnu/t0128.cc\\\n#gnu/g0020.cc\\\n#gnu/g0025.cc\\\n#gnu/g0026.cc\\\n#gnu/g0027.cc\\\n#gnu/t0125.cc\\\n#gnu/t0130.cc\\\n#gnu/bugs/d0106.cc\\\n#gnu/bugs/gb0005.cc\\\n#msvc/m0001.cc\\\n#k0044.cc\\\n#k0053.cc\\\n#t0006.cc\\\n#t0007.cc\\\n#t0012.cc\\\n#t0014.cc\\\n#t0030.cc\\\n#t0031.cc\\\n#t0036.cc\\\n#t0040.cc\\\n#t0054.cc\\\n#t0062.cc\\\n#t0068.cc\\\n#t0069.cc\\\n#t0072.cc\\\n#t0074.cc\\\n#t0078.cc\\\n#t0079.cc\\\n#t0082.cc\\\n#t0091.cc\\\n#t0093.cc\\\n#t0099.cc\\\n#t0109.cc\\\n#t0116.cc\\\n#t0117.cc\\\n#t0118.cc\\\n#t0120.cc\\\n#t0123.cc\\\n#t0126.cc\\\n#t0134.cc\\\n#t0136.cc\\\n#t0137.cc\\\n#t0138.cc\\\n#t0139.cc\\\n#t0140.cc\\\n#t0141.cc\\\n#t0142.cc\\\n#t0143.cc\\\n#t0144.cc\\\n#t0145.cc\\\n#t0146.cc\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#t0272.cc\\\n#t0271.cc\\\n#t0449.cc\\\n#t0465.cc\\\n#t0539.cc\\\n#t0539_9.cc\\\n#d0118.cc\\\n#d0120.cc\\\n#gnu/d0082.cc\\\n#gnu/g0019.cc\\\n#gnu/g0015.cc\\\n#gnu/g0021.cc\\\n#gnu/g0031.cc\\\n#t0129.cc\\\n#gnu/g0016.cc\\\n#gnu/k0002.cc\\\n#gnu/bugs/gb0007.cc\\\n#gnu/bugs/gb0009.cc\\\n#gnu/bugs/gb0008.cc\\\n#gnu/bugs/gb0010.cc\\\n#gnu/bugs/gb0011.cc\\\n#k0028.cc\\\n#k0034.cc\\\n#c/dcC0012.c\\\n#gnu/dC0002.c\\\n#gnu/dC0007.c\\\n#gnu/d0096.c\\\n#gnu/g0009.c\\\n#gnu/d0122.c\\\n#gnu/d0099.c\\\n#gnu/dC0014.c\\\n#c/t0004.c\\\n#c/t0013.c\\\n#c/t0022.c\\\n#c99/d0077.c\\\n#c99/n0001.c\\\n#c99/n0002.c\\\n#c99/t0133.c\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#c/dC0020.c\n\n#k0001.cc\\\n#t0127.cc\\\n#t0132.cc\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (11/11/2012): Added support to build testTranslator if it has not been built yet.\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TRANSLATOR_EXECUTABLE = $(top_builddir)/tests/nonsmoke/functional/testTranslator \n",
        "Line" : 861,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Include the path to A++ and the transformation specification\n\n# TESTCODE_INCLUDES = -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code -I$(srcdir) \n",
        "Line" : 865,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (9/3/2006): the directory \"notCompilable\" is a set of codes that demonstrate ambiguities (as I recall).\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/big/Makefile.am" : {
      "ObjectId" : "335aaa3aeb36f3caee4ffb8cd4f3e3f7fbcd2fe6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n\n# TESTCODES = \\\n#      test2001_11.C \\\n#      test2001_01.C \\\n#      test2001_02.C \\\n#      test2001_03.C \\\n#      test2001_04.C \\\n#      test2001_05.C \\\n#      test2001_06.C \\\n#      test2001_07.C \\\n#      test2001_08.C \\\n#      test2001_09.C \\\n#      test2001_10.C \\\n#      test2001_14.C \\\n#      test2001_15.C \\\n#      test2001_17.C \\\n#      test2001_18.C \\\n#      test2001_19.C \\\n#      test2001_20.C \\\n#      test2001_21.C \\\n#      test2001_22.C \\\n#      test_treeTrav_MK_01.C \\\n#      test_treeTrav_MK_02.C\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#t0147.cc\\\n#t0148.cc\\\n#t0157.cc\\\n#t0159.cc\\\n#t0162.cc\\\n#t0163.cc\\\n#t0177.cc\\\n#t0178.cc\\\n#t0196.cc\\\n#t0209.cc\\\n#t0215.cc\\\n#t0216.cc\\\n#t0221.cc\\\n#t0224.cc\\\n#t0228.cc\\\n#t0230.cc\\\n#t0242.cc\\\n#t0243.cc\\\n#t0244.cc\\\n#t0249.cc\\\n#t0251.cc\\\n#t0258.cc\\\n#t0261.cc\\\n#t0263.cc\\\n#t0264.cc\\\n#t0265.cc\\\n#t0267.cc\\\n#t0279.cc\\\n#t0282.cc\\\n#t0287.cc\\\n#t0288.cc\\\n#t0297.cc\\\n#t0299.cc\\\n#t0309.cc\\\n#t0310.cc\\\n#t0311.cc\\\n#t0339.cc\\\n#t0342.cc\\\n#t0345.cc\\\n#t0346.cc\\\n#t0347.cc\\\n#t0354.cc\\\n#t0371.cc\\\n#t0380.cc\\\n#t0383.cc\\\n#t0385.cc\\\n#t0401.cc\\\n#t0402.cc\\\n#t0403.cc\\\n#t0408.cc\\\n#t0416.cc\\\n#t0423.cc\\\n#t0427.cc\\\n#t0429.cc\\\n#t0431.cc\\\n#t0452.cc\\\n#t0466.cc\\\n#t0509.cc\\\n#t0511.cc\\\n#t0516.cc\\\n#t0518.cc\\\n#t0519.cc\\\n#t0520.cc\\\n#t0529.cc\\\n#t0533.cc\\\n#t0561.cc\\\n#t0576.cc\\\n#t0578.cc\\\n#d0041.cc\\\n#d0050elab.cc\\\n#d0053.cc\\\n# RECURSIVE: d0062.cc\\\n# RECURSIVE: d0063.cc\\\n# d0103.cc\\\n#d0110.cc\\\n#d0112.cc\\\n#d0115.cc\\\n#d0123.cc\\\n#std/13.3.3.1.4.cc\\\n#std/13.3.3.2d.cc\\\n#std/7.3.3g.cc\\\n#std/7.3.3j.cc\\\n#std/13.3.3.2a.cc\\\n#std/13.3.3b.cc\\\n#std/3.4.5.cc\\\n#std/7.3.1.cc\\\n#std/7.3.3e.cc\\\n#std/7.3.3h.cc\\\n#std/7.3.4c.cc\\\n#std/13.3.3.2b.cc\\\n#std/13.cc\\\n#std/7.3.3i.cc\\\n#std/7.3.4a.cc\\\n#gnu/d0076.cc\\\n#gnu/g0023.cc\\\n#gnu/g0024.cc\\\n#gnu/t0128.cc\\\n#gnu/g0020.cc\\\n#gnu/g0025.cc\\\n#gnu/g0026.cc\\\n#gnu/g0027.cc\\\n#gnu/t0125.cc\\\n#gnu/t0130.cc\\\n#gnu/bugs/d0106.cc\\\n#gnu/bugs/gb0005.cc\\\n#msvc/m0001.cc\\\n#k0044.cc\\\n#k0053.cc\\\n#t0006.cc\\\n#t0007.cc\\\n#t0012.cc\\\n#t0014.cc\\\n#t0030.cc\\\n#t0031.cc\\\n#t0036.cc\\\n#t0040.cc\\\n#t0054.cc\\\n#t0062.cc\\\n#t0068.cc\\\n#t0069.cc\\\n#t0072.cc\\\n#t0074.cc\\\n#t0078.cc\\\n#t0079.cc\\\n#t0082.cc\\\n#t0091.cc\\\n#t0093.cc\\\n#t0099.cc\\\n#t0109.cc\\\n#t0116.cc\\\n#t0117.cc\\\n#t0118.cc\\\n#t0120.cc\\\n#t0123.cc\\\n#t0126.cc\\\n#t0134.cc\\\n#t0136.cc\\\n#t0137.cc\\\n#t0138.cc\\\n#t0139.cc\\\n#t0140.cc\\\n#t0141.cc\\\n#t0142.cc\\\n#t0143.cc\\\n#t0144.cc\\\n#t0145.cc\\\n#t0146.cc\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#t0272.cc\\\n#t0271.cc\\\n#t0449.cc\\\n#t0465.cc\\\n#t0539.cc\\\n#t0539_9.cc\\\n#d0118.cc\\\n#d0120.cc\\\n#gnu/d0082.cc\\\n#gnu/g0019.cc\\\n#gnu/g0015.cc\\\n#gnu/g0021.cc\\\n#gnu/g0031.cc\\\n#t0129.cc\\\n#gnu/g0016.cc\\\n#gnu/k0002.cc\\\n#gnu/bugs/gb0007.cc\\\n#gnu/bugs/gb0009.cc\\\n#gnu/bugs/gb0008.cc\\\n#gnu/bugs/gb0010.cc\\\n#gnu/bugs/gb0011.cc\\\n#k0028.cc\\\n#k0034.cc\\\n\n",
        "Line" : 886,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#c/dcC0012.c\\\n#gnu/dC0002.c\\\n#gnu/dC0007.c\\\n#gnu/d0096.c\\\n#gnu/g0009.c\\\n#gnu/d0122.c\\\n#gnu/d0099.c\\\n#gnu/dC0014.c\\\n#c/t0004.c\\\n#c/t0013.c\\\n#c/t0022.c\\\n#c99/d0077.c\\\n#c99/n0001.c\\\n#c99/n0002.c\\\n#c99/t0133.c\n",
        "Line" : 993,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (9/4/2005): Generated code with name qualification \n\n# \"namespace std { template<> struct std::X < int > }\" \n\n# not allowed in g++ 3.4.3 (test commented out for now).\n\n# There are still several cases like this so that the \n\n# code generation within ROSE will not pass with 3.4.x\n\n# at present.\n\n#    test2005_81.C\n\n#    test2005_93.C\n",
        "Line" : 1011,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (7/27/2005): Example generates instanatiations for template static data members (redifinition error)\n\n#    test2005_69.C\n",
        "Line" : 1020,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (9/10/2005): This code fails with 3.4.x, but passes with 3.3.x\n\n#    test2005_98.C\n",
        "Line" : 1023,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (7/25/2005): Example which breaks g++ 3.4.3 (from Peter), also breaks ROSE :-)\n\n#    test2005_115.C\n",
        "Line" : 1026,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This demonstrates a bug in g++ (ROSE can't handle it until g++ can handle it)\n\n#    test2005_151.C\n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (6/30/2005): Removed to compile Kull (submitted by Jeremiah Willcock)\n\n#    test2005_85.C (Duff's Device)\n",
        "Line" : 1032,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Moved to explicit rule below so that we could include -I<pythonDir>\n\n#     test2005_18.C\n\n#     test2005_54.C\n\n#     test2005_24.C\n\n#     test2004_62.C \n\n#     test2004_63.C \n\n#     test2004_41.C\n",
        "Line" : 1035,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This is now an explicit makefile rule (so that we can use the -rose:C_only option)\n\n#     test2004_21.C\n\n#     test2004_21.c \n",
        "Line" : 1043,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This fails since it uses old style C and must be compiled in a file with *.c (instead of *.C)\n\n#      test2004_20.C\n",
        "Line" : 1047,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# These require special options and have specific makefile rules\n\n#     test2004_22.C\n\n#     test2004_30.C\n\n#     test2004_41.C\n",
        "Line" : 1050,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (8/8/2005): requires use od Python.h not included in ROSE distribution\n\n#     test2004_92.C\n",
        "Line" : 1055,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 1058,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n#ROSE_FLAGS = -rose:test 6\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ROSE_VERBOSE =\n",
        "Line" : 1068,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# C_ONLY =\n",
        "Line" : 1071,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 1076,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# check-local:\n\n#\t@echo \"ROSE Test Codes.\"\n\n#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\t@$(MAKE) test2004_21.o\n\n#\t@$(MAKE) test2004_22.o\n\n#\t@$(MAKE) test2004_30.o\n\n#\t@$(MAKE) test2004_41.o\n\n#\t@$(MAKE) $(TEST_Objects)\n",
        "Line" : 1078,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/ctests/CMakeLists.txt" : {
      "ObjectId" : "af078fd3729444485618846e5ee23536c57a30da",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/ctests/Makefile.am" : {
      "ObjectId" : "9c74f8b89077a1b09b1ec7644ccae12a322f8d49",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These fail as a result of the new constant folding support, I think\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/28/2017): This test code (testing __builtin_next_arg()) is failing for GNU 4.9 (so backup the exclusion of this test to GNU 4.9).\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (11/11/2012): Added support to build testTranslator if it has not been built yet.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/gnu/CMakeLists.txt" : {
      "ObjectId" : "cc99581401ce4311c5a32b97b63bfd062918db55",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/gnu/Makefile.am" : {
      "ObjectId" : "a2adecf940f42d0e1a3d35f36d0d49f0230991d8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (11/11/2012): Added support to build testTranslator if it has not been built yet.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Include the path to A++ and the transformation specification\n\n# TESTCODE_INCLUDES = -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code -I$(srcdir) \n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/kandr/CMakeLists.txt" : {
      "ObjectId" : "f51e5bf22a9f2e670d588d9ff4a2133483aad4ea",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/kandr/Makefile.am" : {
      "ObjectId" : "e1d798fe33c5de7756c682aaff513c79c64bdd4b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (11/11/2012): Added support to build testTranslator if it has not been built yet.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/notCompilable/Makefile.am" : {
      "ObjectId" : "dad6b89dff4e048916a1e557b1669f434c666b46",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n\n# TESTCODES = \\\n#      test2001_11.C \\\n#      test2001_01.C \\\n#      test2001_02.C \\\n#      test2001_03.C \\\n#      test2001_04.C \\\n#      test2001_05.C \\\n#      test2001_06.C \\\n#      test2001_07.C \\\n#      test2001_08.C \\\n#      test2001_09.C \\\n#      test2001_10.C \\\n#      test2001_14.C \\\n#      test2001_15.C \\\n#      test2001_17.C \\\n#      test2001_18.C \\\n#      test2001_19.C \\\n#      test2001_20.C \\\n#      test2001_21.C \\\n#      test2001_22.C \\\n#      test_treeTrav_MK_01.C \\\n#      test_treeTrav_MK_02.C\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/4/2005): Generated code with name qualification \n\n# \"namespace std { template<> struct std::X < int > }\" \n\n# not allowed in g++ 3.4.3 (test commented out for now).\n\n# There are still several cases like this so that the \n\n# code generation within ROSE will not pass with 3.4.x\n\n# at present.\n\n#    test2005_81.C\n\n#    test2005_93.C\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (7/27/2005): Example generates instanatiations for template static data members (redifinition error)\n\n#    test2005_69.C\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (9/10/2005): This code fails with 3.4.x, but passes with 3.3.x\n\n#    test2005_98.C\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (7/25/2005): Example which breaks g++ 3.4.3 (from Peter), also breaks ROSE :-)\n\n#    test2005_115.C\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This demonstrates a bug in g++ (ROSE can't handle it until g++ can handle it)\n\n#    test2005_151.C\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (6/30/2005): Removed to compile Kull (submitted by Jeremiah Willcock)\n\n#    test2005_85.C (Duff's Device)\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Moved to explicit rule below so that we could include -I<pythonDir>\n\n#     test2005_18.C\n\n#     test2005_54.C\n\n#     test2005_24.C\n\n#     test2004_62.C \n\n#     test2004_63.C \n\n#     test2004_41.C\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This is now an explicit makefile rule (so that we can use the -rose:C_only option)\n\n#     test2004_21.C\n\n#     test2004_21.c \n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This fails since it uses old style C and must be compiled in a file with *.c (instead of *.C)\n\n#      test2004_20.C\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# These require special options and have specific makefile rules\n\n#     test2004_22.C\n\n#     test2004_30.C\n\n#     test2004_41.C\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (8/8/2005): requires use od Python.h not included in ROSE distribution\n\n#     test2004_92.C\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n#ROSE_FLAGS = -rose:test 6\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ROSE_VERBOSE =\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# C_ONLY =\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# check-local:\n\n#\t@echo \"ROSE Test Codes.\"\n\n#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\t@$(MAKE) test2004_21.o\n\n#\t@$(MAKE) test2004_22.o\n\n#\t@$(MAKE) test2004_30.o\n\n#\t@$(MAKE) test2004_41.o\n\n#\t@$(MAKE) $(TEST_Objects)\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/notCompilable/gnu/Makefile.am" : {
      "ObjectId" : "4ca880e29c936abb4dd463167443ae257f3b9468",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n\n# TESTCODES = \\\n#      test2001_11.C \\\n#      test2001_01.C \\\n#      test2001_02.C \\\n#      test2001_03.C \\\n#      test2001_04.C \\\n#      test2001_05.C \\\n#      test2001_06.C \\\n#      test2001_07.C \\\n#      test2001_08.C \\\n#      test2001_09.C \\\n#      test2001_10.C \\\n#      test2001_14.C \\\n#      test2001_15.C \\\n#      test2001_17.C \\\n#      test2001_18.C \\\n#      test2001_19.C \\\n#      test2001_20.C \\\n#      test2001_21.C \\\n#      test2001_22.C \\\n#      test_treeTrav_MK_01.C \\\n#      test_treeTrav_MK_02.C\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/4/2005): Generated code with name qualification \n\n# \"namespace std { template<> struct std::X < int > }\" \n\n# not allowed in g++ 3.4.3 (test commented out for now).\n\n# There are still several cases like this so that the \n\n# code generation within ROSE will not pass with 3.4.x\n\n# at present.\n\n#    test2005_81.C\n\n#    test2005_93.C\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (7/27/2005): Example generates instanatiations for template static data members (redifinition error)\n\n#    test2005_69.C\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (9/10/2005): This code fails with 3.4.x, but passes with 3.3.x\n\n#    test2005_98.C\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (7/25/2005): Example which breaks g++ 3.4.3 (from Peter), also breaks ROSE :-)\n\n#    test2005_115.C\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This demonstrates a bug in g++ (ROSE can't handle it until g++ can handle it)\n\n#    test2005_151.C\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (6/30/2005): Removed to compile Kull (submitted by Jeremiah Willcock)\n\n#    test2005_85.C (Duff's Device)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Moved to explicit rule below so that we could include -I<pythonDir>\n\n#     test2005_18.C\n\n#     test2005_54.C\n\n#     test2005_24.C\n\n#     test2004_62.C \n\n#     test2004_63.C \n\n#     test2004_41.C\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This is now an explicit makefile rule (so that we can use the -rose:C_only option)\n\n#     test2004_21.C\n\n#     test2004_21.c \n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This fails since it uses old style C and must be compiled in a file with *.c (instead of *.C)\n\n#      test2004_20.C\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# These require special options and have specific makefile rules\n\n#     test2004_22.C\n\n#     test2004_30.C\n\n#     test2004_41.C\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (8/8/2005): requires use od Python.h not included in ROSE distribution\n\n#     test2004_92.C\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n#ROSE_FLAGS = -rose:test 6\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ROSE_VERBOSE =\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# C_ONLY =\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# check-local:\n\n#\t@echo \"ROSE Test Codes.\"\n\n#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\t@$(MAKE) test2004_21.o\n\n#\t@$(MAKE) test2004_22.o\n\n#\t@$(MAKE) test2004_30.o\n\n#\t@$(MAKE) test2004_41.o\n\n#\t@$(MAKE) $(TEST_Objects)\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/notCompilable/std/Makefile.am" : {
      "ObjectId" : "98dd4c430f6b5b9899d21e8b278f19e64ab1fd79",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n\n# TESTCODES = \\\n#      test2001_11.C \\\n#      test2001_01.C \\\n#      test2001_02.C \\\n#      test2001_03.C \\\n#      test2001_04.C \\\n#      test2001_05.C \\\n#      test2001_06.C \\\n#      test2001_07.C \\\n#      test2001_08.C \\\n#      test2001_09.C \\\n#      test2001_10.C \\\n#      test2001_14.C \\\n#      test2001_15.C \\\n#      test2001_17.C \\\n#      test2001_18.C \\\n#      test2001_19.C \\\n#      test2001_20.C \\\n#      test2001_21.C \\\n#      test2001_22.C \\\n#      test_treeTrav_MK_01.C \\\n#      test_treeTrav_MK_02.C\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (9/4/2005): Generated code with name qualification \n\n# \"namespace std { template<> struct std::X < int > }\" \n\n# not allowed in g++ 3.4.3 (test commented out for now).\n\n# There are still several cases like this so that the \n\n# code generation within ROSE will not pass with 3.4.x\n\n# at present.\n\n#    test2005_81.C\n\n#    test2005_93.C\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (7/27/2005): Example generates instanatiations for template static data members (redifinition error)\n\n#    test2005_69.C\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (9/10/2005): This code fails with 3.4.x, but passes with 3.3.x\n\n#    test2005_98.C\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (7/25/2005): Example which breaks g++ 3.4.3 (from Peter), also breaks ROSE :-)\n\n#    test2005_115.C\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This demonstrates a bug in g++ (ROSE can't handle it until g++ can handle it)\n\n#    test2005_151.C\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (6/30/2005): Removed to compile Kull (submitted by Jeremiah Willcock)\n\n#    test2005_85.C (Duff's Device)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Moved to explicit rule below so that we could include -I<pythonDir>\n\n#     test2005_18.C\n\n#     test2005_54.C\n\n#     test2005_24.C\n\n#     test2004_62.C \n\n#     test2004_63.C \n\n#     test2004_41.C\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This is now an explicit makefile rule (so that we can use the -rose:C_only option)\n\n#     test2004_21.C\n\n#     test2004_21.c \n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This fails since it uses old style C and must be compiled in a file with *.c (instead of *.C)\n\n#      test2004_20.C\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# These require special options and have specific makefile rules\n\n#     test2004_22.C\n\n#     test2004_30.C\n\n#     test2004_41.C\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (8/8/2005): requires use od Python.h not included in ROSE distribution\n\n#     test2004_92.C\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n#ROSE_FLAGS = -rose:test 6\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ROSE_VERBOSE =\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# C_ONLY =\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# check-local:\n\n#\t@echo \"ROSE Test Codes.\"\n\n#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\t@$(MAKE) test2004_21.o\n\n#\t@$(MAKE) test2004_22.o\n\n#\t@$(MAKE) test2004_30.o\n\n#\t@$(MAKE) test2004_41.o\n\n#\t@$(MAKE) $(TEST_Objects)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/std/CMakeLists.txt" : {
      "ObjectId" : "b32ecbcf3274548d8facb097122651e5f1dff245",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/ElsaTestCases/std/Makefile.am" : {
      "ObjectId" : "60b3892f756f7e4961a38de394ee4700b1498d12",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (6/22/2011): Failing test copied to Cxx_tests (for further testing).\n\n# 7.3.3a.cc\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (12/5/2006): Many of these tests are expected failures \n\n# (e.g. 13.1g.cc, but it only fails for g++ 3.4.x, and passes for g++ 3.3.x)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (11/11/2012): Added support to build testTranslator if it has not been built yet.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/nonsmoke/functional/CompileTests/ExpressionTemplateExample_tests/CMakeLists.txt" : {
      "ObjectId" : "05a17f13401803f2f143f02f4add87a84d29ce26",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TESTCODES_REQUIRED_TO_PASS is an empty list in Makefile.am, so\n\n# this directory does nothing.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/ExpressionTemplateExample_tests/Makefile.am" : {
      "ObjectId" : "fdfd39e3250fddf94ba8888a8b6c026607f22423",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#################################################################\n\n# These are C++ testcodes targeting use of expression templates #\n\n#################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The test2006_29.C file is a classic expression template example code and it\n\n# works fine but takes too long to be practical to compile within \"make check\".\n\n# It appears to take about 60 minutes to compile (likely part of a bug in ROSE).\n\n# It is likely dues to the current inefficency of computing names (particualrly \n\n# mangled names) within ROSE.  This will be fixed later.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/CompileTests/FailSafe_tests/Makefile.am" : {
      "ObjectId" : "a83a4b20105ad9d316ea6095c4ba09c73961bad6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#if ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT\n\n#  SUBDIRS += fortran \n\n#endif\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--edg:no_warnings -w -rose:verbose 0 --edg:restrict #-rose:wave \n",
        "Line" : 24,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t@$(MAKE) $(PASSING_CXX_TEST_Objects)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/CMakeLists.txt" : {
      "ObjectId" : "117b5aab4ce2fe2d49807f2974a821613d31cf9f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#EXPECTED FAILURE: test2011_Rice_A-cant-assert-keyword-nonnull.f90\n\n#EXPECTED FAILURE: test2011_Rice_B-cant-assert-keyword-nonnull.f90\n\n#EXPECTED FAILURE: test2011_Rice_C-cant-assert-keyword-nonnull.f90\n\n#EXPECTED TO FAILURE: test2011_Rice_lost-func-return-type.f90 \n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# DQ (4/10/2011): If it is not gfortran 4.5, then add this test code (these fail syntax checking with 4.5).\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#EXPECTED FAILURE: test2011_37.f90\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# phlin (as 08/22/2012):\n\n# test case for ROSE-bugs #597\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# These are tests that fail using the gfrotran version 4.0 compiler (but pass with all other versions of gfortran).\n",
        "Line" : 138,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# DQ (2/1/2011): These test codes will not pass the initial syntax checking with the GNU gfortran version 4.4.x compiler.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/LANL_POP/CMakeLists.txt" : {
      "ObjectId" : "dc2e39f8a3bd7b034261c4ccf90cf72e6629968a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#expected failure: io_netcdf_testcode_01.F90\n\n#expected failure: io_netcdf_testcode_02.F90\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# set up dependencies between tests\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Main file to compile (includes all other files as modules)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#EXPECTED FAILURES:\n\n# DQ (9/17/2010): This is a test code to demonstrate a bug in the ROSE F90 support.\n\n#set_tests_properties(io_netcdf_testcode_01.F90 PROPERTIES DEPENDS\n\n#  \"gather_scatter.F90;netcdf.F90\")\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (9/17/2010): This is a test code to demonstrate a bug in the ROSE F90 support.\n\n#set_tests_properties(io_netcdf_testcode_02.F90 PROPERTIES DEPENDS\n\n#  \"gather_scatter.F90;netcdf.F90\")\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (8/23/2010): Added support for NetCDFlib\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/LANL_POP/Makefile.am" : {
      "ObjectId" : "30b5ae6626b4cb489452a944d61ca52cf7b894bf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# These are Fortran testcodes from the LANL POP code (mostly F77 and F90) #\n\n###########################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make all the code dependent upon the kinds_mod.F90 file\n\n# advection.o : kinds_mod.o\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# #######################\n\n#      FAILING TESTS\n\n# #######################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This are the POP source files (excluding module files)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These modules are not used!\n\n# current_meters.F90\n\n# drifters.F90\n\n# hydro_sections.F90\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NET CDF library source files (from the web)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These file are required as dependent modules and will be compiled as part\n\n# of compiling the other files.  They should not be listed as explicit files\n\n# to be compiled else we will generate circular makefile dependencies.\n\n# fix_64.C \n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (11/5/2016): Mark this file as an issue for the address sanitizer (GNU 4.8.3 version fails to resolve issue).\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# F90_INCLUDED_MODULES+=communicate.F90\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (8/23/2010): This tests only the ability to read the Fortran code and generate the AST.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# TRANSLATOR_EXECUTABLE=testParser\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# $(TRANSLATOR_EXECUTABLE): $(TRANSLATOR)\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Vebose setting of 3 is required for all stack information to be output.\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:output_warnings -rose:output_parser_actions -rose:exit_after_parser\n\n# ROSE_FLAGS = -rose:verbose 3 -rose:output_warnings -rose:output_parser_actions\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:output_warnings -rose:output_parser_actions -rose:compileFixed\n\n# ROSE_FLAGS = -rose:verbose 3 -rose:output_warnings -rose:output_parser_actions -rose:compileFixed\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:compileFixed\n\n# ROSE_FLAGS = -rose:verbose 3\n\n# ROSE_FLAGS = -rose:verbose 0\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:output_warnings -rose:output_parser_actions\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_TESTCODES:.F=.o}\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# All of the following .o files generated from .F90 sources used the same compile command-line, so I've factored them all out\n\n# into this implicit rule instead of repeating them for each .o target.  If you need to override this command for some\n\n# particular .o target then this command can be copied into the specific target and modified there. [Matzke, 2015-04-15]\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (8/5/2010): This test needs access to MPI (not a requirement for ROSE, so it is copied to this directory).\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Main file to compile (includes all other files as modules)\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (8/23/2010): Added support for NetCDFlib\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (9/17/2010): This is a test code to demonstrate a bug in the ROSE F90 support.\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (9/17/2010): This is a test code to demonstrate a bug in the ROSE F90 support.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Example of how to call the OpenFortranParser\n\n#\tjava parser.java.FortranMain --class parser.java.FortranParserActionJNI $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# $(TEST_F90_Objects): ../preprocessor ${ALL_TESTCODES}\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f90)\n\n#\tjava fortran.ofp.FrontEnd --dump $(srcdir)/$(@:.o=.f90)\n\n#\t$(VALGRIND) ../preprocessor $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n#\t$(VALGRIND) $(TRANSLATOR) $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.F90)\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f77)\n\n#\tjava fortran.ofp.FrontEnd --dump $(srcdir)/$(@:.o=.f77)\n\n#\t$(VALGRIND) $(TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.F77)\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f)\n\n#\tjava fortran.ofp.FrontEnd --dump $(srcdir)/$(@:.o=.f)\n\n#\t$(VALGRIND) $(TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.F)\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.\n\n#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep\n\n#       to avoid processing the generated code (which would have the same problem).  It is easier to just use\n\n#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed \n\n#       on versions of gfortran 4.2 and 4.3.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f03)\n\n#\tjava fortran.ofp.FrontEnd --dump $(srcdir)/$(@:.o=.f03)\n\n#\t$(VALGRIND) $(TRANSLATOR) $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.F03)\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\tBuild a object file since gfortran fails to do so (avoids remaking the makefile target)\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# This will output the example testcodes that are failing\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\t@$(MAKE) check-parsing\n\n#\t@$(MAKE) clean\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/Makefile.am" : {
      "ObjectId" : "d64cd2f7699e2be8e07ab4a2b753852dec6ae155",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/22/2016): Change order of tests (simple --> hardest).\n\n# SUBDIRS = LANL_POP gfortranTestSuite\n\n# SUBDIRS = . gfortranTestSuite LANL_POP\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/21/2017): This directory has some failing test codes for ROSE when compiled using the Intel v16 compiler, for example:\n\n#   gfortranTestSuite/gfortran.dg/continuation_6.f\n\n#   gfortranTestSuite/gfortran.dg/continuation_4.f90\n\n# SUBDIRS += gfortranTestSuite\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########################################################################\n\n# These are Fortran testcodes targeting aspects F66, F77, F90, F95, F2003 #\n\n###########################################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Rasmussen(1/9/2019): rose-1612.f90 uses the module in rose_iso_c_binding.f90 which runs afoul of a\n\n# naming conflict policy.  Need to figure out how to get around this and have the module build first.\n\n#    rose_iso_c_binding.f90\n\n#    rose-1612.f90\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (11/11/2014): These test fail due to changes to support C++11 work (need to look into this separately).\n\n#    test2010_154.f90\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# SKW 8/21/2011: these test fails with gfortran 4.1.2, but there is no 'ROSE_USING_GFORTRAN_VERSION_4_1_2'\n\n# yet so I am just commenting them out for now. They pass with gfortran 4.4.1\n\n#     test2007_108.f90\n\n#     test2010_03.f90\n\n#     test2010_81.f90\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (4/10/2011): If it is not gfortran 4.5, then add this test code (these fail syntax checking with 4.5).\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These fail and have been moved to be tested unde 4.2.x only.\n\n# test2011_Rice_alternate-return-argument.f90\n\n# test2011_Rice_alt-return-call.f90\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# SKW 4/17/2011: tests which may actually be incorrect Fortran 90 -- need to study the standard.\n\n#     test2011_Rice_false-forward-decl-func-type.f90\n\n#     test2011_Rice_forward-ref-with-sub.f90\n\n#     test2011_Rice_lost-func-return-type.f90\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SKW 3/18/2011: tests which are correct and pass in ROSE, but sometimes fail\n\n# when run in Hudson (nondeterministically, on amd64-linux with gcc 4.1.2)\n\n#     test2011_Rice_A-cant-assert-keyword-nonnull.f90\n\n#     test2011_Rice_B-cant-assert-keyword-nonnull.f90\n\n#     test2011_Rice_C-cant-assert-keyword-nonnull.f90\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Liao 2/11/2010, 'include' issue on gfortran 4.2.0 of Mac OS X\n\n# 4.2.1 can handle them properly\n\n#if !OS_MACOSX\n\n#  F90_TESTCODES_REQUIRED_TO_PASS += \\\n#       test2007_29.f90 \\\n#       test2010_01.f90 \\\n#       test2010_50.f90\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#endif\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (2/12/2011): This test codes appears to randomly fail (failed on GNU 4.1.2)\n\n# I will look into this separately. \n\n# Within Hudson is has failed for:\n\n#       test#2044 on hudson-rose-04 using GNU 4.3.2\n\n#       test#2056 on tux284 using GNU 4.1.2\n\n# It passes without error using Valgrind and I can't get it to fail locally \n\n# on tux321 (using GNU 4.2.4).  One intermediate step would be to have it be \n\n# tested by Hudson on only 4.2.4 machines.\n\n#    test2010_161.f90\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (1/31/2011): Some F90 testcodes need to be be F03 testcodes.  These are\n\n# fixed as only F03 codes (note that test2011_26.f03 is already a F03 code).\n\n#     test2011_24.f90\n\n#     test2011_25.f90\n\n#     test2011_27.f90\n\n#     test2011_28.f90\n\n#     test2011_29.f90\n\n#     test2011_30.f90\n\n#     test2011_31.f90\n\n#     test2011_32.f90\n\n#     test2011_33.f90\n\n#     test2011_34.f90\n\n#     test2011_35.f90\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (1/18/2011): Failing tests.\n\n#     test2007_100.f90\n\n#     test2007_135.f90 \n\n#     test2007_219.f90 \n\n#     test2010_35.f90\n\n#     test2010_49.f90\n\n#     test2010_59.f90 \n\n#     test2010_136.f90 \n\n#     test2010_151.f90 \n\n#     test2010_154.f90 \n\n#     test2010_174.f90 \n\n#     test2011_05.f90 \n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (1/20/2011): Failing tests.\n\n#     test2007_248.f90 \n\n#     test2010_49.f90 \n\n#     test2010_136.f90 \n\n#     test2010_151.f90 \n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This used to work, but fails how that test2010_172.f90 and test2010_184.f90 pass\n\n# It seems that these are mutually exclusive!!!\n\n#    test2007_103.f90\n\n#    test2007_139.f90\n\n#    test2007_189.f\n\n#    test2007_227.f\n\n#    test2010_29.f\n\n#    test2010_30.f \n\n#    test2010_120.f90\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (12/5/2010): This generates an internal gfortran compiler error.\n\n# retest on Hudson later after we get the current work checked in.\n\n# test2010_119.f90:29: internal compiler error: in emit_move_insn, at expr.c:3162\n\n#     test2010_119.f90\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# DQ (3/1/2017): If using Clang or Intel compilers then these variable might not be set. So avoid\n\n# using GNU 5.4 compiler on Ubuntu system by mistake (see ROSE Matrix Testing for 2/28/2017).\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# These are tests that fail using the gfrotran version 4.0 compiler (but pass with all other versions of gfortran).\n",
        "Line" : 432,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# DQ (2/1/2011): These test codes will not pass the initial syntax checking with the GNU gfortran version 4.4.x compiler.\n\n#if !ROSE_USING_GFORTRAN_VERSION_4_4\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#  F90_TESTCODES_REQUIRED_TO_PASS += test2010_164.f90 test2011_37.f90 \n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (4/10/2011): And if it is not gfortran 4.5, then add this test code.\n\n#if !ROSE_USING_GFORTRAN_VERSION_4_5\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (4/9/2011): Insure++ has identified problems with these tests, great news but I am not prepared to fix \n\n# them yet. Currently these fail for Insure++, they also report errors which will be valuable in identifing \n\n# the root cause of the problems that we have seen with the altrnative-return support in Fortran.\n\n# But as a basis for continuted testing, we first isolate these tests to NOT be run when Insure++\n\n# is in use so that we can focus on this in a later iteration after we have initial testing into place.\n\n# I want to make sure that these are the only problem that cause Insure++ to fail, then we can re-enable \n\n# these tests and track down the problem.\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (4/3/2011): The test2011_Rice_alternate-return-argument.f90 failes too frequently (not frequently \n\n# enough to reproduce the failure in a controled way, but frequently enough to hold back other progress\n\n# in ROSE (e.g for other language and analysis support). I have forced this test to run where it appears\n\n# to be reliable, but have skipped testing in on 4.1.x systems where it appears to be unreliable. The\n\n# fault is not in the test but somewhere in ROSE (we expect), but it can't be reproduced so far in a \n\n# controled way. We are standing up more agressive static analysis and dynamic analysis testing in ROSE \n\n# which we hope will help address this issue.\n\n# DQ (3/29/2011): Added test2011_Rice_alternate-return-argument.f90 to short list of test codes that\n\n# appear to have a problem on 4.1.x version compilers.  Both of these codes implement the alternate \n\n# return but have been a problem on 4.1.x and maybe 4.3.x compilers (though might have less to do \n\n# with the gfortran versions than something else either in ROSE or in the JVM on these machines.\n\n# The goal is to restrict these tests and see if the seamingly statistical failures on the Hudson\n\n# machines stop, then we can expand the testing with this information.  Organizing the tests this \n\n# way will at least make sure that the tests are run, if only for one version of the compiler.\n\n# DQ (2/13/2011): GNU gfortran 4.2 is a gnu configuration where I want to have test2010_161.f90 be tested.\n\n# It has previously demonstrated a statistical failure on 4.1.2 and 4.3.2 (running it on 4.2 machines\n\n# is an incremental step to getting it into more uniform testing, since I can't get it to fail locally).\n\n# It also passes valgrind just fine, so this is a bit of a mystery at present.\n\n# (4/19/2011): Removed problem tests from being tested in ROSE for now.\n\n#if ROSE_USING_GFORTRAN_VERSION_4_2\n\n#   F90_TESTCODES_REQUIRED_TO_PASS += \\\n#     test2010_161.f90 \\\n#     test2011_Rice_alternate-return-argument.f90 \\\n#     test2011_Rice_alt-return-call.f90\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#endif\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (3/29/2011): This is now passing the LLVM tests, so I will leave it alone and thus leave it in to run on all platforms.\n\n# test2011_Rice_alternate-return-argument.f90\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (3/29/2011): Since Rice is using the gfortran 4.4.x compiler we want to also have these tests \n\n# run there. This should simplify their testing, while avoiding the 4.1.x and 4.3.x compilers where \n\n# this has been a problem.  However, it is still not clear that this problem anything to do with the \n\n# gfortran version (even though it appears to corrolate perfectly).\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# DQ (4/2/2011): Removed this test from use on GNU 4.4.x machines since it appears to fail there.\n\n# We are standing up more agressive static analysis and dynamic analysis testing in ROSE which \n\n# we hope will help address this issue.\n\n#  F90_TESTCODES_REQUIRED_TO_PASS += \\\n# test2010_161.f90 \n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# DQ (1/18/2011): Failing tests.\n\n#     test2007_150.f \n\n#     test2007_209.f \n\n#     test2007_227.f \n\n#     test2007_232.f \n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# DQ (1/20/2011): Failing tests.\n\n#     test2007_227.f \n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# DQ (1/18/2011): Failing tests.\n\n#     test2007_133.f03 \n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# DQ (4/3/2010): Added test code used in Fortran OpenMP tests.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# This now passes as part of the F03_TESTCODES_REQUIRED_TO_PASS tests\n\n#   F03_TESTCODES_REQUIRED_TO_PASS += test2007_43.f03\n",
        "Line" : 676,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# DXN (as of 08/10/2011):\n",
        "Line" : 680,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# DQ (11/11/2014): These test fail due to changes to support C++11 work (need to look into this seperately).\n\n#    test2010_107.f90 \n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# DQ (3/4/13): Failing test for edg4x branch\n\n# test2010_48.f90 \n",
        "Line" : 762,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# DQ (2/21/13): Failing test for edg4x branch\n\n# test2010_48.f90 \n\n# test2010_66.f90 \n\n# test2010_67.f90 \n\n# test2010_146.f90 \n\n# test2010_147.f90 \n\n# test2010_149.f90 \n\n# test2011_03.f90 \n\n# test2011_53.f90 \n\n# test2011_54.f90 \n\n# test2011_55.f90 \n\n# test2011_57.f90 \n\n# test2011_62.f90 \n\n# test2011_69.f90 \n\n# phlin (as 08/22/2012):\n\n# test case for ROSE-bugs #597\n",
        "Line" : 765,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# DQ (9/30/2011): There is a long history of this being a statistical failure on at least OSX systems. \n\n# test2010_161.f90 \n\n# Liao 12/15/2011. This one also uses alternative return according to Dan\n\n#     test2011_66.f90  \n",
        "Line" : 786,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DXN (as of 08/10/2011):\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# DXN (as of 08/10/2011):\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# DQ (11/11/2014): These test fail due to changes to support C++11 work (need to look into this seperately).\n\n#     test2010_106.f03 \n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# #######################\n\n#      FAILING TESTS\n\n# #######################\n",
        "Line" : 826,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "## Cray pointer Tests\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# \"X-*\" tests are Rice-reported bugs not yet fixed.\n\n# DQ(1/30/2011): test2010_150.* - test2010_168.* are Rice tests\n",
        "Line" : 896,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# JJW -- this can't be in the f90 file list because it does not have the .f90 extension\n\n#    test2008_02.f\n",
        "Line" : 899,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#if !OS_MACOSX\n\n#  # Liao 2/11/2011. gfortran 4.2.0 on Mac cannot handle include '/long/absolute/path/file.h'\n\n#  F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING += test2008_01.F90\n\n#endif\n",
        "Line" : 904,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 937,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# DQ (11/20/2010): Added test codes requiring preprocessing\n",
        "Line" : 950,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 954,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict $(PERFORMANCE_REPORT_OPTION)\n\n# ROSE_FLAGS = -rose:verbose 3 -rose:output_parser_actions -I$(srcdir)\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:unparse_tokens -rose:output_parser_actions -I$(srcdir)\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:unparse_tokens -I$(srcdir)\n\n# ROSE_FLAGS = -rose:verbose 0 -I$(srcdir)\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# DQ (9/26/2011): Added optional test for dangling pointers to IR nodes in the AST (level 2 causes assertion if dangling pointers is found).\n",
        "Line" : 985,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n",
        "Line" : 988,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 990,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 994,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# DQ (3/11/2010): F77 tests were not being run, this fixes this.\n\n# PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_TESTCODES:.f=.o}\n",
        "Line" : 1010,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# PASSING_TEST_Objects = $(PASSING_TEST_F90_Objects) $(PASSING_TEST_F77_Objects) $(PASSING_TEST_F77_FIXED_FORMAT_Objects) $(PASSING_TEST_F03_Objects) \n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 1035,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# DQ (10/4/2010): Added tests to make sure that the AST graphs can be generated for all\n\n# Fortran input test codes. This tests a problem that was reported previously by Rice.\n\n# $(TEST_F90_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}\n\n# # $(TEST_F90_Objects): ../../testTranslator\n\n# # Example of how to call the OpenFortranParser\n\n# #\tjava parser.java.FortranMain --class parser.java.FortranParserActionJNI $(srcdir)/$(@:.o=.f90)\n\n# #\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f90)\n\n# # How to call a ROSE translator with a Fortran source file.\n\n# if !ROSE_USE_INSURE\n\n# \t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n# \t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n# \t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n# #\t$(VALGRIND) ../../testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n# else\n\n# #\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n# #\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n\n# \t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; ../../testTranslator --help > /dev/null; echo \"Fixed\"; fi\n\n# \tcp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)\n\n# \t./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n# \techo \"Removing the just built copy of lt-testTranslator to save space...\"\n\n# \trm -f testTranslator_$(@:.o=)\n\n# endif\n",
        "Line" : 1057,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Rasmussen (12/20/2018): Path to the SDF Fortran parse table\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 1085,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#\t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 1087,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#\t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 1089,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#\t$(VALGRIND) ../../testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 1091,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#\tsglri -i $(srcdir)/$(@:.f90.passed=.f90) -p $(top_srcdir)/src/3rdPartyLibraries/experimental-fortran-parser/share/rose/Fortran.tbl | pp-aterm -o $(@:.f90.passed=.f90).aterm\n\n#\t@$(RTH_RUN) CMD=\"sglri -i $(srcdir)/$(@:.f90.passed=.f90) -p $(SDF_OFP)/Fortran.tbl | pp-aterm -o $(@:.f90.passed=.f90).aterm\" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testAtermGeneration.passed) || true\n\n# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!\n\n#\t@$(RTH_RUN) CMD=\"../../testTranslator -rose:experimental_fortran_frontend $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.f90.passed=.f90)\" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testTokenGeneration.passed)\n",
        "Line" : 1093,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!\n\n#\t@$(RTH_RUN) CMD=\"../../testAtermGraphGeneration $(@:.f90.passed=.f90.aterm)\" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testAtermGraphGeneration.passed) || true\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n#\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n",
        "Line" : 1103,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# $(TEST_REQUIRING_PREPROCESSOR_F90_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}\n\n# if !ROSE_USE_INSURE\n\n# \t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)\n\n# \t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)\n\n# \t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)\n\n# else\n\n# #\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n# \t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; ../../testTranslator --help > /dev/null; echo \"Fixed\"; fi\n\n# \tcp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)\n\n# \t./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)\n\n# \techo \"Removing the just built copy of lt-testTranslator to save space...\"\n\n# \trm -f testTranslator_$(@:.o=)\n\n# endif\n",
        "Line" : 1112,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)\n",
        "Line" : 1128,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#\t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)\n",
        "Line" : 1130,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#\t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)\n",
        "Line" : 1132,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#\t@$(RTH_RUN) CMD=\"sglri -i $(srcdir)/$(@:.F90.passed=.F90) -p $(SDF_OFP)/Fortran.tbl | pp-aterm -o $(@:.F90.passed=.F90).aterm\" $(top_srcdir)/scripts/test_exit_status $(@:.F90.passed=.F90.testAtermGeneration.passed) || true\n\n# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!\n\n#\t@$(RTH_RUN) CMD=\"../../testTranslator -rose:experimental_fortran_frontend $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.F90.passed=.F90)\" $(top_srcdir)/scripts/test_exit_status $(@:.F90.passed=.F90.testTokenGeneration.passed)\n",
        "Line" : 1135,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n",
        "Line" : 1140,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# $(TEST_F77_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}\n\n# #\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f77)\n\n# if !ROSE_USE_INSURE\n\n# \t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n\n# \t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n\n# \t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n\n# else\n\n# #\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n# #\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n\n# \t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; ../../testTranslator --help > /dev/null; echo \"Fixed\"; fi\n\n# \tcp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)\n\n# \t./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n\n# \techo \"Removing the just built copy of lt-testTranslator to save space...\"\n\n# \trm -f testTranslator_$(@:.o=)\n\n# endif\n",
        "Line" : 1148,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f77)\n",
        "Line" : 1165,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n",
        "Line" : 1167,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#\t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n",
        "Line" : 1169,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "#\t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n",
        "Line" : 1171,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "#\t@$(RTH_RUN) CMD=\"sglri -i $(srcdir)/$(@:.f77.passed=.f77) -p $(SDF_OFP)/Fortran.tbl | pp-aterm -o $(@:.f77.passed=.f77).aterm\" $(top_srcdir)/scripts/test_exit_status $(@:.f77.passed=.f77.testAtermGeneration.passed) || true\n\n# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!\n\n#\t@$(RTH_RUN) CMD=\"../../testTranslator -rose:experimental_fortran_frontend $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f77.passed=.f77)\" $(top_srcdir)/scripts/test_exit_status $(@:.f77.passed=.f77.experimental.passed)\n",
        "Line" : 1174,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n#\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n",
        "Line" : 1179,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# $(TEST_F77_FIXED_FORMAT_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}\n\n# #\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f)\n\n# if !ROSE_USE_INSURE\n\n# \t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n\n# \t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n\n# \t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n\n# else\n\n# #\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n# #\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n\n# \t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; ../../testTranslator --help > /dev/null; echo \"Fixed\"; fi\n\n# \tcp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)\n\n# \t./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n\n# \techo \"Removing the just built copy of lt-testTranslator to save space...\"\n\n# \trm -f testTranslator_$(@:.o=)\n\n# endif\n",
        "Line" : 1188,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f)\n",
        "Line" : 1205,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n",
        "Line" : 1207,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#\t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n",
        "Line" : 1209,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#\t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n",
        "Line" : 1211,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "#\t@$(RTH_RUN) CMD=\"sglri -i $(srcdir)/$(@:.f.passed=.f) -p $(SDF_OFP)/Fortran.tbl | implode-asfix | pp-aterm -o $(@:.f.passed=.f).aterm\" $(top_srcdir)/scripts/test_exit_status $(@:.f.passed=.f.testAtermGeneration.passed) || true\n\n# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!\n\n#\t@$(RTH_RUN) CMD=\"../../testTranslator -rose:experimental_fortran_frontend$(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f.passed=.f)\" $(top_srcdir)/scripts/test_exit_status $(@:.f.passed=.f.testTokenGeneration.passed)\n",
        "Line" : 1214,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n#\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n",
        "Line" : 1219,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.\n\n#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep\n\n#       to avoid processing the generated code (which would have the same problem).  It is easier to just use\n\n#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed \n\n#       on versions of gfortran 4.2 and 4.3.\n\n# $(TEST_F03_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration \n\n# if !ROSE_USE_INSURE\n\n# #\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f03)\n\n# #\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n# #\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n# \t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n# #\t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n# #\tSince gfortran does not support F03, and thus we skip the compileation using the backend gfortran compiler, we have to force the generation of an object file. \n\n# #\tBuild a object file since gfortran fails to do so (avoids remaking the makefile target)\n\n# \t@echo \"   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation).\"\n\n# \t@touch $@\n\n# else\n\n# #\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n# #\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n\n# \t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; ../../testTranslator --help > /dev/null; echo \"Fixed\"; fi\n\n# \tcp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)\n\n# \t./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n# \techo \"Removing the just built copy of lt-testTranslator to save space...\"\n\n# \trm -f testTranslator_$(@:.o=)\n\n# endif\n",
        "Line" : 1228,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#\t$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n",
        "Line" : 1256,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "#\t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n#\tSince gfortran does not support F03, and we skip the compilation using the backend gfortran compiler, we have to force the generation of an object file. \n\n#\tBuild a object file since gfortran fails to do so (avoids remaking the makefile target)\n",
        "Line" : 1258,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#\tDQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.\n\n#\t@if test ! -f \"../../.libs/lt-testTranslator\"; then echo \"Can NOT find ../../.libs/lt-testTranslator\"; exit 1; fi\n",
        "Line" : 1267,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# DQ (4/6/2010): Added test for parsing only (tested here for C++ code)\n",
        "Line" : 1276,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 1283,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 1289,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# DQ (11/5/2016): Fixed this to use the RTH script so that address sanitizer could be used consistantly for all tests.\n\n# DQ (11/11/2008): Module test copied from developersScratchSpace/Dan/Fortran_tests\n\n# This file declares a module used by module_B_file.f90\n\n# module_A_file.o: testTranslator\n\n# TEST_F90_Sources = ${ALL_F90_TESTCODES:.f90=.f90.passed}\n",
        "Line" : 1292,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# module_A_file.o: testTranslator\n\n#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)\n\n#\t@$(RTH_RUN) CMD=\"../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.F90.passed=.F90)\" $(top_srcdir)/scripts/test_exit_status $@\n\n#\t@$(RTH_RUN) CMD=\"../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)\" $(top_srcdir)/scripts/test_exit_status $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 1298,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "#\t../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 1303,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# Force representation of module dependency so that mod files are properly generated before use.\n\n# module_B_file.o: testTranslator module_A_file.o\n",
        "Line" : 1305,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)\n\n#\t../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 1308,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# Output spew test from John.\n",
        "Line" : 1321,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# Makefile rule to reproduce a current OFP bug that causes OFP to fail silently (not returning a proper exit code).\n",
        "Line" : 1325,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# DQ (3/29/2011): Added special test to support this problem that appears correlated to gfortran 4.1.2\n\n# though might be unrelated to the gfortran version number.\n",
        "Line" : 1329,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# We will build a larger collection of module tests soon (supported by makefile dependence rules).\n\n# PASSING_MODULE_TEST_Objects = module_B_file.o\n",
        "Line" : 1336,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# DQ (10/4/2010): Test calling OFP directly and ROSE for different filename extensions.\n",
        "Line" : 1340,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# DQ (10/18/2010): Test suggested from bug reported by Carlo Bertolli at Imperial.\n",
        "Line" : 1369,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "#\tTest source code with macro defined from the command line: e.g. \"integer*PS  pe\"\n",
        "Line" : 1371,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# DQ (11/5/2010): This bug causes the unparsed second file to include a Fortran \"include\" statement (magically).\n\n# Note that the compilation will generate an error not caught by make since the use of \"cat\" will succeed.\n",
        "Line" : 1386,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# DQ (11/5/2010): When unparsed, this file is missing the statement \"i1 = 1\" in the generated code.\n\n# DQ (11/30/2010): Rice has a fix for this in their merge that should be checked in shortly.\n",
        "Line" : 1391,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "#\t../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90\n\n#\t../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_80.f90\n",
        "Line" : 1394,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# DQ (9/19/2011): Added Cray pointer test using test code from Imperial College London.\n",
        "Line" : 1409,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# DQ (4/9/2011): Let's at least run these in parallel (more important for the Insure++ tests).\n",
        "Line" : 1414,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# DQ (2/2/2011): We are now enforcing the module names are unique so that we can always run the \n\n# test code in parallel and avoid name conflicts with *.mod (gfortran) and *.rmod (rose) files.\n",
        "Line" : 1417,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 1425,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "#\t@$(MAKE) $(PASSING_MODULE_TEST_Objects)\n\n#\t@$(MAKE) testCPP_Defines\n\n#\t@$(MAKE) testMPItypes\n\n#\t@$(MAKE) testMultipleFortranFiles\n",
        "Line" : 1427,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese Fortran programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 1438,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "#\tDQ (2/2/2011): This test presently fails (test codes are being fixed).\n",
        "Line" : 1441,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 1443,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "#\t@$(MAKE) $(PASSING_MODULE_TEST_Objects)\n\n#\t@$(MAKE) testCPP_Defines\n\n#\t@$(MAKE) testMPItypes\n\n#\t@$(MAKE) testMultipleFortranFiles\n",
        "Line" : 1445,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "#\tDQ (4/6/2010): This fails on Hudson, but I don't know why.\n\n#\t@$(MAKE) testParser\n",
        "Line" : 1450,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "# Fortran support not available in ROSE unless specified on the configure command line.\n",
        "Line" : 1461,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# This will output the example testcodes that are failing\n",
        "Line" : 1468,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n\n# EXTRA_DIST = $(ALL_TESTCODES)\n",
        "Line" : 1473,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# DQ (3/12/2010): Fortran 2008 tests from OFP\n\n# f08-tests\n",
        "Line" : 1484,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "#\tRemove the links built to get the filename being compiled into the name of the executable.\n",
        "Line" : 1498,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "# SKW's trivial change to force new Hudson run\n",
        "Line" : 1503,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 127
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/RiceCAF_tests/Makefile.am" : {
      "ObjectId" : "7eac64328ad9fa3faafe818c20a3e2aaaee70428",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# These are Fortran testcodes targeting the Rice CAF2 language extensions #\n\n###########################################################################\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# #######################\n\n#      FAILING TESTS\n\n# #######################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# How to call a ROSE translator with a Rice CAF source file.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t$(VALGRIND) ../../testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f77)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f)\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.\n\n#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep\n\n#       to avoid processing the generated code (which would have the same problem).  It is easier to just use\n\n#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed \n\n#       on versions of gfortran 4.2 and 4.3.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\tjava parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f03)\n\n#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n#\t$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\t$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n#\tSince gfortran does not support F03, and thus we skip the compileation using the backend gfortran compiler, we have to force the generation of an object file. \n\n#\tBuild a object file since gfortran fails to do so (avoids remaking the makefile target)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (11/11/2008): Module test copied from developersScratchSpace/Dan/Fortran_tests\n\n# This file declares a module used by module_B_file.f90\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Force representation of module dependency so that mod files are properly generated before use.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Output spew test from John.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Makefile rule to reproduce a current OFP bug that causes OFP to fail silently (not returning a proper exit code).\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# We will build a larger collection of module tests soon (supported by makefile dependence rules).\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (10/4/2010): Test calling OFP directly and ROSE for different filename extensions.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DQ (2/2/2011): We are now enforcing the module names are unique so that we can always run the \n\n# test code in parallel and avoid name conflicts with *.mod (gfortran) and *.rmod (rose) files.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese Fortran programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (2/2/2011): This test presently fails (test codes are being fixed).\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\tDQ (4/6/2010): This fails on Hudson, but I don't know why.\n\n#\t@$(MAKE) testParser\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Fortran support not available in ROSE unless specified on the configure command line.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This will output the example testcodes that are failing\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n\n# EXTRA_DIST = $(ALL_TESTCODES)\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# DQ (3/12/2010): Fortran 2008 tests from OFP\n\n# f08-tests\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/experimental_frontend_tests/Makefile.am" : {
      "ObjectId" : "edb73dd197ad6031cc0b539ec1e8d41d459ff34d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# moved R816.f90 from working to failing (should be looked into) [Rasmussen, 2019-01-24]\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (9/14/2014): This forces the relinking of the testTranslator, which is a work \n\n# around until the OFP and ATerm support is included in ROSE using shared libraries.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\t$(VALGRIND) ../../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t../../../testTranslator -rose:experimental_fortran_frontend -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## make sure output file is not empty\n\n#\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/CMakeLists.txt" : {
      "ObjectId" : "c24b594c35077a4dce4951bb6192587a4bb5448f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/Makefile.am" : {
      "ObjectId" : "1921ec000d91e6556702fd670846f736d13d9db1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/27/2010): These directories are from gfortran tests.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.dg/CMakeLists.txt" : {
      "ObjectId" : "6a883850b12f3a753f69192153287bba58c2b643",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 333,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.\n\n#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep\n\n#       to avoid processing the generated code (which would have the same problem).  It is easier to just use\n\n#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed\n\n#       on versions of gfortran 4.2 and 4.3.\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.dg/Makefile.am" : {
      "ObjectId" : "03dacea8265d7f53ace4cd1ec9e087dd26a7acaf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/27/2010): These directories are from gfortran tests.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow retesting of examples that failed when using gfortran (version 4.2.4) for syntax checking.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# !ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 22,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 47,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Oct 1 2010 passing tests that are now failing.\n\n# However, these PASS in ROSE when using both -rose:skip_syntax_check AND -rose:skipfinalCompileStep.\n\n# It is not clear what options should be used to run these and in\n\n# many cases they will run fine with the syntax checking is turned off.\n",
        "Line" : 1179,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Currently failing tests (12/29/2010):\n\n# implicit_2.f90 \n\n# implicit_derived_type_1.f90\n",
        "Line" : 1186,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Fails in ROSE (using both -rose:skip_syntax_check AND -rose:skipfinalCompileStep):\n\n# enum_1.f90\n\n# iso_fortran_env_1.f90\n\n# iso_fortran_env_2.f90\n\n# reshape_2.f90\n\n# transfer_array_intrinsic_2.f90\n",
        "Line" : 1192,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Oct 1 2010 passing tests that are now failing.\n\n# literal_character_constant_1_x.f\n\n# literal_character_constant_1_y.f\n\n# literal_character_constant_1_z.f\n",
        "Line" : 1286,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (12/5/2010): Failing test as a result of newer bug fixes.\n\n# CER (6/7/2011): This file has been moved to FAILING list so this comment can be removed\n\n# array_constructor_type_19.f03\n",
        "Line" : 1322,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This list is supposed to be empty.\n",
        "Line" : 1326,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (4/3/2010): Added test code used in Fortran OpenMP tests.\n",
        "Line" : 1330,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# #######################\n\n#      FAILING TESTS\n\n# #######################\n",
        "Line" : 1341,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# These tests were supposed to pass in Sept 1 2010, not sure why they fail now.\n",
        "Line" : 1345,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add the tests that were previously passing (high priority to fix).\n",
        "Line" : 1348,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The ROSE options used didn't include using both -rose:skip_syntax_check AND -rose:skipfinalCompileStep.\n\n# If there were used likely most of these would pass.\n",
        "Line" : 1353,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (10/27/2010): Having this list allows us to pass the test in: ./scripts/policies/UnusedSources.pl\n\n# I'm not sure that we need this files in our Fortran test suit however, they are from gfortran's test\n\n# suite so we will leave them in place for now.\n",
        "Line" : 1367,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 1420,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 1433,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 1450,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict $(PERFORMANCE_REPORT_OPTION)\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:output_parser_actions\n\n# ROSE_FLAGS = -rose:verbose 2\n",
        "Line" : 1453,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# These options appear to improve the robustness of the tests... still looking at why...\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:skip_syntax_check\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:skip_syntax_check -rose:skipfinalCompileStep\n",
        "Line" : 1458,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (9/26/2011): Added optional test for dangling pointers to IR nodes in the AST (level 1 causes only an error message if dangling pointers is found).\n",
        "Line" : 1462,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes\n",
        "Line" : 1465,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 1468,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 1472,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# DQ (3/11/2010): F77 tests were not being run, this fixes this.\n\n# PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_TESTCODES:.f=.o}\n",
        "Line" : 1486,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 1509,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# $(TEST_F90_Objects): $(TEST_TRANSLATOR) ${ALL_TESTCODES}\n\n#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90) && touch $@\n\n##\t$(VALGRIND) $(top_builddir)/tests/nonsmoke/functional/testCodeGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n##\t$(VALGRIND) $(top_builddir)/tests/nonsmoke/functional/testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n##\tls -l $@\n",
        "Line" : 1515,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90) && touch $@\n",
        "Line" : 1522,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# $(TEST_F77_Objects): $(TEST_TRANSLATOR) ${ALL_TESTCODES}\n\n##\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n\n##\t$(VALGRIND) $(top_builddir)/tests/nonsmoke/functional/testParser $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n\n#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77) && touch $@ \n\n#\tls -l $@\n",
        "Line" : 1525,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77) && touch $@ \n",
        "Line" : 1532,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# $(TEST_F77_FIXED_FORMAT_Objects): $(TEST_TRANSLATOR) ${ALL_TESTCODES}\n\n#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f) && touch $@\n\n##\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n\n##\t$(VALGRIND) $(top_builddir)/tests/nonsmoke/functional/testParser $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n\n##\tls -l $@\n",
        "Line" : 1535,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f) && touch $@\n",
        "Line" : 1542,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.\n\n#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep\n\n#       to avoid processing the generated code (which would have the same problem).  It is easier to just use\n\n#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed \n\n#       on versions of gfortran 4.2 and 4.3.\n\n# $(TEST_F03_Objects): $(TEST_TRANSLATOR)\n\n#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n##\tSince gfortran does not support F03, and thus we skip the compileation using the backend gfortran compiler, we have to force the generation of an object file. \n\n##\tBuild a object file since gfortran fails to do so (avoids remaking the makefile target)\n\n#\t@echo \"   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation).\"\n\n#\t@touch $@\n",
        "Line" : 1545,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n",
        "Line" : 1558,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\t@echo \"   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation).\"\n\n#\t@touch $@\n",
        "Line" : 1560,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 1566,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese Fortran programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 1575,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 1578,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\tDQ (4/6/2010): This fails on Hudson, but I don't know why.\n\n#\t@$(MAKE) testParser\n",
        "Line" : 1580,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Fortran support not available in ROSE unless specified on the configure command line.\n",
        "Line" : 1591,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# This will output the example testcodes that are failing\n",
        "Line" : 1598,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n\n# EXTRA_DIST = $(ALL_TESTCODES)\n",
        "Line" : 1602,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 49
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.fortran-torture/CMakeLists.txt" : {
      "ObjectId" : "86edf707a0e8f62838ac241fa776e5512a542667",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.fortran-torture/Makefile.am" : {
      "ObjectId" : "7394645d98aa1d0d41eaf2142dd21330ebfe6ee6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/27/2010): These directories are from gfortran tests.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test the previously passing codes using options to ignore gfortran (using both -rose:skip_syntax_check AND -rose:skipfinalCompileStep)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These tests now pass using options to ignore gfortran (using both -rose:skip_syntax_check AND -rose:skipfinalCompileStep)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Oct 1 2010 tests that were supposed to pass (maybe a step backwards in robustness):\n\n# Failed in OFP\n\n#  pr40421.f90 \n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These are the passing tests as of Sept 1st 2010.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is supposed to be an empty list.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DXN (08/08/2011):\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# #######################\n\n#      FAILING TESTS\n\n# #######################\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This is a complete list of the failing tests...\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# These are the only previously passing tests that currently fail.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is an incomplete list (just the failing subset of those that were supposed to pass)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This is marked as a failing test.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict $(PERFORMANCE_REPORT_OPTION)\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:output_parser_actions\n\n# ROSE_FLAGS = -rose:verbose 0\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:skip_syntax_check -rose:skipfinalCompileStep\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DQ (9/26/2011): Added optional test for dangling pointers to IR nodes in the AST (level 1 causes only an error message if dangling pointers is found).\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (3/11/2010): F77 tests were not being run, this fixes this.\n\n# PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_TESTCODES:.f=.o}\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# $(TEST_F90_Objects): ../../../../testTranslator ${ALL_TESTCODES}\n\n#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n\n#\t$(VALGRIND) ../../../../testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# $(TEST_F77_Objects): ../../../../testTranslator ${ALL_TESTCODES}\n\n#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n\n#\t$(VALGRIND) ../../../../testParser $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# $(TEST_F77_FIXED_FORMAT_Objects): ../../../../testTranslator ${ALL_TESTCODES}\n\n#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n\n#\t$(VALGRIND) ../../../../testParser $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.\n\n#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep\n\n#       to avoid processing the generated code (which would have the same problem).  It is easier to just use\n\n#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed \n\n#       on versions of gfortran 4.2 and 4.3.\n\n# $(TEST_F03_Objects): ../../../../testTranslator\n\n#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n\n#\tSince gfortran does not support F03, and thus we skip the compileation using the backend gfortran compiler, we have to force the generation of an object file. \n\n#\tBuild a object file since gfortran fails to do so (avoids remaking the makefile target)\n\n#\t@echo \"   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation).\"\n\n#\t@touch $@\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\t$(VALGRIND) ../../../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\tSince gfortran does not support F03, and thus we skip the compileation using the backend gfortran compiler, we have to force the generation of an object file. \n\n#\tBuild a object file since gfortran fails to do so (avoids remaking the makefile target)\n\n#\t@echo \"   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation).\"\n\n#\t@touch $@\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese Fortran programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\tDQ (4/6/2010): This fails on Hudson, but I don't know why.\n\n#\t@$(MAKE) testParser\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Fortran support not available in ROSE unless specified on the configure command line.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# This will output the example testcodes that are failing\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n\n# EXTRA_DIST = $(ALL_TESTCODES)\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "tests/nonsmoke/functional/CompileTests/Java_tests/CMakeLists.txt" : {
      "ObjectId" : "65bc6b24f438fade2d03365483cc4d13a3ba42ee",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests pass the compilation using ROSE, all AST tests, and unparsing\n\n# to generate Java code, but fails the final compilation step of the generated\n\n# Java code.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is where the Java generics tests are put (currently not required to pass\n\n# all phases).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# almost an exact duplicate of \"compile_test\", but no -c\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tests requiring Java 1.6 that should pass.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tests that pass all but the final compilation using the backend compiler\n\n# (javac)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/nonsmoke/functional/CompileTests/Java_tests/Makefile.am" : {
      "ObjectId" : "41fce91cba1aa2ed67d3ab1e19093760c462b574",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n##################################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These test pass the compilation using ROSE, all AST tests, unparsing to generate \n\n# Java code, and the final compilation of that code using a backend compiler (javac).\n\n# Liao 6/12/2011, temporarily commented out one test since it failed randomly\n\n# See details at https://github.com/rose-compiler/rose/issues/5\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# These test pass the compilation using ROSE, all AST tests, unparsing to generate \n\n# Java code, and the final compilation of that code using a backend compiler (javac).\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These tests pass the compilation using ROSE, all AST tests, and unparsing to generate \n\n# Java code, but fails the final compilation step of the generated Java code.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is where the Java generics tests are put (currently not required to pass all phases).\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Later we will move these tests to the gcjTestSuite subdirectory.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# File option to accumulate performance information about the compilation\n\n# PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/C_ROSE_PERFORMANCE_DATA.csv\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The use of -rose:java is redundent, the source langauge can now be determined from the file suffix.\n\n# ROSE_FLAGS = -rose:java -rose:verbose 0 -rose:skipfinalCompileStep\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:skipfinalCompileStep -rose:skip_syntax_check\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:skipfinalCompileStep\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add tests for where we can compiler and generate code, but the generated code does not yet compiler with the backend compiler (javac).\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Tests for Java generics\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# testTranslator=../../testGraphGeneration\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This is broken, disable that for now in the interest of time.\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add the dependence upon the source file to trigger recompilation each time the makefile is run!\n\n# $(TEST_Objects): ../../testTranslator $(srcdir)/$(@:.o=.java)\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\t$(testGraphGeneration) $(ROSE_FLAGS) $(srcdir)/$(@:.o=.java)\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Tests that pass all but the final compilation using the backend compiler (javac)\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Tests requiring Java 1.6 that should pass.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Tests requiring Java 1.7 that should pass.\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\tJava library path specifies where the *.so file is located (JavaTraversal.so)\n\n#\tThe class path (-cp) the ROSE version of the ECJ Java front-end.\n\n#\tThe we specify the ROSE specific JavaTraversal class file (that we execute)\n\n#\tThen we specify two input java source files.\n\n#\tjava -Djava.library.path=$(top_builddir)/src/frontend/ECJ_ROSE_Connection -cp $(top_srcdir)/src/3rdPartyLibraries/java-parser/ecjROSE.jar:. $(top_srcdir)/src/3rdPartyLibraries/java-parser/JavaTraversal $(srcdir)/HelloWorld.java $(srcdir)/HelloWorld2.java\n\n#\tjava -Djava.library.path=$(top_builddir)/src/frontend/ECJ_ROSE_Connection -cp $(top_srcdir)/src/3rdPartyLibraries/java-parser/ecjROSE.jar:. JavaTraversal $(srcdir)/HelloWorld.java $(srcdir)/HelloWorld2.java\n\n#\tjava -Djava.library.path=$(top_builddir)/src/frontend/ECJ_ROSE_Connection -cp $(top_srcdir)/src/3rdPartyLibraries/java-parser/ecjROSE.jar:. libjava_ecj_parser_c_jni_JavaParserActionJNI $(srcdir)/HelloWorld.java $(srcdir)/HelloWorld2.java\n\n#\tjava -Djava.library.path=$(top_builddir)/src/frontend/ECJ_ROSE_Connection -cp $(top_srcdir)/src/3rdPartyLibraries/java-parser/ecjROSE.jar:. libjava_ecj_parser_c_jni_JavaParserActionJNI \n\n#\tjava -Djava.library.path=$(top_builddir)/src/frontend/ECJ_ROSE_Connection/.libs -cp $(top_srcdir)/src/3rdPartyLibraries/java-parser/ecjROSE.jar:. libjava_ecj_parser_c_jni_JavaParserActionJNI \n\n#\tjava -Djava.library.path=$(top_builddir)/src/frontend/ECJ_ROSE_Connection/.libs -cp $(top_srcdir)/src/3rdPartyLibraries/java-parser/ecjROSE.jar:. JavaTraversal\n\n#\tjava -cp $(top_srcdir)/src/3rdPartyLibraries/java-parser/ecjROSE.jar -Djava.library.path=$(top_builddir)/src/frontend/ECJ_ROSE_Connection/.libs JavaTraversal\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# DQ (8/14/2011): Rule to build whole AST graphs with all of the file info objects.\n\n# This is useful for debugging the source code position information. We have to \n\n# skip the final compilation because the -rose:dotgraph:fileInfoFilter will be passed\n\n# to the backend compiler and cause an error.\n\n# CAVE3 disable that for now in the interest of time\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\t../../testGraphGeneration -rose:dotgraph:fileInfoFilter $(ROSE_FLAGS_SKIP_FINAL_COMPILATION) $(srcdir)/test2011_39.java\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Test for help option to ECJ (some ECJ options not supported via ROSE).\n\n# DQ (7/21/2011): Currently a file must be specified, but this should be fixed later.\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Test with the \"-rose:java\" specification (one way to specify the language in ROSE).\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Test without the \"-rose:java\" specification (ROSE can alternatively obtain the source language from the file suffix).\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Test using the specification of Java 1.7 compatability.\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# TOO1 (2/6/2014): Won't fail in some cases, e.g. GCC's \"unrecognized option\" message\n\n#                  will only fail in version 4.6+.\n\n#                  (See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=15303)\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#-----------------------------\n\n# Java only\n\n#-----------------------------\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#-----------------------------\n\n# Classpath\n\n#-----------------------------\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#-----------------------------\n\n# Sourcepath\n\n#-----------------------------\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#-----------------------------\n\n# Destdir\n\n#-----------------------------\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#-----------------------------\n\n# Source Destdir\n\n#-----------------------------\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#-----------------------------\n\n# Source\n\n#-----------------------------\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-----------------------------\n\n# Target\n\n#-----------------------------\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#-----------------------------\n\n# Encoding\n\n#-----------------------------\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#-----------------------------\n\n# -s\n\n#-----------------------------\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#-----------------------------\n\n# -nowarn\n\n#-----------------------------\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#-----------------------------\n\n# -verbose\n\n#-----------------------------\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#-----------------------------\n\n# @argfile\n\n#-----------------------------\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#-----------------------------\n\n# JVM Options\n\n#-----------------------------\n\n# Increase ECJ's JVM stack size\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#-----------------------------\n\n# Remote JVM Debugging\n\n# TOO1 (2/6/2014): Can't perform this test since it is interactive\n\n#-----------------------------\n\n#\t$(testTranslator) \"$(top_srcdir)/tests/nonsmoke/functional/input_codes/minimal/minimal.java\" -rose:java:ecj:enable_remote_debugging\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Build a rule to allow running all tests in parallel...\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Execute the java file using: java -Djava.library.path=. HelloWorld\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# ********************************************************************************\n\n# ********************************************************************************\n\n# Support for GCJ test codes (will be moved to the gcjTestSuite subdirectory soon.\n\n# Likely it is too early to expect any of these to pass using ROSE's Java support.\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Test the GCJ test code by only doing syntax checking on them using ROSE (calling only the \n\n# backend javac to do the syntax checking). This is more of a test of the Makefile than ROSE.\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# This test evaluates the GCJ test code to make sure that they compile with ECJ (all but 2 pass).\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# ********************************************************************************\n\n# ********************************************************************************\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n\n# Jave support is independent of EDG 4.9 or EDG 4.12 or later (run all tests independent of the C/C++ frontend).\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# conditional-check-local: extraTests\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 643,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 648,
        "CharPositionInLine" : 5
      },
      "53" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 653,
        "CharPositionInLine" : 5
      },
      "55" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n",
        "Line" : 656,
        "CharPositionInLine" : 6
      },
      "57" : {
        "Text" : "#\tRemove any generated JVM log files that could have been generated (these are rare).\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# driscoll6 (8/10/11) convenience target for inspecting unparser output from all test files\n",
        "Line" : 680,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# driscoll6 (8/10/11) convenience target for inspecting unparser output from a particular file\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# DQ (8/17/2011): This is a fix for a interesting problem caused by the VPATH make system.\n\n# The generated java files will be copied from the current build directory instead of the\n\n# source directory.\n\n# Since the generated java files have the same name as in the srcdir, VPATH will\n\n# cause the builddir versions to be copied to the distdir if they exist.  They\n\n# will exist if the \"make check\" has been run, which is the case for the\n\n# java only language tests.\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 61
    },
    "tests/nonsmoke/functional/CompileTests/Java_tests/unit_tests/Makefile.am" : {
      "ObjectId" : "f0cb2437aeb954f40ad2af44167771315b978436",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Global setting for ROSE verbosity\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Initial definition\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use variables set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (2/20/2017): Don't use thiese tests on later versions of CNG 4.9 or later.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (2/20/2017): Don't use thiese tests on later versions of CNG 4.9 or later.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TOO1 (3/7/2014): Requires Java 7u51+; JVM crashes on \"jni_GetStringUTFChars\"\n\n#test_addJavaSource\n\n#test_addJavaTransformation\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\n\n#                                  Unit Tests\n\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------\n\n# test:   addJavaTransformation\n\n# author: Philippe Charles\n\n#---------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---------------------------------------\n\n# test:   addJavaSource\n\n# author: Philippe Charles\n\n#---------------------------------------\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---------------------------------------\n\n# test:   addJavaAssignmentStmt\n\n# author: Philippe Charles\n\n#---------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---------------------------------------\n\n# test:   addJavaExpression\n\n# author: Philippe Charles\n\n#---------------------------------------\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#---------------------------------------\n\n# test:   addJavaVariableDeclaration\n\n# author: Philippe Charles\n\n#---------------------------------------\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (2/20/2017): Disabling unit tests for non-GNU compilers.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/nonsmoke/functional/CompileTests/Makefile.am" : {
      "ObjectId" : "75cd53fb19dd21da3a82856a1303f63cec56a152",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (2/6/2010): Reordered a few of the first directories to have the most relevant test run first by \"make check\"\n\n# This should make the testing of ROSE more meaningful for users.\n\n# SUBDIRS = \\\n#      C_tests Cxx_tests C_subset_of_Cxx_tests C99_tests Fortran_tests UPC_tests \\\n#      copyAST_tests RoseExample_tests PythonExample_tests \\\n#      colorAST_tests mergeAST_tests unparseToString_tests \\\n#      sourcePosition_tests OpenMP_tests \\\n#      boost_tests virtualCFG_tests uninitializedField_tests \\\n#      A++Tests OvertureCode P++Tests A++Code ElsaTestCases \\\n#      ExpressionTemplateExample_tests hiddenTypeAndDeclarationListTests \\\n#      sizeofOperation_tests MicrosoftWindows_tests nameQualificationAndTypeElaboration_tests \\\n#      UnparseHeadersTests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (12/5/2007): Removed A++Code because this takes a long time (about 1 minute).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (4/17/2010): These directories are now organized based on what sets of languages \n\n# are enabled in ROSE (including binary analysis).\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (7/28/2014): Moved this to aver the C and C++ language tests.\n\n# SUBDIRS = x10_tests\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NOT ROSE_USE_CLANG_FRONTEND\n",
        "Line" : 32,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# TOO (2/16/2011): Errors with Tensilica's Xtensa compilers as alternative backend compilers. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/18/2017): We can't use the EDG 4.9 frontend with later versions of compiler because it can't parse a few of the header files from those compilers.\n\n# LLVM header files are actually a copy of the GNU header files (e.g. LLVM 3.5 uses GNU 4.9 headers).\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (1/1/2019): Only EDG 5.0 is has sufficent support for C++17 (I think).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (7/28/2014): Moved to after the C and C++ langauge tests.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (7/25/2010): These should not be at the end, but it is easier to split out Fortran support this way.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (7/14/2013): Temporarily commented out this test to evaluate progress on tests/nonsmoke/functional/CompileTests directory.\n\n#  SUBDIRS += Fortran_tests CAF2_tests\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Pei-Hung (7/13/2015): Adding mixlanguage tests (patches from Stephen Guzik)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Liao 2/130/2017: moved to after Fortran tests. So OpenMP's Fortran tests will be tested after Fortran_tests\n\n# DQ (1/15/2017): Added conditional support to avoid these tests when ROSE is configured for binary only support, failing in ROSE matrix testing).\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (1/15/2017): Clang does not support omp.h include file required for OpenMP testing.\n\n# And we don't have a AUTOMAKE conditional defined for the use of Clang as the backend compiler.\n\n# if !USING_CLANG_COMPILER\n\n# SUBDIRS += OpenMP_tests FailSafe_tests\n\n# endif\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (2/19/2017): Added the more complex logic to control this for different compilers, and versions of EDG.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NOT USING_GNU_COMPILER\n",
        "Line" : 83,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 86,
        "CharPositionInLine" : 5
      },
      "18" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 89,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "# This is an unknown compiler.\n\n# DQ (2/27/2017): If this is really an unknown compile then don't do any testing (until we understand this case).\n\n# SUBDIRS += OpenMP_tests FailSafe_tests\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 96,
        "CharPositionInLine" : 5
      },
      "23" : {
        "Text" : "# NOT USING_GNU_COMPILER\n",
        "Line" : 99,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 102,
        "CharPositionInLine" : 5
      },
      "26" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 106,
        "CharPositionInLine" : 5
      },
      "28" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# DQ (10/19/2010): Moved basic languge test to the front of the list.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# DQ (11/5/2016): These tests fail when testing with Address Sanitizer, but I can't see the output. \n\n# Need to work work with Markus to understand the results better, skip these tests for now is using\n\n# Address Sanitizer.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# TOO (2/16/2011): Errors with Tensilica's Xtensa compilers as alternative backend compilers. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# DQ (11/5/2016): The Fortran tests in this directory fail (issues with JVM and too much parallelisn \n\n# (-j24) which running with address sanitizer).  It is likely that we can skip only the Fortran\n\n# tests in this directory as a better alternative.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# DQ (11/5/2016): Moved this to the end so that we can evaluate other testing results before this one.\n\n# Also skip these tests when using the address sanitizer since they would take SO LONG (at least for \n\n# initial testing, I think).\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ROSE_BUILD_CXX_LANGUAGE_SUPPORT\n",
        "Line" : 158,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# end of !ROSE_USE_CLANG_FRONTEND\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# DQ (1/15/2017): Added conditional support to avoid these tests when ROSE is configured for binary only support, failing in ROSE matrix testing).\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Used to check all C and C++ test codes: not really specific to EDG 4.x\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# DQ (2/15/2014): Adding systemc tests (part of general C++ robustness tests)\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DQ (5/21/2017): Adding VX Works support.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# DQ (8/23/2017): Adding support for testing experimental Charp support.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# DQ (8/23/2017): Adding support for testing experimental Ada support.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# DQ (8/23/2017): Adding support for testing experimental Jovial support.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# DQ (8/23/2017): Adding support for testing experimental Cobol support.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Rasmussen (11/4/2017): Adding support for testing experimental Matlab support.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# DQ (11/14/2017): Removed GNAT test directory since it is redundant with the ADA test directory.\n\n# DQ (6/8/2017): Adding GNAT support.\n\n# SUBDIRS += gnat_tests\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# end of ROSE_USE_CLANG_FRONTEND\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# DQ (31/8/2017): Add test specific to just the newer experimental language support.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#\tcd experimental_csharp_tests; $(MAKE) test\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# TV (08/07/2018): Added `status` target which generate `status.csv`\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_C_tests/CMakeLists.txt" : {
      "ObjectId" : "2b9316072ded6121379594a1973496a36674cf18",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# disabled because it currently fails on Windows\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_C_tests/Makefile.am" : {
      "ObjectId" : "fe469e36637c57cd0170ed35306a30280da83dca",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# TOO (2/10/11): set the correct linker and linker-flags for the alternate\n\n# backend C compiler.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TOO (2/10/11): don't run these tests if they were cross-compiled, otherwise\n\n# they will just fail.\n\n# check-TESTS:\n\n# \t@echo \"Skipping execution of cross-compiled tests: $(TESTS)\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################################################################\n\n# These are C testcodes being used for testing Microsoft Language Support.\n\n##################################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# File option to accumulate performance information about the compilation\n\n# PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/C_ROSE_PERFORMANCE_DATA.csv\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TOO1 (2013-09-17): Required by test2005_168.o to find \"rosedll.h\",\n\n#                    introduced by CMake work.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n############\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_Cxx_tests/CMakeLists.txt" : {
      "ObjectId" : "e6ff061d2d668e53a1ba2c5c6079efe1abffd2af",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Expected failures: test2012_51.C test2013_31.C \n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# these tests fail on either Windows or Linux\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_Cxx_tests/Makefile.am" : {
      "ObjectId" : "dfa9e86639dbf0ca8ddebf882a66b3283446e342",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/10/2013): Add the Boost path so that the case where Boost is not installed in /usr/include is covered.\n\n# Some of these test codes reference A++ header files as part of their tests\n\n# Include the path to A++ and the transformation specification\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#########\n\n# Targets lists\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########\n\n# Translator to be used: calling \"make TEST_TRANSLATOR=../../testBackend\" uses the backend compiler only\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########\n\n# ROSE_FLAGS\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########\n\n# RTH test targets\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n############\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (6/18/2008): All of these should be present...\n\n# confdefs.h     test2001_11.h   test2001_18B.h  test2003_12.h  test2003_25.h   test2005_154.h  test2005_159.h  test2005_26.h  test2005_88.h    test2006_187b.h  test2006_42.h   test2007_113.h  test2007_137.h   test2007_167.h  test2007_42.h  test2007_97.h\n\n# foo.h          test2001_15.h   test2003_08.h   test2003_14.h  test2004_40.h   test2005_157.h  test2005_15.h   test2005_75.h  test2006_136.h   test2006_33.h    test2007_08.h   test2007_114.h  test2007_160a.h  test2007_40.h   test2007_47.h\n\n# test2001_05.h  test2001_18A.h  test2003_09.h   test2003_24.h  test2005_133.h  test2005_158.h  test2005_160.h  test2005_81.h  test2006_187a.h  test2006_36.h    test2007_101.h  test2007_136.h  test2007_160.h   test2007_41.h   test2007_48.h\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n\n# DQ (12/11/2009): At the moment it is an failing test because \"thisIsAnError\" will be \n\n# interpreted to be a file.\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This was always worked but is the alternative to the normalization of source file names to absolute paths\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t@$(RTH_RUN) CMD=\"$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.C.passed=.C)\" $(top_srcdir)/scripts/test_exit_status $@\n\n#\t$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -c $(srcdir)/cl_preprocessed_hello2.cxx\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (10/23/2010): Added MPI tests that I can at least run locally to debug when Hudson MPI tests fail.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (7/24/2011): These test fail the AST IO but pass the compilation tests.  Debug these for AST File I/O separately.\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Added performance test for ROSE evaluation:\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (11/19/2012): HPCToolKit use.  This makes some significant assumptions on how we have setup HPCToolKit.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\thpcprof hpctoolkit-lt-testTranslator-measurements/lt-testTranslator-000000-000-0f802c45-7612-0.hpcrun\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\thpcviewer /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-4.2.4-dq-edg4x-rc-debug_mode_off/tests/nonsmoke/functional/CompileTests/Cxx_tests/hpctoolkit-lt-testTranslator-database-11205 &\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#------------------------------------------------------------------------------\n\n#                           Performance Timing Tests\n\n#------------------------------------------------------------------------------\n\n## Purpose\n\n#\n\n#  Enforce a time limit constraint on testcode compilation.\n\n#\n\n### Make Targets\n\n#\n\n#  Note: A testcode's object files are removed before running the individual\n\n#  steps in these make targets.\n\n#\n\n#### Default\n\n#\n\n#  $ make <testcode>.timed\n\n#\n\n#    Compiles <testcode> with a $TIMEOUT limit\n\n#\n\n#    E.g.  $ make test2005_35.timed\n\n#\n\n#  $ make check-performance-timing\n\n#\n\n#    Compiles all testcodes with a $TIMEOUT limit\n\n#\n\n#### Threshold\n\n#\n\n#  $ make <testcode>.timed_with_threshold\n\n#\n\n#    Compiles <testcode> with g++ and then uses the g++ compile time\n\n#    as a $TIMEOUT threshold to compile <testcode> with ROSE.\n\n#\n\n#    E.g.  $ make test2005_35.timed_with_threshold\n\n#\n\n#  $ make check-performance-timing-with-threshold\n\n#\n\n#    Compiles all testcodes with a $TIMEOUT limit calculated from\n\n#    the g++ compile time threshold.\n\n#\n\n### Environment Variables\n\n#\n\n#  TIMEOUT              Maximum time limit for the compilation of a <testcode>\n\n#  TIMEOUT_TOLERANCE    $gnu_time * $TIMEOUT_TOLERANCE (threshold tests only)\n\n#------------------------------------------------------------------------------\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DQ (6/30/2013): Increased this to support compiling Boost example tests. We \n\n# need to rethink how we want to handl this. I suggest restricting this to a \n\n# few tests instead of each test. Compiling with optimization also makes about\n\n# a factor of four difference for test2013_241.C (boost example test code).\n\n# Since Jenkins testing is currently done without optimization we need the \n\n# larger timeout value just to handle the newer boost test codes.\n\n# TIMEOUT            ?= 60  # Default timeout value\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Default timeout value\n",
        "Line" : 423,
        "CharPositionInLine" : 27
      },
      "24" : {
        "Text" : "# Default timeout tolerance value for threshold\n\n# tests = $gnu_time * $TIMEOUT_TOLERANCE\n",
        "Line" : 424,
        "CharPositionInLine" : 26
      },
      "25" : {
        "Text" : "# 1. Time and Compile testcode with g++\n\n# 2. Compile with ROSE, using TIMEOUT relative to time results from g++\n\n#\n\n# Uses $(TESTCODES_REQUIRED_TO_PASS)\n\n#\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_Java_tests/CMakeLists.txt" : {
      "ObjectId" : "99069803a2f23010781b366ae9f2020c8993c6e0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make sure javac output dir exists\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# similar to \"compile_test\", but no -c\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# these tests should fail if javac just prints out its usage info.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Tests that pass all but the final compilation using the backend compiler\n\n# (javac)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_Java_tests/Makefile.am" : {
      "ObjectId" : "430d009aa5cadb8c7d0a381fc42b9fafa658eb47",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n##################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These test pass the compilation using ROSE, all AST tests, unparsing to generate \n\n# Java code, and the final compilation of that code using a backend compiler (javac).\n\n# Liao 6/12/2011, temporarily commented out one test since it failed randomly\n\n# See details at https://github.com/rose-compiler/rose/issues/5\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# These test pass the compilation using ROSE, all AST tests, unparsing to generate \n\n# Java code, and the final compilation of that code using a backend compiler (javac).\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# File option to accumulate performance information about the compilation\n\n# PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/C_ROSE_PERFORMANCE_DATA.csv\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The use of -rose:java is redundent, the source langauge can now be determined from the file suffix.\n\n# ROSE_FLAGS = -rose:java -rose:verbose 0 -rose:skipfinalCompileStep\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:skipfinalCompileStep -rose:skip_syntax_check\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:skipfinalCompileStep\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# testTranslator=../../testGraphGeneration\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is broken, disable that for now in the interest of time.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add the dependence upon the source file to trigger recompilation each time the makefile is run!\n\n# $(TEST_Objects): ../../testTranslator $(srcdir)/$(@:.o=.java)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t@echo \"Test using Java 1.4 version support.\"\n\n#\t$(testTranslator) -rose:java:source 1.4 -rose:java:target 1.4 $(ROSE_FLAGS) $(srcdir)/$(@:.o=.java)\n\n#\t@echo \"Test DOT file graph generation (default) version support.\"\n\n#\t$(testGraphGeneration) $(ROSE_FLAGS) $(srcdir)/$(@:.o=.java)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Execute the java file using: java -Djava.library.path=. HelloWorld\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ********************************************************************************\n\n# ********************************************************************************\n\n# Support for GCJ test codes (will be moved to the gcjTestSuite subdirectory soon.\n\n# Likely it is too early to expect any of these to pass using ROSE's Java support.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Test the GCJ test code by only doing syntax checking on them using ROSE (calling only the \n\n# backend javac to do the syntax checking). This is more of a test of the Makefile than ROSE.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This test evaluates the GCJ test code to make sure that they compile with ECJ (all but 2 pass).\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ********************************************************************************\n\n# ********************************************************************************\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\tRemove any generated JVM log files that could have been generated (these are rare).\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# driscoll6 (8/10/11) convenience target for inspecting unparser output from all test files\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# driscoll6 (8/10/11) convenience target for inspecting unparser output from a particular file\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# DQ (8/17/2011): This is a fix for a interesting problem caused by the VPATH make system.\n\n# The generated java files will be copied from the current build directory instead of the\n\n# source directory.\n\n# Since the generated java files have the same name as in the srcdir, VPATH will\n\n# cause the builddir versions to be copied to the distdir if they exist.  They\n\n# will exist if the \"make check\" has been run, which is the case for the\n\n# java only language tests.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_tests/CMakeLists.txt" : {
      "ObjectId" : "d2a9b3d578fe06c82c5ec4d0b8c7d50ec89a10d0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that when we compile 32 bit code on a 64 bit machine the generated code should\n\n# not be compiled as 64 bit code so we used the option: -rose:skipfinalCompileStep\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/CompileTests/MicrosoftWindows_tests/Makefile.am" : {
      "ObjectId" : "0568087505b80134c3b121c678e15681537cc454",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Should this be here!\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################################\n\n# These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n##################################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (4/23/2017): Adding some extra tests.\n\n# TESTCODES_REQUIRED_TO_PASS +=\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Need to handle C source codes separately from C++ source codes\n\n#    simple_windows_prog.c\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note that when we compile 32 bit code on a 64 bit machine the generated code should \n\n# not be compiled as 64 bit code so we used the option: -rose:skipfinalCompileStep\n\n# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict $(PERFORMANCE_REPORT_OPTION)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# $(TEST_Objects): $(TEST_TRANSLATOR) $(srcdir)/$(@:.o=.C)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Flymake Support in ROSE\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# EXTRA_DIST = CMakeLists.txt README $(ALL_TESTCODES)\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/CompileTests/NewEDGInterface_C_tests/CMakeLists.txt" : {
      "ObjectId" : "e38ba71e70c0801cd53b8ac6a0199b56b40c4c95",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tests the ability to read and regnerate the input application and compile it using the backend compiler.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/OpenClTests/CMakeLists.txt" : {
      "ObjectId" : "b3e5ca6f16dbe33691cb8b4d118b701d4c430f01",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/OpenClTests/Makefile.am" : {
      "ObjectId" : "f9fe2e7e4eb061ef001479705496ff6aa7035029",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/OpenMP_tests/CMakeLists.txt" : {
      "ObjectId" : "c2c5ec66a8ed07d71c56de2b6101f1d60f3ba52d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Liao 11/18/2009\n\n# Test for a bug which happens when more than two source files show in the command line\n\n# the translator should now be able to avoid duplicated processing of pragma statements\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/CompileTests/OpenMP_tests/Makefile.am" : {
      "ObjectId" : "3071267b19a8ea2b0a220de5d3fd646d1e5a55a1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# put macroCalls.c here since it requires -rose:wave, which causes seg fault on 64-bit machine\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# removed experimental test cases\t\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (2/19/2017): This logic has not yet been updated to reflect the new logic for GNU, Clang, Intel compilers.\n\n# It might be that it need not be updated since it is sufficently portable as it is (if not then it will be updated).\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#C_OMP_ACC_TEST_RESULTS = $(C_OMP_ACC_TESTCODES_REQUIRED_TO_PASS:.c=.o)\n\n# we only care about unparsing for ACC input, not the object file generation\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-rose:wave\n",
        "Line" : 234,
        "CharPositionInLine" : 87
      },
      "5" : {
        "Text" : "# used to find omp.h, added it as one of  rose headers\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rose_input.c/cpp \n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (11/30/2018): We have a combination of folded and non-folded values for macros in OpenMP pragmas \n\n# (Liao is looking into this) and we decided to comment this out in my testing while he does this.\n\n# PASSING_C_CXX_ACC_TEST_RESULTS=$(PASSING_C_CXX_TEST_RESULTS) $(C_OMP_ACC_TEST_Unparsed) rose_bonds-2.c rose_macroIds.c\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Liao 11/18/2009\n\n# Test for a bug which happens when more than two source files show in the command line\n\n# the translator should now be able to avoid duplicated processing of pragma statements\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# we now experiment with multi gpu and MPI support, test parse_only without OpenMP-specific AST creation for now. Liao10/28/2015\n\n# test parsing experimental OpenMP accelerator directives, Liao 1/16/2013\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t./parseOmp -rose:openmp:parse_only -rose:skipfinalCompileStep --edg:no_warnings -w -rose:verbose 0 --edg:restrict -c $(srcdir)/$(@:rose_%=%)\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\t@$(MAKE) $(PASSING_C_TEST_RESULTS) \n\n#\t@$(MAKE) $(PASSING_CXX_TEST_RESULTS)\n\n#\t@$(MAKE) bonds-2.o macroIds.o $(C_OMP_ACC_TEST_Unparsed)\n\n##\t@$(MAKE) $(PASSING_TEST_RESULTS)\n\n# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 310,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 314,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 321,
        "CharPositionInLine" : 5
      },
      "18" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 327,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 330,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 341,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (2/28/2017): Skip these files with Clang for now and come back to them later (when we understand the limits of portability better).\n\n#\t@$(MAKE) $(PASSING_TEST_RESULTS)\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 351,
        "CharPositionInLine" : 5
      },
      "27" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 358,
        "CharPositionInLine" : 5
      },
      "29" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 361,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 31
    },
    "tests/nonsmoke/functional/CompileTests/OpenMP_tests/cvalidation/CMakeLists.txt" : {
      "ObjectId" : "c5610f78e0ce149b0e5e7274fb3af7cd902d9411",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##########################################################################\n\n# These are OpenMP C testcodes targeting aspects of OpenMP specific to C #\n\n##########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/OpenMP_tests/cvalidation/Makefile.am" : {
      "ObjectId" : "8e38d1ad31ac711ceea0788b565751c3ab293772",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##########################################################################\n\n# These are OpenMP C testcodes targeting aspects of OpenMP specific to C #\n\n##########################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (2/21/2017): Failing test codes when ROSE is compiled using Intel v16 compiler (of for backend compiler using Intel v16).\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/CompileTests/OpenMP_tests/fortran/CMakeLists.txt" : {
      "ObjectId" : "48d2e43daf7208f7929883d59d409f3aa27ee6dc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# I don't think this directory can ever be reached.\n\n# We only descend into OpenMP if we're not building with Java support.\n\n# We only descend into this directory if we are building with Fortran support.\n\n# But Fortran support also requires Java support...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/OpenMP_tests/fortran/Makefile.am" : {
      "ObjectId" : "12cd8fb126a20ce3d57c5576ed4aeb69643dcfcf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/4/2010): Added simple test code to debug fortran OFP usage.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if !OS_VENDOR_DEBIAN\n\n## This fails for Debian 5.0 systems (at least 32-bit, all compilers (4.3 tested), I think)\n\n#if !ROSE_USING_GFORTRAN_VERSION_4_0\n\n## These are tests that fail using the gfrotran version 4.0 compiler (but pass with all other versions of gfortran).\n\n#     F90_TESTCODES_TO_PASS += exampleA134f.f90\n\n#endif\n\n#endif\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# case insensitive in symobl lookup for Fortran\n\n# exampleA281f.f: case insensitive for included header file's name, also bug 354\n\n# flush2.f : wrong position for flush (scope becomes function, not inner block)\n\n# conditional.f:  conditional compilation\n\n# exampleA41f.f90:  test code has error?\n\n# barrier.f, exmpaleA221f.f  wrong comment position for the 2nd barrier\n\n# exampleA11f.f  combined parallel do is attached to wrong place, and is not removed!\n\n# ompdo-decremental-2.f  wrong location for !$omp parallel do \n\n# task_largenumber2.f : bug 495 https://outreach.scidac.gov/tracker/?func=detail&atid=185&aid=495&group_id=24\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (11/4/2016): Uncomment to use Address Sanitizer.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ROSE_FLAGS = -rose:openmp\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# follow the astOutlining test to guide fortran tests  \n\n# Liao, 5/27/2009\n\n# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/CompileTests/OvertureCode/CMakeLists.txt" : {
      "ObjectId" : "36ef12ee1463337b44d9af6ba65b3d3768de4290",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/OvertureCode/Makefile.am" : {
      "ObjectId" : "432b5cbdf3d424ab3770633dcfd790b9db5a9d6f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Uncomment this line to compile Overture source file: xFDerivative.C\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## TESTCODES = overtureBug_01.C xFDerivative.C\n\n## TESTCODES = overtureBug_01.C xFDerivative.C defect.C\n\n## TESTCODES = \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n# ROSE_FLAGS = -rose:test 6\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## We don't have to add the A++ header files to the include path since we have placed\n\n## them directly into the test code directory (testing only the compilation with ROSE\n\n## and not the execution!)\n\n## Include the path to A++ and the transformation specification\n\n## AM_CPPFLAGS = @Axx_INCLUDES@\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# libTestSource_a_SOURCES = $(TESTCODES)\n\n# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/CompileTests/P++Tests/CMakeLists.txt" : {
      "ObjectId" : "fcdbb372e3d5fbb6f8efe993ab64e49e1dee9a14",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TESTCODES is an empty list in Makefile.am, so this directory doesn't\n\n# do anything.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/P++Tests/Makefile.am" : {
      "ObjectId" : "97b821d0b2da61f96a0270eb328c7f88e9deaaf5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/3/2006): This is a very old directory of test codes (no longer tested)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#TESTCODES = \\\n#     test2001_01.C\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Files which don't compile (but used to do so) (this has been isolated as test2001_23.C)\n\n# f_op_all.C i_op_all.C d_op_all.C\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE_FLAGS = -rose:outputGrammarTreeFiles\n\n# ROSE_FLAGS = \\\n#  -rose:outputGrammarTreeFiles -rose:outputGrammarTreeFilesForHeaderFiles \\\n#  -sage:enable_cp_backend\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Restrict to level 6 testing for the moment\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# -rose:test 3\n\n# -sage:disable_sage_backend\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CXX = ../../../src/rose $(ROSE_FLAGS)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## We don't have to add the A++ header files to the include path since we have placed\n\n## them directly into the test code directory (testing only the compilation with ROSE\n\n## and not the execution!)\n\n## Include the path to A++ and the transformation specification\n\n## AM_CPPFLAGS = @Axx_INCLUDES@\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# libTestSource_a_SOURCES = $(TESTCODES)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Name the library we will build\n\n# noinst_LIBRARIES = libTestSource.a\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Run each test with this script (required to get the\n\n## LD_LIBRARY_PATH correct when using shared libraries).\n\n## TESTS_ENVIRONMENT = REDIRECT_OUTPUT_TO='$$program.$$nproc.stdout' REDIRECT_ERRORS_TO='$$program.$$nproc.error' sh ../generalized-serial-run\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These tests may or may not have assumed the use\n\n## of some environment variables (we have to see)\n\n## TESTS = $(TESTCODES)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A++.h array_domain.h data_hash.h dimension_macros.h lazy_expression.h lazy_taskset.h \\\n# mdi_typedef.h A++_headers.h comm_man.h descriptor.h domain.h inline_func.h lazy_operand.h \\\n# lazyarray.h optimization.h config.h descriptor_notemplates.h \\\n# inline_support.h lazy_statement.h machine.h partitioning.h constants.h \\\n# descriptor_templates.h index.h lazy_aggregate.h lazy_task.h max_array_dim.h where.h \\\n# expression_templates.h inline_expression_templates.h $(TESTCODES)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# removed these from list for P++\n\n# A++_notemplates.h\n\n# A++_templates.h \n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DISTCLEANFILES = $(TESTCODES)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tests/nonsmoke/functional/CompileTests/PythonExample_tests/CMakeLists.txt" : {
      "ObjectId" : "afebe25926980fe078a21be9f72ab034a1807ce0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###################################################\n\n# These are Python testcodes (C++ using Python.h) #\n\n###################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/PythonExample_tests/Makefile.am" : {
      "ObjectId" : "de8cd5410420c72b53137286b3951cd67e23597a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###################################################\n\n# These are Python testcodes (C++ using Python.h) #\n\n###################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (5/26/2013): List these files to avoid the \"unused sources policy\" error.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the dependence upon the source file to trigger recompilation each time the makefile is run!\n\n# $(TEST_Objects): ../../testTranslator $(srcdir)/$(@:.o=.C)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/CompileTests/Python_tests/CMakeLists.txt" : {
      "ObjectId" : "249127c90f447ea70909051c540bf57ab64dfee2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/Python_tests/Makefile.am" : {
      "ObjectId" : "9a282526d4b748d1cb15e787066abbf4e6b8837b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/RoseExample_tests/CMakeLists.txt" : {
      "ObjectId" : "15e5cce6f652ff807aaaf18e2693cac1c471abab",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/RoseExample_tests/Makefile.am" : {
      "ObjectId" : "4ae7487defb2b443ac189324c7353e52b4e06c29",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "####################################################################################\n\n# These are ROSE translators and test the compilation ROSE applications using ROSE #\n\n####################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Files that represent header files from ROSE that we can now compilie with ROSE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (3/11/2017): These can now work with at least the GNU 5.1 and older compilers.\n\n# DQ (1/19/2017): These are a problem for GNU 5.1 (but maybe just because __atomic_is_lock_free() is not correctly handled).\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/10/2013): Make all of the tests codes\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# $(TEST_Objects): $(TEST_TRANSLATOR) $(srcdir)/$(@:.o=.C)\n\n#\t../../testTranslator $(ROSE_FLAGS) -I$(top_builddir) $(ROSE_INCLUDES) -c $(srcdir)/$(@:.o=.C)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# RPM (2014-04-07) Increased timeout from 15 minutes to 45 minutes because this was failing when lots of debugging is enabled.\n\n#                  Yes, it really does take nearly 45 minutes (38 actually) to run when when ROSE is compiled with\n\n#                  \"-D_GLIBCXX_DEBUG -O0\" with g++ 4.4.5 on x86_64-linux-gnu, Debian Squeeze, 12 cores at 3.33GHz, 48GB memory.\n\n# RPM (2016-02-29) Added MEMORY=20GB so that the test is skipped (passes) on machines that don't have this much memory.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (9/13/2005): Test the compilation of ROSE using ROSE!\n\n# This is just a test of compiling the Sage III IR (the largest file; most but not all of Sage III)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ****************************************************************************************************\n\n#     Test codes or selected ROSE code that can compile using ROSE or is the subject of current work \n\n# ****************************************************************************************************\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This tests the long ROSE command line of ROSE compiling ROSE (the file is empty).\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This tests compiling: sage3basic.h (note that the command line generated for the backend compile step is currupted.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This tests compiling: sage3basic.h and sage3.h\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This tests compiling: rose.h\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This tests compiling: rose.h\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Same compilation but with optimization (which only effects the g++ compilation performance)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Same compilation but with optimization (which only effects the g++ compilation performance)\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# This tests compiling: Cxx_Grammar.C: fails \"ROSE_ASSERT (kind == iek_statement);\" in edgRose.C:20798\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\t../../testGraphGeneration -rose:verbose 2 -isystem /nfs/casc/overture/ROSE/opt/rhel5/x86_64/boost/1_45_0/gcc/4.4.5/include -c $(srcdir)/testRoseHeaders_08.C\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# MAKE SURE YOU HAVE SET HPCTOOLKIT_HOME=/path/to/hpctoolkit\n\n#Some useful events we want to gather\n\n#These events may not work on all platforms. We picked it on a machine where it worked.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Exclude the Cxx_Grammar.C file from being part of the distribution\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@$(MAKE) $(PASSING_TEST_Sources)\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (2/27/2017): Don't test GNU 5.1 and greater using EDG 4.9 (requires EDG 4.12 and later).\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 270,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n\n#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_8 == false\"\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 274,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == false\"\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n\n#\t@echo \"USING_CLANG_COMPILER == true\"\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 281,
        "CharPositionInLine" : 5
      },
      "33" : {
        "Text" : "#\t@echo \"USING_CLANG_COMPILER == false\"\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == true\"\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 287,
        "CharPositionInLine" : 5
      },
      "36" : {
        "Text" : "# This is an unknown compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == false\"\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 290,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n\n#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == false\"\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Sources)\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 307,
        "CharPositionInLine" : 5
      },
      "42" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 314,
        "CharPositionInLine" : 5
      },
      "44" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 317,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 46
    },
    "tests/nonsmoke/functional/CompileTests/STL_tests/Makefile.am" : {
      "ObjectId" : "cc26c55e4c510e63a63b2d39905ef286c67b3fa5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ASAN options are passed as arguments to allow to log them into a logfile\n\n#\t$(VALGRIND) ASAN_OPTIONS=\"$(VALGRIND)\" TOOL2=$(TEST_TRANSLATOR) TOOL1=$(CXX) $(top_srcdir)/tests/nonsmoke/functional/CompileTests/STL_tests/stl-eval.sh\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (2/10/2017): Run tests using GNU 4.9 using only EDG 4.9 but disable C++11 specific testing.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 33,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# DQ (2/10/2017): Run tests using GNU 5.1 and later using only EDG 4.12\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (2/22/2017): Break this up to first test the non C++11 support using the latest compilers and EDG 4.12.\n\n#\t$(VALGRIND) ASAN_OPTIONS=\"$(VALGRIND)\" TOOL2=$(TEST_TRANSLATOR) TOOL1=$(CXX) CPP11_STL_TESTS=yes $(top_srcdir)/tests/nonsmoke/functional/CompileTests/STL_tests/stl-eval.sh\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE_USE_EDG_VERSION_4_9\n\n# NOT ROSE_USING_GCC_VERSION_LATER_5_1\n",
        "Line" : 40,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# DQ (2/10/2017): Run tests using GNU 4.9 using only EDG 4.9 but disable C++11 specific testing.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 48,
        "CharPositionInLine" : 5
      },
      "9" : {
        "Text" : "# DQ (2/10/2017): Run tests using GNU 5.1 and later using only EDG 4.12\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (3/4/2017): We can turn on the C++11 testings now.\n\n# DQ (2/22/2017): Break this up to first test the non C++11 support using the latest compilers and EDG 4.12.\n\n#\t$(VALGRIND) ASAN_OPTIONS=\"$(VALGRIND)\" TOOL2=$(TEST_TRANSLATOR) TOOL1=$(CXX) CPP11_STL_TESTS=yes $(top_srcdir)/tests/nonsmoke/functional/CompileTests/STL_tests/stl-eval.sh\n\n#\t$(VALGRIND) ASAN_OPTIONS=\"$(VALGRIND)\" TOOL2=$(TEST_TRANSLATOR) TOOL1=$(CXX) CPP11_STL_TESTS=no $(top_srcdir)/tests/nonsmoke/functional/CompileTests/STL_tests/stl-eval.sh\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ROSE_USE_EDG_VERSION_4_9\n\n# ROSE_USING_GCC_VERSION_LATER_5_1\n\n# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 57,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# DQ (2/10/2017): Run tests using GNU 4.8 and either EDG 4.9 or EDG 4.12\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# DQ (2/10/2017): Run tests using GNU 4.9 using only EDG 4.9 but disable C++11 specific testing.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 74,
        "CharPositionInLine" : 5
      },
      "17" : {
        "Text" : "# DQ (2/10/2017): Run tests using GNU 5.1 and later using only EDG 4.12\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (2/22/2017): Break this up to first test the non C++11 support using the latest compilers and EDG 4.12.\n\n#\t$(VALGRIND) ASAN_OPTIONS=\"$(VALGRIND)\" TOOL2=$(TEST_TRANSLATOR) TOOL1=$(CXX) CPP11_STL_TESTS=yes $(top_srcdir)/tests/nonsmoke/functional/CompileTests/STL_tests/stl-eval.sh\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# NOT USING_GNU_COMPILER\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# DQ (3/12/2017): Activate for testingonly.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\t$(VALGRIND) ASAN_OPTIONS=\"$(VALGRIND)\" TOOL2=$(TEST_TRANSLATOR) TOOL1=$(CXX) CPP11_STL_TESTS=no $(top_srcdir)/tests/nonsmoke/functional/CompileTests/STL_tests/stl-eval.sh\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 89,
        "CharPositionInLine" : 5
      },
      "23" : {
        "Text" : "# DQ (3/12/2017): Activate for testingonly.\n\n# Not clear if this has been tested previusly.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t$(VALGRIND) ASAN_OPTIONS=\"$(VALGRIND)\" TOOL2=$(TEST_TRANSLATOR) TOOL1=$(CXX) CPP11_STL_TESTS=no $(top_srcdir)/tests/nonsmoke/functional/CompileTests/STL_tests/stl-eval.sh\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 95,
        "CharPositionInLine" : 5
      },
      "26" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n\n# USING_GNU_COMPILER\n",
        "Line" : 98,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# DQ (1/19/2017): These are a problem for GNU 5.1.\n\n# Markus and Dan discussed that these tests could not be enforce uniformally on newer compiler versions.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# check-local: conditional-check-local\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "tests/nonsmoke/functional/CompileTests/UPC_tests/CMakeLists.txt" : {
      "ObjectId" : "bd4c0717f787e6861f1a84c431522ee9115c2ac2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Liao (6/11/2008) --edg:upc and --edg:restrict are not required since ROSE can add them internally based on the file suffix (.upc) , no backend compilation since GCC does not recognize UPC .\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These tests are currently failing for me with the following output:\n\n# Command-line error: invalid option: --upc++\n\n# The tests also seem to be commented out of the Makefile, so I am\n\n# commenting them out here as well.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(cxx_files_to_test\n\n#  test2004_22.upc test2011_01.upc test2011_03.upc test2011_04.upc\n\n#  test2011_05.upc test2011_06.upc test2011_07.upc)\n\n#\n\n#set(ROSE_FLAGS -rose:UPCxx ${baseline_flags})\n\n#\n\n#foreach(file_to_test ${cxx_files_to_test})\n\n#  get_filename_component(test_name ${file_to_test} NAME_WE)\n\n#  add_test(\n\n#    NAME ${test_name}cxx\n\n#    COMMAND ${translator}\n\n#      ${ROSE_FLAGS} -c ${CMAKE_CURRENT_SOURCE_DIR}/${file_to_test})\n\n#endforeach()\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompileTests/UPC_tests/Makefile.am" : {
      "ObjectId" : "43e8d56fcc1477668f327550072d64cf725fffff",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#####################################################################################\n\n# These are UPC testcodes targeting aspects of UPCC that might not be a subset of C #\n\n#####################################################################################\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# affinity &arr[i] is parsed to arr+i, may hurt the later translation\n\n# sharedArrayInit.upc: Berkeley UPC compiler 1.6 does not support shared arrays with initializer\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (7/15/2014): This requires a fix that is not on this branch (it is on another branch not yet merged).\n\n#   type_field_shared_struct.upc\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# upc_XXXsizeof() has two issues:\n\n# 1. They are evaluated by EDG, operators are not preserved in EDG's IL\n\n# 2. EDG 3.3 get wrong evaluation values,  EDG 3.10 fixes the bug though.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  test2011_08.upc\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Liao (6/11/2008) --edg:upc and --edg:restrict are not required since ROSE can add them internally based on the file suffix (.upc) , no backend compilation since GCC does not recognize UPC .\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# $(TEST_Output): ../../testTranslator $(srcdir)/$(@:rose_%=%)\n\n# ../../testTranslator -rose:UPC $(ROSE_FLAGS) -c $(srcdir)/$(@:rose_%=%)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (2/3/2011): Note that all but test2004_22.upc can also be compiled as UPC instead of UPC++ testcodes.\n\n# DQ (9/19/2010): Separated this UPC++ test out from the UPC tests. This test code simply uses some C++ specific\n\n# constructs and does not represent any special work to build UPC++ work. Basically just UPC that allows C++ code.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# $(UPCXX_TEST_Objects): ../../testTranslator $(srcdir)/$(@:.o=.c)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (2/4/2011): Added test for UPC keyword \"THREADS\". It is only present when \"-rose:upc_threads\" option is not used.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (2/4/2011): Added test for UPC keyword \"MYTHREAD\".\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (4/30/2014): List of test codes to test the shared memory DSL work.\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (2/21/2017): This test fails for ROSE when used with the Intel compiler.\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (7/15/2014): This requires a fix that is not on this branch (it is on another branch not yet merged).\n\n# testSharedMemoryDSL_35\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (9/17/2010): Added more test code, but not yet used in internal tests.\n\n# DQ (9/15/2010): Moved UPC standard header files to be included automatically (moved to the ROSE compiler include directory).\n\n# put the headers here for now. TODO: Move them to a better place\n\n# EXTRA_DIST = $(ALL_TESTCODES) upc.h upc_relaxed.h upc_strict.h upc_collective.h\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\t@echo \"Tests for UPC++ examples.\"\n\n#\t@$(MAKE) $(UPCXX_TEST_Objects)\n\n#\tDQ (2/5/2011): This failed for a very few Hudson tests, but they are not critical\n\n#\ttests so I will eliminate them for now. I don't know why they failed.\n\n#\t@$(MAKE) testForUpcThreadsKeywordInGeneratedCode\n\n#\t@$(MAKE) testForUpcMythreadKeywordInGeneratedCode\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "tests/nonsmoke/functional/CompileTests/UnparseHeadersTests/CMakeLists.txt" : {
      "ObjectId" : "3bd870390f0ad76510cfcacc16e697f71183e2c0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note that although all tests are run with the same -I paths, it is fine as\n\n# long as we ensure that the file names inside the -I paths are unique for each\n\n# test.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/UnparseHeadersTests/Makefile.am" : {
      "ObjectId" : "171ac24b0d76b8a2c16544014cf6ec46b3ac60d9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Test specimens are actually directories, each of which contains a ROSE Test Harness \"config\" file.\n\n# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (11/2/2018): Test with -rose:unparse_tokens\n\n# ROSE_SWITCHES = --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles\n\n# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles \n\n# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles -rose:unparse_tokens\n\n# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles -rose:unparse_tokens -c\n\n# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 0 -rose:unparseHeaderFiles -c\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test targets are the makefile targets upon which \"make check\" depends (via check-local). The directory in which the\n\n# tests run needs to be recreated each time we run the test, or else the test will likely pick up the wrong header files: the\n\n# ones generated by the previous run.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompileTests/UnparseHeadersUsingTokenStream_tests/CMakeLists.txt" : {
      "ObjectId" : "a84395f67be33947fb0733ec69de9d631a48bfb2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note that although all tests are run with the same -I paths, it is fine as\n\n# long as we ensure that the file names inside the -I paths are unique for each\n\n# test.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/UnparseHeadersUsingTokenStream_tests/Makefile.am" : {
      "ObjectId" : "490a6b1fed7626e1822d53ef20e0aac8695aea10",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# whiteSpaceTransformation_DEPENDENCIES = whiteSpaceTransformation.C whiteSpaceTransformation.h\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Test specimens are actually directories, each of which contains a ROSE Test Harness \"config\" file.\n\n# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (11/2/2018): Test with -rose:unparse_tokens\n\n# ROSE_SWITCHES = --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles\n\n# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles \n\n# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles -rose:unparse_tokens\n\n# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 0 -rose:unparseHeaderFiles -rose:unparse_tokens\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Test targets are the makefile targets upon which \"make check\" depends (via check-local). The directory in which the\n\n# tests run needs to be recreated each time we run the test, or else the test will likely pick up the wrong header files: the\n\n# ones generated by the previous run.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (12/27/2018): This is a test using the Windows line endings (previously failing case).\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (12/30/2018): This is a test using the Windows line endings (CPP directives were missing there windows line endings).\n\n# cat -v rose_badInput_with_cpp_directives.c | grep -v \"\\^M\" should report zero lines of difference, so we could test this.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/CompileTests/boost_tests/CMakeLists.txt" : {
      "ObjectId" : "736ac344db8241c65114d929d5a406f6ffcff775",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the following tests either fail or take too long to run\n\n#test_boost_lambda.C\n\n#test_boost_phoenix_v1.C\n\n#test_boost_phoenix_v2.C\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/boost_tests/Makefile.am" : {
      "ObjectId" : "8684433e99e8d5f7ec8d69be5703248de0f39dca",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# Input specimens for the tests\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# All input specimens for the tests, regardless of whether they are expected to pass or fail.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################################################\n\n# STUFF FOR THE \"testTranslator\" TESTS RUN ON EACH INPUT SPECIMEN\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The test executable which runs some test (encoded in the executable) on each specimen.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags to use when running the tests.  Note that we need both the preinclude and normal include directories for\n\n# boost because the pre-include path might be empty in some configurations (e.g., when configuring with\n\n# --with-boost=NON_SYSTEM_DIRECTORY as of 2014-04-08).\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Split specimens into separate lists.  The \"special\" are those specimens that must be run differently than all the rest (i.e.,\n\n# they need to be run with different command-line switches).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Makefile targets for running tests.  The \"special\" things need to be separated out because they need different\n\n# rules.  If they appear as the target for multiple rules then we'll get warnings from make.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Rules for testing normal specimens regardless of whether we expect them to pass or fail.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Rules for the special specimens regardless of whether we expect them to pass or fail.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# These are the targets that are run by \"make check\", those that we expect to pass.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# These are targets that we might want to run manually.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (8/17/2015): This could be made less boost specific, I think.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################################################################\n\n# The original makefile also had $(QMTEST_Objects) which were test targets, but the rules did not work and they were\n\n# not run by \"make check\".  See the Git commit if you're interested. [Robb P Matzke 2014-04-08]\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################################################################\n\n# Automake boilerplate\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# check-local: $(TEST_TARGETS)\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (2/18/2017): More specific logic required for portability.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 110,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 114,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 120,
        "CharPositionInLine" : 5
      },
      "22" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 125,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\t@$(MAKE) $(TEST_TARGETS)\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 142,
        "CharPositionInLine" : 5
      },
      "30" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 147,
        "CharPositionInLine" : 5
      },
      "32" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 153,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# DQ (2/18/2017): More specific logic required for portability.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# This is the GNU 6.1 or later compiler (so skip this list of files).\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Using EDG 4.12 or later (independent of the compiler).\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "tests/nonsmoke/functional/CompileTests/colorAST_tests/CMakeLists.txt" : {
      "ObjectId" : "0c7db53c7e461d4a826704e0d343bbcdda1c4795",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/colorAST_tests/Makefile.am" : {
      "ObjectId" : "e30fbc133e42d9a35d7b0441ccd5937222bf5200",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompileTests/copyAST_tests/CMakeLists.txt" : {
      "ObjectId" : "159887aedb7ca8da0795b812d72b3ac16affc82e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DQ (4/20/2016): This test fails after having added Clang support which \n\n# fixed the version number of GNU compiler emulated by ROSE (not clear if \n\n# that is related).  I need to look into this more later.\n\n# test2007_141.C\n\n# DQ (1/13/2013): These demonstrate about three different types of failures\n\n# that must be fixed.\n\n# test2005_35.C test2005_103.C test2005_128.C test2005_129.C \n\n# test2005_130.C test2005_131.C test2005_132.C test2005_139.C \n\n# test2005_142.C test2005_161.C test2006_84.C test2006_124.C \n\n# test2006_141.C \n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The shorter set of tests\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use tests from the Cxx_tests directory\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompileTests/copyAST_tests/Makefile.am" : {
      "ObjectId" : "9bba3b1afa019f514c299c2f8e601e65dcfd9e5b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (1/8/2008):\n\n# These need to be specified outside of the conditionals so that\n\n# a distribution built when the conditional was false can be used \n\n# when configured with the conditional being true.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if !USING_INTEL_COMPILER\n\n# DQ (11/15/2017): These appear to fail for the Intel compiler (versions v14 through v17).\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# endif\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (2/28/2015): These fail due to the fix for the EDG template normalization.\n\n#  copytest2007_40.C \n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (6/22/2011): These fail the new name qualification support.\n\n#  copytest2007_33.C \n\n#  copytest2007_34.C \n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These fail the strict test that the original AST and the copy of the AST are the same size\n\n#  copytest2007_28.C\n\n#  copytest2007_38.C\n\n#  copytest2007_43.C \n\n#  copytest2007_48.C\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (11/17/2017): Added test2006_08.C to be excluded from Intel testing (look into this later).\n\n# DQ (3/11/2017): This file is a problem for Intel v15 (using Boost 1.57 and 1.59) \n\n# on RHEL 7.3, however I can't reproduce this on my desktop machine.\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == true\"\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == true\"\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == true\"\n",
        "Line" : 727,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 729,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 730,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n\n#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == false\"\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 735,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == false\"\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n\n#\t@echo \"USING_CLANG_COMPILER == true\"\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 741,
        "CharPositionInLine" : 5
      },
      "18" : {
        "Text" : "#\t@echo \"USING_CLANG_COMPILER == false\"\n",
        "Line" : 742,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == true\"\n",
        "Line" : 744,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 746,
        "CharPositionInLine" : 5
      },
      "21" : {
        "Text" : "# This is an unknown compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == false\"\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 749,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n\n#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == false\"\n",
        "Line" : 753,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == true\"\n",
        "Line" : 757,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == true\"\n\n# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == true\"\n",
        "Line" : 762,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_6_1\n",
        "Line" : 764,
        "CharPositionInLine" : 5
      },
      "28" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_6_1\n\n# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 766,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n\n#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == false\"\n",
        "Line" : 768,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 771,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == false\"\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n\n#\t@echo \"USING_CLANG_COMPILER == true\"\n\n# LONG_LIST_EXTRA_TESTCODES_REQUIRED_TO_PASS += $(EDG_412_GNU_6_1_PROBLEM_FILES) $(EDG_49_GNU_6_1_PROBLEM_FILES)\n\n# LONG_LIST_EXTRA_TESTCODES_REQUIRED_TO_PASS += \n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 779,
        "CharPositionInLine" : 5
      },
      "34" : {
        "Text" : "#\t@echo \"USING_CLANG_COMPILER == false\"\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == true\"\n",
        "Line" : 782,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 784,
        "CharPositionInLine" : 5
      },
      "37" : {
        "Text" : "# This is an unknown compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == false\"\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 787,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# DQ (1/10/2017): These test codes are a problem for GNU 6.1 compiler (I think mostly because \n\n# of lacking support for SgTemplateTypedefDeclaration in the ast copy operation).  This issue\n\n# might also be present for compiler versions 4.9 to 6.1 as well.  The cause is likely something\n\n# in the header files for those compiler versions that we have not previously seen.\n\n# if !ROSE_USING_GCC_VERSION_LATER_6_1\n\n# endif\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DQ (2/18/2017): More specific logic required for portability.\n",
        "Line" : 826,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 6.1 compiler, so include these files.\n",
        "Line" : 835,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# This is the GNU 6.1 or later compiler (so skip this list of files).\n",
        "Line" : 848,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Using EDG 4.12 or later (independent of the compiler).\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# DQ (1/19/2017): These is also a problem for GNU 5.1 as well (at least copytest2007_40.C).\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# LONG_LIST_EXTRA_TESTCODES_REQUIRED_TO_PASS += \n",
        "Line" : 873,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# DQ (4/19/2016): Failing test code after added Clang support\n\n# (Need to debug this seperately).\n\n#    test2007_141.C \n",
        "Line" : 878,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# DQ (2/28/2015): These fail due to the fix for the EDG template normalization.\n\n# test2004_149.C \n\n# test2005_28.C \n\n# test2005_93.C \n\n# test2005_98.C \n\n# test2005_181.C \n\n# test2006_20.C \n\n# test2006_79.C \n\n# test2007_141.C \n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# New failing test codes (related to the most recent fixes or merge)\n\n# test2005_06.C \n",
        "Line" : 892,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# DQ (1/13/2013): These fail copyExample translator (exclude for the moment to evaluate current status).\n",
        "Line" : 896,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# DQ (1/13/2013): These demonstrate about three different types of failures that must be fixed.\n\n# test2005_35.C \n\n# test2005_103.C \n\n# test2005_128.C \n\n# test2005_129.C \n\n# test2005_130.C \n\n# test2005_131.C \n\n# test2005_132.C \n\n# test2005_139.C \n\n# test2005_142.C \n\n# test2005_161.C \n\n# test2006_84.C \n\n# test2006_124.C \n\n# test2006_141.C \n\n# test2006_184.C \n",
        "Line" : 899,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# DQ (6/22/2011): These fail the new name qualification support.\n\n# test2005_82.C\n\n# test2005_39.C\n\n# test2005_34.C\n\n# test2005_42.C\n\n# test2004_129.C \n\n# test2004_130.C \n\n# test2005_133.C \n\n# test2004_120.C \n\n# test2004_127.C \n\n# test2004_35.C \n\n# test2004_85.C \n\n# test2004_77.C \n",
        "Line" : 915,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# These fail the strict test that the original AST and the copy of the AST are the same size\n\n# test2001_11.C \n\n# test2001_12.C \n\n# test2001_13.C \n\n# test2001_16.C \n\n# test2001_27.C \n",
        "Line" : 930,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# DQ (1/8/2008): This is not a file that is copied to the distribution.\n\n# test2004_83.C\n\n# test2005_172.C\n\n# test2007_56.C\n\n# test2007_95.C -- broken test case\n",
        "Line" : 938,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# JJW 5-22-2008 This test is not portable to Mac OS X\n\n# test2006_44.C\n",
        "Line" : 944,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 947,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# The longer set of tests\n",
        "Line" : 950,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# The shorter set of tests\n",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# LONG_LIST_ALL_FILES = $(LONG_LIST_TESTCODES_REQUIRED_TO_PASS) $(LONG_LIST_TESTCODE_CURRENTLY_FAILING) $(LONG_LIST_EXTRA_TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# This have been copied into copytest2007_51-58.C\n",
        "Line" : 980,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# This test requires a special commandline so it should not be included.\n\n# test2005_56.C\n",
        "Line" : 991,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n# TESTCODES = $(EXTRA_TESTCODES_REQUIRED_TO_PASS) $(TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 996,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# TESTCODES = $(TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 999,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 1001,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict -rose:suppress_variable_declaration_normalization\n",
        "Line" : 1008,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 1011,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n",
        "Line" : 1014,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 1016,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# TEST_Objects = ${EXTRA_ALL_TESTCODES:.C=.o}\n",
        "Line" : 1024,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# $(TEST_Objects): copyExample $(srcdir)/$(@:.o=.C)\n\n# $(TEST_Objects): copyExample\n\n# $(TEST_Objects): copyExample \n\n##\t@echo \"Calling Copy AST mechanism using TEST_Objects rule: \"\n\n#\t$(VALGRIND) ./copyExample $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C) \n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#\t$(VALGRIND) ./copyExample $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C) \n",
        "Line" : 1036,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Use tests from the Cxx_tests directory\n\n# $(EXTRA_TEST_Objects): copyExample $(srcdir)/$(@:.o=.C)\n\n# $(EXTRA_TEST_Objects): copyExample\n\n##\t@echo \"Copy the file to the local build tree so that we can change the file name suffix (to be a C language file) ...\"\n\n#\t$(VALGRIND) ./copyExample $(ROSE_FLAGS) -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n",
        "Line" : 1039,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#\t$(VALGRIND) ./copyExample $(ROSE_FLAGS) -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n",
        "Line" : 1046,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 1051,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 1057,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 1059,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES)\n",
        "Line" : 1085,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# bin_PROGRAMS = copyExample\n",
        "Line" : 1087,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# copyExample_SOURCES = copyExample.C\n\n# copyExample_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n",
        "Line" : 1089,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# TESTCODES_REQUIRED_TO_PASS = copyExampleInput.C\n",
        "Line" : 1092,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# TESTCODE_CURRENTLY_FAILING = \n",
        "Line" : 1094,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n# TESTCODES = $(TESTCODES_REQUIRED_TO_PASS)\n",
        "Line" : 1096,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# QMTest allows both passing and failing tests.\n\n# ALL_TESTCODES = $(TESTCODES_REQUIRED_TO_PASS) $(TESTCODE_CURRENTLY_FAILING)\n",
        "Line" : 1099,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n# ROSE_FLAGS = --edg:no_warnings -w --edg:restrict\n",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n# TEST_Objects = ${ALL_TESTCODES:.C=.o}\n",
        "Line" : 1105,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Add the dependence upon the source file to trigger recompilation each time the makefile is run!\n\n# $(TEST_Objects): copyExample $(srcdir)/$(@:.o=.C)\n\n# # $(TEST_Objects): copyExample\n\n# \t./copyExample $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C)\n",
        "Line" : 1108,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# QMTEST_Objects = ${ALL_TESTCODES:.C=.qmt}\n",
        "Line" : 1113,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Make rule to build the QMTest database files\n\n# CURRENT_DIRECTORY = `pwd`\n\n# $(QMTEST_Objects): copyExample $(srcdir)/$(@:.qmt=.C)\n\n# \tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/copyExample NULL $(ROSE_FLAGS) -c $(srcdir)/$(@:.qmt=.C)\n",
        "Line" : 1115,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Include makefile rules specific to QMTest\n\n# include $(top_srcdir)/config/QMTest_makefile.inc\n",
        "Line" : 1120,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# DQ (2/26/2009): The copyGraph.[hC] files have been moved to the src/frontend/SageIII/astVisualization directory.\n\n# EXTRA_DIST = $(ALL_TESTCODES) copyGraph.C copyGraph.h\n\n# EXTRA_DIST = $(LONG_LIST_ALL_FILES) copyGraph.C copyGraph.h\n",
        "Line" : 1123,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 1130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 93
    },
    "tests/nonsmoke/functional/CompileTests/experimental_ada_tests/Makefile.am" : {
      "ObjectId" : "786f1e830154e2b86795c91917f543ab010de340",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/23/2017): Use command line option to alternatively test the experimental fortran frontend.\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:experimental_csharp_frontend -I$(srcdir)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MONO_INCLUDE=@MONO_INCLUDE@\n\n# ROSYLN_INCLUDE=@ROSYLN_INCLUDE@\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) $(MONO_INCLUDE) $(ROSYLN_INCLUDE)\n\n# AM_LDFLAGS = $(ROSE_RPATHS)\n\n# LDADD    = $(ROSE_LIBS) -lexperimentalRosyln\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TEST_CSHARP_Objects = ${CSHARP_TESTCODES:.cs=.o}\n\n# TEST_F90_Sources = ${CSHARP_TESTCODES:.cs=.cs.passed}\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# PASSING_TEST_Objects = $(TEST_CSHARP_Objects)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# $(TEST_CSHARP_Objects): ../../testTranslator\n\n# if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION\n\n#\t$(VALGRIND) ../../../testTranslator $(ROSE_FLAGS) -rose:cs -c $(srcdir)/$(@:.o=.cs)\n\n# endif\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Simplest test code.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# More complex test code.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TESTCODES_REQUIRED_TO_PASS = minimal.adb empty_package.ads ordinary_type_declaration.ads task_type_declaration.ads variable_declaration.ads \\\n#   constant_declaration.ads component_declaration.ads procedure_declaration.ads function_declaration.ads parameter_declaration.ads \\\n#   all_modes.ads procedure_declaration.adb function_declaration.adb package_with_body.adb task_with_body.adb entry_declaration.ads \\\n#   exception_declaration.ads choice_parameter_specification.adb tagged_definition.ads derived_record.ads simple_expression_range.ads \\\n#   function_call.adb operator.adb selected_component.ads type_conversion.adb if_statement.adb accept_statement.adb entry_call.adb \\\n#   loop_statement.adb procedure_call.adb raise_statement.adb\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TESTCODES_REQUIRED_TO_PASS = empty_package.ads\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Use these files to initialize TESTCODES_REQUIRED_TO_PASS\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# PASSING_TEST_Objects_passed = ${TESTCODES:.ads=.o.passed}\n\n# PASSING_TEST_Source_passed = ${TESTCODES:.ads=.c.passed}\n\n# TEST_Objects = ${ALL_TESTCODES:.ads=.o}\n\n# TEST_Objects_passed = ${ALL_TESTCODES:.ads=.o.passed}\n\n# TEST_Source_passed = ${ALL_TESTCODES:.ads=.ads.passed}\n\n# TEST_Exe_Objects = ${TESTCODES_REQUIRED_TO_RUN:.ads=.o}\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\techo \"found reference to *.o ads file\"\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\techo \"found reference to *.o adb file\"\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#$(TEST_Source_passed): %.passed: $(testTranslator) $(top_srcdir)/scripts/test_exit_status\n\n#\t$(RTH_RUN) CMD=\"$(testTranslator) $(ROSE_FLAGS) -rose:ada -c $(srcdir)/$(@:.ads.passed=.ads)\" $(top_srcdir)/scripts/test_exit_status $@\n\n#\t$(testTranslator) $(ROSE_FLAGS) -rose:ada -c $(srcdir)/$(@:.ads.passed=.ads) \n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#$(TEST_Exe_Objects): %.o: $(srcdir)/%.c $(testTranslator)\n\n#\t$(testTranslator) $(ROSE_FLAGS) -c $<\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tests/nonsmoke/functional/CompileTests/experimental_cobol_tests/Makefile.am" : {
      "ObjectId" : "30da77cc5e47323ae5d7369e45b27b143cad1638",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/23/2017): Use command line option to alternatively test the experimental fortran frontend.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompileTests/experimental_csharp_tests/Makefile.am" : {
      "ObjectId" : "d4e094e6f39eb6b3a447bd32d9fd381bd555297f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (8/23/2017): Use command line option to alternatively test the experimental fortran frontend.\n\n# ROSE_FLAGS = -rose:verbose 0 -rose:experimental_csharp_frontend -I$(srcdir)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Go back and build the translator we are using to test Fortran (in case make check \n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).  This does not appear to work!\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (28/8/2017): Initial test code fo Csharp.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompileTests/experimental_jovial_tests/Makefile.am" : {
      "ObjectId" : "e400a2dfb0f7b70fc380b8af9f93408cdf9d0a15",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# should finish formulas next\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#PASSING_TEST_Objects = $(TEST_JOVIAL_Objects) $(TEST_COMPOOL_Objects)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Go back and build the translator we are using to test Jovial (in case make check\n\n# is run directly in this directory before make has been run from the root of the \n\n# ROSE directory structure).\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompileTests/experimental_matlab_tests/Makefile.am" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/frontend_integration/Makefile.am" : {
      "ObjectId" : "06534ba5bc9da8d1d82e69a9a55a608997f57234",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################################################\n\n# These are C testcodes that test the new EDG Interface (using EDG 4.0) #\n\n#########################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This tests the ability to read and regenerate the input application and compile it using the backend compiler.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompileTests/hiddenTypeAndDeclarationListTests/CMakeLists.txt" : {
      "ObjectId" : "eacd13858db2bab418e4059345d4984b247f9d4e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/hiddenTypeAndDeclarationListTests/Makefile.am" : {
      "ObjectId" : "29641d6179fa8008a40022b713ad5ba4edba16fb",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Import list of C++ test cases that should pass:\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS_SHORT\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Import list of C++ test cases that are known to fail:\n\n#   TESTCODE_CURRENTLY_FAILING\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# !ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 20,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Note that the tests test2001_02.C and test2001_03.C are required because the\n\n# tests in ../C_subset_of_Cxx use them and that test2004_116.C is required \n\n# because the tests in ROSE/tests/nonsmoke/functional/roseTests/programTransformationTests use it.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 28,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# DQ (2/10/2013): Make all of the tests codes\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Some of these test codes reference A++ header fiels as part of their tests\n\n# Include the path to A++ and the transformation specification\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# Add the dependence upon the source file to trigger recompilation each time the makefile is run!\n\n# $(TEST_Objects): ../../testTranslator $(srcdir)/$(@:.o=.C)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This requires a special makefile rule\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This must be placed after the more general rule to work properly!\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Make sure that all the test codes end up in the distribution\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "tests/nonsmoke/functional/CompileTests/mergeAST_tests/CMakeLists.txt" : {
      "ObjectId" : "b460e68de4deb2e08949a9029cd2cff811b2ec7b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a shortened list that tests more quickly.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/mergeAST_tests/Makefile.am" : {
      "ObjectId" : "b0d582449d9106e61858bb4f22d9d2e289cfdb43",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# These are testcodes specific to the ROSE mechanism to merge different ASTs #\n\n##############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(srcdir)/../colorAST_tests\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is a shorted list that tests more quickly.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (1/19/2017): These are a problem for GNU 6.1.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (4/9/2017): This appears to be a problem for GNU 4.8 using EDG 4.9.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (2/26/2017): This is a file that fails for GNU 5.1 and later versions.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (4/9/2017): Older compiler versions appear to be fine.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TV (11/15/2018): EDG 5.0 tells us that a forward declaration of an enumeration is \"nonstandard\".\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (8/22/2013): Failing test:\n\n# This test code is a large complex test, it fails out-side of the debugger, \n\n# but runs fine in the debugger.  Valgrind reports a number of specific problems, \n\n# all too complex to handle at present. I elect to comment out this specific \n\n# test (merge on two files containing only: \"#include<string>\" and reevaluate\n\n# on the larger collection of regression tests in ROSE.\n\n#    mergeTest_06.C\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (5/26/2013) (mergeTest_121.C) This is a failing test on Jenkins that I can now reproduce on my machine.\n\n# Command line to generate problem: ./testMerge --edg:no_warnings -w --edg:restrict -rose:astMerge -c /home/dquinlan/ROSE/git-dq-edg4x-rc/tests/nonsmoke/functional/CompileTests/mergeAST_tests/mergeTest_121.C mergeTest_121_alt.C\n\n# TOO1 (5/28/2013) (mergeTest_121.C) Add to EXTRA_DIST (below) to fix UnusedSourcesPolicy test.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (9/18/2011): Failing tests after new contant folding default to subsitute original expression tress for constant values.\n\n#    mergeTest_90.C\n\n#    mergeTest_124.C \n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (9/24/2011): Comment these out since they do not pass with the new original expression tree handling, and will have to be debugged seperately.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This fails for GNU g++ version 4.3\n\n#     mergeTest_136.C  # Liao, 7/27/2010, __is_pod  __is_empty become builtin functions in GCC 4.3 and above\n\n#    mergeTest_07.C\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (7/16/2010): Test code which demonstrates that we can't delete the SgStorageModifier IR nodes (I don't know why).\n\n#    mergeTest_137.C\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Separate out the files that are only failing to unparse correctly after the AST merge.\n\n# This is important eventually, but for analysis we only need the merge without unparsing.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (12/5/2007): New failing files\n\n# mergeTest_89.C \n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# testMerge: testMerge\n\n#\t./testMerge -c $(srcdir)/inputCode_merge.C $(srcdir)/inputCode_merge_alt.C\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=80 --leak-check=no --error-limit=no --show-reachable=yes\n\n# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND_OPTIONS = --tool=memcheck -v --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes --free-fill=deadbeef\n\n# VALGRIND_OPTIONS = --tool=memcheck -v --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes --malloc-fill=\"0000\" --free-fill=\"0000\"\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# VALGRIND = /usr/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND =\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# VALGRIND = $(ADDRESS_SANITIZER_OPTIONS)\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Use ../colorAST_tests/colorTraversal.h\n\n#$(TEST_Objects): merge\n\n#\t./merge $(ROSE_FLAGS) -I../colorAST_tests -c $(srcdir)/$(@:.o=.C)\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# \t$(VALGRIND) ./testMerge $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C)\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\tBuild an object file to prevent make rebuilding target (astMerge is an analysis only).\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# EXTRA_DIST = $(ALL_TESTCODES) inputCode_merge.h  odr_base.h  odr.h\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 312,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n\n#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_8 == false\"\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 316,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == false\"\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n\n#\t@echo \"USING_CLANG_COMPILER == true\"\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 323,
        "CharPositionInLine" : 5
      },
      "38" : {
        "Text" : "#\t@echo \"USING_CLANG_COMPILER == false\"\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == true\"\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 329,
        "CharPositionInLine" : 5
      },
      "41" : {
        "Text" : "# This is an unknown compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == false\"\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 332,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n\n#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == false\"\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 343,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# DQ (2/28/2017): Skip these files with Clang for now and come back to them later (when we understand the limits of portability better).\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 352,
        "CharPositionInLine" : 5
      },
      "48" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 359,
        "CharPositionInLine" : 5
      },
      "50" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 362,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 52
    },
    "tests/nonsmoke/functional/CompileTests/mixLanguage_tests/Makefile.am" : {
      "ObjectId" : "6c2c92b359134a1edc33e9a15074837f516998da",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/nameQualificationAndTypeElaboration_tests/CMakeLists.txt" : {
      "ObjectId" : "3c8a768ecdfcabd83b7140141136ec225a677c0a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/CompileTests/nameQualificationAndTypeElaboration_tests/Makefile.am" : {
      "ObjectId" : "c5168593eecedfbd9d45d5a6f67ae9b32ebe2088",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "######################################################\n\n# These are C+ testcodes targeting aspects of both C #\n\n# and C++ that can be compiled using a C++ compiler  #\n\n######################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (2/10/2013): Fixed makefile to build required testTranslator before running tests.\n\n# TEST_TRANSLATOR = $(top_builddir)/tests/nonsmoke/functional/testTranslator \n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (11/7/2007): These both work now!\n\n# DQ (10/24/2007): This used to pass but not now!\n\n# testNameQalTypeElab_17.C\n\n# DQ (11/4/2007): This used to pass but not now (need to fix)!\n\n# testNameQalTypeElab_22.C\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (8/28/2006): Verified non-working code (some are here because they represent source positions tests)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (9/6/2008): This should not be listed twice\n\n# testNameQalTypeElab_35.C\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export\n\n#ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export $(PERFORMANCE_REPORT_OPTION)\n\n# Suppress all warnings (in EDG: --no_warnings) (in g++: -w)\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=yes --error-limit=no --show-reachable=yes\n\n# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (12/2/2006): This is an alternative to valgrind to test ROSE (from Jeremiah) (does not appear to work properly for me)\n\n# VALGRIND = libtool gdb -batch -x $(srcdir)/../dump_crash_locs.gdb --args\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Make rule to build the QMTest database files\n\n# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(QMTEST_Objects): preprocessor $(srcdir)/$(@:.qmt=.C)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t@echo \"Calling QMTEST_Objects rule for Cxx_tests directory: \"\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This must be placed after the more general rule to work properly!\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\t$(VALGRIND) ../preprocessor -rose:verbose 2 -DTEST_STRING_MACRO=\\\"\"Thu Apr 14 08:18:33 PDT 2005\"\\\" $(srcdir)/test2005_56.C -o test2005_56\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\tgprof ../preprocessor $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/test2001_11.C\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tests/nonsmoke/functional/CompileTests/sizeofOperation_tests/CMakeLists.txt" : {
      "ObjectId" : "2b3a6a25fc4f665fa0324c866a138f4d08b1c1a7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/sizeofOperation_tests/Makefile.am" : {
      "ObjectId" : "6f00bf7598aef2a1559dc978342ef1f039eed0e8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the dependence upon the source file to trigger recompilation each time the makefile is run!\n\n# $(TEST_Objects): SizeofTest_GNU $(srcdir)/$(@:.o=.C)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (10/21/2009): comment out for now while Yi fixes this.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#QMTEST_Objects = ${ALL_TESTCODES:.C=.qmt}\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make rule to build the QMTest database files\n\n#CURRENT_DIRECTORY = `pwd`\n\n#$(QMTEST_Objects): SizeofTest_GNU.C $(srcdir)/$(@:.qmt=.C)\n\n#\t@echo \"Calling QMTEST_Objects rule: \"\n\n#\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/SizeofTest_GNU NULL -c $(srcdir)/$(@:.qmt=.C)\n\n#$(QMTEST_Objects): SizeofTest_Intel.C $(srcdir)/$(@:.qmt=.C)\n\n#\t@echo \"Calling QMTEST_Objects rule: \"\n\n#\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/SizeofTest_Intel NULL -c $(srcdir)/$(@:.qmt=.C)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include makefile rules specific to QMTest\n\n#include $(top_srcdir)/config/QMTest_makefile.inc\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (2/18/2017): More specific logic required for portability.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 70,
        "CharPositionInLine" : 5
      },
      "14" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 75,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tests/nonsmoke/functional/CompileTests/sourcePosition_tests/CMakeLists.txt" : {
      "ObjectId" : "907b2f0c8feaed931e0b68a88ebc7dc51edf8917",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/sourcePosition_tests/Makefile.am" : {
      "ObjectId" : "b67e70c05b26d223fb893cb93f797f12f277791a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This transltor output source position info\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (8/14/2004) Developer's Note:\n\n# This permits the use of the pair of libraries -lrose -ledg OR the longer \n\n# list of libraries (the later option is much faster for development work).\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Turn on GNU Coverage Tool (gcov)\n\n# CXX += -fprofile-arcs -ftest-coverage\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (11/17/2017): Added test2006_08.C to be excluded from Intel testing (look into this later).\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == true\"\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == true\"\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == true\"\n\n# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 572,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n\n#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == false\"\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 594,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == false\"\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n\n#\t@echo \"USING_CLANG_COMPILER == true\"\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 600,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "#\t@echo \"USING_CLANG_COMPILER == false\"\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == true\"\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 605,
        "CharPositionInLine" : 5
      },
      "19" : {
        "Text" : "# This is an unknown compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == false\"\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 608,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n\n#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == false\"\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 633,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# DQ (2/19/2017): OLD VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the GNU 6.1 or later compiler (so skip this list of files).\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using EDG 4.12 or later (independent of the compiler).\n",
        "Line" : 674,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Since these file reference file in the ../Cxx_tests direcotry we have to \n\n# shorten this file list but not more than it is done there, else \"make distcheck\"\n\n# will fail.\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# This used to pass.\n\n# test2005_188.C \n\n# test2005_205.C\n",
        "Line" : 709,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# JJW 5-22-2008 This test is not portable to Mac OS X\n\n# test2006_44.C\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# DQ (8/28/2006): Verified non-working code\n\n# RV (3/20/2007): Updated to include test2005_04, test2005_06, test2005_88\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 763,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 766,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 781,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 784,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\t$(VALGRIND) ./statements $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# DQ (11/11/2012): Example command-line to run tview on generated file in current directory.\n\n# Must be in the source directory and this there is no absolute path to the build_dir so this \n\n# test is not really easy to make.  Not really important, maybe we can think about this later.\n\n# java tview /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-4.2.4-dq-edg4x-rc/tests/nonsmoke/functional/CompileTests/sourcePosition_tests/test2001_01.C\n\n# test:\n\n#\tcd $(top_srcdir)/src/roseIndependentSupport/tview; pwd; ls; java tview /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-4.2.4-dq-edg4x-rc/tests/nonsmoke/functional/CompileTests/sourcePosition_tests/test2001_01.C\n\n#\tcd $(top_srcdir)/src/roseIndependentSupport/tview; pwd; ls; java tview $(top_builddir)/tests/nonsmoke/functional/CompileTests/sourcePosition_tests/test2001_01.C\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 803,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 815,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 819,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 823,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 825,
        "CharPositionInLine" : 5
      },
      "45" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 828,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 830,
        "CharPositionInLine" : 5
      },
      "47" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 831,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 833,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 837,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# NOT USING_GNU_COMPILER\n",
        "Line" : 843,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# DQ (2/28/2017): Skipping these tests for now.\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 847,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 849,
        "CharPositionInLine" : 5
      },
      "54" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 855,
        "CharPositionInLine" : 5
      },
      "56" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 858,
        "CharPositionInLine" : 6
      },
      "58" : {
        "Text" : "# EXTRA_DIST = CMakeLists.txt README $(ALL_TESTCODES)\n",
        "Line" : 875,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 59
    },
    "tests/nonsmoke/functional/CompileTests/staticCFG_tests/CMakeLists.txt" : {
      "ObjectId" : "5269d5e59c2de93e57ec1e225ac26d226a696599",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some of these test codes reference A++ header fiels as part of their tests\n\n# Include the path to A++ and the transformation specification\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This populates the list ROSE__CXX_TESTS\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/CompileTests/staticCFG_tests/Makefile.am" : {
      "ObjectId" : "77f72393dc113342ed574b82973d373d1efb7175",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#testStaticCFG.C\n",
        "Line" : 11,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : "# Import list of C++ test cases that should pass:\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS_SHORT\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/19/2017): These are a problem for GNU 6.1.\n\n# if !ROSE_USING_GCC_VERSION_LATER_6_1\n\n# EXAMPLE_C_TESTCODES_VERIFIED_TO_PASS += \\\n# endif\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# JJW 5-22-2008 This test is not portable to Mac OS X\n\n# test2006_44.C\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########################################################################\n\n# These are Fortran testcodes targeting aspects F66, F77, F90, F95, F2003 #\n\n###########################################################################\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/15/2011): Passing tests: 111, Failing tests: 12\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (9/15/2011): It appears that all of the first few F77 tests fail for the same reason.\n\n# Passing tests: 51, Failing tests: 23\n\n# The Fortran CFG likely needs to be reviewed separately.\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (9/15/2011): Passing tests: , Failing tests: \n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (10/13/2012): Failing for new EDG 4x work.\n\n# complex_03.c \n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# !ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 453,
        "CharPositionInLine" : 5
      },
      "13" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Note that the tests test2001_02.C and test2001_03.C are required because the\n\n# tests in ../C_subset_of_Cxx use them and that test2004_116.C is required \n\n# because the tests in ROSE/tests/nonsmoke/functional/roseTests/programTransformationTests use it.\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 461,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Some of these test codes reference A++ header fiels as part of their tests\n\n# Include the path to A++ and the transformation specification\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# list of generated files to avoid unnecessary re-test\n\n# Liao, 11/13/2012, differentiate generated files between testStaticCFG and testInterproceduralCFG so one success won't mask the failure of others\n\n# CXX_FILES = ${TESTCODES_REQUIRED_TO_PASS:.C=.CXX-o}\n\n# CXX_INTER_FILES = ${TESTCODES_REQUIRED_TO_PASS:.C=.CXX-INT-o}\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# C_FILES   = ${EXAMPLE_C_TESTCODES_VERIFIED_TO_PASS:.C=.C-o}\n\n# C_INTER_FILES   = ${EXAMPLE_C_TESTCODES_VERIFIED_TO_PASS:.C=.C-INT-o}\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# C99_FILES = ${C99_TESTCODES_REQUIRED_TO_PASS:.c=.C99-o}\n\n# C99_INTER_FILES = ${C99_TESTCODES_REQUIRED_TO_PASS:.c=.C99-INT-o}\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# F90_FILES = ${F90_TESTCODES_REQUIRED_TO_PASS:.f90=.F90-o}\n\n# F90_INTER_FILES = ${F90_TESTCODES_REQUIRED_TO_PASS:.f90=.F90-INT-o}\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# F77_FILES = ${F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS:.f=.F-o}\n\n# F77_INTER_FILES = ${F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS:.f=.F-INT-o}\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# F03_FILES = ${F03_TESTCODES_REQUIRED_TO_PASS:.f03=.F03-o}\n\n# F03_INTER_FILES = ${F03_TESTCODES_REQUIRED_TO_PASS:.f03=.F03-INT-o}\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t./testStaticCFG $(ROSE_FLAGS) -DTEST_STRING_MACRO=\\\"\"Thu Apr 14 08:18:33 PDT 2005\"\\\" -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(srcdir)/../Cxx_tests/$(@:.CXX-o=.C) && touch $@\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\t./testInterproceduralCFG $(ROSE_FLAGS) -DTEST_STRING_MACRO=\\\"\"Thu Apr 14 08:18:33 PDT 2005\"\\\" -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(srcdir)/../Cxx_tests/$(@:.CXX-INT-o=.C) && touch $@\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\t./testStaticCFG $(ROSE_FLAGS) -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(@:.C-o=.temp.c) && touch $@\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\t./testInterproceduralCFG $(ROSE_FLAGS) -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(@:.C-INT-o=.temp.int.c) && touch $@\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\t./testStaticCFG $(ROSE_FLAGS) -I$(srcdir)/../C99_tests $(TESTCODE_INCLUDES) -c $(@:.C99-o=.temp.c) && touch $@\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\t./testInterproceduralCFG $(ROSE_FLAGS) -I$(srcdir)/../C99_tests $(TESTCODE_INCLUDES) -c $(@:.C99-INT-o=.temp.int.c) && touch $@\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# DQ (9/15/2011): I have reenabled these test and identified the subset which passed so they can be reqularly tested.\n\n# All of the tests passing for the virtualCFG tests also pass for the staticCFG tests.\n\n# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\t./testStaticCFG $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/../Fortran_tests/$(@:.F90-o=.f90) && touch $@\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\t./testInterproceduralCFG $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/../Fortran_tests/$(@:.F90-INT-o=.f90) && touch $@\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# DQ (9/15/2011): I have reenabled these test and identified the subset which passed so they can be reqularly tested.\n\n# All of the tests passing for the virtualCFG tests also pass for the staticCFG tests.\n\n# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\t./testStaticCFG $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/../Fortran_tests/$(@:.F-o=.f) && touch $@\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\t./testInterproceduralCFG $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/../Fortran_tests/$(@:.F-INT-o=.f) && touch $@\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# DQ (9/15/2011): I have reenabled these test and identified the subset which passed so they can be reqularly tested.\n\n# All of the tests passing for the virtualCFG tests also pass for the staticCFG tests.\n\n# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#\t./testStaticCFG $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/../Fortran_tests/$(@:.F03-o=.f03) && touch $@\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\t./testInterproceduralCFG $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/../Fortran_tests/$(@:.F03-INT-o=.f03) && touch $@\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Include makefile rules specific to QMTest\n\n#include $(top_srcdir)/config/QMTest_makefile.inc\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# DQ (11/5/2016): Skip the Fortran testing when using the Address Sanitizer (does not play well with the JVM).\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# check-local: check-cxx check-c check-c99 check-fortran\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# DQ (2/18/2017): More specific logic required for portability.\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 622,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 623,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 626,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 632,
        "CharPositionInLine" : 5
      },
      "51" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 637,
        "CharPositionInLine" : 5
      },
      "53" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 640,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#\t@$(MAKE) $(TEST_TARGETS)\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 654,
        "CharPositionInLine" : 5
      },
      "59" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 659,
        "CharPositionInLine" : 5
      },
      "61" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 660,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n",
        "Line" : 662,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 665,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "#\tDQ (8/25/2011): This gnerates a command line that is too long for OSX and ends in an error.\n\n#\tThe problem appears to be that there are too many *.dot files...(with long names).\n\n#\trm -f *.o *.temp.c *-o *.mod *.dot\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 65
    },
    "tests/nonsmoke/functional/CompileTests/systemc_tests/Makefile.am" : {
      "ObjectId" : "f3a4eb29969723c281363d7a7dbbfeade3fb43d8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "####################################################################################\n\n# These are ROSE translators and test the compilation ROSE applications using ROSE #\n\n####################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Test translator contributed by Tim.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build variable to SystemC include directory.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Files that represent header files from ROSE that we can now compile with ROSE.\n\n# However we don't want to distribute the System C include files, so we can't \n\n# include the test code to be compiled (except for internal testing).\n\n# TESTCODES_REQUIRED_TO_PASS = input_hello_world.C\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/10/2013): Make all of the tests codes\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ****************************************************************************************************\n\n#     Test codes or selected ROSE code that can compile using ROSE or is the subject of current work \n\n# ****************************************************************************************************\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (4/10/2016): Added test code from project working on systemc (but this was not really specific to systemc support).\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\t./member_function -DSKIP_ROSE_BUILTIN_DECLARATIONS -c -I$(srcdir) $(srcdir)/input_member_function.cpp\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/nonsmoke/functional/CompileTests/uninitializedField_tests/Makefile.am" : {
      "ObjectId" : "55306df60808e473d4bc3d0e83d6180ae31fc61f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Import list of C++ test cases that should pass:\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS_SHORT\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# JJW 5-22-2008 This test is not portable to Mac OS X\n\n# test2006_44.C\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########################################################################\n\n# These are Fortran testcodes targeting aspects F66, F77, F90, F95, F2003 #\n\n###########################################################################\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# !ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 430,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Note that the tests test2001_02.C and test2001_03.C are required because the\n\n# tests in ../C_subset_of_Cxx use them and that test2004_116.C is required \n\n# because the tests in ROSE/tests/nonsmoke/functional/roseTests/programTransformationTests use it.\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 438,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Some of these test codes reference A++ header fiels as part of their tests\n\n# Include the path to A++ and the transformation specification\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ${EXAMPLE_C_TESTCODES_VERIFIED_TO_PASS:.C.o}: testUninitializedFields\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# check-local: $(CXX_FILES) $(C_FILES)\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# None of this file is included when USE_VALGRIND is off\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tests/nonsmoke/functional/CompileTests/unparseToString_tests/CMakeLists.txt" : {
      "ObjectId" : "3a66f4b9617f06a5745c79600e8a18ef7bf69aca",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This populates the list ROSE__CXX_TESTS\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/CompileTests/unparseToString_tests/Makefile.am" : {
      "ObjectId" : "8154eb0afec1ce5cd36b85e1cd6ff71a49c5938e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# Executables.\n\n########################################################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################################################\n\n# Tests.  We currently have two tests (which are both the same executable but invoked with different switches) that\n\n# operate over a big list of specimens (*.C files all from a common directory).\n\n########################################################################################################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The list of specimens (which must all be from one directory so as to not be ambiguous)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##DOES_NOT_WORK## include $(SPECIMEN_DIR)/Makefile-pass.inc\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The makefile targets for \"make check\"\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# A couple of phony targets for running only one test across all the specimens\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# How to run each test across each specimen\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "########################################################################################################################\n\n# Additional automake rules\n\n########################################################################################################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# check-local: $(TEST_TARGETS)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 73,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 83,
        "CharPositionInLine" : 5
      },
      "15" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 88,
        "CharPositionInLine" : 5
      },
      "17" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# NOT USING_GNU_COMPILER\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DQ (2/28/2017): Skipping these tests for now.\n\n#\t@$(MAKE) $(TESTCODES_Objects)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 107,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 113,
        "CharPositionInLine" : 5
      },
      "26" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 116,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# These \"rm\" commands are split up because the argument lists are too long for some shells.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "tests/nonsmoke/functional/CompileTests/unparse_template_from_ast/Makefile.am" : {
      "ObjectId" : "b685f09b95e291c7e121312e6604fe212dfe9f8b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/virtualCFG_tests/CMakeLists.txt" : {
      "ObjectId" : "60485b6533c33eca402ae1e69445eedd39769729",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some of these test codes reference A++ header fiels as part of their tests\n\n# Include the path to A++ and the transformation specification\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This populates the list ROSE__CXX_TESTS\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/CompileTests/virtualCFG_tests/Makefile.am" : {
      "ObjectId" : "44eb66c16a82a9bfca6799039fd08bbaa8337979",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Import list of C++ test cases that should pass:\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS\n\n#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS_SHORT\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (1/20/2018): This is a test that is only tested using CMake (but not autoconf), and thus is is only seen in\n\n# the CMake testing.  The Autoconf tests should likely be expaned to be the same, however, this is the only\n\n# failing test at the moment.  The failure is due to the new duff's device support.  So I will document the\n\n# failing test here, but try to get the current work checked in without it.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# JJW 5-22-2008 This test is not portable to Mac OS X\n\n# test2006_44.C\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###########################################################################\n\n# These are Fortran testcodes targeting aspects F66, F77, F90, F95, F2003 #\n\n###########################################################################\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# #######################\n\n#      PASSING TESTS\n\n# #######################\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (9/15/2011): Passing tests: 111, Failing tests: 12\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/15/2011): It appears that all of the first few F77 tests fail for the same reason.\n\n# Passing tests: 51, Failing tests: 23\n\n# The Fortran CFG likely needs to be reviewed separately.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (9/15/2011): Passing tests: , Failing tests: \n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Not yet fully supported in java frontend:\n\n#\t  cave3_import0.java \\\n#\t  cave3_import1.java \\\n#\t  cave3_import2.java \\\n#\t  cave3_import3.java \\\n#     cave3_foreach3.java \\\n#     cave3_instanceof0.java \\\n#     cave3_assert2.java \\\n#     cave3_assert3.java \\\n#\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Buggy cfg implementation\n\n# Weird cfg for System.out.println\n\n#     test2011_04.java \\\n#     test2011_05.java \\\n#     pgc_2011_30.java \\\n#     test2011_21.java \\\n#     test2011_22.java \\\n#     test2011_23.java \\\n#     test2011_24.java \\\n#     test2011_25.java \\\n#     test2011_27.java \\\n#     test2011_28.java \\\n# Synchronized missing\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SgJavaImportStatement missing\n\n#     test2011_42.java \\\n#     test2011_43.java \\\n#     test2011_44.java \\\n# Doesn't compile\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#     test2011_45.java \\\n#     test2011_46.java \\\n#\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Configure-time automake conditional\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This is the long test of ROSE (takes a while!)\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# !ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 582,
        "CharPositionInLine" : 5
      },
      "15" : {
        "Text" : "# Shorten the list of code to compile to simplify checks using \"make distcheck\"\n\n# Note that the tests test2001_02.C and test2001_03.C are required because the\n\n# tests in ../C_subset_of_Cxx use them and that test2004_116.C is required \n\n# because the tests in ROSE/tests/nonsmoke/functional/roseTests/programTransformationTests use it.\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ROSE_USE_LONG_MAKE_CHECK_RULE\n",
        "Line" : 590,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Some of these test codes reference A++ header fiels as part of their tests\n\n# Include the path to A++ and the transformation specification\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 599,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CXX_FILES = ${TESTCODES_REQUIRED_TO_PASS:.C=.CXX-o}\n\n# C_FILES   = ${EXAMPLE_C_TESTCODES_VERIFIED_TO_PASS:.C=.C-o}\n\n# C99_FILES = ${C99_TESTCODES_REQUIRED_TO_PASS:.c=.C99-o}\n\n# F90_FILES = ${F90_TESTCODES_REQUIRED_TO_PASS:.f90=.F90-o}\n\n# F77_FILES = ${F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS:.f=.F-o}\n\n# F03_FILES = ${F03_TESTCODES_REQUIRED_TO_PASS:.f03=.F03-o}\n\n# JAVA_FILES = ${JAVA_TESTCODES_REQUIRED_TO_PASS:.java=.java-o}\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\t./testVirtualCFG $(ROSE_FLAGS) -DTEST_STRING_MACRO=\\\"\"Thu Apr 14 08:18:33 PDT 2005\"\\\" -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(srcdir)/../Cxx_tests/$(@:.CXX-o=.C) && touch $@\n\n#\t./testVirtualCFG $(ROSE_FLAGS) -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(srcdir)/../Cxx_tests/$(@:.CXX-o=.C) && touch $@\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ${EXAMPLE_C_TESTCODES_VERIFIED_TO_PASS:.C.o}: testVirtualCFG\n\n# $(C_FILES): testVirtualCFG $(srcdir)/../Cxx_tests/$(@:.C-o=.C)\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\tcp $(srcdir)/../Cxx_tests/$(@:.C-o=.C) $(@:.C-o=.temp.c)\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t./testVirtualCFG $(ROSE_FLAGS) -I$(srcdir)/../Cxx_tests $(TESTCODE_INCLUDES) -c $(@:.C-o=.temp.c) && touch $@\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\t./testVirtualCFG $(ROSE_FLAGS) -I$(srcdir)/../C99_tests $(TESTCODE_INCLUDES) -c $(@:.C99-o=.temp.c) && touch $@\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (9/15/2011): I have reenabled these test and identified the subset which passed so they can be reqularly tested.\n\n# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\t./testVirtualCFG $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/../Fortran_tests/$(@:.F90-o=.f90) && touch $@\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (9/15/2011): I have reenabled these test and identified the subset which passed so they can be reqularly tested.\n\n# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\t./testVirtualCFG $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/../Fortran_tests/$(@:.F-o=.f) && touch $@\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# DQ (9/15/2011): I have reenabled these test and identified the subset which passed so they can be reqularly tested.\n\n# DQ (6/4/2008): I have commented these out while we do more development of ROSE Fortran support.\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\t./testVirtualCFG $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/../Fortran_tests/$(@:.F03-o=.f03) && touch $@\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#$(JAVA_FILES): testVirtualCFG $(srcdir)/../Java_tests/$(@:.java-o=.java)\n\n#\tcp $(srcdir)/../Java_tests/$(@:.java-o=.java) $(@:.java-o=.temp.java)\n\n#\t./testVirtualCFG $(ROSE_FLAGS) -I$(srcdir)/../Java_tests -c $(@:.java-o=.temp.java) && touch $@\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#\t./testVirtualCFG $(ROSE_FLAGS) -c $(@:.java-o=.java) && touch $@\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# check-local: check-cxx check-c check-c99 check-fortran check-java\n\n# check-local: check-c check-c99 check-fortran check-java check-cxx\n\n# check-local: $(CXX_FILES) $(C_FILES)\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 712,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 714,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 719,
        "CharPositionInLine" : 5
      },
      "42" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 722,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 724,
        "CharPositionInLine" : 5
      },
      "44" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n",
        "Line" : 727,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# conditional-check-local: extraTests\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 739,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 742,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 744,
        "CharPositionInLine" : 5
      },
      "51" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 749,
        "CharPositionInLine" : 5
      },
      "53" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 750,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n",
        "Line" : 752,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "#\tDQ (8/25/2011): This gnerates a command line that is too long for OSX and ends in an error.\n\n#\tThe problem appears to be ther there are too many *.dot files...(with long names).\n\n#\trm -f *.o *.temp.c *-o *.mod *.dot\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 56
    },
    "tests/nonsmoke/functional/CompileTests/vxworks_tests/Makefile.am" : {
      "ObjectId" : "db252c383430c3adb0becb8c8b571ea8955128d1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "####################################################################################\n\n# These are ROSE translators and test the compilation ROSE applications using ROSE #\n\n####################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Test translator.\n\n# noinst_PROGRAMS = vxworksc\n\n# vxworksc_SOURCES = vxworksc.cpp\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build variable to SystemC include directory.\n\n# VXWORKS_C_INCLUDES = -I$(srcdir)/include\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Files that represent header files from ROSE that we can now compile with ROSE.\n\n# However we don't want to distribute the System C include files, so we can't \n\n# include the test code to be compiled (except for internal testing).\n\n# TESTCODES_REQUIRED_TO_PASS = input_hello_world.C\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/10/2013): Make all of the tests codes\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QMTEST_Objects = ${ALL_TESTCODES:.C=.qmt}\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make rule to build the QMTest database files\n\n# CURRENT_DIRECTORY = `pwd`\n\n# $(QMTEST_Objects): $(TEST_TRANSLATOR) $(srcdir)/$(@:.qmt=.C)\n\n#\t@echo \"Calling QMTEST_Objects rule: \"\n\n#\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/../../testTranslator NULL $(ROSE_FLAGS) -I$(top_builddir) $(SYSTEM_C_INCLUDES) -c $(srcdir)/$(@:.qmt=.C)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ****************************************************************************************************\n\n#     Test codes or selected ROSE code that can compile using ROSE or is the subject of current work \n\n# ****************************************************************************************************\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Test program for VX Works using C\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Test program for VX Works using C++\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# input_hello_world.h\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t@$(MAKE) test_vxworks\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/CompileTests/x10_tests/CMakeLists.txt" : {
      "ObjectId" : "2b4f26a7af5f9ee6f6c915b09bb08dd0676712e9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/CompileTests/x10_tests/Makefile.am" : {
      "ObjectId" : "f575db4b220f6ed5f71292dee93bdf262785803d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#===============================================================================\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#===============================================================================\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Warning: Use -rose:output to unparse file in build tree, rather\n\n# than override the original file in the source tree.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#===============================================================================\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#===============================================================================\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#===============================================================================\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#===============================================================================\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/A++Code/Makefile.am" : {
      "ObjectId" : "8b9a75bd0be755c405ecc79505b42434c511a664",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code -I$(srcdir) \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# codes used to isolate bugs (not very interesting)\n\n# testUnparser.C findNullBlockInEDG.C\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Files which don't compile (but used to do so) (this has been isolated as test2001_23.C)\n\n# f_op_all.C i_op_all.C d_op_all.C\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Restrict to level 6 testing for the moment\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Test the -E option with all of these example files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (8/26/2004): I have selected a file at random to test the make sure that\n\n# the translator built with ROSE has no output!  Output from ROSE translators\n\n# is permited only when SgProject::get_verbose() > 0.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/Makefile.am" : {
      "ObjectId" : "1afa965b1bc22c03da7cef4d5e0c2cddf0426948",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == true\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == true\"\n\n# DQ (3/17/2017): Make sure this is tested for the GNU 4.8 compiler (previously only GNU versions less than 4.8).\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == false\"\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TOO (2/16/2011): Errors with Thrifty (GCC 3.4.4) backend compiler. We can gradually\n\n# enable these tests at a later stage if necessary.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TOO (2/23/2011): Errors with Tensilica's Xtensa compilers as alternative backend compilers. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == false\"\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == true\"\n\n# DQ (3/17/2017): Make sure this is tested for the GNU 4.8 compiler (previously only GNU versions less than 4.8).\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\t@echo \"ROSE_USING_GCC_VERSION_LATER_4_9 == false\"\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TOO (2/16/2011): Errors with Thrifty (GCC 3.4.4) backend compiler. We can gradually\n\n# enable these tests at a later stage if necessary.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TOO (2/23/2011): Errors with Tensilica's Xtensa compilers as alternative backend compilers. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "#\t@echo \"USING_GCC_COMPILER == false\"\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# See the README file (in this dirctory) for a brief description of the purpuse for each subdirectory.\n\n# SUBDIRS = A++Code \n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/collectAllCommentsAndDirectives_tests/CMakeLists.txt" : {
      "ObjectId" : "bcff4f45151196398cbe03f349c31cccd49d3d79",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#######################################################\n\n## These are C+ testcodes targeting aspects of both C #\n\n## and C++ that can be compiled using a C++ compiler  #\n\n#######################################################\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS\n\n#\n\n#../preprocessor:\n\n#\tcd ..; $(MAKE) preprocessor\n\n#\n\n#preprocessor: ../preprocessor\n\n#\n\n## Used to testing this makefile and the QMTest software\n\n#TEMP_TESTCODES = \\\n\n#     test2001_01.C \\\n\n#     test2001_02.C\n\n#\n\n#TESTCODES_REQUIRED_TO_PASS = \\\n\n#test_CplusplusMacro_Cpp.C \\\n\n#test2001_01.C \\\n\n#test2001_02.C \\\n\n#test2001_03.C \\\n\n#test2001_04.C \\\n\n#test2001_05.C \\\n\n#test2001_06.C \\\n\n#test2001_07.C \\\n\n#test2001_08.C \\\n\n#test2001_09.C \\\n\n#test2001_10.C \\\n\n#test2001_11.C \\\n\n#test2001_12.C \\\n\n#test2001_13.C \\\n\n#test2001_14.C \\\n\n#test2001_15.C \\\n\n#test2001_16.C \\\n\n#test2001_17.C \\\n\n#test2001_18.C \\\n\n#test2001_19.C \\\n\n#test2001_20.C \\\n\n#test2001_21.C \\\n\n#test2001_22.C \\\n\n#test2001_23.C \\\n\n#test2001_24.C \\\n\n#test2001_25.C \\\n\n#test2001_26.C \\\n\n#test2001_27.C \\\n\n#test2001_28.C \\\n\n#test2001_29.C \\\n\n#test2002_01.C \\\n\n#test2003_01.C \\\n\n#test2003_02.C \\\n\n#test2003_03.C \\\n\n#test2003_04.C \\\n\n#test2003_05.C \\\n\n#test2003_06.C \\\n\n#test2003_08.C \\\n\n#test2003_09.C \\\n\n#test2003_10.C \\\n\n#test2003_11.C \\\n\n#test2003_12.C \\\n\n#test2003_13.C \\\n\n#test2003_14.C \\\n\n#test2003_15.C \\\n\n#test2003_16.C \\\n\n#test2003_17.C \\\n\n#test2003_18.C \\\n\n#test2003_19.C \\\n\n#test2003_20.C \\\n\n#test2003_21.C \\\n\n#test2003_23.C \\\n\n#test2003_24.C \\\n\n#test2003_25.C \\\n\n#test2003_26.C \\\n\n#test2003_27.C \\\n\n#test2003_28.C \\\n\n#test2003_29.C \\\n\n#test2003_30.C \\\n\n#test2003_31.C \\\n\n#test2003_32.C \\\n\n#test2003_35.C \\\n\n#test2003_36.C \\\n\n#test2003_37.C \\\n\n#test2003_38.C \\\n\n#test2004_01.C \\\n\n#test2004_02.C \\\n\n#test2004_03.C \\\n\n#test2004_04.C \\\n\n#test2004_05.C \\\n\n#test2004_06.C \\\n\n#test2004_07.C \\\n\n#test2004_08.C \\\n\n#test2004_09.C \\\n\n#test2004_10.C \\\n\n#test2004_11.C \\\n\n#test2004_12.C \\\n\n#test2004_13.C \\\n\n#test2004_14.C \\\n\n#test2004_15.C \\\n\n#test2004_16.C \\\n\n#test2004_17.C \\\n\n#test2004_18.C \\\n\n#test2004_19.C \\\n\n#test2004_23.C \\\n\n#test2004_24.C \\\n\n#test2004_26.C \\\n\n#test2004_27.C \\\n\n#test2004_28.C \\\n\n#test2004_29.C \\\n\n#test2004_30.C \\\n\n#test2004_31.C \\\n\n#test2004_32.C \\\n\n#test2004_33.C \\\n\n#test2004_34.C \\\n\n#test2004_35.C \\\n\n#test2004_36.C \\\n\n#test2004_37.C \\\n\n#test2004_38.C \\\n\n#test2004_39.C \\\n\n#test2004_40.C \\\n\n#test2004_42.C \\\n\n#test2004_43.C \\\n\n#test2004_44.C \\\n\n#test2004_45.C \\\n\n#test2004_47.C \\\n\n#test2004_48.C \\\n\n#test2004_49.C \\\n\n#test2004_50.C \\\n\n#test2004_51.C \\\n\n#test2004_52.C \\\n\n#test2004_53.C \\\n\n#test2004_54.C \\\n\n#test2004_55.C \\\n\n#test2004_56.C \\\n\n#test2004_58.C \\\n\n#test2004_59.C \\\n\n#test2004_60.C \\\n\n#test2004_61.C \\\n\n#test2004_62.C \\\n\n#test2004_63.C \\\n\n#test2004_64.C \\\n\n#test2004_65.C \\\n\n#test2004_67.C \\\n\n#test2004_68.C \\\n\n#test2004_69.C \\\n\n#test2004_70.C \\\n\n#test2004_71.C \\\n\n#test2004_72.C \\\n\n#test2004_73.C \\\n\n#test2004_74.C \\\n\n#test2004_75.C \\\n\n#test2004_76.C \\\n\n#test2004_77.C \\\n\n#test2004_78.C \\\n\n#test2004_79.C \\\n\n#test2004_80.C \\\n\n#test2004_81.C \\\n\n#test2004_82.C \\\n\n#test2004_83.C \\\n\n#test2004_84.C \\\n\n#test2004_85.C \\\n\n#test2004_86.C \\\n\n#test2004_87.C \\\n\n#test2004_88.C \\\n\n#test2004_89.C \\\n\n#test2004_90.C \\\n\n#test2004_91.C \\\n\n#test2004_93.C \\\n\n#test2004_94.C \\\n\n#test2004_95.C \\\n\n#test2004_96.C \\\n\n#test2004_97.C \\\n\n#test2004_98.C \\\n\n#test2004_99.C \\\n\n#test2004_100.C \\\n\n#test2004_101.C \\\n\n#test2004_102.C \\\n\n#test2004_103.C \\\n\n#test2004_104.C \\\n\n#test2004_105.C \\\n\n#test2004_106.C \\\n\n#test2004_107.C \\\n\n#test2004_108.C \\\n\n#test2004_109.C \\\n\n#test2004_110.C \\\n\n#test2004_111.C \\\n\n#test2004_112.C \\\n\n#test2004_113.C \\\n\n#test2004_114.C \\\n\n#test2004_115.C \\\n\n#test2004_116.C \\\n\n#test2004_117.C \\\n\n#test2004_118.C \\\n\n#test2004_119.C \\\n\n#test2004_120.C \\\n\n#test2004_121.C \\\n\n#test2004_122.C \\\n\n#test2004_123.C \\\n\n#test2004_124.C \\\n\n#test2004_125.C \\\n\n#test2004_127.C \\\n\n#test2004_128.C \\\n\n#test2004_129.C \\\n\n#test2004_130.C \\\n\n#test2004_131.C \\\n\n#test2004_132.C \\\n\n#test2004_133.C \\\n\n#test2004_134.C \\\n\n#test2004_135.C \\\n\n#test2004_136.C \\\n\n#test2004_137.C \\\n\n#test2004_138.C \\\n\n#test2004_139.C \\\n\n#test2004_140.C \\\n\n#test2004_141.C \\\n\n#test2004_142.C \\\n\n#test2004_143.C \\\n\n#test2004_144.C \\\n\n#test2004_145.C \\\n\n#test2004_146.C \\\n\n#test2004_147.C \\\n\n#test2004_148.C \\\n\n#test2004_149.C \\\n\n#test2004_150.C \\\n\n#test2004_151.C \\\n\n#test2004_152.C \\\n\n#test2004_153.C \\\n\n#test2004_154.C \\\n\n#test2004_155.C \\\n\n#test2004_156.C \\\n\n#test2004_157.C \\\n\n#test2004_158.C \\\n\n#test2004_159.C \\\n\n#test2004_160.C \\\n\n#test2004_161.C \\\n\n#test2004_162.C \\\n\n#test2004_163.C \\\n\n#test2004_164.C \\\n\n#test2005_01.C \\\n\n#test2005_02.C \\\n\n#test2005_03.C \\\n\n#test2005_04.C \\\n\n#test2005_05.C \\\n\n#test2005_06.C \\\n\n#test2005_07.C \\\n\n#test2005_08.C \\\n\n#test2005_09.C \\\n\n#test2005_10.C \\\n\n#test2005_11.C \\\n\n#test2005_12.C \\\n\n#test2005_13.C \\\n\n#test2005_14.C \\\n\n#test2005_15.C \\\n\n#test2005_16.C \\\n\n#test2005_17.C \\\n\n#test2005_19.C \\\n\n#test2005_20.C \\\n\n#test2005_21.C \\\n\n#test2005_22.C \\\n\n#test2005_23.C \\\n\n#test2005_24.C \\\n\n#test2005_25.C \\\n\n#test2005_26.C \\\n\n#test2005_27.C \\\n\n#test2005_28.C \\\n\n#test2005_29.C \\\n\n#test2005_30.C \\\n\n#test2005_31.C \\\n\n#test2005_32.C \\\n\n#test2005_33.C \\\n\n#test2005_34.C \\\n\n#test2005_35.C \\\n\n#test2005_36.C \\\n\n#test2005_37.C \\\n\n#test2005_38.C \\\n\n#test2005_39.C \\\n\n#test2005_40.C \\\n\n#test2005_41.C \\\n\n#test2005_42.C \\\n\n#test2005_43.C \\\n\n#test2005_44.C \\\n\n#test2005_45.C \\\n\n#test2005_46.C \\\n\n#test2005_47.C \\\n\n#test2005_48.C \\\n\n#test2005_49.C \\\n\n#test2005_50.C \\\n\n#test2005_51.C \\\n\n#test2005_52.C \\\n\n#test2005_53.C \\\n\n#test2005_55.C \\\n\n#test2005_57.C \\\n\n#test2005_58.C \\\n\n#test2005_59.C \\\n\n#test2005_60.C \\\n\n#test2005_61.C \\\n\n#test2005_62.C \\\n\n#test2005_63.C \\\n\n#test2005_64.C \\\n\n#test2005_65.C \\\n\n#test2005_66.C \\\n\n#test2005_67.C \\\n\n#test2005_68.C \\\n\n#test2005_70.C \\\n\n#test2005_71.C \\\n\n#test2005_72.C \\\n\n#test2005_73.C \\\n\n#test2005_74.C \\\n\n#test2005_75a.C \\\n\n#test2005_75b.C \\\n\n#test2005_76.C \\\n\n#test2005_77.C \\\n\n#test2005_78.C \\\n\n#test2005_79.C \\\n\n#test2005_80.C \\\n\n#test2005_81.C \\\n\n#test2005_82.C \\\n\n#test2005_83.C \\\n\n#test2005_84.C \\\n\n#test2005_86.C \\\n\n#test2005_87.C \\\n\n#test2005_88.C \\\n\n#test2005_89.C \\\n\n#test2005_90.C \\\n\n#test2005_91.C \\\n\n#test2005_92.C \\\n\n#test2005_93.C \\\n\n#test2005_94.C \\\n\n#test2005_95.C \\\n\n#test2005_96.C \\\n\n#test2005_97.C \\\n\n#test2005_98.C \\\n\n#test2005_99.C \\\n\n#test2005_100.C \\\n\n#test2005_101.C \\\n\n#test2005_102.C \\\n\n#test2005_103.C \\\n\n#test2005_104.C \\\n\n#test2005_105.C \\\n\n#test2005_106.C \\\n\n#test2005_107.C \\\n\n#test2005_108.C \\\n\n#test2005_109.C \\\n\n#test2005_110.C \\\n\n#test2005_111.C \\\n\n#test2005_112.C \\\n\n#test2005_113.C \\\n\n#test2005_114.C \\\n\n#test2005_116.C \\\n\n#test2005_117.C \\\n\n#test2005_118.C \\\n\n#test2005_119.C \\\n\n#test2005_120.C \\\n\n#test2005_121.C \\\n\n#test2005_122.C \\\n\n#test2005_123.C \\\n\n#test2005_124.C \\\n\n#test2005_125.C \\\n\n#test2005_126.C \\\n\n#test2005_127.C \\\n\n#test2005_128.C \\\n\n#test2005_129.C \\\n\n#test2005_130.C \\\n\n#test2005_131.C \\\n\n#test2005_132.C \\\n\n#test2005_133.C \\\n\n#test2005_134.C \\\n\n#test2005_135.C \\\n\n#test2005_136.C \\\n\n#test2005_137.C \\\n\n#test2005_138.C \\\n\n#test2005_139.C \\\n\n#test2005_140.C \\\n\n#test2005_141.C \\\n\n#test2005_142.C \\\n\n#test2005_143.C \\\n\n#test2005_144.C \\\n\n#test2005_145.C \\\n\n#test2005_146.C \\\n\n#test2005_147.C \\\n\n#test2005_148.C \\\n\n#test2005_149.C \\\n\n#test2005_150.C \\\n\n#test2005_152.C \\\n\n#test2005_153.C \\\n\n#test2005_154.C \\\n\n#test2005_155.C \\\n\n#test2005_156.C \\\n\n#test2005_157.C \\\n\n#test2005_158.C \\\n\n#test2005_159.C \\\n\n#test2005_160.C \\\n\n#test2005_161.C \\\n\n#test2005_162.C \\\n\n#test2005_163.C \\\n\n#test2005_164.C \\\n\n#test2005_165.C \\\n\n#test2005_166.C \\\n\n#test2005_167.C \\\n\n#test2005_168.C \\\n\n#test2005_169.C \\\n\n#test2005_170.C \\\n\n#test2005_171.C \\\n\n#test2005_172.C \\\n\n#test2005_173.C \\\n\n#test2005_174.C \\\n\n#test2005_175.C \\\n\n#test2005_176.C \\\n\n#test2005_177.C \\\n\n#test2005_178.C \\\n\n#test2005_179.C \\\n\n#test2005_180.C \\\n\n#test2005_181.C \\\n\n#test2005_182.C \\\n\n#test2005_183.C \\\n\n#test2005_184.C \\\n\n#test2005_185.C \\\n\n#test2005_187.C \\\n\n#test2005_189.C \\\n\n#test2005_190.C \\\n\n#test2005_191.C \\\n\n#test2005_192.C \\\n\n#test2005_193.C \\\n\n#test2005_194.C \\\n\n#test2005_195.C \\\n\n#test2005_196.C \\\n\n#test2005_197.C \\\n\n#test2005_198.C \\\n\n#test2005_199.C \\\n\n#test2005_202.C \\\n\n#test2005_203.C \\\n\n#test2005_206.C \\\n\n#test2005_207.C \\\n\n#test2005_208.C \\\n\n#test2005_209.C \\\n\n#test2006_01.C \\\n\n#test2006_02.C \\\n\n#test2006_03.C \\\n\n#test2006_04.C \\\n\n#test2006_05.C \\\n\n#test2006_06.C \\\n\n#test2006_07.C \\\n\n#test2006_08.C \\\n\n#test2006_10.C \\\n\n#test2006_12.C \\\n\n#test2006_13.C \\\n\n#test2006_14.C \\\n\n#test2006_16.C \\\n\n#test2006_17.C \\\n\n#test2006_18.C \\\n\n#test2006_19.C \\\n\n#test2006_20.C \\\n\n#test2006_22.C \\\n\n#test2006_23.C \\\n\n#test2006_25.C \\\n\n#test2006_26.C \\\n\n#test2006_28.C \\\n\n#test2006_34.C \\\n\n#test2006_37.C \\\n\n#test2006_38.C \\\n\n#test2006_40.C \\\n\n#test2006_41.C \\\n\n#test2006_42.C \\\n\n#test2006_44.C \\\n\n#test2006_46.C \\\n\n#test2006_47.C \\\n\n#test2006_50.C \\\n\n#test2006_52.C \\\n\n#test2006_53.C \\\n\n#test2006_54.C \\\n\n#test2006_55.C \\\n\n#test2006_56.C \\\n\n#test2006_57.C \\\n\n#test2006_58.C \\\n\n#test2006_59.C \\\n\n#test2006_61.C \\\n\n#test2006_62.C \\\n\n#test2006_63.C \\\n\n#test2006_66.C \\\n\n#test2006_67.C \\\n\n#test2006_68.C \\\n\n#test2006_69.C \\\n\n#test2006_70.C \\\n\n#test2006_71.C \\\n\n#test2006_72.C \\\n\n#test2006_73.C \\\n\n#test2006_74.C \\\n\n#test2006_75.C \\\n\n#test2006_76.C \\\n\n#test2006_77.C \\\n\n#test2006_78.C \\\n\n#test2006_79.C \\\n\n#test2006_80.C \\\n\n#test2006_81.C \\\n\n#test2006_82.C \\\n\n#test2006_83.C \\\n\n#test2006_84.C \\\n\n#test2006_85.C \\\n\n#test2006_86.C \\\n\n#test2006_87.C \\\n\n#test2006_88.C \\\n\n#test2006_89.C \\\n\n#test2006_90.C \\\n\n#test2006_91.C \\\n\n#test2006_92.C \\\n\n#test2006_93.C \\\n\n#test2006_94.C \\\n\n#test2006_95.C \\\n\n#test2006_96.C \\\n\n#test2006_97.C \\\n\n#test2006_98.C \\\n\n#test2006_99.C \\\n\n#test2006_101.C \\\n\n#test2006_102.C \\\n\n#test2006_103.C \\\n\n#test2006_104.C \\\n\n#test2006_105.C \\\n\n#test2006_106.C \\\n\n#test2006_107.C \\\n\n#test2006_108.C \\\n\n#test2006_109.C \\\n\n#test2006_111.C \\\n\n#test2006_112.C \\\n\n#test2006_113.C \\\n\n#test2006_115.C \\\n\n#test2006_116.C \\\n\n#test2006_117.C \\\n\n#test2006_118.C \\\n\n#test2006_119.C \\\n\n#test2006_120.C \\\n\n#test2006_121.C \\\n\n#test2006_122.C \\\n\n#test2006_123.C \\\n\n#test2006_124.C \\\n\n#test2006_125.C \\\n\n#test2006_126.C \\\n\n#test2006_129.C \\\n\n#test2006_139.C \\\n\n#test2006_140.C \\\n\n#test2006_141.C \\\n\n#test2006_142.C \\\n\n#test2006_143.C \\\n\n#test2006_144.C \\\n\n#test2006_145.C \\\n\n#test2006_146.C \\\n\n#test2006_147.C \\\n\n#test2006_148.C \\\n\n#test2006_149.C \\\n\n#test2006_150.C \\\n\n#test2006_151.C \\\n\n#test2006_152.C \\\n\n#test2006_153.C \\\n\n#test2006_154.C \\\n\n#test2006_155.C \\\n\n#test2006_156.C \\\n\n#test2006_157.C \\\n\n#test2006_158.C \\\n\n#test2006_159.C \\\n\n#test2006_160.C \\\n\n#test2006_161.C \\\n\n#test2006_162.C \\\n\n#test2006_163.C \\\n\n#test2006_164.C \\\n\n#test2006_165.C \\\n\n#test2006_166.C \\\n\n#test2006_167.C \\\n\n#test2006_181.C \\\n\n#test2006_182.C \\\n\n#test2006_183.C \\\n\n#test2006_184.C \\\n\n#test2006_185.C \\\n\n#test2006_188.C \\\n\n#test2007_01.C \\\n\n#test2007_02.C \\\n\n#test2007_03.C \\\n\n#test2007_04.C \\\n\n#test2007_05.C \\\n\n#test2007_06.C \\\n\n#test2007_07.C \\\n\n#test2007_08.C \\\n\n#test2007_09.C \\\n\n#test2007_10.C \\\n\n#test2007_11.C \\\n\n#test2007_12.C \\\n\n#test2007_13.C \\\n\n#test2007_14.C \\\n\n#test2007_15.C \\\n\n#test2007_16.C \\\n\n#test2007_17.C \\\n\n#test2007_21.C \\\n\n#test2007_23.C \\\n\n#test2007_24.C \\\n\n#test2007_25.C \\\n\n#test2007_26.C \\\n\n#test2007_28.C \\\n\n#test2007_29.C \\\n\n#test2007_38.C \\\n\n#test2007_40.C \\\n\n#test2007_41.C \\\n\n#test2007_43.C \\\n\n#test2007_44.C \\\n\n#test2007_46.C \\\n\n#test2007_47.C \\\n\n#test2007_48.C \\\n\n#test2007_49.C \\\n\n#test2007_50.C \\\n\n#test2007_51.C \\\n\n#test2007_52.C \\\n\n#test2007_53.C \\\n\n#test2007_55.C \\\n\n#test2007_56.C \\\n\n#test2007_57.C \\\n\n#test2007_59.C \\\n\n#test2007_62.C \\\n\n#test2007_70.C \\\n\n#test2007_72.C \\\n\n#test2007_75.C \\\n\n#test2007_77.C \\\n\n#test2007_78.C \\\n\n#test2007_81.C \\\n\n#test2007_82.C \\\n\n#test2007_83.C \\\n\n#test2007_84.C \\\n\n#test2007_85.C \\\n\n#test2007_90.C \\\n\n#test2007_94.C \\\n\n#test2007_98.C \\\n\n#test2007_102.C \\\n\n#test2007_103.C \\\n\n#test2007_128.C \\\n\n#test2007_130.C \\\n\n#test2007_133.C \\\n\n#test2007_135.C \\\n\n#test2007_137.C \\\n\n#test2007_141.C \\\n\n#test2007_142.C \\\n\n#test2007_147.C \\\n\n#test2007_150.C \\\n\n#test2007_160.C \\\n\n#test2008_10.C \\\n\n#test2008_11.C \\\n\n#test_int_lexemes.C \\\n\n#test_int_lexemes_donot_pass.C \\\n\n#test_simple_int.C \\\n\n#test_wchars.C \\\n\n#lexPhase2003_01.C \\\n\n#math.C \\\n\n#inputForLoopLocator.C \\\n\n#X.C\n\n#\n\n#\n\n#\n\n## DQ (8/28/2006): Verified non-working code (some are here because they represent source positions tests)\n\n#TESTCODE_CURRENTLY_FAILING = \n\n#\n\n## test2007_95.C -- broken test case\n\n#\n\n#\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \\\n\n#$(TESTCODE_CURRENTLY_FAILING)\n\n#\n\n#EXTRA_DIST = \n\n#\n\n## Notes on what test codes were removed from this set of tests (often placed in separate directories)\n\n#\n\n#\n\n## File option to accumulate performance information about the compilation\n\n#PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/COMMENT_TESTS_ROSE_PERFORMANCE_DATA.csv\n\n#\n\n#COMMENTS_FROM_ALL_FILES_OPTION = -rose:collectAllCommentsAndDirectives\n\n## COMMENTS_FROM_ALL_FILES_OPTION = \n\n#\n\n##ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export\n\n##ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export $(PERFORMANCE_REPORT_OPTION)\n\n## Suppress all warnings (in EDG: --no_warnings) (in g++: -w)\n\n## ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 2 $(PERFORMANCE_REPORT_OPTION)\n\n#ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0 $(PERFORMANCE_REPORT_OPTION) $(COMMENTS_FROM_ALL_FILES_OPTION)\n\n#\n\n### Include the path to A++ and the transformation specification\n\n#TESTCODE_INCLUDES = -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code\n\n#\n\n## VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes\n\n## VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=yes --error-limit=no --show-reachable=yes\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes --suppressions=$(top_srcdir)/scripts/rose-suppressions-for-valgrind\n\n#\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n## VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n#\n\n## DQ (12/2/2006): This is an alternative to valgrind to test ROSE (from Jeremiah) (does not appear to work properly for me)\n\n## VALGRIND = libtool gdb -batch -x $(srcdir)/../dump_crash_locs.gdb --args\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n## A number of tests require the path to the A++ include directory \n\n## and a number of other tests require a path to the source directory.\n\n## $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n\n#$(TEST_Objects): ../preprocessor\n\n#\tcp $(srcdir)/../Cxx_tests/$(@:.o=.C) .\n\n#\t$(VALGRIND) ../preprocessor $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n\n#\trm -f $(@:.o=.C)\n\n#\n\n#\n\n#\n\n#CURRENT_DIRECTORY = `pwd`\n\n#QMTEST_Objects = ${ALL_TESTCODES:.C=.qmt}\n\n#\n\n## Make rule to build the QMTest database files\n\n## A number of tests require the path to the A++ include directory \n\n## and a number of other tests require a path to the source directory.\n\n## $(QMTEST_Objects): preprocessor $(srcdir)/$(@:.qmt=.C)\n\n#$(QMTEST_Objects): preprocessor \n\n##\t@echo \"Calling QMTEST_Objects rule for Cxx_tests directory: \"\n\n#\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/../preprocessor NULL $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.qmt=.C)\n\n#\n\n## This is a rule to add the current files into a QMTest database\n\n#build_qmtest_database: $(QMTEST_Objects)\n\n##\t@echo \"Building QMTest database using file \"\n\n#\trm -rf QMTest;\n\n#\tmkdir -p QMTest;\n\n#\trm -rf QMTest/*.qmt\n\n#\tmv *.qmt QMTest\n\n#\tcd QMTest; qmtest -D`pwd` create-tdb\n\n#\n\n#run_qm_tests:\n\n#\tcd QMTest; qmtest run -o TestResults.qmr -j4\n\n#\n\n#run_qm_gui:\n\n#\tcd QMTest; qmtest gui\n\n#\n\n#copyFiles:\n\n#\tcp $(srcdir)/*.h $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests\n\n#\tcp $(srcdir)/*.C $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx_tests\n\n#\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's development tests.\"\n\n##  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n##\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@echo \"*******************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/collectAllCommentsAndDirectives_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"*******************************************************************************************************\"\n\n#else\n\n#check-local:\n\n#\t@echo \"\\nDan Quinlan's development tests to collect all comments and CPP directives NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"*********************************************************************************************************************\"\n\n#\t@echo \"************************** make check not run here: configure --enable-dq-developer-tests ***************************\"\n\n#\t@echo \"*********************************************************************************************************************\"\n\n#endif\n\n#\n\n#clean-local:\n\n#\trm -f *.o rose_*.[cC] *.dot *.pdf *~ *.ps *.out X rose_performance_report_lockfile.lock\n\n#\trm -rf QMTest\n\n#\n\n#\n\n#gprof: ../preprocessor $(srcdir)/test2001_11.C\n\n##\tgprof ../preprocessor $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/test2001_11.C\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/collectAllCommentsAndDirectives_tests/Makefile.am" : {
      "ObjectId" : "e8309132c6623fedab1a407cb5884007f8d53213",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "######################################################\n\n# These are C+ testcodes targeting aspects of both C #\n\n# and C++ that can be compiled using a C++ compiler  #\n\n######################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used to testing this makefile and the QMTest software\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/12/2010): This appears to fail under Mac OSX (at least version 10.5).\n",
        "Line" : 653,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# DQ (8/28/2006): Verified non-working code (some are here because they represent source positions tests)\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# test2007_95.C -- broken test case\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Notes on what test codes were removed from this set of tests (often placed in separate directories)\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# COMMENTS_FROM_ALL_FILES_OPTION = \n",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export\n\n#ROSE_FLAGS = -rose:verbose 2 --edg:restrict --edg:export $(PERFORMANCE_REPORT_OPTION)\n\n# Suppress all warnings (in EDG: --no_warnings) (in g++: -w)\n\n# ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 2 $(PERFORMANCE_REPORT_OPTION)\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Include the path to A++ and the transformation specification\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes\n\n# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=yes --error-limit=no --show-reachable=yes\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (12/2/2006): This is an alternative to valgrind to test ROSE (from Jeremiah) (does not appear to work properly for me)\n\n# VALGRIND = libtool gdb -batch -x $(srcdir)/../dump_crash_locs.gdb --args\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n",
        "Line" : 707,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\tcp $(srcdir)/../../CompileTests/Cxx_tests/$(@:.o=.C) .\n",
        "Line" : 711,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Make rule to build the QMTest database files\n\n# A number of tests require the path to the A++ include directory \n\n# and a number of other tests require a path to the source directory.\n\n# $(QMTEST_Objects): preprocessor $(srcdir)/$(@:.qmt=.C)\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t@echo \"Calling QMTEST_Objects rule for Cxx_tests directory: \"\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 728,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\tgprof ../preprocessor $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/test2001_11.C\n",
        "Line" : 762,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/preinclude_tests/CMakeLists.txt" : {
      "ObjectId" : "dfed5958385094c37cb322cb8b570d514e80ea2d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n##bin_PROGRAMS = copyExample\n\n#\n\n##copyExample_SOURCES = copyExample.C\n\n##copyExample_DEPENDENCIES = $(ROSE_LIBS_WITH_PATH)\n\n#\n\n#\n\n#TESTCODES_REQUIRED_TO_PASS = test_preinclude.C\n\n#\n\n#TESTCODE_CURRENTLY_FAILING =\n\n#\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS)\n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \\\n\n#$(TESTCODE_CURRENTLY_FAILING)\n\n#\n\n## ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n\n#ROSE_FLAGS = -rose:verbose 0 --edg:restrict\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n## DQ (1/13/2009): The GNU option is \"-include\" not \"--include\"\n\n#$(TEST_Objects): ../preprocessor $(srcdir)/$(@:.o=.C)\n\n#\t@echo \"Calling Copy AST mechanism using TEST_Objects rule: \"\n\n#\t$(VALGRIND) ../preprocessor $(ROSE_FLAGS) -include $(srcdir)/test_preinclude_1.h -c $(srcdir)/$(@:.o=.C) &\n\n##\t$(VALGRIND) ../preprocessor $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C)\n\n#\n\n#QMTEST_Objects = ${ALL_TESTCODES:.C=.qmt}\n\n#\n\n## Make rule to build the QMTest database files\n\n#CURRENT_DIRECTORY = `pwd`\n\n#$(QMTEST_Objects): ../preprocessor $(srcdir)/$(@:.qmt=.C)\n\n#\t@echo \"Calling QMTEST_Objects rule: \"\n\n#\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/../preprocessor NULL $(ROSE_FLAGS) -c $(srcdir)/$(@:.qmt=.C)\n\n#\n\n## This is a rule to add the current files into a QMTest database\n\n#build_qmtest_database: $(QMTEST_Objects)\n\n##\t@echo \"Building QMTest database using file \"\n\n#\trm -rf QMTest;\n\n#\tmkdir QMTest;\n\n#\trm -rf QMTest/*.qmt\n\n#\tmv *.qmt QMTest\n\n#\tcd QMTest; qmtest -D`pwd` create-tdb\n\n#\n\n#run_qm_tests:\n\n#\tcd QMTest; qmtest run -o TestResults.qmr -j4\n\n#\n\n#run_qm_gui:\n\n#\tcd QMTest; qmtest gui\n\n#\n\n#EXTRA_DIST = test_preinclude_1.h\n\n#\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's development tests for ROSE preinclude mechanism.\"\n\n##  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n##\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@echo \"***********************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/preinclude_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"***********************************************************************************************************\"\n\n#else\n\n#check-local:\n\n#\t@echo \"\\nDan Quinlan's preinclude commandline option development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"********************************************************************************************************\"\n\n#\t@echo \"******************** make check not run here: configure --enable-dq-developer-tests ********************\"\n\n#\t@echo \"********************************************************************************************************\"\n\n#endif\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/preinclude_tests/Makefile.am" : {
      "ObjectId" : "a3a5a5bd643bd7c60e8f704c17b03dbb02ebbb11",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (1/13/2009): The GNU option is \"-include\" not \"--include\"\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is a rule to add the current files into a QMTest database\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\t@echo \"Building QMTest database using file \"\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testCpreprocessorOption/Makefile.am" : {
      "ObjectId" : "ca8cf09ec36ab334f7f3b58c8d293e11c14c414f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/tests/nonsmoke/functional/CompilerOptionsTests/A++Code -I$(srcdir)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (12/5/2007): A++ does not compile with g++ version 4 and greater so the source\n\n# code has been modified to skip the code when #if ( (__GNUC__ == 3) && (__GNUC_MINOR__ <= 4) )\n\n## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#     abstract_op.C error_checking.C index_operator_notemplates.C lazy_statement.C \\\n#     new_operators_notemplates.C descriptor_cache.C lazy_aggregate.C \\\n#     lazy_task.C static_initialization.C comm_man.C descriptor_notemplates.C \\\n#     lazy_expression.C lazy_taskset.C index.C lazy_operand.C \\\n#     lazyarray.C where.C partitioning.C domain.C array_notemplates.C\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# codes used to isolate bugs (not very interesting)\n\n# testUnparser.C findNullBlockInEDG.C\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Files which don't compile (but used to do so) (this has been isolated as test2001_23.C)\n\n# f_op_all.C i_op_all.C d_op_all.C\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n# ROSE_FLAGS = -rose:test 6\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# PL (4/15/2014) include syntax uses system header file\n\n# this test has fail because -I has incorrect header file assigned.\n\n# ! at the beginning will negate the FAILED condition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# PL (4/14/2014) include syntax uses user header file\n\n# this test has to pass.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Test the -E option with all of these example files\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# tps : (01/21/2010) Cannot get this to work. Need Liao to take a look at this\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testFileNamesAndExtensions/Makefile.am" : {
      "ObjectId" : "11fda192a6bf6c9a24b2e9d82937993550b9b31e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# Tests for various file name extensions.\n\n########################################################################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rather than play escaping tricks with make and the shell, we replace the special characters with non-special\n\n# characters and then insert the special characters at the very last second in the translator. For instance, the name\n\n# \"foo+STAR+bar.c\" expands to \"foo*bar.c\". See translator.C for details since that's where the unescaping happens.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These names have been removed from the following lists for various reasons given here. The reasons are not meant to be\n\n# exhaustive, they're just where we first noticed the problem now that the tests have been rewritten so they actually\n\n# test something (previously the test ran but we never considered the result). [Matzke 2016-05-19]\n\n#   suffix_04.C++\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   suffix_06.CC\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   suffix_08.CP\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   suffix_10.CPP\t\tROSE: terminate called after throwing an instance of 'SgAsmExecutableFileFormat::FormatError'\n\n#   suffix_12.CXX\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   suffix_13.i\t\t\tROSE: terminate called after throwing an instance of 'SgAsmExecutableFileFormat::FormatError'\n\n#   suffix_14.I\t\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   suffix_15.ii\t\tROSE: terminate called after throwing an instance of 'SgAsmExecutableFileFormat::FormatError'\n\n#   suffix_16.II\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   suffix_17.h\t\t\tROSE: terminate called after throwing an instance of 'SgAsmExecutableFileFormat::FormatError'\n\n#   suffix_18.H\t\t\tROSE: terminate called after throwing an instance of 'SgAsmExecutableFileFormat::FormatError'\n\n#   suffix_19.hh\t\tROSE: terminate called after throwing an instance of 'SgAsmExecutableFileFormat::FormatError'\n\n#   suffix_20.HH\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   dot.\t\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   no_suffix\t\t\tgcc-4.8: file format not recognized; treating as linker script\n\n#   test_empty_cplusplus_file.C removed: this is not testing file names but rather content, so doesn't belong here\n\n#   test_empty_c_file.c         removed: this is not testing file names but rather content, so doesn't belong here\n\n#   most long name tests\tremoved: these exceeded OS name length limits and some tested file content\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input file names with lower-case extensions suitable for compilation with a C++ compiler.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Input file names with lower-case extensions suitable for compilation with a C (or C++) compiler.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Input file names with upper-case extensions suitable for compilation with a C++ compiler.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Input file names with upper-case extensions suitable for compilation with a C (or C++) compiler.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Strange names suitable for compilation with a C (or C++) compiler. See comment above about escapes.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Strange paths suitable for compilation with a C (or C++) compiler. See comment above about escapes.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Specimens whose names are long and which are suitable for compilation with a C (or C++) compiler. See comment above\n\n# about escapes.  These should be shorter than the filesystem name and path length limits. Remember to also include the\n\n# length of generated names, such as adding \"rose_\" to the front of a name.  Some limits are:\n\n#\n\n#   Filesystem\t\tMax name length\t\t\tMax path length (*1)\n\n#  ------------------- ------------------------------  ----------------------------\n\n#   NTFS (Windows)\t255 characters\t\t\t32767 unicode characters\n\n#   HFS Plus (OS X)\t255 UTF-16 characters\t\tunlimited\n\n#   UFS1 & 2 (BSDs)\t255 bytes\t\t\tnot defined\n\n#   ext 1-4 (Linux)\t255 bytes\t\t\tnot defined\n\n#   Lustre (SCF/OCF)\t255 bytes\t\t\tnot defined\n\n#   GPFS (IBM)\t\t255 UTF-8 codepoints\t\tnot defined\n\n#   GFS (Linux)\t\t255\t\t\t\tnot defined\n\n#   ReiserFS (Linux)\t255 characters\t\t\tnot defined\n\n#   Reiser4\t\t3976 bytes\t\t\tnot defined\n\n#   ZFS\t\t\t255 bytes\t\t\tnot defined\n\n#   Btrfs (Linux)\t255 bytes\t\t\tnot defined\n\n#  ------------------- ------------------------------  ----------------------------\n\n#  Footnotes:\n\n#    *1: The on-disk representation often supports paths that can be longer than the limit imposed by the operating system.\n\n#        For instance, the path length limit on Linux is 4096 characters.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Combine all the specimens into two categories: those which can be compiled only with C++ (which fail if a C compiler\n\n# is used), and those which can be compiled by either a C or a C++ compiler.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create two lists of test targets: targets for specimens that can be compiled with either C or C++, and targets for\n\n# specimens that can only be compiled with C++.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Rules for building the test targets.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################################################################\n\n# Standard automake boilerplate\n\n########################################################################################################################\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Watch out for strange characters in these names.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testForSpuriousOutput/Makefile.am" : {
      "ObjectId" : "1528f48ec46f5a2b0288fdd55cc3589f9f90c6b1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(srcdir) \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n\n# TESTCODES = testSpuriousOutput_1.C testSpuriousOutput_2.C\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (7/24/2018): Test for output spew from multiple files on the same command line (different files having the same function prototype).\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (7/24/2018): Test for output spew from multiple files on the same command line.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Liao 2/9/2011. There are warnings for Mac OS X right now\n",
        "Line" : 68,
        "CharPositionInLine" : 15
      },
      "7" : {
        "Text" : "# Test the -E option with all of these example files\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testGenerateSourceFileNames/Makefile.am" : {
      "ObjectId" : "fcf4b75476fc9b6d2138145bdeeedbf9db970959",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tThis fails for the Intel icc or icpc compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (10/20/2010): Unclear what shuld be done when using C/C++ only langauge configuration.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (10/20/2010): Unclear what shuld be done when using C/C++ only langauge configuration.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tThis fails for the Intel icc or icpc compiler.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (11/5/2016): Failing test using address sanitizer (will let Robb look into this).\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (10/20/2010): Unclear what shuld be done when using C/C++ only langauge configuration.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tThis fails for the Intel icc or icpc compiler.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (11/5/2016): Failing test using address sanitizer (will let Robb look into this).\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (10/20/2010): Unclear what shuld be done when using C/C++ only langauge configuration.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tThis fails for the Intel icc or icpc compiler.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (11/5/2016): Failing test using address sanitizer (will let Robb look into this).\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testGnuOptions/Makefile.am" : {
      "ObjectId" : "c71d25434ee034d0caf3727f1e1119150e04e818",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TOO (2/18/11): Added to support CC/CXX environment variables when selecting compilers for ROSE.\n\n# Otherwise, $(srcdir)/testOptions.h doesn't expand properly during make distcheck.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\tIf -include is not handled properly by ROSE this will fail.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tSince the default is to search the source file directory, this is not a great test\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tThe default is to search the source file directory, so move the source file to \n\n#\tbe local and specify the path to the include file using -isystem. If -isystem \n\n#\tis not handled properly by ROSE then this test will fail.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testHeaderFileOutput/Makefile.am" : {
      "ObjectId" : "10405bd83b359f97e821c61a777e8fefdc270a0e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code -I$(srcdir) \n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/tests/nonsmoke/functional/CompilerOptionsTests/A++Code -I$(srcdir) \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# codes used to isolate bugs (not very interesting)\n\n# testUnparser.C findNullBlockInEDG.C\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Files which don't compile (but used to do so) (this has been isolated as test2001_23.C)\n\n# f_op_all.C i_op_all.C d_op_all.C\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Restrict to level 6 testing for the moment\n\n# ROSE_FLAGS = -rose:test 6\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Test the -H option with all of these example files\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# test if the input file's path is searched first as an include path\n\n# a conflicting header in another path is provided to catch any possible order problem\n\n# Liao, 5/15/2009\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testIncludeOptions/Makefile.am" : {
      "ObjectId" : "dec7e9d904071eb8a963e9efff898aadb58da607",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (1/13/2009): The GNU option is \"-include\" not \"--include\"\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) -include $(absolute_srcdir)/test_preinclude_1.h -c $(srcdir)/$(@:.o=.C)\n\n#\t$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS) --sys_include $(srcdir)/system_include -I$(srcdir)/include -c $(srcdir)/$(@:.o=.c)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t$(TEST_TRANSLATOR) $(ROSE_FLAGS) --sys_include $(srcdir)/system_include -I$(srcdir)/include -c $(srcdir)/test_include.c\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testOutputFileOption/Makefile.am" : {
      "ObjectId" : "2983615dbd2a5ada3e296746e00ae5de08838c93",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/testWave/Makefile.am" : {
      "ObjectId" : "dea4d05ab9b0374461c5bf7d86da35a7fa96be71",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (2/4/2010): This test code needs to be checked into the ROSE git repository.\n\n#     testR1.C\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tif [ \"`diff $(srcdir)/out/$(@:.o=.c).out $(@:.o=.c).out | wc -l`\" != \"0\" ]; then exit 1; fi\n\n#\tif [ \"`diff $(srcdir)/out/rose_$(@:.o=.c) rose_$(@:.o=.c) | wc -l`\" != \"0\" ]; then exit 1; fi\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tIt is not helpful to have Boost version dependent tests in ROSE.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/tokenStream_tests/CMakeLists.txt" : {
      "ObjectId" : "ba07152fe162a127480b9f55f025ace8d3822f0f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n###################################################################################\n\n## These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n###################################################################################\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS \n\n#\n\n#if ROSE_USE_BOOST_WAVE\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES) -I$(srcdir)/../colorAST_tests\n\n#\n\n## This is a shorted list that tests more quickly.\n\n#TESTCODES_REQUIRED_TO_PASS = \\\n\n#inputCode_main.C \n\n#\n\n#TESTCODES_CURRENTLY_FAILING = \n\n#\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS)\n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \\\n\n#$(TESTCODES_CURRENTLY_FAILING)\n\n#\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n## VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n#ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0\n\n#\n\n#$(TEST_Objects): main\n\n#\techo \"Copy the file to build a second one to main ...\"\n\n#\t$(VALGRIND) ./main $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(top_builddir) $(ROSE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.o=.C)\n\n#\n\n#bin_PROGRAMS = main\n\n#\n\n#main_SOURCES = \\\n\n#   main.C\n\n#\n\n## testMain: main\n\n##\t$(VALGRIND) ./main -c $(srcdir)/tests/inputCode_main.C\n\n#\n\n#\n\n#QMTEST_Objects = ${ALL_TESTCODES:.C=.qmt}\n\n#\n\n## Make rule to build the QMTest database files\n\n#CURRENT_DIRECTORY = `pwd`\n\n#$(QMTEST_Objects): main $(srcdir)/$(@:.qmt=.C)\n\n#\t@echo \"Calling QMTEST_Objects rule: \"\n\n##\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/main NULL $(ROSE_FLAGS) -c $(srcdir)/tests/$(@:.qmt=.C)\n\n#\n\n## Include makefile rules specific to QMTest\n\n#include $(top_srcdir)/config/QMTest_makefile.inc\n\n#\n\n## EXTRA_DIST = tests \n\n#\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's development tests for token stream examples.\"\n\n##  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n##\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@echo \"******************************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/astTokenStream_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#\n\n#endif\n\n#\n\n#else\n\n#check-local:\n\n#\t@echo \"\\nDan Quinlan's Token Stream Mapping to AST development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"******************************************************************************************************\"\n\n#\t@echo \"******************* make check not run here: configure --enable-dq-developer-tests *******************\"\n\n#\t@echo \"******************************************************************************************************\"\n\n#endif\n\n#\n\n#clean-local:\n\n#\trm -f *.o rose_*.[cC] *.dot test200?_*.[cC]\n\n#\trm -rf QMTest\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/CompilerOptionsTests/tokenStream_tests/Makefile.am" : {
      "ObjectId" : "d780620fe6e4923bc97338185cb9bf67b0d29296",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# These are C testcodes targeting aspects of C that might not be a subset of C++ #\n\n##################################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ROSE_USE_BOOST_WAVE\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is a shorted list that tests more quickly.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\t$(VALGRIND) ./main $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(top_builddir) $(ROSE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.o=.C)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# testMain: main\n\n#\t$(VALGRIND) ./main -c $(srcdir)/tests/inputCode_main.C\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make rule to build the QMTest database files\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/main NULL $(ROSE_FLAGS) -c $(srcdir)/tests/$(@:.qmt=.C)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include makefile rules specific to QMTest\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# EXTRA_DIST = tests \n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n#\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# endif\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "tests/nonsmoke/functional/Makefile.am" : {
      "ObjectId" : "a37adb27fa3d564bc3963770ca32c0a2310cd662",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (4/17/2010): If we are not supporting C++ then we can't run most of our tests, but if \n\n# we are supporting only Fortran then we can at least run the Fortran tests (same with PHP).\n\n# SUBDIRS = CompileTests roseTests RunTests PerformanceTests CompilerOptionsTests translatorTests\n\n# SUBDIRS = CompileTests roseTests\n\n# SUBDIRS += . UnitTests CompileTests\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (10/21/2016): Change order of tests (don't test current directory first).\n\n# SUBDIRS += . CompileTests UnitTests \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# JP (10/3/14): In order to be able to run the unit tests, we want to build the test support,\n\n# this includes google test as well as our own header, providing some necessary helper functions\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if !ROSE_USE_INSURE\n\n# DQ (4/23/2011): Ignoring this whole directory might be over kill. But I have had problems, \n\n# only on Hudson, just compiling a number of these subdirectories.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#endif\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (10/21/2016): Change order of tests (Utility directory test should go after language tests).\n\n########################################################################################################################\n\n# Utility functions\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########################################################################################################################\n\n# Rose::BinaryAnalysis\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# There are failing tests here (94 tests pass and 55 tests fail).\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "########################################################################################################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Three phases (levels) of test programs:\n\n#  Phase 1) Analysis only, compiles the original code\n\n#  Phase 2) Analysis and code generation, compiles the original code\n\n#  Phase 3) analysis, code generation, and compiling the generated code\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  Non-installed programs\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (1/16/2012): This test code is not supported when compiling for simple front-end testing (smallest subset of ROSE that can be built).\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Phase 0 tests code:\n\n# This is a test of the EDG and OFP parser support. No significant part of ROSE is generated.\n\n# A bit of the infrastructure of ROSE is tested that sets up work to build the ROSE AST, etc.\n\n# This test only works with C/C++ and Fortran.  Not clear what it means for the binary, \n\n# which has its own options for skipping different phases.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This test code just calls the EDG frontend and then compiles the \n\n# original source file using the backend specified to ROSE.  This is \n\n# useful in evaluating the newer EDG frontend against test codes.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Phase 1 tests code:\n\n# This is used in specialized tests outside of ROSE testing for analysis only of large projects.\n\n# This tests only the ability to read the application, not regenerate the source code and compile it using the backend compiler.\n\n# This test code is used for the testing of ROSE compiling ROSE to support analysis using Compass.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Phase 2 tests code:\n\n# This is used in specialized tests outside of ROSE testing (e.g. intermediate testing of ROSE compiling large projects).\n\n# This test the ability to read the application and generate the source code, but uses the original source code \n\n# with the backend compiler to generate object files or executables.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Phase 3 tests code (used in all internal tests of ROSE; regression tests):\n\n# This tests the ability to read and regnerate the input application and compile it using the backend compiler.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# These tests an option to use frontend specific constant folding or the original expression trees (default is no constnt folding).\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests the ability to generate a compressed binary file representation of the AST.\n\n# This is a special format of the ROSE AST build for performance File I/O (to address the\n\n# requirements of large scale applications and their analysis).\n\n#\n\n# This executable is tested in tests/nonsmoke/functional/roseTests/astFileIO/Makefile.am. I'm not sure why it's tested down there\n\n# instead of here [RPM 2013-09-27].\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This tests the ability to read one or more of the binary AST files generated from the AST write.\n\n#\n\n# This executable is tested in tests/nonsmoke/functional/roseTests/astFileIO/Makefile.am.  I'm not sure why it's tested down there\n\n# instead of here [RPM 2013-09-27].\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# This test the parallel merge of AST files using Cong's threaded implmentation of the merge infrastructure.\n\n#\n\n# This seems to be similar to the version in tests/nonsmoke/functional/roseTests/astFileIO.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# This tests the ability to generate dot file (AST and WholeGraph) for the input application.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# This tests the ability to generate pdf file (AST) for the input application.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This tests the token generation capabilities which are an option in ROSE used to support the \n\n# generation of patches to define transformations of large scale applications.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DQ (9/28/2013): Added support for Aterm graph generation.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Ignores internal ROSE failures, see `rose --help` for info on `-rose:keep_going`\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (7/2/2015): Added test that marks templates to be output with instantiations.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (7/3/2013): Added support to output some pre-defined macro values.\n\n# Program to output predefined relevant macros.\n\n# predefinedMacros_SOURCES = predefinedMacros.C\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# The Stratego and A-Term support is outside of ROSE\n\n# This needs a configure flag so that the location outside \n\n# of ROSE can be easily specificed at configure time.\n\n# ATERM_INCLUDE = -I$(ATERM_INSTALL_PATH)/include\n\n# ATERM_LIB_DIR = $(ATERM_INSTALL_PATH)/lib\n\n# ATERM_INCLUDE = $(ROSE_ATERM_INCLUDE)\n\n# ATERM_LIB_DIR = $(ROSE_ATERM_LIBS)\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Use names set in ROSE/config/Makefile.for.ROSE.includes.and.libs\n\n# AM_CPPFLAGS = $(ROSE_INCLUDES) $(ATERM_INCLUDE)\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# AM_CPPFLAGS = $(ROSE_INCLUDES) --Wl,--no-undefined\n\n# AM_LDFLAGS  = $(ROSE_RPATHS)\n\n# AM_LDFLAGS  = $(ROSE_RPATHS) --Wl,--no-undefined\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# DQ (11/15/2017): Mac OSX can't take the -Wl,--no-undefined as a linker option.\n\n# AM_LDFLAGS  = $(ROSE_RPATHS) -Wl,--no-undefined\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# LDADD       = $(ROSE_LIBS) --Wl,--no-undefined\n\n# LDADD       = $(ROSE_LIBS) --no-undefined\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# ********************************\n\n# *******  Analysis Tests  *******\n\n# ********************************\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\tDQ (4/19/2011): copy $(srcdir)/inputFile.C to intermediate file to avoid collisions in generation of rose_inputFile.C within parallel make.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\t./testAnalysis $(AM_CPPFLAGS) -c $(srcdir)/inputFile.C -o alt_Analysis_inputFile.o\n\n#\t./testAnalysis $(AM_CPPFLAGS) -c inputObjectFileAnalysis.C -o alt_Analysis_inputFile.o\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\t./testAnalysis $(AM_CPPFLAGS) alt_inputFile.o -o alt_inputFile\n\n#\t./testAnalysis $(AM_CPPFLAGS) alt_Analysis_inputFile.o -o testLinkFileAnalysisExecutable\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#\t./testAnalysis -E $(AM_CPPFLAGS) $(srcdir)/inputFile.C\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\t./testAnalysis $(AM_CPPFLAGS) inputFileAnalysis.C -o testExecutableFileAnalysisExecutable\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# ****************************************\n\n# *******  Code Generation Tests  ********\n\n# ****************************************\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\tDQ (4/19/2011): copy $(srcdir)/inputFile.C to intermediate file to avoid collisions in generation of rose_inputFile.C within parallel make.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\t./testCodeGeneration $(AM_CPPFLAGS) -c $(srcdir)/inputFile.C -o alt_CodeGeneration_inputFile.o\n\n#\t./testCodeGeneration $(AM_CPPFLAGS) -c inputObjectFileCodeGeneration.C -o alt_CodeGeneration_inputFile.o\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\t./testCodeGeneration -E $(AM_CPPFLAGS) $(srcdir)/inputFile.C\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\t./testCodeGeneration $(AM_CPPFLAGS) inputFileCodeGeneration.C -o testExecutableFileCodeGenerationExecutable\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# **********************************\n\n# *******  Translator Tests  *******\n\n# **********************************\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\tDQ (4/19/2011): copy $(srcdir)/inputFile.C to intermediate file to avoid collisions in generation of rose_inputFile.C within parallel make.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#\t./testTranslator $(AM_CPPFLAGS) -c $(srcdir)/inputFile.C -o alt_Translator_inputFile.o\n\n#\t./testTranslator $(AM_CPPFLAGS) -c inputObjectFileTranslator.C -o alt_Translator_inputFile.o\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#\t./testTranslator $(AM_CPPFLAGS) alt_Translator_inputFile.o -o testLinkFileTranslatorExecutable\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#\t./testTranslator $(AM_CPPFLAGS) inputFileTranslator.C -o testExecutableFileTranslatorExecutable\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# ************************************\n\n# *******  AST File I/O Tests  *******\n\n# ************************************\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Note: This executable is tested more extensively in tests/nonsmoke/functional/roseTests/astFileIO/Makefile.am [RPM 2013-09-27]\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#\t./testAstFileIO $(AM_CPPFLAGS) -c alt_AstFileIO_inputFile.C -o alt_AstFileIO_inputFile\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# *************************************\n\n# *******  AST File Read Tests  *******\n\n# *************************************\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Note: This executable is tested more extensively in tests/nonsmoke/functional/roseTests/astFileIO/Makefile.am [RPM 2013-09-27]\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Reported failure from Tristan\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# *****************************************\n\n# *******  Token Generation Tests  ********\n\n# *****************************************\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#\tDQ (4/19/2011): copy $(srcdir)/inputFile.C to intermediate file to avoid collisions in generation of rose_inputFile.C within parallel make.\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#\t./testTokenGeneration $(AM_CPPFLAGS) -c $(srcdir)/inputFile.C -o alt_TokenGeneration_inputFile.o\n\n#\t./testTokenGeneration $(AM_CPPFLAGS) -c alt_ObjectFileTokenGeneration_inputFile.C -o alt_TokenGeneration_inputFile.o\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# DQ (74/6/2017): Adding test for the version of identityTranslator that is distributed \n\n# in the exampleTranslators/documentedExamples/simpleTranslatorExamples directory.\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Rule to run all the example translator tests\n\n# test: test_testAnalysis test_testCodeGeneration test_testTranslator test_testAstFileIO testSimpleLinkFileTranslator\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Liao, 4/12/2017 restrict_template_parameter.C will trigger frontend error.\n\n# __minimal_input_code is defined in input_codes/Makefile.for.input.codes\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# DQ (7/2/2015): template test code that marks all template instantiations for output (as a test).\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# This appears to be a bug, in that the executable is not build (ROSE assumes an implicit -c for compile only mode).\n\n#predefinedMacros: testTranslator\n\n#\t./testTranslator $(srcdir)/predefinedMacros.C\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#testPredefinedMacros: predefinedMacros\n\n#\t./predefinedMacros\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Make check rule\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 65
    },
    "tests/nonsmoke/functional/PerformanceTests/A++Tests/Makefile.am" : {
      "ObjectId" : "db388e98a758cccf2c6c9d6f891f4ea51f898424",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Automake options\n\n# AUTOMAKE_OPTIONS = foreign no-dependencies\n\n# srcdir           = @srcdir@\n\n# VPATH            = @srcdir@ \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# common definitions stored in one location\n\n# include ../../config/Makefile.setup\n\n# include ../../config/Makefile.config.in\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#location of BenchmarkBase.h and libBenchmarkBase.a\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# override libs to get rid of MPI libraries\n\n#\n\n# LIBS = -lc\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# AUTOMAKE_OPTIONS = foreign no-dependencies\n\n# ACLOCAL = echo\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# EXTRA_DIST=Makefile.user\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Test of overriding libdir and bin dir so that 'make install' puts stuff\n\n## in correct directory\n\n# libdir = .\n\n# bindir = .\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# set the template repository location to here\n\n#\n\n# CXX_TEMPLATE_REPOSITORY_PATH=.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These test require a working version of the A++/P++ Array Class library.\n\n# This path must have been specified on the command line to the configure command\n\n# For example: configure --with-AxxPxx=/home/dquinlan/ROSE/A++P++Install\n\n# if (ROSE_PERFORMANCE_TESTS && AXXPXX_SPECIFIC_TESTS)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (3/14/2009): I think it is OK to overwrite the LDFLAGS value, but let's not.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## This would be defined to be the value of the _LDADD suffix variables and we want\n\n## to avoid that dependency (since it gets in the way of tests using \"make -n\")\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#######################################################\n\n## additional clean rule for removing Templates.DB in\n\n## all directories.  Note that in the EXAMPLES directories\n\n## the $CXX_TEMPLATE_REPOSITORY_PATH is redefined so that\n\n## only the local repository is removed!\n\n#######################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/nonsmoke/functional/PerformanceTests/Makefile.am" : {
      "ObjectId" : "297d88cab209c7453c3ded70ef192922004ef935",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (9/11/2006): Remove these subdirectories\n\n# SUBDIRS = A++Tests P++Tests\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Removed conditional compilation for ROSE_PERFORMANCE_TESTS\n\n# It seems that a conditional can be use to setup SUB DIRS within Makefile.am\n\n# if ROSE_PERFORMANCE_TESTS\n\n# #  SUBDIRS = BenchmarkBase A++Tests P++Tests\n\n#    SUBDIRS = A++Tests P++Tests\n\n# else\n\n#     # Note the we need the \".\" to make the dist rule work!\n\n#     # SUBDIRS = .\n\n#     SUBDIRS = A++Tests P++Tests\n\n# endif\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SUBDIRS = BenchmarkBase A++Tests P++Tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This alows us to make distributions that could exclude the PerformanceTests directory\n\n# I don't know if this is a good idea but it also allows us to test ROSE without the\n\n# PerformanceTests directory as well.\n\n# DIST_SUBDIRS = $(SUBDIRS)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# clean:\n\n# if ROSE_PERFORMANCE_TESTS\n\n#\tcd BenchmarkBase; $(MAKE) clean;\n\n#\tcd A++Tests; $(MAKE) clean;\n\n#\tcd P++Tests; $(MAKE) clean;\n\n# endif\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/nonsmoke/functional/PerformanceTests/P++Tests/Makefile.am" : {
      "ObjectId" : "910604fde6eb792ee75de399043da1246c24e187",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Automake options\n\n# AUTOMAKE_OPTIONS = foreign no-dependencies\n\n# srcdir           = @srcdir@\n\n# VPATH            = @srcdir@ \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# common definitions stored in one location\n\n# include ../../config/Makefile.setup\n\n# include ../../config/Makefile.config.in\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#location of BenchmarkBase.h and libBenchmarkBase.a\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# override libs to get rid of MPI libraries\n\n#\n\n# LIBS = -lc\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# AUTOMAKE_OPTIONS = foreign no-dependencies\n\n# ACLOCAL = echo\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# EXTRA_DIST=Makefile.user\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Test of overriding libdir and bin dir so that 'make install' puts stuff\n\n## in correct directory\n\n# libdir = .\n\n# bindir = .\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# set the template repository location to here\n\n#\n\n# CXX_TEMPLATE_REPOSITORY_PATH=.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These test require a working version of the A++/P++ Array Class library.\n\n# This path must have been specified on the command line to the configure command\n\n# For example: configure --with-AxxPxx=/home/dquinlan/ROSE/A++P++Install\n\n# if (ROSE_PERFORMANCE_TESTS && AXXPXX_SPECIFIC_TESTS)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (3/14/2009): I think it is OK to overwrite the LDFLAGS value, but let's not.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## This would be defined to be the value of the _LDADD suffix variables and we want\n\n## to avoid that dependency (since it gets in the way of tests using \"make -n\")\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#######################################################\n\n## additional clean rule for removing Templates.DB in\n\n## all directories.  Note that in the EXAMPLES directories\n\n## the $CXX_TEMPLATE_REPOSITORY_PATH is redefined so that\n\n## only the local repository is removed!\n\n#######################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/nonsmoke/functional/RunTests/A++Tests/Makefile.am" : {
      "ObjectId" : "3e77c9a3fb8de6638a749901c62fcd01c507a3ca",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/13/2004): Comment out these tests until we have the A++P++Translator updated\n\n# TESTCODES = test1.C\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CXX = ../../src/rose $(ROSE_FLAGS)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## We don't have to add the A++ header files to the include path since we have placed\n\n## them directly into the test code directory (testing only the compilation with ROSE\n\n## and not the execution!)\n\n## Include the path to A++ and the transformation specification\n\n## AM_CPPFLAGS = -I. -I../.. -I$(top_srcdir)/TESTS/CompileTests/A++Tests -I$(top_srcdir)/include -I$(top_srcdir)/ExamplePreprocessors/A++Preprocessor1999/ArrayTransformationGrammar\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## libTestSource_a_SOURCES = $(TESTCODES)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Name the library we will build\n\n## noinst_LIBRARIES = libTestSource.a\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Run each test with this script (required to get the\n\n## LD_LIBRARY_PATH correct when using shared libraries).\n\n## TESTS_ENVIRONMENT = REDIRECT_OUTPUT_TO='$$program.$$nproc.stdout' REDIRECT_ERRORS_TO='$$program.$$nproc.error' sh ../generalized-serial-run\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## These tests may or may not have assumed the use\n\n## of some environment variables (we have to see)\n\n## TESTS = $(TESTCODES)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ROSE_FLAGS = -rose:test 6\n\n# ROSE_FLAGS = -rose:outputGrammarTreeFiles\n\n# ROSE_FLAGS =\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Use ROSE/ExamplePreprocessors/A++Preprocessor/optimizingArrayPreprocessor instead\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Specify the A++ libraries to be used\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DISTCLEANFILES = $(TESTCODES)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/RunTests/AstDeleteTests/CMakeLists.txt" : {
      "ObjectId" : "322e33174673937b72fd7e580a8296db41a23456",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#TEST_TRANSLATOR = $(top_builddir)/tests/nonsmoke/functional/testTranslator $(ROSE_FLAGS)\n\n#\n\n#bin_PROGRAMS = memoryTranslator\n\n#memoryTranslator_SOURCES = test.C\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n#TESTCODES_REQUIRED_TO_PASS = \\\n\n#      test1.C\n\n#\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS)\n\n#\n\n#TEST_Objects = ${TESTCODES:.c=.o}\n\n#\n\n#\n\n#$(TEST_Objects): memoryTranslator\n\n#\t./memoryTranslator $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.c)\n\n#\n\n#\n\n## This rule is run after automake's internal check rule (which we don't want to use)\n\n#check-local:\n\n#\t@echo \"#################################################\"\n\n#\t@echo \"    Test ROSEs Deleting of nodes                 \"\n\n#\t@echo \"#################################################\"\n\n#\t@$(MAKE) $(TEST_Objects)\n\n#\t@echo \"*****************************************************************************************************************\"\n\n#\t@echo \"*  ROSE/tests/nonsmoke/functional/RunTests/AstDeleteTests: make check rule complete (terminated normally)                           *\"\n\n#\t@echo \"*****************************************************************************************************************\"\n\n#\n\n#\n\n#EXTRA_DIST = $(TESTCODES_REQUIRED_TO_PASS)\n\n#\n\n#clean-local:\n\n#\trm -f *.o test1 *.s rm *.out rose_*.C *.C.pdf *.dot core local_test-isystemOption.C *.dump *.new\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/RunTests/AstDeleteTests/Makefile.am" : {
      "ObjectId" : "d44f14045cbee8243d7e6ae3e6f590d701613f12",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/RunTests/CMakeLists.txt" : {
      "ObjectId" : "f84615ba61f2f9fdfeff3081a12bbd3c149e5bf6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## SUBDIRS = @optional_AxxPxxSpecificTest_subdirs@\n\n## we can't make this @optional_AxxPxxSpecificTest_subdirs@\n\n## since the substitution could be NULL which causes a problem\n\n## for automake generated shell code placed in Makefile.\n\n#\n\n## Comment out P++ tests until they compile properly\n\n## SUBDIRS = A++Tests P++Tests\n\n#SUBDIRS = A++Tests AstDeleteTests\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/CMakeLists.txt" : {
      "ObjectId" : "68bc4cf5194f1bdd19d0e8a0fe4296e815f98056",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/CMakeLists.txt" : {
      "ObjectId" : "2fbaa33bacfd563b68abb5484cc5033366a93267",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: add POP execution tests here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/Makefile.am" : {
      "ObjectId" : "398c45a11488d25f400965542fdc0730e4e59138",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This makefile provides targets for testing ROSE Fortran support.  It is tested by compiling LANL POP, a fortran application,\n\n# and running the resulting \"pop\" executable.  It also runs certain POP source files through a ROSE-based translator,\n\n# compiles that modified copy of POP, and runs its \"pop\" executable.  The output from the two executables is compared (subject\n\n# to certain filter) and if they match then the test has passed.\n\n#\n\n# Some things we had to work around:\n\n#    - NetCDF cannot be compiled into a separate build directory when its source directory is read-only.\n\n#    - The ROSE-based translator needs write permission in the directory containing the input Fortran sources.\n\n#    - Modification of POP is performed in place (i.e., input==output), which renders makefile dependencies a bit complex.\n\n#    - The output from the translator is stored in the current working directory, regardless of the input path.\n\n#\n\n# Problems with previous implementation:\n\n#    - Silent failure if csh was not installed--failure happens later. Resolved by replacing csh scripts.\n\n#    - Translator could not be run in parallel since it was invoked one-at-a-time in a shell script. Resolved by moving\n\n#      translation commands into the makefile and adding more dependencies.\n\n#    - Silent failure when translator failed.  Intentionally not fixed since the translator currently fails on some files (see\n\n#      the target for $(pop_modified_sources).\n\n#\n\n# Some useful targets:\n\n#    - check:     \truns the whole test   (not contained here, but provided by automake)\n\n#    - clean:     \tremoves all test files from this build directory (see clean-local)\n\n#    - netcdf:    \tconfigure, build, and locally install NetCDF\n\n#    - netcdf_modified: modify the local NetCDF installation by adding a couple *.rmod files to the install directory\n\n#    - pop_pristine:\tconfigure a pristine version of POP in preparation for building the \"pop\" executable.\n\n#    - pop_modified:    configure a version of POP that has some source files modified by the ROSE-based translator.\n\n#    - DIR/run/pop:     compile \"pop\" executable, where X is \"pop_pristine_blddir\" or \"pop_modified_blddir\"\n\n#    - X.ans:           run \"pop\" to generate a filtered answer file, where X is \"pristine\" or \"modified\".\n\n#    - compare_answers: filtered comparison of the output from pristine and modified \"pop\" executables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To see commands as they execute, set this to \"-x\"\n\n#SETX=-x\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that these have been modified from their respective distributions by someone prior to me.  It looks like\n\n# build systems have been adjusted to not generate documentation, and who know what else. Unfortunately, those\n\n# changes were never registered with our revision control system, so it might be hard to upgrade. [RPM 2011-05-18]\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Shell code to set up the environment.  If any of these environment variables are already set then that value\n\n# will be kept, otherwise we'll use a sane default.  We generate this as a file because it's used by a bunch of\n\n# other targets.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################################################################\n\n# \t\t\t\t\tNetCDF\n\n###############################################################################################################################\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Builds the NetCDF library required by POP. The library is configured according to the environment variables\n\n# in hudson-environment.sh, which will be created with default values if necessary.  It is currently not possible to\n\n# build NetCDF in a separate build directory when the source directory is read-only. Therefore, we copy the NetCDF\n\n# source directory and add write permission to all files. [Update: It's also apparently not possible to have a build directory\n\n# that's separate from the source directory because doing so fails with certain source files not found by make on at least one\n\n# Hudson platform. RPM 2011-05-18]\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/23/2013): Replaced: \"source $(builddir)/hudson-environment.sh;\" with \"source ./hudson-environment.sh;\"\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Rules to build NetCDF typesizes.rmod and netcdf.rmod and install them into the NetCDF include directory. Note that\n\n# the typesizes.rmod must be built before netcdf.rmod since the latter depends on the former.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################################################################\n\n#\t\t\t\t\tBUILDING LANL POP (pristine and modified)\n\n###############################################################################################################################\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create a Hudson template file for configuring POP.  This file will be copied into POP source directories and\n\n# is generated based on the environment stored in hudson-environment.sh (which will be created with default values\n\n# if necessary).\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# DQ (9/23/2013): Replaced: \"source $(builddir)/hudson-environment.sh;\" with \"source ./hudson-environment.sh;\"\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The pop_pristine and pop_translated targets create POP build directories.  The pristine version contains source\n\n# code directly from the POP distribution (stored in ROSE's src), while the translated version will run certain\n\n# source files through a translator.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (9/23/2013): Replaced: \"source $(builddir)/hudson-environment.sh;\" with \"source ./hudson-environment.sh;\"\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# A pattern rule to generate POP's translated sources.  The old mechanism ignored all failures, so we'll do the same.\n\n# Also, the translator does not allow the F90 sources to be in a read-only directory, so we copy them to a temporary\n\n# location first. (see pop_modified_srcdir_stamp)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This is the list of source files that need to be translated. Some sources depend on others, and that dependency information\n\n# is generated automatically (but triggered manually) and placed in $(srcdir)/rmod_dependencies.  This allows us to run the\n\n# translator in parallel.\n\n#\n\n# The POP modified source rules are written in terms of *.rmod files because the translator does in-place modification of\n\n# the source file. So it's easier to depend on the newly-generated *.rmod files rather than trying to figure out if a source\n\n# file has been modified or not.  In other words, the presence of a *.F90 file doesn't necessarily mean it's been translated,\n\n# the the presence of FOO.rmod means FOO.F90 has been translated.\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Build the \"pop\" executables\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (9/23/2013): Replaced: \"source $(builddir)/hudson-environment.sh;\" with \"source ./hudson-environment.sh;\"\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Run the \"pop\" executables\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# DQ (9/23/2013): Replaced: \"source $(builddir)/hudson-environment.sh;\" with \"source ./hudson-environment.sh;\"\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Compare filtered output from \"pop\" executables\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "###############################################################################################################################\n\n#\t\t\t\t\tautomake rules for all configs\n\n###############################################################################################################################\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Note: netcdf-4.1.1 and pop-distro are directories whose content is not part of ROSE, but which have been downloaded\n\n#       from their respective distribution sites (and perhaps having some local modificatons).  We need to copy _everything_\n\n#       in those directories into the ROSE distribution because NetCDF and POP will be configured and built as part of testing\n\n#       ROSE.\n\n# Note: Specifiying $(netcdf_srcdir) and $(pop_srcidr) in the $(EXTRA_DIST) list does not work, contrary to automake\n\n#       documentation.  When we do that, we get errors about directories not existing (it seems that automake's makefile\n\n#       tries to copy the files before creating the destination directories.  Therefore, we're using the dist-hook to\n\n#       explicitly copy these directories.\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/Makefile.am" : {
      "ObjectId" : "1e665cff06d543b98042d4f6a159556f6b00036e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the main automake file for netCDF. It builds the different\n\n# netcdf directories. Not all directories are built, depending on the\n\n# options selected during configure.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.130 2010/02/05 19:07:21 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This directory stores libtool macros, put there by aclocal.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These files get added to the distribution.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This will go to the man directory and build, if necessary, the\n\n# netcdf-install.txt file, which will be copied into the main\n\n# directory, renamed \"INSTALL\".\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user wants the F77 API this will cause it to be built and\n\n# tested.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Does the user want C API?\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Does the user want to build the V2 API?\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Does the user want C++ API?\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Does the user want to build ncgen/ncdump?\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Does the user want to build the examples?\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# BUILD_C\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Does the user want F90 API?\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Build the new netCDF-4 C++ API?\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Build the opendap client?\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# BUILD_UTILITIES\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Build UDUNITS?\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Build libcf?\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#WIN32=win32\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# This is the list of subdirs for which Makefiles will be constructed\n\n# and run. ncgen must come before ncdump and cxx, because their tests\n\n# depend on it. nf_test depends upon ncgen as well. NC3DAPDIR must be\n\n# built right before LIBSRC_DIR and NC4DAPDIR must be \n\n# built right before LIBSRC4_DIR.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# make test should do the same as make check.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Remove these generated files, for a distclean.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# The nc-config script helps the user build programs with netCDF.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# What needs to go in the binrary dist?\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#BINFILES += include/netcdf.h share/man/man3/netcdf.3 lib/libnetcdf.a   # ROSE POP TEST\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# At Unidata, package up binaries.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# If building the dll on windows, with MingW, this extra target\n\n# # packages the results.\n\n# win32_bin:\n\n# \t@echo 'This netCDF DLL was generated using MingW.' > README_DLL.txt\n\n# \t@echo '' >> README_DLL.txt\n\n# \t@echo './configure --enable-dll --enable-shared --disable-separate-fortram --disable-cxx --disable-f90' >> README_DLL.txt\n\n# \t@echo 'To use the DLL from C, include netcdf.h and set pre-processor macro DLL_NETCDF.' >> README_DLL.txt\n\n# \t@echo 'To use the DLL from Fortran, include netcdf.inc.' >> README_DLL.txt\n\n# \tcd libsrc/.libs\n\n# \tlib /machine:i386 /def:libnetcdf.def\n\n# \tls\n\n# \tcd ../..\n\n# \tcp libsrc/.libs/netcdf.lib .\n\n# \tcp libsrc/netcdf.h .\n\n# \tcp fortran/netcdf.inc .\n\n# \tcp ncgen3/.libs/ncgen3.exe .\n\n# \tcp ncgen/.libs/ncgen.exe .\n\n# \tcp ncdump/.libs/ncdump.exe .\n\n# \tcp libsrc/.libs/libnetcdf-4.dll .\n\n# \tcp libsrc/.libs/libnetcdf.a .\n\n# \tcp libsrc/.libs/libnetcdf.dll.a .\n\n# \ttar -cf win32_dll_$(VERSION).tar netcdf.h libnetcdf-4.dll README_DLL.txt netcdf.inc ncgen3.exe ncgen.exe ncdump.exe netcdf.lib\n\n# \tgzip -f win32_dll_$(VERSION).tar\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# # If building the dll on windows, with Cygwin, using the -mno-cygwin\n\n# # option, this extra target packages the results.\n\n# win32_bin_nocygwin:\n\n# \t@echo 'This netCDF DLL was generated using MingW.' > README_DLL.txt\n\n# \t@echo '' >> README_DLL.txt\n\n# \t@echo './configure --enable-dll --enable-shared --disable-separate-fortram --disable-cxx --disable-f90' >> README_DLL.txt\n\n# \t@echo 'To use the DLL from C, include netcdf.h and set pre-processor macro DLL_NETCDF.' >> README_DLL.txt\n\n# \t@echo 'To use the DLL from Fortran, include netcdf.inc.' >> README_DLL.txt\n\n# \tcp libsrc/netcdf.h .\n\n# \tcp fortran/netcdf.inc .\n\n# \tcp ncgen3/.libs/ncgen3.exe .\n\n# \tcp ncgen/.libs/ncgen.exe .\n\n# \tcp ncdump/.libs/ncdump.exe .\n\n# \tcp libsrc/.libs/cygnetcdf-4.dll libnetcdf-4.dll\n\n# \tcp libsrc/.libs/libnetcdf.a .\n\n# \tcp libsrc/.libs/libnetcdf.dll.a .\n\n# \ttar -cf win32_dll_$(VERSION).tar netcdf.h libnetcdf-4.dll README_DLL.txt netcdf.inc ncgen3.exe ncgen.exe ncdump.exe\n\n# \tgzip -f win32_dll_$(VERSION).tar\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# # If building the dll on windows, with visual studio, this extra\n\n# # target packages the results.\n\n# win32_vs_bin:\n\n# \t@echo 'This netCDF DLL was generated using visual studio.' > README_DLL.txt\n\n# \t@echo '' >> README_DLL.txt\n\n# \t@echo 'To use the DLL from C, include netcdf.h and set pre-processor macro DLL_NETCDF.' >> README_DLL.txt\n\n# \t@echo 'To use the DLL from Fortran, include netcdf.inc.' >> README_DLL.txt\n\n# \tcp libsrc4/netcdf.h .\n\n# \tcp fortran/netcdf.inc .\n\n# \tcp win32/NET/Debug/ncgen.exe .\n\n# \tcp win32/NET/Debug/ncdump.exe .\n\n# \tcp win32/NET/Debug/netcdf.dll .\n\n# \tcp win32/NET/Debug/netcdf.exp .\n\n# \tcp win32/NET/Debug/netcdf.lib .\n\n# \tzip win32_vs_dll_$(VERSION).zip netcdf.h netcdf.dll netcdf.lib netcdf.exp README_DLL.txt netcdf.inc ncgen.exe ncdump.exe\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/cxx/Makefile.am" : {
      "ObjectId" : "bc56a16f8cf1aba95bec48e98f135695c85ea1ef",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n\n# This file builds the C++ interface.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# $Id: Makefile.am,v 1.49 2009/12/08 20:58:10 dmh Exp $\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Here's what the hand-crafted Makefile did to build cxx:\n\n# c++ -c -g -O2 -I../libsrc -I.   -Df2cFortran netcdf.cpp\n\n# c++ -c -g -O2 -I../libsrc -I.   -Df2cFortran ncvalues.cpp\n\n# ar cru libnetcdf_c++.a netcdf.o ncvalues.o\n\n# ranlib libnetcdf_c++.a\n\n# c++ -c -g -O2 -I../libsrc -I.   -Df2cFortran nctst.cpp\n\n# c++ -o nctst -g -O2  nctst.o libnetcdf_c++.a -L../libsrc -lnetcdf \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# nctst creates a simple data file in each format, then uses ncdump to\n\n# create CDL files, which are compared with some reference files\n\n# shipped with the code. tst_failure is a program that is intended to\n\n# fail.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build and run these tests.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the utilities have been built, run these extra tests.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we're building netCDF-4, we need to include netcdf-4 headers, and\n\n# also link to hdf5 libraries.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Point pre-preprocessor to netcdf-4 directory (libsrc4).\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The C++ library depends on the C library.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Link to the netCDF-4, (maybe) the hdf4, the HDF5, and the C++ libraries.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# If the user specified a root location for HDF4, use it.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the user specified a root location for PNETCDF, use it.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NetCDF_4 testing generates some extra cleaning work (so do my kids!)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Run extra netcdf-4 tests, but only if utilities are built.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# See comments in libsrc/Makefile.am about the version number.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 106,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "# Point pre-processor to netcdf-3 directory (libsrc).\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Link to the netCDF-3 library and the C++ library.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The C++ library depends on the C library.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# See comments in libsrc/Makefile.am about the version number.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# These headers will be installed in the users header directory.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This is our output library. \n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Library source.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/cxx4/Makefile.am" : {
      "ObjectId" : "e5b9232f574a280b2c7e681a8b49e9b39e5e3db5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds the new C++-4 interface.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.16 2010/03/30 14:18:26 ed Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Point pre-preprocessor to netcdf-4 directory (libsrc4).\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link to the netCDF-4 and the HDF5 libraries, and the C++ library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#SUBDIRS = d\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# See comments in libsrc/Makefile.am about the version number.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# These headers will be installed in the users header directory.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is our output library. \n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Library source.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Build and run these tests.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Empty file that gets time-stamped after docs are generated\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/examples/C/Makefile.am" : {
      "ObjectId" : "59b20282aae20e97849cd82e7d646655d7dd763e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds the C examples.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.22 2009/12/08 20:58:11 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are the netCDF-3 examples. \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# To build netcdf-4, or not to build netcdf-4, that is the question...\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These are the extra netCDF-4 examples. \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link to the netCDF-4, (optionally) HDF4, and the HDF5 libraries.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 26,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Point pre-processor and linker to netcdf-4 directory (libsrc4).\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for HDF4, use it.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 66,
        "CharPositionInLine" : 5
      },
      "14" : {
        "Text" : "# Link to the netCDF-3 library.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Point pre-processor and linker to netcdf-3 directory (libsrc).\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#USE_NETCDF4\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# These files are created by the tests.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/examples/CDL/Makefile.am" : {
      "ObjectId" : "51a01124d953281d2ca39119c339a8686096de49",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds CDL examples.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.3 2009/05/19 11:56:50 ed Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All we do is run two shell scripts, which create the sample files\n\n# and then compare them with the C versions of the examples.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ship the scripts needed to create the sample files and compare them.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Clean up files created during the process.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/examples/CXX/Makefile.am" : {
      "ObjectId" : "514d2a0cb9be7e95bd77d48e4f61be76facbc623",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds CXX examples.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.20 2009/12/08 20:58:12 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We will need to find the C++ header files.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the header file for netcdf-4.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a root for HDF4, use it.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root for PNETCDF, use it.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Since netCDF-4 is being build, link to the netcdf library in\n\n# ../../libsrc4, also link to HDF5 and HDF5 high-level libraries.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 48,
        "CharPositionInLine" : 5
      },
      "12" : {
        "Text" : "# Include the headers from the netCDF-3 C library.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Link the examples to the C++ and C libraries.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# These are the example programs.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Ship also this script, which compares the output of these C++\n\n# examples with the output of the C examples. The output data files\n\n# are identical.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Here's the source code for the programs.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Run all example programs, plus the do_comps.sh script, which checks\n\n# that all the output files are the same as the C example output\n\n# files.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Cleaning up files created during the process.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/examples/CXX4/Makefile.am" : {
      "ObjectId" : "9c2ed789d773794d1d5b8e187461f26a971cf88c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds CXX examples.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.7 2010/04/09 02:15:05 russ Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We will need to find the C++ header files.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the header file for netcdf-4.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Since netCDF-4 is being build, link to the netcdf library in\n\n# ../../libsrc4, also link to HDF5 and HDF5 high-level libraries.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These are the example programs.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Ship also this script, which compares the output of these C++\n\n# examples with the output of the C examples. The output data files\n\n# are identical.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Here's the source code for the programs.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Run all example programs, plus the do_comps.sh script, which checks\n\n# that all the output files are the same as the C example output\n\n# files.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Cleaning up files created during the process.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/examples/F77/Makefile.am" : {
      "ObjectId" : "d8476ec7f8cf50cda2004b21977b18b5d35f01de",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds F77 examples.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.24 2009/12/08 20:58:13 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link in the fortran convenivence library.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Go to fortran directory for header.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These are the example programs.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a root location for HDF4, use it.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Find netcdf-4 header in libsrc4.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Since netCDF-4 is being build, link to the netcdf library in\n\n# ../../libsrc4, also link to HDF5 and HDF5 high-level libraries.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 60,
        "CharPositionInLine" : 5
      },
      "13" : {
        "Text" : "# Without netcdf-4, go to ../../libsrc for the library.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Here's the source code for the programs.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Run all test programs, plus the do_comps.sh script, which checks\n\n# that all the output files are the same as the C example output\n\n# files.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Cleaning up files created during the process.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/examples/F90/Makefile.am" : {
      "ObjectId" : "703c5fbd0481aec6414cf9b530443827c7db67e0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds F90 examples.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.32 2009/12/08 20:58:14 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tell the compiler where to find the .mod files. The .mod file is\n\n# built, and therefore found in the build directory, not the source\n\n# directory.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Some fortran compilers think your files should not have an .f90\n\n# extension! The value of FCFLAGS_f90 is set in the configure script,\n\n# based on the fortran compiler.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These are the example programs.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Here's the source code for the programs.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Cleaning up files created during the process.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the user specified a root for HDF4, use it.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If the user specified a root for pnetcdf, use it.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since netCDF-4 is being built, link to the netcdf library in\n\n# ../../libsrc4, also link to HDF5 and HDF5 high-level libraries, and\n\n# find netcdf.h in ../../libsrc4.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 73,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# This will cause netCDF-4 versions of the example programs to be\n\n# built.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# How to build the example.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add example to the tests run.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add this test script.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Make sure all the files created by our netcdf-4 tests get cleaned.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#EXTRA_EXAMPLE_TESTS\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Optionally add parallel i/o examples.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# TEST_PARALLEL\n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# NetCDF-4 examples.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 120,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : "# Without netcdf-4, go to ../../libsrc for the library and header.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# This target tells how to build one of the netCDF-4 examples.\n\n# Note old version used sed -i, but -i is not universally recognized\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This target tells how to build one of the netCDF-4 examples.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# This target tells how to build one of the netCDF-4 examples.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Build these test programs.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Make sure the script which compares file outputs is included in the\n\n# dist.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Run all test programs, plus the do_comps.sh script, which checks\n\n# that all the output files are the same as the C example output\n\n# files.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/examples/Makefile.am" : {
      "ObjectId" : "d234ac73e895e4d3589dba9296db697c3779701c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the main automake file for netCDF. It builds the different\n\n# netcdf directories. Not all directories are built, depending on the\n\n# options selected during configure.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.9 2007/06/06 20:26:42 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the user is building the C API, build the C examples.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If the user is building the F77 API, build the F77 examples.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the user is building the F90 API, build the F90 examples.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user is building the C++ API, build the CXX examples.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build the new netCDF-4 C++ API.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build ncgen/ncdump.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# These are the subdirectories that will be built. \n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/f90/Makefile.am" : {
      "ObjectId" : "ca1c0971a0e431f5d3eeb2efc556aafac75c24a2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's netCDF package.\n\n# Copyright 2005-2006, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file controls the building of the fortran 90 API. All testing\n\n# of the F90 API is done in the nf_test directory.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The F90 library is always built as a convenience library. It is\n\n# included by the netCDF-4 library in libsrc4, or the netCDF-3 library\n\n# in libsrc, or the separate fortran library in fortran.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# $Id: Makefile.am,v 1.49 2010/01/25 21:01:08 ed Exp $\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If the user specified a root location for HDF4, use it.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for PNETCDF, use it.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This is the F90 API man page.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This, plus either netcdf4.f90 or netcdf.f90, is the main source.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The file netcdf.f90 includes all of these.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Point the fortran compiler at netcdf-4 directory (libsrc4) and the\n\n# current dir.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Use netcdf4.f90 to build the library.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# These are the extra netCDF-4 F90 source files.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 82,
        "CharPositionInLine" : 5
      },
      "17" : {
        "Text" : "# Point the preprocessor at the netcdf-3 directory (libsrc).\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Use netcdf.f90 to get the library.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Some fortran compilers think your files should not have an .f90\n\n# extension! The value of FCFLAGS_f90 is set in the configure script,\n\n# based on the fortran compiler.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Some fortran compilers change the file names of .mod files to all\n\n# uppercase. Just to be special.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# This is what we are building: a convenience library of F90 functions.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Since these are included from either netcdf.f90 or netcdf4.f90, we\n\n# have to explicitly make sure they make it into the distribution.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/fortran/Makefile.am" : {
      "ObjectId" : "61d94476c8d854ca1e046d0e82b546777866cfa4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## This file controls the building of the fortran convenience library.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.55 2009/12/27 13:24:00 ed Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The F77 API man page.\n\n#man_MANS = netcdf_f77.3     # ROSE POP TEST\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule generates the F77 manpage.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Does the user wants separate fortran libraries? See the comments in\n\n# libsrc/Makefile.am about the version-info number.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Point pre-processor and linker to directory with C lib.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These are the source files for the fortran library.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Tell make to install this as a header file.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The include file and man page are both built by make.\n\n#BUILT_SOURCES = netcdf.inc netcdf_f77.3    # ROSE POP TEST\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tell make to rebuld fortran library if nfconfig.inc has changed\n\n# (it's generated by the configure script from nfconfig.in), or if\n\n# netcdf.inc has changed.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# May need to set this.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# All netCDF-4 F77 functions are in one code file.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Fortran library depends on C library.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#libnetcdff_la_LDFLAGS = $(AM_LDFLAGS) -version-info 5:0:0 -no-undefined\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# BUILD_SEPARATE_FORTRAN\n",
        "Line" : 92,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Find netCDF header file in libsrc4.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# If the user specified a root location for HDF4, use it.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# If the user specified a root location for pnetcdf, use it.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 127,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : "# Find netCDF header file in libsrc.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Fortran library depends on C library.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# BUILD_SEPARATE_FORTRAN\n",
        "Line" : 137,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 139,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# If F90 is built, include it's convenience library.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we are building the dll (under MinGW) then set the correct flags.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#libnetcdff_la_LDFLAGS = += -no-undefined\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# The nfconfig.in file is turned into nfconfig.inc by the configure\n\n# script. The man page is generated on the developers machine for the\n\n# dist.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# These files need to be cleaned up my make.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/Makefile.am" : {
      "ObjectId" : "4ef47276311f2c2957bd2a1fbbea5b0c8021fa95",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's NetCDF CF Library package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the main automake file for the NetCDF CF Library. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.4 2009/07/07 14:02:10 ed Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These files get added to the distribution.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Does the user want to build cfcheck?\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Does the user want to build the docs?\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Does the user want to build the gridspec?\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# What needs to go in the binrary dist?\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# At Unidata, package up binaries.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/cfcheck/Makefile.am" : {
      "ObjectId" : "35bbeff0da81fff119bc216d7840856c43d43a0f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This is part of the libcf library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file handles the building of cfcheck.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ed Hartnett 11/23/06\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# $Id: Makefile.am,v 1.3 2009/09/01 16:56:47 ed Exp $\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find libcf.h here.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 27,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 36,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/doc/Makefile.am" : {
      "ObjectId" : "60b9010b27069b65d79101411969fb2e2df300b0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's NetCDF CF Library package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the automake file for the NetCDF CF Library documentation.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.2 2009/11/19 14:45:54 ed Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get texi2dvi to shut the hell up!\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get lists of the coresponding ps, info, and pdf files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Distributes the ps, info, and pdf files with the distribution.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Automake seems to be broken with respect to generating html\n\n# output. Also it steals the *.html targets, no matter what I do. So\n\n# this cheesy phoney target does the html builds.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This isn't made by all, but tars up everything needed for the website\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/Makefile.am" : {
      "ObjectId" : "d0e16d5f98bff32c00f19807cfddcba2cfb25e64",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/shared/Makefile.am" : {
      "ObjectId" : "dd68216804cbf42629e39fa25fe37d666f00eabc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/shared/mosaic/Makefile.am" : {
      "ObjectId" : "3112a144644aa4300162b4856e23ba561a1d43db",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# tools/shared convenience library.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.3 2009/07/10 12:51:13 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Does the user want to build netCDF-4?\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link to the netCDF-4, (optionally) HDF4, and the HDF5 libraries.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 26,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Point pre-processor and linker to netcdf-4 directory (libsrc4).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 57,
        "CharPositionInLine" : 5
      },
      "12" : {
        "Text" : "# Link to the netCDF-3 library.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Point pre-processor and linker to netcdf-3 directory (libsrc).\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#USE_NETCDF4\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/Makefile.am" : {
      "ObjectId" : "3985d9e00073f37e43d67b4a4ab6090310bfa604",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# These tests must be turned on with --enable-gridspec-file-tests.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/fregrid/Makefile.am" : {
      "ObjectId" : "2bd9755d36850804a0d1e62dc3af4804c9894f17",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# fregrid tool.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.5 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 36,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 45,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/make_coupler_mosaic/Makefile.am" : {
      "ObjectId" : "bf015e2fa60e23fd79e86a393ebf25bbb909b789",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# make_coupler_mosaic tool.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.5 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/make_hgrid/Makefile.am" : {
      "ObjectId" : "e36e06ca32a8afe279806227813d9beb0c58966d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec make_hgrid\n\n# tools.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.6 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 37,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/make_solo_mosaic/Makefile.am" : {
      "ObjectId" : "e10105782ee596664a804e792530737e3993bd0b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# make_solo_mosaic tool.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.4 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 43,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/make_topog/Makefile.am" : {
      "ObjectId" : "681787fbbd7a48c96aa736426945f7f35d8727f6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# make_topog tool.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.6 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/make_vgrid/Makefile.am" : {
      "ObjectId" : "276bf079e4cb31571a5f92d67ad63088582db426",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# make_vgrid tool.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.6 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/river_regrid/Makefile.am" : {
      "ObjectId" : "33bdd815e455d1f6ea71f7fb12bde8b49f771f21",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# river_regrid tool.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.4 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/shared/Makefile.am" : {
      "ObjectId" : "321db9e8b551c7eb9a8804198abd28f5e71438e3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# tools/shared convenience library.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.4 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 39,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/gridspec/tools/transfer_to_mosaic_grid/Makefile.am" : {
      "ObjectId" : "4faa04fcddc00fdf38b84e29e33470b7720188cc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library\n\n## package. Copyright 2009, see the COPYRIGHT file for more\n\n## information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file is in charge of building the gridspec\n\n# transfer_to_mosaic tool.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.5 2009/09/01 16:56:46 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initalize these.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 30,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 39,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libcf/src/Makefile.am" : {
      "ObjectId" : "34e70b092e2a81987ba279d5948b7d17b6b5d11b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's NetCDF CF Library package.\n\n# Copyright 2006, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# THis automake file is in charge of building the src directory.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.8 2010/04/01 19:57:33 ed Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tell automake that libcf.h is a header file we want to install.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test programs will need to link to this library (libcf) and also\n\n# netcdf.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Initalize these.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is our output, the NetCDF CF Library.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#if BUILD_F90\n\n#lib_LTLIBRARIES += libcff.la \n\n#libcff_la_SOURCES = cffcvars.f90\n\n#check_PROGRAMS += tst_f03_file\n\n#tst_f03_file_SOURCES = tst_f03_file.f90\n\n#LDADD += libcf.la \n\n#nodist_include_HEADERS = libcf.mod\n\n#if UPPER_CASE_MOD\n\n#LIBCF.mod: cffcvars.o\n\n#BUILT_SOURCES = LIBCF.mod\n\n#else\n\n#libcf.mod: cffcvars.o\n\n#BUILT_SOURCES = libcf.mod\n\n#endif\n\n# if USE_NETCDF_DIR\n\n# AM_FCFLAGS = @MOD_FLAG@@NETCDFDIR@/include\n\n# else\n\n# AM_FCFLAGS = @MOD_FLAG@../../f90\n\n# endif\n\n# endif # BUILD_F90\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Link to the netCDF-4, (optionally) HDF4, and the HDF5 libraries.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# USE_NETCDF4\n\n# USE_NETCDF_DIR\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add the gridspec functions.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#libcf_la_LIBADD = ../gridspec/shared/mosaic/libshared.la \n\n#libcf_la_LIBADD += ../gridspec/tools/shared/libtoolsshared.la \n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# These linker flags specify libtool version info.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This is the coordinate systems stuff.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# These files are created by the tests.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# EXTRA_DATA_TESTS\n",
        "Line" : 126,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Rule to build Fortran 2003 code.\n\n#cfcvars.o:cfcvsars.f90\n\n#\t$(FC) -c $(AM_FCFLAGS) $(FCFLAGS) -c $? -o $@\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# tst_f03_file.o:tst_f03_file.f90\n\n# \t$(FC) -c $(AM_FCFLAGS) $(FCFLAGS) -c $? -o $@\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libncdap3/Makefile.am" : {
      "ObjectId" : "9afa46fcb763f7a38bcb6baf0f193c61836abb4a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file generates the Makefile to build netCDF-4. The\n\n# generated makefile is not run unless the user selected to build\n\n# netCDF-4.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.31 2010/04/10 20:56:32 dmh Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DRNO Sources\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build convenience library\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# INTERNAL_OCLIB\n",
        "Line" : 81,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# BUILD_DAP\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Clean up. \n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These rule are used if someone wants to rebuild the grammar files.\n\n# Otherwise never invoked, but records how to do it.\n\n# BTW: note that renaming is essential because otherwise\n\n# autoconf will forcibly delete files of the name *.tab.*\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libncdap3/oc/Makefile.am" : {
      "ObjectId" : "9a209674f8fee81ad923340738b20238cf782747",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file generates the Makefile to build netCDF-4. The\n\n# generated makefile is not run unless the user selected to build\n\n# netCDF-4.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.17 2010/04/10 20:56:38 dmh Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Cause C preprocessor to search current and parent directory.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Linker needs to search current directory when building tests.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# OC Sources\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# autoconf persists in removing the bison output unless it is renamed\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Watch out; the gram files must be first\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Normally not invoked unless after maintainer-clean or deliberate deletion\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libncdap4/Makefile.am" : {
      "ObjectId" : "ac303e6aaa965326227aaf99ac64cb9182dc2aaa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\r\n\n# Copyright 2005, see the COPYRIGHT file for more information.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file generates the Makefile to build netCDF-4. The\r\n\n# generated makefile is not run unless the user selected to build\r\n\n# netCDF-4.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.8 2009/12/05 20:46:28 dmh Exp $\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DRNO Sources\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# create convenience library\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#noinst_PROGRAMS = ncd\r\n\n#ncd_SOURCES = ncdump.c vardata.c dumplib.c indent.c nctime.c ncdump.h vardata.h dumplib.h indent.h isnan.h nctime.h cdl.h\r\n\n#ncd_LDADD = libnetcdf.la -lm -lhdf5_hl -lhdf5\r\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# USE_NETCDF4\r\n\n# BUILD_DAP\r\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Clean up.\r\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libsrc/Makefile.am" : {
      "ObjectId" : "c56110fb3504c7c08bf5fdbaeb5a52d5fd9a4a3e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is an automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# THis automake file is in charge of building the libsrc directory.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 2.82 2010/04/11 04:15:36 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The C API man page.\n\n#man_MANS = netcdf.3    # ROSE POP TEST\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This rule generates the C manpage.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These files are part of the netCDF-3 library.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Does the user want to use ffio or posixio?\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# We may have to add to these later.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Does  the user want the V2 API?\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This will create a convenience library for all the netcdf-2\n\n# functions.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is the v2 API source code.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# BUILD_V2\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Define what is being built\n\n# If the user enabled netcdf-4 in the configure, then the netcdf-3\n\n# library will only be built as a non-installing library.\n\n# The noinst libraries are convenience for later DAP and/or netcdf4 builds\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Define library for local test programs to use\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ! USE_NETCDF4\n",
        "Line" : 76,
        "CharPositionInLine" : 5
      },
      "15" : {
        "Text" : "# Define library for local test programs to use\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# USE_CDF4\n",
        "Line" : 81,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 113,
        "CharPositionInLine" : 5
      },
      "21" : {
        "Text" : "# This will cause the netcdf-3 header file to be installed.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Include netcdf-2 convenience library.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# If we are not building separate fortran libraries, then include\n\n# their functions in the C library.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# If F77 is built, include its convenience library. If F90 is built,\n\n# it will already be part of the F77 convenience library.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# !BUILD_SEPARATE_FORTRAN\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Verson for the netcdf-3 library. Don't mess with this number\n\n# lightly!! This is not the same as the netCDF version, it is a\n\n# completely different versioning system for shared library binary\n\n# files, which is used in a specific way by OSs which are using shared\n\n# libraries. Do don't dork around with it or you will break netCDF for\n\n# shared library users, and everyone will be very confused. We are\n\n# starting with 4 because some package distributors (and other users)\n\n# have already build netCDF with shared libraries, and we need to have\n\n# a larger number than any they used.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# If building the DLL on mingw, do some extra stuff. For now, this\n\n# works with netCDF-3 only. (Ed 12/3/6)\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We need extra arguments to produce the def file, which is needed by\n\n# MS tools to create the VC++ import library. Add -avoid-version to\n\n# avoid the version number in the .dll file name. \n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# BUILD_DLL\n",
        "Line" : 156,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 158,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Test the netCDF-3 library.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# If building a DLL, the test program needs to define DLL_NETCDF.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# These files are cleaned on developer workstations (and then rebuilt\n\n# with m4), but they are included in the distribution so that the user\n\n# does not have to have m4.\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# This file is created by the test.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# This tells make how to turn .m4 files into .c files.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/libsrc4/Makefile.am" : {
      "ObjectId" : "16ee21b95166ba61c55c9bea19dbbf3783f2e74c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This automake file generates the Makefile to build netCDF-4. The\n\n# generated makefile is not run unless the user selected to build\n\n# netCDF-4.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.176 2010/04/12 15:34:28 ed Exp $\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build the netcdf.h file depending on whether parallel I/O is being\n\n# used or not.\n\n#netcdf.h: netcdf_base.h\n\n#\tcat @top_srcdir@/libsrc4/netcdf_base.h > netcdf.h\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cause C preprocessor to search current and parent directory.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the user specified a root location for HDF5, use it.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user specified a root location for HDF4, use it.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for pnetcdf, use it.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tell automake that netcdf.h is a header file we want to install.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is our output. The big enchilada.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Our output library will also include contents of the netcdf3\n\n# convenience library.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Include netcdf-2 unless v2 has been turned off..\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Netcdf-4 source.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If we are not building separate fortran libraries, then include\n\n# their functions in the C library.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If F77 is built, include its convenience library. If F90 is built,\n\n# it will also be part of this convenience library.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# !BUILD_SEPARATE_FORTRAN\n",
        "Line" : 88,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# These linker flags specify libtool version info.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# The parallel program is run from a script.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# USE_HDF4_FILE_TESTS\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 135,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# (The above does not include tst_h_converts, which won't work until I\n\n# sort out the MAX_INT problem. - Ed)\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# These linker flags will be applied to all test program compiles.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 152,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Always need to link to hdf5 and zlib.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This header is used by all test programs.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This script will run all the parallel test programs.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Add this if --enable-benchmarks was used.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# BUILD_BENCHMARKS\n",
        "Line" : 176,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# This will run a bunch of the test programs with valgrind, the memory\n\n# checking tool. (Valgrind must be present for this to work.)\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# USE_HDF4\n\n# USE_VALGRIND_TESTS\n",
        "Line" : 184,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Clean up. Each test program creates one data file, with the same\n\n# name as the test program, and either a .h5 or .nc, for \"pure\" HDF5\n\n# files and netCDF-4 files.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# HDF4_FILE_TESTS\n",
        "Line" : 201,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 34
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/nc_test/Makefile.am" : {
      "ObjectId" : "e9ee403d95502767b236f27cef306a7cb88469c4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds and runs the nc_test program, which tests the\n\n# netCDF-3 API for all formats.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.56 2009/12/08 20:58:20 dmh Exp $\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These files are created by the tests.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are the tests which are always run.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These are the source files for the main workhorse test program,\n\n# nc_test. If you pass nc_test, you are doing well.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# These are aptly named test programs.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Does the user want to build netCDF-4?\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Link to the netCDF-4, (optionally) HDF4, and the HDF5 libraries.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 36,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Point pre-processor and linker to netcdf-4 directory (libsrc4).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 76,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "# Link to the netCDF-3 library.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Point pre-processor and linker to netcdf-3 directory (libsrc).\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#USE_NETCDF4\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# If the user asked for large file tests, then add them.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# LARGE_FILE_TESTS\n",
        "Line" : 100,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Set up the tests.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Distribute the .c files so that m4 isn't required on the users\n\n# machine.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Only clean these on mainatiner-clean, because they require m4 to\n\n# regenerate.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This rule tells make how to turn our .m4 files into .c files.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/nc_test4/Makefile.am" : {
      "ObjectId" : "2c422f6f556155f4adbc5b8a00f84bb06b868289",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This is part of the netCDF package.\n\n# Copyright 2005 University Corporation for Atmospheric Research/Unidata\n\n# See COPYRIGHT file for conditions of use.\n\n# \n\n# This entire directory will be skipped, unless the configure script\n\n# is run with --enable-netcdf-4.\n\n#\n\n# $Id: Makefile.am,v 1.64 2010/01/11 19:27:11 ed Exp $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up flags to find libsrc4 version of libnetcdf.a and netcdf.h.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 17,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If the user specified a root for HDF4, use it.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Our test programs and sources...\n\n#check_PROGRAMS = tst_nc_test_file cdm_sea_soundings\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#tst_nc_test_file_SOURCES = tst_nc_test_file.c tests.h\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# LARGE_FILE_TESTS\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# TEST_PARALLEL\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# BUILD_BENCHMARKS\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# This are extra tests that will only be run if netcdf-4 is configured\n\n# with --enable-parallel-tests.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# BUILD_NETCDF4\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 14
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdap_test/Makefile.am" : {
      "ObjectId" : "66be88e983e0c716ce7a412bc6d92f34ee9fb69a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds and runs the nc_test program, which tests the\n\n# netCDF-3 API for all formats.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.32 2009/12/05 20:46:29 dmh Exp $\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link to the netCDF-4 and the HDF5 libraries.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 22,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Point pre-processor and linker to netcdf-4 directory (libsrc4).\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ! USE_NETCDF4\n",
        "Line" : 63,
        "CharPositionInLine" : 5
      },
      "11" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# BUILD_DAP\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Set up the tests; do the .sh first, then .c\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# remote tests are optional\n\n# because the server may be down\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#REMOTE_TESTS\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Do the programmatic tests last; all are part of the remote test set\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Conversion tests\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Need to add subdirs\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdap_test/expected3/Makefile.am" : {
      "ObjectId" : "f2f19de1fc6347b1fcdfe9db3d2895ff7b122807",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is to include the libnc-dap test comparison files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.9 2009/11/20 03:06:32 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdap_test/expected4/Makefile.am" : {
      "ObjectId" : "ac80e3d152785b40fe44fd49ee12cf6a5d9727d2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is to include the libnc-dap test comparison files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.4 2009/11/20 03:06:37 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdap_test/expectremote3/Makefile.am" : {
      "ObjectId" : "55574bb367c2f689d898b402e3d93226c73115a9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is to include the libnc-dap test comparison files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.7 2009/11/22 06:17:54 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdap_test/expectremote4/Makefile.am" : {
      "ObjectId" : "e1ec1e78128bf9858c04ff2584711789ef79735c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is to include the libnc-dap test comparison files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.7 2009/11/22 06:17:54 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdap_test/testdata3/Makefile.am" : {
      "ObjectId" : "e52250102379bc62e82836cea189c163d3003298",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is to include the libnc-dap test comparison files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.7 2009/05/30 21:28:53 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdump/Makefile.am" : {
      "ObjectId" : "f64f8dade2c442ccd0e89ff4845fb551147cd701",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n\n# This file builds and runs the ncdump program.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# $Id: Makefile.am,v 1.141 2010/03/25 20:43:12 dmh Exp $\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These tests are run for both netCDF-4 and non-netCDF-4 builds.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link to the netCDF-4, (optionally) HDF4, and the HDF5 libraries.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 40,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Find netcdf.h in libsrc4.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# NetCDF-4 has some extra tests.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# EXTRA_TESTS\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 95,
        "CharPositionInLine" : 5
      },
      "14" : {
        "Text" : "# Find netcdf.h in libsrc.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Link to netcdf-3 library.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 104,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# This is the program we're building, and it's sources.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Another utility program that copies any netCDF file using only the\n\n# netCDF API\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This is the man page.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# These files all have to be included with the distribution.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Can't run ncgen to generate ctest.c and ctest64.c on cross-compiles.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# CROSS_COMPILING\n",
        "Line" : 153,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# NCGEN4 additions\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdump/cdl4/Makefile.am" : {
      "ObjectId" : "fc3559091736fd7d3458343974bf2443bdcffd10",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is to include the libnc-dap test comparison files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.4 2009/08/13 18:18:45 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncdump/expected4/Makefile.am" : {
      "ObjectId" : "a890b2bb85854f5f65f08211ad277cbe3398b086",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2007, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is to include the libnc-dap test comparison files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.3 2009/08/13 18:18:45 dmh Exp $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These do not exist because they are not run as usual tests\n\n# bigf1.dmp bigf2.dmp bigf3.dmp bigr1.dmp bigr2.dmp bigr3.dmp gfs1.dmp\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncgen/Makefile.am" : {
      "ObjectId" : "968d28bc3b8a0693e0dba3bf901184a1265c66b6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n\n# This file builds and runs the ncgen program.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# $Id: Makefile.am,v 1.48 2010/04/04 19:39:42 dmh Exp $\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build ncgen from the listed sources.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is the man page.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These files all need to be distributed.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This shell script causes ncgen to build a classic and a 64-bit\n\n# offset file from a cdl file shipped with the distribution.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If netcdf4 is built, point at it's directory. \n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link to netcdf-4 library, and the HDF5 libraries.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 45,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This shell script causes ncgen to build a netcdf-4 and netcdf-4\n\n# classic file from a cdl file shipped with the distribution.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The nc4 tests produce these files.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ! USE_NETCDF4\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# These rule are used if someone wants to rebuild ncgenyy.c or ncgentab.c\n\n# Otherwise never invoked, but records how to do it.\n\n# BTW: note that renaming is essential because otherwise\n\n# autoconf will forcibly delete files of the name *.tab.*\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/ncgen3/Makefile.am" : {
      "ObjectId" : "56683fcc3c102d67ebd7fec522c60db3c6d5669b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.\n\n# This file builds and runs the ncgen program.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# $Id: Makefile.am,v 1.45 2010/03/31 18:18:39 dmh Exp $\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build ncgen from the listed sources.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These files all need to be distributed.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This shell script causes ncgen3 to build a classic and a 64-bit\n\n# offset file from a cdl file shipped with the distribution.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The tests produce these files.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This shell script causes ncgen to build a netcdf-4 and netcdf-4\n\n# classic file from a cdl file shipped with the distribution.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The nc4 tests produce these files.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If netcdf4 is built, point at it's directory. \n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Link to the netCDF-4, (optionally) HDF4, and the HDF5 libraries.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 45,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 81,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "# Look for netcdf.h in libsrc.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Link to the netcdf-3 library.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 89,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Here is the sequence of tests that need to be run:\n\n# ./ncgen3 -b -o c0.nc c0.cdl\n\n# ../ncdump/ncdump -n c1 c0.nc > c1.cdl\n\n# *** ncgen3 -b test successful ***\n\n# ./ncgen3 -c -o ctest0.nc c0.cdl > ctest.c && \\\n# cc -o ctest -g  -I../libsrc -I.   -Df2cFortran ctest.c ../libsrc/libnetcdf.a  && \\\n# ./ctest\t&& \\\n# ../ncdump/ncdump -n c1 ctest0.nc > ctest1.cdl\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# *** ncgen3 -c test successful ***\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# This is used if someone wants to rebuild ncgenyy.c or ncgentab.c\n\n# Otherwise never invoked, but records how to do it. Don't forget to\n\n# manually insert #include <config.h> in ncgenyy.c!\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/nctest/Makefile.am" : {
      "ObjectId" : "323fd22a97d48a58d7447ddd67a94df61c7b38a4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005, see the COPYRIGHT file for more information.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds and runs the nctest program, which tests the netCDF\n\n# version 2 interface.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: Makefile.am,v 1.29 2009/12/08 20:58:25 dmh Exp $\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# One of the tests needs the math library for some reason. \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Does the user want netCDF-4?\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Point linker to netcdf-4 directory (libsrc4).\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link to the netCDF-4, (optionally) hdf4, and hdf5 libraries.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 23,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# If the user specified a prefix for the HDF5 library location, use it.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 59,
        "CharPositionInLine" : 5
      },
      "14" : {
        "Text" : "# Link to the netCDF-3 library.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Point to the netCDF-3 directory.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Running nctest results in a file testfile.nc, which is then checked\n\n# to make sure it matches testfile_nc.sav, which was generated under\n\n# precisely controlled conditions at the netCDF Test Facility,\n\n# (located in sub-basement 42 of UCAR Compound 4). testfile_nc.sav was\n\n# generated in a pressurized chamber that exactly simulated the\n\n# atmosphere on the surface of Mars.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Run nctest and the script that compares the output with the\n\n# reference file.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# These are the source files for the nctest program.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# For those who can't remember to type make check instead of make test.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/nf_test/Makefile.am" : {
      "ObjectId" : "b19c82f272d2a30692dcc06d29ce3204728bf12e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## This is a automake file, part of Unidata's netCDF package.\n\n# Copyright 2005-2006, see the COPYRIGHT file for more information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file builds and runs the following: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The nf_test program, which tests the netCDF fortran 77 interface.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The ftest program, which tests the netCDF fortran 77 V2\n\n# interface. (Unless V2 is disabled).\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test programs ftst_vars, ftst_vars2, ftst_vars3, ftst_vars4,\n\n# ftst_vars5, ftst_types, ftst_types2, and ftst_groups, if netCDF-4 is\n\n# enabled.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The tst_f90 and f90tst_vars programs, which tests the netCDF fortran\n\n# 90 interface. (Unless F90 API is disabled).\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# $Id: Makefile.am,v 1.86 2010/01/25 21:01:07 ed Exp $\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The create_fills shell creates the file fills.nc, needed by later\n\n# tests.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# BUILD_UTILITIES\n",
        "Line" : 29,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# nf_test is the main test program. \n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Cleaning up files created during the process.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Did the user build the V2 F77 API? If so, run this test.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# BUILD_V2\n",
        "Line" : 47,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# If building a separate fortran library, include it so the tests can\n\n# find it.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Point pre-processor and linker to directory with C lib.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Some fortran compilers think your files should not have an .f90\n\n# extension! The value of FCFLAGS_f90 is set in the configure script,\n\n# based on the fortran compiler.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Is the user building netCDF-4?\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add these netCDF-4 f77 test programs.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add these netCDF-4 f90 test programs.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This is a netCDF-4 V2 test program.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# BUILD_V2\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# This is the netCDF-4 F90 large file test.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# LARGE_FILE_TESTS\n",
        "Line" : 123,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# This is an f90 benchmark.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#BUILD_BENCHMARKS\n",
        "Line" : 132,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Test parallel I/O.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#f90tst_parallel_fill\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#f90tst_parallel_fill_SOURCES = f90tst_parallel_fill.f90\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# TEST_PARALLEL\n",
        "Line" : 144,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "#BUILD_F90\n",
        "Line" : 146,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Test parallel I/O for F77.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# TEST_PARALLEL\n\n# TEST_F77\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# If the user specified a prefix for the HDF4 library location, use it.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# If the user specified a root for HDF5, use it.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# If the user specified a root location for ZLIB, use it.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# If the user specified a root location for SZLIB, use it.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# If the user specified a root location for pnetcdf, use it.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Find header file in libsrc4 directory.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Include the C library in the link.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# BUILD_C\n",
        "Line" : 209,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# Link to the netCDF-4, (optionally) HDF4, and the HDF5 libraries.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# USE_HDF4\n",
        "Line" : 215,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# not USE_NETCDF4\n",
        "Line" : 222,
        "CharPositionInLine" : 5
      },
      "43" : {
        "Text" : "# Find header file in libsrc directory.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Include the C library in the link.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# not BUILD_C\n",
        "Line" : 233,
        "CharPositionInLine" : 5
      },
      "46" : {
        "Text" : "# BUILD_C\n",
        "Line" : 240,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# USE_NETCDF4\n",
        "Line" : 242,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# This is the fortran v2 test. It depends on the utilities being built\n\n# to generate it's input file.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# BUILD_UTILITIES\n\n# BUILD_V2\n\n#BUILD_C\n",
        "Line" : 258,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# This is the netCDF-3 F90 test.\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Tell make how to turn .m4 files into .F files.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# test_get.F and test_put.f need to be distributed, so that the user\n\n# need not have m4. fills.nc is used by test program ftest.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/udunits/Makefile.am" : {
      "ObjectId" : "c2eb4455b5cf68693c22868c79fc14336917c56a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright 2008, 2009 University Corporation for Atmospheric Research\n\n#\n\n# This file is part of the UDUNITS-2 package.  See the file LICENSE\n\n# in the top-level source-directory of the package for copying and\n\n# redistribution conditions.\n\n#\n\n## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DISTCHECK_CONFIGURE_FLAGS = \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# to accomodate broken HP-UX B.11.00 make(1)\n",
        "Line" : 26,
        "CharPositionInLine" : 9
      },
      "3" : {
        "Text" : "# to accomodate broken HP-UX B.11.00 make(1)\n",
        "Line" : 40,
        "CharPositionInLine" : 9
      },
      "4" : {
        "Text" : "# to accomodate broken HP-UX B.11.00 make(1)\n",
        "Line" : 43,
        "CharPositionInLine" : 9
      },
      "5" : {
        "Text" : "# to accomodate broken HP-UX B.11.00 make(1)\n",
        "Line" : 57,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : "# to accomodate broken HP-UX B.11.00 make(1)\n",
        "Line" : 60,
        "CharPositionInLine" : 9
      },
      "7" : {
        "Text" : "# to accomodate broken HP-UX B.11.00 make(1)\n",
        "Line" : 74,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/udunits/expat/Makefile.am" : {
      "ObjectId" : "fe567ab27411e44a9c169fbe534ab9104a2e3e49",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## The following entries are necessary to stop make(1)s that don't\n\n## understand the .PHONY target from trying to create the given files.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/udunits/lib/Makefile.am" : {
      "ObjectId" : "82c5bd44798b13ee5fc15249bffaf78c5c8717b0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright 2008, 2009 University Corporation for Atmospheric Research\n\n#\n\n# This file is part of the UDUNITS-2 package.  See the file LICENSE\n\n# in the top-level source-directory of the package for copying and\n\n# redistribution conditions.\n\n#\n\n## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#html_DATA = udunits2lib.html\n\n#pdf_DATA = udunits2lib.pdf\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/udunits/lib/xmlFailures/Makefile.am" : {
      "ObjectId" : "ad2cf712cc95b868a332f4afec9b459ef2ab70e8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright 2008, 2009 University Corporation for Atmospheric Research\n\n#\n\n# This file is part of the UDUNITS-2 package.  See the file LICENSE\n\n# in the top-level source-directory of the package for copying and\n\n# redistribution conditions.\n\n#\n\n## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## The following entries are necessary to stop make(1)s that don't\n\n## understand the .PHONY target from trying to create the given files.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/udunits/lib/xmlSuccesses/Makefile.am" : {
      "ObjectId" : "1f58f4454423a22c93bab46d0065207d9568b6f3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright 2008, 2009 University Corporation for Atmospheric Research\n\n#\n\n# This file is part of the UDUNITS-2 package.  See the file LICENSE\n\n# in the top-level source-directory of the package for copying and\n\n# redistribution conditions.\n\n#\n\n## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## The following entries are necessary to stop make(1)s that don't\n\n## understand the .PHONY target from trying to create the given files.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/udunits/prog/Makefile.am" : {
      "ObjectId" : "827ca3b531266a695a4446b8b49cd4acb2818891",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright 2008, 2009 University Corporation for Atmospheric Research\n\n#\n\n# This file is part of the UDUNITS-2 package.  See the file LICENSE\n\n# in the top-level source-directory of the package for copying and\n\n# redistribution conditions.\n\n#\n\n## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#html_DATA = udunits2prog.html\n\n#pdf_DATA = udunits2prog.pdf\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/netcdf-4.1.1/udunits/test/Makefile.am" : {
      "ObjectId" : "4bace0593cf967b2664952b6e1efe3b7ffd96e6b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright 2008, 2009 University Corporation for Atmospheric Research\n\n#\n\n# This file is part of the UDUNITS-2 package.  See the file LICENSE\n\n# in the top-level source-directory of the package for copying and\n\n# redistribution conditions.\n\n#\n\n## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The following rule is executed on the remote system.  Setting\n\n# MAKEFILES to the empty string on the make(1) invocation line appears\n\n# to be necessary due to a bug in the AIX 5.1 make(1).\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following rule starts a single synchronous build process on a remote\n\n# system.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The following rule starts multiple, synchronous build processes on a remote\n\n# system.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# hostname:os:make:cc:config_opts:exit_status\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# to accomodate broken HP-UX B.11.00 make(1)\n",
        "Line" : 89,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : "## The following entries are necessary to stop make(1)s that don't\n\n## understand the .PHONY target from trying to create the given files.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP_OLD/CMakeLists.txt" : {
      "ObjectId" : "2fbaa33bacfd563b68abb5484cc5033366a93267",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: add POP execution tests here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP_OLD/Makefile.am" : {
      "ObjectId" : "18477832cbb74cb91169431915c9a5d7f0515760",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# TOO (4/4/2011): top_builddir is calculated relative to LANL_POP/, but\n\n# the test.sh script is inside the untarred poptest/ directory. Therefore,\n\n# the correct path to the testTranslator would be: \"../$(TEST_TRANSLATOR)\".\n\n#\n\n# HUDSON_LDLIBS should equal exactly \"$(LIBS) -lcurl\" because $(LIBS) must\n\n# be expanded in the poptest Makefiles; not in this Makefile.\n\n#\n\n# Liao, 5/2/2011, save all environment variables into one file to facilitate manual debugging\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/RunTests/FortranTests/Makefile.am" : {
      "ObjectId" : "2cdec3ef6c0164d15f5cbf4f2ac05f07f4892e55",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: add CMakeLists.txt\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/RunTests/Makefile.am" : {
      "ObjectId" : "53bdb2eb4374d8f0b38fb14cdce7123db40be9e2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# SUBDIRS = @optional_AxxPxxSpecificTest_subdirs@\n\n# we can't make this @optional_AxxPxxSpecificTest_subdirs@\n\n# since the substitution could be NULL which causes a problem\n\n# for automake generated shell code placed in Makefile.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Comment out P++ tests until they compile properly\n\n# SUBDIRS = A++Tests P++Tests\n\n#SUBDIRS = . A++Tests AstDeleteTests\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t        -I$(top_srcdir)/src/frontend/SageIII/sageInterface\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# turn off edg warnings such as \"variable x declared but never referenced\" for test input files\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/RunTests/P++Tests/Makefile.am" : {
      "ObjectId" : "f7dfd99e0701e1edf0e065cf9220cef863399c0f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add bugs to this line as they are fixed so that they can be used as test problems\n\n## At least we should not reintroduce these fixed bugs again later.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CXX = ../../src/rose $(ROSE_FLAGS)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## We don't have to add the A++ header files to the include path since we have placed\n\n## them directly into the test code directory (testing only the compilation with ROSE\n\n## and not the execution!)\n\n## Include the path to A++ and the transformation specification\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ROSE_FLAGS = -rose:test 6\n\n# ROSE_FLAGS = -rose:outputGrammarTreeFiles\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use ROSE/ExamplePreprocessors/A++Preprocessor/optimizingArrayPreprocessor instead\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Specify the A++ libraries to be used\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This rule is run after automake's internal check rule (which we don't want to use)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DISTCLEANFILES = $(TESTCODES)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/RunTests/PythonTests/CMakeLists.txt" : {
      "ObjectId" : "fdf94fa2758b4651f885cae53faf90204fb05c1f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO Python tests\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/RunTests/PythonTests/Makefile.am" : {
      "ObjectId" : "1c7fab3228c9282e463bcfa14514ab60fa4a5609",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/RunTests/multigridTest/Makefile" : {
      "ObjectId" : "44ce2a38882f6e54df0b90632e12d5229d3299f5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/UnitTests/Makefile.am" : {
      "ObjectId" : "f46fbe169cf4a8c2bb0b2a48a0822551738f091b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Subdirectories\n\n#------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Global Build Flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# ROSE Dependency\n\n#------------------------------------------------------------------------------\n\n# Ensure librose has been built since our tests will link with it\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Build Targets\n\n#------------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/UnitTests/Rose/Makefile.am" : {
      "ObjectId" : "d63db499ebe6f73dad67334cb45695732a2f6a89",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Subdirectories\n\n#------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Global Build Flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# ROSE Dependency\n\n#------------------------------------------------------------------------------\n\n# Ensure librose has been built since our tests will link with it\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Build Targets\n\n#------------------------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Unit Tests\n\n#------------------------------------------------------------------------------\n\n# MODIFY THIS SECTION TO ADD NEW TESTS:\n\n#\n\n#   1. Add executable name to PASSING_TEST_EXECUTABLES\n\n#   2. Add new <EXECUTABLE>_SOURCES variable listing the executable's source\n\n#------------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/UnitTests/Rose/SageBuilder/Makefile.am" : {
      "ObjectId" : "4387bfff7d74ac2fa60bd35dbcb4d52c1e3e60c1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Subdirectories\n\n#------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Global Build Flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# ROSE Dependency\n\n#------------------------------------------------------------------------------\n\n# Ensure librose has been built since our tests will link with it\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Build Targets\n\n#------------------------------------------------------------------------------\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# BOGUS CHANGE FOR MERGE TESTING\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Unit Tests\n\n#------------------------------------------------------------------------------\n\n# MODIFY THIS SECTION TO ADD NEW TESTS:\n\n#\n\n#   1. Add executable name to PASSING_TEST_EXECUTABLES\n\n#   2. Add new <EXECUTABLE>_SOURCES variable listing the executable's source\n\n#------------------------------------------------------------------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/Utility/Makefile.am" : {
      "ObjectId" : "ebadfd3308e0691da4bae68aa6819d02a60a093a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Forward declarations\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################################################################\n\n# Test BitFlags\n\n########################################################################################################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################################################\n\n# Test that Rose::FileSystem::copyFile works\n\n########################################################################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################################################################\n\n# File name classification functions\n\n########################################################################################################################\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################################################################\n\n# Test file name support\n\n########################################################################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################################################################################################\n\n# Test for directory support (SgDirectory IR node)\n\n########################################################################################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########################################################################################################################\n\n# Tests performance of various graph implementations\n\n########################################################################################################################\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################################################################\n\n# Tests and demonstrates one way to serialize and deserialize a graph\n\n########################################################################################################################\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "########################################################################################################################\n\n# Test asynchronous progress reporting\n\n########################################################################################################################\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "########################################################################################################################\n\n# Test hash functions\n\n########################################################################################################################\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################################################################\n\n# Boilerplate\n\n########################################################################################################################\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "tests/nonsmoke/functional/moveDeclarationTool/Makefile.am" : {
      "ObjectId" : "f1f61f8cb46983cdf4177834bef32479f2df894e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#--------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (12/23/2014): This fails because the normal unparsing (without token unparsing) is failing.\n\n# inputmoveDeclarationToInnermostScope_test2014_26.C\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MOVE_DECLS_TESTCODES_PARTIALLY_SUPPORTED = \n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# identity translator cannot handle them properly  \n\n# 17: shared SgArrayType issue\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#MOVE_DECLS_TESTCODES_PARTIALLY_SUPPORTED_RESULTS = $(addprefix rose_, ${MOVE_DECLS_TESTCODES_PARTIALLY_SUPPORTED})\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#MOVE_MERGE_DECLS_TESTCODES_PARTIALLY_SUPPORTED_RESULTS = $(addprefix rose_v2_, ${MOVE_DECLS_TESTCODES_PARTIALLY_SUPPORTED})\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#   $(MOVE_DECLS_TESTCODES_PARTIALLY_SUPPORTED_RESULTS)                                                                                                                                                                                        \n\n# DQ (12/23/2014): Added tests specific to use of move tool with token-based unparsing.                                                                                                                                                        \n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (11/13/2015): Note that inputmoveDeclarationToInnermostScope_test2015_141.C \n\n# and inputmoveDeclarationToInnermostScope_test2015_133.C only fail when using \n\n# the -rose:merge_decl_assign option.\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (1/19/2018): Failing codes:\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (12/23/2014): Added tests specific to use of move tool with token-based unparsing.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# I add _tokenunparsing- into the names to avoid name collision of targets used by other rules.   \n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#   $(MOVE_MERGE_DECLS_TESTCODES_PARTIALLY_SUPPORTED_RESULTS)\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#$(MOVE_DECLS_DIFF_FILES):$(@:.C.diff=.C)\n\n# rose_v1_input.C\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (6/28/2015): Added additional test using new option: -rose:merge_decl_assign\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Without new option fails for test2015_04.C?\n\n# With new option fails for test2014_12.C\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (8/16/2015): This test demonstrates a recent bug in the token based unparsing caused by a \n\n# fix to support more general recognition of transforamtions of types).\n\n# test2014_12.C demonstrates the first issue.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (11/4/2015): Restrict testing of the token-based unparsing to later versions of GNU compilers (at least initially).\n\n# DQ (11/2/2015): Added token-based unparsing tests using the move-tool to the move_diff_check test rule.\n\n# test both diff cases\n\n# move_diff_check: move_decls_diff_check move_merge_decls_diff_check\n\n# move_diff_check: move_decls_diff_check move_merge_decls_diff_check test_move_decls_with_token_unparsing\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# only move , no merge\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# both move and merge\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# rules for declaration moving tests\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# move_decls_diff_check move_merge_decls_diff_check\n\n# check-local: move_diff_check\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\t@echo \"moveDeclarationTool tests using EDG 4.9 and GNU version 4.9 backend compiler are disabled.\"\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 392,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_9\n",
        "Line" : 395,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 397,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 400,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n\n#\t@echo \"USING_CLANG_COMPILER == true\"\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 407,
        "CharPositionInLine" : 5
      },
      "31" : {
        "Text" : "#\t@echo \"USING_CLANG_COMPILER == false\"\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == true\"\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 413,
        "CharPositionInLine" : 5
      },
      "34" : {
        "Text" : "# This is an unknown compiler.\n\n#\t@echo \"USING_INTEL_COMPILER == false\"\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 416,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n\n#\t@echo \"ROSE_USE_EDG_VERSION_4_9 == false\"\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 427,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 434,
        "CharPositionInLine" : 5
      },
      "40" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 440,
        "CharPositionInLine" : 5
      },
      "42" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 443,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 44
    },
    "tests/nonsmoke/functional/roseTests/CMakeLists.txt" : {
      "ObjectId" : "43a953b3b763a78d41dfe3552d457c0f6009198d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DQ (4/17/2010): These directories are now organized based on what sets of\n\n# languages are enabled in ROSE (including binary analysis).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory (graph_tests)\n\n#add_subdirectory (mergeTraversal_tests)\n\n#add_subdirectory (astLValueTests)\n\n#add_subdirectory (abstractMemoryObjectTests)\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#add_subdirectory (roseHPCToolkitTests)\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# TOO (2/16/2011): Errors with Thrifty (GCC 3.4.4) backend compiler. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TOO (2/17/11): Errors with Tensilica's Xtensa compilers.\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#add_subdirectory (astFileIOTests)\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#add_subdirectory (astInterfaceTests)\n\n#add_subdirectory (astInliningTests)\n\n#add_subdirectory (ompLoweringTests)\n\n#add_subdirectory (programAnalysisTests)\n\n#add_subdirectory (astOutliningTests)\n\n#add_subdirectory (loopProcessingTests)\n\n#add_subdirectory (fileLocation_tests)\n",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#insure\n",
        "Line" : 44,
        "CharPositionInLine" : 14
      },
      "8" : {
        "Text" : "#xtensa\n",
        "Line" : 45,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# gcc 3.4.4\n",
        "Line" : 46,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# C/C++\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#add_subdirectorY(PHPTests)\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# DQ (4/23/2011): At least one of the files (process_cmdline.o) in this\n\n# directory does not seem to compile with Insure++ (it hangs for Hudson, but\n\n# I can't reproduce the problem locally).\n\n# This was not a problem the second time that Insure++ compiled ROSE.\n\n#add_subdirectory (utilTests)\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Binary tests are a current problem for Insure++.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#add_subdirectory(binaryTests)\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/roseTests/Makefile.am" : {
      "ObjectId" : "a4b9874ecea0e4eb0f914ebfe9ef49f52d756900",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (4/17/2010): These directories are now organized based on what sets of languages \n\n# are enabled in ROSE (including binary analysis).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (11/5/2016): Skip these tests when using the address sanitizer since they would \n\n# take SO LONG (at least over an hour for initial testing, I think).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TOO (2/16/2011): Errors with Thrifty (GCC 3.4.4) backend compiler. We can gradually\n\n# enable these tests at a later stage if necessary.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TOO (2/17/11): Errors with Tensilica's Xtensa compilers. \n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  SUBDIRS += astInterfaceTests astInliningTests ompLoweringTests astFileIOTests programAnalysisTests astOutliningTests loopProcessingTests fileLocation_tests\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# !USING_XTENSA_BACKEND_COMPILER\n\n# !USING_GCC_3_4_4_BACKEND_COMPILER\n",
        "Line" : 39,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# ROSE_BUILD_CXX_LANGUAGE_SUPPORT\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# USING_GNU_COMPILER\n",
        "Line" : 44,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# DQ (4/23/2011): At least one of the files (process_cmdline.o) in this directory does not seem \n\n# to compile with Insure++ (it hangs for Hudson, but I can't reproduce the problem locally).\n\n# This was not a problem the second time that Insure++ compiled ROSE.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (8/23/2013): This is a part of SUBDIRS above and is redundant here.\n\n# SUBDIRS += roseHPCToolkitTests utilTests\n\n# SUBDIRS += roseHPCToolkitTests\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/roseTests/PHPTests/Makefile.am" : {
      "ObjectId" : "319ffe8229de5afd966a5199e7552fe872413555",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# runTest\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/roseTests/ROSETTA/Makefile.am" : {
      "ObjectId" : "b96ce0688af6e98c9ad33ab2abc70305c68dfef5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (7/2/2018): Remove this test because it used GTest which sometimes fails when \n\n# running in parallel with Jenkins (rarely, but a point of stability for Jenkins).\n\n# We are unclear why these tests were added (by a student working for us) and they\n\n# are not setup to run in a conventional manner within ROSE (thus the stability issue).\n\n#\t./nodeHierarchyTest\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/roseTests/abstractMemoryObjectTests/Makefile.am" : {
      "ObjectId" : "c2c427ab4e9b9093e2c6c1696407a07c42e0e555",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# memObjectGenerator\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# indexSetTest\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# ObjSetTest;  contributed by Sriram\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/roseTests/astFileIOTests/Makefile.am" : {
      "ObjectId" : "a3871579cde7edde1c57db89d7463d221479eff0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# It makes no sense to install these since some (at least parallelMerge) have hard-coded paths to other executables.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Creates *.binary files which are used as inputs for other tests.  The creation of the *.binary file is itself a test.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use this target if you just want to check creating all the binaries\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test ../../testAstFileRead on a coupld of specific inputs.  The testAstFileRead has the annoying feature that when\n\n# you tell it to read \"foo\" it actually tries to read \"foo.binary\", so we have to jump through some hoops in order to\n\n# pass the correct file names.  We also run the test in a temporary subdirectory since it drops other files that are\n\n# hard to accurately clean up in the makefile (we want to avoid wildcards since that wipes out important files that the\n\n# developer might have sitting around).\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Some tests of ../../testAstFileIO on particular *.binary files generated from files in this source directory\n\n# Same difficulties as for the test_read.passed target.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Tests ../../testAstFileRead on a short list of inputs. Same difficulties as for test_read.passed\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Tests parallelMerge on a short list of inputs from the Cxx_tests directory.\n\n# The parallelMerge executable takes \"foo\" as an argument, but actually reads \"foo.binary\"; hence we need to jump through\n\n# some hoops: parallelMerge_short_arguments are the absolute names of the foo.binary files, but without the \".binary\" part.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Liao 2/9/2011. boost thread_group may have bug on Mac OS X 10.6\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Similar to parallelMerge_short but with a longer list of specimens.\n\n# Must run in a subdir to avoid conflicts with other parallelMerge tests running concurrently.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Liao 2/9/2011. boost thread_group may have bug on Mac OS X 10.6\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# This is a test of the same files used with parallelMerge_medium.passed but run in serial. This is different and usually\n\n# faster for small problems than the singled threaded parallel merge.  Same difficulties apply as for test_read_short.passed.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The output from the following tests build on each other, each reading the output from the previous test to produce\n\n# a new output.  Therefore, we make the tests depend on the output file rather than the usual .passed file (although\n\n# the .passed and .failed files will still be created.\n\n#\n\n# Beware of the strange arguments for testAstFileRead: it takes \"foo\" as an argument, but actually reads \"foo.binary\".\n\n# Same thing applies to the output file name (the last argument).\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Liao 2/9/2011. boost thread_group may have bug on Mac OS X 10.6\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "tests/nonsmoke/functional/roseTests/astInliningTests/Makefile.am" : {
      "ObjectId" : "e1cff22e9deff8a9d73d39a0a2f7b6bd45258766",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# inlineEverything\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The specimens are named so that the number between the \"_\" and next \".\" is the number of function calls that\n\n# we expect this specimen to inline.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2,
      "Errorlog" : "line 51:10 token recognition error at: '\"$$(echo $(notdir $<) |sed --regexp-extended 's/specimen[0-9]+_([0-9]+).*/\\1'\nline 65:84 token recognition error at: '\\1'\nline 84:107 token recognition error at: '\"\\n\\nclean-local:\\n\\trm -f $(TEST_TARGETS)\\n\\trm -f $(TEST_TARGETS:.passed=.failed)\\n\u0000'\n"
    },
    "tests/nonsmoke/functional/roseTests/astInterfaceTests/Makefile.am" : {
      "ObjectId" : "911ce7226f38da827cb5540b51568b11e6ce1365",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Liao, Jan. 9, 2008\n\n# Makefile.am for a set of test AST builders and test input code\n\n#-------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# JP (10/3/14): Added the unit tests subdirectory to be built.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We install a few test programs since they might be useful for external users\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#moveDeclarationToInnermostScope is moved to rose/tools/\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#not for installation\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# VALGRIND = valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list of test SAGE AST builders \n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# moved to rose/tools\n\n#rajaChecker_SOURCES                       = rajaChecker.C\n\n# libsageInterface.la is included in rose.la already?\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Be sure to include proper suffixes, like .C\n\n# TODO: handle side effects when deleting AST nodes\n\n#failing_generatedCodeExamples = rose_inputdeepDelete.C \n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (2/27/2017): Exclude the GNU 4.9 compiler as well (fails on Ubuntu16.04).\n\n# DQ (2/8/2017): This test will sometimes fail on GNU 5.1 and later compilers.\n\n# AST delete is not a core part of ROSE (and the feature needs to be revisited).\n\n# It will pass fine using the 5.1 and 6.1 compilers on my larger memory machine, \n\n# but not on the Jenkins test machines. Exclude for now where using the GNU 5.1 \n\n# and later versions of compilers.\n\n# if !ROSE_USING_GCC_VERSION_LATER_5_1\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Liao 4/6/2017, GCC 4.2.4 has some issue to pass the coverage test\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Liao 8/17/2010\n\n#if USE_ROSE_OPEN_FORTRAN_PARSER_SUPPORT\n\n# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# turn off edg warnings such as \"variable x declared but never referenced\" for test input files\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Many of these tests follow a very regular pattern and can be transformed into a testable command in the same way.  Some\n\n# of these tests originally redirected their stdout and/or stderr to a particular file--we no longer need to do that since\n\n# $(RTH_RUN) automatically does it for all the tests (look in the *.passed or *.failed files) \n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# deepDelete apparently doesn't actually create an output file\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Like group1, except that EXE doesn't follow the pattern\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Like group1, except that EXE doesn't follow the pattern\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Like group1, except FLAGS includes an extra -I\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Like group1, except this is a C, not C++ file (not sure why we're passing CXXFLAGS instead of CFLAGS though)\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Like group1, except capitalization of the target is different\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Like group1, except for target extension and extra FLAGS\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Doesn't produce a C file\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Doesn't produce a C file\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DQ (9/13/2010): I think that we need both levels of if tests else --without-java will not work.\n\n# DQ (3/18/2009): Make this dependent upon if ROSE was configured to use Fortran.\n\n# if ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT \n\n# if ROSE_USE_OPEN_FORTRAN_PARSER\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# interchange the first loop within the input file, interchange depth is 4, lexicographical order is 1.\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Tile the first loop within the input file at depth 3 , tile size is 5\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (9/16/2010): Added this test code to demonstrate problem with adding statments around statments with comments or\n\n# CPP directives attached.\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# There are a lot of different cases that we now test for with the relocation of comments support in the\n\n# removeStatement() function.\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Doesn't produce any output source files\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# MUST keep this up-to-date!!\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# JP (10/4/14): Added the unit tests\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "tests/nonsmoke/functional/roseTests/astInterfaceTests/typeEquivalenceTests/Makefile.am" : {
      "ObjectId" : "898bccbfc9a8604e4e2321c59154ae21799f24c3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/roseTests/astInterfaceTests/unitTests/Makefile.am" : {
      "ObjectId" : "b1b9f6f7dedf707138c6d81a37ec032100081023",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/roseTests/astLValueTests/Makefile.am" : {
      "ObjectId" : "010c4472ac71cf82750344ca891224a5f3693b1c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# testLValues\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/astMergeTests/CMakeLists.txt" : {
      "ObjectId" : "ef918e429702048750ba71bca328d69d9f8ddc65",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/roseTests/astMergeTests/Makefile.am" : {
      "ObjectId" : "3a9b8a2b1b4b8a559caa240bd67bdbf2bd93c414",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# testMerge executable\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# tests of the testMerge executable\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/roseTests/astOutliningTests/Makefile.am" : {
      "ObjectId" : "348326b002f06a9735e63857015848d5618de73e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\t\tPROGRAMS\n\n#########################################################################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# outline (lots of tests later in the makefile)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# injectOutlinePragmas\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# outlineRandom\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# outlineSelection (tests below)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\t\tTEST SPECIMENS\n\n#########################################################################################################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Input specimens local to this directory\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Additional tests using #pragma rose_outline, Liao, 12/17/2008\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (6/23/2011): The test code moreTest3.cpp does not output it's outlined function when we get the name qualification correct.\n\n# However, if the name qualification on the friend declaration is wrong, then the outlined function will be output.  I don't\n\n# understand this, but I think it is a bug in the outlining.  This is consistant with the previous version of ROSE before\n\n# adding the new name qualification support.\n\n# DQ (/27/2011): Outlining test moreTest3.cpp fails with level 2 testing for dangling pointer detection.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (11/14/2017): This is failing and I need to learn the depth of what is the problem for the outlining tests.\n\n# I think I need to work with Liao on this when he is back from vacation.\n\n#\tmoreTest2.cpp\t\t\t\t\n\n#\tmoreTest3.cpp\t\t\t\t\n\n#\tmoreTest4.cpp\t\t\t\t\n\n#\tmoreTest5.cpp\t\t\t\t\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# arithmeticIf.f, bug 166 refer to labels \n\n# column72.f, not present in original makefile [RPM 2013-09-28]\n\n# column80.f, not present in original makefile [RPM 2013-09-28]\n\n# contains1.f90, subprogram in module not supported\n\n# continue.f, not present in original makefile [RPM 2013-09-28]\n\n# doloop2.f , bug 178, shared continue of two loops\n\n# doloop5.f90 bug 183, lack of end for do loops\n\n# format2.f, bug 180, not my problem, test it again when Dan's ready\n\n# implicit.f90, not present in original makefile [RPM 2013-09-28]\n\n# module.f90, similar to the above\n\n# module1.f90, supluous END\n\n# module3.f90, contains in module not supported\n\n# moduleSubprogram.f90 , similar to above\n\n# polygon.cpp: TODO recursively find super classes for a dependent class\n\n# power.f, END SUBROUTINE problem\n\n# print.f, bug 170\n\n# read.f, need label symbol for format field\n\n# read2.f , bug 179, openfortran parser's problem, won't fix\n\n# real8.f bug 168, won't fix\n\n# stop2.f90, comments are attached before a hidden function definition node??\n\n# subroutine1.f, not present in original makefile [RPM 2013-09-28]\n\n# triangle.cpp: TODO AST copy does not support class member across files.\n\n# useModule1.f90 , USE not supported\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Print the names of the currently failing tests to remind someone to look at them\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Input specimens external to our directory\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\t\tTESTS\n\n# These are separated into distinct rules because they run different commands and/or command-line switches; it is no\n\n# longer necessary to separate these based on the language of the specimen (C/C++/F77/F90/etc).\n\n#########################################################################################################################\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Default outlining flags\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DQ (2/6/2009): The last option should be possible to remove...-rose:skipfinalCompileStep\n\n# this flag is used for the files listed within this file: C_TESTCODES_REQUIRED_TO_PASS and CXX_TESTCODES_REQUIRED_TO_PASS\n\n# TODO remove -rose:skipfinalCompileStep when the command line issue is solved\n\n#-rose:outline:temp_variable\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test outlining using the classic scheme\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test outlining in the same file\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test outlining to a separate file\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# shortcut to test new_file\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test outlining to a separate file using dlopen\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Liao, 2019/1/31\n\n# test the new option  -rose:outline:copy_orig_file , which copies input file into a lib source file and append all outlined functions to the single lib source file. This eliminates the need to copy dependent headers and prototypes into the lib source file. \n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# shortcut to test the dlopen feature\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test outlining with default $(OUTLINE_FLAGS) switches\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Outlining tests that don't use any outline-specific switches\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Tests using the -rose:outline:seq 7 switch on the external specimens\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Tests for outlineSelection using -rose:outline:seq 7 -ffixed-line-length-none on  local specimens\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# complex transitional dependent declarations: outlined the first for loop\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\tOTHER TARGETS NOT USED DIRECTLY IN THIS MAKEFILE\n\n#########################################################################################################################\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\tOrder does not appear to matter in the linking.\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\tAUTOMAKE BOILERPLATE\n\n#########################################################################################################################\n\n# a shortcut to test Fortran only\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "tests/nonsmoke/functional/roseTests/astPerformanceTests/CMakeLists.txt" : {
      "ObjectId" : "538db3b260aba85520b00f369184089847d4a3ab",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# testPerformance -- tests how fast the \"new\" operator works\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# rosePerformanceTest\n\n################################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n\n# astThreadedCreation -- creates/deletes nodes with lots of threads\n\n################################################################################\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/roseTests/astPerformanceTests/Makefile.am" : {
      "ObjectId" : "94f087eefe82d60aea23c2d0693f83608a8c0fcc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Don't use the repository in ../src\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Forward declarations\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# testPerformance -- tests how fast the \"new\" operator works\n\n################################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################\n\n# rosePerformanceTest\n\n################################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n\n# astThreadedCreation -- creates/deletes nodes with lots of threads\n\n################################################################################\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################\n\n# Run all tests\n\n################################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/roseTests/astProcessingTests/CMakeLists.txt" : {
      "ObjectId" : "4ecbfd150f2cdf2f5628b73962038785247e638b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# The test programs, how to run them, and on which specimens they should run.\n\n# All information about a particular test is localized to its few contiguous\n\n# lines in this file.\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#---------------------------------------------------------------------------\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#---------------------------------------------------------------------------\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 21
    },
    "tests/nonsmoke/functional/roseTests/astProcessingTests/Makefile.am" : {
      "ObjectId" : "d8b1e1a7ec1d76f2518434eff9bbd805396104b3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# The test programs, how to run them, and on which specimens they should run.  All information about a particular test\n\n# is localized to its few contiguous lines in this makefile.\n\n########################################################################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#TEST_TARGETS += e0_efor2.C.passed\t\t\t## not checked in original makefile\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#TEST_TARGETS += e1_efor3.C.passed\t\t\t## not checked in original makefile\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# createTest is not tested in the original makefile\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Not all targets have support for openmp, so it can't be unconditionally added to the compiler command line.  Also, why are\n\n# we turning on optimizations especially when the user may have requested a different level of optimizations?  Besides,\n\n# how do we even know that the compiler accepts \"-fopenmp\" and \"-O3\" as command-line switches?!\n\n# Therefore, disabling these switches. [Robb Matzke, 2014-10-15]\n\n#strictGraphTest3_LDFLAGS = -fopenmp -O3 \n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "########################################################################################################################\n\n# Automake rules\n\n########################################################################################################################\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "tests/nonsmoke/functional/roseTests/astQueryTests/CMakeLists.txt" : {
      "ObjectId" : "a957bc46bc0d90354e121cc10b515eff63de0600",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/roseTests/astQueryTests/Makefile.am" : {
      "ObjectId" : "e0ed49c0a53b4bce0af44ecbfe58aa4765495ad5",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# These tests were not actually ever executed in the original makefile, so they're marked as disabled.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#test1.passed: test1.conf test1A.C test1B.C  #THESE FILES ARE NOT PART OF ROSE'S SOURCE TREE\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Automake boilerplate\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/roseTests/astRewriteTests/CMakeLists.txt" : {
      "ObjectId" : "bd76baf3618bd5a54c8c8d9805b5dad48492e30c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# the rest of the tests in Makefile.am appeared to be disabled.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/astRewriteTests/Makefile.am" : {
      "ObjectId" : "b712072bc70693f97be56a2f7a84f314cfb96fad",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# broken: inputDeclarationTest.C is not in the ROSE source tree, so we can't have it as a dependency [RPM 2012-09-25]\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#EXTRA_DIST += inputDeclarationTest.C\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (7/19/2005): Uncommented so that we can test it with AST Merge mechanism and fix any other problems.\n\n# DQ (12/6/2004): Note current rewrite mechanism is not working  (even though other tests pass) because the scopes\n\n# of newly generated IR nodes fron the string based AST generation do not have scopes set correctly!\n\n# Also the EDG memory can not be freed for the rewrite system to work!\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Automake boilerplate\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/nonsmoke/functional/roseTests/astSnippetTests/Makefile.am" : {
      "ObjectId" : "09ae08a5cfa65e051fc163a977787dc113d07f1c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###############################################################################################################################\n\n# Executables\n\n###############################################################################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################################################################\n\n# Small C Tests\n\n###############################################################################################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test1*.passed are for injection snippets1.c into specimen1.c in various ways.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test2*.passed are for injection snippets2.c into specimen1.c in various ways.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test3*.passed are for injection snippets3.c into specimen1.c in various ways.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do all the work, but don't actually insert anything (insertion point is \"none\")\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test4*.passed are for injection snippets5.c into specimen1.c in various ways.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test5*.passed are for injection snippets6.c into specimen1.c in various ways.\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test6*.passed are for injection snippets6.c into specimen1.c in various ways.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test7*.passed are for injectioning snippets4 into specimen2 using the storeLoad driver. These tests inject\n\n# two related snippets into the specimen in various ways.\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test8*.passed are for injecting snippets7 into specimen3\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# test9*.passed are for injecting snippets8 into specimen8\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# without copying related things\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###############################################################################################################################\n\n# Small Java Tests\n\n###############################################################################################################################\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava1.passed are for injection Snippets1.java into Specimen1.java in various ways.\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava2.passed are for injection Snippets2.java into Specimen1.java in various ways.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava3*.passed are for injection Snippets3.java into Specimen1.java in various ways.\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava4*.passed are for injection Snippets5.java into Specimen1.java in various ways.\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava5*.passed are for injection Snippets6.java into Specimen1.java in various ways.\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava6*.passed are for injection Snippets7.java into Specimen2.java in various ways.\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava7*.passed are for injection Exotic*.java into Specimen1.java in various ways.\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#----------------------------------------------------------------------------------------------------\n\n# testJava8*.passed are for injections with packages\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# frontend() only, for testing that we can compile the java snippet files as Java source\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# We're having problems parsing SnippetPackage.Snippet3 as a snippet, so make sure we can at least parse it normally. The\n\n# failure is \"/tmp/dir-13971683045770/tmp-1319461204681189217.java:3: error: class Snippet3 is public, should be declared\n\n# in a file named Snippet3.java\", but the code *is* in Snippet3.java. [RPM 2014-04-11]\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This appears to be okay\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This fails, so it's a problem with how the Snippet class parses the snippet file. [RPM 2014-04-11]\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "###############################################################################################################################\n\n# quicksort tests\n\n###############################################################################################################################\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# TEST_TARGETS += quickSortC.passed quickSortJava.passed reverseC.passed reverseJava.passed\n",
        "Line" : 676,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# These use quicksort, but they reverse the injection -- they treat quicksort as the snippet and inject it into\n\n# the \"reverse\" specimen.  The only purpose is to test that we can inject larger, more complex snippets.\n",
        "Line" : 698,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "###############################################################################################################################\n\n# SS_JAVA_CWE tests.  These tests are only run if the \"SS_JAVA_CWES/src\" directory is present under the CWD and it appears to\n\n# contain Java CWE implementations.\n\n###############################################################################################################################\n",
        "Line" : 724,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Top level directory containing the Java CWE packages\n",
        "Line" : 729,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Those subdirectories of $(SS_JAVA_CWD_DIR) that contain CWE implementations\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# All the CWE_*.java files under those package directories.\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Make one test target for each CWE file.  The name of the test target will be the package+class name with dots instead\n\n# of slashes.  For instance, if the SS_JAVA_CWE full name is $(SS_JAVA_CWE_SRCDIR)/Error_Handling/CWE_209/CWE_209_0.java then\n\n# the target will be named \"Error_Handling.CWE_209.CWE_209_0.passed\"\n",
        "Line" : 741,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Some of the CWEs depend on a few support classes that need to be built. Fortunately, the SS_JAVA_CWES.tar file provides\n\n# a makefile.\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Class paths (use \"-classpath PATH1:PATH2:...\" not \"-classpath PATH1 -classpath PATH2 ...\")\n",
        "Line" : 754,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Some help if no SS_JAVA_CWES are present\n",
        "Line" : 757,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Run each test\n",
        "Line" : 770,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# DQ (3/19/2014): We are not ready to test these in the \"make check\" rule (not distributed with ROSE, so can't be run by Jenkins).\n\n# RPM (3/20/2014): To reenable these tests, enable the first line (TEST_TARGETS) and delete the second (MOSTLYCLEANFILES).\n\n# TEST_TARGETS += $(SS_JAVA_TEST_TARGETS)\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "###############################################################################################################################\n\n# Extra, optional snippet tests.  Any .c or .java file that's found in $(srcdir)/ExtraSnippets will treated as a snippet file,\n\n# and all void functions or methods that take no arguments will be treated as snippets.  The snippets will each be inserted\n\n# in turn into its own target specimen.\n\n###############################################################################################################################\n",
        "Line" : 790,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# funky name because *_JAVA is apparently reserved by automake\n",
        "Line" : 820,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "###############################################################################################################################\n\n# DQ (3/2/2014): Extra tests I have to build (these are small enough to be visualized for more detailed debugging):\n\n###############################################################################################################################\n\n# ./injectSnippet --test:snippet=snippet2014_01.foo --test:ipoint-function=foobar --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=no --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_01.c\n\n# ./injectSnippet --test:snippet=snippet2014_03.foo --test:ipoint-function=foobar --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=no --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_03.c\n\n# ./injectSnippet --test:snippet=snippet2014_04.swap --test:ipoint-function=ipoint1 --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=yes --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_04.c\n\n# ./injectSnippet --test:snippet=snippet2014_05.count --test:ipoint-function=ipoint1 --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=yes --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_05.c\n\n# ./injectSnippet --test:snippet=snippet2014_06.print --test:ipoint-function=ipoint1 --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=yes --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_06.c\n\n# ./injectSnippet --test:snippet=snippet2014_07.print --test:ipoint-function=ipoint1 --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=yes --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_07.c\n\n# ./injectSnippet --test:snippet=snippet2014_08.print --test:ipoint-function=ipoint1 --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=yes --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_08.c\n\n# ./injectSnippet --test:snippet=snippet2014_10.c,::storeStructString --test:copy-related-things=no --test:ipoint-function=::ipoint1 --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=yes --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/specimen2014_10.c\n",
        "Line" : 848,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# To run Java:\n\n# ./injectSnippet --test:snippet=$(src_dir)/SnippetGroup1.java,SnippetGroup1.snippet1 --test:ipoint-function=HelloWorld.target1 --test:insert-mechanism=stmts --test:locdecls-position=end --test:recursive=no --test:copy-definitions=no -rose:skipfinalCompileStep $(src_dir)/HelloWorld.java $(src_dir)/SnippetGroup1.java\n",
        "Line" : 860,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#FIXME: These targets all need dependencies, otherwise \"make clean; make local_debug_tests\" will fail. [RPM 2014-03-18]\n",
        "Line" : 863,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# TEST_TARGETS += testJava2014_01.passed \n\n# EXTRA_DIST += SmallSpecimensJava/Snippet2014_01.java SmallSpecimensJava/Specimen2014_01.java\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# DQ: Tests that I can use to vizualize the whole AST (for debugging).\n",
        "Line" : 1055,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "###############################################################################################################################\n\n# Automake boilerplate\n\n###############################################################################################################################\n",
        "Line" : 1058,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "tests/nonsmoke/functional/roseTests/astSymbolTableTests/CMakeLists.txt" : {
      "ObjectId" : "28f24d9e49fd4fb7216997dea2df81064f1dc3db",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/roseTests/astSymbolTableTests/Makefile.am" : {
      "ObjectId" : "47b70666e222b53dee8b77d0139dd3dc5413c2ad",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/astTokenStreamTests/CMakeLists.txt" : {
      "ObjectId" : "61529e6c0f07932bfb672cda34fa29309e075622",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Token representation\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Token Stream Mapping\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test code using -rose:verbose 2 to trigger output of evaluation files (*.c and *.dot files).\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/roseTests/astTokenStreamTests/Makefile.am" : {
      "ObjectId" : "b51b1b932b6e786d56825150875b3794aa4fcef7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Scope matching\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: testScopeMatching was apparently never tested.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Linearization\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Type Transformations\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# testSctestTypeTransformation_SOURCES = testTypeTransformation.C\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Token representation\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (2/28/2015): Failing test with newest token unparsing support (but this version passes new_apps tests).\n\n#  test2012_02.c \n\n#  test2012_30.c \n\n#  test2012_63.c \n\n#  test2012_108.c \n\n#  test2013_40.c \n\n#  test2013_78.c \n\n#  math.c \n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (11/12/2014): Failing test with new leading and trailing edge token unparsing tests.\n\n#    test2013_25.c \n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (3/25/2014): This is a RH5 specific tests (we don't need this test).\n\n# test2012_173.c\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# test2012_17.c and test2012_163.c fail because the recursive macro handling for \"#define sa_handler union_in_X.sa_handler\"\n\n# need to be tunred off when we are able to unparse the original token stream.\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# These test codes fail this token unparsing test.\n\n#     test_multiline_string_01.c \n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# These are identical files but ROSE has to generate backend specific code (e.g. \"restrict\" should be \"__retrict__\"). \n\n#     test2012_19.c \n\n#     test2012_28.c \n\n#     test2012_91.c \n\n#     test2013_17.c \n\n#     test2013_19.c \n\n#     test2013_47.c \n\n#     test2013_48.c\n\n#     complex_01.c \n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (11/11/2014): Note that we need verbose level 1 to internally activate some internal testing that builds the \n\n# output files: token_leading_* and token_trailing_* which are used in the TEST_Mapping_Source_passed tests.\n\n# DQ (12/1/2013): Use verbose level to set force additional token specific files to be generated (tested below).\n\n# ROSE_FLAGS = -rose:C89 -rose:unparse_tokens\n\n# ROSE_FLAGS = -rose:C89 -rose:unparse_tokens -rose:verbose 1\n\n# ROSE_FLAGS = -rose:C89 -rose:unparse_tokens -rose:verbose 0\n",
        "Line" : 1176,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (11/12/2014): If this has not been built yet (as can be the case when Jenkins runs tests in only specific directories)\n\n# then build the test translator using this run in the tests directory.\n",
        "Line" : 1192,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (9/23/2013): Added better control to run tests more cleanly (command-line and any output put into *.passed file, or generates similar *.failed file is testing is unsuccessful).\n",
        "Line" : 1197,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Token Stream Mapping\n",
        "Line" : 1206,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (9/23/2013): Added better control to run tests more cleanly (command-line and any output put into *.passed file, or generates similar *.failed file is testing is unsuccessful).\n",
        "Line" : 1220,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Test code using -rose:verbose 2 to trigger output of evaluation files (*.c and *.dot files).\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 1247,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 1256,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Additional automake targets\n\n# check-local: $(LIN_TEST_TARGETS)\n",
        "Line" : 1264,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\t@$(MAKE) $(LIN_TEST_TARGETS)\n",
        "Line" : 1273,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "tests/nonsmoke/functional/roseTests/fileLocation_tests/CMakeLists.txt" : {
      "ObjectId" : "e6634e1d705bddac2d5f500e84173637a84dd75c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## To keep compile commands tidy, please ONLY put required include flags here.\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS\n\n#\n\n#../preprocessor:\n\n#\tcd ..; $(MAKE) preprocessor\n\n#\n\n#preprocessor: ../preprocessor\n\n#\n\n#bin_PROGRAMS = fileLocation\n\n#\n\n## This transltor output source position info\n\n#fileLocation_SOURCES = fileLocation.C\n\n#\n\n## DQ (8/14/2004) Developer's Note:\n\n## This permits the use of the pair of libraries -lrose -ledg OR the longer \n\n## list of libraries (the later option is much faster for development work).\n\n#\n\n## Turn on GNU Coverage Tool (gcov)\n\n## CXX += -fprofile-arcs -ftest-coverage\n\n#\n\n## This is a shorted list that tests more quickly.\n\n#TESTCODES_REQUIRED_TO_PASS = \\\n\n#test_CplusplusMacro_Cpp.C \\\n\n#test2001_01.C \\\n\n#test2001_02.C \\\n\n#test2001_03.C \\\n\n#test2001_04.C \\\n\n#test2001_05.C \\\n\n#test2001_06.C \\\n\n#test2001_07.C \\\n\n#test2001_08.C \\\n\n#test2001_09.C \\\n\n#test2001_10.C \\\n\n#test2001_11.C \n\n#\n\n## This is only supposed to be a cross section of codes.\n\n#LONG_LIST_TESTCODES_REQUIRED_TO_PASS = \\\n\n#test_CplusplusMacro_Cpp.C \\\n\n#test2001_01.C \\\n\n#test2001_02.C \\\n\n#test2001_03.C \\\n\n#test2001_04.C \\\n\n#test2001_05.C \\\n\n#test2001_06.C \\\n\n#test2001_07.C \\\n\n#test2001_08.C \\\n\n#test2001_09.C \\\n\n#test2001_10.C \\\n\n#test2001_11.C \\\n\n#test2001_12.C \\\n\n#test2001_13.C \\\n\n#test2001_14.C \\\n\n#test2001_15.C \\\n\n#test2001_16.C \\\n\n#test2001_17.C \\\n\n#test2001_18.C \\\n\n#test2001_19.C \\\n\n#test2001_20.C \\\n\n#test2001_21.C \\\n\n#test2001_22.C \\\n\n#test2001_23.C \\\n\n#test2001_24.C \\\n\n#test2001_25.C \\\n\n#test2001_26.C \\\n\n#test2001_27.C \\\n\n#test2001_28.C \\\n\n#test2001_29.C \\\n\n#test2002_01.C \\\n\n#test2003_01.C \\\n\n#test2003_02.C \\\n\n#test2003_03.C \\\n\n#test2003_04.C \\\n\n#test2003_05.C \\\n\n#test2003_06.C \\\n\n#test2003_08.C \\\n\n#test2003_09.C \\\n\n#test2003_10.C \\\n\n#test2003_11.C \\\n\n#test2003_12.C \\\n\n#test2003_13.C \\\n\n#test2003_14.C \\\n\n#test2003_15.C \\\n\n#test2003_16.C \\\n\n#test2003_17.C \\\n\n#test2003_18.C \\\n\n#test2003_19.C \\\n\n#test2003_20.C \\\n\n#test2003_21.C \\\n\n#test2003_23.C \\\n\n#test2003_24.C \\\n\n#test2003_25.C \\\n\n#test2003_26.C \\\n\n#test2003_27.C \\\n\n#test2003_28.C \\\n\n#test2003_29.C \\\n\n#test2003_30.C \\\n\n#test2003_31.C \\\n\n#test2003_32.C \\\n\n#test2003_35.C \\\n\n#test2003_36.C \\\n\n#test2003_37.C \\\n\n#test2003_38.C \\\n\n#test2004_01.C \\\n\n#test2004_02.C \\\n\n#test2004_03.C \\\n\n#test2004_04.C \\\n\n#test2004_05.C \\\n\n#test2004_06.C \\\n\n#test2004_07.C \\\n\n#test2004_08.C \\\n\n#test2004_09.C \\\n\n#test2004_10.C \\\n\n#test2004_11.C \\\n\n#test2004_12.C \\\n\n#test2004_13.C \\\n\n#test2004_14.C \\\n\n#test2004_15.C \\\n\n#test2004_16.C \\\n\n#test2004_17.C \\\n\n#test2004_18.C \\\n\n#test2004_19.C \\\n\n#test2004_23.C \\\n\n#test2004_24.C \\\n\n#test2004_26.C \\\n\n#test2004_27.C \\\n\n#test2004_28.C \\\n\n#test2004_29.C \\\n\n#test2004_30.C \\\n\n#test2004_31.C \\\n\n#test2004_32.C \\\n\n#test2004_33.C \\\n\n#test2004_34.C \\\n\n#test2004_35.C \\\n\n#test2004_36.C \\\n\n#test2004_37.C \\\n\n#test2004_38.C \\\n\n#test2004_39.C \\\n\n#test2004_40.C \\\n\n#test2004_42.C \\\n\n#test2004_43.C \\\n\n#test2004_44.C \\\n\n#test2004_45.C \\\n\n#test2004_47.C \\\n\n#test2004_48.C \\\n\n#test2004_49.C \\\n\n#test2004_50.C \\\n\n#test2004_51.C \\\n\n#test2004_52.C \\\n\n#test2004_53.C \\\n\n#test2004_54.C \\\n\n#test2004_55.C \\\n\n#test2004_56.C \\\n\n#test2004_58.C \\\n\n#test2004_59.C \\\n\n#test2004_60.C \\\n\n#test2004_61.C \\\n\n#test2004_62.C \\\n\n#test2004_63.C \\\n\n#test2004_64.C \\\n\n#test2004_65.C \\\n\n#test2004_67.C \\\n\n#test2004_68.C \\\n\n#test2004_69.C \\\n\n#test2004_70.C \\\n\n#test2004_71.C \\\n\n#test2004_72.C \\\n\n#test2004_73.C \\\n\n#test2004_74.C \\\n\n#test2004_75.C \\\n\n#test2004_76.C \\\n\n#test2004_77.C \\\n\n#test2004_78.C \\\n\n#test2004_79.C \\\n\n#test2004_80.C \\\n\n#test2004_81.C \\\n\n#test2004_82.C \\\n\n#test2004_84.C \\\n\n#test2004_85.C \\\n\n#test2004_86.C \\\n\n#test2004_87.C \\\n\n#test2004_88.C \\\n\n#test2004_89.C \\\n\n#test2004_90.C \\\n\n#test2004_91.C \\\n\n#test2004_93.C \\\n\n#test2004_94.C \\\n\n#test2004_95.C \\\n\n#test2004_96.C \\\n\n#test2004_97.C \\\n\n#test2004_98.C \\\n\n#test2004_99.C \\\n\n#test2004_100.C \\\n\n#test2004_101.C \\\n\n#test2004_102.C \\\n\n#test2004_103.C \\\n\n#test2004_104.C \\\n\n#test2004_105.C \\\n\n#test2004_106.C \\\n\n#test2004_107.C \\\n\n#test2004_108.C \\\n\n#test2004_109.C \\\n\n#test2004_110.C \\\n\n#test2004_111.C \\\n\n#test2004_112.C \\\n\n#test2004_113.C \\\n\n#test2004_114.C \\\n\n#test2004_115.C \\\n\n#test2004_116.C \\\n\n#test2004_117.C \\\n\n#test2004_118.C \\\n\n#test2004_119.C \\\n\n#test2004_120.C \\\n\n#test2004_121.C \\\n\n#test2004_122.C \\\n\n#test2004_123.C \\\n\n#test2004_124.C \\\n\n#test2004_125.C \\\n\n#test2004_127.C \\\n\n#test2004_128.C \\\n\n#test2004_129.C \\\n\n#test2004_130.C \\\n\n#test2004_131.C \\\n\n#test2004_132.C \\\n\n#test2004_133.C \\\n\n#test2004_134.C \\\n\n#test2004_135.C \\\n\n#test2004_136.C \\\n\n#test2004_137.C \\\n\n#test2004_138.C \\\n\n#test2004_139.C \\\n\n#test2004_140.C \\\n\n#test2004_141.C \\\n\n#test2004_142.C \\\n\n#test2004_143.C \\\n\n#test2004_144.C \\\n\n#test2004_145.C \\\n\n#test2004_146.C \\\n\n#test2004_147.C \\\n\n#test2004_148.C \\\n\n#test2004_149.C \\\n\n#test2004_150.C \\\n\n#test2004_151.C \\\n\n#test2004_152.C \\\n\n#test2004_153.C \\\n\n#test2004_154.C \\\n\n#test2004_155.C \\\n\n#test2004_156.C \\\n\n#test2004_157.C \\\n\n#test2004_158.C \\\n\n#test2004_159.C \\\n\n#test2004_160.C \\\n\n#test2004_161.C \\\n\n#test2004_162.C \\\n\n#test2004_163.C \\\n\n#test2004_164.C \\\n\n#test2005_01.C \\\n\n#test2005_02.C \\\n\n#test2005_03.C \\\n\n#test2005_04.C \\\n\n#test2005_05.C \\\n\n#test2005_06.C \\\n\n#test2005_07.C \\\n\n#test2005_08.C \\\n\n#test2005_09.C \\\n\n#test2005_10.C \\\n\n#test2005_11.C \\\n\n#test2005_12.C \\\n\n#test2005_13.C \\\n\n#test2005_14.C \\\n\n#test2005_15.C \\\n\n#test2005_16.C \\\n\n#test2005_17.C \\\n\n#test2005_19.C \\\n\n#test2005_20.C \\\n\n#test2005_21.C \\\n\n#test2005_22.C \\\n\n#test2005_23.C \\\n\n#test2005_24.C \\\n\n#test2005_25.C \\\n\n#test2005_26.C \\\n\n#test2005_27.C \\\n\n#test2005_28.C \\\n\n#test2005_29.C \\\n\n#test2005_30.C \\\n\n#test2005_31.C \\\n\n#test2005_32.C \\\n\n#test2005_33.C \\\n\n#test2005_34.C \\\n\n#test2005_35.C \\\n\n#test2005_36.C \\\n\n#test2005_37.C \\\n\n#test2005_38.C \\\n\n#test2005_39.C \\\n\n#test2005_40.C \\\n\n#test2005_41.C \\\n\n#test2005_42.C \\\n\n#test2005_43.C \\\n\n#test2005_44.C \\\n\n#test2005_45.C \\\n\n#test2005_46.C \\\n\n#test2005_47.C \\\n\n#test2005_48.C \\\n\n#test2005_49.C \\\n\n#test2005_50.C \\\n\n#test2005_51.C \\\n\n#test2005_52.C \\\n\n#test2005_53.C \\\n\n#test2005_55.C \\\n\n#test2005_57.C \\\n\n#test2005_58.C \\\n\n#test2005_59.C \\\n\n#test2005_60.C \\\n\n#test2005_61.C \\\n\n#test2005_62.C \\\n\n#test2005_63.C \\\n\n#test2005_64.C \\\n\n#test2005_65.C \\\n\n#test2005_66.C \\\n\n#test2005_67.C \\\n\n#test2005_68.C \\\n\n#test2005_70.C \\\n\n#test2005_71.C \\\n\n#test2005_72.C \\\n\n#test2005_73.C \\\n\n#test2005_74.C \\\n\n#test2005_75a.C \\\n\n#test2005_75b.C \\\n\n#test2005_76.C \\\n\n#test2005_77.C \\\n\n#test2005_78.C \\\n\n#test2005_79.C \\\n\n#test2005_80.C \\\n\n#test2005_81.C \\\n\n#test2005_82.C \\\n\n#test2005_83.C \\\n\n#test2005_84.C \\\n\n#test2005_86.C \\\n\n#test2005_87.C \\\n\n#test2005_88.C \\\n\n#test2005_89.C \\\n\n#test2005_90.C \\\n\n#test2005_91.C \\\n\n#test2005_92.C \\\n\n#test2005_93.C \\\n\n#test2005_94.C \\\n\n#test2005_95.C \\\n\n#test2005_96.C \\\n\n#test2005_97.C \\\n\n#test2005_98.C \\\n\n#test2005_99.C \\\n\n#test2005_100.C \\\n\n#test2005_101.C \\\n\n#test2005_102.C \\\n\n#test2005_103.C \\\n\n#test2005_104.C \\\n\n#test2005_105.C \\\n\n#test2005_106.C \\\n\n#test2005_107.C \\\n\n#test2005_108.C \\\n\n#test2005_109.C \\\n\n#test2005_110.C \\\n\n#test2005_111.C \\\n\n#test2005_112.C \\\n\n#test2005_113.C \\\n\n#test2005_114.C \\\n\n#test2005_116.C \\\n\n#test2005_117.C \\\n\n#test2005_118.C \\\n\n#test2005_119.C \\\n\n#test2005_120.C \\\n\n#test2005_121.C \\\n\n#test2005_122.C \\\n\n#test2005_123.C \\\n\n#test2005_124.C \\\n\n#test2005_125.C \\\n\n#test2005_126.C \\\n\n#test2005_127.C \\\n\n#test2005_128.C \\\n\n#test2005_129.C \\\n\n#test2005_130.C \\\n\n#test2005_131.C \\\n\n#test2005_132.C \\\n\n#test2005_133.C \\\n\n#test2005_134.C \\\n\n#test2005_135.C \\\n\n#test2005_136.C \\\n\n#test2005_137.C \\\n\n#test2005_138.C \\\n\n#test2005_139.C \\\n\n#test2005_140.C \\\n\n#test2005_141.C \\\n\n#test2005_142.C \\\n\n#test2005_143.C \\\n\n#test2005_144.C \\\n\n#test2005_145.C \\\n\n#test2005_146.C \\\n\n#test2005_147.C \\\n\n#test2005_148.C \\\n\n#test2005_149.C \\\n\n#test2005_150.C \\\n\n#test2005_152.C \\\n\n#test2005_153.C \\\n\n#test2005_154.C \\\n\n#test2005_155.C \\\n\n#test2005_156.C \\\n\n#test2005_157.C \\\n\n#test2005_158.C \\\n\n#test2005_159.C \\\n\n#test2005_160.C \\\n\n#test2005_161.C \\\n\n#test2005_162.C \\\n\n#test2005_163.C \\\n\n#test2005_164.C \\\n\n#test2005_165.C \\\n\n#test2005_166.C \\\n\n#test2005_167.C \\\n\n#test2005_169.C \\\n\n#test2005_170.C \\\n\n#test2005_171.C \\\n\n#test2005_173.C \\\n\n#test2005_174.C \\\n\n#test2005_175.C \\\n\n#test2005_176.C \\\n\n#test2005_177.C \\\n\n#test2005_178.C \\\n\n#test2005_179.C \\\n\n#test2005_180.C \\\n\n#test2005_181.C \\\n\n#test2005_182.C \\\n\n#test2005_183.C \\\n\n#test2005_184.C \\\n\n#test2005_185.C \\\n\n#test2005_187.C \\\n\n#test2005_188.C \\\n\n#test2005_189.C \\\n\n#test2005_190.C \\\n\n#test2005_191.C \\\n\n#test2005_192.C \\\n\n#test2005_193.C \\\n\n#test2005_194.C \\\n\n#test2005_195.C \\\n\n#test2005_196.C \\\n\n#test2005_197.C \\\n\n#test2005_198.C \\\n\n#test2005_199.C \\\n\n#test2005_202.C \\\n\n#test2005_203.C \\\n\n#test2005_205.C \\\n\n#test2005_206.C \\\n\n#test2005_207.C \\\n\n#test2005_208.C \\\n\n#test2005_209.C \\\n\n#test2006_01.C \\\n\n#test2006_02.C \\\n\n#test2006_03.C \\\n\n#test2006_04.C \\\n\n#test2006_05.C \\\n\n#test2006_06.C \\\n\n#test2006_07.C \\\n\n#test2006_08.C \\\n\n#test2006_10.C \\\n\n#test2006_12.C \\\n\n#test2006_13.C \\\n\n#test2006_14.C \\\n\n#test2006_16.C \\\n\n#test2006_17.C \\\n\n#test2006_18.C \\\n\n#test2006_19.C \\\n\n#test2006_20.C \\\n\n#test2006_22.C \\\n\n#test2006_23.C \\\n\n#test2006_25.C \\\n\n#test2006_26.C \\\n\n#test2006_28.C \\\n\n#test2006_34.C \\\n\n#test2006_37.C \\\n\n#test2006_38.C \\\n\n#test2006_39.C \\\n\n#test2006_40.C \\\n\n#test2006_41.C \\\n\n#test2006_42.C \\\n\n#test2006_44.C \\\n\n#test2006_46.C \\\n\n#test2006_47.C \\\n\n#test2006_50.C \\\n\n#test2006_52.C \\\n\n#test2006_53.C \\\n\n#test2006_54.C \\\n\n#test2006_55.C \\\n\n#test2006_56.C \\\n\n#test2006_57.C \\\n\n#test2006_58.C \\\n\n#test2006_59.C \\\n\n#test2006_61.C \\\n\n#test2006_62.C \\\n\n#test2006_63.C \\\n\n#test2006_66.C \\\n\n#test2006_67.C \\\n\n#test2006_68.C \\\n\n#test2006_69.C \\\n\n#test2006_70.C \\\n\n#test2006_71.C \\\n\n#test2006_72.C \\\n\n#test2006_73.C \\\n\n#test2006_74.C \\\n\n#test2006_75.C \\\n\n#test2006_76.C \\\n\n#test2006_77.C \\\n\n#test2006_78.C \\\n\n#test2006_79.C \\\n\n#test2006_80.C \\\n\n#test2006_81.C \\\n\n#test2006_82.C \\\n\n#test2006_83.C \\\n\n#test2006_84.C \\\n\n#test2006_85.C \\\n\n#test2006_86.C \\\n\n#test2006_87.C \\\n\n#test2006_88.C \\\n\n#test2006_89.C \\\n\n#test2006_90.C \\\n\n#test2006_91.C \\\n\n#test2006_92.C \\\n\n#test2006_93.C \\\n\n#test2006_94.C \\\n\n#test2006_95.C \\\n\n#test2006_96.C \\\n\n#test2006_97.C \\\n\n#test2006_98.C \\\n\n#test2006_99.C \\\n\n#test2006_101.C \\\n\n#test2006_102.C \\\n\n#test2006_103.C \\\n\n#test2006_104.C \\\n\n#test2006_105.C \\\n\n#test2006_106.C \\\n\n#test2006_107.C \\\n\n#test2006_108.C \\\n\n#test2006_109.C \\\n\n#test2006_111.C \\\n\n#test2006_112.C \\\n\n#test2006_113.C \\\n\n#test2006_115.C \\\n\n#test2006_116.C \\\n\n#test2006_117.C \\\n\n#test2006_118.C \\\n\n#test2006_119.C \\\n\n#test2006_120.C \\\n\n#test2006_121.C \\\n\n#test2006_122.C \\\n\n#test2006_123.C \\\n\n#test2006_124.C \\\n\n#test2006_125.C \\\n\n#test2006_126.C \\\n\n#test2006_129.C \\\n\n#test2006_139.C \\\n\n#test2006_140.C \\\n\n#test2006_141.C \\\n\n#test2006_142.C \\\n\n#test2006_143.C \\\n\n#test2006_144.C \\\n\n#test2006_145.C \\\n\n#test2006_146.C \\\n\n#test2006_147.C \\\n\n#test2006_148.C \\\n\n#test2006_149.C \\\n\n#test2006_150.C \\\n\n#test2006_151.C \\\n\n#test2006_152.C \\\n\n#test2006_153.C \\\n\n#test2006_154.C \\\n\n#test2006_155.C \\\n\n#test2006_156.C \\\n\n#test2006_157.C \\\n\n#test2006_158.C \\\n\n#test2006_159.C \\\n\n#test2006_160.C \\\n\n#test2006_161.C \\\n\n#test2006_162.C \\\n\n#test2006_163.C \\\n\n#test2006_164.C \\\n\n#test2006_165.C \\\n\n#test2006_166.C \\\n\n#test2006_180.C \\\n\n#test_int_lexemes.C \\\n\n#test_int_lexemes_donot_pass.C \\\n\n#test_simple_int.C \\\n\n#test_wchars.C \\\n\n#lexPhase2003_01.C \\\n\n#math.C \\\n\n#inputForLoopLocator.C\n\n#\n\n## DQ (8/28/2006): Verified non-working code\n\n#TESTCODE_CURRENTLY_FAILING = \n\n#\n\n#\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \\\n\n#$(TESTCODE_CURRENTLY_FAILING)\n\n#\n\n#\n\n#\n\n#\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n## VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n### Include the path to A++ and the transformation specification\n\n#TESTCODE_INCLUDES = -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code\n\n#\n\n#ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0\n\n#\n\n## A number of tests require the path to the A++ include directory \n\n## and a number of other tests require a path to the source directory.\n\n## $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n\n#$(TEST_Objects): fileLocation\n\n##\t$(VALGRIND) ./statements $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(srcdir)/../Cxx_tests/$(@:.o=.C)\n\n#\techo \"Copy the file to the local build tree so that the tview program can access it with the generated .highlight file ...\"\n\n#\tcp $(srcdir)/../Cxx_tests/$(@:.o=.C) $(@:.o=.C)\n\n#\t$(VALGRIND) ./fileLocation $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir)/../Cxx_tests -c $(@:.o=.C)\n\n#\n\n## This was a bug specific to the normalization of source file names to absolute paths\n\n#testFileLocation: fileLocation\n\n#\t./fileLocation -rose:verbose 0 -c $(srcdir)/input_fileLocation.C\n\n#\n\n#check-local:\n\n##\t@$(MAKE) testStatementPosition\n\n##\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@echo \"Dan Quinlan's development tests.\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/sourcePosition_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#else\n\n#check-local:\n\n#\t@echo \"\\nDan Quinlan's source position development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"******************************************************************************************\"\n\n#\t@echo \"************ make check not run here: configure --enable-dq-developer-tests **************\"\n\n#\t@echo \"******************************************************************************************\"\n\n#endif\n\n#\n\n#distclean-local:\n\n#\trm -rf Makefile\n\n#\n\n#clean-local:\n\n#\trm -rf *.o *.ps *.dot rose_*.C rose_*.c core *.int.c a.out *.highlight test*_*.C\n\n#\n\n#cleandata:\n\n#\trm -f *.ti *.ii rose_*.C rose_*.c *.dot test*.o rose_*.o\n\n#\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/roseTests/fileLocation_tests/Makefile.am" : {
      "ObjectId" : "6b3e9993c0f70b9c471e13d279ee836186546c31",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\tExecutables\n\n#########################################################################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Turn on GNU Coverage Tool (gcov)\n\n# CXX += -fprofile-arcs -ftest-coverage\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# fileLocation\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\tInput specimens\n\n#########################################################################################################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is a shorted list that tests more quickly.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is only supposed to be a cross section of codes.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This fails but is being fixed by Cong.\n\n# test2005_188.C\n\n# test2005_205.C\n",
        "Line" : 600,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\tTests\n\n#########################################################################################################################\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# How to execute the fileLocation tests\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The original makefile had all these commented out for Mac OS X, but no explanation as to why\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# These tests are not run automatically\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#########################################################################################################################\n\n#\t\t\t\t\tAutomake boilerplate\n\n#########################################################################################################################\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/nonsmoke/functional/roseTests/graph_tests/CMakeLists.txt" : {
      "ObjectId" : "71df33f095bb327b164afd4039120a993233d877",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########### next target ###############\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########### next target ###############\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########### next target ###############\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########### next target ###############\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########### next target ###############\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########### install files ###############\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n###################################################################################\n\n## These are testcodes for testing the new Graph IR nodes in ROSE\n\n###################################################################################\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS \n\n#\n\n## if ROSE_USE_NEW_GRAPH_NODES\n\n#\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n## This is a shorted list that tests more quickly.\n\n#TESTCODES_REQUIRED_TO_PASS = \\\n\n#   inputCode_main.C \n\n#\n\n#TESTCODES_CURRENTLY_FAILING = \n\n#\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS)\n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = \\\n\n#$(TESTCODES_REQUIRED_TO_PASS) \\\n\n#$(TESTCODES_CURRENTLY_FAILING)\n\n#\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n## VALGRIND = valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n#ROSE_FLAGS = --edg:no_warnings -w -rose:verbose 0\n\n#\n\n#$(TEST_Objects):\n\n#\techo \"Copy the file to build a second one to main ...\"\n\n#\t$(VALGRIND) ./graph_test_1 $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(top_builddir) $(ROSE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.o=.C)\n\n#\n\n#bin_PROGRAMS = hash_multimap graph_test_1 graph_test_2 graph_test_3 graph_test_4 graph_test_5 graph_test_6 \n\n#\n\n#hash_multimap_SOURCES = hash_multimap.C\n\n#graph_test_1_SOURCES = graph_test_1.C\n\n#graph_test_2_SOURCES = graph_test_2.C\n\n#graph_test_3_SOURCES = graph_test_3.C\n\n#graph_test_4_SOURCES = graph_test_4.C\n\n#graph_test_5_SOURCES = graph_test_5.C\n\n#graph_test_6_SOURCES = graph_test_6.C\n\n#\n\n#\n\n#test_hash_multimap: hash_multimap\n\n#\t$(VALGRIND) ./hash_multimap\n\n#\n\n#test_1: graph_test_1\n\n#\t$(VALGRIND) ./graph_test_1\n\n#\n\n#test_2: graph_test_2\n\n#\t$(VALGRIND) ./graph_test_2\n\n#\n\n#test_3: graph_test_3\n\n#\t$(VALGRIND) ./graph_test_3\n\n#\n\n#test_4: graph_test_4\n\n#\t$(VALGRIND) ./graph_test_4 $(srcdir)/inputCode_main.C\n\n#\n\n#test_5: graph_test_5\n\n#\t$(VALGRIND) ./graph_test_5 $(srcdir)/inputCode_main.C\n\n#\n\n#test_6: graph_test_6\n\n#\t$(VALGRIND) ./graph_test_6 $(srcdir)/inputCode_main.C\n\n#\n\n#small_binary_test_6: graph_test_6\n\n#\t$(VALGRIND) ./graph_test_6 $(srcdir)/../Disassembler_tests/x86-64-ctrlaltdel\n\n#\n\n#large_binary_test_6: graph_test_6\n\n#\t$(VALGRIND) ./graph_test_6 $(srcdir)/../Disassembler_tests/pocketputty.exe\n\n#\n\n#\n\n#QMTEST_Objects = ${ALL_TESTCODES:.C=.qmt}\n\n#\n\n## Make rule to build the QMTest database files\n\n#CURRENT_DIRECTORY = `pwd`\n\n#$(QMTEST_Objects): graph_test_1 $(srcdir)/$(@:.qmt=.C)\n\n#\t@echo \"Calling QMTEST_Objects rule: \"\n\n##\tqm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/main NULL $(ROSE_FLAGS) -c $(srcdir)/tests/$(@:.qmt=.C)\n\n#\n\n## Include makefile rules specific to QMTest\n\n#include $(top_srcdir)/config/QMTest_makefile.inc\n\n#\n\n## EXTRA_DIST = tests \n\n#\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's development tests for new graph IR nodes.\"\n\n##  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest\n\n##\tThese C programs must be called externally to the test codes in the \"TESTCODES\" make variable\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n\n#\t@echo \"******************************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/graph_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#\n\n## endif\n\n#\n\n#else\n\n#check-local:\n\n#\t@echo \"\\nDan Quinlan's development tests for new graph IR nodes, tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"*********************************************************************************************************************************\"\n\n#\t@echo \"******************* make check not run here: configure --enable-newGraphNodes and --enable-dq-developer-tests *******************\"\n\n#\t@echo \"*********************************************************************************************************************************\"\n\n#endif\n\n#\n\n#clean-local:\n\n#\trm -f *.o rose_*.[cC] *.dot test200?_*.[cC]\n\n#\trm -rf QMTest\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/roseTests/graph_tests/Makefile.am" : {
      "ObjectId" : "2e8c5410d33d36f2381b434c7705eb8128a490ac",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# hash_multimap\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# graph_test_1\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# graph_test_2\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# graph_test_3\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# graph_test_4\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# graph_test_5\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# graph_test_6\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# qm.sh\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/roseTests/loopProcessingTests/Makefile.am" : {
      "ObjectId" : "87f140896e36c372a0770974782a8c7ba739dfb6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# Executables\n\n########################################################################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################################################################\n\n# Tests.  Just comment out the \"TEST_NAMES+=\" line to disable a test.  Each test, FOO, will produce either a FOO.passed\n\n# or FOO.failed file with the test output.  Each test runs in a FOO.wrk directory since they would otherwise interfere\n\n# with each other when run in parallel.\n\n########################################################################################################################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EDG3 and EDG4 produce slightly different outputs. For instance, EDG3 adds some extra parentheses around expressions.\n\n# These tests aren't intended to check that EDG3 and EDG4 produce identical output, so we just maintain separate\n\n# answers based on the EDG major version number.\n\n#EDG  = edg@ROSE_EDG_MAJOR_VERSION_NUMBER@\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The configuration file. Look here for the actual command that runs for each test. The command can also be found in\n\n# the *.failed files after the \"=== CUT ===\" line.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#QY: test3 triggered some incorrectly templated code by gcc 4.8.5\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#TEST_NAMES += test3\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# test9 was commented out in the original \"TestDriver\" script. It was passing on 2012-12-06, but is failing\n\n# now because two names are swapped in the output. So I'm disabling it again. [RPM 2013-01-17]\n\n#TEST_NAMES += test9\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# test 11 was not present in the original \"TestDriver\" script\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test 13 was called \"test12\" (redundantly) in the original \"TestDriver\" script\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "########################################################################################################################\n\n# Automake targets\n\n########################################################################################################################\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/roseTests/mergeTraversal_tests/CMakeLists.txt" : {
      "ObjectId" : "62a64ec11cddd423669d9985fe713b4995b7b6e9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## To keep compile commands tidy, please ONLY put required include flags here.\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n## \"if\" for DQ_DEVELOPER_TESTS (AutoMake conditional block)\n\n#if DQ_DEVELOPER_TESTS\n\n#\n\n#bin_PROGRAMS = traversalArray\n\n#\n\n## This appears to be a generic translator\n\n#traversalArray_SOURCES = traversalArray.C\n\n#\n\n## DQ (8/14/2004) Developer's Note:\n\n## This permits the use of the pair of libraries -lrose -ledg OR the longer \n\n## list of libraries (the later option is much faster for development work).\n\n#\n\n## Turn on GNU Coverage Tool (gcov)\n\n## CXX += -fprofile-arcs -ftest-coverage\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n## This was a bug specific to the normalization of source file names to absolute paths\n\n#testTraversalArray: traversalArray\n\n#\t./traversalArray -rose:verbose 2 -I$(top_builddir) $(ROSE_INCLUDES) -c $(srcdir)/input_traversalArray.C\n\n#\n\n#testRoseTraversalArray: traversalArray\n\n#\t./traversalArray -rose:verbose 2 -I$(top_builddir) $(INCLUDES) -c $(top_builddir)/src/frontend/SageIII/Cxx_Grammar.C\n\n#\n\n#check-local:\n\n#\t@echo \"Dan Quinlan's development tests.\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#\t@echo \"****** ROSE/developersScratchSpace/Dan/mergeTraversal_tests: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"******************************************************************************************************************\"\n\n#else\n\n#check-local:\n\n#\t@echo \"\\nDan Quinlan's Merged Traversal development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"*******************************************************************************************\"\n\n#\t@echo \"************* make check not run here: configure --enable-dq-developer-tests **************\"\n\n#\t@echo \"*******************************************************************************************\"\n\n#endif\n\n#\n\n#distclean-local:\n\n#\trm -rf Makefile\n\n#\n\n#clean-local:\n\n#\trm -rf *.o *.ps *.dot rose_*.C rose_*.c core *.int.c a.out \n\n#\n\n#cleandata:\n\n#\trm -f *.ti *.ii rose_*.C rose_*.c *.dot test*.o rose_*.o\n\n#\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/roseTests/mergeTraversal_tests/Makefile.am" : {
      "ObjectId" : "fa97b1c2e9221de7f5c26dc47a45298f85b53428",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# traversalArray: this appears to be a generic translator\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This was a bug specific to the normalization of source file names to absolute paths\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pick a random large file...\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# automake boilerplate\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/roseTests/ompLoweringTests/Makefile.am" : {
      "ObjectId" : "e13a16e12a204ce4762636c8afe216bedf0817f6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Default header file search path\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# all input files are put into tests/nonsmoke/functional/CompileTests/OpenMP_tests\n\n# They are shared by both OpenMP parsing tests and OpenMP lowering tests\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put test codes without main() entry here\n\n# They will be compiled only, not executed.\n\n#\tompfor8.c  , a case not yet supported: ordered schedule(static) , no chunk size is specified. \n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#        axpy_ompacc2.c \n\n#\taxpy_ompacc4.c # multiple gpu version\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#        jacobi-ompacc2.cpp # qualified name issue\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Put test codes which can run (with main() ) here\n\n# They will be compiled and executed when the gomp library path is set\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (9/27/2009): Conditionally compile these files (fail in OSX due to lack of OSX\n\n# support for thread local storage). Liao knows more about the details of these tests.\n\n# threadprivate.c\n\n# threadprivate2.c\n\n# threadprivate3.c\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# C++ test codes which can only be compiled\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# C++ test codes which can be compiled and linked to final executables\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The runnable tests' object files\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#PASSING_Objects_With_main = \\\n#    $(C_TEST_OBJECT_REQUIRED_TO_RUN) \\\n#    $(CXX_TEST_OBJECT_REQUIRED_TO_RUN)\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO task-wait hangs for gcc 4.4.1 (not for Intel icc), skip the execution for now\t\n\n#\ttask_wait.o\n\n# TODO: npb, validation suite, developer tests, epcc\n\n# full_verify.c complex #if #endif\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# we reuse the OpenMP sources files from the OpenMP compile test directory\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# the place to find omp.h, libgomp_g.h etc\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# a relaxed version without consistency checking for fast prototyping\n",
        "Line" : 220,
        "CharPositionInLine" : 34
      },
      "15" : {
        "Text" : "# this flag is used for the long list of CXX test files\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-rose:verbose 2 #--edg:restrict #-rose:wave \n",
        "Line" : 223,
        "CharPositionInLine" : 73
      },
      "17" : {
        "Text" : "#-rose:openmp:nodde #-rose:verbose 2 #--edg:restrict #-rose:wave \n",
        "Line" : 224,
        "CharPositionInLine" : 77
      },
      "18" : {
        "Text" : "# We only include test codes required to compile here.\n\n# Runnable codes are handled separatedly, \n\n#    using check_PROGRAM  if gomp path is available\n\n#   or make their object files only\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# rules to build .o from .c for OpenMP test codes\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#$(C_TESTCODES_REQUIRED_TO_RUN): %.o: $(TEST_DIR)/%.c roseomp\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#$(CXX_TESTCODES_REQUIRED_TO_RUN): %.o: $(TEST_DIR)/%.cpp roseomp\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Experimental translation for OpenMP accelerator model directives\n\n# no final compilation for now, which requires CUDA compiler for the generated code\n\n# each rose_*.cu file depends o its corresponding *.c file\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#rose_axpy_ompacc.cu:roseompacc\n\n#\t./roseompacc$(EXEEXT) ${TEST_FLAGS} -rose:skipfinalCompileStep -c $(TEST_DIR)/axpy_ompacc.c \n\n#rose_matrixmultiply-ompacc.cu:roseompacc\n\n#\t./roseompacc$(EXEEXT) ${TEST_FLAGS} -rose:skipfinalCompileStep -c $(TEST_DIR)/matrixmultiply-ompacc.c \n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#axpy_ompacc.out:rose_axpy_ompacc.cu\n\n#\tnvcc $<  $(TEST_INCLUDES) $(top_srcdir)/src/midend/programTransformation/ompLowering/xomp_cuda_lib.cu -o $@\n\n#matrixmultiply-ompacc.out:rose_matrixmultiply-ompacc.cu\n\n#\tnvcc $< $(TEST_INCLUDES) $(top_srcdir)/src/midend/programTransformation/ompLowering/xomp_cuda_lib.cu -o $@\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOTE: ROSE Test Harness has mechanisms for checking answers via diffs that could possibly be used here. It would also\n\n# be able to handle via its filters the cases mentioned below where function names have random integer numbers. [RPM\n\n# 2013-09-28]\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# We cannot run the diff since the function names of an outlined function has a random integer numbers\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# we need both cuda and libgomp to run the CUDA code generated from OpenMP 4.0 code\t\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#without libgomp, we only generate the CUDA file, without compile it\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#-------------compile and run using GCC's runtime library--------------------------------\t\n\n# Only for C or CXX tests will main()\n\n#PASSING_TEST_Executables = ${PASSING_Objects_With_main:.o=.out}\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# TODO this might have problem with CXX objects!!\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# build executables using nvcc\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# a short cut to run omp-acc support test\n\n#\t./axpy_ompacc3.out TODO: real data distribution example\n\n#           ./jacobi-ompacc2.out  // qualified name issue, 2018/8/17\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# check_PROGRAMS does not work!!\t\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Executables depend on objects\n\n# check-TESTS happens before check-local\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\tDQ (9/27/2009): We need to generate this file temporaily because the documentation depends on it.\n\n#\tHowever, documentation should only depend upon generated files in the tutorial directory.\n\n#\tPlease more the test to the tutorial directory if it is only for documentation purposes\n\n#\tor recreate it there for purposes of documentation and leave it here for purposes of testing\n\n#\t(I would like to not mix the two purposes together).\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#Currently  GOMP takes precedence compared to Omni\n\n# if both of them are specified.\n\n# TODO: a better compiler/configuration option to  handle this\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#-------------compile and run using Omni-------------------------------\n\n# Only for C or CXX tests will main()\n\n#PASSING_TEST_Executables = ${PASSING_Objects_With_main:.o=.out}\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# TODO this might have problem with CXX objects!!\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#MY_FINAL_LINK = $(top_builddir)/src/midend/programTransformation/ompLowering/libxomp.a $(OMNI_PATH)/libtlog.a  $(OMNI_PATH)/libompc.a -lpthread -lm\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Executables depend on objects\n\n# check-TESTS happens before check-local\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\tDQ (9/27/2009): We need to generate this file temporaily because the documentation depends on it.\n\n#\tHowever, documentation should only depend upon generated files in the tutorial directory.\n\n#\tPlease more the test to the tutorial directory if it is only for documentation purposes\n\n#\tor recreate it there for purposes of documentation and leave it here for purposes of testing\n\n#\t(I would like to not mix the two purposes together).\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# USE gcc GOMP library\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#-------------compile only --------------------------------\t\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\tDQ (9/27/2009): We need to generate this file temporaily because the documentation depends on it.\n\n#\tHowever, documentation should only depend upon generated files in the tutorial directory.\n\n#\tPlease more the test to the tutorial directory if it is only for documentation purposes\n\n#\tor recreate it there for purposes of documentation and leave it here for purposes of testing\n\n#\t(I would like to not mix the two purposes together).\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\t$(MAKE) $(PASSING_Objects_With_main) # make objects with main entries here \n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# ROSE_USE_OMNI_OPENMP\n",
        "Line" : 453,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "#\n",
        "Line" : 455,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# Try not to delete files that a developer might have sitting in this directory--delete only things created by\n\n# running the makefile.  I.e., try not to use wildcards!  Also, we could have combined these variables into a\n\n# single list, but sometimes those lists tend to get too long, so we just do them one at a time.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 49
    },
    "tests/nonsmoke/functional/roseTests/ompLoweringTests/fortran/Makefile.am" : {
      "ObjectId" : "515e5034376d4778d17253a66d2b14d058059782",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Default header file search path\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# test codes required to compile here.\n\n#    using check_PROGRAM  if gomp path is available\n\n#   or make their object files only\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#runnable tests' object files\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we reuse the OpenMP sources files from the OpenMP compile test directory\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the place to find omp.h, libgomp_g.h etc\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this flag is used for the long list of CXX test files\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-fno-underscoring #-rose:verbose 2 #--edg:restrict #-rose:wave \n",
        "Line" : 71,
        "CharPositionInLine" : 73
      },
      "7" : {
        "Text" : "# rules to build .o from .f for OpenMP test codes\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-------------compile and run using GCC's runtime library--------------------------------       \n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#-fno-underscoring\n",
        "Line" : 106,
        "CharPositionInLine" : 14
      },
      "10" : {
        "Text" : "# $(F77) will be expanded to g77, which has different libfortran expectation\n\n# $(F90) is not defined?\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Executables depend on objects\n\n# check-TESTS happens before check-local\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#if OS_MACOSX\n\n#        @echo \"/* threadprivate.c not run on MAC OSX (no thread local storage on OSX). */\" > rose_threadprivate.c\n\n#endif\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-------------compile only --------------------------------     \n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#if OS_MACOSX\n\n#        @echo \"/* threadprivate.c not run on MAC OSX (no thread local storage on OSX). */\" > rose_threadprivate.c\n\n#endif\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ROSE_USE_OMNI_OPENMP\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 16
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/Makefile.am" : {
      "ObjectId" : "a9f84addb9c7127a2fe1f63745c30b821030b3c7",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (4/4/2017): Note that Boost 1.62 version is problematic and Boost suggests using an older version.\n\n# There is nothing that ROSE can do about this except skip some tests that require problem features of Boost 1.62.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROSE Test Harness scripts\n\n#CHECK_ANSWER = $(top_srcdir)/scripts/test_against_answer\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-I$(top_srcdir)/src/midend/programAnalysis/ptrTrace/GAI/ICFG/\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# Executables\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (2/10/2010): ROSE currently fails to generate code for this file (it does however compile for analysis only).\n\n# CFGTest_SOURCES = CFGTest.C\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# VirtualFunctionAnalysisTest tests using a variety of specimens from the CompileTests/Cxx_tests directory.\n\n# Using the ROSE Test Harness for consistency with other tests\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: \"include $(VFA_SPECIMEN_DIR)/Makefile-pass.inc\" doesn't work\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Clean this way because argument lists are too long\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# Tests.  This once used the $(srcdir)/TestDriver script, but that had a bunch of problems that are avoided by using the ROSE\n\n# Test Harness (see \"scripts/rth_run.pl --help\" for details).  Those problems were:\n\n#  1. The tests could not be run in parallel\n\n#  2. The tests could not all run when one failed (even with \"make -k\"), which is useful for knowing all that fail.\n\n#  3. A single test could not be run by itself, which is useful when debugging a failing test\n\n#  4. Tests didn't properly use makefile dependencies\n\n#  5. Running \"make check\" re-ran all the tests even when their results were up-to-date.\n\n#  6. The tests generated output even when they were passing, which makes failure output hard to distinguish\n\n#  7. The output wasn't suitable for \"build --quiet\" mode (no progress reporting)\n\n#  8. A failing test produced a backward diff; Using RTH normalizes the diff output across all of ROSE\n\n#  9. Command output was placed in unusual file names; RTH output is always in *.passed or *.failed files\n\n# 10. Command-lines were not printed, which made it difficult to figure out exactly what command failed.\n\n# We now use the ROSE Test Harness and split each test from TestDriver into its own makefile target. [RPM 2013-02-25]\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (1/20/2018): Updated reference files against which we diff after verifying output by hand.\n\n# DQ (1/8/2018): Some of these tests are failing due to changes in the support for labels and case/default statements to support duff's device).\n\n# DQ (8/23/2013): The Makefiles have an error that preventing this from running on my system.\n\n# This needs to be discussed.\n\n# EXTRA_TEST_NAMES = ptr_01 cfg_01 cfg_02 cfg_03 df_01 df_02 df_03 df_04 sr_01 sr_02 sr_03 vf_01 vf_02 vf_03 vf_04 vf_05\n\n# EXTRA_TEST_NAMES = ptr_01 cfg_01 cfg_03 df_03 df_04 sr_03 vf_01 vf_02 vf_03 vf_04 vf_05\n\n# EXTRA_TEST_NAMES += cfg_02 df_01 df_02 sr_01 sr_02 \n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Pointer analysis tests\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Control flow graph tests\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Data flow tests\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Statement ref tests\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Virtual function analysis tests (these are only tested for their exit status)\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Not used\n\n#AnnotationLanguageParserTestRule: trustedAnnotationOutput\n\n#\t./AnnotationLanguageParserTest $(srcdir)/annotationLanguageParserInputFile.ann > annotationOutput\n\n#\tdiff annotationOutput trustedAnnotationOutput || exit\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# Automake boilerplate\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/defUseAnalysisTests/Makefile.am" : {
      "ObjectId" : "41833d92963ecd1923840a0edc7afed2a86ac434",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Tests are numbered in runTest.C, and each test uses a hard-coded specimen.  Rather than duplicate the specimen-selecting\n\n# logic of runTest.C in this makefile, we'll just make sure that each test depends on all the available specimens.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/generalDataFlowAnalysisTests/Makefile.am" : {
      "ObjectId" : "dcc3d5242b9406879568536ea6be39bab70faefa",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This makefile is written in such a way that each section (delimited by \"#\" characters) describes a single category of\n\n# tests. In order to disable that category of test all one needs to do is comment out that section.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Forward declarations for \"+=\"\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################################################################\n\n### Taint Analysis tests (\"cxxta\" unique prefix)\n\n###############################################################################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################################################################\n\n### C++ constant propagation tests on local specimens (\"cxxcpls\" unique prefix)\n\n###############################################################################################################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (8/23/2013): Commented out this failing test. This work is being replaced shortly.\n\n# CXX_CONSTPROP_LOCAL_SPECIMENS = cp_test1.C\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################################################################\n\n### C++ constant propagation tests on specimens from the CXX_TESTDIR directory (\"cxxcp\" unique prefix)\n\n###############################################################################################################################\n\n# DQ (3/2/2013): Note that test2006_103.C fails for the new switch statement handling.\n\n# DQ (2/3/2013): Removed one failing test to see if there were any more.\n\n# RPM (3/8/2013): You can see all the tests failing by using make's \"-k\" switch an then \"ls *.failed\"\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This list comes from $(CXX_TESTDIR)/Makefile-pass.inc as of 2011-??-14 so we can remove failing tests.  Do not add these\n\n# names to EXTRA_DIST since they are in some other directory.  Additional comments about the failing tests can be found\n\n# scattered through out commit c8f4d3c of this file.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (8/23/2013): Eliminated these failing tests. This work is being replaced shortly.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################################################################\n\n# C constant propagation tests for specimens in the $(CXX_TESTDIR) directory (\"ccp\" unique prefix).\n\n###############################################################################################################################\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DQ (8/23/2013): Eliminated these failing tests. This work is being replaced shortly.\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# These names are in the $(CXX_TESTDIR) directory, so do not add them to $(EXTRA_DIST).  Additional comments about the failing\n\n# tests can be found scattered through out commit c8f4d3c of this file.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The EXAMPLE_C_TESTCODES_VERIFIED_TO_PASS have \".C\" extentions, not \".c\", so we need to first copy each one to a new name.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###############################################################################################################################\n\n### C99 constant propagation tests for specimens in the $(C99_TESTDIR) directory (\"c99cp\" unique prefix).\n\n###############################################################################################################################\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# These names are in the $(C99_TESTDIR) directory, so do not add them to $(EXTRA_DIST).  Additional comments about the failing\n\n# tests can be found scattered through out commit c8f4d3c of this file.\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (8/23/2013): Eliminated these failing tests. This work is being replaced shortly.\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###############################################################################################################################\n\n### FORTRAN 77 constant propagation tests for specimens in the $(F77_TESTDIR) directory (\"f77cp\" unique prefix).\n\n###############################################################################################################################\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# These names are in the $(F77_TESTDIR) directory, so do not add them to $(EXTRA_DIST).  Additional comments about the failing\n\n# tests can be found scattered through out commit c8f4d3c of this file.\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "###############################################################################################################################\n\n### Fortran 90 constant propagation tests for specimens in the $(F90_TESTDIR) directory (\"f90cp\" unique prefix)\n\n###############################################################################################################################\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# These names are in the $(F90_TESTDIR) directory, so do not add them to $(EXTRA_DIST).  Additional comments about the failing\n\n# tests can be found scattered through out commit c8f4d3c of this file.\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "###############################################################################################################################\n\n### Fortran 2003 constant propagation tests for specimens in the $(F03_TESTDIR) directory (\"f03cp\" unique prefix)\n\n###############################################################################################################################\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# These names are in the $(F03_TESTDIR) directory, so do not add them to $(EXTRA_DIST).  Additional comments about the failing\n\n# tests can be found scattered through out commit c8f4d3c of this file.\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "###############################################################################################################################\n\n### C++ liveness analysis tests for local specimens (\"cxxla\" unique prefix)\n\n###############################################################################################################################\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DQ (8/23/2013): Eliminated these failing tests. This work is being replaced shortly.\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# CXX_LIVENESS_SPECIMENS = test1.C test4.C test5.C test6.C \n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "###############################################################################################################################\n\n### C++ pointer alias analysis tests for local specimens (\"cxxpa\" unique prefix)\n\n###############################################################################################################################\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (8/23/2013): Eliminated these failing tests. This work is being replaced shortly.\n\n# DQ (3/2/2013): Note that test_ptr1.C fails for the new switch statement handling.\n\n# CXX_POINTER_ALIAS_SPECIMENS = test_ptr2.C\ttest_ptr3.C test_ptr4.C test_ptr5.C\n\n# CXX_POINTER_ALIAS_SPECIMENS = test_ptr1.C test_ptr2.C\ttest_ptr3.C test_ptr4.C test_ptr5.C\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "###############################################################################################################################\n\n### Automake check and clean rules\n\n###############################################################################################################################\n\n# These two are defined based on what languages ROSE was compiled to support.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Note: C++ language support implies C, C++, and C99 support.\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Clean only files that are created by the build system (i.e., no wild cards, because that tends to delete files that\n\n# developers are working with).  Also, the MOSTLYCLEANFILES list gets too long for the shell, so we use phony targets to\n\n# clean each test individually.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/sideEffectAnalysisTests/Makefile.am" : {
      "ObjectId" : "cdfb9ea3b4a6de4d705a6f78e77a0795df352371",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# The testing of the side effect analysis depends upon the side effect analysis,\n\n# which depends upon the database support within ROSE, which depends upon the use\n\n# of sqlite, which is an external (and optional) piece of the ROSE puzzle.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TODO: Side Effect Analysis stopped working due to a boost upgrade.  I don't know how to fix it. -Jim Leek 06/2018\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#AM_CPPFLAGS = $(ROSE_INCLUDES)\n\n#AM_LDFLAGS = $(ROSE_RPATHS)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#bin_PROGRAMS = testSideEffect\n\n#testSideEffect_SOURCES = testSideEffect.C\n\n#testSideEffect_LDADD = $(ROSE_LIBS)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NOTE: testPtr2.C was not tested for some undocumented reason in the original makefile, so it not in this list either.\n\n#TEST_SPECIMENS = testGlobal1.C testGlobal2.C testRef.C testPtr1.C testClasses1.C testClasses2.C testClasses3.C testLoop.C\n\n#TEST_ANSWERS = $(addsuffix .ans, $(TEST_SPECIMENS))\n\n#TEST_TARGETS = $(addsuffix .passed, $(TEST_SPECIMENS))\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#EXTRA_DIST = $(TEST_SPECIMENS) $(TEST_ANSWERS)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NOTE: foo.outx is a funny name for test answers; the usual name is foo.C.ans\n\n#$(TEST_TARGETS): %.passed: testSideEffect $(srcdir)/% $(srcdir)/%.ans $(top_srcdir)/scripts/test_with_answer\n\n#\t@$(RTH_RUN)\t\t\t\t\t\t\t\t\t\\\n#\t\tTITLE=\"testSideEffect $* [$@]\"\t\t\t\t\t\t\\\n#\t\tUSE_SUBDIR=yes\t\t\t\t\t\t\t\t\\\n#\t\tCMD=\"$$(pwd)/testSideEffect $(srcdir)/$* |grep -i 'side effect'\"\t\\\n#\t\tANS=\"$(srcdir)/$*.ans\"\t\t\t\t\t\t\t\\\n#\t\t$(top_srcdir)/scripts/test_with_answer $@\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/ssa_UnfilteredCfg_Test/Makefile.am" : {
      "ObjectId" : "d8e4a1b11dcae712ab9db431d1010d267e0b5472",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# EXTRA_DIST are files that are not compiled or installed. These include readme's, internal header files, etc.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These are currently failing testcodes that should be fixed\n\n# (as opposed to testcodes that are expected to fail)\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/staticInterproceduralSlicingTests/Makefile.am" : {
      "ObjectId" : "4abd5a5e269ca270bef587348ffd16c478a454cc",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Don't use the repository in ../src\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This test program does not require the rest of ROSE so it can be handled locally\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#generateSlicedSDG testSlicing slice \n",
        "Line" : 12,
        "CharPositionInLine" : 70
      },
      "4" : {
        "Text" : "# generateSFBDT.C  generateSFCFG.C  generateSFDF.C  generateSFDT.C  \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Done:\n\n# generateCDG.C  generateDDG.C  generateSDG.C  generateSlicedSDG.C testSlicing.C multiPassTest.C  slice.C  \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support \n\n# this, this implementation needs review).  It might be better to prepend the information to the \n\n# CC and CXX variables. I think that the purify support uses this approach.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#generateSlicedSDG_SOURCES = generateSlicedSDG.C\n\n#generateSlicedSDG_LDADD = $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#testSlicing_SOURCES = testSlicing.C\n\n#testSlicing_LDADD = $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#slice_SOURCES = slice.C\n\n#lice_LDADD = $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build the list of object files\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ROSE_FLAGS = \n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#TEST_TRANSLATOR = ./slice $(ROSE_FLAGS)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (7/12/2004): Modified to run with make -j4 options\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t@echo \"Compiling test code using $(TEST_TRANSLATOR) ...\"\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#generateSlicedSDG testSlicing \n",
        "Line" : 75,
        "CharPositionInLine" : 118
      },
      "16" : {
        "Text" : "#\t$(VALGRIND) $(TEST_TRANSLATOR) $(TESTCODE_INCLUDES) -c $(srcdir)/$(@:.o=.C) -o $(@:.o=)\n\n#\t$(VALGRIND) ./slice -c $(srcdir)/$(@:.o=.C) -o $(@:.o=)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\t$(VALGRIND) ./generateSlicedSDG -c $(srcdir)/$(@:.o=.C) -o $(@:.o=)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t$(VALGRIND) ./testSlicing -c $(srcdir)/$(@:.o=.C) -o $(@:.o=)\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# DQ (7/25/2005): The current changes to the AST break these test programs:\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/staticSingleAssignmentTests/Makefile.am" : {
      "ObjectId" : "a20527d0e99197217253b61ad04f15f5b39a440e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# EXTRA_DIST are files that are not compiled or installed. These include readme's, internal header files, etc.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Yarden_client.c \n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (1/15/2018): These tests fail under the new switch statment support and label statement support.\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (1/19/2018): These now work fine.\n\n#  test2004_15.C \n\n#  test2006_50.C \n\n#  test2006_180.C \n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (1/15/2018): These tests fail under the new switch statment support and label statement support.\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# DQ (1/19/2017): These is a problem for GNU 5.1.\n",
        "Line" : 662,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (1/20/2017): These is a problem for GNU 6.1.\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DQ (8/31/2016): This is now fixed.\n\n# DQ (8/26/2016): Failing test with new template fix (likely similar problem to call graph fix).\n\n# test2006_78.C \n",
        "Line" : 685,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# These are currently failing testcodes that should be fixed\n\n# (as opposed to testcodes that are expected to fail)\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/systemDependenceGraphTests/Makefile.am" : {
      "ObjectId" : "586451d6e92a3d554b78bae950b62bc1355cb040",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (10/7/2015): This is not supported on later version and this automake test is using the wrong automake \n\n# variable since this is associated with the backend comiler (not the compiler used to compile ROSE).\n\n# The src/midend/programAnalysis/systemDependenceGraph/Makefile.am has a note from Dan on 2/9/2014 and the source files are\n\n# not compiled for GCC > 4.6. Therefore we cannot compile the testSDG program either for GCC > 4.6. [Robb Matzke, 2014-10-15]\n\n# if ROSE_USING_GCC_VERSION_LATER_4_6\n\n#    noinst_PROGRAMS =\n\n# else\n\n#    noinst_PROGRAMS = testSDG\n\n#    testSDG_SOURCES = sdgTest.C\n\n#    testSDG_LDFLAGS = $(ROSE_RPATHS)\n\n#    testSDG_LDADD = $(ROSE_LIBS)\n\n# endif\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# EXTRA_DIST are files that are not compiled or installed. These include readme's, internal header files, etc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These are currently failing testcodes that should be fixed\n\n# (as opposed to testcodes that are expected to fail)\n",
        "Line" : 745,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#@$(MAKE) TEST_C\n\n#@$(MAKE) TEST_CXX\n",
        "Line" : 785,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 4
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/testCallGraphAnalysis/Makefile.am" : {
      "ObjectId" : "ca71ccb92af3a52345e3fcfbb11be488a2d2d6a9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#########################################################################################################################\n\n## Programs\n\n#########################################################################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is compiled, but never used\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is compiled, but never used\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is compiled, but never used\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is compiled, but never used\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#########################################################################################################################\n\n## Tests\n\n#########################################################################################################################\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (1/19/2017): These is a problem for GNU 6.1.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# test01.conf\n",
        "Line" : 63,
        "CharPositionInLine" : 35
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test that the call graph generates all the edges it should\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test a short list of local specimens from our source directory\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------------------------------------------------------------------------------------------\n\n# Test the specimens in the CompileTests/Cxx_tests for which we have answers in the $(Test04AnswersDir) directory.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (1/19/2017): These is a problem for GNU 4.9.\n\n# if !ROSE_USING_GCC_VERSION_LATER_5_1\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#########################################################################################################################\n\n## Stuff for automake\n\n#########################################################################################################################\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/typeTraitTests/Makefile.am" : {
      "ObjectId" : "be7ec602d26084123690770c6473b56a3db43598",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# The original comment was:\n\n#     type traits is a not fully supported in older gcc versions. We enable tests only when rose is compiled with gcc 4.2 or\n\n#     higher and the backend compiler used is also gcc 4.2 or higher.\n\n#\n\n# But the logic to implement that was really messed up:\n\n#     (1) It didn't check that we're using GCC instead of some other compiler to compile ROSE\n\n#     (2) It didn't check that we're using GCC instead of some other compiler for the backend\n\n#     (3) It tested minor version \"4\" instead of \"2\" for the compiler used to compile ROSE\n\n#     (4) It tested minor version \"4\" instead of \"2\" for the backend compiler\n\n#     (5) It assumed versions \"5.0\", \"5.1\", \"5.2\" and \"5.3\" are older than \"4.4\" (same for major > 5)\n\n#\n\n# I'm keeping the original logic about gcc vs. other compilers since that's what is being actually tested in Jenkins and\n\n# passing, but I'm implementing a black-list with proper version number comparisons instead of using the original messed\n\n# up white-list. [Matzke, 2016-03-29]\n\n#\n\n# The main purpose for doing things this way instead of using recursive make is that we want parallelism to work\n\n# properly. The recursive method adds \"-j1\" on some systems.  We should try to avoid rules like this:\n\n#     |some-rule:\n\n#     |    test some-condition && $(MAKE) test_targets\n\n# in favor of\n\n#     |some-rule: $(conditional_test_targets)\n\n# because the latter works correctly in parallel\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Black-listed compilers. ROSE doesn't support gcc <4.0, therefore no need to list them here.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Run all tests, but conditionally disable some\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (3/26/2016): WARNING: This typeTrait testing represents a quadratic test on the size of the AST\n\n# and as such is inapropriate for testing using large files.  This test takes 90 minutes on our fastest\n\n# desktop machines and thus contributes an unacceptabily large burden to our ROSE testing infrastructure.\n\n# As a result it is being disabled as a test.  All other tests are run as usual.\n\n# A solution to improve the performance would be to have the GetAllMemberFunctionsInClassHierarchy() \n\n# function save computed results, since it appears to be an expensive operation that is repreated many \n\n# times for the same classes.\n\n# Note that if we wanted to we could still make this a release level test, but it should not be a \n\n# development level test.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#(set -x;\t\t\t\t\t\t\t\t\t\\\n\t\t#       ./typeTraitExerciseWithoutRetCode\t\t\t\t\t\\\n\t\t#\t\t-c $(ROSE_FLAGS) -rose:verbose 2 -I$(top_builddir)\t\t\\\n\t\t#\t\t$(ROSE_INCLUDES) -c $(srcdir)/tests/roseHeader.C\t\t\\\n\t\t#);\t\t\t\t\t\t\t\t\t\t\\\n\telse\t\t\t\t\t\t\t\t\t\t\t\\\n\t\techo \"  TEST   hard test [$@] (disabled: $(type_traits_test_disabled))\";\t\\\n\tfi\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/variableLivenessTests/Makefile.am" : {
      "ObjectId" : "907a6f27fa97e0c169385bbc019e7ca992b158d9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Tests are numbered in runTest.C, and each test uses a hard-coded specimen.  Rather than duplicate the specimen-selecting\n\n# logic of runTest.C in this makefile, we'll just make sure that each test depends on all the available specimens.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/functional/roseTests/programAnalysisTests/variableRenamingTests/Makefile.am" : {
      "ObjectId" : "f16fb9eff6d266b51b5f8d45c77d9d6371a09f99",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###############################################################################################################################\n\n# Test specimens: inputs to the test program\n\n###############################################################################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of input specimens (so we only need to list the file base names in the rest of the makefile).\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These specimens were commented out in the edg3 branch with the comment that they \"should be fixed (as opposed to testcodes\n\n# that are expected to fail)\" and which currently also fail in the edg4x branch.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These specimens fail the test but were also not tested in the edg3x release branch.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Do not run the test against these input specimens.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# All the input specimens against which we should run the test.  The EXAMPLE_TESTCODES_REQUIRED_TO_PASS comes from\n\n# the following included file (BTW, it doesn't work to include it as \"$(SPECIMEN_DIR)/Makefile-pass.inc\").\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We test only the exit status of the testVariableRenaming executable.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###############################################################################################################################\n\n# The test executable\n\n###############################################################################################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################################################################\n\n# The individual tests: the test executable run against each individual input specimen.\n\n###############################################################################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################################################################\n\n# Automake targets\n\n###############################################################################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tests/nonsmoke/functional/roseTests/programTransformationTests/CMakeLists.txt" : {
      "ObjectId" : "b9c4d377321f1160fdd20270bd320076fd5d29f1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(extractFunctionArgumentsTest)\n\n#add_subdirectory(singleStatementToBlockNormalization)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# preTest\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# patternRewriteTest\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# finiteDifferencingTest\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# constantFoldingTest\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#FIXME: Test is failing\n\n#add_test(\n\n#  NAME constantFoldingTest_3\n\n#  COMMAND constantFoldingTest2\n\n#    -c ${CMAKE_CURRENT_SOURCE_DIR}/inputCode_constantFoldingTransformation.C\n\n#)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# implicitCodeGenerationTest\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/nonsmoke/functional/roseTests/programTransformationTests/Makefile.am" : {
      "ObjectId" : "e043087f2fbe40a51524e5883b22faf723b5aba3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# SUBDIRS = extractFunctionArgumentsTest\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROSE Test Harness scripts\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# All these executables have the same includes and libraries\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# preTest\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# patternRewriteTest\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# finiteDifferencingTest\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# finiteDifferencingDemo\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# testFunctionNormalization\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# constantFoldingTest\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Liao, 6/27/2009. This test cannot really test what I want. The EDG frontend will do the constant folding (mysteriously to me). \n\n# Only translator-introduced constant expressions will be optimized by ROSE.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# implicitCodeGenerationTest\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-------------------------------------------------------------------------------------------------------------------------------\n\n# Automake boilerplate\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (3/21/2009): None of these tests appear to run under Cygwin.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/nonsmoke/functional/roseTests/programTransformationTests/extractFunctionArgumentsTest/CMakeLists.txt" : {
      "ObjectId" : "47a1a30838d5176df5e0563eeba1a8246a978786",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build the single statement to block normalization translator\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This populates the list ROSE__CXX_TESTS\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/programTransformationTests/extractFunctionArgumentsTest/Makefile.am" : {
      "ObjectId" : "8bd33046387584706977fe78c2868a7dfb4848c9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Build the single statement to block normalization translator\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# test2013_242.C \"(problem with Boost code in ROSE compiling ROSE)\" as of 2014-03-26\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (5/26/2014): I would like to skip the normalization of the test2013_241.C \n\n# test code (so that it can be addressed later).  The test code will compile\n\n# fine however it will generate incorrect code when used with the normalizationTranslator\n\n# tested within this directory.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (1/19/2017): This normalization of \"const char*\" literal strings to \"char*\" is a problem for GNU 6.1 (6.x and later) compilers.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (4/17/2016): This test fails when Clang is used for the backend compiler because \n\n# string constants are assgined to non-const char* and so the normalization will have \n\n# to address this detail.  This is likely only caught by later version compilers that\n\n# enforce this aspect of the C++ standard.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Just like normalizationTranslator_TEST_TARGETS except for the stuff we've listed as failing above\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nonsmoke/functional/roseTests/programTransformationTests/singleStatementToBlockNormalization/Makefile.am" : {
      "ObjectId" : "78d26b5b21c868854e0cb14d342d602e53190d89",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Build the single statement to block normalization translator\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The following tests are disable because they're broken in ways unrelated to what this makefile is testing\n\n#   test2013_242.C: ROSE is unable to parse boost-1.47 header file\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/Makefile.am" : {
      "ObjectId" : "61c42acec196f30719b0ebdf09f06fa5e487f27e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This software was produced with support in part from the Defense Advanced\n\n# Research Projects Agency (DARPA) through AFRL Contract FA8650-09-C-1915.\n\n# Nothing in this work should be construed as reflecting the official policy\n\n# or position of the Defense Department, the United States government,\n\n# or Rice University.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROSE-HPCT example programs\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sample data\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include ../Make.inc\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Root of ROSE-HPCT source tree\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Root of ROSE-HPCT header file installation tree\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Default header file search path\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Default link flags for executables\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (4/23/2011): At least one of the files (process_cmdline.o) in this directory does not seem \n\n# to compile with Insure++ (it hangs for Hudson, but I can't reproduce the problem locally)\n\n# This was not a problem the second time that Insure++ compiled ROSE.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# used for invoking individual tests\n\n# test_attach01.sh\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# test_attach01a.sh\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (3/21/2009): These tests don't appear to run under Cygwin.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (9/10/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (1/28/2017): HPCToolKit appears to have problems on later versions of GNU compilers (GNU 4.9 and later).\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\t$(srcdir)/test_attach02.sh\n\n#\t$(srcdir)/test_attach03.sh\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#  !ROSE_BUILD_ROSEHPCT\n",
        "Line" : 135,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# ROSE_BUILD_ROSEHPCT\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# eof\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/ANALYSIS/Makefile.am" : {
      "ObjectId" : "601b5478885466193e99f83a253f5c8753b22e55",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This software was produced with support in part from the Defense Advanced\n\n# Research Projects Agency (DARPA) through AFRL Contract FA8650-09-C-1915.\n\n# Nothing in this work should be construed as reflecting the official policy\n\n# or position of the Defense Department, the United States government,\n\n# or Rice University.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/Makefile.am" : {
      "ObjectId" : "eaeebc2d5cb565087407ce74659923d1efed173d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This software was produced with support in part from the Defense Advanced\n\n# Research Projects Agency (DARPA) through AFRL Contract FA8650-09-C-1915.\n\n# Nothing in this work should be construed as reflecting the official policy\n\n# or position of the Defense Department, the United States government,\n\n# or Rice University.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROSE-HPCT module: Example data set 01\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# eof\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/PROFILE/Makefile.am" : {
      "ObjectId" : "70af35ecdf7a15d529f933299632b12a6c448493",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This software was produced with support in part from the Defense Advanced\n\n# Research Projects Agency (DARPA) through AFRL Contract FA8650-09-C-1915.\n\n# Nothing in this work should be construed as reflecting the official policy\n\n# or position of the Defense Department, the United States government,\n\n# or Rice University.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/PROGRAM/Makefile.am" : {
      "ObjectId" : "62e701fc7f06cdf994ca981662dc7f733a273330",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This software was produced with support in part from the Defense Advanced\n\n# Research Projects Agency (DARPA) through AFRL Contract FA8650-09-C-1915.\n\n# Nothing in this work should be construed as reflecting the official policy\n\n# or position of the Defense Department, the United States government,\n\n# or Rice University.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/02/Makefile.am" : {
      "ObjectId" : "3cd6ccc78081d0dc4bfab17e1a49900aa2acc0a6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Example data set 02\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/02/PROFILE/Makefile.am" : {
      "ObjectId" : "5163d944794121e12012aa27e1990f4d86146a04",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/02/struct_ls/Makefile.am" : {
      "ObjectId" : "4ea46869ac51eea8cf8e2d7b048568e0cfde03ee",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/03/Makefile.am" : {
      "ObjectId" : "9837f429e04dfab402d146c0b21bd2a81eb1c8c0",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT Example data set 03\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/03/PROFILE/Makefile.am" : {
      "ObjectId" : "5163d944794121e12012aa27e1990f4d86146a04",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/03/struct_ls/Makefile.am" : {
      "ObjectId" : "4ea46869ac51eea8cf8e2d7b048568e0cfde03ee",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/Makefile.am" : {
      "ObjectId" : "e6b5f9be7a64687e57e02cbbd80dc272bbdd9fb6",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ROSE-HPCT module example HPCToolkit data files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# eof\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/functional/roseTests/varDeclNorm/Makefile.am" : {
      "ObjectId" : "924dc0ea0ed8e2c9937bcbdb5a273f3f4478ccf9",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/testSupport/Makefile.am" : {
      "ObjectId" : "2e8f49ab0fbb8347df5e12d0349a8937cd104631",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/testSupport/gtest/Makefile.am" : {
      "ObjectId" : "9acc36a8e9100fce1be6b3755aac689021783bee",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# AUTOMAKE_OPTIONS = subdir-objects\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/nonsmoke/functional/test_deleteAST/Makefile" : {
      "ObjectId" : "b81cf29ccc3761438ac22f0d7b69fd3d98835264",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Example Makefile for ROSE users\n\n# This makefile is provided as an example of how to use ROSE when ROSE is\n\n# installed (using \"make install\").  This makefile is tested as part of the\n\n# \"make distcheck\" rule (run as part of tests before any CVS checkin).\n\n# The test of this makefile can also be run by using the \"make installcheck\"\n\n# rule (run as part of \"make distcheck\").\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Location of Boost include directory\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#use -DPRE_ORDER for preorder and -DPOST_ORDER for postorder traversal\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -DFUNC_DECL or -DFUNC_DEF or VAR_DECL or -DGLOBAL \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Location of include directory after \"make install\"\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Location of Dwarf include and lib (if ROSE is configured to use Dwarf)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#CXXCPPFLAGS           = @CXXCPPFLAGS@\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Location of library directory after \"make install\"\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Default make rule to use\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Example suffix rule for more experienced makefile users\n\n# .C.o:\n\n#\tg++ -c -I$(ROSE_INCLUDE_DIR) -o $@ $(@:.o=.C)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Compile the exampleTranslator using the file identityTranslator.C\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Rule used by make installcheck to verify correctness of installed libraries\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tests/nonsmoke/functional/translatorTests/CMakeLists.txt" : {
      "ObjectId" : "c4fc612736f6b9b74067a6479decde8cc92ac4d8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/functional/translatorTests/Makefile.am" : {
      "ObjectId" : "28fc3d3936609f6824a4647fd7ebea61ae239b12",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# roseCompiler_DEPENDENCIES = $(REQUIRED_LIBS)\n\n# roseCompiler_LDADD  = $(ROSE_LIBS)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DQ (2/28/2017): NOTE: bug125 is executed and takes a very long time (about 15 minutes; we should maybe look into this).\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# most test translators should not be installed (noinst)\n\n# The bug numbers come from ROSE's SciDAC bug trackers\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# a better alternative to identityTranslator\n\n# Liao 1/29/2009\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Example translators used in regression tests\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DQ (8/25/2011): Added test code to demonstrate where const is set in the AST.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LDADD = $(ROSE_SEPARATE_LIBS)\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (11/11/2012): This tests the PDF generater on a large program (includes STL string).\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# testqualifiedName: qualifiedName\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#test_testDataMemberOfConst test_testFortranParameter\n",
        "Line" : 102,
        "CharPositionInLine" : 26
      },
      "11" : {
        "Text" : "# We have to touch input_testPragmaInBody.o since the translator does not invoke backend at all\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# DQ (2/4/2011): Added test code to evaluate line numbers of SgLabelStatement that\n\n# were previously marked as transforamtions and thus has line numbers == zero.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#PLUGIN_OPTS=-rose:plugin_lib lib.so -rose:plugin_lib lib2.so -rose:plugin_action act1 -rose:plugin_action act2 -rose:plugin_arg_act1 op1 -rose:plugin_arg_act1 op2 -rose:plugin_arg_act2 op3 -rose:plugin_arg_act2 op4\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Fortran tests\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# TODO: FIX the following tests\n\n#Currently_Failing_Cxx_tests =\n\n#\tdataMemberOfConst.o \n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# DQ (3/3/2017): Note that this directory of tests are only run for C/C++ langauge support is enabled.\n\n# Liao, 1/13/2014, these two tests are not tested by EDG 3 based ROSE, comment out for now\n\n#\tparameter.o \n\n#\tprotected.o\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\t@$(MAKE) check-cxx check-fortran\n\n# DQ (2/19/2017): NEW VERSION OF LOGIC\n\n# DQ (2/18/2017): More specific logic required for portability.\n\n# When using EDG 4.9 these files don't compile on later versions of GNU, CLANG, and Intel compilers \n\n# but we still want them tests as we transition to EDG 4.12 (where they all work fine independent of \n\n# the compiler vendor and GNU compiler version).\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Exclude these tests on GNU 4.9 and later compilers).\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# NOT ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 223,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# If this is not the CLANG or Intel compilers and an earlier version of GNU than GNU 4.9 compiler, so include these files.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n\n# NOT USING_GNU_COMPILER\n",
        "Line" : 227,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 234,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 240,
        "CharPositionInLine" : 5
      },
      "26" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# NOT ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 243,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Using EDG 4.12 or later (run all tests independent of the compiler).\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# ROSE_USING_GCC_VERSION_LATER_4_8\n",
        "Line" : 254,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Exclude this list of files in the case of CLANG compiler.\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# DQ (2/28/2017): Skip these files with Clang for now and come back to them later (when we understand the limits of portability better).\n\n#\t@$(MAKE) $(PASSING_TEST_Objects)\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# NOT USING_CLANG_COMPILER\n",
        "Line" : 264,
        "CharPositionInLine" : 5
      },
      "33" : {
        "Text" : "# Exclude this list of files in the case of Intel compiler.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# NOT USING_INTEL_COMPILER\n",
        "Line" : 271,
        "CharPositionInLine" : 5
      },
      "35" : {
        "Text" : "# This is an unknown compiler.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# USING_INTEL_COMPILER\n\n# USING_CLANG_COMPILER\n\n# USING_GNU_COMPILER\n\n# ROSE_USE_EDG_VERSION_4_9\n",
        "Line" : 274,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 37
    },
    "tests/nonsmoke/specimens/Makefile.am" : {
      "ObjectId" : "7b99a49418ad83f1832c6441e57642698fb2b3d8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/specimens/binary/Makefile.am" : {
      "ObjectId" : "736d00b3531e806aebcd31603eb6d6907c7af091",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###############################################################################################################################\n\n# Larger collections of specimens.  These follow the same naming convention except \"any\" can appear in one of the positions.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This rule regenerates the makefile fragment that can be included into other makefiles. I had to do it this round about way\n\n# because I couldn't get GNU make's \"foreach\" function to generate new variables.  After you generate a new SpecimenSets.inc\n\n# you must re-run the automake and configure scripts in order to incorporate the new file into the generated makefiles.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/nonsmoke/specimens/c++/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/specimens/c/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/specimens/fortran/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/specimens/java/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/nonsmoke/unit/Makefile.am" : {
      "ObjectId" : "8bcef0f4866a7d54fb4a9472fd3568f6fc9477af",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (2/27/2017): Only test this for GNU compilers for now.\n\n# SUBDIRS = SageInterface\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/nonsmoke/unit/SageInterface/Makefile.am" : {
      "ObjectId" : "076dfcf49db1c0154756470c67e86d78aacaaac4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Forward declarations so we can use make's \"+=\" operator.  We use \"noinst_PROGRAMS\" instead of \"bin_PROGRAMS\" because\n\n# # we generally don't want checkers used in testing to be installed by \"make install\".  The \"TEST_TARGETS\" variable\n\n# # will be a list of all the make targets that should be run: one for each test where a \"test\" is some \"checker\" run\n\n# # with one input \"specimen\" (or no inputs).\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Must have this guard, otherwise binary analysis without C++ enabled will fail.\n\n# TODO: move this into a subdirectory\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# Inut specimens\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# input for get_C_array_dimensions()\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# input for genericCoverage(), collectFunctionSideEffect.C\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n# A checker to test OmpSupport::getDataSharingAttribute()\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DataRaceBench file list, 1/29/2018\n\n# it is defined as dataracebench_c_files and dataracebench_cpp_files\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# nonsmoke_getDataSharingAttribute_c defines the set of c files to test getDataSharingAttribute\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# unparsed file results, used to support clean-local rule\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# tests/nonsmoke/functional/CompileTests/Cxx_tests/Specimens.inc defines nonsmoke_genericCoverage_c\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Output to .output file original_file_name.output\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# small set to be verified for now\n\n# It could be a subset of all the tests\n\n# nonsmoke_getDataSharingAttribute_c_verify is a subset defined in \n\n# tests/nonsmoke/functional/CompileTests/OpenMP_tests/Specimens.inc\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# tests/nonsmoke/functional/CompileTests/C_tests/Specimens.inc defines nonsmoke_get_C_array_dimensions_c_verify\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# similar to the previous one:  original.c.getDataSharingAttribute.output -->  original.c\n\n# the verify subset is included in getDataSharingAttribute_c_output\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# the diff files originalfile.c.output.diff\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# must dependent on individual output files for both versions : generated vs. reference\n\n# wrong to use $(nonsmoke_getDataSharingAttribute_c_output) since it is the whole set!\n\n# Otherwise wrong dependence, redundant execution!! Still wrong. break dependence between .output.diff --> .output\n\n#$(nonsmoke_getDataSharingAttribute_c_output_diff): $(nonsmoke_getDataSharingAttribute_c_output)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# shortcut to test generating outputs only, tested for avoid redundant running.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# shortcut to test generating the diff files\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# two targets for data sharing attributes testing\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#  generate the diff files\n\n#  TODO: add dataracebench_getDataSharingAttribute_c_output_diff when ready\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# DQ (4/5/2017): GNU 6.1 includes language features that this test does not support.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "tests/roseTests/Makefile.am" : {
      "ObjectId" : "9259fa72b0c6511731140c0c27913622e6fc1cdf",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Temporary makefile for Jenkins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/roseTests/ompLoweringTests/Makefile.am" : {
      "ObjectId" : "6807a23b3b60d8c572d18c8f76174476c7e6d8a8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Temporary makefile for Jenkins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/roseTests/programAnalysisTests/Makefile.am" : {
      "ObjectId" : "f3913ca68861c0af0e8b3e1ab1395260e57e8728",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Temporary makefile for Jenkins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/roseTests/programAnalysisTests/typeTraitTests/Makefile.am" : {
      "ObjectId" : "ec14113d34beb2156664ce96aee3b2cb61dbff07",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Temporary makefile for Jenkins\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/smoke/ExamplesForTestWriters/Makefile.am" : {
      "ObjectId" : "f02e64f113532b9e41e29c8e149b466720d981c1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This makefile serves as the canonical example for writing tests.\n\n#\n\n# Most of the documentation is in $ROSE/tests/nonsmoke/ExamplesForTestWriters/Makefile.am\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################################################################\n\n# Prologue\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################################################\n\n# A checker taking no specimens and which does not even depend on librose. It's only purpose is to see if it can be\n\n# compiled and link; we never actually need to run it. (Don't remove this example -- it's a real test.)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################################################################\n\n# A checker taking no specimens but which we want to run with a variety of arguments\n\n# See $ROSE/tests/nonsmoke/specimens/binarySpecimens.inc\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################################################################\n\n# Boilerplate.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/smoke/Makefile.am" : {
      "ObjectId" : "520e88d8ab2dfde8466b7a2472e7bf81c48b7751",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/smoke/functional/BinaryAnalysis/Makefile.am" : {
      "ObjectId" : "d6037c1376ba2f407b572e0cdc526c9d3730a7c2",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###############################################################################################################################\n\n# Disassembly tests using Rose::BinaryAnalysis::Partitioner2\n\n###############################################################################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################################################################\n\n# Boilerplate\n\n###############################################################################################################################\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/smoke/functional/Fortran/Makefile.am" : {
      "ObjectId" : "e7926d2c78dac188f5670fd8a787ca7fc6a8033f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n## Fortran Parser Tests\n\n#\n\n# These tests quickly check whether the ATerm and Open Fortran Parser files are installed correctly\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rasmussen (11.17.2017): This test only checks if the Fortran parse table, Fortran.tbl, is installed.\n\n# It should actually check for stratego and ATerm libraries as well.  But this should be done in\n\n# the configure scripts so doesn't need to be here. And, in any case, the macro variable OFP_BIN_PATH\n\n# is no longer used.\n\n#if ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION\n\n#fortran_parser_tests += testBafio\n\n#noinst_PROGRAMS      += testBafio\n\n#endif\n\n#\n\n#testBafio_SOURCES = testBafio.C\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Test targets\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Test rules\n\n#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################################################################\n\n# Boilerplate\n\n###############################################################################################################################\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/smoke/functional/Makefile.am" : {
      "ObjectId" : "5f02ab59873926d69bce48069481808cc51cd2ba",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Rasmussen (11.17.2017): This test is no longer needed as the Fortran parse table\n\n# has been moved to the source tree.  See comment in ./Fortran/Makefile.am.\n\n#if ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION\n\n#SUBDIRS += Fortran\n\n#endif\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/smoke/specimens/Makefile.am" : {
      "ObjectId" : "7b99a49418ad83f1832c6441e57642698fb2b3d8",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/smoke/specimens/binary/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/smoke/specimens/c++/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/smoke/specimens/c/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/smoke/specimens/fortran/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/smoke/specimens/java/Makefile.am" : {
      "ObjectId" : "9f31c4b5fedf304021dd1fc1126bf575275cd16e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "tests/smoke/unit/BinaryAnalysis/Makefile.am" : {
      "ObjectId" : "615e0bee98f3283434f0f834eba3cb74db427f49",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################################################################\n\n# Boilerplate\n\n###############################################################################################################################\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/smoke/unit/Boost/Makefile.am" : {
      "ObjectId" : "3ed6c968ec4e76f92ce77223fdead8316c189090",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###############################################################################################################################\n\n# Check boost library linkage consistency\n\n###############################################################################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################################################################\n\n# Test that boost::regex works. Also ensures that boost hasn't been compiled with -DBOOST_REGEX_MATCH_EXTRA\n\n###############################################################################################################################\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################################################################\n\n# Test that boost::thread works.\n\n###############################################################################################################################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################################################################\n\n# Boilerplate\n\n###############################################################################################################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/smoke/unit/Makefile.am" : {
      "ObjectId" : "6b020f824d27833db62288cf02d77515eef2e39a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DQ (3/8/2017): Restrict testing to versions of GNU compiler for now for specific versions of EDG.\n\n# Matzke (4/21/2017): None of these tests do anything with EDG, so this complicated logic shouldn't be necessary here. Reverting.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These unit test directories should be listed so lower software layers are tested before higher layers.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/smoke/unit/Sawyer/Makefile.am" : {
      "ObjectId" : "0ac85ed6801b2263b6bc43e4d68d75e2e4f75ae4",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n# Sawyer Unit Tests\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sawyer unit tests. These are copied from the Sawyer release at https://github.com/matzke1/sawyer by\n\n# the script in $ROSE/src/util/Sawyer/updateFromGithub.sh\n\n# The order of this list should be from most basic to most advanced (dependencies checked before uses)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unfortunately, automake doesn't let us use variables here, so we need to list them again.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Each checker depends on one source file, but automake doesn't let us use patterns so we list them yet again\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test targets\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Test rules\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################################################################\n\n# Boilerplate\n\n###############################################################################################################################\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/smoke/unit/Utility/Makefile.am" : {
      "ObjectId" : "1ee356eae5f4541d07952ff77d5eed18e803b757",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "###############################################################################################################################\n\n# AstAttributeMechanism\n\n###############################################################################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################################################################\n\n# Tests that diagnostics are working\n\n###############################################################################################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################################################################\n\n# Tests the StringUtility functions\n\n###############################################################################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################################################################\n\n# Tests for parallel sorting\n\n###############################################################################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################################################################\n\n# tests the RangeMap class\n\n###############################################################################################################################\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################################################################\n\n# Boilerplate\n\n###############################################################################################################################\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "750f02385babb5966902790f110a5dee091a228b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# nothing to do yet (no tools available)\n\n#install(FILES\n\n#  tool1\n\n#  DESTINATION bin)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/Makefile.am" : {
      "ObjectId" : "6cad31afbc86ec5fd1247e87e7b45231a1d9fab3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Build the ROSE-based tools\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install the tools in 'bin'\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------- only for C/C++\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------testing part \n\n#  rose_inputrajaChecker.C \n\n# To test an individual input, type 'make insideIfStmt.cpp.output'\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# special options for raja checker \n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# enable diff based correctness checking\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# generate .cpp.output,  diff them with reference files, store the diffs into .cpp.diff\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  each diff file depends on its own output file, not all generated examples!!\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#short cut to test rajaChecker\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ 11 features need GCC 4.9  and EDG 4.12 and later\n\n# Liao 4/10/2017\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tools/checkFortranInterfaces/Makefile.am" : {
      "ObjectId" : "329e568c86c170304daffd33fb7916b2969648d3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Subdirectories\n\n#------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Global Build Flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# ROSE Dependency\n\n#------------------------------------------------------------------------------\n\n# Ensure librose has been built since our binaries will link with it\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Build Targets\n\n#------------------------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Unit Tests\n\n#------------------------------------------------------------------------------\n\n# MODIFY THIS SECTION TO ADD NEW TESTS:\n\n#\n\n#   1. Add executable name to BIN_EXECUTABLES\n\n#   2. Add new <EXECUTABLE>_SOURCES variable listing the executable's source\n\n#------------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tools/classMemberVariablesInLambdas/Makefile.am" : {
      "ObjectId" : "2c254853b0aa00d2d9a218509010dc57a698ace1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Subdirectories\n\n#------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Global Build Flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# ROSE Dependency\n\n#------------------------------------------------------------------------------\n\n# Ensure librose has been built since our binaries will link with it\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Build Targets\n\n#------------------------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Unit Tests\n\n#------------------------------------------------------------------------------\n\n# MODIFY THIS SECTION TO ADD NEW TESTS:\n\n#\n\n#   1. Add executable name to BIN_EXECUTABLES\n\n#   2. Add new <EXECUTABLE>_SOURCES variable listing the executable's source\n\n#------------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tools/fortranTranslation/Makefile.am" : {
      "ObjectId" : "657c9cad87592ab2038577b99ab208b84c0d5b8b",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# Amrex Fortran to C++ Translator\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Subdirectories\n\n#------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Global Build Flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# ROSE Dependency\n\n#------------------------------------------------------------------------------\n\n# Ensure librose has been built since our binaries will link with it\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Build Targets\n\n#------------------------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#~ classMemberVariablesInLambdas.test: classMemberVariablesInLambdas\n\n#~ \t./classMemberVariablesInLambdas -std=c++11 --edg:no_warnings -c $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Cxx11_tests/classMemberVariablesInLambdas_test_01.C\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n\n#~ TEST_TARGETS = ${BIN_EXECUTABLES:=.test}\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#~ check-local:\n\n#~ \t@echo \"********************************************************************************\"\n\n#~ \t@echo \"*** ROSE/tools/fortranTranslator (Amrex): make check rule completed normally ***\"\n\n#~ \t@echo \"********************************************************************************\"\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#~ else\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#~ check-local:\n\n#~ \t@echo \"*********************************************************************************\"\n\n#~ \t@echo \"*** ROSE/tools/fortranTranslator (Amrex): configure failed                    ***\"\n\n#~ \t@echo \"*********************************************************************************\"\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#~ endif\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tools/globalVariablesInLambdas/Makefile.am" : {
      "ObjectId" : "49076dfda9f216f30a2c4895adc351da48692295",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Subdirectories\n\n#------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Global Build Flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# ROSE Dependency\n\n#------------------------------------------------------------------------------\n\n# Ensure librose has been built since our binaries will link with it\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Build Targets\n\n#------------------------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Unit Tests\n\n#------------------------------------------------------------------------------\n\n# MODIFY THIS SECTION TO ADD NEW TESTS:\n\n#\n\n#   1. Add executable name to BIN_EXECUTABLES\n\n#   2. Add new <EXECUTABLE>_SOURCES variable listing the executable's source\n\n#------------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tutorial/CMakeLists.txt" : {
      "ObjectId" : "2e7697800e1896c4cac2f942bb18d38f0e8b8eee",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#  install(TARGETS ${tutorial}Tutorial DESTINATION bin)\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Install only those executables that are useful to users after ROSE is installed. If the main purpose of compiling\n\n# the tool is to ensure that the source code is correct for the purposes of documentation in the various tutorials,\n\n# then there's no point in installing that executable.\n\n#install(TARGETS buildCallGraphTutorial DESTINATION bin)\n\n#install(TARGETS livenessAnalysisTutorial DESTINATION bin)\n\n#install(TARGETS interproceduralCFGTutorial DESTINATION bin)\n\n#install(TARGETS virtualCFGTutorial DESTINATION bin)\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#if ROSE_HAVE_YICES\n\n#yicesTutorialExample yicesTutorialExample.C)\n\n#endif\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "tutorial/Makefile.am" : {
      "ObjectId" : "70343dae96fdfc825ab05f2b7918e11a9866534c",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Add Projects that are associated with capabilities that belong to ROSE here\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TOO (2/16/2011): Errors with Tensilica's Xtensa compilers as alternative backend compilers. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# all: exampleMakefile\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#yices_c.h\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Liao 5/7/2010  We want to have a few installable programs as tools for users\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#traverseBinCFG \\\n   #traverseSourceCFG \n",
        "Line" : 39,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#varSubstCopy , disabled this one Liao, and sorted the list\n\n# tutorial examples which will not be installed to ROSE_INS/bin\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TV (02/13/2014) : desactivated tutorials using the deprecated AST rewrite mechanism.\n\n#   instrumentationExample\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DQ (3/21/2009): Separate those that compile under Cygwin from those that don't.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#traverseSourceCFG_SOURCES = traverseSourceCFG.C\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#traverseBinCFG_SOURCES = traverseBinCFG.C\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# need to call this something different since it is likely\n\n# to be easily confused with the visitorPatternTraversal.C\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#instrumentationExample_SOURCES = instrumentationExample.C\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#varSubstCopy_SOURCES = varSubstCopy.C\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Use this to control use of -lrose -ledg vs. the very long list \n\n# of separate libraries which is faster to use in development.\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# #####################################\n\n# Tests for debugging tutorial examples\n\n# #####################################\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DQ (9/6/2008): Added test to generate a graph of the binary for the tiny program example (with debugging data).\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#testInstrumentationExample: instrumentationExample\n\n#\t./instrumentationExample -rose:verbose 0 -c $(srcdir)/inputCode_InstrumentationTranslator.C\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# turn off the warning for input code with unused variable declarations\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\t./buildCFG $(srcdir)/inputCode_1.C\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\t$(top_srcdir)/scripts/dotgenLetterPDF controlFlowGraph.dot controlFlowGraph.ps\n\n#\t$(top_srcdir)/scripts/dotgenLetterPDF foo.dot controlFlowGraph.ps\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\t$(top_srcdir)/scripts/dotgenLetterPDF controlFlowGraph.dot controlFlowGraph.ps\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# TAU_INCLUDES = -I/home/dquinlan/TAU/tau-2.14.8/include\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 641,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\t$(top_srcdir)/scripts/dotgenLetterPDF wholeGraphAST.dot wholeGraphAST.ps\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#\t$(top_srcdir)/scripts/dotgenLetterPDF wholeGraphASTPool.dot wholeGraphASTPool.ps\n",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\t./customGraphGenerationWithColors $(srcdir)/inputCode_constantFoldingTransformation.C\n\n#\t$(top_srcdir)/scripts/dotgenLetterPDF inputCode_constantFoldingTransformation.C.dot constantFoldingTransformation.ps\n",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# This tests the generation f an intrmediate example in the tutorial\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\t./sprintf_to_snprintf -rose:verbose 0 -I.. $(AM_CPPFLAGS) -c $(srcdir)/inputCode_sprintf_to_snprintf.C\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# This should only be tested if Dwarf is in use, and it should not \n\n# be used on the Mac OSX system because we build the executable and\n\n# ROSE does not yet handle the Mach-O executable i386 binary file format.\n",
        "Line" : 770,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\tDQ (2/12/2009): This fails when make check is run and the file ($(top_srcdir)/developersScratchSpace/Dan/Disassembler_tests/i386-nologin)\n\n#\tis not available (e.g. external distributions).\n\n#\tcp $(top_srcdir)/developersScratchSpace/Dan/Disassembler_tests/i386-nologin inputCode_dwarfAnalysis\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Note: different stages of AST representation and visualization.\n\n#\t./dwarfAnalysis -c $(srcdir)/inputCode_dwarfAnalysis.C\n\n#\t./dwarfAnalysis -rose:visualize_dwarf_only inputCode_dwarfAnalysis\n\n#\t./dwarfAnalysis -rose:visualize_executable_file_format_skip_symbols inputCode_dwarfAnalysis\n\n#\t./dwarfAnalysis -rose:read_executable_file_format_only inputCode_dwarfAnalysis\n\n#\t./dwarfAnalysis -rose:read_executable_file_format_only -rose:visualize_executable_file_format_skip_symbols inputCode_dwarfAnalysis\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#\t./dwarfAnalysis -rose:verbose 0 -c $(srcdir)/inputCode_dwarfAnalysis.C\n\n#\t./dwarfInstructionAddressToSourceLineAnalysis -rose:visualize_dwarf_only inputCode_dwarfAnalysis\n",
        "Line" : 794,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# DQ (3/20/2017): Added test to include DOTGraphEdges and DOTGraphNodes from src/frontend/SageIII/astVisualization/AstAttributeDOT.* files.\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# #####################################\n\n# Output files use in tutorial\n\n# #####################################\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#rose_inputCode_varSubstCopy.C , temporary disabled this test, don't go into patch!,Liao\n",
        "Line" : 825,
        "CharPositionInLine" : 3
      },
      "51" : {
        "Text" : "# .out suffix may cause conflicts with a temporary file used by makefile/libtool\n\n# using a different name is highly recommended!! Liao, 10/15/2008\n",
        "Line" : 826,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# TV (02/13/2014) : remove as translator use deprecated AST Rewrite Mechanism\n\n#   rose_inputCode_InstrumentationTranslator.C\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# TOO (2/17/11): Errors with Tensilica's Xtensa compilers. \n",
        "Line" : 908,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# #####################################\n\n# Output file generation rules\n\n# #####################################\n",
        "Line" : 914,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Build smaller versions of these files (so that they fit onto two separate pages (within the tutorial))\n",
        "Line" : 920,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n\n#\trm inputCode_ASTGraphGenerator.pdf\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Build smaller versions of these files (so that they fit onto two separate pages (within the tutorial))\n",
        "Line" : 935,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n\n#\trm inputCode_ASTGraphGeneratorCustomized.pdf\n",
        "Line" : 943,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 955,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 965,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# DQ (9/7/2006): These need separate rules so that when using \"make -j\" each is run by at most only one process.\n\n# traversalExecutables = \\\n#   visitorTraversal \\\n#   classicObjectOrientedVisitorPatternTraversal \\\n#   inheritedAttributeTraversal \\\n#   synthesizedAttributeTraversal \\\n#   inheritedAndSynthesizedAttributeTraversal \\\n#   accumulatorAttributeTraversal \\\n#   persistantAttributes \\\n#   visitorMemoryPoolTraversal \\\n#   classicObjectOrientedVisitorPatternMemoryPoolTraversal \\\n#   nestedTraversal\n",
        "Line" : 991,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# $(traversalOutput): $(traversalExecutables)\n\n#\t@echo \"Generate executable from compilation of input code (visitorTraversal) ...\"\n\n#\t./visitorTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_5.C > visitorTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (classicObjectOrientedVisitorPatternTraversal) ...\"\n\n#\t./classicObjectOrientedVisitorPatternTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_6.C > classicObjectOrientedVisitorPatternTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (inheritedAttributeTraversal) ...\"\n\n#\t./inheritedAttributeTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_7.C > inheritedAttributeTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (synthesizedAttributeTraversal) ...\"\n\n#\t./synthesizedAttributeTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_8.C > synthesizedAttributeTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (inheritedAndSynthesizedAttributeTraversal) ...\"\n\n#\t./inheritedAndSynthesizedAttributeTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_9.C > inheritedAndSynthesizedAttributeTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (accumulatorAttributeTraversal) ...\"\n\n#\t./accumulatorAttributeTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_10.C > accumulatorAttributeTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (nestedTraversal) ...\"\n\n#\t./nestedTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_11.C > nestedTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (persistantAttributes) ...\"\n\n#\t./persistantAttributes $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_12.C > persistantAttributes.out\n\n#\t@echo \"Generate executable from compilation of input code (visitorMemoryPoolTraversal) ...\"\n\n#\t./visitorMemoryPoolTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_13.C > visitorMemoryPoolTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (classicObjectOrientedVisitorPatternMemoryPoolTraversal) ...\"\n\n#\t./classicObjectOrientedVisitorPatternMemoryPoolTraversal $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_14.C > classicObjectOrientedVisitorPatternMemoryPoolTraversal.out\n\n#\t@echo \"Generate executable from compilation of input code (traverseIRnodeTypes) ...\"\n\n#\t./traverseIRnodeTypes $(ROSE_FLAGS) -c $(srcdir)/inputCode_ExampleTraversals_15.C > traverseIRnodeTypes.out\n",
        "Line" : 1003,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# DQ (9/7/2006): These need separate rules so that when using \"make -j\" each is run by at most only one process.\n",
        "Line" : 1027,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# DQ (3/21/2009): sharedMemoryTraversals fails to compile under Cygwin.\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#rose_inputCode_InstrumentationTranslator.C: instrumentationExample\n\n#\t@echo \"Generate executable from compilation of input code ...\"\n\n#\t./instrumentationExample $(ROSE_FLAGS) -c $(srcdir)/inputCode_InstrumentationTranslator.C\n",
        "Line" : 1132,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "#\t./loopOptimization -bk1 -fs0 -c $(srcdir)/inputCode_LoopOptimization_mm.C\n\n# DQ (1/2/2008): This used to work, but it is part of what Qing is fixing.\n",
        "Line" : 1177,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#FR (6/8/2011) Bug fixed\n",
        "Line" : 1181,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1200,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1212,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1222,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# DQ (8/17/2008): Added example to show how to use traversal on AST for binary executable format.\n",
        "Line" : 1226,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#\tDQ (9/6/2008): We are not ready for these yet, so don't generate them.\n\n#\t@echo \"BinaryAnalysis: Building postscript file from AST and whole graph dot files...\"\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1239,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# rose_bin_example.s.aa: binaryAnalysis_pic1.pdf\n",
        "Line" : 1243,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#\tWhile in development just run without building codeCoverage.out (and touch codeCoverage.out to allow makefile to work)\n",
        "Line" : 1264,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# TOO (2/18/2011): error with Tensilica's Xtensa compilers:\n\n# \"/usr/bin/ld: inputCode_ExampleCodeCoverage.o: Relocations in generic ELF (EM: 8)\"\n",
        "Line" : 1266,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#\tlink the input file with the coverageCodeFromShmuel.o file (written by Shmuel, tool specific)\n",
        "Line" : 1269,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "#\tRun the input code (collect any output in codeCoverage.out)\n",
        "Line" : 1271,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Liao, add a non-trival test input \n",
        "Line" : 1282,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1285,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1318,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Build smaller versions of these files (so that they fit onto two separate pages (within the tutorial))\n",
        "Line" : 1332,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#\techo \"File I/O temporarily disabled!\" > astFileIO_GenerateBinaryFile.out\n",
        "Line" : 1347,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#\techo \"Test Failed!\" > generatingUniqueNamesFromDeclaration2.out\n",
        "Line" : 1354,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#\t./tauInstrumenter $(ROSE_FLAGS) $(TAU_INCLUDES) -c $(srcdir)/inputCode_tauInstrumenter.C\n",
        "Line" : 1363,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1374,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1389,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Liao, 2/13/2008 , added this\n",
        "Line" : 1393,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#\tDQ (3/21/2009): These tests don't appear to run under Cygwin.\n",
        "Line" : 1402,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "#rose_inputCode_varSubstCopy.C: varSubstCopy\n\n#\t./varSubstCopy $(ROSE_FLAGS) -c $(srcdir)/inputCode_varSubstCopy.C\n",
        "Line" : 1424,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1432,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# DQ (3/20/2017): This takes a very long time, is it worth it?\n\n#\t$(top_srcdir)/scripts/dotgenLetterPDF wholeGraphASTPool1.dot wholeGraphASTPool.pdf\n",
        "Line" : 1443,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1446,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "#\tDQ (10/19/2009): Added error checking to (catches lack of \"dot\" in path).\n",
        "Line" : 1460,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# DQ (3/20/2017): Added test to include DOTGraphEdges and DOTGraphNodes from src/frontend/SageIII/astVisualization/AstAttributeDOT.* files.\n",
        "Line" : 1467,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "#\t./wholeGraphFilterOnPersistantAttributes input_wholeGraphFilterOnPersistantAttributes.C\n",
        "Line" : 1471,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Note that we have made multiple copies of \"inputCode_ExampleTraversals.C\"\n\n# so that the processing could be done in parallel with out collisions.\n",
        "Line" : 1474,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# disabled this one due to problem with copy mechanism, Liao\n\n#   inputCode_varSubstCopy.C \n",
        "Line" : 1586,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "#\tDQ (5/20/2007): Added to support Rich's work with outlining and the HPC Toolkit\n",
        "Line" : 1593,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# TOO (2/16/2011): Errors with Tensilica's Xtensa compilers as alternative backend compilers. We can\n\n# gradually enable these tests at a later stage if necessary.\n",
        "Line" : 1595,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# Note that the *.trace files come from the execution of the codeCoverage.C test,\n\n# and the *.binary files are generated from the astFileIO_GenerateBinaryFile.C test.\n\n# The *.binary are the binary form of the ASTs.\n",
        "Line" : 1605,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "#\tThis can not be called after make distclean (by make distcheck)\n\n#\tcd outliner; $(MAKE) cleanDocs\n",
        "Line" : 1609,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# OS X object file debug info\n",
        "Line" : 1618,
        "CharPositionInLine" : 48
      },
      "105" : {
        "Text" : "# Compile everything with -g (compiler's debug flag)\n\n# AM_CPPFLAGS = -g\n",
        "Line" : 1621,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# DQ (1/4/2006): Added check rule (remove all generated code and rerun \"make docs\").\n",
        "Line" : 1624,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "#\tDQ (3/27/2006): Note that these should not have to already exist, so use \"rm -rf\"\n\n#\trm -rf $(generatedCodeExamples)\n",
        "Line" : 1626,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 108
    },
    "tutorial/binaryAnalysis/CMakeLists.txt" : {
      "ObjectId" : "fca43657d2d28d5cc82b9963843c6ff7b149952f",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake file is incomplete.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tutorial/binaryAnalysis/Makefile.am" : {
      "ObjectId" : "98369f1117cdcaad8427a6ede3622ad115bc50ae",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# To keep compile commands tidy, please ONLY put required include flags here.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build a simple 32bit binary to use in testing.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test using the instruction pattern matching support in ROSE.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build a simple 32bit binary to use in testing.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test the detection of NOP sequences in the generated 32-bit binary (32-bit binaries don't appear to have multi-byte nop instructions)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Test the transformation of source code to include nop asm statments introduced at the top of functions.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate a 64-bit binary using the source-to-source translator to add asm multi-byte \n\n# nop's via source code and compile the generated source code to an executable.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test the detect of nops in the executable generated from the source-to-source transformation \n\n# to automatically insert nop asm instructions via the source code.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Test the transformation of the binary to rewrite nops instructions to use multiple multibyte nop instructions (and thus use as few as possible).\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tNote that we need \"-rose:binary\" option to avoid ambiguity that would cause linking using g++ compiler!\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\t./nopBinaryTransform -rose:verbose 0 input_nopTransform\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (4/28/2010): This appears to fail in 32-bit machines.  For now get existing work checked in and \n\n# investigate this detail afterward (ongoing work).\n\n#\t@$(MAKE) testmatchPattern\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tutorial/intelPin/CMakeLists.txt" : {
      "ObjectId" : "f08d6a36699cd7bf6a64703c45b79dceecf82143",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO: ask ROSE team where LEVEL_PINCLIENT namespace can be found.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### next target ###############\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(dynamicStaticBinaryAnalysis_SRCS dynamicStaticBinaryAnalysis.C)\n\n#add_executable(dynamicStaticBinaryAnalysis ${dynamicStaticBinaryAnalysis_SRCS})\n\n#target_link_libraries(dynamicStaticBinaryAnalysis ${KDE4_KDECORE_LIBS})\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########### next target ###############\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(staticDynamicBinaryAnalysis_SRCS staticDynamicBinaryAnalysis.C)\n\n#add_executable(staticDynamicBinaryAnalysis ${staticDynamicBinaryAnalysis_SRCS})\n\n#target_link_libraries(staticDynamicBinaryAnalysis ${KDE4_KDECORE_LIBS})\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########### next target ###############\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(commandlineHandling_SRCS commandlineHandling.C)\n\n#add_executable(commandlineHandling ${commandlineHandling_SRCS})\n\n#target_link_libraries(commandlineHandling ${KDE4_KDECORE_LIBS})\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########### install files ###############\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n## if configured to use Intel Pin\n\n#if ROSE_USE_INTEL_PIN\n\n#\n\n## Refernece location to where some of the example pin tools are located in the Intel Pin distribution.\n\n#INTEL_PIN_TOOLS_PATH = $(INTEL_PIN_PATH)/source/tools/SimpleExamples\n\n#\n\n## INTEL PIN paths are now included in ROSE_INCLUDES with --with-Intel_Pin.\n\n#INCLUDES = $(ROSE_INCLUDES)\n\n#\n\n## These are ROSE analysis applications that mix static and dynamic analysis.\n\n#noinst_PROGRAMS = dynamicStaticBinaryAnalysis staticDynamicBinaryAnalysis commandlineHandling \n\n#\n\n## These are example Pin tools (some ruse ROSE and demonstrat how to link pin tools with ROSE for mixed analysis).\n\n#noinst_OBJECTS = graphTrace.o imageload.o dynamicBinaryInfo.o \n\n#\n\n## LIBTOOL_RPATH_LDADD = $(ROSE_LIBS_WITH_PATH) $(RT_LIBS) $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n## LIBTOOL_RPATH_LDADD = $(ROSE_LIBS_WITH_PATH) $(RT_LIBS) $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#LIBTOOL_RPATH_LDADD = $(ROSE_LIBS_WITH_PATH) $(RT_LIBS) $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl\n\n#\n\n## This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n## as a result is must link to both ROSE and Pin.\n\n#dynamicStaticBinaryAnalysis_SOURCES = dynamicStaticBinaryAnalysis.C\n\n#dynamicStaticBinaryAnalysis_LDADD   = $(LIBTOOL_RPATH_LDADD)\n\n#\n\n## dynamicStaticBinaryAnalysis_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#\n\n## This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n## as a result is must link to both ROSE and Pin.\n\n#staticDynamicBinaryAnalysis_SOURCES = staticDynamicBinaryAnalysis.C\n\n#staticDynamicBinaryAnalysis_LDADD   = $(LIBTOOL_RPATH_LDADD)\n\n#\n\n## This code demonstrates the commandline handling required to mix Pin with ROSE.\n\n#commandlineHandling_SOURCES = commandlineHandling.C\n\n#commandlineHandling_LDADD   = $(LIBTOOL_RPATH_LDADD)\n\n#\n\n## This is a general variable to link against (uses -lrose and works with static or dynamic linking):\n\n## NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n## NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\n\n#\n\n#\n\n## **************************************************************************\n\n## This we were we will put test codes (not there yet):\n\n#TESTCODES_REQUIRED_TO_PASS = \n\n##  pintest2008_01.C\n\n#\n\n#TESTCODE_CURRENTLY_FAILING = \n\n##  pintest2008_02.C \n\n#\n\n## \"make check\" tests to be run:\n\n#ROSE_PIN_TESTS = testGraphTrace testImageload testDynamicBinaryInfo\n\n#\n\n#\n\n## This is a test code (executable) to be used with the Intel Pin dynamic instrumentation\n\n## (it can be linked staticly or dynamically).\n\n#input_testcode: $(srcdir)/input_testcode.C\n\n##\tg++ -static $(srcdir)/input_testcode.C -o input_testcode\n\n#\tg++ $(srcdir)/input_testcode.C -o input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This tests the Intel Pin tool using one of its internal tools (should have been built if Intel Pin was built)\n\n## This tests the installation of Pin and nothing about the use of Pin with ROSE.\n\n#testPinInstallation: input_testcode $(INTEL_PIN_TOOLS_PATH)/obj-intel64/icount.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t $(INTEL_PIN_TOOLS_PATH)/obj-intel64/icount.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This Pin tool generates a dot graph of the trace of execution of a binary (and uses support functions in ROSE).\n\n## So it must be linked explicitly (not using libtool) and reference either the shared library or the static library.\n\n## When the shared library (librose.so) is used, $(top_builddir)/src/.libs must be in the LD_LIBRARY_PATH.\n\n#graphTrace.so: graphTrace.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o graphTrace.so graphTrace.o $(NON_LIBTOOL_RPATH)\n\n#\n\n## Test example program generate a graph of the execution trace of a binary\n\n#testGraphTrace: graphTrace.so input_testcode\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t graphTrace.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This Pin tool generates log of the image loading and unloading (of shared libraries) of a binary\n\n#imageload.so: imageload.o\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\n\n#\n\n## Test example program generate a graph of the execution trace of a binary\n\n#testImageload: imageload.so input_testcode\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t imageload.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This Pin tool generates log of the information take from each image (main program and each loaded shared library) of the binary\n\n#dynamicBinaryInfo.so: dynamicBinaryInfo.o\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n##\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_WITH_DWARF_LIBS_PATH)\n\n#\n\n## Test example program generates information about the binary (from section data for main program and each shared library).\n\n#testDynamicBinaryInfo: dynamicBinaryInfo.so input_testcode\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t dynamicBinaryInfo.so -- ./input_testcode\n\n#\n\n## **************************************************************************\n\n## This builds an Intel Pin tool (for testing the command line handling with ROSE)\n\n#commandlineHandling.so: commandlineHandling.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o commandlineHandling.so commandlineHandling.o $(NON_LIBTOOL_RPATH)\n\n#\n\n#testCommandlineHandling: input_testcode commandlineHandling.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t commandlineHandling.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n## This allows for mixed static and dynamic analysis.\n\n#dynamicStaticBinaryAnalysis.so: dynamicStaticBinaryAnalysis.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicStaticBinaryAnalysis.so dynamicStaticBinaryAnalysis.o $(NON_LIBTOOL_RPATH)\n\n#\n\n## DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n## This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n## In this case the dynamic instrumentation can call static analysis.\n\n#testDynamicStaticBinaryAnalysis: input_testcode dynamicStaticBinaryAnalysis.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t dynamicStaticBinaryAnalysis.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n## This allows for mixed static and dynamic analysis (first static analysis then dynamic analysis).\n\n#staticDynamicBinaryAnalysis.so: staticDynamicBinaryAnalysis.o\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o staticDynamicBinaryAnalysis.so staticDynamicBinaryAnalysis.o $(NON_LIBTOOL_RPATH) \n\n#\n\n## DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n## This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n## In this case the dynamic instrumentation can call static analysis.\n\n#testStaticDynamicBinaryAnalysis: input_testcode staticDynamicBinaryAnalysis.so\n\n#\t$(INTEL_PIN_PATH)/pin -slow_asserts -t staticDynamicBinaryAnalysis.so -- ./input_testcode\n\n#\n\n#\n\n## **************************************************************************\n\n## Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n\n#TESTCODES = $(TESTCODES_REQUIRED_TO_PASS)\n\n#\n\n## QMTest allows both passing and failing tests.\n\n#ALL_TESTCODES = $(TESTCODES_REQUIRED_TO_PASS) $(TESTCODE_CURRENTLY_FAILING)\n\n#\n\n## File option to accumulate performance information about the compilation\n\n#PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/PIN_ROSE_PERFORMANCE_DATA.csv\n\n#\n\n#ROSE_FLAGS = -rose:verbose 0 $(PERFORMANCE_REPORT_OPTION)\n\n#\n\n#VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes\n\n## VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n\n#VALGRIND =\n\n#\n\n#PASSING_TEST_Objects = ${TESTCODES:.C=.o}\n\n#TEST_Objects = ${ALL_TESTCODES:.C=.o}\n\n#\n\n## $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n\n##$(TEST_Objects): \n\n##\techo \"Calling ...\"\n\n##\t$(VALGRIND) ./staticBinaryAnalysis $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C)\n\n#\n\n#docs:\n\n#\t@$(MAKE) $(ROSE_PIN_TESTS)\n\n#\t@$(MAKE) testStaticDynamicBinaryAnalysis\n\n#\t@$(MAKE) testDynamicStaticBinaryAnalysis\n\n#\t@echo \"\"\n\n#\t@echo \"***************************************************************************\"\n\n#\t@echo \"Generated required documentation for tutorial/intelPin (make docs rule) ...\"\n\n#\t@echo \"***************************************************************************\"\n\n#\n\n#check-local:\n\n#\t$(MAKE) docs\n\n#\t@echo \"************************************************************************************\"\n\n#\t@echo \"****** ROSE/tutorial/intelPin: make check rule complete (terminated normally) ******\"\n\n#\t@echo \"************************************************************************************\"\n\n#\n\n## else of configuration for ROSE_USE_INTEL_PIN\n\n#else\n\n#\n\n#docs:\n\n#\t@echo \"Tutorial Intel Pin development tests NOT run.  To run these reconfigure with:\"\n\n#\t@echo \"*******************************************************************************************************\"\n\n#\t@echo \"*************** make check not run here: configure --with-IntelPin=<path to Intel Pin> ****************\"\n\n#\t@echo \"*******************************************************************************************************\"\n\n#\n\n#check-local:\n\n#\t$(MAKE) docs\n\n#\n\n## endif of configuration for ROSE_USE_INTEL_PIN\n\n#endif\n\n#\n\n#EXTRA_DIST = \\\n\n#     README dynamicStaticBinaryAnalysis.C staticDynamicBinaryAnalysis.C dynamicBinaryInfo.C \\\n\n#     graphTrace.C imageload.C input_testcode.C commandlineHandling.C\n\n#\n\n#clean-local:\n\n#\trm -f *.o rose_*.[s] *.dot *.pdf *~ *.ps *.out *.new *.dump rose_performance_report_lockfile.lock *.so\n\n#\trm -f pinRoseTranslator.so  input_testcode pin.log\n\n#\trm -rf QMTest\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "tutorial/intelPin/Makefile.am" : {
      "ObjectId" : "1387ab0a426eb873b9e8cd19cfd39a042ef2a436",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# if configured to use Intel Pin\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Refernece location to where some of the example pin tools are located in the Intel Pin distribution.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# INTEL PIN paths are now included in ROSE_INCLUDES with --with-Intel_Pin.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are ROSE analysis applications that mix static and dynamic analysis.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are example Pin tools (some ruse ROSE and demonstrat how to link pin tools with ROSE for mixed analysis).\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# LIBTOOL_RPATH_LDADD = $(ROSE_LIBS_WITH_PATH) $(RT_LIBS) $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n# LIBTOOL_RPATH_LDADD = $(ROSE_LIBS_WITH_PATH) $(RT_LIBS) $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n# as a result is must link to both ROSE and Pin.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# dynamicStaticBinaryAnalysis_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This ROSE application mixes dynamic analysis with static analysis (dynamic analysis first and then static analysis)\n\n# as a result is must link to both ROSE and Pin.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This code demonstrates the commandline handling required to mix Pin with ROSE.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is a general variable to link against (uses -lrose and works with static or dynamic linking):\n\n# NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n# NON_LIBTOOL_RPATH = -Wl,-rpath $(top_builddir)/src/.libs -L$(top_builddir)/src/.libs -lrose $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# **************************************************************************\n\n# This we were we will put test codes (not there yet):\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#  pintest2008_01.C\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#  pintest2008_02.C \n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# \"make check\" tests to be run:\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This is a test code (executable) to be used with the Intel Pin dynamic instrumentation\n\n# (it can be linked staticly or dynamically).\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\tg++ -static $(srcdir)/input_testcode.C -o input_testcode\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# **************************************************************************\n\n# This tests the Intel Pin tool using one of its internal tools (should have been built if Intel Pin was built)\n\n# This tests the installation of Pin and nothing about the use of Pin with ROSE.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# **************************************************************************\n\n# This Pin tool generates a dot graph of the trace of execution of a binary (and uses support functions in ROSE).\n\n# So it must be linked explicitly (not using libtool) and reference either the shared library or the static library.\n\n# When the shared library (librose.so) is used, $(top_builddir)/src/.libs must be in the LD_LIBRARY_PATH.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Test example program generate a graph of the execution trace of a binary\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# **************************************************************************\n\n# This Pin tool generates log of the image loading and unloading (of shared libraries) of a binary\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o imageload.so imageload.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Test example program generate a graph of the execution trace of a binary\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# **************************************************************************\n\n# This Pin tool generates log of the information take from each image (main program and each loaded shared library) of the binary\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldwarf -lelf -ldl\n\n#\tg++ -g -shared -Wl,-Bsymbolic -Wl,--version-script=$(INTEL_PIN_PATH)/source/include/pintool.ver -o dynamicBinaryInfo.so dynamicBinaryInfo.o $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Test example program generates information about the binary (from section data for main program and each shared library).\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# **************************************************************************\n\n# This builds an Intel Pin tool (for testing the command line handling with ROSE)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# **************************************************************************\n\n# This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n# This allows for mixed static and dynamic analysis.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n# This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n# In this case the dynamic instrumentation can call static analysis.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# **************************************************************************\n\n# This builds an Intel Pin tool (for use with Intel Pin dynamic instrumentation) from a ROSE translator.\n\n# This allows for mixed static and dynamic analysis (first static analysis then dynamic analysis).\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# DQ (3/9/2009): This test fails after the Pin Tool is called due to a linking problem with the -lrose shared library.\n\n# This runs the Intel Pin dynamic instumentation on \"input_testcode\" using the ROSE static analysis tool\n\n# In this case the dynamic instrumentation can call static analysis.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# **************************************************************************\n\n# Automake's testing mechanism (which defines the \"make check\" rule) requires passing tests.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# QMTest allows both passing and failing tests.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# File option to accumulate performance information about the compilation\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# $(TEST_Objects): preprocessor $(srcdir)/$(@:.o=.C)\n\n#$(TEST_Objects): \n\n#\techo \"Calling ...\"\n\n#\t$(VALGRIND) ./staticBinaryAnalysis $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.C)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# else of configuration for ROSE_USE_INTEL_PIN\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# endif of configuration for ROSE_USE_INTEL_PIN\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "tutorial/outliner/CMakeLists.txt" : {
      "ObjectId" : "1e4e41baded6214b7bf2772bf67b026a6267a6d3",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install only those executables that are useful to users after ROSE is installed. If the main purpose of compiling\n\n# the tool is to ensure that the source code is correct for the purposes of documentation in the various tutorials,\n\n# then there's no point in installing that executable.\n\n#install(TARGETS outline DESTINATION bin)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tutorial/outliner/Makefile.am" : {
      "ObjectId" : "ba09036c7a4fddc8dc84737d92ef13bebd55a43d",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#==========================================================================\n\n# Outliner tutorial examples.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DQ (4/19/2016): This is required for use with clang (not clear how to compile ROSE with out it).\n\n# OUTLINER_LIBS += -lstdc++\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Data files generated by running the demo.\n\n# noinst_DATA = inputCode_OutlineLoop$(EXEEXT)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (6/25/2011): This appear to be the same failing test code that previously \n\n# didn't output the outlined function, and now that it is is appears to fail.\n\n# I need to work with Liao on this.  Could it be that the friend function\n\n# must include the extern \"C\" specification?\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DQ (6/25/2011): This was the version that worked around a outliner and\n\n# name qualification bug (two bugs, I think).  The name qualification bug\n\n# is now fixed.  This is the same bug as for the moreTest3.C code in the\n\n# tests/nonsmoke/functional/roseTests/astOutliningTests directory.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#docs: $(generatedFiles) \n\n# declarations.c is used to test \"outline -rose:outline:preproc-only\"\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#==========================================================================\n\n# Build demo translators\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# We install a copy\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# A variant using structure wrapper\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#==========================================================================\n\n# Example 1: Basic outlining of a nested loop\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Copies the input file so unparsed output has the desired filename.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#==========================================================================\n\n# Example 2: Non-local jumps demo\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\t$(CXX) -o $@ $<\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\t./outline$(EXEEXT) -o inputCode_OutlineNonLocalJumps$(EXEEXT) $(srcdir)/inputCode_OutlineNonLocalJumps.cc\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# DQ (4/19/2016): This is required for use with clang (not clear how to compile ROSE with out it).\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Copies the input file so unparsed output has the desired filename.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#==========================================================================\n\n# Example 3: Direct-call demo (outline all if statements)\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# inputCode_Ifs$(EXEEXT) rose_inputCode_Ifs.cc: outlineIfs$(EXEEXT)\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#==========================================================================\n\n# Example 4: Running the outliner's preprocessing-only phase.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Copies the input file so unparsed output has the desired filename.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\tif test -x `which $(INDENT_BIN)` ; then \n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Copies the input file so unparsed output has the desired filename.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#========================================================================\n\n# example 5: abstract handle demo\t\n\n# using source file location : a for loop at line 12,\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# using name and relative numbering: the second loop within a function named initialize()\t\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#==========================================================================\n\n# Miscellaneous\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DQ (5/27/2007): Added \"docs\" rule\n\n# docs: $(noinst_PROGRAMS) $(generatedFiles)\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DQ (9/8/2007): Added \"check\" rule\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\tFor make check to be rerun if we want to rerun make clean\n\n#\trm -rf $(generatedFiles)\n\n# DQ (9/10/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# eof\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "tutorial/roseHPCT/CMakeLists.txt" : {
      "ObjectId" : "df2d3ba448f1279df6be1e3925e34c92ec7e315e",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### next target ###############\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########### install files ###############\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: verify DESTINATION, was previosuly blank\n\n#install(\n\n#  FILES profiled.out is-static.tex command-line.tex\tprofiled-p93.pdf\n\n#  DESTINATION include)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#original Makefile.am contents follow:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##==========================================================================\n\n## ROSE-HPCT tutorial example.\n\n#\n\n#include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs\n\n#\n\n#\n\n## HPCToolkit-generated files.\n\n#HPCT_FILES = PAPI_FP_OPS.xml \\\n\n#\t     PAPI_TOT_CYC.xml \\\n\n#\t     PAPI_L1_DCA.xml \\\n\n#\t     PAPI_L1_DCM.xml \\\n\n#\t     PAPI_L2_TCM.xml\n\n#\n\n## Extra files that need to be included in a distribution tarball.\n\n#EXTRA_DIST = $(HPCT_FILES) \\\n\n#\tprofiled.c profiled-save.out profiled-p93-save.pdf \\\n\n#\tcommand-line-static.tex static.tex\n\n#\n\n## Data files generated by running the demo.\n\n#noinst_DATA = profiled.out \\\n\n#\tis-static.tex command-line.tex \\\n\n#\tprofiled-p93.pdf\n\n#\n\n## Split source listings for inclusion in the chapter.\n\n#noinst_DATA += profiled.c.aa profiled.c.ab \\\n\n#\tPAPI_TOT_CYC.xml.aa PAPI_TOT_CYC.xml.ab PAPI_FP_OPS.xml.aa \\\n\n#\tPAPI_FP_OPS.xml.ab\n\n#\n\n#profiled.c.ab : profiled.c.aa\n\n#\n\n## This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n## profiled.c.aa profiled.c.ab: $(srcdir)/profiled.c\n\n#profiled.c.aa : $(srcdir)/profiled.c\n\n#\tsplit -65 $(srcdir)/profiled.c profiled.c.\n\n#\ttest -f profiled.c.aa\n\n#\ttest -f profiled.c.ab\n\n#\n\n#PAPI_TOT_CYC.xml.ab: PAPI_TOT_CYC.xml.aa\n\n#\n\n## This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n## PAPI_TOT_CYC.xml.aa PAPI_TOT_CYC.xml.ab: $(srcdir)/PAPI_TOT_CYC.xml\n\n#PAPI_TOT_CYC.xml.aa : $(srcdir)/PAPI_TOT_CYC.xml\n\n#\tsplit -61 $(srcdir)/PAPI_TOT_CYC.xml PAPI_TOT_CYC.xml.\n\n#\n\n#PAPI_FP_OPS.xml.ab: PAPI_FP_OPS.xml.aa\n\n#\n\n## This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n## PAPI_FP_OPS.xml.aa PAPI_FP_OPS.xml.ab: $(srcdir)/PAPI_FP_OPS.xml\n\n#PAPI_FP_OPS.xml.aa : $(srcdir)/PAPI_FP_OPS.xml\n\n#\tsplit -61 $(srcdir)/PAPI_FP_OPS.xml PAPI_FP_OPS.xml.\n\n#\n\n##==========================================================================\n\n#if ROSE_BUILD_ROSEHPCT # (--enable-rosehpct)\n\n##==========================================================================\n\n#\n\n## DQ (3/21/2009): These fail to compile under Cygwin.\n\n#if !ROSE_BUILD_OS_IS_CYGWIN\n\n#\n\n## Build demo program\n\n#noinst_PROGRAMS = attachMetrics\n\n#attachMetrics_SOURCES = attachMetrics.cc\n\n#attachMetrics_LDFLAGS = \\\n\n#\t$(ROSE_ROSEHPCT_LIBS_WITH_PATH) \\\n\n#\t$(ROSE_LIBS_WITH_PATH) \\\n\n#\t$(ROSEHPCT_DEP_LIBS) \\\n\n#\t$(RT_LIBS)\n\n#INCLUDES = $(ROSE_INCLUDES) $(ROSE_ROSEHPCT_INCLUDES) $(ROSEHPCT_DEP_INCLUDES)\n\n#\n\n## Extra data generated that needs to be cleaned up\n\n#noinst_DATA += profiled.c.pdf\n\n#\n\n#profiled.c.pdf command-line.tex: profiled.out\n\n#\n\n## Run demo program\n\n## This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n## profiled.out profiled.c.pdf command-line.tex: attachMetrics $(HPCT_FILES) $(srcdir)/profiled.c\n\n#profiled.out: attachMetrics $(HPCT_FILES) $(srcdir)/profiled.c\n\n#\tcmdline=\"./attachMetrics -rose:hpct:prof $(srcdir)/PAPI_TOT_CYC.xml -rose:hpct:prof $(srcdir)/PAPI_FP_OPS.xml -rose:hpct:eqpath .=`cd $(srcdir) && pwd` -c $(srcdir)/profiled.c\" ; \\\n\n#\techo $$cmdline \\\n\n#\t  | sed 's,-rose:hpct:,\\\\\\n  -rose:hpct,g' \\\n\n#\t  | sed 's, -c ,\\\\\\n  -c ,g' \\\n\n#\t  > command-line.tex ; \\\n\n#\t$$cmdline > profiled.out\n\n#\n\n## Liao, 5/9/2008. the page number has been changed to 67 in recent snapshot, pdf dump is much more thorough than before for unknown reasons to me.\n\n#profiled-p93.pdf: profiled.c.pdf\n\n#\tif ! gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=$@ \\\n\n#\t    -dFirstPage=67 -dLastPage=67 profiled.c.pdf ; then \\\n\n#\t  cp $(srcdir)/profiled-p93-save.pdf $@ ; \\\n\n#\tfi\n\n#\n\n## Generate additional file for tutorial chapter.\n\n#is-static.tex:\n\n#\trm -f $@\n\n#\ttouch $@\n\n#\n\n#else\n\n#\n\n## DQ (3/21/2009): Copy the required files (just as for the case of --disable-rosehpct)\n\n#profiled.out: $(srcdir)/profiled-save.out\n\n#\tcp $(srcdir)/profiled-save.out $@\n\n#\n\n#profiled-p93.pdf: $(srcdir)/profiled-p93-save.pdf\n\n#\tcp $(srcdir)/profiled-p93-save.pdf $@\n\n#\n\n#is-static.tex: $(srcdir)/static.tex\n\n#\tcp $(srcdir)/static.tex $@\n\n#\n\n#command-line.tex: $(srcdir)/command-line-static.tex\n\n#\tcp $(srcdir)/command-line-static.tex $@\n\n#\n\n#endif\n\n#\n\n##==========================================================================\n\n#else # !ROSE_BUILD_ROSEHPCT (--disable-rosehpct)\n\n##==========================================================================\n\n#\n\n## ROSE-HPCT not enabled, so just use pre-generated data.\n\n#\n\n#profiled.out: $(srcdir)/profiled-save.out\n\n#\tcp $(srcdir)/profiled-save.out $@\n\n#\n\n#profiled-p93.pdf: $(srcdir)/profiled-p93-save.pdf\n\n#\tcp $(srcdir)/profiled-p93-save.pdf $@\n\n#\n\n#is-static.tex: $(srcdir)/static.tex\n\n#\tcp $(srcdir)/static.tex $@\n\n#\n\n#command-line.tex: $(srcdir)/command-line-static.tex\n\n#\tcp $(srcdir)/command-line-static.tex $@\n\n#\n\n#endif # ROSE_BUILD_ROSEHPCT\n\n#\n\n##==========================================================================\n\n## Miscellaneous\n\n#\n\n#clean-local:\n\n#\trm -rf $(CXX_TEMPLATE_OBJECTS) Templates.DB ii_files ti_files\n\n#\trm -f $(noinst_DATA) rose_profiled.c\n\n#\n\n#distclean-local:\n\n#\trm -rf Templates.DB\n\n#\trm -f $(noinst_DATA)\n\n#\n\n## DQ (5/27/2007): Added docs rule\n\n#docs: $(noinst_PROGRAMS) $(noinst_DATA)\n\n#\t@echo \"\"\n\n#\t@echo \"***************************************************************************\"\n\n#\t@echo \"Generated required documentation for tutorial/roseHPCT (make docs rule) ...\"\n\n#\t@echo \"***************************************************************************\"\n\n#\n\n## eof\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tutorial/roseHPCT/Makefile.am" : {
      "ObjectId" : "f9436d79243e331a6f6e4b50f96349f00b651090",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# ==========================================================================\n\n# ROSE-HPCT tutorial example.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HPCToolkit-generated files.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Extra files that need to be included in a distribution tarball.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DQ (12/20/2009): Avoid using noinst_DATA since automake will cause it \n\n# to be generated at compile time instead of in the \"make check\" rule \n\n# as we want it to be done.\n\n# Data files generated by running the demo.\n\n# noinst_DATA = profiled.out\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Split source listings for inclusion in the chapter.\n\n# noinst_DATA += profiled.c.aa profiled.c.ab \\\n# XXXGENERATED_FILES += profiled.c.aa profiled.c.ab \\\n#\tPAPI_TOT_CYC.xml.aa PAPI_TOT_CYC.xml.ab PAPI_FP_OPS.xml.aa \\\n#\tPAPI_FP_OPS.xml.ab\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n# profiled.c.aa profiled.c.ab: $(srcdir)/profiled.c\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n# PAPI_TOT_CYC.xml.aa PAPI_TOT_CYC.xml.ab: $(srcdir)/PAPI_TOT_CYC.xml\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n# PAPI_FP_OPS.xml.aa PAPI_FP_OPS.xml.ab: $(srcdir)/PAPI_FP_OPS.xml\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#==========================================================================\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# (--enable-rosehpct)\n",
        "Line" : 62,
        "CharPositionInLine" : 23
      },
      "10" : {
        "Text" : "#==========================================================================\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DQ (3/21/2009): These fail to compile under Cygwin.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Build demo program\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DQ (12/21/2009): Automake complains about this!\n\n# Extra data generated that needs to be cleaned up\n\n# noinst_DATA += profiled.c.pdf\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Run demo program\n\n# This needs to be fixed to have a single lhs entry so that parallel make will work.\n\n# profiled.out profiled.c.pdf command-line.tex: attachMetrics $(HPCT_FILES) $(srcdir)/profiled.c\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Liao, 5/9/2008. the page number has been changed to 67 in recent snapshot, pdf dump is much more thorough than before for unknown reasons to me.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Generate additional file for tutorial chapter.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DQ (3/21/2009): Copy the required files (just as for the case of --disable-rosehpct)\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#==========================================================================\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# !ROSE_BUILD_ROSEHPCT (--disable-rosehpct)\n",
        "Line" : 126,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "#==========================================================================\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ROSE-HPCT not enabled, so just use pre-generated data.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ROSE_BUILD_ROSEHPCT\n",
        "Line" : 143,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "#==========================================================================\n\n# Miscellaneous\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\trm -f $(noinst_DATA) rose_profiled.c\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\tAdded this here to avoid added file via \"ROSE_GENERATED_FILES add-equal profiled.c.pdf\" above (automake complained about this).\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\trm -f $(noinst_DATA)\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# DQ (5/27/2007): Added docs rule\n\n# docs: $(noinst_PROGRAMS) $(noinst_DATA)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# docs: $(noinst_PROGRAMS)\n\n#\t@echo \"Calling MAKE ROSE_GENERATED_FILES\"\n\n#\t$(MAKE) $(ROSE_GENERATED_FILES)\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# DQ (12/20/2009): Added make check rule.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# eof\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "tutorial/spawn-frontend/Makefile" : {
      "ObjectId" : "56f48cda30e451f88df09a088e526be53eba3d96",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "utilities/CMakeLists.txt" : {
      "ObjectId" : "d17118ae6c538cc798bcd43afd9460d1046d285a",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### install files ###############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utilities/Makefile.am" : {
      "ObjectId" : "92abd800e5d75132b576fd266dbc2931bd939de1",
      "LastModified" : "2019-04-15T13:51:56Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# copy the tools (scripts only) from the source tree to the source destination in the distribution\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install the tools in 'bin'\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 543,
    "CMAKESOURCE" : 3,
    "QMAKE" : 2,
    "MAKEFILE" : 45,
    "AUTOMAKE" : 894
  },
  "ElapsedTime" : 7762
}