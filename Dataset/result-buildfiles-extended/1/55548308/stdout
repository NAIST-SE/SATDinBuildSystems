{
  "Repository" : "55548308",
  "Revision" : "HEAD",
  "ObjectId" : "d56f6eb93f89007277be3b3df05bea7f7a6bcb81",
  "CommitTime" : "2019-04-18T22:04:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "02effb5e8f97161a57e1984268a52a899110b5ba",
      "LastModified" : "2018-06-29T16:46:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See docs/CMake.html for instructions about how to build LLVM with CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# automatic when 2.8.12 is required\n",
        "Line" : 10,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# CMake 3.1 and higher include generator expressions of the form\n\n# $<TARGETLIB:obj> in the SOURCES property.  These need to be\n\n# stripped everywhere that access the SOURCES property, so we just\n\n# defer to the OLD behavior of not including generator expressions\n\n# in the output for now.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# This requires a more recent version than CMake 3.4 but is a noop in prior versions. # HLSL Change\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# HLSL Change\n",
        "Line" : 31,
        "CharPositionInLine" : 86
      },
      "5" : {
        "Text" : "# The following only works with the Ninja generator in CMake >= 3.0.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# HLSL Change\n",
        "Line" : 82,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# HLSL Change\n",
        "Line" : 83,
        "CharPositionInLine" : 80
      },
      "9" : {
        "Text" : "# HLSL Change\n",
        "Line" : 84,
        "CharPositionInLine" : 96
      },
      "10" : {
        "Text" : "# HLSL Change Starts - support commit querying\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# HLSL Chnage Ends\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# HLSL Change Starts - set flag for Appveyor CI\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# SPIRV change starts\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Enable SPIR-V CodeGen for Linux by default.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# SPIRV change ends\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Configure CPack.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# HLSL Change - disable CPack\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# HLSL Change - disable CPack\n",
        "Line" : 159,
        "CharPositionInLine" : 9
      },
      "20" : {
        "Text" : "# Sanity check our source directory to make sure that we are not trying to\n\n# generate an in-tree build (unless on MSVC_IDE, where it is ok), and to make\n\n# sure that we don't have any stray generated files lying around in the tree\n\n# (which would end up getting picked up by header search, instead of the correct\n\n# versions).\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# HLSL Change - change FATAL_ERROR to WARNING to avoid problems with extraneous files\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Each of them corresponds to llvm-config's.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# --bindir\n\n# --libdir\n\n# --src-root\n\n# --includedir\n\n# --prefix\n",
        "Line" : 208,
        "CharPositionInLine" : 57
      },
      "26" : {
        "Text" : "# HLSL removed targets AArch64, ARM, BPF, CppBackend, Hexagon, Mips, MSP430, PowerPC, Sparc, SystemZ, X86, XCore\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# List of targets with JIT support:\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Verify we are on a supported platform\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# If enabled, verify we are on a platform that supports oprofile.\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Define an option controlling whether we should build for 32-bit on 64-bit\n\n# platforms, where supported.\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 329,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user to\n\n# override.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Define options to control the inclusion and default build behavior for\n\n# components which may not strictly be necessary (tools, examples, and tests).\n\n#\n\n# This is primarily to support building smaller or faster project files.\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# All options referred to from HandleLLVMOptions have to be specified\n\n# BEFORE this include, otherwise options will not be correctly set on\n\n# first cmake run\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Verify that we can find a Python 2 interpreter.  Python 3 is unsupported.\n\n# FIXME: We should support systems with only Python 3, but that requires work\n\n# on LLDB.\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "######\n\n# LLVMBuild Integration\n\n#\n\n# We use llvm-build to generate all the data required by the CMake based\n\n# build system in one swoop:\n\n#\n\n#  - We generate a file (a CMake fragment) in the object root which contains\n\n#    all the definitions that are required by CMake.\n\n#\n\n#  - We generate the library table used by llvm-config.\n\n#\n\n#  - We generate the dependencies for the CMake fragment, so that we will\n\n#    automatically reconfigure outselves.\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Create the list of optional components that are enabled\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# HLSL Change: use 'Unknown' in place of \"${LLVM_NATIVE_ARCH}\"\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# On Win32, CMake doesn't properly handle piping the default output/error\n\n# streams into the GUI console. So, we explicitly catch and report them.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Include the generated CMake fragment. This will define properties from the\n\n# LLVMBuild files in a format which is easy to consume from CMake, and will add\n\n# the dependencies so that CMake will reconfigure properly when the LLVMBuild\n\n# files change.\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "######\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Configure all of the various header file fragments LLVM uses which depend on\n\n# configuration variables.\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# HLSL Change - support for no target, but no continue() in CMake 2.8\n",
        "Line" : 484,
        "CharPositionInLine" : 28
      },
      "46" : {
        "Text" : "# HLSL Change - support for no target\n",
        "Line" : 511,
        "CharPositionInLine" : 10
      },
      "47" : {
        "Text" : "# Produce the target definition files, which provide a way for clients to easily\n\n# include various classes of targets.\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Configure the three LLVM configuration header files.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# They are not referenced. See set_output_directory().\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Work around a broken bfd ld behavior. When linking a binary with a\n\n# foo.so library, it will try to find any library that foo.so uses and\n\n# check its symbols. This is wasteful (the check was done when foo.so\n\n# was created) and can fail since it is not the dynamic linker and\n\n# doesn't know how to handle search paths correctly.\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# HLSL Change Starts - override assert to RaiseException instead of abort\n\n# for better test behavior\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# HLSL Change\n",
        "Line" : 584,
        "CharPositionInLine" : 54
      },
      "54" : {
        "Text" : "# when crosscompiling import the executable targets from a file\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# On FreeBSD, /usr/local/* is not used by default. In order to build LLVM\n\n# with libxml2, iconv.h, etc., we must add /usr/local paths.\n",
        "Line" : 592,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Make sure we don't get -rdynamic in every binary. For those that need it,\n\n# use export_executable_symbols(target).\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# enable warnings as errors for debug build\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# People report that -O3 is unreliable on MinGW. The traditional\n\n# build also uses -O2 for that reason:\n",
        "Line" : 615,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Put this before tblgen. Else we have a circular dependence.\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# HLSL Change\n",
        "Line" : 622,
        "CharPositionInLine" : 32
      },
      "61" : {
        "Text" : "# HLSL Change\n\n# HLSL Change\n",
        "Line" : 628,
        "CharPositionInLine" : 38
      },
      "62" : {
        "Text" : "# add_subdirectory(utils/FileCheck) # HLSL Change\n\n# add_subdirectory(utils/FileUpdate) # HLSL Change\n\n# add_subdirectory(utils/count) # HLSL Change\n\n# add_subdirectory(utils/not) # HLSL Change\n\n# add_subdirectory(utils/llvm-lit) # HLSL Change\n\n# add_subdirectory(utils/yaml-bench) # HLSL Change\n",
        "Line" : 634,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# SPIRV change\n",
        "Line" : 666,
        "CharPositionInLine" : 29
      },
      "64" : {
        "Text" : "# HLSL Change - never build examples\n",
        "Line" : 674,
        "CharPositionInLine" : 34
      },
      "65" : {
        "Text" : "# HLSL Change - never build tests/unittests\n",
        "Line" : 678,
        "CharPositionInLine" : 31
      },
      "66" : {
        "Text" : "# This utility is used to prevent crashing tests from calling Dr. Watson on\n\n# Windows.\n",
        "Line" : 682,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 687,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by \"*.def\"\n",
        "Line" : 729,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 69
    },
    "cmake/config-ix.cmake" : {
      "ObjectId" : "3203d1ea708b30c96f6058f602caa73708008663",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We consider Cygwin as another Unix\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Used by check_symbol_exists:\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# x86_64 FreeBSD 9.2 requires libcxxrt to be specified explicitly.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Helper macros and functions\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include checks\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# size_t must be defined before including cxxabi.h on FreeBSD 10.0.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# library checks\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# this could be Android\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# function checks\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# available programs checks\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Define LLVM_HAS_ATOMICS if gcc or MSVC atomic builtins are supported.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Disable gcc's potentially uninitialized use analysis as it presents lots of\n\n# false positives.\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Only recent versions of gcc make the distinction between -Wuninitialized\n\n# and -Wmaybe-uninitialized. If -Wmaybe-uninitialized isn't supported, just\n\n# turn off all uninitialized use warnings.\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# By default, we target the host, but this can be overridden at CMake\n\n# invocation time.\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Determine the native architecture.\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If build targets includes \"host\", then replace with native architecture.\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We don't have an ASM parser for all architectures yet.\n",
        "Line" : 388,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We don't have an disassembler for all architectures yet.\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# TODO: Check existence of libraries.\n\n#   include(CheckLibraryExists)\n",
        "Line" : 402,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Use _strtoi64 if strtoll is not available.\n",
        "Line" : 407,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# See if the DIA SDK is available and usable.\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Due to a bug in MSVC 2013's installation software, it is possible\n\n# for MSVC 2013 to write the DIA SDK into the Visual Studio 2012\n\n# install directory.  If this happens, the installation is corrupt\n\n# and there's nothing we can do.  It happens with enough frequency\n\n# though that we should handle it.  We do so by simply checking that\n\n# the DIA SDK folder exists.  Should this happen you will need to\n\n# uninstall VS 2012 and then re-install VS 2013.\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# FIXME: Signal handler return type, currently hardcoded to 'void'\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Check if threading primitives aren't supported on this platform\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Check if zlib is available in the system.\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# If we find doxygen and we want to enable doxygen by default create a\n\n# global aggregate doxygen target for generating llvm and any/all\n\n# subprojects doxygen documentation.\n",
        "Line" : 485,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "cmake/modules/AddLLVM.cmake" : {
      "ObjectId" : "bf7faa34ebd73fe87f92b45a23180cc44041f9d0",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_REQUIRES_EH is an internal flag that individual\n\n# targets can use to force EH\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# FIXME: Remove this once clang-cl supports SEH\n",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# LLVM_REQUIRES_RTTI is an internal flag that individual\n\n# targets can use to force RTTI\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# HLSL Changes Start\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This is just the default exception handling on Linux\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# HLSL Changes End\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Assume that;\n\n#   - LLVM_COMPILE_FLAGS is list.\n\n#   - PROPERTY COMPILE_FLAGS is string.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Update target props, since all sources are C++.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Gold and BFD ld require a version script rather than a plain list.\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# FIXME: Don't write the \"local:\" line on OpenBSD.\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Force re-linking when the exports file changes. Actually, it\n\n# forces recompilation of the source file. The LINK_DEPENDS target\n\n# property only works for makefile-based generators.\n\n# FIXME: This is not safe because this will create the same target\n\n# ${native_export_file} in several different file:\n\n# - One where we emitted ${target_name}_exports\n\n# - One where we emitted the build command for the following object.\n\n# set_property(SOURCE ${first_source_file} APPEND PROPERTY\n\n#   OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${native_export_file})\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Add dependency to *_exports later -- CMake issue 14747\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Don't use linker optimizations in debug builds since it slows down the\n\n# linker in a context where the optimizations are not important.\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Pass -O3 to the linker. This enabled different optimizations on different\n\n# linkers.\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# With gold gc-sections is always safe.\n",
        "Line" : 177,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Note that there is a bug with -Wl,--icf=safe so it is not safe\n\n# to enable. See https://sourceware.org/bugzilla/show_bug.cgi?id=17704.\n",
        "Line" : 180,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# ld64's implementation of -dead_strip breaks tools that use plugins.\n",
        "Line" : 186,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Object files are compiled with -ffunction-data-sections.\n\n# Versions of bfd ld < 2.23.1 have a bug in --gc-sections that breaks\n\n# tools that use plugins. Always pass --gc-sections once we require\n\n# a newer linker.\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Set each output directory according to ${CMAKE_CONFIGURATION_TYPES}.\n\n# Note: Don't set variables CMAKE_*_OUTPUT_DIRECTORY any more,\n\n# or a certain builder, for eaxample, msbuild.exe, would be confused.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Do nothing if *_OUTPUT_INTDIR is empty.\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# moddir -- corresponding to LIBRARY_OUTPUT_DIRECTORY.\n\n# It affects output of add_library(MODULE).\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# DLL platform\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# If on Windows and building with MSVC, add the resource script containing the\n\n# VERSIONINFO data to the project.  This embeds version resource information\n\n# into the output .exe or .dll.\n\n# TODO: Enable for MinGW Windows builds too.\n\n#\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# set_windows_version_resource_properties(name resource_file...\n\n#   VERSION_MAJOR int\n\n#     Optional major version number (defaults to LLVM_VERSION_MAJOR)\n\n#   VERSION_MINOR int\n\n#     Optional minor version number (defaults to LLVM_VERSION_MINOR)\n\n#   VERSION_PATCHLEVEL int\n\n#     Optional patchlevel version number (defaults to LLVM_VERSION_PATCH)\n\n#   VERSION_STRING\n\n#     Optional version string (defaults to PACKAGE_VERSION)\n\n#   PRODUCT_NAME\n\n#     Optional product name string (defaults to \"LLVM\")\n\n#   )\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# llvm_add_library(name sources...\n\n#   SHARED;STATIC\n\n#     STATIC by default w/o BUILD_SHARED_LIBS.\n\n#     SHARED by default w/  BUILD_SHARED_LIBS.\n\n#   MODULE\n\n#     Target ${name} might not be created on unsupported platforms.\n\n#     Check with \"if(TARGET ${name})\".\n\n#   OUTPUT_NAME name\n\n#     Corresponds to OUTPUT_NAME in target properties.\n\n#   DEPENDS targets...\n\n#     Same semantics as add_dependencies().\n\n#   LINK_COMPONENTS components...\n\n#     Same as the variable LLVM_LINK_COMPONENTS.\n\n#   LINK_LIBS lib_targets...\n\n#     Same semantics as target_link_libraries().\n\n#   ADDITIONAL_HEADERS\n\n#     May specify header files for IDE generators.\n\n#   )\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Pass through ADDITIONAL_HEADERS.\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Generate objlib\n",
        "Line" : 362,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Generate an obj library for both targets.\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Do add_dependencies(obj) later due to CMake issue 14747.\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# static\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# DEPENDS has been appended to LLVM_COMMON_LIBS.\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# objlib\n",
        "Line" : 387,
        "CharPositionInLine" : 27
      },
      "32" : {
        "Text" : "# FIXME: Add name_static to anywhere in TARGET ${name}'s PROPERTY.\n",
        "Line" : 391,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 440,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Add the explicit dependency information for this library.\n\n#\n\n# It would be nice to verify that we have the dependencies for this library\n\n# name, but using get_property(... SET) doesn't suffice to determine if a\n\n# property has been set to an empty value.\n",
        "Line" : 451,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Link libs w/o keywords, assuming PUBLIC.\n",
        "Line" : 464,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# We can use PRIVATE since SO knows its dependent libs.\n",
        "Line" : 477,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Add dependencies also to objlibs.\n\n# CMake issue 14747 --  add_dependencies() might be ignored to objlib's user.\n",
        "Line" : 487,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# The gtest libraries should not be installed or exported as a target\n",
        "Line" : 506,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 549,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# DLL platform\n",
        "Line" : 557,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# Do not add -Dname_EXPORTS to the command-line when building files in this\n\n# target. Doing so is actively harmful for the modules build because it\n\n# creates extra module variants, and not useful because we don't use these\n\n# macros.\n",
        "Line" : 592,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# MSVC's linker doesn't support exporting all symbols.\n",
        "Line" : 611,
        "CharPositionInLine" : 16
      },
      "43" : {
        "Text" : "# Add external project that may want to be built as part of llvm such as Clang,\n\n# lld, and Polly. This adds two options. One for the source directory of the\n\n# project, which defaults to ${CMAKE_CURRENT_SOURCE_DIR}/${name}. Another to\n\n# enable or disable building it with everything else.\n\n# Additional parameter can be specified as the name of directory.\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#TODO: Remove this check in a few days once it has circulated through\n\n# buildbots and people's checkouts (cbieneman - July 14, 2015)\n",
        "Line" : 703,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Generic support for adding a unittest.\n",
        "Line" : 751,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# SPIRV change\n",
        "Line" : 753,
        "CharPositionInLine" : 55
      },
      "47" : {
        "Text" : "# SPIRV change\n\n# SPIRV change\n",
        "Line" : 757,
        "CharPositionInLine" : 59
      },
      "48" : {
        "Text" : "# gtest_main # SPIRV change\n",
        "Line" : 774,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# gtest needs it for raw_ostream.\n",
        "Line" : 775,
        "CharPositionInLine" : 16
      },
      "50" : {
        "Text" : "# FIXME: This should depend only on the libraries Go needs.\n",
        "Line" : 789,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# This function provides an automatic way to 'configure'-like generate a file\n\n# based on a set of common and custom variables, specifically targeting the\n\n# variables needed for the 'lit.site.cfg' files. This function bundles the\n\n# common variables that any Lit instance is likely to need, and custom\n\n# variables can be passed in.\n",
        "Line" : 815,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Configuration-time: See Unit/lit.site.cfg.in\n",
        "Line" : 828,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# They below might not be the build tree but provided binary tree.\n",
        "Line" : 835,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# SHLIBDIR points the build tree.\n",
        "Line" : 841,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# FIXME: \"ENABLE_SHARED\" doesn't make sense, since it is used just for\n\n# plugins. We may rename it.\n",
        "Line" : 845,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# A raw function to create a lit target. This is used to implement the testuite\n\n# management functions.\n",
        "Line" : 869,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Tests should be excluded from \"Build Solution\".\n",
        "Line" : 902,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# A function to add a set of lit test suites to be driven through 'check-*' targets.\n",
        "Line" : 906,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# EXCLUDE_FROM_ALL excludes the test ${target} out of check-all.\n",
        "Line" : 910,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Register the testsuites, params and depends for the global check rule.\n",
        "Line" : 912,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Produce a specific suffixed check rule.\n",
        "Line" : 919,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 955,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 973,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 64
    },
    "cmake/modules/AddLLVMDefinitions.cmake" : {
      "ObjectId" : "33ac9731db5db73a9813f2da571980b0e7cc407c",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There is no clear way of keeping track of compiler command-line\n\n# options chosen via `add_definitions', so we need our own method for\n\n# using it on tools/llvm-config/CMakeLists.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Beware that there is no implementation of remove_llvm_definitions.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We don't want no semicolons on LLVM_DEFINITIONS:\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/AddOCaml.cmake" : {
      "ObjectId" : "8b33332d07bcd5d046987c18da3abd52c2085282",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build rules for the OCaml language.\n\n# Assumes FindOCaml is used.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# add_ocaml_library(pkg_a OCAML mod_a OCAMLDEP pkg_b C mod_a_stubs PKG ctypes LLVM core)\n\n#\n\n# Unnamed parameters:\n\n#\n\n#   * Library name.\n\n#\n\n# Named parameters:\n\n#\n\n# OCAML     OCaml module names. Imply presence of a corresponding .ml and .mli files.\n\n# OCAMLDEP  Names of libraries this library depends on.\n\n# C         C stub sources. Imply presence of a corresponding .c file.\n\n# CFLAGS    Additional arguments passed when compiling C stubs.\n\n# PKG       Names of ocamlfind packages this library depends on.\n\n# LLVM      Names of LLVM libraries this library depends on.\n\n# NOCOPY    Do not automatically copy sources (.c, .ml, .mli) from the source directory,\n\n#           e.g. if they are generated.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddSphinxTarget.cmake" : {
      "ObjectId" : "045dc23ca2a83517c135fdf0a9f64318290b1992",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Handy function for creating the different Sphinx targets.\n\n#\n\n# ``builder`` should be one of the supported builders used by\n\n# the sphinx-build command.\n\n#\n\n# ``project`` should be the project name\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Quiet: no output other than errors and warnings.\n",
        "Line" : 22,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# Treat warnings as errors if requested\n",
        "Line" : 23,
        "CharPositionInLine" : 62
      },
      "3" : {
        "Text" : "# Source\n",
        "Line" : 24,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# Output\n",
        "Line" : 25,
        "CharPositionInLine" : 50
      },
      "5" : {
        "Text" : "# When \"clean\" target is run, remove the Sphinx build directory\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# We need to remove ${SPHINX_DOC_TREE_DIR} when make clean is run\n\n# but we should only add this path once\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Handle installation\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# FIXME: We might not ship all the tools that these man pages describe\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Slash indicates contents of\n",
        "Line" : 52,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 10
    },
    "cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "5f3f255628d66371e7b2176ff04de65169cfcf8d",
      "LastModified" : "2017-01-25T01:54:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate LLVMConfig.cmake for the build tree.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For compatibility with projects that include(LLVMConfig)\n\n# via CMAKE_MODULE_PATH, place API modules next to it.\n\n# This should be removed in the future.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate LLVMConfig.cmake for the install tree.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Construct the proper number of get_filename_component(... PATH)\n\n# calls to compute the installation prefix.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate LLVMConfigVersion.cmake for build and install tree.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/CheckAtomic.cmake" : {
      "ObjectId" : "551de6ade84c0766d09540b188dacd8ee021666c",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# atomic builtins are required for threading support.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sometimes linking against libatomic is required for atomic ops, if\n\n# the platform doesn't support lock-free atomics.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This isn't necessary on MSVC, so avoid command-line switch annoyance\n\n# by only running on GCC-like hosts.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First check if atomics work without the library.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## TODO: This define is only used for the legacy atomic operations in\n\n## llvm's Atomic.h, which should be replaced.  Other code simply\n\n## assumes C++11 <atomic> works.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/ChooseMSVCCRT.cmake" : {
      "ObjectId" : "0e6e1aa55254e51480ba489e54c545c7a6accc25",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The macro choose_msvc_crt() takes a list of possible\n\n# C runtimes to choose from, in the form of compiler flags,\n\n# to present to the user. (MTd for /MTd, etc)\n\n#\n\n# The macro is invoked at the end of the file.\n\n#\n\n# CMake already sets CRT flags in the CMAKE_CXX_FLAGS_* and\n\n# CMAKE_C_FLAGS_* variables by default. To let the user\n\n# override that for each build type:\n\n# 1. Detect which CRT is already selected, and reflect this in\n\n# LLVM_USE_CRT_* so the user can have a better idea of what\n\n# changes they're making.\n\n# 2. Replace the flags in both variables with the new flag via a regex.\n\n# 3. set() the variables back into the cache so the changes\n\n# are user-visible.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Helper macros: ###\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Trying to match the beginning or end of the string with stuff\n\n# like [ ^]+ didn't work, so use a bunch of parentheses instead.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find the selected-by-CMake CRT for each build type, if any.\n\n# Strip off the leading slash and any whitespace.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Replaces or adds a flag to a variable.\n\n# Expects 'flag' to be padded with spaces.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure this change gets reflected in the cache/gui.\n\n# CMake requires the docstring parameter whenever set() touches the cache,\n\n# so get the existing docstring and re-use that.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# List of valid CRTs for MSVC\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/CrossCompile.cmake" : {
      "ObjectId" : "76a3078a54405f12cc811142e244d918488c0ca5",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindD3D12.cmake" : {
      "ObjectId" : "01e7a3ae9a3952ca5085faea4c2fe6c6957ca476",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the win10 SDK path.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# WIN10_SDK_PATH will be something like C:\\Program Files (x86)\\Windows Kits\\10\n\n# WIN10_SDK_VERSION will be something like 10.0.14393 or 10.0.14393.0; we need the\n\n# one that matches the directory name.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the d3d12 and dxgi include path, it will typically look something like this.\n\n# C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\um\\d3d12.h\n\n# C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\dxgi1_4.h\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set variable D3D12_INCLUDE_DIR\n",
        "Line" : 23,
        "CharPositionInLine" : 31
      },
      "4" : {
        "Text" : "# Find a path with d3d12.h\n",
        "Line" : 24,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# Set variable DXGI_INCLUDE_DIR\n\n# Find a path with dxgi1_4.h\n",
        "Line" : 30,
        "CharPositionInLine" : 30
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set D3D12_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindDiaSDK.cmake" : {
      "ObjectId" : "f11e5117ff0e1d47f75f1a8a4710f69de6e85d3c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the DIA SDK path.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VS_PATH32 will be something like C:/Program Files (x86)/Microsoft Visual Studio 14.0/Common7/IDE\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also look for in vs15 install.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the DIA SDK path, it will typically look something like this.\n\n# C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\DIA SDK\\include\n\n# C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\DIA SDK\\include\\dia2.h\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set variable DIASDK_INCLUDE_DIR\n\n# Find a path with dia2.h\n",
        "Line" : 15,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set DIASDK_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindOCaml.cmake" : {
      "ObjectId" : "8eba2127df1b361d9b70728d9f09a85753eb3286",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() module for the OCaml language.\n\n# Assumes ocamlfind will be used for compilation.\n\n# http://ocaml.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(OCaml)\n\n#\n\n# If successful, the following variables will be defined:\n\n# OCAMLFIND\n\n# OCAML_VERSION\n\n# OCAML_STDLIB_PATH\n\n# HAVE_OCAMLOPT\n\n#\n\n# Also provides find_ocamlfind_package() macro.\n\n#\n\n# Example usage:\n\n#\n\n# find_ocamlfind_package(ctypes)\n\n#\n\n# In any case, the following variables are defined:\n\n#\n\n# HAVE_OCAML_${pkg}\n\n#\n\n# If successful, the following variables will be defined:\n\n#\n\n# OCAML_${pkg}_VERSION\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's optional and the constraint is not satisfied, pretend\n\n# it wasn't found.\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "9d252e8b70aef4abf8a8da21eb0248bea53137a6",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() Module for Sphinx documentation generator\n\n# http://sphinx-doc.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Sphinx)\n\n#\n\n# If successful the following variables will be defined\n\n# SPHINX_FOUND\n\n# SPHINX_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set SPHINX_FOUND to true if SPHINX_EXECUTABLE exists\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide options for controlling different types of output\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindTAEF.cmake" : {
      "ObjectId" : "4253fdc8b12af7e7dc4d57991df3bd83e368da62",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the TAEF path that supports x86 and x64.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the TAEF path, it will typically look something like this.\n\n# \"C:\\Program Files (x86)\\Windows Kits\\8.1\\Testing\\Development\\inc\"\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Work around behavior for environment names allows chars.\n\n# Set variable TAEF_INCLUDE_DIR\n\n# Find a path with Wex.Common.h\n",
        "Line" : 7,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# Prefer the version that supports both x86 and x64, else prefer latest.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TAEF_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/GetHostTriple.cmake" : {
      "ObjectId" : "671a8ce7d7ce2e0b3f99516f3424fd38573568ba",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns the host triple.\n\n# Invokes config.guess\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/GetSVN.cmake" : {
      "ObjectId" : "d512bd292cf43f3f875e5063b5725e1fc6597f89",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake project that writes Subversion revision information to a header.\n\n#\n\n# Input variables:\n\n#   FIRST_SOURCE_DIR  - First source directory\n\n#   FIRST_NAME        - The macro prefix for the first repository's info\n\n#   SECOND_SOURCE_DIR - Second source directory (opt)\n\n#   SECOND_NAME       - The macro prefix for the second repository's info (opt)\n\n#   HEADER_FILE       - The header file to write\n\n#\n\n# The output header will contain macros FIRST_REPOSITORY and FIRST_REVISION,\n\n# and SECOND_REPOSITORY and SECOND_REVISION if requested, where \"FIRST\" and\n\n# \"SECOND\" are substituted with the names specified in the input variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Chop off cmake/modules/GetSVN.cmake \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle strange terminals\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If svn is a bat file, find_program(Subversion) doesn't find it.\n\n# Explicitly search for that here; Subversion_SVN_EXECUTABLE will override\n\n# the find_program call in FindSubversion.cmake.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Copy the file only if it has changed.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/HandleLLVMOptions.cmake" : {
      "ObjectId" : "ea277c932851a7652b898fefc3e34ded034db134",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for interpreting the user defined LLVM_\n\n# options and executing the appropriate CMake commands to realize the users'\n\n# selections.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is commonly needed so make sure it's defined before we include anything\n\n# else.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Otherwise, test that we aren't using too old of a version of libstdc++\n\n# with the Clang compiler. This is tricky as there is no real way to\n\n# check the version of libstdc++ directly. Instead we test for a known\n\n# bug in libstdc++4.6 that is fixed in libstdc++4.7.\n",
        "Line" : 30,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# MSVC doesn't like _DEBUG on release builds. See PR 4379.\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# HLSL Change\n",
        "Line" : 63,
        "CharPositionInLine" : 62
      },
      "5" : {
        "Text" : "# HLSL Change\n",
        "Line" : 64,
        "CharPositionInLine" : 65
      },
      "6" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 65,
        "CharPositionInLine" : 9
      },
      "7" : {
        "Text" : "# On non-Debug builds cmake automatically defines NDEBUG, so we\n\n# explicitly undefine it:\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 82,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# We don't need to do anything special to turn off ABI breaking checks.\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Treat LLVM_ABI_BREAKING_CHECKS like \"FORCE_OFF\" when it has not been\n\n# defined.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# We use *.dylib rather than *.so on darwin.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Darwin-specific linker flags for loadable modules.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Pass -Wl,-z,defs. This makes sure all symbols are defined. Otherwise a DSO\n\n# build might work on ELF but fail on MachO/COFF.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Xcode has -mdynamic-no-pic on by default, which overrides -fPIC. I don't\n\n# know how to disable this, so just force ENABLE_PIC off for now.\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# On Windows all code is PIC. MinGW warns if -fPIC is used.\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# MinGW warns if -fvisibility-inlines-hidden is used.\n",
        "Line" : 189,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# TODO: support other platforms and toolchains.\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# For Xcode enable several build settings that correspond to\n\n# many warnings that are on by default in Clang but are\n\n# not enabled for historical reasons.  For versions of Xcode\n\n# that do not support these options they will simply\n\n# be ignored.\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# On Win32 using MS tools, provide an option to set the number of parallel jobs\n\n# to use.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set stack reserved size to ~10MB\n\n# CMake previously automatically set this value for MSVC builds, but the\n\n# behavior was changed in CMake 2.8.11 (Issue 12437) to use the MSVC default\n\n# value (1 MB) which is not enough for us in tasks such as parsing recursive\n\n# C++ templates in Clang.\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Add definitions that make MSVC much less annoying.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For some reason MS wants to deprecate a bunch of standard functions...\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Disabled warnings.\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Suppress 'unary minus operator applied to unsigned type, result still unsigned'\n\n# Suppress 'qualifier applied to function type has no meaning; ignored'\n\n# Suppress ''argument' : conversion from 'type1' to 'type2', possible loss of data'\n\n# Suppress ''var' : definition from the for loop is ignored; the definition from the enclosing scope is used'\n\n# Suppress ''var' : conversion from 'size_t' to 'type', possible loss of data'\n\n# Suppress ''declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception'\n\n# Suppress 'behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized'\n\n# Suppress 'new behavior: elements of array 'array' will be default initialized'\n\n# Suppress ''this' : used in base member initializer list'\n\n# Suppress 'declaration of 'var' hides local variable'\n\n# Suppress 'declaration of 'var' hides function parameter'\n\n# Suppress 'declaration of 'var' hides class member'\n\n# Suppress 'declaration of 'var' hides global declaration'\n\n# Suppress ''identifier' : decorated name length exceeded, name was truncated'\n\n# Suppress ''derived class' : destructor could not be generated because a base class destructor is inaccessible'\n\n# Suppress 'function' : destructor never returns, potential memory leak\n\n# Suppress ''type' : forcing value to bool 'true' or 'false' (performance warning)'\n\n# Suppress 'unreferenced formal parameter'\n\n# Suppress 'conditional expression is constant'\n\n# Suppress 'assignment operator could not be generated'\n\n# Suppress 'unreferenced local function has been removed'\n\n# Suppress '<class> can never be instantiated'\n\n# Suppress 'default constructor could not be generated'\n\n# Suppress 'unreachable code'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'assignment within conditional expression'\n\n# Suppress 'cast truncates constant value'\n\n# Suppress 'potentially uninitialized local variable'\n\n# Suppress 'potentially uninitialized local pointer variable'\n\n# Suppress 'signed/unsigned mismatch'\n\n# Suppress 'interaction between '_setjmp' and C++ object destruction is non-portable'\n\n# Suppress 'unsafe mix of type <type> and type <type> in operation'\n\n# Suppress 'nonstandard extension used : non-constant aggregate initializer'\n",
        "Line" : 281,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# Ideally, we'd like this warning to be enabled, but MSVC 2013 doesn't\n\n# support the 'aligned' attribute in the way that clang sources requires (for\n\n# any code that uses the LLVM_ALIGNAS macro), so this is must be disabled to\n\n# avoid unwanted alignment warnings.\n\n# When we switch to requiring a version of MSVC that supports the 'alignas'\n\n# specifier (MSVC 2015?) this warning can be re-enabled.\n",
        "Line" : 315,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Suppress 'structure was padded due to __declspec(align())'\n",
        "Line" : 321,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "# Promoted warnings.\n\n# HLSL Change - don't do this - -w14062 # Promote 'enumerator in switch of enum is not handled' to level 1 warning.\n",
        "Line" : 323,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Promoted warnings to errors.\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Promote 'nonstandard extension used : class rvalue used as lvalue' to error.\n",
        "Line" : 327,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# HLSL Changes Start\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Change release to always build debug information out-of-line, but\n\n# also enable Reference optimization, ie dead function elimination.\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# HLSL Changes End\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Enable warnings\n",
        "Line" : 343,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# CMake appends /W3 by default, and having /W3 followed by /W4 will result in \n\n# cl : Command line warning D9025 : overriding '/W3' with '/W4'.  Since this is\n\n# a command line warning and not a compiler warning, it cannot be suppressed except\n\n# by fixing the command line.\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# No MSVC equivalent available\n",
        "Line" : 354,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Disable sized deallocation if the flag is supported. MSVC fails to compile\n\n# the operator new overload in User otherwise.\n",
        "Line" : 365,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Disable unknown pragma warnings because the output is just too long with them.\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Colorize GCC output even with ninja's stdout redirection.\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Turn off missing field initializer warnings for gcc to avoid noise from\n\n# false positives with empty {}. Turn them on otherwise (they're off by\n\n# default for clang).\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# add_flag_if_supported(\"-Wcovered-switch-default\" COVERED_SWITCH_DEFAULT_FLAG) # HLSL Change\n",
        "Line" : 397,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# HLSL Change\n",
        "Line" : 398,
        "CharPositionInLine" : 42
      },
      "43" : {
        "Text" : "# Check if -Wnon-virtual-dtor warns even though the class is marked final.\n\n# If it does, don't add it. So it won't be added on clang 3.4 and older.\n\n# This also catches cases when -Wnon-virtual-dtor isn't supported by\n\n# the compiler at all.\n",
        "Line" : 402,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Check if -Wcomment is OK with an // comment ending with '\\' if the next\n\n# line is also a // comment.\n",
        "Line" : 416,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# MinGW and Cygwin are a bit stricter and lack things like\n\n# 'strdup', 'stricmp', etc in c++11 mode.\n",
        "Line" : 438,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# Check that we can build code with modules enabled, and that repeatedly\n\n# including <cassert> still manages to respect NDEBUG properly.\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Append -fno-omit-frame-pointer and turn on debug info to get better\n\n# stack traces.\n",
        "Line" : 470,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Use -O1 even in debug mode, otherwise sanitizers slowdown is too large.\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Turn on sanitizers if necessary.\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Turn on -gsplit-dwarf if requested\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# clang doesn't print colored diagnostics when invoked from Ninja\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Add flags for add_dead_strip().\n\n# FIXME: With MSVS, consider compiling with /Gy and linking with /OPT:REF?\n\n# But MinSizeRel seems to add that automatically, so maybe disable these\n\n# flags instead if LLVM_NO_DEAD_STRIP is set.\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Don't add -ffunction-section if it can be disabled with -fno-function-sections.\n\n# Doing so will break sanitizers.\n",
        "Line" : 543,
        "CharPositionInLine" : 6
      },
      "54" : {
        "Text" : "# Prune --out-implib from executables. It doesn't make sense even\n\n# with --export-all-symbols.\n",
        "Line" : 552,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Remove flags here, for exceptions and RTTI.\n\n# Each target property or source property should be responsible to control\n\n# them.\n\n# CL.EXE complains to override flags like \"/GR /GR-\".\n",
        "Line" : 561,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Provide public options to globally control RTTI and EH\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Plugin support\n\n# FIXME: Make this configurable.\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 58
    },
    "cmake/modules/HandleLLVMStdlib.cmake" : {
      "ObjectId" : "66ad078fb66eea495ac64a387f201dc36b535eee",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake module is responsible for setting the standard library to libc++\n\n# if the user has requested it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/LLVM-Config.cmake" : {
      "ObjectId" : "9248571adc98fbb2ddb5094c8fa9a021a9f78809",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sets variable `return_var' to ON if `library' corresponds to a\n\n# LLVM supported target. To OFF if it doesn't.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Use plain form for legacy user.\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This is Deprecated\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is a variant intended for the final user:\n\n# Map LINK_COMPONENTS to actual libnames.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Inside LLVM itself available libs are in a global property.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Expand some keywords:\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Translate symbolic component names to real libraries:\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# add codegen, asmprinter, asmparser, disassembler\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# HLSL Change\n",
        "Line" : 100,
        "CharPositionInLine" : 40
      },
      "9" : {
        "Text" : "# already processed\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# same case as in `native'.\n",
        "Line" : 130,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# already processed\n",
        "Line" : 132,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Link all the asm printers from all the targets\n",
        "Line" : 136,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Link all the asm parsers from all the targets\n",
        "Line" : 143,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Link all the descs from all the targets\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Link all the disassemblers from all the targets\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Link all the infos from all the targets\n",
        "Line" : 164,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Canonize the component name:\n",
        "Line" : 171,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# The component is unknown. Maybe is an omitted target?\n",
        "Line" : 175,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Perform a post-order traversal of the dependency graph.\n\n# This duplicates the algorithm used by llvm-config, originally\n\n# in tools/llvm-config/llvm-config.cpp, function ComputeLibsForComponents.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Expand dependencies while topologically sorting the list of libraries:\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Return just the libraries included in this build:\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/modules/LLVMProcessSources.cmake" : {
      "ObjectId" : "0069ed3306d77a98f91e767af69574ccda8edf13",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Replaces a compiler option or switch `old' in `var' by `new'.\n\n# If `old' is not in `var', appends `new' to `var'.\n\n# Example: llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-O2\")\n\n# If the option already is on the variable, don't add it:\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This adds .td and .h files to the Visual Studio solution:\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# HLSL Change - case insensitive\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Don't reject hidden files. Some editors create backups in the\n\n# same directory as the file.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# HLSL Change - case insensitive\n",
        "Line" : 85,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : "# HLSL Change - support HLSL_IGNORE_SOURCES\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/TableGen.cmake" : {
      "ObjectId" : "85d720e91fd74d79240901a24cdab5f3aec79b4d",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LLVM_TARGET_DEFINITIONS must contain the name of the .td file to process.\n\n# Extra parameters for `tblgen' may come after `ofn' parameter.\n\n# Adds the name of the generated file to TABLEGEN_OUTPUT.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Validate calling context.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Generate tablegen output in a temporary file.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The file in LLVM_TARGET_DEFINITIONS may be not in the current\n\n# directory and local_tds may not contain it, so we must\n\n# explicitly list it here:\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Only update the real output file if there are any differences.\n\n# This prevents recompilation of all the files depending on it if there\n\n# aren't any.\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# `make clean' must remove all those generated files:\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Creates a target for publicly exporting tablegen dependencies.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Upgrade existing LLVM_TABLEGEN setting.\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Effective tblgen executable to be used:\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/modules/VersionFromVCS.cmake" : {
      "ObjectId" : "f8b32f3d1e4ce149fdd5e66383cea9cce254ccb4",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds version control information to the variable VERS. For\n\n# determining the Version Control System used (if any) it inspects the\n\n# existence of certain subdirectories under CMAKE_CURRENT_SOURCE_DIR.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindSubversion does not work with symlinks. See PR 8437\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Try to get a ref-id\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Determine if the HEAD points directly at a subversion revision.\n",
        "Line" : 40,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# HLSL Change - if no .git/svn, grab the hash \n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/platforms/Android.cmake" : {
      "ObjectId" : "2a6f5a5e45b78d753e7f90e2198381ce544153db",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for Android NDK.\n\n# This is expected to be used with a standalone Android toolchain (see\n\n# docs/STANDALONE-TOOLCHAIN.html in the NDK on how to get one).\n\n#\n\n# Usage:\n\n# mkdir build; cd build\n\n# cmake ..; make\n\n# mkdir android; cd android\n\n# cmake -DLLVM_ANDROID_TOOLCHAIN_DIR=/path/to/android/ndk \\\n\n#   -DCMAKE_TOOLCHAIN_FILE=../../cmake/platforms/Android.cmake ../..\n\n# make <target>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/platforms/iOS.cmake" : {
      "ObjectId" : "49140590ab2b917304f640a774aaa95f19acd729",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Toolchain config for iOS.\n\n#\n\n# Usage:\n\n# mkdir build; cd build\n\n# cmake ..; make\n\n# mkdir ios; cd ios\n\n# cmake -DLLVM_IOS_TOOLCHAIN_DIR=/path/to/ios/ndk \\\n\n#   -DCMAKE_TOOLCHAIN_FILE=../../cmake/platforms/iOS.cmake ../..\n\n# make <target>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "2388a92d39ef7c26e3868abbe82ad09ec050e8bd",
      "LastModified" : "2016-12-28T19:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "463d60b19c50ecb2ad4dfd579d9e2844cc846ffd",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/ModuleMaker/CMakeLists.txt" : {
      "ObjectId" : "a73909a13bd48eadeaa9382dddc9c0c3b41002f2",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/CMakeLists.txt" : {
      "ObjectId" : "b55b58b62d5e3cd4bfa8fbdc10309f6139b4f35e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define root location for all external dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enabling SPIR-V codegen requires SPIRV-Headers for spirv.hpp and\n\n# SPIRV-Tools for SPIR-V disassembling functionality.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We only need the library from SPIRV-Tools.\n",
        "Line" : 26,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Organize these targets better in Visual Studio\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# We need GoogleTest for unit and SPIR-V codegen testing.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Configure googletest\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# We need Effcee for SPIR-V codegen testing.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# re2 is needed since it's required by effcee.\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Avoid exception handling warning from MSVC.\n\n# This add_compile_options() will only affect the current directory and its subdirectories.\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Disable all warnings in subproject RE2\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Don't build/run re2's tests.\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Configure effcee\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Don't build/run effcee's tests.\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Organize these targets better in Visual Studio\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "external/GTestConfig.cmake" : {
      "ObjectId" : "26bd86588ebc8e1b29ee9db1860c0e1cf6f07d5d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# Experimental CMake build script for Google Test.\n\n#\n\n# Consider this a prototype.  It will change drastically.  For now,\n\n# this is only for people on the cutting edge.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n\n########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where gtest's .h files can be found.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disable all warnings in subproject googletest\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "include/dxc/Support/CMakeLists.txt" : {
      "ObjectId" : "3090a8dca2e33cc9b66f6d4211bf3f4b4d594b98",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# TableGen HLSL options.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "include/dxc/Tracing/CMakeLists.txt" : {
      "ObjectId" : "47f0c4529618ddcaa83b1f7ebfdb49cddd6741f7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Generate ETW instrumentation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create the header in a temporary file and only update when necessary,\n\n# to avoid invalidating targets that depend on it.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Not quite tablegen, but close enough.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "include/llvm/CMakeLists.txt" : {
      "ObjectId" : "ff805396eb0c85af96dde63c972bd56b957c904f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we're doing an out-of-tree build, copy a module map for generated\n\n# header files into the build area.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "include/llvm/Config/config.h.cmake" : {
      "ObjectId" : "b9fd4504ad76719c747ca178a7219a76e6565e34",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* include/llvm/Config/config.h.cmake corresponding to config.h.in. */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Exported configuration */",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define if you want backtraces on crash */",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to enable crash overrides */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to disable C++ atexit */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define if position independent code is enabled */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define if timestamp information (e.g., __DATE__) is allowed */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the `arc4random' function. */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the `backtrace' function. */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the `bcopy' function. */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the `closedir' function. */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the <cxxabi.h> header file. */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define to 1 if you have the <CrashReporterClient.h> header file. */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* can use __crashreporter_info__ */",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you\n   don't. */",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define to 1 if you have the DIA SDK installed, and to 0 if you don't. */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define if you have the GNU dld library. */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define to 1 if you have the `dlerror' function. */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to 1 if you have the <dlfcn.h> header file. */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define if dlopen() is available on this platform. */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define if you have the _dyld_func_lookup function. */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define to 1 if you have the <errno.h> header file. */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define to 1 if you have the <execinfo.h> header file. */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to 1 if you have the <fcntl.h> header file. */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define to 1 if you have the <fenv.h> header file. */",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define if libffi is available on this platform. */",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define to 1 if you have the <ffi/ffi.h> header file. */",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define to 1 if you have the <ffi.h> header file. */",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Define to 1 if you have the `futimes' function. */",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Define to 1 if you have the `futimens' function */",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Define to 1 if you have the `getcwd' function. */",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Define to 1 if you have the `getpagesize' function. */",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Define to 1 if you have the `getrlimit' function. */",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Define to 1 if you have the `getrusage' function. */",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Define to 1 if you have the `gettimeofday' function. */",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Define to 1 if the system has the type `int64_t'. */",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Define to 1 if you have the <inttypes.h> header file. */",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Define to 1 if you have the `isatty' function. */",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Define if you have the libdl library or equivalent. */",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Define to 1 if you have the `m' library (-lm). */",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* Define to 1 if you have the `ole32' library (-lole32). */",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* Define to 1 if you have the `psapi' library (-lpsapi). */",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* Define to 1 if you have the `pthread' library (-lpthread). */",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Define to 1 if you have the `shell32' library (-lshell32). */",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Define to 1 if you have the 'z' library (-lz). */",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Define to 1 if you have the 'edit' library (-ledit). */",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Define to 1 if you have the <limits.h> header file. */",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Define to 1 if you have the <link.h> header file. */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Define if you can use -rdynamic. */",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* Define if you can use -Wl,-R. to pass -R. to the linker, in order to add\n   the current directory to the dynamic linker search path. */",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Define to 1 if you have the `longjmp' function. */",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Define to 1 if you have the <mach/mach.h> header file. */",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Define to 1 if you have the <mach-o/dyld.h> header file. */",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Define if mallinfo() is available on this platform. */",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Define to 1 if you have the <malloc.h> header file. */",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Define to 1 if you have the <malloc/malloc.h> header file. */",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Define to 1 if you have the `malloc_zone_statistics' function. */",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Define to 1 if you have the `mallctl` function. */",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Define to 1 if you have the `mkdtemp' function. */",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Define to 1 if you have the `mkstemp' function. */",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Define to 1 if you have the `mktemp' function. */",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Define to 1 if you have a working `mmap' system call. */",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Define if mmap() uses MAP_ANONYMOUS to map anonymous pages, or undefine if\n   it uses MAP_ANON */",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Define if mmap() can map files into memory */",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Define to 1 if you have the `opendir' function. */",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* Define to 1 if you have the `posix_spawn' function. */",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Define to 1 if you have the `pread' function. */",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "/* Define if libtool can extract symbol lists from object files. */",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "/* Define to have the %a format string */",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "/* Have pthread_getspecific */",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "/* Define to 1 if you have the <pthread.h> header file. */",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "/* Have pthread_mutex_lock */",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "/* Have pthread_rwlock_init */",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "/* Define to 1 if srand48/lrand48/drand48 exist in <stdlib.h> */",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "/* Define to 1 if you have the `readdir' function. */",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* Define to 1 if you have the `realpath' function. */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "/* Define to 1 if you have the `sbrk' function. */",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Define to 1 if you have the `setenv' function. */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "/* Define to 1 if you have the `setjmp' function. */",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "/* Define to 1 if you have the `setrlimit' function. */",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "/* Define if you have the shl_load function. */",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "/* Define to 1 if you have the `siglongjmp' function. */",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "/* Define to 1 if you have the <signal.h> header file. */",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "/* Define to 1 if you have the `sigsetjmp' function. */",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "/* Define to 1 if you have the <stdint.h> header file. */",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "/* Set to 1 if the std::isinf function is found in <cmath> */",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "/* Set to 1 if the std::isnan function is found in <cmath> */",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "/* Define to 1 if you have the `strdup' function. */",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "/* Define to 1 if you have the `strerror' function. */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "/* Define to 1 if you have the `strerror_r' function. */",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Define to 1 if you have the `strtoll' function. */",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "/* Define to 1 if you have the `strtoq' function. */",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "/* Define to 1 if you have the `sysconf' function. */",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "/* Define to 1 if you have the <sys/ioctl.h> header file. */",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "/* Define to 1 if you have the <sys/mman.h> header file. */",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "/* Define to 1 if you have the <sys/param.h> header file. */",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "/* Define to 1 if you have the <sys/resource.h> header file. */",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "/* Define to 1 if you have the <sys/stat.h> header file. */",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "/* Define to 1 if you have the <sys/time.h> header file. */",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "/* Define to 1 if you have the <sys/types.h> header file. */",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "/* Define to 1 if you have the <sys/uio.h> header file. */",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* Define if the setupterm() function is supported this platform. */",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "/* Define to 1 if you have the <termios.h> header file. */",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "/* Define to 1 if the system has the type `uint64_t'. */",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "/* Define to 1 if you have the <utime.h> header file. */",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "/* Define to 1 if the system has the type `u_int64_t'. */",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "/* Define to 1 if you have the <valgrind/valgrind.h> header file. */",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "/* Define to 1 if you have the `writev' function. */",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "/* Define to 1 if you have the <zlib.h> header file. */",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "/* Have host's _alloca */",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "/* Have host's __alloca */",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "/* Have host's __ashldi3 */",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "/* Have host's __ashrdi3 */",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "/* Have host's __chkstk */",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "/* Have host's __chkstk_ms */",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "/* Have host's __cmpdi2 */",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "/* Have host's __divdi3 */",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "/* Define to 1 if you have the `__dso_handle' function. */",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "/* Have host's __fixdfdi */",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "/* Have host's __fixsfdi */",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "/* Have host's __floatdidf */",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "/* Have host's __lshrdi3 */",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "/* Have host's __main */",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "/* Have host's __moddi3 */",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "/* Have host's __udivdi3 */",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "/* Have host's __umoddi3 */",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "/* Have host's ___chkstk */",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "/* Have host's ___chkstk_ms */",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "/* Installation directory for binary executables */",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "/* Time at which LLVM was configured */",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "/* Installation directory for data files */",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "/* Target triple LLVM will generate code for by default */",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "/* Installation directory for documentation */",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "/* Define if LLVM is built with asserts and checks that change the layout of\n   client-visible data structures.  */",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "/* Define if zlib compression is available */",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "/* Installation directory for config files */",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "/* Installation directory for include files */",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "/* Installation directory for .info files */",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "/* Installation directory for man pages */",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "/* LLVM architecture name for the native architecture, if available */",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "151" : {
        "Text" : "/* LLVM name for the native AsmParser init function, if available */",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "152" : {
        "Text" : "/* LLVM name for the native AsmPrinter init function, if available */",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "/* LLVM name for the native Disassembler init function, if available */",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "/* LLVM name for the native Target init function, if available */",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "/* LLVM name for the native TargetInfo init function, if available */",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "/* LLVM name for the native target MC init function, if available */",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "/* Define if this is Win32ish platform */",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "/* Installation prefix directory */",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "/* LLVM version string */",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "/* Define if the OS needs help to load dependent libraries for dlopen(). */",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "/* Define to the sub-directory in which libtool stores uninstalled libraries.\n   */",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "/* Define to the extension used for shared libraries, say, \".so\". */",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "/* Define to the system default library search path. */",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "171" : {
        "Text" : "/* Define if /dev/zero should be used when mapping RWX memory, or undefine if\n   its not necessary */",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "172" : {
        "Text" : "/* Define if dlsym() requires a leading underscore in symbol names. */",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "173" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "174" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "/* Define to the one symbol short name of this package. */",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "178" : {
        "Text" : "/* Define as the return type of signal handlers (`int' or `void'). */",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "/* Define to 1 if the `S_IS*' macros in <sys/stat.h> do not work properly. */",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "180" : {
        "Text" : "/* Define to 1 if you have the ANSI C header files. */",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "181" : {
        "Text" : "/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "/* Define to 1 if your <sys/time.h> declares `struct tm'. */",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "/* Type of 1st arg on ELM Callback */",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "184" : {
        "Text" : "/* Define to `int' if <sys/types.h> does not define. */",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "185" : {
        "Text" : "/* Define to `unsigned int' if <sys/types.h> does not define. */",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "186" : {
        "Text" : "/* Define to a function replacing strtoll */",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "187" : {
        "Text" : "/* Define to a function implementing strtoull */",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "188" : {
        "Text" : "/* Define to a function implementing stricmp */",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "/* Define to a function implementing strdup */",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "190" : {
        "Text" : "/* Define to 1 if you have the `_chsize_s' function. */",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 191
    },
    "include/llvm/Config/llvm-config.h.cmake" : {
      "ObjectId" : "e0f30678c0abdb30cabd04b25312df0581a63760",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/llvm-config.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file enumerates variables from the LLVM configuration so that they\n   can be in exported headers and won't override package specific directives.\n   This is a C header that can be included in the llvm-c headers. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Installation directory for binary executables */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Time at which LLVM was configured */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Installation directory for data files */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Target triple LLVM will generate code for by default */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Installation directory for documentation */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define if LLVM is built with asserts and checks that change the layout of\n   client-visible data structures.  */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Installation directory for config files */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Installation directory for include files */",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Installation directory for .info files */",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Installation directory for man pages */",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* LLVM architecture name for the native architecture, if available */",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* LLVM name for the native AsmParser init function, if available */",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* LLVM name for the native AsmPrinter init function, if available */",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* LLVM name for the native Disassembler init function, if available */",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* LLVM name for the native Target init function, if available */",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* LLVM name for the native TargetInfo init function, if available */",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* LLVM name for the native target MC init function, if available */",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define if this is Win32ish platform */",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Installation prefix directory */",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* LLVM version string */",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "include/llvm/IR/CMakeLists.txt" : {
      "ObjectId" : "dd8e04f1510c657185cc5d860a5841f7e2ece736",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/llvm/Support/DataTypes.h.cmake" : {
      "ObjectId" : "c90bf51afaeef176a902129f40673b0ac5aeb97a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===-- include/Support/DataTypes.h - Define fixed size types -----*- C -*-===*\\\n|*                                                                            *|\n|*                     The LLVM Compiler Infrastructure                       *|\n|*                                                                            *|\n|* This file is distributed under the University of Illinois Open Source      *|\n|* License. See LICENSE.TXT for details.                                      *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*|\n|*                                                                            *|\n|* This file contains definitions to figure out the size of _HOST_ data types.*|\n|* This file is important because different host OS's define different macros,*|\n|* which makes portability tough.  This file exports the following            *|\n|* definitions:                                                               *|\n|*                                                                            *|\n|*   [u]int(32|64)_t : typedefs for signed and unsigned 32/64 bit system types*|\n|*   [U]INT(8|16|32|64)_(MIN|MAX) : Constants for the min and max values.     *|\n|*                                                                            *|\n|* No library is required when using these functions.                         *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Please leave this file C-compatible. */",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Please keep this file in sync with DataTypes.h.in */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Note that this header's correct operation depends on __STDC_LIMIT_MACROS\n   being defined.  We would define it here, but in order to prevent Bad Things\n   happening when system headers or C++ STL headers include stdint.h before we\n   define it here, we define it on the g++ command line (in Makefile.rules). */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Note that <inttypes.h> includes <stdint.h>, if this is a C99 system. */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Handle incorrect definition of uint64_t as u_int64_t */",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Set defaults for constants which we cannot find. */",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "lib/Analysis/CMakeLists.txt" : {
      "ObjectId" : "272dec324d27ef913983ce9f17030057a08698f0",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - ignore file\n",
        "Line" : 1,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 1
    },
    "lib/Analysis/IPA/CMakeLists.txt" : {
      "ObjectId" : "6095136d60a18ccd6b9badf16458ebb1447d4de6",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "0d72723210591fbac9fcc52a92446095a2c498dc",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AsmParser\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Bitcode/CMakeLists.txt" : {
      "ObjectId" : "ff7e290cad1bbdc568b68286489c747d8f245de7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Bitcode/Reader/CMakeLists.txt" : {
      "ObjectId" : "4192c1ffa879c11b3386054f33bee3bb496b5150",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# BitReader.cpp # HLSL Change - this is just the C wrapper\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "lib/Bitcode/Writer/CMakeLists.txt" : {
      "ObjectId" : "82dc6b24137de2d9c76a08fd805ea2154285caf7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "abb8eed90346a7aca707eb71db05341f1f10b62c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# `Support' and `TableGen' libraries are added on the top-level CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(CodeGen) # HLSL Change\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_subdirectory(MC) # HLSL Change\n\n# add_subdirectory(Object) # HLSL Change\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_subdirectory(DebugInfo) # HLSL Change\n\n# add_subdirectory(ExecutionEngine) # HLSL Change\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add_subdirectory(LineEditor) # HLSL Change\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add_subdirectory(Fuzzer) # HLSL Change\n\n# add_subdirectory(Passes) # HLSL Change\n\n# add_subdirectory(LibDriver) # HLSL Change\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# HLSL Change\n",
        "Line" : 23,
        "CharPositionInLine" : 29
      },
      "7" : {
        "Text" : "# HLSL Change\n\n# HLSL Change\n",
        "Line" : 24,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# HLSL Change\n\n# HLSL Change\n",
        "Line" : 26,
        "CharPositionInLine" : 32
      },
      "9" : {
        "Text" : "# HLSL Change\n",
        "Line" : 28,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# HLSL Change\n",
        "Line" : 29,
        "CharPositionInLine" : 28
      },
      "11" : {
        "Text" : "# HLSL Change\n",
        "Line" : 30,
        "CharPositionInLine" : 13
      },
      "12" : {
        "Text" : "# HLSL Change\n",
        "Line" : 31,
        "CharPositionInLine" : 36
      },
      "13" : {
        "Text" : "# HLSL Change\n",
        "Line" : 32,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 14
    },
    "lib/CodeGen/AsmPrinter/CMakeLists.txt" : {
      "ObjectId" : "ba2f61a448283a767c00e8db6c26176562d81569",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "2f78068364507a8b231536ce98b3ab3b8c5e6b4c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  WinEHPrepare.cpp\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/CodeGen/MIRParser/CMakeLists.txt" : {
      "ObjectId" : "7e757f68208f76858a47cbf03257c67b1e4444cc",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CodeGen/SelectionDAG/CMakeLists.txt" : {
      "ObjectId" : "c4059fa2327ab2d5cad1f9d9da2cadcf0e51b8c7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - ignore file\n",
        "Line" : 1,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 1
    },
    "lib/DXIL/CMakeLists.txt" : {
      "ObjectId" : "3ab8a9301766bc1ba886cde8976fea51fd6d3e5c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/DebugInfo/CMakeLists.txt" : {
      "ObjectId" : "645d92fef228be56e27719249a23ed49b4d3294b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/DWARF/CMakeLists.txt" : {
      "ObjectId" : "d5f8a6f24eec7d51084ea0da4a2f6d3e577e6c07",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DebugInfo/PDB/CMakeLists.txt" : {
      "ObjectId" : "1645a95aac36dd1d063a4a3b20dfe0e54b116de5",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/DxcSupport/CMakeLists.txt" : {
      "ObjectId" : "beaf97c967e1749acb449add897951f558a4ad76",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/DxilContainer/CMakeLists.txt" : {
      "ObjectId" : "fa2eca2076e8db10ab3903a77ae4b20145976a5b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/DxilDia/CMakeLists.txt" : {
      "ObjectId" : "ce3b29e9ddaa527266772cb9b9b8a6b776bfddf3",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used for constants and declarations.\n",
        "Line" : 5,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "lib/DxilPIXPasses/CMakeLists.txt" : {
      "ObjectId" : "9982dce6f0d940c59def5de49aa7e21cab839e1c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/DxilRootSignature/CMakeLists.txt" : {
      "ObjectId" : "6b1d6a3ab0dc280068d59715077ed7aa8184bc14",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/DxrFallback/CMakeLists.txt" : {
      "ObjectId" : "a63878038d6e444c7bab5e34f3d259c9ceb6d3b5",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/CMakeLists.txt" : {
      "ObjectId" : "12631e33a816c62c764887189ed429f445661151",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(MCJIT) # HLSL Change\n\n# add_subdirectory(Orc) # HLSL Change\n\n# add_subdirectory(RuntimeDyld) # HLSL Change\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/ExecutionEngine/IntelJITEvents/CMakeLists.txt" : {
      "ObjectId" : "331d2141b0e224a4ecccc67de8c8971e22f800b6",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/Interpreter/CMakeLists.txt" : {
      "ObjectId" : "4dbc2df4c74f25323075ca5c8a57b4754eecf3c5",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that the path to libffi headers is on the command\n\n# line. That path can be a compiler's non-default path even when\n\n# FFI_INCLUDE_DIR was not used, because cmake has its own paths for\n\n# searching for headers (CMAKE_SYSTEM_INCLUDE_PATH, for instance):\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/ExecutionEngine/MCJIT/CMakeLists.txt" : {
      "ObjectId" : "b1e2bc3d635cf0bf5121f7b6671cd84434b79e8f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/OProfileJIT/CMakeLists.txt" : {
      "ObjectId" : "d585136eb0ace450d8c8d07f00cdcddc792b3c30",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/Orc/CMakeLists.txt" : {
      "ObjectId" : "99fe22c001da0e7cd03fc380a20aff0b08442831",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ExecutionEngine/RuntimeDyld/CMakeLists.txt" : {
      "ObjectId" : "182f98200fc1c62b6a63f2c6ed83b384f0491a8a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Fuzzer/CMakeLists.txt" : {
      "ObjectId" : "8b4d61905d00a154a9ee36207cba4f8de344bb7f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable the coverage and sanitizer instrumentation for the fuzzer itself.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Fuzzer/test/CMakeLists.txt" : {
      "ObjectId" : "a9acec15d4d3b871dafb012789107bb778c3e852",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build all these tests with -O0, otherwise optimizations may merge some\n\n# basic blocks and we'll fail to discover the targets.\n\n# Also enable the coverage instrumentation back (it is disabled\n\n# for the Fuzzer lib)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Fuzzer/test/dfsan/CMakeLists.txt" : {
      "ObjectId" : "2b49831fcdb85208f2fb8fc6b831b5b81b449f51",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests depend on both coverage and dfsan instrumentation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/HLSL/CMakeLists.txt" : {
      "ObjectId" : "c4a7bab68990fecf08c632a0a93e49f57a1e495e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/IR/CMakeLists.txt" : {
      "ObjectId" : "aabeaefc0c7ac30d3c64817007d6138e47519f5d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/IRReader/CMakeLists.txt" : {
      "ObjectId" : "87ea88039ef38047c26d9aef823450645125e51a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/LTO/CMakeLists.txt" : {
      "ObjectId" : "1c099bb029b4d2d1058d00957f9d41d0c5fbb179",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Linker/CMakeLists.txt" : {
      "ObjectId" : "f9d8e0925ae3228a0043fd78c27a09bf9e184da0",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MC/CMakeLists.txt" : {
      "ObjectId" : "6554d6a9e60ebcbb66eb4e3f99110be9d196c6ad",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MC/MCDisassembler/CMakeLists.txt" : {
      "ObjectId" : "f266f8fcd301a235913b63bf54d3c1c0d6560f07",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MC/MCParser/CMakeLists.txt" : {
      "ObjectId" : "99fdd0167993780f81c43be5503cf260ba2f240f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/MSSupport/CMakeLists.txt" : {
      "ObjectId" : "2249f53c9bbc0ce948d7b5338e4aa17d16c7c547",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Object/CMakeLists.txt" : {
      "ObjectId" : "8f10143fccc32dbd150aedc5c27ef991a6a35665",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Option/CMakeLists.txt" : {
      "ObjectId" : "8eb086028da467e0d502b7d89f5260517f75c9a7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Passes/CMakeLists.txt" : {
      "ObjectId" : "6ceac7bd395f532137ab995b42cba1f8fec09bc5",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ProfileData/CMakeLists.txt" : {
      "ObjectId" : "22cca4b44df5a12beaaf05b4f5bafa24589a1fac",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Support/CMakeLists.txt" : {
      "ObjectId" : "1cd4be316d6ebcba47d1489cad366b4465ac6619",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - add ignored sources\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PluginLoader.cpp    # HLSL Change Starts - no support for plug-in loader\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# System\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# HLSL Change\n",
        "Line" : 110,
        "CharPositionInLine" : 18
      },
      "4" : {
        "Text" : "# DynamicLibrary.cpp # HLSL Change - no support for interpreter or jit\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "lib/TableGen/CMakeLists.txt" : {
      "ObjectId" : "9333b6537778052274839645f8763b84429681c0",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Target/CMakeLists.txt" : {
      "ObjectId" : "873f44950b5320ff34533977e4d48d1c7f9ab3d2",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 17,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "# HLSL Change\n",
        "Line" : 20,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 2
    },
    "lib/Transforms/CMakeLists.txt" : {
      "ObjectId" : "3b737ddae367941da523894eeac29e93592c972f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(Instrumentation) # HLSL Change\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(Hello) # HLSL Change\n\n# add_subdirectory(ObjCARC) # HLSL Change\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "lib/Transforms/Hello/CMakeLists.txt" : {
      "ObjectId" : "e0b81907c7fb4190f891b67e7de897116c0417db",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we don't need RTTI or EH, there's no reason to export anything\n\n# from the hello plugin.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Transforms/IPO/CMakeLists.txt" : {
      "ObjectId" : "336dac45e13af4c74b05484be5c74a5a04ef079e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/InstCombine/CMakeLists.txt" : {
      "ObjectId" : "0ed8e6273dbc6474a8a856624438c5196c54016d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Instrumentation/CMakeLists.txt" : {
      "ObjectId" : "9b81f4bb161961f8e73ef0eb4f6993de555d7455",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/ObjCARC/CMakeLists.txt" : {
      "ObjectId" : "fbcae29044c65ee96258661c4e86a78f212d4f6b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Scalar/CMakeLists.txt" : {
      "ObjectId" : "af18a03968d8c59b65476450a8402f1ec0d2cace",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 46,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# HLSL Change\n",
        "Line" : 47,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 2
    },
    "lib/Transforms/Utils/CMakeLists.txt" : {
      "ObjectId" : "716e655affb9a928f3c0e1d15ae2f103a162fcca",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Transforms/Vectorize/CMakeLists.txt" : {
      "ObjectId" : "654d9dc23928d936b20f84c7379e8ed4ce182be8",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  BBVectorize.cpp\n\n#  LoopVectorize.cpp\n\n#  SLPVectorizer.cpp\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "projects/CMakeLists.txt" : {
      "ObjectId" : "d3b2fc37af799e777f1a49275369d84990a2b87a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Discover the projects that use CMake in the subdirectories.\n\n# Note that explicit cmake invocation is required every time a new project is\n\n# added or removed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Also add in libc++ and compiler-rt trees if present (and we have\n\n# a sufficiently recent version of CMake where required).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC isn't quite working with libc++ yet, disable it until issues are\n\n# fixed.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# libc++ uses the libc++abi target names so libc++abi should be added\n\n# first.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "f49df542f4e5fc6e54d2d02cd7f8285ae6014464",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't include check-llvm into check-all without LLVM_BUILD_TOOLS.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the depends list as a variable so that it can grow conditionally.\n\n# NOTE: Sync the substitutions in test/lit.cfg when adding to this list.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If Intel JIT events are supported, depend on a tool that tests the listener.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup a legacy alias for 'check-llvm'. This will likely change to be an\n\n# alias for 'check-all' at some point in the future.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "3430be409b5c0b69771c5f59a70ff99fb3e20cac",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build polly before the tools: the tools link against polly when\n\n# LINK_POLLY_INTO_TOOLS is set.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_llvm_tool_subdirectory(opt) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-as) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-dis) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-mc) # HLSL Change\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HLSL Change Begins\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This target can currently only be built on Windows.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# HLSL Change ends\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add_llvm_tool_subdirectory(llc) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-ar) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-nm) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-size) # HLSL Change\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add_llvm_tool_subdirectory(llvm-cov) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-profdata) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-link) # HLSL Change\n\n# add_llvm_tool_subdirectory(lli) # HLSL Change\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add_llvm_tool_subdirectory(llvm-extract) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-diff) # HLSL Change\n\n# add_llvm_tool_subdirectory(macho-dump) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-objdump) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-readobj) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-rtdyld) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-dwarfdump) # HLSL Change\n\n# add_llvm_tool_subdirectory(dsymutil) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-cxxdump) # HLSL Change\n\n# HLSL Change - remove llvm-jitlistener conditional on LLVM_USE_INTEL_JITEVENTS\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add_llvm_tool_subdirectory(bugpoint) # HLSL Change\n\n# add_llvm_tool_subdirectory(bugpoint-passes) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-bcanalyzer) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-stress) # HLSL Change\n\n# add_llvm_tool_subdirectory(llvm-mcmarkup) # HLSL Change\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add_llvm_tool_subdirectory(verify-uselistorder) # HLSL Change\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add_llvm_tool_subdirectory(llvm-symbolizer) # HLSL Change\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# add_llvm_tool_subdirectory(llvm-c-test) # HLSL Change\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add_llvm_tool_subdirectory(obj2yaml) # HLSL Change\n\n# add_llvm_tool_subdirectory(yaml2obj) # HLSL Change\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add_llvm_tool_subdirectory(llvm-go) # HLSL Change\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# add_llvm_tool_subdirectory(llvm-pdbdump) # HLSL Change\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#   add_llvm_tool_subdirectory(lto) # HLSL Change\n\n#   add_llvm_tool_subdirectory(llvm-lto) # HLSL Change\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add_llvm_tool_subdirectory(gold) # HLSL Change\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add_llvm_external_project(llgo) # HLSL Change\n\n# add_llvm_external_project(lld) # HLSL Change\n\n# add_llvm_external_project(lldb) # HLSL Change\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Automatically add remaining sub-directories containing a 'CMakeLists.txt'\n\n# file as external projects.\n\n# add_llvm_implicit_external_projects() # HLSL Change\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tools/clang/CMakeLists.txt" : {
      "ObjectId" : "f7961046e012300d70ce97fde2e6bb5f01da39a7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: It may be removed when we use 2.8.12.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Invalidate a couple of keywords.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use ${cmake_2_8_12_KEYWORD} intead of KEYWORD in target_link_libraries().\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# automatic when 2.8.12 is required\n",
        "Line" : 13,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# If we are not building as a part of LLVM, build Clang as an\n\n# standalone project, using LLVM as an external library:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Assertions should follow llvm-config's.\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check prebuilt llvm/utils.\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Seek installed Lit.\n",
        "Line" : 141,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 147,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# The libdir suffix must exactly match whatever LLVM's configuration used.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Compute the Clang version from the LLVM version.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Configure the Version.inc file.\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add appropriate flags for GCC\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Enable -pedantic for Clang even if it's not enabled for LLVM.\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Determine HOST_LINK_VERSION on Darwin.\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Syntax:\n\n# clang_tablegen output-file [tablegen-arg ...] SOURCE source-file\n\n# [[TARGET cmake-target-name] [DEPENDS extra-dependency ...]]\n\n#\n\n# Generates a custom command for invoking tblgen as\n\n#\n\n# tblgen source-file -o=output-file tablegen-arg ...\n\n#\n\n# and, if cmake-target-name is provided, creates a custom target for\n\n# executing the custom command depending on output-file. It is\n\n# possible to list more files to depend after DEPENDS.\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Add public headers\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# It may contain unparsed unknown args.\n",
        "Line" : 369,
        "CharPositionInLine" : 32
      },
      "22" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Clang version information\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# All targets below may depend on all tablegen'd files.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# add_subdirectory(examples) # HLSL Change\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# HLSL Change\n",
        "Line" : 494,
        "CharPositionInLine" : 48
      },
      "27" : {
        "Text" : "# HLSL Change - no need for gtest\n",
        "Line" : 495,
        "CharPositionInLine" : 104
      },
      "28" : {
        "Text" : "#  add_subdirectory(test) # HLSL Change - disable pure .lit tests\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Generate a list of CMake library targets so that other CMake projects can\n\n# link against them. LLVM calls its version of this file LLVMExports.cmake, but\n\n# the usual CMake convention seems to be ${Project}Targets.cmake.\n",
        "Line" : 531,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Install a <prefix>/share/clang/cmake/ClangConfig.cmake file so that\n\n# find_package(Clang) works. Install the target list with it.\n",
        "Line" : 539,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Also copy ClangConfig.cmake to the build directory so that dependent projects\n\n# can build against a build directory of Clang more easily.\n",
        "Line" : 547,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 33
    },
    "tools/clang/cmake/modules/ClangConfig.cmake" : {
      "ObjectId" : "f052bb9e8c8e71d06b86fdbe17e4f8056d131413",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file allows users to call find_package(Clang) and pick up our targets.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang doesn't have any CMake configuration settings yet because it mostly\n\n# uses LLVM's. When it does, we should move this file to ClangConfig.cmake.in\n\n# and call configure_file() on it.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide all our library targets to users.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/docs/CMakeLists.txt" : {
      "ObjectId" : "f42439a9bf1c5ba31201acfb7b0bacfe6e5cd69f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tools/clang/examples/CMakeLists.txt" : {
      "ObjectId" : "220058555633608597a276fab645290b286d5e8e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(clang-interpreter) // HLSL Change\n\n# add_subdirectory(PrintFunctionNames) // HLSL Change\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/examples/analyzer-plugin/CMakeLists.txt" : {
      "ObjectId" : "1788d6c5cac96b7073152dee94e0e5870e7e8add",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/include/CMakeLists.txt" : {
      "ObjectId" : "253a09b1012fbb1ed22808a79989363e2a2c6aa8",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/include/clang/AST/CMakeLists.txt" : {
      "ObjectId" : "260734f2200ac94bd4ff3d7e318b74dc982d8ce0",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/include/clang/Basic/CMakeLists.txt" : {
      "ObjectId" : "8fcaee6bd627dfe40da2f6809765977a7bcb8527",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change Start - remove unsupported builtins\n\n# ARM NEON\n\n#clang_tablegen(arm_neon.inc -gen-arm-neon-sema\n\n#  -I ${CMAKE_CURRENT_SOURCE_DIR}/../../\n\n#  SOURCE arm_neon.td\n\n#  TARGET ClangARMNeon)\n\n# HLSL Change Ends - remove unsupported builtins\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/include/clang/CMakeLists.txt" : {
      "ObjectId" : "1d8aecd3b24e41540ffdc6211abaa9e5b1a9d971",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/include/clang/Config/config.h.cmake" : {
      "ObjectId" : "78a508697e83836e9eca1b27c7a00132af211596",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* This generated file is for internal use. Do not include it from headers. */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Default OpenMP runtime used by -fopenmp. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Multilib suffix for libdir. */",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Relative directory for resource files */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Directories clang will search for headers */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Default <path> to all compiler invocations for --sysroot=<path>. */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Directory where gcc is installed. */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define if we have libxml2 */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* The LLVM product name and version */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "tools/clang/include/clang/Driver/CMakeLists.txt" : {
      "ObjectId" : "a9d988047920b0d845e69f0e03f1ef88b68d4556",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/include/clang/Parse/CMakeLists.txt" : {
      "ObjectId" : "ec75f7b96b146e84235d31269de8231c523c0e8f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/include/clang/Sema/CMakeLists.txt" : {
      "ObjectId" : "5a48b901d2bfbda8ad3d798754f602d8c2147acd",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/include/clang/Serialization/CMakeLists.txt" : {
      "ObjectId" : "d91513da99979d5a6b8e55e4d6759a86c0f5d5b1",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/ARCMigrate/CMakeLists.txt" : {
      "ObjectId" : "b716a20fe63f9fc8aaa97bbcce6ae6cfc312c8da",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/AST/CMakeLists.txt" : {
      "ObjectId" : "f594c979df026948d03152ff2d9fe4add9763ea7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 11,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : "# MERGE REVIEW:\n\n#  ClangAttrParsedAttrList  # MS Change - AST will refer to Sema headers\n\n#  ClangAttrParsedAttrKinds # MS Change - AST will refer to Sema headers\n\n#  ClangAttrParsedAttrImpl  # MS Change - AST will refer to Sema headers\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/clang/lib/ASTMatchers/CMakeLists.txt" : {
      "ObjectId" : "03480c7caa7f016cc8a6aa7cfdd987d24285421d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/ASTMatchers/Dynamic/CMakeLists.txt" : {
      "ObjectId" : "df40a68654b7f630f314f6ddca9a239392da7567",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Changes Start\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# otherwise will hit fatal error C1128 on x64\n",
        "Line" : 16,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : "# HLSL Changes End\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/lib/Analysis/CMakeLists.txt" : {
      "ObjectId" : "70c1f297582a56dd2203437785d2a4ec3d164ce0",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - add ignored sources\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/lib/Basic/CMakeLists.txt" : {
      "ObjectId" : "d70f78cd80a8f69d77f1038ec0e30e8add02617b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  MC # HLSL Change\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Figure out if we can track VC revisions.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Git\n\n# SVN 1.7\n\n# SVN 1.6\n",
        "Line" : 19,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# The VC revision include that we want to generate.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create custom target to generate the VC revision include.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Mark the generated header as being generated.\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Tell Version.cpp that it needs to build with -DHAVE_SVN_VERSION_INC.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Not producing a VC revision include.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tools/clang/lib/CMakeLists.txt" : {
      "ObjectId" : "47cb69f0425c763982a6811606bd1c30ca61a063",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(Headers)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(Serialization) # HLSL Change\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SPIRV change starts\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# SPIRV change ends",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tools/clang/lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "52de0de78bc83d97f998bae19fd1f828df46aba9",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  Instrumentation # HLSL Change\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  MC # HLSL Change\n\n#  ObjCARCOpts # HLSL Change\n\n#  Object # HLSL Change\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In a standard Clang+LLVM build, we need to generate intrinsics before\n\n# building codegen. In a standalone build, LLVM is already built and we don't\n\n# need this dependency. Furthermore, LLVM doesn't export it so we can't have\n\n# this dependency.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CGObjCGNU.cpp # HLSL Change - no definitions used\n\n# CGObjCMac.cpp # HLSL Change - no definitions used\n\n# CGObjCRuntime.cpp # HLSL Change - no definitions used\n\n# CGOpenCLRuntime.cpp # HLSL Change - no definitions used\n\n# CGOpenMPRuntime.cpp # HLSL Change - no definitions used\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "tools/clang/lib/Driver/CMakeLists.txt" : {
      "ObjectId" : "43d6b0b9cc5b09f97710c013a63ffe970215d902",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Edit/CMakeLists.txt" : {
      "ObjectId" : "30e790dcc8859f5551107d59ffdb54fa4cf95d9f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Format/CMakeLists.txt" : {
      "ObjectId" : "2ce38343cfe9d32010067b6d66d6ce27e9366f5e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Frontend/CMakeLists.txt" : {
      "ObjectId" : "05c7d71a1ce1a0faf6c9c84b7a5de21ded732f53",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - add ignored sources\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ChainedIncludesSource.cpp      # HLSL Change\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  clangSerialization # HLSL Change\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/lib/Frontend/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "830b1f146a6c7c18f5d878d1ab1fdd47693e75aa",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - ignore file\n",
        "Line" : 1,
        "CharPositionInLine" : 49
      },
      "1" : {
        "Text" : "# RewriteModernObjC.cpp # HLSL Change\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "tools/clang/lib/FrontendTool/CMakeLists.txt" : {
      "ObjectId" : "7e11be0ce4c5832f0d77282192b526e610871e7b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Headers/CMakeLists.txt" : {
      "ObjectId" : "7de5fbe8be0ecbbdb12f9451b201c58ca68579ed",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate arm_neon.h\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/lib/Index/CMakeLists.txt" : {
      "ObjectId" : "3869c32c879a4b42c36acc50273d5bb6e3cf9a72",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Lex/CMakeLists.txt" : {
      "ObjectId" : "b092445434c9803648a7c62052c2410fb1d6cee4",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Add -maltivec when ARCH is PowerPC.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/lib/Parse/CMakeLists.txt" : {
      "ObjectId" : "7dfca8e154ae9984d01740e1da44e5e2914bc3c2",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  MC            # HLSL Change\n\n#  MCParser      # HLSL Change\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HLSL Change\n",
        "Line" : 23,
        "CharPositionInLine" : 16
      },
      "2" : {
        "Text" : "# HLSL Change\n",
        "Line" : 24,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 3
    },
    "tools/clang/lib/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "16550b1b710ef9f0dc4d863ddca69eabdb1425da",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/SPIRV/CMakeLists.txt" : {
      "ObjectId" : "a8e782462a01d9b8702e6b405f86c2375fb592cc",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Sema/CMakeLists.txt" : {
      "ObjectId" : "6d7fa7b886267cda88e87720e2ed4e66fedd6178",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SemaHLSL.cpp references {Has|Get}UnsignedOpcode()\n",
        "Line" : 2,
        "CharPositionInLine" : 7
      },
      "1" : {
        "Text" : "# HLSL Change\n",
        "Line" : 36,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 2
    },
    "tools/clang/lib/Serialization/CMakeLists.txt" : {
      "ObjectId" : "d885db22975e38cff8c970c631c900282f00391d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/StaticAnalyzer/CMakeLists.txt" : {
      "ObjectId" : "3d1509254f52ff5f442a091cd462be57b6760c65",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/StaticAnalyzer/Checkers/CMakeLists.txt" : {
      "ObjectId" : "9fb22ecc852baf1bf5a9f84cb307fe841af92065",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/StaticAnalyzer/Core/CMakeLists.txt" : {
      "ObjectId" : "59a6b6fbc5951b4abd161e386d67664dcb971d0a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/StaticAnalyzer/Frontend/CMakeLists.txt" : {
      "ObjectId" : "e3ca91aec9cd180fc51f1d1597a62ad1d9f739f6",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Tooling/CMakeLists.txt" : {
      "ObjectId" : "b5c3d54e5fc1070c789c387a3b93dac6385a1cf4",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/lib/Tooling/Core/CMakeLists.txt" : {
      "ObjectId" : "c8c75f95f3cbabdc1e93670c139d3be2d519aed7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/runtime/CMakeLists.txt" : {
      "ObjectId" : "ad383f6cf7e0319a0c2448cc44be994f83609b50",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Set the install directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use special command for Makefiles to support parallelism.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Add compiler-rt as an external project.\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Due to a bug, DEPENDS in ExternalProject_Add doesn't work\n\n# in CMake 2.8.9 and 2.8.10.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add a custom step to always re-configure compiler-rt (in case some of its\n\n# sources have changed).\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add top-level targets that build specific compiler-rt runtimes.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add binaries that compiler-rt tests depend on.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add top-level targets for various compiler-rt test suites.\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add special target to run all compiler-rt test suites.\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "tools/clang/test/CMakeLists.txt" : {
      "ObjectId" : "526f129bab587036456de7ffbdb42d5595144392",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Test runner infrastructure for Clang. This configures the Clang test trees\n\n# for use by Lit, and delegates to LLVM's lit test handlers.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#LIT ${LLVM_LIT}\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Add a legacy target spelling: clang-test\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/tools/CMakeLists.txt" : {
      "ObjectId" : "424749c78b1cd18c5fca940dbd14f16888f650d5",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(clang-format)    # HLSL Change\n\n# add_subdirectory(clang-format-vs) # HLSL Change\n\n# add_subdirectory(clang-fuzzer)    # HLSL Change\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(c-index-test)    # HLSL Change\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HLSL Change\n",
        "Line" : 9,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# We support checking out the clang-tools-extra repository into the 'extra'\n\n# subdirectory. It contains tools developed as part of the Clang/LLVM project\n\n# on top of the Clang tooling platform. We keep them in a separate repository\n\n# to keep the primary Clang repository small and focused.\n\n# It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These targets can currently only be built on Windows.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# UI powered by .NET.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tools/clang/tools/c-index-test/CMakeLists.txt" : {
      "ObjectId" : "d0872fd2eff388963cb2f9f6097ba022e8603390",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If libxml2 is available, make it available for c-index-test.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/tools/clang-check/CMakeLists.txt" : {
      "ObjectId" : "04151a8e0331dbabf62f97b1262d75863a6cdb08",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/tools/clang-format-vs/CMakeLists.txt" : {
      "ObjectId" : "fd0d6b028c66b05f1e7071712b3d8788b8f96b5e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/tools/clang-format/CMakeLists.txt" : {
      "ObjectId" : "9d49439d377eb423326f6dc23939d0fc2ef01020",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - needed for 'no target' build\n",
        "Line" : 2,
        "CharPositionInLine" : 11
      },
      "1" : {
        "Text" : "# HLSL Change\n",
        "Line" : 3,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "tools/clang/tools/clang-format/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "c7772fcb2f01646e24f1c6a34a5cf9fea0191ef9",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/tools/clang-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "87d21c6bf116b68eea5b6f85f68f5f06f993a9e7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/tools/d3dcomp/CMakeLists.txt" : {
      "ObjectId" : "9608400274d759609ae675d601e302b6ca2be0dd",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Build a d3dcompiler_dxc_bridge.dll component that bridges to dxcompiler.dll\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/tools/diagtool/CMakeLists.txt" : {
      "ObjectId" : "d286797b9986ea35e55b10f895745d1e870c74a9",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 3,
        "CharPositionInLine" : 11
      },
      "1" : {
        "Text" : "# HLSL Change\n",
        "Line" : 4,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "tools/clang/tools/dotnetc/CMakeLists.txt" : {
      "ObjectId" : "3c74b06732a8be613f9be6a70baf23198547bd6a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/tools/driver/CMakeLists.txt" : {
      "ObjectId" : "989fd4091fbd791177787f1103a1c4339d6e34fe",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  CodeGen # HLSL Change\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  Instrumentation # HLSL Change\n\n#  MC # HLSL Change\n\n#  MCParser # HLSL Change\n\n#  ObjCARCOpts # HLSL Change\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HLSL Change\n",
        "Line" : 18,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# HLSL Change\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Support plugins. This must be before add_clang_executable as it reads\n\n# LLVM_NO_DEAD_STRIP.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Prevent versioning if the buildhost is targeting for Win32.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# HLSL Change Start\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# HLSL Change\n",
        "Line" : 52,
        "CharPositionInLine" : 92
      },
      "8" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Support plugins.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add_dependencies(clang clang-headers) - HLSL Change\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Create the clang++ symlink in the build directory.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Create the clang-cl symlink in the build directory.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# HLSL Changes Start - do not install clang.exe unless we build it by default\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Create the clang++ and clang-cl symlinks at installation time.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Configure plist creation for OS X.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "tools/clang/tools/driver/clang_symlink.cmake" : {
      "ObjectId" : "c01259543c90a86ee3657a8e94a20747f7783ebe",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to execute this script at installation time because the\n\n# DESTDIR environment variable may be unset at configuration time.\n\n# See PR8397.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_EXECUTABLE_SUFFIX is undefined on cmake scripts. See PR9286.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/clang/tools/dxa/CMakeLists.txt" : {
      "ObjectId" : "c961e5a07755dcb11e4ffef718a49c029d698f0e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxa.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used for constants and declarations.\n",
        "Line" : 6,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# option library\n",
        "Line" : 15,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tools/clang/tools/dxc/CMakeLists.txt" : {
      "ObjectId" : "ea3737b8d93b6f0c1037b5b7ab6c0ccb1962b1a2",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxc.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used for constants and declarations.\n",
        "Line" : 6,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# option library\n\n# just for assert and raw streams\n",
        "Line" : 15,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "#  dxr.rc\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/clang/tools/dxc/dxclib/CMakeLists.txt" : {
      "ObjectId" : "2ba41a521c8a2f770f8b3210bc6ad88fcb55d592",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxclib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used for constants and declarations.\n",
        "Line" : 6,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 2
    },
    "tools/clang/tools/dxcompiler/CMakeLists.txt" : {
      "ObjectId" : "5887191c537f783b6ae82c15a1d22b6986769c65",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  asmprinter # no support for LLVM codegen\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  codegen # no support for LLVM codegen\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  debuginfodwarf # no support for DWARF files (IR debug info is OK)\n\n#  debuginfopdb # no support for PDB files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for DxcOptimizerPass\n",
        "Line" : 18,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "#  libdriver\n\n#  lineeditor\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  mirparser # no support for LLVM codegen\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  object # no support for object files (coff, elf)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  passes\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  selectiondag # no support for LLVM codegen\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  clangARCMigrate\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  clangSerialization\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# No DxcEtw on non-Windows platforms.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "tools/clang/tools/dxl/CMakeLists.txt" : {
      "ObjectId" : "eb97d813720d05556d9ca4911d6c91c20fb2089d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxl.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used for constants and declarations.\n",
        "Line" : 6,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# option library\n\n# for CreateMSFileSystemForDisk\n",
        "Line" : 14,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tools/clang/tools/dxlib-sample/CMakeLists.txt" : {
      "ObjectId" : "60b1837ee3caf78871dea958e398c2c89f3ff1cf",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Build a dxlib_sample.dll as a sample for library and link.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# option library\n\n# just for assert and raw streams\n",
        "Line" : 21,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 2
    },
    "tools/clang/tools/dxopt/CMakeLists.txt" : {
      "ObjectId" : "a518d9e1c4a34c0223ff78d1b158efaa7da064a4",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxopt.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# just for assert and raw streams\n",
        "Line" : 8,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/tools/dxr/CMakeLists.txt" : {
      "ObjectId" : "42c4d5fe049ed362e39fa670816e1f1770d3e124",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxr.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For Atomic increment/decrement\n",
        "Line" : 8,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "#  dxr.rc\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set_target_properties(dxr PROPERTIES ENABLE_EXPORTS 1)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/clang/tools/dxrfallbackcompiler/CMakeLists.txt" : {
      "ObjectId" : "307a4b92e5265099d3f66c293f48eee537ebd69e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used for constants and declarations.\n",
        "Line" : 3,
        "CharPositionInLine" : 30
      },
      "2" : {
        "Text" : "#  asmprinter # no support for LLVM codegen\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  codegen # no support for LLVM codegen\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  debuginfodwarf # no support for DWARF files (IR debug info is OK)\n\n#  debuginfopdb # no support for PDB files\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  libdriver\n\n#  lineeditor\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  mirparser # no support for LLVM codegen\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  object # no support for object files (coff, elf)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  passes\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  selectiondag # no support for LLVM codegen\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SPIRV change starts\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# SPIRV change ends\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "tools/clang/tools/dxv/CMakeLists.txt" : {
      "ObjectId" : "3a3bbd469998666eb0efb117503794c20ed10876",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxv.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# option library\n",
        "Line" : 8,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/tools/libclang/CMakeLists.txt" : {
      "ObjectId" : "201b39616541ca57070e76c414e7ac2f3e5fd4cd",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change - ignore file\n",
        "Line" : 1,
        "CharPositionInLine" : 42
      },
      "1" : {
        "Text" : "#  ARCMigrate.cpp # HLSL Change - remove ARCMigrate\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HLSL Change\n",
        "Line" : 31,
        "CharPositionInLine" : 20
      },
      "3" : {
        "Text" : "# HLSL Change\n",
        "Line" : 32,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "#  ARCMigrate.cpp # HLSL Change - remove ARCMigrate\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# HLSL Change\n",
        "Line" : 71,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# HLSL Change\n",
        "Line" : 72,
        "CharPositionInLine" : 23
      },
      "7" : {
        "Text" : "# HLSL Change - remove ARC support\n",
        "Line" : 103,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Avoid LNK4197 not to spceify libclang.def here.\n\n# Each functions is exported as \"dllexport\" in include/clang-c.\n\n# KB835326\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# HLSL Change Starts\n\n# Add a definition for the link type.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# HLSL Change - disable DLL, we only use the static lib\n",
        "Line" : 131,
        "CharPositionInLine" : 28
      },
      "12" : {
        "Text" : "# HLSL Change don't build the static target like this\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#  DEPENDS clang-headers - HLSL Change\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# HLSL Change\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# HLSL Change Starts\n\n# add_clang_library(${LIBCLANG_STATIC_TARGET_NAME} STATIC ${SOURCES})\n\n# target_link_libraries(${LIBCLANG_STATIC_TARGET_NAME} ${LIBS})\n\n# add_dependencies(${LIBCLANG_STATIC_TARGET_NAME} ${GENERATED_HEADERS} clang-headers)\n\n# HLSL Change Ends\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "tools/clang/unittests/AST/CMakeLists.txt" : {
      "ObjectId" : "2fa1078a5e1b35eef4e4fb53d0ca8f2644236f57",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/ASTMatchers/CMakeLists.txt" : {
      "ObjectId" : "3ace9fe264b8ac938cb110d4eb382634c7bae56b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/ASTMatchers/Dynamic/CMakeLists.txt" : {
      "ObjectId" : "506a65549e4f3ec5c3f5a989c368abd23432e1d2",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/Basic/CMakeLists.txt" : {
      "ObjectId" : "3cb3cb8d3c8021cff16beebad3ec7dfaf9f2edf3",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/CMakeLists.txt" : {
      "ObjectId" : "1bcc937a735958c24aa67d9814264235c99fd8bb",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_clang_unittest(test_dirname file1.cpp file2.cpp)\n\n#\n\n# Will compile the list of files together and link against the clang\n\n# Produces a binary named 'basename(test_dirname)'.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HLSL Change\n",
        "Line" : 12,
        "CharPositionInLine" : 27
      },
      "2" : {
        "Text" : "# FIXME: libclang unit tests are disabled on Windows due\n\n# to failures, mostly in libclang.VirtualFileOverlay_*.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# HLSL Change\n",
        "Line" : 34,
        "CharPositionInLine" : 28
      },
      "4" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These tests require MS specific TAEF and DIA SDK\n",
        "Line" : 40,
        "CharPositionInLine" : 13
      },
      "6" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# SPIRV Change Starts\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# SPIRV Change Ends\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tools/clang/unittests/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "27a513a2f9828d7c69d83c50b94964379ab37415",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/Driver/CMakeLists.txt" : {
      "ObjectId" : "8cc963b33a21baecd61b3327b8a913ba7b231aef",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/DxrFallback/CMakeLists.txt" : {
      "ObjectId" : "aee43773f9248242cd2048c235e2c6a442d6e11b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# put test files in a folder in Visual Studio\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# don't compile test files\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create a file to include to provide a default path for test files\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/unittests/Format/CMakeLists.txt" : {
      "ObjectId" : "6d48cf871335c5316d967047629b4facd5089211",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/Frontend/CMakeLists.txt" : {
      "ObjectId" : "5b5fdc9a54fee5cbf23fd7f57f786217ae3b776f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/HLSL/CMakeLists.txt" : {
      "ObjectId" : "08c80826ecd672bf06bcf5174d086e13249d5790",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used for constants and declarations.\n",
        "Line" : 5,
        "CharPositionInLine" : 30
      },
      "2" : {
        "Text" : "# Used for ExecutionTest.cpp.\n",
        "Line" : 6,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# Add includes for platform helpers and dxc API.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add includes to directly reference intrinsic tables.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add a .user file with settings for te.exe.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tools/clang/unittests/HLSLHost/CMakeLists.txt" : {
      "ObjectId" : "44b7c522df0fffbe2889acf35461202484e82e02",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds HLSLHost.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For Atomic increment/decrement\n",
        "Line" : 7,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/unittests/Lex/CMakeLists.txt" : {
      "ObjectId" : "461e0d95fc87efe2bf63a5d1146336454b447981",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/Rewrite/CMakeLists.txt" : {
      "ObjectId" : "bee7ff6d55418f908d44409e47373b73167e5af5",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/SPIRV/CMakeLists.txt" : {
      "ObjectId" : "59d813b8e5c1b4a43c2795062455c31f64e5dc8d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is necessary so that the linked dxcompiler is loaded into memory space\n\n# first, and in case dxcompiler.so is loaded via 'dlopen', it resolves to the\n\n# same memory space, and prevents getting two copies of global static variables.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/clang/unittests/Sema/CMakeLists.txt" : {
      "ObjectId" : "c25db814b7c2972c6cb1d6442558d0a29abff921",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/StaticAnalyzer/CMakeLists.txt" : {
      "ObjectId" : "4aa5efba77a2dd32b3d45a3b8b0c134d30bdd1f2",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/Tooling/CMakeLists.txt" : {
      "ObjectId" : "469e6a956b2db384110f592fb90e333b1c66a895",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/unittests/dxc_batch/CMakeLists.txt" : {
      "ObjectId" : "8f7dacf5a7c951f0e5beb1a2add62aa74a7b33bf",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n\n# Builds dxc_batch.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# option library\n\n# just for assert and raw streams\n\n# for CreateMSFileSystemForDisk\n",
        "Line" : 13,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# Create a relative symlink\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/clang/unittests/libclang/CMakeLists.txt" : {
      "ObjectId" : "1cdc45e2d22a661065bf623cad8cba8c49eb3e36",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/clang/utils/TableGen/CMakeLists.txt" : {
      "ObjectId" : "9762ac4ee4c15ecdd856dcc71a9b68d8a4cf9869",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 1
    },
    "tools/dsymutil/CMakeLists.txt" : {
      "ObjectId" : "88f9f1f083db15da03a50322b885aa65c3577721",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/dxexp/CMakeLists.txt" : {
      "ObjectId" : "b919592139b45f4ce587f7993ccb799e1c5f9af6",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) Microsoft Corporation. All rights reserved.\n\n# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/llc/CMakeLists.txt" : {
      "ObjectId" : "ff5a89e1da44fbac233d2b828da37a3ef9d18550",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support plugins.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/lli/CMakeLists.txt" : {
      "ObjectId" : "8ef0af04c7843e4d68619d045c8bb09b1f60a8e7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  MC     # HLSL Change\n\n#  MCJIT  # HLSL Change\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/lli/ChildTarget/CMakeLists.txt" : {
      "ObjectId" : "9f88b2cde3f7955fb519674a7824effd18a5a976",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-as/CMakeLists.txt" : {
      "ObjectId" : "d9fcbb071a88bfb44d58973d4c7d87565588c121",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 6,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/llvm-bcanalyzer/CMakeLists.txt" : {
      "ObjectId" : "369f469af85484dd975eb03b95b8d571dfcba03f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-c-test/CMakeLists.txt" : {
      "ObjectId" : "f22dffb30e8a4a912cbd4914ca6bfc3768c11397",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We should only have llvm-c-test use libLLVM if libLLVM is built with the\n\n# default list of components. Using libLLVM with custom components can result in\n\n# build failures.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/llvm-config/CMakeLists.txt" : {
      "ObjectId" : "edbd8c950d7bb46e774cc704378400973380db52",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the llvm-config tool.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compute the substitution values for various items.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fetch target specific compile options, e.g. RTTI option\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use configure_file to create BuildVariables.inc.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use the C++ link flags, since they should be a superset of C link flags.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set build-time environment(s).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the dependency on the generation step.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tools/llvm-cov/CMakeLists.txt" : {
      "ObjectId" : "193218a6639f22d1b0ce1a0f13e7396577d3b573",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-cxxdump/CMakeLists.txt" : {
      "ObjectId" : "ada886e888734225f53b575365ded0b89be2f112",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-diff/CMakeLists.txt" : {
      "ObjectId" : "4407a86c1519727a5788c0ad15ccae00e704afcd",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-dis/CMakeLists.txt" : {
      "ObjectId" : "b05f77bc8064db29829bafa890139c04a8b5485a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 5,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/llvm-dwarfdump/CMakeLists.txt" : {
      "ObjectId" : "9a2e53f5a4bb27e82447e45d1ce5263454839f02",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-dwarfdump/fuzzer/CMakeLists.txt" : {
      "ObjectId" : "1de35a3de478124db2cdb6ae438326fcde6cdd2c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-extract/CMakeLists.txt" : {
      "ObjectId" : "c984f01034f8232754a6eee6ba64b77584bb8dd3",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-link/CMakeLists.txt" : {
      "ObjectId" : "d4f5be749046ec12beacd0b103d137e235dfc8f3",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-lto/CMakeLists.txt" : {
      "ObjectId" : "3ea1aeea9a41f711e07f1baa980188798d57d68c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-mc/CMakeLists.txt" : {
      "ObjectId" : "15c6dda1b258633669721a93d27e2e284e6bfd3e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-mcmarkup/CMakeLists.txt" : {
      "ObjectId" : "0a51e99f1953e70205321e81eb06f320a05e7ef6",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-nm/CMakeLists.txt" : {
      "ObjectId" : "20293bb88f05041d0e6031cff06e629ec9dac221",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-objdump/CMakeLists.txt" : {
      "ObjectId" : "1f2721ab5452a13242ddc6dac9d37eccb80aed25",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-pdbdump/CMakeLists.txt" : {
      "ObjectId" : "1907f917079ae6284f6804287297a177301d6bac",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-profdata/CMakeLists.txt" : {
      "ObjectId" : "0e330fd0751ebf16598c3473fb3c41be129b4e3a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-readobj/CMakeLists.txt" : {
      "ObjectId" : "87407a258021bc3e2a5dbd9a2a736366bcc346a5",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-rtdyld/CMakeLists.txt" : {
      "ObjectId" : "c1acbe5846bdb549808e5812352076f7f83b446d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-shlib/CMakeLists.txt" : {
      "ObjectId" : "54d71d3f63200ced98b7eb798e000a9fd286503f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This tool creates a shared library from the LLVM libraries. Generating this\n\n# library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake\n\n# commandline. By default the shared library only exports the LLVM C API.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can configure which libraries from LLVM you want to include in the shared\n\n# library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited list of\n\n# LLVM components. All compoenent names handled by llvm-config are valid.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To get the export list for a single llvm library:\n\n# nm ${LIB_PATH} | awk \"/T _LLVM/ { print $3 }\" | sort -u | sed -e \"s/^_//g\" > ${LIB_PATH}.exports\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# FIXME: It should be \"GNU ld for elf\"\n",
        "Line" : 101,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : "# GNU ld doesn't resolve symbols in the version script.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "tools/llvm-size/CMakeLists.txt" : {
      "ObjectId" : "60345739c35a8a7c89d47a3d277637e9f55e3e5a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-stress/CMakeLists.txt" : {
      "ObjectId" : "d5c10e13f5b3c19734364e1c996ec12f669a77bb",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/llvm-symbolizer/CMakeLists.txt" : {
      "ObjectId" : "5df3b17a065e74044a34e7fd207145e45657bbe2",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: As we plan to execute llvm-symbolizer binary from compiler-rt\n\n# libraries, it has to be compiled for all supported targets (x86_64, i386 etc).\n\n# This means that we need LLVM libraries to be compiled for these\n\n# targets as well. Currently, there is no support for such a build strategy.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/lto/CMakeLists.txt" : {
      "ObjectId" : "c479fa954cb0d61f7a4760faacb13b0b4ebdd16f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/macho-dump/CMakeLists.txt" : {
      "ObjectId" : "bc2dfbf427c39add931f45cc5860a4ea209c3718",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/msbuild/CMakeLists.txt" : {
      "ObjectId" : "4f471e5408ba42410acb9a48fdadc2df69e7df6a",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPack will install a registry key in this format that we wish to reference.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tools/obj2yaml/CMakeLists.txt" : {
      "ObjectId" : "3cdac5c7487522c716add72001ee9f33510ad8e8",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/opt/CMakeLists.txt" : {
      "ObjectId" : "0aa93800fd11f78408579bb118de5642e2c21fcd",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  CodeGen # HLSL Change\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  Instrumentation # HLSL Change\n\n#  MC # HLSL Change\n\n#  ObjCARCOpts # HLSL Change\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support plugins.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# HLSL Change\n",
        "Line" : 25,
        "CharPositionInLine" : 66
      },
      "4" : {
        "Text" : "# HLSL Change Starts\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# HLSL Change Ends\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tools/verify-uselistorder/CMakeLists.txt" : {
      "ObjectId" : "260a95adb6a672ca1bfe032859263cbca5b43a7e",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/yaml2obj/CMakeLists.txt" : {
      "ObjectId" : "52e9df4d766ae15fdf36d9e25e65b4e123ea6348",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ADT/CMakeLists.txt" : {
      "ObjectId" : "cbcb08485563e5bdfd1852fa8627333dc02cb174",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Analysis/CMakeLists.txt" : {
      "ObjectId" : "35a6d92ce179303e1ea98854e5f4b2b25bb0bc4c",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/AsmParser/CMakeLists.txt" : {
      "ObjectId" : "1920bfaa3aac7b1dcb35266088ab0732f7735109",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Bitcode/CMakeLists.txt" : {
      "ObjectId" : "09cbcdc7284d25e9baa2ccdd91253ecdb13be5f7",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CMakeLists.txt" : {
      "ObjectId" : "c1612e0d1157f35241bf38fc33d7abe655f9708d",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(ExecutionEngine) - HLSL Change - removed\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "65c0ac3f20e42494c5cb178d579ea45a0a0fab70",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/CMakeLists.txt" : {
      "ObjectId" : "dae472bafdd7184b08c3b79f9f1fd5a878082726",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/DWARF/CMakeLists.txt" : {
      "ObjectId" : "4bec17cbb524c5204ae1bcdbfe996c433fba1072",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/DebugInfo/PDB/CMakeLists.txt" : {
      "ObjectId" : "91924a5a875449e5ae43bd6d33434472d165edd8",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/IR/CMakeLists.txt" : {
      "ObjectId" : "0c2979632e10762cdb2a78038a37d1ebba18bb13",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HACK: Declare a couple of source files as optionally compiled to satisfy the\n\n# missing-file-checker in LLVM's weird CMake build.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/Linker/CMakeLists.txt" : {
      "ObjectId" : "05f45c0a8ce8880b991242e37dbfcf86b76f28d1",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/MC/CMakeLists.txt" : {
      "ObjectId" : "f83eaf4779f9804b4ed8ed5a66cabc3d29f4d0ed",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Option/CMakeLists.txt" : {
      "ObjectId" : "07f7b91d5f5b7f1b59338a5c920d44e80e43ddb6",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ProfileData/CMakeLists.txt" : {
      "ObjectId" : "79137c9510aeeabb6a728fb0dffa1113f81bbb6f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Support/CMakeLists.txt" : {
      "ObjectId" : "564d189d49c2b646aa8f30e98623374f6aba4752",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ManagedStatic.cpp uses <pthread>.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/Transforms/CMakeLists.txt" : {
      "ObjectId" : "5d3b29c94d72e23eb965b87a3d2312864ab75f7b",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Transforms/IPO/CMakeLists.txt" : {
      "ObjectId" : "58b71b2bce03fe9b8527ee93f9a7b87ea03b24e9",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Transforms/Utils/CMakeLists.txt" : {
      "ObjectId" : "517ff99ea46bc5a7dbb434b140e11db0e1527a72",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/FileCheck/CMakeLists.txt" : {
      "ObjectId" : "8c78ff154d43dc4105be5dc7bc8405e3abcde1f3",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/KillTheDoctor/CMakeLists.txt" : {
      "ObjectId" : "37c2b7ceb467a082d0ca5eba0851c7102cdde352",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/PerfectShuffle/CMakeLists.txt" : {
      "ObjectId" : "ed70760a43e425b4730a809abc1ddb2e4f2836da",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/TableGen/CMakeLists.txt" : {
      "ObjectId" : "6b9168c000aa40247f5af9fb6fabb3fc36b66ed1",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/count/CMakeLists.txt" : {
      "ObjectId" : "4e0d371334e473d643d791ae839ea51a953f0c7f",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/not/CMakeLists.txt" : {
      "ObjectId" : "48eb9761e599918dedd9b3e6044c64d146535325",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HLSL Change\n",
        "Line" : 5,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 1
    },
    "utils/yaml-bench/CMakeLists.txt" : {
      "ObjectId" : "403182ceee2a8e9b5d187f8137ec8128c29ea6a4",
      "LastModified" : "2019-03-29T19:20:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 242,
    "CMAKESOURCE" : 4
  },
  "ElapsedTime" : 6141
}