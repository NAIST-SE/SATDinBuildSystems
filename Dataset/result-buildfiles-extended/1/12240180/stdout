{
  "Repository" : "12240180",
  "Revision" : "HEAD",
  "ObjectId" : "8f308463030c18cd4f7c8a6052028fff3b7ca35a",
  "CommitTime" : "2018-06-05T19:22:49Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "133dc382e3d1df7ae601952ba75a28910ab10223",
      "LastModified" : "2018-06-03T07:19:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 2.8.11 or above is necessary for recent Qt5 cmake helper functions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As Qt generates ui header files, the build directory needs to be an include\n\n# directory too.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tell CMake to run moc automatically when needed.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compile as C++11.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# To avoid a compilation error in vorbisfile.h with fseeko64.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Compile in release mode by default.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# In debug, set strict warnings for developers.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add defines for the install path and the build path to help guess the assets\n\n# location at runtime.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Find dependencies.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Explicit link to libdl is needed for Lua on some systems.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include directories.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Before SDL2 because we want the sndfile.h of ModPlug.\n",
        "Line" : 83,
        "CharPositionInLine" : 29
      },
      "12" : {
        "Text" : "# Source files.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add an icon for the executable in Windows.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# UI files.\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Generate .h from .ui.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Resources.\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Compile resource files.\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Translations.\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Main executable.\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Set files to install\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Platform specific.\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Windows: disable the console.\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Configuration for OSX build and deployment.\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# FreeDesktop compatible icons\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# FreeDesktop compatible start menu launcher\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "cmake/apple/OSXBuild.cmake" : {
      "ObjectId" : "04e17a3643a66601672e010af7bced2604e22d91",
      "LastModified" : "2017-02-24T09:19:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####\n\n# By default, you will build a binary with the maximum of compatibility that your current version can provide.\n\n# You may want to produce an optimized (or exotic) binary instead of a standard one.\n\n# To do so, overload the following options :\n\n#\n\n# SOLARUS_ARCH represent the build (multi-)architecture.\n\n# SOLARUS_SYSROOT represent the path to the OSX SDK.\n\n# SOLARUS_DEPLOYMENT represent the oldest OSX version supported.\n\n#\n\n# Some options set to the cache also need the FORCE parameter for obscure reasons.\n\n#\n\n# Exportable to XCode.\n\n####\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get the current OSX version as X.X.X and X.X form.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build architectures.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Deployment version.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure root path and set it up on library.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# LuaJIT workaround.\n\n# According to LuaJIT doc, OSX needs to link with additional flags if 64bit build is requested\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindGLM.cmake" : {
      "ObjectId" : "2f5ac46f41ea429627557f14187712a15b6882a8",
      "LastModified" : "2018-03-29T22:05:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindLuaJit.cmake" : {
      "ObjectId" : "206bfecae15d730bbb868ecd3d0994de9482832d",
      "LastModified" : "2018-03-29T22:05:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate LuaJIT library\n\n# This module defines\n\n#  LUA51_FOUND, if false, do not try to link to Lua\n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# This module is similar to FindLua51.cmake except that it finds LuaJit instead.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 17,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 18,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 19,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindModPlug.cmake" : {
      "ObjectId" : "30a4c7126952ecb9ab40b4613b5538d4889e1f21",
      "LastModified" : "2018-05-27T09:46:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find modplug\n\n# Find the native modplug includes and libraries\n\n#\n\n#  MODPLUG_INCLUDE_DIRS - where to find modplug.h, etc.\n\n#  MODPLUG_LIBRARIES    - List of libraries when using libmodplug.\n\n#  MODPLUG_FOUND        - True if modplug found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindOgg.cmake" : {
      "ObjectId" : "56278e18a6342cf22402c05086887f2cadd272eb",
      "LastModified" : "2018-05-27T09:46:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ogg\n\n# Find the native ogg includes and libraries\n\n#\n\n#  OGG_INCLUDE_DIRS - where to find ogg.h, etc.\n\n#  OGG_LIBRARIES    - List of libraries when using libogg.\n\n#  OGG_FOUND        - True if ogg was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindSDL2.cmake" : {
      "ObjectId" : "192e149c24d074263ad8d45d5f1a8aed3d978a19",
      "LastModified" : "2018-03-29T22:05:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from https://code.google.com/r/neobrainx-dolphin/source/browse/CMakeTests/FindSDL2.cmake\n\n#\n\n# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 81,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 82,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/modules/FindSDL2_image.cmake" : {
      "ObjectId" : "a36d5e9d15a2d3abd7c80c3dc1436b4331ac9ec9",
      "LastModified" : "2018-03-29T22:05:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from http://cmake.3232098.n2.nabble.com/Find-modules-for-SDL2-td7585211.html\n\n#\n\n# - Find SDL2_image library and headers\r\n\n# \r\n\n# Find module for SDL_image 2.0 (http://www.libsdl.org/projects/SDL_image/).\r\n\n# It defines the following variables:\r\n\n#  SDL2_IMAGE_INCLUDE_DIRS - The location of the headers, e.g., SDL_image.h.\r\n\n#  SDL2_IMAGE_LIBRARIES - The libraries to link against to use SDL2_image.\r\n\n#  SDL2_IMAGE_FOUND - If false, do not try to use SDL2_image.\r\n\n#  SDL2_IMAGE_VERSION_STRING\r\n\n#    Human-readable string containing the version of SDL2_image.\r\n\n#\r\n\n# Also defined, but not for general use are:\r\n\n#   SDL2_IMAGE_INCLUDE_DIR - The directory that contains SDL_image.h.\r\n\n#   SDL2_IMAGE_LIBRARY - The location of the SDL2_image library.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2013 Benjamin Eikel\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindSDL2_ttf.cmake" : {
      "ObjectId" : "2c95ed65252c327358a8c92e6bf0966cbb486ee5",
      "LastModified" : "2018-03-29T22:05:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from http://cmake.3232098.n2.nabble.com/Find-modules-for-SDL2-td7585211.html and adapted to SDL2_ttf\n\n#\n\n# - Find SDL2_ttf library and headers\r\n\n# \r\n\n# Find module for SDL_ttf 2.0 (http://www.libsdl.org/projects/SDL_ttf/).\r\n\n# It defines the following variables:\r\n\n#  SDL2_TTF_INCLUDE_DIRS - The location of the headers, e.g., SDL_ttf.h.\r\n\n#  SDL2_TTF_LIBRARIES - The libraries to link against to use SDL2_ttf.\r\n\n#  SDL2_TTF_FOUND - If false, do not try to use SDL2_ttf.\r\n\n#  SDL2_TTF_VERSION_STRING\r\n\n#    Human-readable string containing the version of SDL2_ttf.\r\n\n#\r\n\n# Also defined, but not for general use are:\r\n\n#   SDL2_TTF_INCLUDE_DIR - The directory that contains SDL_ttf.h.\r\n\n#   SDL2_TTF_LIBRARY - The location of the SDL2_ttf library.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2013 Benjamin Eikel\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindSolarus.cmake" : {
      "ObjectId" : "528f62bd6171c3c66eec27ed32bf674df8707d37",
      "LastModified" : "2018-05-27T09:46:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Solarus\n\n# Find the Solarus includes and library.\n\n# Does not look for the Solarus GUI library.\n\n#\n\n#  SOLARUS_INCLUDE_DIRS - where to find solarus headers.\n\n#  SOLARUS_LIBRARIES    - List of libraries when using libsolarus.\n\n#  SOLARUS_FOUND        - True if Solarus was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindSolarusGui.cmake" : {
      "ObjectId" : "26d457982e06ce6f2c3dc97996b49207f5d0b448",
      "LastModified" : "2018-05-27T09:46:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Solarus\n\n# Find the Solarus GUI includes and library.\n\n#\n\n#  SOLARUS_GUI_INCLUDE_DIRS - where to find solarus GUI headers.\n\n#  SOLARUS_GUI_LIBRARIES    - List of libraries when using libsolarus-gui.\n\n#  SOLARUS_GUI_FOUND        - True if Solarus GUI was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindVorbis.cmake" : {
      "ObjectId" : "d506b5d344927297b44c627267e7d1fbdc43dcac",
      "LastModified" : "2018-05-27T09:46:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbis\n\n# Find the native vorbis library\n\n#\n\n#  VORBIS_LIBRARIES   - List of libraries when using libvorbis.\n\n#  VORBIS_FOUND       - True if vorbis was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBIS_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindVorbisFile.cmake" : {
      "ObjectId" : "144aeaa076369df9e76478dbd30375f89898c64b",
      "LastModified" : "2018-05-27T09:46:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbisfile\n\n# Find the native vorbisfile includes and libraries\n\n#\n\n#  VORBISFILE_INCLUDE_DIR - where to find vorbisfile.h, etc.\n\n#  VORBISFILE_LIBRARIES   - List of libraries when using libvorbisfile.\n\n#  VORBISFILE_FOUND       - True if vorbisfile was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBISFILE_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 13
  },
  "ElapsedTime" : 1566
}