{
  "Repository" : "23957742",
  "Revision" : "HEAD",
  "ObjectId" : "5882430eca26a469b6d4066318b4ff69ee6e3b07",
  "CommitTime" : "2019-04-15T07:50:07Z",
  "Files" : {
    "2011 and earlier Robotics/2011Competition/build.xml" : {
      "ObjectId" : "579b3d293cf00cf6d6c518e17d97e9b7ec3060a6",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/ArmCode/build.xml" : {
      "ObjectId" : "03bb009e76ef5e1b6003527f40ecf885c6ce41a7",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/CameraRotate/build.xml" : {
      "ObjectId" : "ec989ad58f950c1a433b218d01db7887a632c082",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/CompressorTest/Java/LineTracker/build.xml" : {
      "ObjectId" : "6dcf90b34a5f460c0f3de620065c5dd918694424",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/CompressorTest/Java/TankDrive/build.xml" : {
      "ObjectId" : "0c4ac40c9f871a40577efca93af266557b30b3f8",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/CompressorTest/build.xml" : {
      "ObjectId" : "9e1d9a03e18a362d45bb8457eac09cc4577b3eab",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/GamePieceGrabber/build.xml" : {
      "ObjectId" : "6009bf7eae67abacc06a0ab530fc62dae6dfc6b8",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/Grabber/build.xml" : {
      "ObjectId" : "c251922e268090b225805049c0b7d46e6bbec51d",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/Gripper/build.xml" : {
      "ObjectId" : "e988c13eda85e2e0330325b2b77792d5bd5733f6",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/LineTracker/build.xml" : {
      "ObjectId" : "6dcf90b34a5f460c0f3de620065c5dd918694424",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/LineTracker/src/edu/wpi/first/wpilibj/templates/build.xml" : {
      "ObjectId" : "6dcf90b34a5f460c0f3de620065c5dd918694424",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/Madeira2011/build.xml" : {
      "ObjectId" : "e2343a438fbdf41b5924bad4bcee3e3fd3c30914",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/MagEncoderTest/build.xml" : {
      "ObjectId" : "47579832546dc41b332c47930a8388d5adc32946",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/PHS 2011 Robot/build.xml" : {
      "ObjectId" : "671b52a16a83a9413b54be1c82a34862a39540ea",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2011 and earlier Robotics/TankDrive/build.xml" : {
      "ObjectId" : "0c4ac40c9f871a40577efca93af266557b30b3f8",
      "LastModified" : "2012-12-15T22:55:05Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "2015/Robot2015/build.xml" : {
      "ObjectId" : "2f53ebf4f0282adfe32b463f10dae465c94f4784",
      "LastModified" : "2015-01-21T05:51:18Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "2015/RobotBuilder/robotbuilder/pom.xml" : {
      "ObjectId" : "e700c68fe9306c048c79b2b41b7917e5d696889e",
      "LastModified" : "2015-01-25T00:01:39Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " put your configurations here ",
        "Line" : 139,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 1
    },
    "2015/RobotBuilder/robotbuilder/src/main/resources/export/cpp/build.xml" : {
      "ObjectId" : "5f5ea4fb4322674666c85614c2db8747c6172d44",
      "LastModified" : "2015-01-25T00:01:39Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "2015/RobotBuilder/robotbuilder/src/main/resources/export/java/build.xml" : {
      "ObjectId" : "d5690949ce6ac13ea7fec6f618ed51428c6e7344",
      "LastModified" : "2015-01-25T00:01:39Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : " Any other property in build.properties can also be overridden. ",
        "Line" : 22,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 8
    },
    "2015/RobotBuilder/robotbuilder/target/classes/export/cpp/build.xml" : {
      "ObjectId" : "5f5ea4fb4322674666c85614c2db8747c6172d44",
      "LastModified" : "2015-01-25T00:01:39Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "2015/RobotBuilder/robotbuilder/target/classes/export/java/build.xml" : {
      "ObjectId" : "d5690949ce6ac13ea7fec6f618ed51428c6e7344",
      "LastModified" : "2015-01-25T00:01:39Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : " Any other property in build.properties can also be overridden. ",
        "Line" : 22,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 8
    },
    "2015/RobotBuilder/robotbuilder/test-resources/RobotBuilderTestProject/build.xml" : {
      "ObjectId" : "a797d58c0d372d40ec26840d58c9fe43b1c35312",
      "LastModified" : "2015-01-25T00:01:39Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : " Any other property in build.properties can also be overridden. ",
        "Line" : 22,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 8
    },
    "2016/Robot2016/build.xml" : {
      "ObjectId" : "42dd35552bb482e62b69526fef40aed592b7c712",
      "LastModified" : "2016-01-17T20:14:01Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "2016/Robot2016Tutorial/build.xml" : {
      "ObjectId" : "42dd35552bb482e62b69526fef40aed592b7c712",
      "LastModified" : "2017-07-29T19:22:10Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "2017/Robot2017/build.xml" : {
      "ObjectId" : "42dd35552bb482e62b69526fef40aed592b7c712",
      "LastModified" : "2017-07-29T19:22:10Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "2018/Robot2018/build.xml" : {
      "ObjectId" : "42dd35552bb482e62b69526fef40aed592b7c712",
      "LastModified" : "2018-01-13T21:31:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n  The following properties can be defined to override system level\n  settings. These should not be touched unless you know what you're\n  doing. The primary use is to override the wpilib version when\n  working with older robots that can't compile with the latest\n  libraries.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " By default the system version of WPI is used ",
        "Line" : 13,
        "CharPositionInLine" : 56
      },
      "2" : {
        "Text" : " <property name=\"version\" value=\"\"/> ",
        "Line" : 14,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : " By default the system team number is used ",
        "Line" : 16,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : " <property name=\"team-number\" value=\"\"/> ",
        "Line" : 17,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : " By default the target is set to 10.TE.AM.2 ",
        "Line" : 19,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " <property name=\"target\" value=\"\"/> ",
        "Line" : 20,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 7
    },
    "2019/cpp-multiCameraServer-2/Makefile" : {
      "ObjectId" : "bc1a8c763db0d7ad0119b2307eeafd3995d906ce",
      "LastModified" : "2019-04-14T02:33:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\tcp ${EXE} runCamera ${DESTDIR}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\trm ${EXE} *.o\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "2019/cpp-multiCameraServer/Makefile" : {
      "ObjectId" : "ef2bc62279fc5deaa22ff6a93ea7e65aaaca8aae",
      "LastModified" : "2019-03-20T00:02:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "DS Log Parser/Makefile" : {
      "ObjectId" : "ff976903927e7828b2aaec0cfa4591b31b49fe7e",
      "LastModified" : "2019-03-20T00:02:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 3,
    "ANT" : 25,
    "MAVEN" : 1
  },
  "ElapsedTime" : 2727
}