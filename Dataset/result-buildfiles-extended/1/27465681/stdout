{
  "Repository" : "27465681",
  "Revision" : "HEAD",
  "ObjectId" : "c26a626beb2df37ac83e8aed8c2303911f190a33",
  "CommitTime" : "2019-02-15T10:50:01Z",
  "Files" : {
    "rapl-power/Makefile" : {
      "ObjectId" : "9acced4e5b9ab68ec66480210ffe94209ba59cef",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "stamp/lib/Makefile" : {
      "ObjectId" : "ceaeb7a25aabc863583d1bfa32d1f2cb9d5f6be0",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ==============================================================================\n\n#\n\n# Makefile for lib\n\n#\n\n# ==============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# Variables\n\n# ==============================================================================\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==============================================================================\n\n# Unit tests\n\n# ==============================================================================\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ==============================================================================\n\n#\n\n# End of Makefile for lib\n\n#\n\n# ==============================================================================\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tinySTM/Makefile" : {
      "ObjectId" : "5cf8ab53e75beba289c00a1137f794c50be8133c",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "########################################################################\n\n# TinySTM can be configured in many ways.  The main compilation options\n\n# are described below.  To read more easily through the code, you can\n\n# generate a source file stripped from most of the conditional\n\n# preprocessor directives using:\n\n#\n\n#   make src/stm.o.c\n\n#\n\n# For more details on the LSA algorithm and the design of TinySTM, refer\n\n# to:\n\n#\n\n# [DISC-06] Torvald Riegel, Pascal Felber, and Christof Fetzer.  A Lazy\n\n#   Snapshot Algorithm with Eager Validation.  20th International\n\n#   Symposium on Distributed Computing (DISC), 2006.\n\n#\n\n# [PPoPP-08] Pascal Felber, Christof Fetzer, and Torvald Riegel.\n\n#   Dynamic Performance Tuning of Word-Based Software Transactional\n\n#   Memory.  Proceedings of the 13th ACM SIGPLAN Symposium on Principles\n\n#   and Practice of Parallel Programming (PPoPP), 2008.\n\n########################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################\n\n# Three different designs can be chosen from, which differ in when locks\n\n# are acquired (encounter-time vs. commit-time), and when main memory is\n\n# updated (write-through vs. write-back).\n\n#\n\n# WRITE_BACK_ETL: write-back with encounter-time locking acquires lock\n\n#   when encountering write operations and buffers updates (they are\n\n#   committed to main memory at commit time).\n\n#\n\n# WRITE_BACK_CTL: write-back with commit-time locking delays acquisition\n\n#   of lock until commit time and buffers updates.\n\n#\n\n# WRITE_THROUGH: write-through (encounter-time locking) directly updates\n\n#   memory and keeps an undo log for possible rollback.\n\n#\n\n# Refer to [PPoPP-08] for more details.\n\n########################################################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DEFINES += -DDESIGN=WRITE_BACK_CTL\n\n# DEFINES += -DDESIGN=WRITE_THROUGH\n\n# DEFINES += -DDESIGN=MODULAR\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n# Several contention management strategies are available:\n\n#\n\n# CM_SUICIDE: immediately abort the transaction that detects the\n\n#   conflict.\n\n#\n\n# CM_DELAY: like CM_SUICIDE but wait until the contended lock that\n\n#   caused the abort (if any) has been released before restarting the\n\n#   transaction.  The intuition is that the transaction will likely try\n\n#   again to acquire the same lock and might fail once more if it has\n\n#   not been released.  In addition, this increases the chances that the\n\n#   transaction can succeed with no interruption upon retry, which\n\n#   improves execution time on the processor.\n\n#\n\n# CM_BACKOFF: like CM_SUICIDE but wait for a random delay before\n\n#   restarting the transaction.  The delay duration is chosen uniformly\n\n#   at random from a range whose size increases exponentially with every\n\n#   restart.\n\n#\n\n# CM_MODULAR: supports several built-in contention managers.  At the\n\n#   time, the following ones are supported:\n\n#   - SUICIDE: kill current transaction (i.e., the transaction that\n\n#     discovers the conflict).\n\n#   - AGGRESSIVE: kill other transaction.\n\n#   - DELAY: same as SUICIDE but wait for conflict resolution before\n\n#     restart.\n\n#   - TIMESTAMP: kill youngest transaction.\n\n#   One can also register custom contention managers.\n\n########################################################################\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Pick one contention manager (CM)\n\n# DEFINES += -DCM=CM_SUICIDE\n\n# DEFINES += -DCM=CM_DELAY\n\n# DEFINES += -DCM=CM_BACKOFF\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################################################\n\n# Enable irrevocable mode (required for using the library with a\n\n# compiler).\n\n########################################################################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DEFINES += -UIRREVOCABLE_ENABLED\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################\n\n# Maintain detailed internal statistics.  Statistics are stored in\n\n# thread locals and do not add much overhead, so do not expect much gain\n\n# from disabling them.\n\n########################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#DEFINES += -DTM_STATISTICS\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#DEFINES += -DTM_STATISTICS2\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n# Prevent duplicate entries in read/write sets when accessing the same\n\n# address multiple times.  Enabling this option may reduce performance\n\n# so leave it disabled unless transactions repeatedly read or write the\n\n# same address.\n\n########################################################################\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# DEFINES += -DNO_DUPLICATES_IN_RW_SETS\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n# Yield the processor when waiting for a contended lock to be released.\n\n# This only applies to the DELAY and CM_MODULAR contention managers.\n\n########################################################################\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# DEFINES += -DWAIT_YIELD\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n# Use a (degenerate) bloom filter for quickly checking in the write set\n\n# whether an address has previously been written.  This approach is\n\n# directly inspired by TL2.  It only applies to the WRITE_BACK_CTL\n\n# design.\n\n########################################################################\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DEFINES += -DUSE_BLOOM_FILTER\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n# Use an epoch-based memory allocator and garbage collector to ensure\n\n# that accesses to the dynamic memory allocated by a transaction from\n\n# another transaction are valid.  There is a slight overhead from\n\n# enabling this feature.\n\n########################################################################\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#DEFINES += -UEPOCH_GC\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################\n\n# Keep track of conflicts between transactions and notifies the\n\n# application (using a callback), passing the identity of the two\n\n# conflicting transaction and the associated threads.  This feature\n\n# requires EPOCH_GC.\n\n########################################################################\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#DEFINES += -UCONFLICT_TRACKING\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "########################################################################\n\n# Allow transactions to read the previous version of locked memory\n\n# locations, as in the original LSA algorithm (see [DISC-06]).  This is\n\n# achieved by peeking into the write set of the transaction that owns\n\n# the lock.  There is a small overhead with non-contended workloads but\n\n# it may significantly reduce the abort rate, especially with\n\n# transactions that read much data.  This feature only works with the\n\n# WRITE_BACK_ETL design and MODULAR contention manager.\n\n########################################################################\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# DEFINES += -DREAD_LOCKED_DATA\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "########################################################################\n\n# Tweak the hash function that maps addresses to locks so that\n\n# consecutive addresses do not map to consecutive locks.  This can avoid\n\n# cache line invalidations for application that perform sequential\n\n# memory accesses.  The last byte of the lock index is swapped with the\n\n# previous byte.\n\n########################################################################\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DEFINES += -DLOCK_IDX_SWAP\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "########################################################################\n\n# Output many (DEBUG) or even mode (DEBUG2) debugging messages.\n\n########################################################################\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# DEFINES += -DDEBUG\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# DEFINES += -DDEBUG2\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "########################################################################\n\n# Print statistics\n\n########################################################################\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#DEFINES += -DPRINT_STATS_INFO\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "########################################################################\n\n# Enable MCATS \n\n########################################################################\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#DEFINES += -DSTM_MCATS\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "########################################################################\n\n# Catch SIGBUS and SIGSEGV signals\n\n########################################################################\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# DEFINES += -DSIGNAL_HANDLER\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "########################################################################\n\n# Enable ASF Hybrid mode\n\n########################################################################\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# TODO Enable the construction of 32bit lib on 64bit environment \n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "########################################################################\n\n# Use COMPILER thread-local storage (TLS) support by default\n\n# TLS_COMPILER: use __thread keyword\n\n# TLS_POSIX: use posix (pthread) functions\n\n# TLS_DARWIN: use posix inline functions\n\n# TLS_GLIBC: use the space reserved for TM in the GLIBC\n\n########################################################################\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# DEFINES += -DTLS_POSIX\n\n# DEFINES += -DTLS_DARWIN\n\n# DEFINES += -DTLS_GLIBC\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "########################################################################\n\n# Enable unit transaction\n\n########################################################################\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# DEFINES += -DUNIT_TX\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "########################################################################\n\n# Various default values can also be overridden:\n\n#\n\n# RW_SET_SIZE (default=4096): initial size of the read and write\n\n#   sets.  These sets will grow dynamically when they become full.\n\n#\n\n# LOCK_ARRAY_LOG_SIZE (default=20): number of bits used for indexes in\n\n#   the lock array.  The size of the array will be 2 to the power of\n\n#   LOCK_ARRAY_LOG_SIZE.\n\n#\n\n# LOCK_SHIFT_EXTRA (default=2): additional shifts to apply to the\n\n#   address when determining its index in the lock array.  This controls\n\n#   how many consecutive memory words will be covered by the same lock\n\n#   (2 to the power of LOCK_SHIFT_EXTRA).  Higher values will increase\n\n#   false sharing but reduce the number of CASes necessary to acquire\n\n#   locks and may avoid cache line invalidations on some workloads.  As\n\n#   shown in [PPoPP-08], a value of 2 seems to offer best performance on\n\n#   many benchmarks.\n\n#\n\n# MIN_BACKOFF (default=0x04UL) and MAX_BACKOFF (default=0x80000000UL):\n\n#   minimum and maximum values of the exponential backoff delay.  This\n\n#   parameter is only used with the CM_BACKOFF contention manager.\n\n#\n\n# VR_THRESHOLD_DEFAULT (default=3): number of aborts due to failed\n\n#   validation before switching to visible reads.  A value of 0\n\n#   indicates no limit.  This parameter is only used with the\n\n#   CM_MODULAR contention manager.  It can also be set using an\n\n#   environment variable of the same name.\n\n########################################################################\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# DEFINES += -DRW_SET_SIZE=4096\n\n# DEFINES += -DLOCK_ARRAY_LOG_SIZE=20\n\n# DEFINES += -DLOCK_SHIFT_EXTRA=2\n\n# DEFINES += -DMIN_BACKOFF=0x04UL\n\n# DEFINES += -DMAX_BACKOFF=0x80000000UL\n\n# DEFINES += -DVR_THRESHOLD_DEFAULT=3\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "########################################################################\n\n# Do not modify anything below this point!\n\n########################################################################\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Replace textual values by constants for unifdef...\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Additional dependencies\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# TODO add an install rule\n\n#install: \t$(TMLIB)\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 45
    },
    "tinySTM/abi/Makefile" : {
      "ObjectId" : "df1d0abcf059c67f2c3111284d17ebebb9f30531",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# simple test and check that use explicit calls to gcc libitm library\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# test-all and check-all need TM compilers (INTEL/DTMC/GCC) in the path \n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tinySTM/abi/dtmc/Makefile" : {
      "ObjectId" : "e524c52f1ceb3089f7e32b544d69c5855f1685ae",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Path to tinySTM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROOT must be defined to include Makefile.common\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n## DTMC\n\n##############################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO find a way to avoid compiling not\n\n#LLVMCC_OK = $(shell $(LLVMCC) ; if [ $$? -neq 0 ] ; then echo \"no differences\" ; fi)\n\n#@$(echo) \"TEST\"\n\n#if [ $$? -eq 0 ] ; then echo \"no differences\" ; fi\n\n#$(shell echo $(LLVMCC_OK))\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -DNO_STACK_CHECK => shouldn't be used\n\n# TODO Add possibility to create 32 bits lib => llvm-ld needs -m32?\n\n# TODO find a good way to add dependencies abi.c tanger.c arch.S and also the lib (otherwise it will not be built or updated)\n\n#%.bc:   ../%.c\n\n#\t$(LLVMCC) $(CPPFLAGS) $(CFLAGS) $(DEF_ABI) -emit-llvm -c -o $@ $<\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#STMLIBDIR       ?= $(TANGERDIR)/$(LLVMBUILD)/lib/\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TESTLDFLAGS     += -static \n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tinySTM/abi/gcc/Makefile" : {
      "ObjectId" : "cddae9608beb5dfdb806636b6c6c2ff7b4d72451",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Path to TinySTM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROOT must be defined to include Makefile.common\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n## GCC\n\n##############################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTES\n\n#   lib.map enables to export only some functions\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO Check if strip is really needed\n\n#\tstrip $@\n\n#\tcp libitm.so libitm.so.1\n\n#\tln -s libitm.so libitm.so.1\n\n#TODO for FAT filesystem, ln doesn't work\n\n##############################################################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tinySTM/abi/intel/Makefile" : {
      "ObjectId" : "4ff1df154895ba570ad9e0f6f47000f5cd80405a",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Path to tinySTM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROOT must be defined to include Makefile.common\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n## INTEL\n\n##############################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTES\n\n#   Intel STM Compiler uses explicit transaction descriptor\n\n#   Two ways to use:\n\n#   - Compile STM application using libitm.a\n\n#   - Compile STM application using Intel STM and change LD_LIBRARY_PATH to use tiny's libitmdyn.so\n\n# FIXME \n\n#   .so version need minor modification to stm_tx_t structure (add vtable at 0x10)\n\n# intel/libitmdyn.so\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO the dependency of arch_x86.S is not set\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO check the dynamic version (not really needed)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##############################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tinySTM/abi/oracle/Makefile" : {
      "ObjectId" : "cdf6519668c685ddda75caf16fff71ca5f22244d",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Path to TinySTM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROOT must be defined to include Makefile.common\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n## Oracle TM \n\n##############################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tinySTM/abi/test/Makefile" : {
      "ObjectId" : "d368fa72cafdce21a7cf70fe8913c3ad2be33f54",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Path to TinySTM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ROOT must be defined to include Makefile.common\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n## GCC\n\n##############################################################################\n\n# TODO Currently it is a copy of GCC-TM Makefile but I didn't find a best way\n\n# to do that until now\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTES\n\n#   lib.map enables to export only some functions\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO Check if strip is really needed\n\n#\tstrip $@\n\n#\tcp libitm.so libitm.so.1\n\n#\tln -s libitm.so libitm.so.1\n\n#TODO for FAT filesystem, ln doesn't work\n\n##############################################################################\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TESTLDFLAGS  += libitm.a\n\n# FIXME: see why big perf degradation with shared library\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tinySTM/test/Makefile" : {
      "ObjectId" : "b475bbc2cc12f3ce6580e367775031040122742d",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tinySTM/test/bank/Makefile" : {
      "ObjectId" : "cf7268c7237fff77cb33afd3e2b401a27d3b5942",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tinySTM/test/intset/Makefile" : {
      "ObjectId" : "803627888fc854b874e40f3d775e7c1ae27b3add",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Solaris requires rt lib for nanosleep\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME in case of ABI $(TMLIB) must be replaced to abi/...\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tinySTM/test/regression/Makefile" : {
      "ObjectId" : "d723efd7654574a65013e66f0cbdb38377bdc755",
      "LastModified" : "2015-10-21T13:59:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 13
  },
  "ElapsedTime" : 2424
}