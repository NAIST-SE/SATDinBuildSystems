{
  "Repository" : "20362130",
  "Revision" : "HEAD",
  "ObjectId" : "b45f0b481888726895b4c5b1f1385b25216a6777",
  "CommitTime" : "2019-04-16T18:07:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0b5f0fcde6eb369d06578d1744a1a35145f364c4",
      "LastModified" : "2019-04-16T09:56:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# options\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get the current working branch\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get the latest abbreviated commit hash of the working branch\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# configure a header file to pass some of the CMake settings\n\n# to the source code\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# dependency on Eigen for confusion matrix fast computation\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# hdf5\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# dependency on Boost\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# annoy\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# optional packages\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cuda + cudnn\n",
        "Line" : 132,
        "CharPositionInLine" : 26
      },
      "10" : {
        "Text" : "# CUDA dependencies\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Dlib\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Currently supported release version of dlib\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Pre-release v1.0rc1\n",
        "Line" : 212,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "# Nov 7, 2018\n",
        "Line" : 219,
        "CharPositionInLine" : 42
      },
      "15" : {
        "Text" : "# Only a few submodules are currently used by caffe2\n\n# (No need to log, benchmark, compile for IOS, make python libraries, ...)\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Pytorch\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Compilation path\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Detectron\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Python path\n",
        "Line" : 315,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# protobuf with tf\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Tensorflow\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# USE_TF\n",
        "Line" : 366,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# OpenCV\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# customized Caffe as external project\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# do nothing\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Set protoc path\n",
        "Line" : 386,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Set cuda arch\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Set config file\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# HAVE_CUDNN\n",
        "Line" : 417,
        "CharPositionInLine" : 11
      },
      "30" : {
        "Text" : "# HAVE_CUDNN\n",
        "Line" : 419,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# CUDA_FOUND\n",
        "Line" : 420,
        "CharPositionInLine" : 9
      },
      "32" : {
        "Text" : "# Set caffe DEBUG mode\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Caffe dependencies\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# NCNN\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# XGBoost\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#    set(XGB_NVCC_FLAGS,\"--expt-extended-lambda;-gencode arch=compute_35,code=compute_35\")\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# add the binary tree to the search path for include files\n\n# so that we will find dd_config.h\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# main library, main & tests\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Flags used by the subdirectories\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# templates\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# examples\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# patches\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# unit testing\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# unit testing\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# status\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46
    },
    "cmake/Cuda.cmake" : {
      "ObjectId" : "8de4172ce34e6f9e3f3b25e8904169be789682a0",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Known NVIDIA GPU achitectures deepdetect can be compiled for.\n\n# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   deepdetect_detect_installed_gpus(out_variable)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# nvcc outputs text containing line breaks when building with MSVC.\n\n# The line below prevents CMake from inserting a variable with line\n\n# breaks in the cache\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA_ARCH_NAME\n\n# Usage:\n\n#   deepdetect_select_nvcc_arch_flags(out_variable)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# List of arch names\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# set CUDA_ARCH_NAME strings (so it will be seen as dropbox in CMake-Gui)\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# verify CUDA_ARCH_NAME value\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# (${CUDA_ARCH_NAME} STREQUAL \"Manual\")\n",
        "Line" : 103,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified PTX for the concrete BIN\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 124,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "################################################################################################\n\n# Short command for cuda compilation\n\n# Usage:\n\n#   deepdetect_cuda_compile(<objlist_variable> <cuda_files>)\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# we remove /EHa as it generates warnings under windows\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "################################################################################################\n\n# Short command for cuDNN detection. Believe it soon will be a part of CUDA toolkit distribution.\n\n# That's why not FindcuDNN.cmake file, but just the macro\n\n# Usage:\n\n#   detect_cuDNN()\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# libcudnn_static.a\n",
        "Line" : 195,
        "CharPositionInLine" : 47
      },
      "17" : {
        "Text" : "################################################################################################\n\n###  Non macro section\n\n################################################################################################\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# cmake 2.8.7 compatibility which doesn't search for curand\n",
        "Line" : 214,
        "CharPositionInLine" : 31
      },
      "19" : {
        "Text" : "# cudnn detection\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# setting nvcc arch flags\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Boost 1.55 workaround, see https://svn.boost.org/trac/boost/ticket/9392 or\n\n# https://github.com/ComputationalRadiationPhysics/picongpu/blob/master/src/picongpu/CMakeLists.txt\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# avoid warning for CMake >= 2.8.12\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# disable some nvcc diagnostic that apears in boost, glog, glags, opencv, etc.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# setting default testing device\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Handle clang/libc++ issue\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# OSX 10.9 and higher uses clang/libc++ by default which is incompartible with old CUDA toolkits\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# enabled by default if and only if CUDA version is less than 7.0\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "main/CMakeLists.txt" : {
      "ObjectId" : "3ebbd231432a293985556c7e8e6afd7bfd7d7a6c",
      "LastModified" : "2018-09-04T09:22:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "603d81d9da15186521d05d6806cf9f61191ba20f",
      "LastModified" : "2019-02-21T13:48:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# main library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "861c6c86a04dd8b3996b73ec3924194deeb935c6",
      "LastModified" : "2019-02-21T13:48:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optional libraries can be passed (stored in ARGN)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# XXX: output directory doesn't work here, maybe because of special cmake handling\n",
        "Line" : 51,
        "CharPositionInLine" : 137
      },
      "2" : {
        "Text" : "# File to get\n",
        "Line" : 206,
        "CharPositionInLine" : 58
      },
      "3" : {
        "Text" : "# File to download\n",
        "Line" : 209,
        "CharPositionInLine" : 47
      },
      "4" : {
        "Text" : "# Url of the file\n",
        "Line" : 211,
        "CharPositionInLine" : 68
      },
      "5" : {
        "Text" : "# Download\n",
        "Line" : 212,
        "CharPositionInLine" : 35
      },
      "6" : {
        "Text" : "# Untar\n",
        "Line" : 216,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : "# Tar GZ files\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Models\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tests\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "074f3048b5885452ab70357fc65550086f8ee83e",
      "LastModified" : "2018-09-07T09:22:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 1877
}