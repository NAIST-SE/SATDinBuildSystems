{
  "Repository" : "4923539",
  "Revision" : "HEAD",
  "ObjectId" : "2a2cca70b96c6d635b227e1dc2fff138c40e37c8",
  "CommitTime" : "2018-12-29T00:34:58Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "7e8e55471c697de71ae643237440a355e441665c",
      "LastModified" : "2018-12-29T00:34:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Simbody\n\n#\n\n# This is the master CMake file that coordinates\n\n# the build of Simbody. There are four steps:\n\n#    (1) Get files needed for particular platform\n\n#    (2) Build SimTKcommon library\n\n#    (3) Build SimTKmath library\n\n#    (4) Build SimTKsimbody library\n\n#    (5) Build examples\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To properly support Visual Studio 2015.\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# At this point CMake will have set CMAKE_INSTALL_PREFIX to /usr/local on Linux\n\n# or appropriate ProgramFiles directory on Windows, for example\n\n# C:/Program Files/Simbody, C:/Program Files (x86)/Simbody, or the local\n\n# language equivalent.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Redefine DOCDIR to use the project name in lowercase to avoid\n\n# problems with some platforms: NTFS on Win, XFS or JFS variants\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Include GNUInstallDirs to get canonical paths\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Declare the option for code coverage\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check compiler version\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# underbar separated list of dotted authors, no spaces or commas\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Report the version number to the CMake UI. Don't include the\n\n# build version if it is zero.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This is the suffix if we're building and depending on versioned libraries.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make everything go in the same binary directory. (These are CMake-defined\n\n# variables.)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Dynamic libraries, tests, and examples\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Static libraries, tests, and examples won't be built unless this\n\n# is set.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Use this to generate a private set of libraries whose names\n\n# won't conflict with installed versions.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Ensure that debug libraries have \"_d\" appended to their names.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# These are the names of all the libraries we may generate. These are\n\n# target names so can be used to specify dependencies of one library\n\n# on another. (In Debug mode the actual targets will have \"_d\" appended.)\n\n#\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Caution: this variable is automatically created by the CMake\n\n# enable_testing() command, but we'll take it over here for\n\n# our own purposes too.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set whether to build the Visualizer code.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Turning this off reduces the build time (and space) substantially,\n\n# but you may miss the occasional odd bug. Also currently on Windows it\n\n# is easier to debug the static tests than the DLL-linked ones.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# In addition to the platform name we need to know the Application Binary\n\n# Interface (ABI) we're building for. Currently that is either x86, meaning\n\n# 32 bit Intel instruction set, or x64 for 64 bit Intel instruction set.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# If CMAKE_INSTALL_PREFIX is /usr/local, then the LIBDIR should necessarily be\n\n# lib/. Sometimes (on Linux), LIBDIR is something like x86_64-linux-gnu. The\n\n# linker will search /usr/lib/x86_64-linux-gnu (this path is in\n\n# /etc/ld.so.conf.d), but it will NOT search /usr/local/lib/x86-64-linux-gnu.\n\n# HOWEVER, it WILL search /usr/local/lib. So that Linux users needn't modify\n\n# their LD_LIBRARY_PATH if installing to /usr/local, we force the LIBDIR to be\n\n# lib/.\n\n# Note: CMake 3.0 fixes this issue. When we move to CMake 3.0, we can\n\n# remove this if-statement. See issue #151.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Overwrite both of these variables; we use both of them.\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "## Choose the maximum level of x86 instruction set that the compiler is\n\n## allowed to use.\n\n## Was using sse2 but changed to let the compilers choose. Most will\n\n## probably use sse2 or later by default.\n\n## On 64 bit MSVC 2013, the default is sse2 and the argument\n\n## isn't recognized so don't specify it.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## This can be set to a different value by the person running CMake.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# RPATH\n\n# -----\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# CMake 2.8.12 introduced the ability to set RPATH for shared libraries on\n\n# OSX. This helps executables find the libraries they depend on without\n\n# having to set the DYLD_LIBRARY_PATH environment variable.\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Consider a library libfoo.dyld and an executable bar.\n\n# On OSX, libraries have an \"install name\" that, when linking, is copied\n\n# into the target (e.g., bar). The \"install name\" can be the full path to\n\n# libfoo.dylib, in which case bar will have no trouble finding libfoo.dylib\n\n# at runtime (since it has the full path to it). This doesn't work if you\n\n# want to be able to relocate your project. Therefore, it's possible to use\n\n# special tokens in the \"install name\" that are evaluated separately. The\n\n# token \"@exectuable_path\" is evaluated (at run time) to the full path of\n\n# the exectuable (e.g., bar) that is trying to load libfoo.dylib. An even\n\n# more flexible token is \"@rpath\", which is evaluated to a path (called\n\n# RPATH) that can be baked into the executable just after compiling or any\n\n# time before running the executable (using the executable\n\n# \"install_name_tool\"). The RPATH stored in executables can also contain\n\n# \"@executable_path\", etc.\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Set the install name of libraries to contain \"@rpath\".\n\n# This allows clients of our libraries to point to them however they wish.\n",
        "Line" : 325,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# We only need to set RPATH in executables if the libraries are installed\n\n# into directories that are not already searched by the linker.\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# CMake sets isSystemDir to -1 if the lib dir is NOT a system lib dir.\n",
        "Line" : 333,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# This variable is used later on to toggle if RPATH should be set for\n\n# specific targets.\n",
        "Line" : 335,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "## When building in any of the Release modes, tell gcc/clang to use\n\n## not-quite most agressive optimization.  Here we\n\n## are specifying *all* of the Release flags, overriding CMake's defaults.\n\n## Watch out for optimizer bugs in particular gcc versions!\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# C++11\n\n# -----\n\n# Using C++11 on OSX requires using libc++ instead of libstd++.\n\n# libc++ is an implementation of the C++ standard library for OSX.\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# not APPLE\n",
        "Line" : 364,
        "CharPositionInLine" : 11
      },
      "34" : {
        "Text" : "# Get the gcc or clang version number in major.minor.build format\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Unrolling fixed-count loops was a useful optimization for Simmatrix\n\n# in earlier gcc versions.\n\n# Doesn't have a big effect for current compiler crop and may be\n\n# pushing our luck with optimizer bugs. So let the compilers decide\n\n# how to handle loops instead.\n\n##set(GCC_OPT_ENABLE \"-funroll-loops\")\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If you know of optimization bugs that affect Simbody in particular\n\n# gcc versions, this is the place to turn off those optimizations.\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# C++\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# C\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# C++\n",
        "Line" : 406,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# C\n",
        "Line" : 416,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "## When building in any of the Release modes, tell VC++ cl compiler to use\n\n## intrinsics (i.e. sqrt instruction rather than sqrt subroutine) with\n\n## flag /Oi.\n\n## Caution: can't use CMAKE_CXX_COMPILER_ID MATCHES MSVC here because\n\n## \"MSVC\" is a predefined CMAKE variable and will get expanded to 1 or 0\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# abbreviation\n",
        "Line" : 449,
        "CharPositionInLine" : 48
      },
      "43" : {
        "Text" : "## C++\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "## C\n",
        "Line" : 461,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "## C++\n",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "## C\n",
        "Line" : 481,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Collect up information about the version of the simbody library we're building\n\n# and make it available to the code so it can be built into the binaries.\n\n# TODO removed SVN_REVSION; replace with GIT_SHA1\n\n# http://stackoverflow.com/questions/1435953/how-can-i-pass-git-sha1-to-compiler-as-definition-using-cmake\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# CMake quotes automatically when building Visual Studio projects but we need\n\n# to add them ourselves for Linux or Cygwin. Two cases to avoid duplicate quotes\n\n# in Visual Studio which end up in the binary.\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "##TODO: doesn't work without quotes in nightly build\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Determine which math libraries to use for this platform.\n\n# Intel MKL: mkl_intel_c_dll;mkl_sequential_dll;mkl_core_dll\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# We do not use pthreads directly anymore, but on Linux, C++11 threads\n\n# are implemented with pthreads, and we must link to it.\n",
        "Line" : 545,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "#\n\n# Allow automated build and dashboard.\n\n#\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "## When in Debug mode and running valgrind, some of the test\n\n## cases take longer than the default 1500 seconds.\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#\n\n# Testing\n\n#\n",
        "Line" : 566,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Make a RUN_TESTS_PARALLEL target (thanks, Kevin!)\n\n# Specify number of cores to run for testing\n",
        "Line" : 571,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# These are used in Doxyfile.in and SimbodyConfig.cmake.in.\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Specify where visualizer should be installed. This needs to be in the\n\n# root CMakeLists.txt so the cmake config file can see this value.\n\n#\n\n# Also specify where include files are installed.\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Install visualizer to bin, since it needs to be co-located with dll's\n",
        "Line" : 595,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Install include files into base include folder since it's a sandbox\n",
        "Line" : 597,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# Visualizer is not intended to be a user executable. Proper place is\n\n# inside the lib directory\n",
        "Line" : 600,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Install include files in simbody subfolder to avoid polluting the\n\n# global build folder\n",
        "Line" : 603,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# Each of these returns a list of API include directories for\n\n# use by the later builds.\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# PLATFORM_INCLUDE_DIRECTORIES now set\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# SimTKCOMMON_INCLUDE_DIRECTORIES now set\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# SimTKMATH_INCLUDE_DIRECTORIES now set\n",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# SimTKSIMBODY_INCLUDE_DIRECTORIES now set(but not used)\n\n# GUI_NAME now set\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Add uninstall target\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Make the cmake config files\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Configure SimbodyConfig.cmake in a way that allows the installation to be\n\n# relocatable.\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Variables to edit in the SimbodyConfig.cmake.in.\n",
        "Line" : 659,
        "CharPositionInLine" : 14
      },
      "71" : {
        "Text" : "# Create a file that allows clients to Simbody to ensure they have the version\n\n# of Simbody they want.\n\n# Requires CMake 2.8.8.\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#optionally: COMPONENT dev\n",
        "Line" : 684,
        "CharPositionInLine" : 32
      },
      "73" : {
        "Text" : "# Install a sample CMakeLists.txt that uses SimbodyConfig.cmake.\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Make the pkgconfig file: select the proper flags depending on the platform\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# win 64 bits\n",
        "Line" : 693,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 76
    },
    "Platform/CMakeLists.txt" : {
      "ObjectId" : "5dfc381d904b0f0c5f4a8863cb3a7fcf97c8eb4a",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------\n\n# Simbody/Platform\n\n#\n\n# Simbody has dependencies on several low-level packages\n\n# for which the details differ on different platforms.\n\n# Dependencies are:\n\n#    - Blas, Lapack\n\n# We provide our own high-performance Lapack library\n\n# for Windows; Linux and Macs are expected to have one.\n\n# We used to supply our own Pthreads on Windows, but this\n\n# was replaced with C++11 threading in 2018.\n\n#-----------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only provided for native builds\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Caution: No cross-compiling is taken into account:\n\n# If we use a 32 bit compiler, we will get a 32 executable.\n\n# The same for 64 bit platform\n\n#\n\n# 1 Check the thread model\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# 2 Check the exception mechanism\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Maybe Dlls are present in the mingw bin directory\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# We have to ensure that the exception mechanism of MinGW\n\n# is the same as the one used with the blas and lapack libraries provided\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# If we use MinGW, we bypass the classical *dll and use\n\n# the MinGW ones.\n\n# TODO: We should select only the ones needed...\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# message(STATUS \"List of dependencies : ${LIB_FILES}\" )\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is where we're going to put these binaries.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# During build, we want to copy all of the platform binaries\n\n# into the same binary directory that we are using for all of\n\n# the ones we build. That ensures that our build will always\n\n# use the current versions of these.\n\n#\n\n# At installation, we copy both includes and binaries into\n\n# the appropriate locations of the SimTK_INSTALL_DIR.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Only the runtime libraries (.dll) are needed next to the\n\n# executables/tests; import libraries (.lib) are linked through\n\n# target_link_libraries.\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Create \"fake\" IMPORTED targets to represent the pre-built platform libraries.\n\n# When CMake sees that a target links to, e.g., the blas target, CMake will use\n\n# the appropriate library paths below.\n\n# Note: we don't need to do this for the other platform libraries\n\n# (gcc_s_sjlj-1, gfortran, quadmath, ...) since Simbody's libraries do not link\n\n# to them when compiling; we only need to do this for import libraries (.lib).\n\n# All the platform libraries (including quadmath, etc.) still must be on the\n\n# PATH when running executables using Simbody.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Without GLOBAL, this target is only available in this dir. and below,\n\n# but we want to use these targets everywhere in this project.\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# lapack depends on blas:\n",
        "Line" : 194,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# There is just one item in PLATFORM_INCLUDE_DIRECTORIES.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Copy to parent.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This needs an outer loop if you add more include directories.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "SimTKcommon/CMakeLists.txt" : {
      "ObjectId" : "47839f5f6863e1a2a6d4cfc279d93c55722142b7",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------\n\n# SimTKcommon\n\n#\n\n# Creates SimTK Core library, base name=SimTKcommon.\n\n# Default libraries are shared & optimized. Variants\n\n# are created for static (_static) and debug (_d) and\n\n# provision is made for an optional \"namespace\" (ns)\n\n# and version number (vn).\n\n#\n\n# Windows:\n\n#   [ns_]SimTKcommon[_vn][_d].dll\n\n#   [ns_]SimTKcommon[_vn][_d].lib\n\n#   [ns_]SimTKcommon[_vn]_static[_d].lib\n\n# Linux/Cygwin:\n\n#   lib[ns_]SimTKcommon[_vn][_d].so\n\n#   lib[ns_]SimTKcommon[_vn]_static[_d].a\n\n# Mac:\n\n#   lib[ns_]SimTKcommon[_vn][_d].dylib\n\n#   lib[ns_]SimTKcommon[_vn]_static[_d].a\n\n#\n\n# Targets are installed in\n\n#   %ProgramFiles%\\SimTK\\lib,bin       (Win32)\n\n#   %ProgramFiles(x86)%\\SimTK\\lib,bin  (32 bit target on Win64)\n\n#   %ProgramW6432%\\SimTK\\lib,bin       (64 bit target on Win64)\n\n#   /usr/local/SimTK/lib[64]           (Linux, Mac, Cygwin)\n\n#\n\n#----------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SimTKcommon depends on the Platform files but nothing else.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source is organized into subdirectories, but we handle them all from\n\n# this CMakeLists file rather than letting CMake visit them as SUBDIRS.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Collect up information about the version of the SimTKcommon library\n\n# we're building and make it available to the code so it can be built\n\n# into the binaries. This also determines the versioned library names\n\n# in which case all dependencies must use the same version.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Report the version number to the CMake UI. Don't include the\n\n# build version if it is zero.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is the suffix if we're building and depending on versioned libraries.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# underbar separated list of dotted authors, no spaces or commas\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -DSimTK_SimTKCOMMON_LIBRARY_TYPE has to be defined in the target subdirectories.\n\n# -DSimTKcommon_EXPORTS defined automatically when Windows DLL build is being done.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Test against the unversioned libraries if they are being build;\n\n## otherwise against the versioned libraries.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# These are all the places to search for header files which are\n\n# to be part of the API.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# start empty\n",
        "Line" : 106,
        "CharPositionInLine" : 22
      },
      "11" : {
        "Text" : "# start empty\n",
        "Line" : 107,
        "CharPositionInLine" : 30
      },
      "12" : {
        "Text" : "# append\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Referencing headers must always be done relative to this level.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Include the SimTKcommon API include directories now so that SimTKcommon code\n\n# can use them.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pass up the include directories list to the parent so\n\n# subsequent libraries can use them.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We'll need both *relative* path names, starting with their API_INCLUDE_DIRS,\n\n# and absolute pathnames.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# start these out empty\n",
        "Line" : 131,
        "CharPositionInLine" : 29
      },
      "18" : {
        "Text" : "# returns full pathnames\n",
        "Line" : 135,
        "CharPositionInLine" : 39
      },
      "19" : {
        "Text" : "# collect up source files\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# empty\n",
        "Line" : 145,
        "CharPositionInLine" : 18
      },
      "21" : {
        "Text" : "#append\n",
        "Line" : 151,
        "CharPositionInLine" : 69
      },
      "22" : {
        "Text" : "#\n\n# Installation\n\n#\n\n# libraries are installed from their subdirectories; headers here\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# install headers\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# These are at the end because we want them processed after\n\n# all the various variables have been set above.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "SimTKcommon/sharedTarget/CMakeLists.txt" : {
      "ObjectId" : "514e4b8de6e8c59b7d30e37dc82ea5caf2e4e27a",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This whole directory exists just so I could define this extra \n\n## preprocessor value.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install library; on Windows .dll's go in bin directory\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This removes the need for client projects to use\n\n# `include_directories(${Simbody_INCLUDE_DIR})`. However, this ability\n\n# was only introduced in CMake 3.0.\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# install library; on Windows .dll's go in bin directory\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "SimTKcommon/staticTarget/CMakeLists.txt" : {
      "ObjectId" : "7839aae78d50893172b680416a159a38732d5227",
      "LastModified" : "2017-08-31T16:59:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This whole directory exists just so I could define this extra \n\n## preprocessor values.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Warning 4996 is not propagated to downstream targets\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This removes the need for client projects to use\n\n# `include_directories(${Simbody_INCLUDE_DIR})`. However, this ability\n\n# was only introduced in CMake 3.0.\n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Warning 4996 is not propagated to downstream targets  \n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "SimTKcommon/tests/CMakeLists.txt" : {
      "ObjectId" : "074ed59cd0067e5dfd5fd57c384a90bd2fac0824",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adhoc tests are those test or demo programs which are not intended,\n\n# or not ready, to be part of the regression suite.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate regression tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests\" directory. These are for test cases which \n\n# have been engineered to be suitable as part of the nightly regression\n\n# test suite. Ideally, they know their correct answers and return\n\n# a simple thumbs-up/thumbs-down result, although some regressions \n\n# may be present and useful just to determine if they compile and\n\n# run to completion.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Regr - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link with shared library\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Link with static library\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "SimTKcommon/tests/adhoc/CMakeLists.txt" : {
      "ObjectId" : "0a3e127e3df1d3f5927f51ad74ab0b02345fbdb2",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate adhoc tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests/adhoc\" subdirectory. These are for \"loose\" test\n\n# cases, not suitable as regression tests but perhaps useful to the\n\n# developer or as demos. Unlike the similar boilerplate code in the \"tests\"\n\n# directory, this does not generate CMake ADD_TEST commands so these\n\n# will never run automatically.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Adhoc - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with shared library\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Link with static library\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "SimTKmath/CMakeLists.txt" : {
      "ObjectId" : "f5c82aeaee048449a64627e6a08017c01c2f9ff1",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------\n\n# Simmath\n\n#\n\n# Creates SimTK Core library, base name=SimTKmath.\n\n# Default libraries are shared & optimized. Variants\n\n# are created for static (_static) and debug (_d) and\n\n# provision is made for an optional \"namespace\" (ns)\n\n# and version number (vn).\n\n#\n\n# Windows:\n\n#   [ns_]SimTKmath[_vn][_d].dll\n\n#   [ns_]SimTKmath[_vn][_d].lib\n\n#   [ns_]SimTKmath[_vn]_static[_d].lib\n\n# Unix:\n\n#   lib[ns_]SimTKmath[_vn][_d].so\n\n#   lib[ns_]SimTKmath[_vn]_static[_d].a\n\n#\n\n# All libraries are installed in\n\n#   %ProgramFiles%\\SimTK\\lib  (Windows)\n\n#   /usr/local/SimTK/lib        (UNIX)\n\n#\n\n#----------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SimTKmath depends on PlatformFiles and SimTKcommon only.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# code is in \"./src\" and in each of these subdirectories/src\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Collect up information about the version of the SimTKmath library\n\n# we're building and make it available to the code so it can be built\n\n# into the binaries. This also determines the versioned library names\n\n# in which case all dependencies must use the same version.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Report the version number to the CMake UI. Don't include the\n\n# patch version if it is zero.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is the suffix if we're building and depending on versioned libraries.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# underbar separated list of dotted authors, no spaces or commas\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -DSimTK_SIMMATH_TYPE has to be defined in the target subdirectories.\n\n# -Dsimmath_EXPORTS defined automatically when Windows DLL build is being done.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Test against the unversioned libraries if they are being built;\n\n## otherwise against the versioned libraries.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# These are all the places to search for header files which are\n\n# to be part of the API.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# start empty\n",
        "Line" : 98,
        "CharPositionInLine" : 22
      },
      "11" : {
        "Text" : "# start empty\n",
        "Line" : 99,
        "CharPositionInLine" : 28
      },
      "12" : {
        "Text" : "# append\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Referencing headers must always be done relative to this level.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Include the Simmath API include directories now so that Simmath code\n\n# can use them.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# And pass API include directories up to the parent so subsequent libraries\n\n# can find the headers too.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We'll need both *relative* path names, starting with\n\n# their API_INCLUDE_DIRS, and absolute pathnames.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# start these out empty\n",
        "Line" : 124,
        "CharPositionInLine" : 29
      },
      "18" : {
        "Text" : "# returns full pathnames\n",
        "Line" : 128,
        "CharPositionInLine" : 39
      },
      "19" : {
        "Text" : "# collect up source files\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# empty\n",
        "Line" : 139,
        "CharPositionInLine" : 18
      },
      "21" : {
        "Text" : "# for dependency tracking only, I believe (sherm)\n",
        "Line" : 140,
        "CharPositionInLine" : 26
      },
      "22" : {
        "Text" : "# in case some low-level source needs a -I include dir\n",
        "Line" : 141,
        "CharPositionInLine" : 25
      },
      "23" : {
        "Text" : "# first process all the source subdirectories\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# then process ./src\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#append\n",
        "Line" : 163,
        "CharPositionInLine" : 65
      },
      "26" : {
        "Text" : "# Add low-level source include directories if any.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\n\n# Installation\n\n#\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# libraries are installed from their subdirectories; headers here\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# install headers\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# These are at the end because we want them processed after\n\n# all the various variables have been set above.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "SimTKmath/Geometry/CMakeLists.txt" : {
      "ObjectId" : "c85e05d46e89c350d68bf788de617c395594117c",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add in local source and headers here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "SimTKmath/Integrators/CMakeLists.txt" : {
      "ObjectId" : "e2d88892095825946fcee5875aece19abe4147f4",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# visit the CPodes directory to gather up source and tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add in local source and headers here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We don't have any include dirs to add here but we have to pass\n\n# up anything added in a subdirectory.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "SimTKmath/Integrators/src/CPodes/CMakeLists.txt" : {
      "ObjectId" : "1d23a304488d128e098f965adf6bf1e30000d994",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# visit the sundials directory to gather up source and tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add in local source and headers here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# just pass these up\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define tests that depend on sources here\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "SimTKmath/Integrators/src/CPodes/sundials/CMakeLists.txt" : {
      "ObjectId" : "ab864775741b0fc7d73c642e372cdd8885241908",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add in all sundials source and headers here\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build tests that depend on source at this level\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "SimTKmath/Integrators/src/CPodes/sundials/tests/CMakeLists.txt" : {
      "ObjectId" : "62a649190dc90754cd457f2c57f20f6ab96ac251",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This set of tests was written by Radu Serban to test CPodes within\n\n# the Sundials framework. They do not use the SimTK C++ interface at all.\n\n#\n\n# Only static linking can be done here because the dynamic Simmath library\n\n# does not export internal cpodes functions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adhoc tests are those test or demo programs which are not intended,\n\n# or not ready, to be part of the regression suite.\n\n#add_subdirectory(adhoc)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate regression tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests\" directory. These are for test cases which \n\n# have been engineered to be suitable as part of the nightly regression\n\n# test suite. Ideally, they know their correct answers and return\n\n# a simple thumbs-up/thumbs-down result, although some regressions \n\n# may be present and useful just to determine if they compile and\n\n# run to completion.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Regr - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link with shared library\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Link with static library\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "SimTKmath/Integrators/src/CPodes/tests/CMakeLists.txt" : {
      "ObjectId" : "c983f12e6e1f4722689ab3d1aa35199bcdbef026",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adhoc tests are those test or demo programs which are not intended,\n\n# or not ready, to be part of the regression suite.\n\n#add_subdirectory(adhoc)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate regression tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests\" directory. These are for test cases which \n\n# have been engineered to be suitable as part of the nightly regression\n\n# test suite. Ideally, they know their correct answers and return\n\n# a simple thumbs-up/thumbs-down result, although some regressions \n\n# may be present and useful just to determine if they compile and\n\n# run to completion.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Regr - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link with shared library\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Link with static library\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "SimTKmath/LinearAlgebra/CMakeLists.txt" : {
      "ObjectId" : "c85e05d46e89c350d68bf788de617c395594117c",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add in local source and headers here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "SimTKmath/Optimizers/CMakeLists.txt" : {
      "ObjectId" : "6f4b3e7ab499b4bab84e479f0e5e5133a9cb4cbc",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# visit the following directories to gather up source\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add in local source and headers here\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# pass up the chain\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "SimTKmath/Optimizers/src/IpOpt/CMakeLists.txt" : {
      "ObjectId" : "cc4c93e2b587579d068769e423bb1b539fdea23a",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add in local source and headers here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "SimTKmath/Optimizers/src/c-cmaes/CMakeLists.txt" : {
      "ObjectId" : "417b9370db8c6aca8c8ef82a473e328147e368f2",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add in local source and headers here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append to the local scope copy, and then copy up to parent scope\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "SimTKmath/sharedTarget/CMakeLists.txt" : {
      "ObjectId" : "5a84c04e1f754ca509d864e6bce7a5fa4f3e62df",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This whole directory exists just so I could define this extra preprocessor value.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Set up file groups for better browsing in Visual Studio.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override Api headers to put them in the Api group.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Now put things in their specified groups.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are defaults for files that don't otherwise get mentioned.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install library; on Windows both .lib and .dll go in the lib directory.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This removes the need for client projects to use\n\n# `include_directories(${Simbody_INCLUDE_DIR})`. However, this ability\n\n# was only introduced in CMake 3.0.\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# install library; on Windows both .lib and .dll go in the lib directory.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "SimTKmath/staticTarget/CMakeLists.txt" : {
      "ObjectId" : "cd1380bdf3f7d752eaadb5a6145c39f99e573153",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This whole directory exists just so I could define these extra \n\n## preprocessor values.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Set up file groups for better browsing in Visual Studio.\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override Api headers to put them in the Api group.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Now put things in their specified groups.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are defaults for files that don't otherwise get mentioned.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install library; on Windows both .lib and .dll go in the lib directory.\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This removes the need for client projects to use\n\n# `include_directories(${Simbody_INCLUDE_DIR})`. However, this ability\n\n# was only introduced in CMake 3.0.\n",
        "Line" : 52,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# install library; on Windows both .lib and .dll go in the lib directory.\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "SimTKmath/tests/CMakeLists.txt" : {
      "ObjectId" : "26ae9c1a5d045a2cacaa992e70feb993f904792f",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adhoc tests are those test or demo programs which are not intended,\n\n# or not ready, to be part of the regression suite.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate regression tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests\" directory. These are for test cases which \n\n# have been engineered to be suitable as part of the nightly regression\n\n# test suite. Ideally, they know their correct answers and return\n\n# a simple thumbs-up/thumbs-down result, although some regressions \n\n# may be present and useful just to determine if they compile and\n\n# run to completion.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Regr - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some tests here share headers. We don't know the actual dependencies\n\n# so we'll just make each test depend on all the headers which is\n\n# at least conservative.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link with shared library\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Link with static library\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "SimTKmath/tests/adhoc/CMakeLists.txt" : {
      "ObjectId" : "0a3e127e3df1d3f5927f51ad74ab0b02345fbdb2",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate adhoc tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests/adhoc\" subdirectory. These are for \"loose\" test\n\n# cases, not suitable as regression tests but perhaps useful to the\n\n# developer or as demos. Unlike the similar boilerplate code in the \"tests\"\n\n# directory, this does not generate CMake ADD_TEST commands so these\n\n# will never run automatically.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Adhoc - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with shared library\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Link with static library\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "Simbody/CMakeLists.txt" : {
      "ObjectId" : "062c2b95550f74605fb06f9bb5a3c65e514b329c",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------\n\n# Simbody\n\n#\n\n# Creates SimTK Core library, base name=SimTKsimbody.\n\n# Default libraries are shared & optimized. Variants\n\n# are created for static (_static) and debug (_d) and\n\n# provision is made for an optional \"namespace\" (ns)\n\n# and version number (vn).\n\n#\n\n# Windows:\n\n#   [ns_]SimTKsimbody[_vn][_d].dll\n\n#   [ns_]SimTKsimbody[_vn][_d].lib\n\n#   [ns_]SimTKsimbody[_vn]_static[_d].lib\n\n# Unix:\n\n#   lib[ns_]SimTKsimbody[_vn][_d].so\n\n#   lib[ns_]SimTKsimbody[_vn]_static[_d].a\n\n#\n\n# All libraries are installed in\n\n#   %ProgramFiles%\\SimTK\\lib[64]  (Windows)\n\n#   /usr/local/SimTK/lib[64]        (UNIX)\n\n#\n\n#----------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SimTKsimbody depends on PlatformFiles, SimTKcommon, and SimTKmath only.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source is organized into subdirectories, but we handle them all from\n\n# this CMakeLists file rather than letting CMake visit them as SUBDIRS.\n\n# The BUILD_VISUALIZER variable determines whether we actually build the\n\n# simbody-visualizer, but we still have to build the library-side support for\n\n# the Visualizer so that Simbody tests won't fail to build.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Test against the unversioned libraries if they are being built;\n\n## otherwise against the versioned libraries.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are all the places to search for header files which are\n\n# to be part of the API.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# start empty\n",
        "Line" : 61,
        "CharPositionInLine" : 22
      },
      "6" : {
        "Text" : "# start empty\n",
        "Line" : 62,
        "CharPositionInLine" : 31
      },
      "7" : {
        "Text" : "# append\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Referencing headers must always be done relative to this level.\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Include the Simbody API include directories now so that Simbody code\n\n# can use them.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# And pass API include directories up to the parent so subsequent libraries\n\n# can find the headers too.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We'll need both *relative* path names, starting with their API_INCLUDE_DIRS,\n\n# and absolute pathnames.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# start these out empty\n",
        "Line" : 87,
        "CharPositionInLine" : 29
      },
      "13" : {
        "Text" : "# returns full pathnames\n",
        "Line" : 91,
        "CharPositionInLine" : 39
      },
      "14" : {
        "Text" : "# collect up source files\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# empty\n",
        "Line" : 101,
        "CharPositionInLine" : 18
      },
      "16" : {
        "Text" : "#append\n",
        "Line" : 107,
        "CharPositionInLine" : 69
      },
      "17" : {
        "Text" : "#include_directories(${PROJECT_SOURCE_DIR}/${subdir}/include)\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#include_directories(${PROJECT_SOURCE_DIR}/src)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# libraries are installed from their subdirectories; headers here\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# install headers\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# SIMBODY_VISUALIZER_INSTALL_DIR defined in root CMakeLists.txt\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Create a relative path from lib dir to dir containing simbody-visualizer;\n\n# this is used in VisualizerProtocol.cpp (though, only useful on non-Windows).\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# These are at the end because we want them processed after\n\n# all the various variables have been set above.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOTE: If you change GUI_NAME, you must also change the value of GuiAppName\n\n# in VisualizerProtocol.cpp\n\n# TODO even that is not sufficient.\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "Simbody/Visualizer/simbody-visualizer/CMakeLists.txt" : {
      "ObjectId" : "be78c9130f021d5e92e8fc8e552d3e83e13fd455",
      "LastModified" : "2018-01-14T01:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate the visualizer application and deal with its dependencies\n\n# on OpenGL and glut. On Windows we're going to install our own glut; for\n\n# other platforms we depend on their already being a glut (or freeglut)\n\n# available.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Update the local copy of the dll; destination is Release or Debug.\n\n# Must fix slashes so that Windows \"copy\" command can work.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# sets GLUT_LIBRARIES\n",
        "Line" : 23,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# only on Windows\n",
        "Line" : 43,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "# If building as debug, append the debug postfix to the name of the executable.\n\n# CMAKE_DEBUG_POSTFIX only affects non-executable targets, but we use its value\n\n# to set the postfix for this executable.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On OSX, bake the relative path to the Simbody libraries into the visualizer\n\n# executable. Then there's no need to set `DYLD_LIBRARY_PATH` to find the\n\n# libraries when using the visualizer.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# @executable_path only makes sense on OSX, so if we use RPATH on\n\n# Linux we'll have to revisit.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# vis_dir_to_install_dir is most likely \"../\"\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SIMBODY_VISUALIZER_INSTALL_DIR is set in the root CMakeLists.txt\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# on Windows we also have to copy and later install the glut32.dll\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This gets executed whenever the named target gets built.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "Simbody/sharedTarget/CMakeLists.txt" : {
      "ObjectId" : "65ba8cb3a8e6bcbba2a32a7fb313a4e0bdb6d849",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This whole directory exists just so I could define this extra \n\n## preprocessor value.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install library; on Windows the .dll goes in the bin directory.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This removes the need for client projects to use\n\n# `include_directories(${Simbody_INCLUDE_DIR})`. However, this ability\n\n# was only introduced in CMake 3.0.\n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# install library; on Windows the .dll goes in the bin directory.\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "Simbody/staticTarget/CMakeLists.txt" : {
      "ObjectId" : "540d6e477d21b31acf8e37d717892717598ddfac",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This whole directory exists just so I could define these extra \n\n## preprocessor values.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install library\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This removes the need for client projects to use\n\n# `include_directories(${Simbody_INCLUDE_DIR})`. However, this ability\n\n# was only introduced in CMake 3.0.\n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# install library\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "Simbody/tests/CMakeLists.txt" : {
      "ObjectId" : "074ed59cd0067e5dfd5fd57c384a90bd2fac0824",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adhoc tests are those test or demo programs which are not intended,\n\n# or not ready, to be part of the regression suite.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate regression tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests\" directory. These are for test cases which \n\n# have been engineered to be suitable as part of the nightly regression\n\n# test suite. Ideally, they know their correct answers and return\n\n# a simple thumbs-up/thumbs-down result, although some regressions \n\n# may be present and useful just to determine if they compile and\n\n# run to completion.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Regr - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link with shared library\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Link with static library\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "Simbody/tests/adhoc/CMakeLists.txt" : {
      "ObjectId" : "25c60297a02fc584ba5bd336bd5dd6f61e234449",
      "LastModified" : "2015-06-18T05:52:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate adhoc tests.\n\n#\n\n# This is boilerplate code for generating a set of executables, one per\n\n# .cpp file in a \"tests/adhoc\" subdirectory. These are for \"loose\" test\n\n# cases, not suitable as regression tests but perhaps useful to the\n\n# developer or as demos. Unlike the similar boilerplate code in the \"tests\"\n\n# directory, this does not generate CMake ADD_TEST commands so these\n\n# will never run automatically.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Adhoc - TheTestName\" if a file\n\n# TheTestName.cpp is found in this directory.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to determine\n\n# whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with shared library\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Link with static library\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "cmake/FindGcov.cmake" : {
      "ObjectId" : "4807f903ec721839024e22ce5bc1430d9e336b9a",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# https://github.com/RWTH-ELP/CMake-codecov\n\n#\n\n# Copyright (c)\n\n#   2015-2016 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# LICENSE : BSD 3-Clause License\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n# Updated by Guillaume Jacquenot, guillaume.jacquenot@gmail.com\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include required Modules\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for gcov binary.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Gcov evaluation is dependend on the used compiler. Check gcov support for\n\n# each compiler that is used. If gcov binary was already found for this\n\n# compiler, do not try to find it again.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Some distributions like OSX (homebrew) ship gcov with the compiler\n\n# version appended as gcov-x. To find this binary we'll build the\n\n# suggested binary name with the compiler version.\n",
        "Line" : 30,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Some distributions like Debian ship llvm-cov with the compiler\n\n# version appended as llvm-cov-x.y. To find this binary we'll build\n\n# the suggested binary name with the compiler version.\n",
        "Line" : 40,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# llvm-cov prior version 3.5 seems to be not working with coverage\n\n# evaluation tools, but these versions are compatible with the gcc\n\n# gcov tool.\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set additional parameters\n",
        "Line" : 60,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Fall back to gcov binary if llvm-cov was not found or is\n\n# incompatible. This is the default on OSX, but may crash on\n\n# recent Linux versions.\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Add a new global target for all gcov targets. This target could be used to\n\n# generate the gcov files for the whole project instead of calling <TARGET>-gcov\n\n# for each target.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This function will add gcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# Gcov on any source file of <TNAME> once and store the gcov file in the same\n\n# directory.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# call gcov\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# add target for gcov evaluation of <TNAME>\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# add evaluation target to the global gcov target.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/Findcodecov.cmake" : {
      "ObjectId" : "1f33b2c093d52defd1f18bcb36314b10ead38d16",
      "LastModified" : "2017-07-26T06:02:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# https://github.com/RWTH-ELP/CMake-codecov\n\n#\n\n# Copyright (c)\n\n#   2015-2016 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# LICENSE : BSD 3-Clause License\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n# Updated by Guillaume Jacquenot, guillaume.jacquenot@gmail.com\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gcc and clang\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# gcc and clang fallback\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# To avoid error messages about CMP0051, this policy will be set to new. There\n\n# will be no problem, as TARGET_OBJECTS generator expressions will be filtered\n\n# with a regular expression from the sources.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the reuired flags foreach language.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Coverage flags are not dependend on language, but the used compiler. So\n\n# instead of searching flags foreach language, search flags foreach compiler\n\n# used.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# CheckFortranCompilerFlag was introduced in CMake 3.x. To be\n\n# compatible with older Cmake versions, we will check if this\n\n# module is present before we use it. Otherwise we will define\n\n# Fortran coverage support as not available.\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Helper function to get the language of a source file.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Helper function to get the relative path of the source file destination path.\n\n# This path is needed by FindGcov and FindLcov cmake files to locate the\n\n# captured data.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If expression was found, SOURCEFILE is a generator-expression for an\n\n# object library. Currently we found no way to call this function automatic\n\n# for the referenced target, so it must be called in the directoryso of the\n\n# object library definition.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# get the right path for file\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check if all sources for target use the same compiler. If a target uses\n\n# e.g. C and Fortran mixed and uses different compilers (e.g. clang and\n\n# gfortran) this can trigger huge problems, because different compilers may\n\n# use different implementations for code coverage.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# If expression was found, FILE is a generator-expression for an object\n\n# library. Object libraries will be ignored.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# enable coverage for target\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Add gcov files generated by compiler to clean target.\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Include modules for parsing the collected data and output it in a readable\n\n# format (like gcov).\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "f4004ae09a028db66fc102f9924be84fc3b41c4b",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is just a shortcut to the Doxygen index.html.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/BricardMechanism/CMakeLists.txt" : {
      "ObjectId" : "fb6007921f861076a833f7490cfb4da9d705eb38",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build and install example, from within a\n\n# Simbody source build. This must be invoked as a CMake subdirectory from\n\n# the main examples CMakeLists.txt file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with shared library\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Don't install Debug examples\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Link with static library\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Don't install static examples\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Copy geometry to the binary directory that will \n\n# be the working directory when the example is run from a source build;\n\n# and install it in the examples installation.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install source for example\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install the installed version of CMakeLists.txt\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "5cb507b72b85134a7d29990b92c3390d37cbe27b",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build and install examples.\n\n#\n\n# This is for use when building Simbody from source; it is not for\n\n# end users to build examples themselves. This guarantees that the \n\n# examples built with Simbody are using the libraries just built regardless\n\n# of what is installed. We install a different CMakeLists.txt along with\n\n# the examples for end users to use.\n\n#\n\n# Examples are built from an explicit list of subdirectories given below,\n\n# and then simpler examples are built one per .cpp file in the top level\n\n# examples directory. If your example needs more than just a single .cpp\n\n# with a single .h of the same name, then put it in its own subdirectory \n\n# where it can have its own CMakeLists.txt. You must list those\n\n# subdirectories explicitly below; the simpler ones will be discovered\n\n# automatically.\n\n#\n\n# Examples get built with these macros defined:\n\n#    SIMBODY_EXAMPLE_NAME     \n\n#    SIMBODY_EXAMPLES_INSTALL_SRC  (has trailing \"/\")\n\n# Subdirectory examples should locate their auxiliary files by searching\n\n# for one file, say \"geometry/pelvis.stl\", using this search path:\n\n#    .  (current directory first)\n\n#    ./examples/${SIMBODY_EXAMPLE_NAME}\n\n#    ${SIMBODY_EXAMPLES_INSTALL_SRC}${SIMBODY_EXAMPLE_NAME}\n\n#\n\n# There is also a \"shared\" directory that has shared header files for\n\n# the examples, but also may contain shared auxiliary files like common\n\n# geometric shapes. In that case it must also be located at run time\n\n# using the search path:\n\n#    ../shared   (parallel to current directory first)\n\n#    ./examples/shared\n\n#    ${SIMBODY_EXAMPLES_INSTALL_SRC}shared\n\n#\n\n# Examples can depend on any Simbody includes, and may depend on headers\n\n# in the examples/shared directory, in which case they should be\n\n# included as #include \"shared/SharedHeaderFile.h\". This also permits use \n\n# of headers between examples, via #include \"OtherExample/SomeHeader.h\",\n\n# although it is not clear that's a good idea.\n\n# \n\n# Note that unlike code in the \"tests\" directory (but like the \n\n# \"tests/adhoc\" code), this does not generate CMake ADD_TEST commands so \n\n# these will never run automatically.\n\n#\n\n# For IDEs that can deal with PROJECT_LABEL properties (at least\n\n# Visual Studio) the projects for building each of these adhoc\n\n# executables will be labeled \"Example - TheExampleName\" if a file\n\n# TheExampleName.cpp is found in this directory, or if we build from \n\n# a subdirectory called TheExampleName.\n\n#\n\n# We check the BUILD_TESTS_AND_EXAMPLES_{SHARED,STATIC} variables to \n\n# determine whether to build dynamically linked, statically linked, or both\n\n# versions of the executable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# All subdirectory examples must be listed here.  A subdirectory is needed \n\n# for any example that consists of more than just one source file and one \n\n# header file.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# There is a top-level \"examples\" directory in the Windows install,\n\n# but examples go under \"doc\" elsewhere.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if this changes, change the corresponding\n\n# FULL version in file(RELATIVE_PATH ) command\n",
        "Line" : 70,
        "CharPositionInLine" : 70
      },
      "4" : {
        "Text" : "# Use full paths for the following as it will be used to create a symlink\n\n# The symlink itself will be a relative path, so the package will be relocatable\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set RPATH for all example targets in this directory and in subdirectories.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMAKE_INSTALL_PREFIX may be a relative path name; we want to bake in\n\n# the absolute path for the examples.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Provide access to all Simbody headers, and to the examples top-level\n\n# so that #include \"shared/Blah.h\" will work.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Build examples against the unversioned libraries if they are being \n\n## built; otherwise against the versioned libraries.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# First build examples that have their own subdirectories and CMakeLists\n\n# files. \n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Next pick up stragglers that consist solely of a .cpp file in the top\n\n# level examples directory, with a single .h file of the same name.\n\n# The example name is the source file name with \".cpp\" removed, and\n\n# the generated executable will have that name.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Link with shared library\n",
        "Line" : 140,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Don't install Debug examples\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Link with static library\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# note that the name is not EX_STATIC\n",
        "Line" : 164,
        "CharPositionInLine" : 19
      },
      "15" : {
        "Text" : "# Don't install static examples\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# install top-level source for examples\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# install shared source and other files; also copy to binary directory\n\n# so we can use them when running from the build\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# already has \"/\"\n",
        "Line" : 188,
        "CharPositionInLine" : 51
      },
      "19" : {
        "Text" : "# install .txt files except CMakeLists.txt\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# install the installed version of CMakeLists.txt\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "examples/Gazebo2Simbody/CMakeLists.txt" : {
      "ObjectId" : "329a244f817109f3b994368e46d6e6e25c2dec19",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build and install example, from within a\n\n# Simbody source build. This must be invoked as a CMake subdirectory from\n\n# the main examples CMakeLists.txt file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with shared library\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Don't install Debug examples\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Link with static library\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Don't install static examples\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Copy models to the binary directory that will \n\n# be the working directory when the example is run from a source build;\n\n# and install it in the examples installation.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install source for example\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install the installed version of CMakeLists.txt\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "examples/TaskSpaceControl-Atlas/CMakeLists.txt" : {
      "ObjectId" : "a1ef826ccf2f2e0b9544478388e12f1410d4d9cd",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build and install TaskSpaceControl-Atlas example, from within a\n\n# Simbody source build. This must be invoked as a CMake subdirectory from\n\n# the main examples CMakeLists.txt file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with shared library\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Don't install Debug examples\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Link with static library\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Don't install static examples\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Copy geometry and models to the binary directory that will \n\n# be the working directory when the example is run from a source build;\n\n# and install it in the examples installation.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install source for example\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install the installed version of CMakeLists.txt\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "examples/TaskSpaceControl-UR10/CMakeLists.txt" : {
      "ObjectId" : "84b299cf0ddc0b900dabc5897b0c17d7b0076536",
      "LastModified" : "2018-01-08T17:27:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build and install TaskSpaceControl-UR10 example, from within a\n\n# Simbody source build. This must be invoked as a CMake subdirectory from\n\n# the main examples CMakeLists.txt file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with shared library\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Don't install Debug examples\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Link with static library\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Don't install static examples\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Copy geometry to the binary directory that will \n\n# be the working directory when the example is run from a source build;\n\n# and install it in the examples installation.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install source for example\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install the installed version of CMakeLists.txt\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    }
  },
  "FileTypes" : {
    "CMAKE" : 36
  },
  "ElapsedTime" : 5284
}