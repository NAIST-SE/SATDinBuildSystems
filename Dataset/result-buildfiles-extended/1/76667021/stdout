{
  "Repository" : "76667021",
  "Revision" : "HEAD",
  "ObjectId" : "d45df2ba1d3fda5cf7e17a76243d58f5ddcfce70",
  "CommitTime" : "2018-08-08T05:59:49Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "92d048215673462939f3bd5fe9606e44309ce383",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Makefile.am" : {
      "ObjectId" : "08e183e71b94ad557ee1c312b81d550d47b13ad4",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#not installed\n",
        "Line" : 26,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 1
    },
    "contrib/lux-qt.pro" : {
      "ObjectId" : "4c4f932f49a43b266fecb18f65cb73b6fc249002",
      "LastModified" : "2018-03-01T18:43:38Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "######################################################################\n\n# Automatically generated by qmake (2.01a) ?? ??? 23 17:50:54 2015\n\n######################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Input\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "depends/Makefile" : {
      "ObjectId" : "8b67bce9d8468a83b6d3d236d3ee1390b9fc8591",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "share/qt/protobuf.pri" : {
      "ObjectId" : "865fe865550ae21f2eec4bb7c8f8c1817bdf1bce",
      "LastModified" : "2017-12-19T13:11:47Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Based on: http://code.google.com/p/ostinato/source/browse/protobuf.pri\n\n#\n\n# Qt qmake integration with Google Protocol Buffers compiler protoc\n\n#\n\n# To compile protocol buffers with qt qmake, specify PROTOS variable and\n\n# include this file\n\n#\n\n# Example:\n\n# PROTOS = a.proto b.proto\n\n# include(protobuf.pri)\n\n#\n\n# Set PROTO_PATH if you need to set the protoc --proto_path search path\n\n# Set PROTOC to the path to the protoc compiler if it is not in your $PATH\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Makefile.am" : {
      "ObjectId" : "21846c52aceacb9189bc82cabeec6043d804a04a",
      "LastModified" : "2018-07-17T09:00:59Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# NOTE: This dependency is not strictly necessary, but without it make may try to build both in parallel, which breaks the LevelDB build system in a race\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make is not made aware of per-object dependencies to avoid limiting building parallelization\n\n# But to build the less dependent modules first, we manually select their order here:\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Luxcore #\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# server: shared between luxd and lux-qt\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# wallet: shared between luxd and lux-qt, but only linked\n\n# when wallet enabled\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# crypto primitives library\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# univalue JSON library\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# consensus: shared between all executables that validate any consensus rules.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# common: shared between luxd, and lux-qt and non-server tools\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# util: shared between all executables.\n\n# This library *must* be included to make sure that the glibc\n\n# backward-compatibility objects and their sanity checks are linked.\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cli: shared between lux-cli and lux-qt\n",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# bitcoind binary #\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# lux-cli binary #\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# lux-tx binary #\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# bitcoinconsensus library #\n",
        "Line" : 696,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "src/cpp-ethereum/CMakeLists.txt" : {
      "ObjectId" : "b08c096fc0453283e073147190093cc62507ff65",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Top-level CMake file for cpp-ethereum.\n\n#\n\n# The documentation for cpp-ethereum is hosted at http://cpp-ethereum.org\n\n#\n\n# ------------------------------------------------------------------------------\n\n# This file is part of cpp-ethereum.\n\n#\n\n# cpp-ethereum is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# cpp-ethereum is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>\n\n#\n\n# (c) 2014-2016 cpp-ethereum contributors.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set cmake_policies\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# project name and version should be set after cmake_policy CMP0048\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### lux\n",
        "Line" : 47,
        "CharPositionInLine" : 39
      },
      "4" : {
        "Text" : "# TODO - split out json_spirit, libscrypt and sec256k1\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/cpp-ethereum/bench/CMakeLists.txt" : {
      "ObjectId" : "18db824333f1daaf37918d1ea625213aad936a72",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/CMakeParseArguments.cmake" : {
      "ObjectId" : "8553f38f5f090a2305c095ba5a8ef34427c19ed5",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n#\n\n#\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords>\n\n# <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions\n\n# for parsing the arguments given to that macro or function.  It\n\n# processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e.  keywords which can be used when calling the macro without any\n\n# value following, like e.g.  the OPTIONAL keyword of the install()\n\n# command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g.  DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this\n\n# macro which can be followed by more than one value, like e.g.  the\n\n# TARGETS or FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.  These\n\n# variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see\n\n# whether your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments\n\n# as the real install() command:\n\n#\n\n# ::\n\n#\n\n#    function(MY_INSTALL)\n\n#      set(options OPTIONAL FAST)\n\n#      set(oneValueArgs DESTINATION RENAME)\n\n#      set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#      cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\"\n\n#                            \"${multiValueArgs}\" ${ARGN} )\n\n#      ...\n\n#\n\n#\n\n#\n\n# Assume my_install() has been called like this:\n\n#\n\n# ::\n\n#\n\n#    my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n#\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the\n\n# following variables:\n\n#\n\n# ::\n\n#\n\n#    MY_INSTALL_OPTIONAL = TRUE\n\n#    MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#    MY_INSTALL_DESTINATION = \"bin\"\n\n#    MY_INSTALL_RENAME = \"\" (was not used)\n\n#    MY_INSTALL_TARGETS = \"foo;bar\"\n\n#    MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#    MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n#\n\n#\n\n# You can then continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g.  if directly after a\n\n# one_value_keyword another recognized keyword follows, this is\n\n# interpreted as the beginning of the new option.  E.g.\n\n# my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION\n\n# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 123,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 124,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 125,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "src/cpp-ethereum/cmake/EthBuildInfo.cmake" : {
      "ObjectId" : "9a132e36ba6420b7cf9693c1aa64a6345a3322dd",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set build platform; to be written to BuildInfo.h\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#cmake build type may be not speCified when using msvc\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Generate header file containing useful build information\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "src/cpp-ethereum/cmake/EthCompilerSettings.cmake" : {
      "ObjectId" : "71668cd52784d4ec737383be64dc09550f9b4498",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# EthCompilerSettings.cmake\n\n#\n\n# CMake file for cpp-ethereum project which specifies our compiler settings\n\n# for each supported platform and build configuration.\n\n#\n\n# The documentation for cpp-ethereum is hosted at http://cpp-ethereum.org\n\n#\n\n# Copyright (c) 2014-2016 cpp-ethereum contributors.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang seeks to be command-line compatible with GCC as much as possible, so\n\n# most of our compiler settings are common between GCC and Clang.\n\n#\n\n# These settings then end up spanning all POSIX platforms (Linux, OS X, BSD, etc)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use ccache if available\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use ISO C++11 standard language.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Enables all the warnings about constructions that some users consider questionable,\n\n# and that are easy to avoid.  Also enable some extra warning flags that are not\n\n# enabled by -Wall.   Finally, treat at warnings-as-errors, which forces developers\n\n# to fix warnings as they arise, so they don't accumulate \"to be fixed later\".\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Disable warnings about unknown pragmas (which is enabled by -Wall).\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Configuration-specific compiler settings.\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Additional GCC-specific compiler settings.\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Check that we've got GCC 4.7 or newer.\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Strong stack protection was only added in GCC 4.9.\n\n# Use it if we have the option to do so.\n\n# See https://lwn.net/Articles/584225/\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Additional Clang-specific compiler settings.\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Enable strong stack protection only on Mac and only for OS X Yosemite\n\n# or newer (AppleClang 7.0+).  We should be able to re-enable this setting\n\n# on non-Apple Clang as well, if we can work out what expression to use for\n\n# the version detection.\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# The fact that the version-reporting for AppleClang loses the original\n\n# Clang versioning is rather annoying.  Ideally we could just have\n\n# a single cross-platform \"if version >= 3.4.1\" check.\n\n#\n\n# There is debug text in the else clause below, to help us work out what\n\n# such an expression should be, if we can get this running on a Trusty box\n\n# with Clang.  Greg Colvin previously replicated the issue there too.\n\n#\n\n# See https://github.com/ethereum/webthree-umbrella/issues/594\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Some Linux-specific Clang settings.  We don't want these for OS X.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Tell Boost that we're using Clang's libc++.   Not sure exactly why we need to do.\n",
        "Line" : 105,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# Use fancy colors in the compiler diagnostics\n",
        "Line" : 108,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# The major alternative compiler to GCC/Clang is Microsoft's Visual C++ compiler, only available on Windows.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# enable parallel compilation\n",
        "Line" : 116,
        "CharPositionInLine" : 34
      },
      "18" : {
        "Text" : "# specify Exception Handling Model in msvc\n",
        "Line" : 117,
        "CharPositionInLine" : 33
      },
      "19" : {
        "Text" : "# enable warnings-as-errors\n",
        "Line" : 118,
        "CharPositionInLine" : 31
      },
      "20" : {
        "Text" : "# disable unknown pragma warning (4068)\n\n# disable unsafe function warning (4996)\n\n# disable decorated name length exceeded, name was truncated (4503)\n\n# disable conversion from 'size_t' to 'type', possible loss of data (4267)\n\n# disable qualifier applied to function type has no meaning; ignored (4180)\n\n# disable C++ exception specification ignored except to indicate a function is not __declspec(nothrow) (4290)\n\n# disable <vector>'s function assumed not to throw an exception but does (4297)\n\n# disable conversion from 'type1' to 'type2', possible loss of data (4244)\n\n# disable forcing value to bool 'true' or 'false' (performance warning) (4800)\n",
        "Line" : 119,
        "CharPositionInLine" : 34
      },
      "21" : {
        "Text" : "# declare Windows Vista API requirement\n",
        "Line" : 128,
        "CharPositionInLine" : 45
      },
      "22" : {
        "Text" : "# undefine windows.h MAX && MIN macros cause it cause conflicts with std::min && std::max functions\n",
        "Line" : 129,
        "CharPositionInLine" : 37
      },
      "23" : {
        "Text" : "# define miniupnp static library\n",
        "Line" : 130,
        "CharPositionInLine" : 44
      },
      "24" : {
        "Text" : "# Always use Release variant of C++ runtime.\n\n# We don't want to provide Debug variants of all dependencies. Some default\n\n# flags set by CMake must be tweaked.\n",
        "Line" : 132,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# disable empty object file warning\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# warning LNK4075: ignoring '/EDITANDCONTINUE' due to '/SAFESEH' specification\n\n# warning LNK4099: pdb was not found with lib\n\n# stack size 16MB\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# If you don't have GCC, Clang or VC++ then you are on your own.  Good luck!\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "src/cpp-ethereum/cmake/EthDependencies.cmake" : {
      "ObjectId" : "03900bccc8a01647cf8dc6b86c83c850606c4ba4",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all dependencies that are not directly included in the cpp-ethereum distribution are defined here\n\n# for this to work, download the dependency via the cmake script in extdep or install them manually!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Windows platform has not historically had any standard packaging system for delivering\n\n# versioned releases of libraries.  Homebrew and PPA perform that function for macOS and Ubuntu\n\n# respectively, and there are analogous standards for other Linux distros.  In the absense of\n\n# such a standard, we have chosen to make a \"fake packaging system\" for cpp-ethereum, which is\n\n# implemented in https://github.com/ethereum/cpp-dependencies.\n\n#\n\n# NOTE - In the last couple of years, the NuGet packaging system, first created for delivery\n\n# of .NET packages, has added support for C++ packages, and it may be possible for us to migrate\n\n# our \"fake package server\" to that real package server.   That would certainly be preferable\n\n# to rolling our own, but it also puts us at the mercy of intermediate package maintainers who\n\n# may be inactive.  There is not a fantastic range of packages available at the time of writing,\n\n# so we might find that such a move turns us into becoming the package maintainer for our\n\n# dependencies.   Not a net win :-)\n\n#\n\n# \"Windows - Try to use NuGet C++ packages\"\n\n# https://github.com/ethereum/webthree-umbrella/issues/509\n\n#\n\n# Perhaps a better alternative is to step away from dependencies onto binary releases entirely,\n\n# and switching to build-from-source for some (or all) of our dependencies, especially if they\n\n# are small.  That gives us total control, but at the cost of longer build times.  That is the\n\n# approach which Pawel has taken for LLVM in https://github.com/ethereum/evmjit.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# custom cmake scripts\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use Boost \"multithreaded mode\" for Windows.  The platform C/C++ runtime libraries come in\n\n# two flavors on Windows, which causes an ABI schism across the whole ecosystem.  This setting\n\n# is declaring which side of that schism we fall on.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use the dynamic libraries for Boost for Linux and static linkage on Windows and macOS.\n\n# We would like to use static linkage on Linux too, but on Ubuntu at least it appears that\n\n# the prebuilt binaries for Boost won't support this.\n\n#\n\n# We will need to build Boost from source ourselves, with -fPIC enabled, before we are\n\n# able to remove this conditional.  That is exactly what has been happening for months for\n\n# the doublethinkco cross-builds (see https://github.com/doublethinkco/cpp-ethereum-cross).\n\n#\n\n# Typical build error we get if trying to do static Boost on Ubunty Trusty (many of them):\n\n#\n\n# Linking CXX shared library libdevcore.so\n\n# /usr/bin/ld.gold: error: /usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/\n\n# libboost_thread.a(thread.o): requires dynamic R_X86_64_32 reloc which may overflow at\n\n# runtime; recompile with -fPIC\n\n#\n\n# https://travis-ci.org/bobsummerwill/cpp-ethereum/jobs/145955041\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: check if file exists if not, throws FATAL_ERROR with detailed description\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "src/cpp-ethereum/cmake/EthExecutableHelper.cmake" : {
      "ObjectId" : "c217d4ac7abd0ce59faca4cca63e1ef0380dbf0c",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# this function requires the following variables to be specified:\n\n# ETH_VERSION\n\n# PROJECT_NAME\n\n# PROJECT_VERSION\n\n# PROJECT_COPYRIGHT_YEAR\n\n# PROJECT_VENDOR\n\n# PROJECT_DOMAIN_SECOND\n\n# PROJECT_DOMAIN_FIRST\n\n# SRC_LIST\n\n# HEADERS\n\n#\n\n# params:\n\n# ICON\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# dlls must be unsubstitud list variable (without ${}) in format\n\n# optimized;path_to_dll.dll;debug;path_to_dlld.dll\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# TODO - Why is this different than the branch Linux below, which has the RUNTIME keyword too?\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/cpp-ethereum/cmake/EthOptions.cmake" : {
      "ObjectId" : "4fa60a2a41687fdbbf98fd2582e6d30193a70f9f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default to RelWithDebInfo configuration if no configuration is explicitly specified.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# features\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# components\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Resolve any clashes between incompatible options.\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Define a matching property name of each of the \"features\".\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Temporary pre-processor symbol used for hiding broken unit-tests.\n\n# Hiding them behind this pre-processor symbol lets us turn them off\n\n# and on again easily enough, and also to grep for them.\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Are we including the JIT EVM module?\n\n# That pulls in a quite heavyweight LLVM dependency, which is\n\n# not suitable for all platforms.\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# FATDB is an option to include the reverse hashes for the trie,\n\n# i.e. it allows you to iterate over the contents of the state.\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# TODO:  What does \"paranoia\" even mean?\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# TODO:  What does \"VM trace\" even mean?\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# CI Builds should provide (for user builds this is totally optional)\n\n# -DBUILD_NUMBER - A number to identify the current build with. Becomes TWEAK component of project version.\n\n# -DVERSION_SUFFIX - A string to append to the end of the version string where applicable.\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# default is big so that local build is always considered greater\n\n# and can easily replace CI build for for all platforms if needed.\n\n# Windows max version component number is 65535\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Suffix like \"-rc1\" e.t.c. to append to versions wherever needed.\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 13
    },
    "src/cpp-ethereum/cmake/EthPolicy.cmake" : {
      "ObjectId" : "3c60224117e271819eb8c62de8c3e1ef59e4f479",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# it must be a macro cause policies have scopes\n\n# http://www.cmake.org/cmake/help/v3.0/command/cmake_policy.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link_directories() treats paths relative to the source dir.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# let cmake autolink dependencies on windows\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# CMake 2.8.12 and lower allowed the use of targets and files with double\n\n# colons in target_link_libraries,\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# fix MACOSX_RPATH\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ignore COMPILE_DEFINITIONS_<Config> properties\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# allow VERSION argument in project()\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# do not interpret if() arguments as variables!\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "src/cpp-ethereum/cmake/EthUtils.cmake" : {
      "ObjectId" : "68fd35d15e70223a3adf4b38dfdf686c7562cd1f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# renames the file if it is different from its destination\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# parse arguments here\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# create tests\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# add target to run them\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Creates C resources file from files\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#message(FATAL_ERROR \"res:! ${ETH_RESOURCE_LOCATION}\")\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# In Windows split repositories build we need to be checking whether or not\n\n# Debug/Release or both versions were built for the config phase to run smoothly\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/cpp-ethereum/cmake/FindCURL.cmake" : {
      "ObjectId" : "135f8d98c614237eba2622aad77aaea587e677a6",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find CURL\n\n#\n\n# Find the curl includes and library\n\n# \n\n# if you nee to add a custom library search path, do it via via CMAKE_PREFIX_PATH \n\n# \n\n# This module defines\n\n#  CURL_INCLUDE_DIRS, where to find header, etc.\n\n#  CURL_LIBRARIES, the libraries needed to use curl.\n\n#  CURL_FOUND, If false, do not try to use curl.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# names from cmake's FindCURL\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in qt (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# prepare dlls\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CURL_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/cpp-ethereum/cmake/FindCpuid.cmake" : {
      "ObjectId" : "7b11adc9e10cd4c4d5c9432aacec91858d6b1e8b",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find libcpuid\n\n#\n\n# Find the libcpuid includes and library\n\n#\n\n# if you nee to add a custom library search path, do it via via CMAKE_PREFIX_PATH\n\n#\n\n# This module defines\n\n#  CPUID_INCLUDE_DIRS, where to find header, etc.\n\n#  CPUID_LIBRARIES, the libraries needed to use cpuid.\n\n#  CPUID_FOUND, If false, do not try to use cpuid.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CPUID_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cpp-ethereum/cmake/FindDev.cmake" : {
      "ObjectId" : "b591c465c90b47243af22031b44a46eff1537cfa",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CMake helper for libdevcore, libdevcrypto and libp2p modules.\n\n#\n\n# This module defines\n\n#     Dev_XXX_LIBRARIES, the libraries needed to use ethereum.\n\n#     Dev_INCLUDE_DIRS\n\n#\n\n# The documentation for cpp-ethereum is hosted at http://cpp-ethereum.org\n\n#\n\n# ------------------------------------------------------------------------------\n\n# This file is part of cpp-ethereum.\n\n#\n\n# cpp-ethereum is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# cpp-ethereum is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>\n\n#\n\n# (c) 2014-2016 cpp-ethereum contributors.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if the project is a subset of main cpp-ethereum project\n\n# use same pattern for variables as Boost uses\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cpp-ethereum/cmake/FindEth.cmake" : {
      "ObjectId" : "e338c9fea9167388396ead7036699ea63aa9c701",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CMake helper for the majority of the cpp-ethereum modules.\n\n#\n\n# This module defines\n\n#     ETH_XXX_LIBRARIES, the libraries needed to use ethereum.\n\n#     ETH_FOUND, If false, do not try to use ethereum.\n\n#     TODO: ETH_INCLUDE_DIRS\n\n#\n\n# The documentation for cpp-ethereum is hosted at http://cpp-ethereum.org\n\n#\n\n# ------------------------------------------------------------------------------\n\n# This file is part of cpp-ethereum.\n\n#\n\n# cpp-ethereum is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# cpp-ethereum is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>\n\n#\n\n# (c) 2014-2016 cpp-ethereum contributors.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if the project is a subset of main cpp-ethereum project\n\n# use same pattern for variables as Boost uses\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libevmjit is nested...\n",
        "Line" : 53,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# libevmjit is nested...\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "src/cpp-ethereum/cmake/FindGmp.cmake" : {
      "ObjectId" : "d2d699d36a284dc046bf0f346b7af85a50ddcd7b",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find gmp\n\n#\n\n# Find the gmp includes and library\n\n# \n\n# if you nee to add a custom library search path, do it via via CMAKE_PREFIX_PATH \n\n# \n\n# This module defines\n\n#  GMP_INCLUDE_DIRS, where to find header, etc.\n\n#  GMP_LIBRARIES, the libraries needed to use gmp.\n\n#  GMP_FOUND, If false, do not try to use gmp.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GMP_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cpp-ethereum/cmake/FindLevelDB.cmake" : {
      "ObjectId" : "79321b7f3240fcf9eb4493c9d538d6f40eb35f76",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find leveldb\n\n#\n\n# Find the leveldb includes and library\n\n# \n\n# if you need to add a custom library search path, do it via via CMAKE_PREFIX_PATH \n\n# \n\n# This module defines\n\n#  LEVELDB_INCLUDE_DIRS, where to find header, etc.\n\n#  LEVELDB_LIBRARIES, the libraries needed to use leveldb.\n\n#  LEVELDB_FOUND, If false, do not try to use leveldb.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When we're static linking (at least on OS X), leveldb also drags in snappy.\n\n# This might be due to some dependency within leveldb which would be dead-code\n\n# stripped if we were using a static lib for leveldb.   We aren't (yet), because\n\n# we only have partial static-linkage on OS X so far.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in qt (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LEVELDB_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/cpp-ethereum/cmake/FindMHD.cmake" : {
      "ObjectId" : "597c99069c82710f9a0449fbff0ef21026ee1946",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find microhttpd\n\n#\n\n# Find the microhttpd includes and library\n\n#\n\n# if you need to add a custom library search path, do it via via CMAKE_PREFIX_PATH\n\n#\n\n# This module defines\n\n#  MHD_INCLUDE_DIRS, where to find header, etc.\n\n#  MHD_LIBRARIES, the libraries needed to use jsoncpp.\n\n#  MHD_FOUND, If false, do not try to use jsoncpp.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in QT (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n\n# official MHD project actually uses _d suffix\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# prepare dlls\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "src/cpp-ethereum/cmake/FindMiniupnpc.cmake" : {
      "ObjectId" : "e24419eefa346c16b2cc9e6a64f7edbc3923501a",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find miniupnpc\n\n#\n\n# Find the miniupnpc includes and library\n\n#\n\n# if you nee to add a custom library search path, do it via CMAKE_PREFIX_PATH\n\n#\n\n# This module defines\n\n#  MINIUPNPC_INCLUDE_DIRS, where to find header, etc.\n\n#  MINIUPNPC_LIBRARIES, the libraries needed to use miniupnpc.\n\n#  MINIUPNPC_FOUND, If false, do not try to use miniupnpc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in QT (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MINIUPNPC_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cpp-ethereum/cmake/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "6bcf1e788b8ca5198df4afa1021a010aaa9dfc07",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageHandleStandardArgs\n\n# -----------------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ...  )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to\n\n# find_package().  It also sets the <packagename>_FOUND variable.  The\n\n# package is considered found if all variables <var1>...  listed contain\n\n# valid results, e.g.  valid filepaths.\n\n#\n\n# There are two modes of this function.  The first argument in both\n\n# modes is the name of the Find-module where it is called (in original\n\n# casing).\n\n#\n\n# The first simple mode looks like this:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name>\n\n#       (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n#\n\n# If the variables <var1> to <varN> are all valid, then\n\n# <UPPERCASED_NAME>_FOUND will be set to TRUE.  If DEFAULT_MSG is given\n\n# as second argument, then the function will generate itself useful\n\n# success and error messages.  You can also supply a custom error\n\n# message for the failure case.  This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME\n\n#       [FOUND_VAR <resultVar>]\n\n#       [REQUIRED_VARS <var1>...<varN>]\n\n#       [VERSION_VAR   <versionvar>]\n\n#       [HANDLE_COMPONENTS]\n\n#       [CONFIG_MODE]\n\n#       [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# In this mode, the name of the result-variable can be set either to\n\n# either <UPPERCASED_NAME>_FOUND or <OriginalCase_Name>_FOUND using the\n\n# FOUND_VAR option.  Other names for the result-variable are not\n\n# allowed.  So for a Find-module named FindFooBar.cmake, the two\n\n# possible names are FooBar_FOUND and FOOBAR_FOUND.  It is recommended\n\n# to use the original case version.  If the FOUND_VAR option is not\n\n# used, the default is <UPPERCASED_NAME>_FOUND.\n\n#\n\n# As in the simple mode, if <var1> through <varN> are all valid,\n\n# <packagename>_FOUND will be set to TRUE.  After REQUIRED_VARS the\n\n# variables which are required for this package are listed.  Following\n\n# VERSION_VAR the name of the variable can be specified which holds the\n\n# version of the package which has been found.  If this is done, this\n\n# version will be checked against the (potentially) specified required\n\n# version used in the find_package() call.  The EXACT keyword is also\n\n# handled.  The default messages include information about the required\n\n# version and the version which has been actually found, both if the\n\n# version is ok or not.  If the package supports components, use the\n\n# HANDLE_COMPONENTS option to enable handling them.  In this case,\n\n# find_package_handle_standard_args() will report which components have\n\n# been found and which are missing, and the <packagename>_FOUND variable\n\n# will be set to FALSE if any of the required components (i.e.  not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.  Use the option\n\n# CONFIG_MODE if your FindXXX.cmake module is a wrapper for a\n\n# find_package(...  NO_MODULE) call.  In this case VERSION_VAR will be\n\n# set to <NAME>_VERSION and the macro will automatically check whether\n\n# the Config module was found.  Via FAIL_MESSAGE a custom failure\n\n# message can be specified, if this is not used, the default message\n\n# will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXml2  DEFAULT_MSG\n\n#       LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n#\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid.  Then also LIBXML2_FOUND is set to\n\n# TRUE.  If it is not found and REQUIRED was used, it fails with\n\n# FATAL_ERROR, independent whether QUIET was used or not.  If it is\n\n# found, success will be reported, including the content of <var1>.  On\n\n# repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXslt\n\n#       FOUND_VAR LibXslt_FOUND\n\n#       REQUIRED_VARS LibXslt_LIBRARIES LibXslt_INCLUDE_DIRS\n\n#       VERSION_VAR LibXslt_VERSION_STRING)\n\n#\n\n# In this case, LibXslt is considered to be found if the variable(s)\n\n# listed after REQUIRED_VAR are all valid, i.e.  LibXslt_LIBRARIES and\n\n# LibXslt_INCLUDE_DIRS in this case.  The result will then be stored in\n\n# LibXslt_FOUND .  Also the version of LibXslt will be checked by using\n\n# the version contained in LibXslt_VERSION_STRING.  Since no\n\n# FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#     find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\n#\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4\n\n# NO_MODULE) and adds an additional search directory for automoc4.  Here\n\n# the result will be stored in AUTOMOC4_FOUND.  The following\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 210,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# exact version required\n",
        "Line" : 295,
        "CharPositionInLine" : 44
      },
      "16" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 301,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 331,
        "CharPositionInLine" : 17
      },
      "20" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 342,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# print the result:\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "src/cpp-ethereum/cmake/FindPackageMessage.cmake" : {
      "ObjectId" : "a0349d3db99a3b446c421d9bdc14142ab278e72f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "src/cpp-ethereum/cmake/FindRocksDB.cmake" : {
      "ObjectId" : "7f5a0c3cc5e64ea99b38bf4a6e6a6469b0c28b39",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find rocksdb\n\n#\n\n# Find the rocksdb includes and library\n\n#\n\n# if you nee to add a custom library search path, do it via via CMAKE_PREFIX_PATH\n\n#\n\n# This module defines\n\n#  ROCKSDB_INCLUDE_DIRS, where to find header, etc.\n\n#  ROCKSDB_LIBRARIES, the libraries needed to use rocksdb.\n\n#  ROCKSDB_FOUND, If false, do not try to use rocksdb.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in qt (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ROCKSDB_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cpp-ethereum/cmake/FindSSH2.cmake" : {
      "ObjectId" : "22f0851886ad4afca95cf1feb18173c853907cbd",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the ssh2 libssh2 library\n\n# Once done this will define\n\n#\n\n#  SSH2_FOUND - system has the SSH2 libssh2 library\n\n#  SSH2_INCLUDE_DIR - the SSH2 libssh2 include directory\n\n#  SSH2_LIBRARIES - The libraries needed to use SSH2 libssh2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CURL_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cpp-ethereum/cmake/FindUtils.cmake" : {
      "ObjectId" : "231af523e9227d9afc70f5d404fce6f04e8dd86f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CMake helper for the \"utils\" modules, which are orphaned external\n\n# packages - secp256k1, libscrypt and json_spirit.\n\n#\n\n# This module defines\n\n#     Utils_XXX_LIBRARIES, the libraries needed to use ethereum.\n\n#     Utils_INCLUDE_DIRS\n\n#\n\n# The documentation for cpp-ethereum is hosted at http://cpp-ethereum.org\n\n#\n\n# ------------------------------------------------------------------------------\n\n# This file is part of cpp-ethereum.\n\n#\n\n# cpp-ethereum is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# cpp-ethereum is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>\n\n#\n\n# (c) 2014-2016 cpp-ethereum contributors.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if the project is a subset of main cpp-ethereum project\n\n# use same pattern for variables as Boost uses\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cpp-ethereum/cmake/FindWeb3.cmake" : {
      "ObjectId" : "8754b371f56e24048f691cf9e8bb57cf4293d36a",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CMake helper for libwhisper, libwebthree and libweb3jsonrpc.\n\n#\n\n# This module defines\n\n#     Web3_XXX_LIBRARIES, the libraries needed to use ethereum.\n\n#     TODO: Web3_INCLUDE_DIRS\n\n#\n\n# The documentation for cpp-ethereum is hosted at http://cpp-ethereum.org\n\n#\n\n# ------------------------------------------------------------------------------\n\n# This file is part of cpp-ethereum.\n\n#\n\n# cpp-ethereum is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# cpp-ethereum is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>\n\n#\n\n# (c) 2014-2016 cpp-ethereum contributors.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if the project is a subset of cpp-ethereum\n\n# use same pattern for variables as Boost uses\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cpp-ethereum/cmake/FindWindowsSDK.cmake" : {
      "ObjectId" : "665a87f04aab968aa0e6dee04fc3396d955c6d74",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Windows SDK aka Platform SDK\n\n#\n\n# Relevant Wikipedia article: http://en.wikipedia.org/wiki/Microsoft_Windows_SDK\n\n#\n\n# Variables:\n\n#  WINDOWSSDK_FOUND - if any version of the windows or platform SDK was found that is usable with the current version of visual studio\n\n#  WINDOWSSDK_LATEST_DIR\n\n#  WINDOWSSDK_LATEST_NAME\n\n#  WINDOWSSDK_FOUND_PREFERENCE - if we found an entry indicating a \"preferred\" SDK listed for this visual studio version\n\n#  WINDOWSSDK_PREFERRED_DIR\n\n#  WINDOWSSDK_PREFERRED_NAME\n\n#\n\n#  WINDOWSSDK_DIRS - contains no duplicates, ordered most recent first.\n\n#  WINDOWSSDK_PREFERRED_FIRST_DIRS - contains no duplicates, ordered with preferred first, followed by the rest in descending recency\n\n#\n\n# Functions:\n\n#  windowssdk_name_lookup(<directory> <output variable>) - Find the name corresponding with the SDK directory you pass in, or\n\n#     NOTFOUND if not recognized. Your directory must be one of WINDOWSSDK_DIRS for this to work.\n\n#\n\n#  get_windowssdk_from_component(<file or dir> <output variable>) - Given a library or include dir,\n\n#     find the Windows SDK root dir corresponding to it, or NOTFOUND if unrecognized.\n\n#\n\n#  get_windowssdk_library_dirs(<directory> <output variable>) - Find the architecture-appropriate\n\n#     library directories corresponding to the SDK directory you pass in (or NOTFOUND if none)\n\n#\n\n#  get_windowssdk_include_dirs(<directory> <output variable>) - Find the\n\n#     include directories corresponding to the SDK directory you pass in (or NOTFOUND if none)\n\n#\n\n# Requires these CMake modules:\n\n#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)\n\n#\n\n# Original Author:\n\n# 2012 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2012.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Newer than VS .NET/VS Toolkit 2003\n",
        "Line" : 45,
        "CharPositionInLine" : 30
      },
      "2" : {
        "Text" : "# Environment variable for SDK dir\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Per-user current Windows SDK for VS2005/2008\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# System-wide current Windows SDK for VS2005/2008\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# VC 10 and older has broad target support\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# VC 11 by default targets Vista and later only, so we can add a few more SDKs that (might?) only work on vista+\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# This is the XP-compatible v110 toolset\n",
        "Line" : 77,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# This is the VS2010 toolset\n",
        "Line" : 79,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# These versions have no XP (and possibly Vista pre-SP1) support\n",
        "Line" : 84,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Windows Software Development Kit (SDK) for Windows 8.1\n\n# http://msdn.microsoft.com/en-gb/windows/desktop/bg162891\n",
        "Line" : 88,
        "CharPositionInLine" : 5
      },
      "11" : {
        "Text" : "# Included in Visual Studio 2012\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Microsoft Windows SDK for Windows 8 and .NET Framework 4.5\n\n# This is the first version to also include the DirectX SDK\n\n# http://msdn.microsoft.com/en-US/windows/desktop/hh852363.aspx\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Microsoft Windows SDK for Windows 7 and .NET Framework 4\n\n# http://www.microsoft.com/downloads/en/details.aspx?FamilyID=6b6c21d2-2006-4afa-9702-529fa782d63b\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Included in Visual Studio 2013\n\n# Includes the v120_xp toolset\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Included with VS 2012 Update 1 or later\n\n# Introduces v110_xp toolset\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Included with VS 2010\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Windows SDK for Windows 7 and .NET Framework 3.5 SP1\n\n# Works with VC9\n\n#http://www.microsoft.com/en-us/download/details.aspx?id=18950\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Two versions call themselves \"v6.1\":\n\n# Older:\n\n# Windows Vista Update & .NET 3.0 SDK\n\n# http://www.microsoft.com/en-us/download/details.aspx?id=14477\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Newer:\n\n# Windows Server 2008 & .NET 3.5 SDK\n\n# may have broken VS9SP1? they recommend v7.0 instead, or a KB...\n\n# http://www.microsoft.com/en-us/download/details.aspx?id=24826\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Included in VS 2008\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Microsoft Windows Software Development Kit for Windows Vista and .NET Framework 3.0 Runtime Components\n\n# http://blogs.msdn.com/b/stanley/archive/2006/11/08/microsoft-windows-software-development-kit-for-windows-vista-and-net-framework-3-0-runtime-components.aspx\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Remove duplicates\n",
        "Line" : 193,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# In case a preferred dir was found that isn't found otherwise\n\n#set(WINDOWSSDK_DIRS ${WINDOWSSDK_DIRS} ${WINDOWSSDK_PREFERRED_FIRST_DIRS})\n\n#list(REMOVE_DUPLICATES WINDOWSSDK_DIRS)\n",
        "Line" : 210,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Internal: Architecture-appropriate library directory names.\n",
        "Line" : 241,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n",
        "Line" : 243,
        "CharPositionInLine" : 29
      },
      "26" : {
        "Text" : "# what the architecture used to be called\n",
        "Line" : 244,
        "CharPositionInLine" : 24
      },
      "27" : {
        "Text" : "# what the WDK for Win8+ calls this architecture\n",
        "Line" : 245,
        "CharPositionInLine" : 25
      },
      "28" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n",
        "Line" : 248,
        "CharPositionInLine" : 30
      },
      "29" : {
        "Text" : "# what the architecture used to be called\n",
        "Line" : 249,
        "CharPositionInLine" : 27
      },
      "30" : {
        "Text" : "# what the WDK for Win8+ calls this architecture\n",
        "Line" : 250,
        "CharPositionInLine" : 26
      },
      "31" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n\n# what the architecture used to be called\n\n# what the WDK for Win8+ calls this architecture\n",
        "Line" : 252,
        "CharPositionInLine" : 26
      },
      "32" : {
        "Text" : "# If we don't have any \"parent directory\" items...\n",
        "Line" : 265,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# Fail.\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# SDKs like 7.1A\n",
        "Line" : 277,
        "CharPositionInLine" : 28
      },
      "35" : {
        "Text" : "# Win2k min requirement\n\n# WinXP min requirement\n",
        "Line" : 278,
        "CharPositionInLine" : 29
      },
      "36" : {
        "Text" : "# Win Server 2003 min requirement\n",
        "Line" : 280,
        "CharPositionInLine" : 30
      },
      "37" : {
        "Text" : "# Win Vista (\"Long Horn\") min requirement\n",
        "Line" : 281,
        "CharPositionInLine" : 29
      },
      "38" : {
        "Text" : "# Win Vista (\"Long Horn\") min requirement\n",
        "Line" : 282,
        "CharPositionInLine" : 33
      },
      "39" : {
        "Text" : "# Win 7 min requirement\n",
        "Line" : 283,
        "CharPositionInLine" : 30
      },
      "40" : {
        "Text" : "# Win 7 min requirement\n\n# Win 8 min requirement\n\n# Win 8 min requirement\n",
        "Line" : 284,
        "CharPositionInLine" : 34
      },
      "41" : {
        "Text" : "# Win 8.1 min requirement\n\n# Win 8.1 min requirement\n",
        "Line" : 287,
        "CharPositionInLine" : 37
      },
      "42" : {
        "Text" : "# Check to see if a library actually exists here.\n",
        "Line" : 290,
        "CharPositionInLine" : 3
      },
      "43" : {
        "Text" : "# Check to see if a header file actually exists here.\n",
        "Line" : 311,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 44
    },
    "src/cpp-ethereum/cmake/Findjson_rpc_cpp.cmake" : {
      "ObjectId" : "4d31f67ef2d3cf0ad40e51733fb434a4eedf2179",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find json-rcp-cpp \n\n#\n\n# Find the json-rpc-cpp includes and library\n\n# \n\n# if you nee to add a custom library search path, do it via via CMAKE_PREFIX_PATH \n\n# \n\n# This module defines\n\n#  JSON_RCP_CPP_INCLUDE_DIRS, where to find header, etc.\n\n#  JSON_RCP_CPP_LIBRARIES, the libraries needed to use json-rpc-cpp.\n\n#  JSON_RPC_CPP_SERVER_LIBRARIES, the libraries needed to use json-rpc-cpp-server\n\n#  JSON_RPC_CPP_CLIENT_LIBRARIES, the libraries needed to use json-rpc-cpp-client\n\n#  JSON_RCP_CPP_FOUND, If false, do not try to use json-rpc-cpp.\n\n#  JSON_RPC_CPP_VERSION, version of library\n\n#  JSON_RPC_CPP_VERSION_MAJOR\n\n#  JSON_RPC_CPP_VERSION_MINOR\n\n#  JSON_RPC_CPP_VERSION_PATCH\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only look in default directories\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# these are the variables to be uses by the calling script\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# debug library on windows\n\n# same naming convention as in qt (appending debug library with d)\n\n# boost is using the same \"hack\" as us with \"optimized\" and \"debug\"\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JSON_RPC_CPP_FOUND to TRUE\n\n# if all listed variables are TRUE, hide their existence from configuration view\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/cpp-ethereum/cmake/ProjectBoost.cmake" : {
      "ObjectId" : "04448fbcc5e49ad77e7875d724bcc8a5016dd6a1",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/ProjectCryptopp.cmake" : {
      "ObjectId" : "56d267121777be1cfa807f1e72db72031825912f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This points to unreleased version 5.6.5+ but contains very small\n\n# warning fix:\n\n# https://github.com/weidai11/cryptopp/commit/903b8feaa70199eb39a313b32a71268745ddb600\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# algebra.cpp\n\n# algparam.cpp\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# asn.cpp\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# basecode.cpp\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# cpu.cpp\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# cryptlib.cpp\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# dll.cpp\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# dsa.cpp\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# ec2n.cpp\n\n# eccrypto.cpp\n\n# ecp.cpp\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# eprecomp.cpp\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# filters.cpp\n\n# fips140.cpp\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# gf2n.cpp\n\n# gfpcrypt.cpp\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# hex.cpp\n\n# hmac.cpp\n\n# hrtimer.cpp\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# integer.cpp\n\n# iterhash.cpp\n\n# keccak.cpp\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# misc.cpp\n\n# modes.cpp\n\n# mqueue.cpp\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# nbtheory.cpp\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# oaep.cpp\n\n# osrng.cpp\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# polynomi.cpp\n",
        "Line" : 96,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# pubkey.cpp\n\n# queue.cpp\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# randpool.cpp\n",
        "Line" : 101,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# rdtables.cpp\n",
        "Line" : 106,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# rijndael.cpp\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# rng.cpp\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# sha.cpp\n",
        "Line" : 120,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# strciphr.cpp\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# winpipes.cpp\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Build static lib but suitable to be included in a shared lib.\n",
        "Line" : 154,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "### lux\n",
        "Line" : 156,
        "CharPositionInLine" : 44
      },
      "28" : {
        "Text" : "# Overwrite build and install commands to force Release build on MSVC.\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Create cryptopp imported library\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Must exist.\n",
        "Line" : 182,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 31
    },
    "src/cpp-ethereum/cmake/ProjectJsonCpp.cmake" : {
      "ObjectId" : "4fa3b7053e7478d105afa8b9918ce2aa87bd413a",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build static lib but suitable to be included in a shared lib.\n",
        "Line" : 22,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : "### lux\n",
        "Line" : 27,
        "CharPositionInLine" : 51
      },
      "2" : {
        "Text" : "# Create jsoncpp imported library\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Must exist.\n",
        "Line" : 46,
        "CharPositionInLine" : 45
      },
      "CommentCount" : 4
    },
    "src/cpp-ethereum/cmake/ProjectJsonRpcCpp.cmake" : {
      "ObjectId" : "d96b3e277cd161d2cba7cb199acbb0bf8b3930df",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HTTP client from JSON RPC CPP requires curl library. It can find it itself,\n\n# but we need to know the libcurl location for static linking.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HTTP server from JSON RPC CPP requires microhttpd library. It can find it itself,\n\n# but we need to know the MHD location for static linking.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build static lib but suitable to be included in a shared lib.\n",
        "Line" : 11,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "# Point to jsoncpp library.\n",
        "Line" : 22,
        "CharPositionInLine" : 15
      },
      "4" : {
        "Text" : "# Select jsoncpp include prefix: <json/...> or <jsoncpp/json/...>\n",
        "Line" : 24,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "# For Windows we have to provide also locations for debug libraries.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# On Windows it tries to install this dir. Create it to prevent failure.\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Overwrite build and install commands to force Release build on MSVC.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Create imported libraries\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# On Windows CMAKE_INSTALL_PREFIX is ignored and installs to dist dir.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Must exist.\n",
        "Line" : 67,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 11
    },
    "src/cpp-ethereum/cmake/ProjectSecp256k1.cmake" : {
      "ObjectId" : "93630a3162db32290f79ce0b0fe3b0286f599ffc",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### lux\n",
        "Line" : 42,
        "CharPositionInLine" : 48
      },
      "1" : {
        "Text" : "# Create imported library\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Must exist.\n",
        "Line" : 56,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 3
    },
    "src/cpp-ethereum/cmake/UseCpuid.cmake" : {
      "ObjectId" : "cb5e8402ece79511c9a491658d52406e041bb88f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseDev.cmake" : {
      "ObjectId" : "a4c11a5f48b2f1bd65480d51e63783e6cc68ab5f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseEth.cmake" : {
      "ObjectId" : "ac3bda97e50c492e1a87e6c8d45ef1c655a0f171",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseGmp.cmake" : {
      "ObjectId" : "084fec41b1bde9b83a10fce2738677affbe6e69f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseMhd.cmake" : {
      "ObjectId" : "4bcf8921e3fbd4619d3f75c4d385d46a04b4269e",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseMiniupnpc.cmake" : {
      "ObjectId" : "013695c3ad1c85b03e2d4973f5f210abf0679c71",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseOpenSSL.cmake" : {
      "ObjectId" : "d79ae38be5beec53d73e47c6b4462758c7fccb4d",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake supplied FindOpenSSL doesn't set all our variables\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/cmake/UseSSH2.cmake" : {
      "ObjectId" : "158975480e5bbe61296497c414780c43b18fce97",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseUtils.cmake" : {
      "ObjectId" : "a4c11a5f48b2f1bd65480d51e63783e6cc68ab5f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseWeb3.cmake" : {
      "ObjectId" : "a4c11a5f48b2f1bd65480d51e63783e6cc68ab5f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/UseZLIB.cmake" : {
      "ObjectId" : "d11010a35805285947f6dc00ba369e2b3c70abd0",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# target_link_libraries(${TARGET} ${ZLIB_LIBRARIES})\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/cmake/scripts/buildinfo.cmake" : {
      "ObjectId" : "2689971e456d2370cccce44e6397519ab40b8179",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generates BuildInfo.h\n\n# \n\n# this module expects\n\n# ETH_SOURCE_DIR - main CMAKE_SOURCE_DIR\n\n# ETH_DST_DIR - main CMAKE_BINARY_DIR\n\n# ETH_BUILD_TYPE\n\n# ETH_BUILD_PLATFORM\n\n# ETH_BUILD_NUMBER\n\n# ETH_VERSION_SUFFIX\n\n#\n\n# example usage:\n\n# cmake -DETH_SOURCE_DIR=. -DETH_DST_DIR=build -DETH_BUILD_TYPE=Debug -DETH_BUILD_PLATFORM=mac -DETH_BUILD_NUMBER=45 -DETH_VERSION_SUFFIX=\"-rc1\" -P scripts/buildinfo.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/cmake/scripts/configure.cmake" : {
      "ObjectId" : "76fb7b757479bd417507fc21c1d38a50d9575e2e",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# adds possibility to run configure_file as buildstep\n\n# reference: \n\n# http://www.cmake.org/pipermail/cmake/2012-May/050227.html\n\n#\n\n# This module expects\n\n# INFILE\n\n# OUTFILE\n\n# other custom vars\n\n#\n\n# example usage:\n\n# cmake -DINFILE=blah.in -DOUTFILE=blah.out -Dvar1=value1 -Dvar2=value2 -P scripts/configure.cmake \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/cmake/scripts/copydlls.cmake" : {
      "ObjectId" : "8dfe3a8ace1d6a9e8245473c2fa18ac5376631a9",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this module expects\n\n# DLLS\n\n# CONF\n\n# DESTINATION\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# example usage:\n\n# cmake -DDLL_DEBUG=xd.dll -DDLL_RELEASE=x.dll -DCONFIGURATION=Release -DDESTINATION=dest -P scripts/copydlls.cmake\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this script is created cause we do not know configuration in multiconfiguration generators at cmake configure phase ;)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# hack, copy it twice. with and without d.dll suffix\n\n# at first let's get the file name part\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "src/cpp-ethereum/cmake/scripts/helpers.cmake" : {
      "ObjectId" : "06dcdcd156594b5852c221dfdc09d864c745aae7",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Packs installed package binaries and headers into an archive.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To create an archive without addicional top level directory\n\n# (like package-X.Y.Z) we need to know all top level files/dirs.\n\n# Usually it is just \"win64\" dir.\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Downloads the source code of the package and unpacks it to dedicated 'src'\n\n# dir. Also creates 'build' and 'install' dir to be used by a build script.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Export names and dirs to be used by a package-specific build script.\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "src/cpp-ethereum/cmake/scripts/install_deps.cmake" : {
      "ObjectId" : "44c3b1dec9da63651caca21900086c77f11482cd",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/cmake/scripts/jsonrpcstub.cmake" : {
      "ObjectId" : "a5d8e6d7784b9ffd009bb4f14c4991f06779b253",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generates JSONRPC Stub Server && Client\n\n#\n\n# this script expects\n\n# ETH_SOURCE_DIR - main CMAKE_SOURCE_DIR\n\n# ETH_SPEC_PATH\n\n# ETH_SERVER_DIR\n\n# ETH_CLIENT_DIR\n\n# ETH_SERVER_NAME\n\n# ETH_CLIENT_NAME\n\n# ETH_JSON_RPC_STUB\n\n#\n\n# example usage:\n\n# cmake -DETH_SPEC_PATH=spec.json -DETH_SERVER_DIR=libweb3jsonrpc -DETH_CLIENT_DIR=test\n\n# -DETH_SERVER_NAME=AbstractWebThreeStubServer -DETH_CLIENT_NAME=WebThreeStubClient -DETH_JSON_RPC_STUB=/usr/local/bin/jsonrpcstub\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setup names, and allow different filename from classname for namespaced classes.\n\n# For an example call look at libethereum/CMakeLists.txt for eth::dev::Sentinel\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create tmp files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# get name without namespace\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# The following cmake regexps are equal to this sed command\n\n# \tsed -e s/include\\ \\<jsonrpccpp\\\\/server\\.h\\>/include\\ ${INCLUDE_NAME}/g \\\n\n#\t\t-e s/public\\ jsonrpc::AbstractServer\\<${NAME}\\>/public\\ ServerInterface\\<${NAME}\\>/g \\\n\n#\t\t-e s/${NAME}\\(jsonrpc::AbstractServerConnector\\ \\&conn,\\ jsonrpc::serverVersion_t\\ type\\ =\\ jsonrpc::JSONRPC_SERVER_V2\\)\\ :\\ jsonrpc::AbstractServer\\<${NAME}\\>\\(conn,\\ type\\)/${NAME}\\(\\)/g \\\n",
        "Line" : 58,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# don't throw fatal error on jsonrpcstub error, someone might have old version of jsonrpcstub,\n\n# he does not need to upgrade it if he is not working on JSON RPC\n\n# show him warning instead\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/cpp-ethereum/cmake/scripts/resources.cmake" : {
      "ObjectId" : "b0cadbf6dad720c698d6b5111ad1c8f647823d78",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# based on: http://stackoverflow.com/questions/11813271/embed-resources-eg-shader-code-images-into-executable-library-with-cmake\n\n#\n\n# example:\n\n# cmake -DETH_RES_FILE=test.cmake -P resources.cmake\n\n#\n\n# where test.cmake is:\n\n# \n\n# # BEGIN OF cmake.test\n\n# \n\n# set(copydlls \"copydlls.cmake\")\n\n# set(conf \"configure.cmake\")\n\n# \n\n# # this three properties must be set!\n\n#\n\n# set(ETH_RESOURCE_NAME \"EthResources\")\n\n# set(ETH_RESOURCE_LOCATION \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n# set(ETH_RESOURCES \"copydlls\" \"conf\")\n\n#\n\n# # END of cmake.test\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# should define ETH_RESOURCES\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# resource is a name visible for cpp application \n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# filename is the name of file which will be used in app\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# filedata is a file content\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# read full name of the file\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Convert hex data for C compatibility\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# append static variables to result variable\n",
        "Line" : 43,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# append init resources\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "src/cpp-ethereum/cmake/scripts/runtest.cmake" : {
      "ObjectId" : "15f7409ef18318871429d7385ad457f045b31c9b",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Should be used to run ctest\n\n# \n\n# example usage:\n\n# cmake -DETH_TEST_NAME=TestInterfaceStub -DCTEST_COMMAND=/path/to/ctest -P scripts/runtest.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# verbosity is off, cause BOOST_MESSAGE is not thread safe and output is a trash\n\n# see https://codecrafter.wordpress.com/2012/11/01/c-unit-test-framework-adapter-part-3/\n\n#\n\n# output might not be usefull cause of thread safety issue \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cpp-ethereum/cmake/secp256k1/CMakeLists.txt" : {
      "ObjectId" : "467d2f7c260110e2285bbbe7e6365967b5e82be9",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake config file for secp256k1 project from https://github.com/bitcoin-core/secp256k1\n\n#\n\n# The secp256k1 project has been configured following official docs with following options:\n\n#\n\n# ./configure --disable-shared --disable-tests --disable-coverage --disable-openssl-tests --disable-exhaustive-tests --disable-jni --with-bignum=no --with-field=64bit --with-scalar=64bit --with-asm=no\n\n#\n\n# Build static context:\n\n# make src/ecmult_static_context.h\n\n#\n\n# Copy src/ecmult_static_context.h and src/libsecp256k1-config.h\n\n#\n\n# Copy CFLAGS from Makefile to COMPILE_OPTIONS.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/eth/CMakeLists.txt" : {
      "ObjectId" : "32ff1b3c0321a917dbb8d71afd52ebe7c92f754e",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do we need include paths here?\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/ethkey/CMakeLists.txt" : {
      "ObjectId" : "875ecbd7e96d4dcbaa5144fcf7e8c19c6eb22e2e",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/ethminer/CMakeLists.txt" : {
      "ObjectId" : "d62ea0603d7263b253dbda6b43348b0943398276",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/ethvm/CMakeLists.txt" : {
      "ObjectId" : "8825566da8fe9ce54352241b0b4f8c4ed11f8a37",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/evmjit/CMakeLists.txt" : {
      "ObjectId" : "a02c577d00198fc8a896f154267bdcb0813a0e98",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fix MACOSX_RPATH.\n\n# Allow VERSION argument in project().\n",
        "Line" : 3,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# No longer implicitly dereference variables.\n",
        "Line" : 6,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# Always use Release variant of C++ runtime.\n\n# We don't want to provide Debug variants of all dependencies. Some default\n\n# flags set by CMake must be tweaked.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Do not allow unresolved symbols in shared library (default on linux)\n\n# unless sanitizer is used (sanity checks produce unresolved function calls)\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "src/cpp-ethereum/evmjit/cmake/ProjectLLVM.cmake" : {
      "ObjectId" : "7b0b3a5e7dbd4055f14cce7a64ddda3c5df700d6",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configures LLVM dependency\n\n#\n\n# This function handles everything needed to setup LLVM project.\n\n# By default it downloads and builds LLVM from source.\n\n# In case LLVM_DIR variable is set it tries to use the pointed pre-built\n\n# LLVM package. LLVM_DIR should point LLVM's shared cmake files to be used\n\n# by find_package(... CONFIG) function.\n\n#\n\n# Creates a target representing all required LLVM libraries and include path.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To create a fake imported library later on we need to know the\n\n# location of some library\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Just get the first one. Usually there is only one.\n",
        "Line" : 20,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# Add some diagnostics to detect issues before building.\n",
        "Line" : 29,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# List of required LLVM libs.\n\n# Generated with `llvm-config --libs mcjit ipo x86codegen`\n\n# Only used here locally to setup the \"llvm\" imported target\n",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# System libs that LLVM depend on.\n\n# See `llvm-config --system-libs`\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Build directly to install dir to avoid copy.\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "7" : {
        "Text" : "# Disable terminal color support\n\n# Disable compression support -- not needed at all\n",
        "Line" : 71,
        "CharPositionInLine" : 51
      },
      "8" : {
        "Text" : "# Must exists.\n",
        "Line" : 86,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "# Pick one of the libraries to be the main one. It does not matter which one\n\n# but the imported target requires the IMPORTED_LOCATION property.\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Clang needs this to build LLVM. Weird that the GCC does not.\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Create the target representing\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "src/cpp-ethereum/evmjit/examples/CMakeLists.txt" : {
      "ObjectId" : "b4c2d03b18f904660a19c0b5f110bd9239c5e94e",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Override -Wextra, I don't know better option.\n",
        "Line" : 1,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/evmjit/libevmjit/CMakeLists.txt" : {
      "ObjectId" : "c78e5ff0c03e517ecdb89475a329681dc39bd4b7",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do not export symbols from dependies, mostly LLVM libs\n",
        "Line" : 30,
        "CharPositionInLine" : 87
      },
      "1" : {
        "Text" : "# \"Object\" library to allow building both static and shared libraries.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Explicit dependency on llvm to download LLVM header files.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# PIC is required by shared libraries. We want it in the static library as well,\n\n# because it is going to be used to create e.g. Python modules (shared libraries).\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Static library.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Shared library.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This section configures evmjit-standalone -- a static library containing\n\n# evmjit and all its static dependencies.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This function tries to get a list of all static library dependencies of\n\n# a target. It probably does not handle all cases to be generic, but works for\n\n# LLVM case.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Here LIB is a full path to a (hopefuly static) library. We don't\n\n# want system libs (usually dynamic) here.\n",
        "Line" : 105,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# For platforms using ar a linker scripts is created and used to create\n\n# the standalone library.\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Generate the linker script.\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Execute the script.\n",
        "Line" : 146,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# The \"thin\" library is also provided. It is smaller that the standalone one\n\n# but cannot be redistributed.\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# FIXME: Looks it will be better to create evmjit-standalone as a library with costum steps instead of custom taget.\n",
        "Line" : 162,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Export the full path to evmjit-standalone library to be used in tests.\n\n# TODO: It would be easier if evmjit-standalone was a library target, but it\n\n#       works for now.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/cpp-ethereum/evmjit/tests/CMakeLists.txt" : {
      "ObjectId" : "4558830802cab3503f2bdbc00f22aad481efcee9",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compile tests for headers:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library tests:\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cpp-ethereum/libdevcore/CMakeLists.txt" : {
      "ObjectId" : "8d46ae80466856b9aec7cbfd172111b6f455a3df",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libdevcrypto/CMakeLists.txt" : {
      "ObjectId" : "ac7ed826d29eb27466e07d469cd4c7f03d0cfef7",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libethash/CMakeLists.txt" : {
      "ObjectId" : "2b6a363eef67b3078ef9bde8877cb2b01402bed5",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libethashseal/CMakeLists.txt" : {
      "ObjectId" : "011fd034668a3773c301756920d71773149fde95",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libethashseal/genesis/CMakeLists.txt" : {
      "ObjectId" : "5d5de6c5cffadfca1fc3b6eab030ccfa8238627c",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libethcore/CMakeLists.txt" : {
      "ObjectId" : "86066d42dd14fe0382bb87d87ec8078e13921c8e",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libethereum/CMakeLists.txt" : {
      "ObjectId" : "b3135b7141913ab5209ff7632ddadec68f7c850e",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libevm/CMakeLists.txt" : {
      "ObjectId" : "44dcddb376102f225b7ff332ad35410b9d082fe0",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libevmcore/CMakeLists.txt" : {
      "ObjectId" : "b3f7b1f4b947e7e2d519c166496b341a5092b805",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libp2p/CMakeLists.txt" : {
      "ObjectId" : "4d5353ce96464a818b64766231ac5961f98fdcaf",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libweb3jsonrpc/CMakeLists.txt" : {
      "ObjectId" : "9dd2156a40c57f69f7562f79703f046c6cb7c185",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libwebthree/CMakeLists.txt" : {
      "ObjectId" : "d630458a0f4c6cc072d06d143b1a8d422ddd8c14",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/libwhisper/CMakeLists.txt" : {
      "ObjectId" : "2e42903952b277c84e33fead16b5690919efcba5",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/rlp/CMakeLists.txt" : {
      "ObjectId" : "b9b52cf4c8544061057f08afd355b25352b1dd1b",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/CMakeLists.txt" : {
      "ObjectId" : "089cf6c8ac06a51b0ca80ce77be160ae2b3df6e4",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# search for test names and create ctest tests\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/test/external-dependencies/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/fuzzTesting/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libdevcore/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libdevcrypto/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libethcore/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libethereum/CMakeLists.txt" : {
      "ObjectId" : "68b96ed1bda7cdea00be6e8f8aa64c1da7c41200",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libevm/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libp2p/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libtesteth/CMakeLists.txt" : {
      "ObjectId" : "3ceda13b035c03f1e32e36c2388404573731506f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libtestutils/CMakeLists.txt" : {
      "ObjectId" : "c95808bf3694995581e7baf5d49cbe8117c2882a",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't re-use SRC_LIST, because it has a special meaning within the test folder,\n\n# with some dynamic aggregation of unit-testing going on.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp-ethereum/test/libweb3core/CMakeLists.txt" : {
      "ObjectId" : "f5a756c223abeb6acc783ffd124b21ffc0382a07",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libweb3jsonrpc/CMakeLists.txt" : {
      "ObjectId" : "f1149eea599abc8a3fb8c8a89a71895dd6f57d3c",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/test/libwhisper/CMakeLists.txt" : {
      "ObjectId" : "f1149eea599abc8a3fb8c8a89a71895dd6f57d3c",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/utils/CMakeLists.txt" : {
      "ObjectId" : "d7f3eedf7b2d9a0eb1bb3e6f842dd672f82c3958",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/utils/json_spirit/CMakeLists.txt" : {
      "ObjectId" : "22d3862382417a74236957c8036ba125d91f7fef",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp-ethereum/utils/libscrypt/CMakeLists.txt" : {
      "ObjectId" : "b6441af8d869054c656b56bf153ee70824610b14",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cryptopp/cryptopp-config.cmake" : {
      "ObjectId" : "b739501a5f04d4af584dffa936d44e5441b32141",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/leveldb/Makefile" : {
      "ObjectId" : "2bd2cadcddeb9ba912c241fed604f5d4d2136886",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (c) 2011 The LevelDB Authors. All rights reserved.\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------\n\n# Uncomment exactly one of the lines labelled (A), (B), and (C) below\n\n# to switch between compilation modes.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# (A) Production use (optimized mode)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# (B) Debug mode, w/ full line-level debugging symbols\n\n# OPT ?= -g2\n\n# (C) Profiling mode: opt, but w/debugging symbols\n\n# OPT ?= -O2 -g2 -DNDEBUG\n\n#-----------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# detect what platform we're building on\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this file is generated by the previous line to set build flags and sources\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: iOS should probably be using libtool, not ar.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Should we build shared libraries?\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Update db.h if you change these.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# PLATFORM_SHARED_EXT\n",
        "Line" : 98,
        "CharPositionInLine" : 7
      },
      "10" : {
        "Text" : "# For iOS, create universal object files to be used on both the simulator and\n\n# a device.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/secp256k1/Makefile.am" : {
      "ObjectId" : "e5657f7f31307852c4dc90750cabea1e2bf1947f",
      "LastModified" : "2018-07-05T15:29:40Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 93,
    "QMAKE" : 2,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 3
  },
  "ElapsedTime" : 3197
}