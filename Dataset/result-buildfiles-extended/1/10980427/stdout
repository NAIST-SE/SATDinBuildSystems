{
  "Repository" : "10980427",
  "Revision" : "HEAD",
  "ObjectId" : "018144ed73a17a9eeef75961e1e86ab64e96a17b",
  "CommitTime" : "2019-04-06T14:29:59Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "3082682008c05b88e60e3c30cbfa4840485e432b",
      "LastModified" : "2019-03-04T13:00:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Be nice to VIM users and Clang tools.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Silence policy CMP0042 warning by enabling RPATH explicitly.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shared libs are currently not supported on Windows.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add helper target that simplifies re-running configure\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################\n\n#                              utility functions                               #\n\n################################################################################\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Appends `str` to the variable named `var` with a whitespace as separator.\n\n# Suppresses a leading whitespace if the variable is empty and does nothing if\n\n# `str` is empty.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Forces `var` to 'no' if the content of the variables evaluates to false.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Forces `var` to 'yes' if the content of the variables evaluates to false.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################################\n\n#                        set prefix paths if available                         #\n\n################################################################################\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n\n#                      enable ccache if required by user                       #\n\n################################################################################\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################################################################################\n\n#      make sure config parameters are printed with yes or no in summary       #\n\n################################################################################\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################\n\n#                              get version of CAF                              #\n\n################################################################################\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# read content of config.hpp\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# get line containing the version\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# extract version number from line\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# calculate major, minor, and patch version\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# create full version string\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################################\n\n#   set output paths for binaries and libraries if not provided by the user    #\n\n################################################################################\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# prohibit in-source builds\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set module path appropriately\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# set binary output path if not defined by user\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set library output path if not defined by user, but always set\n\n# library output path to binary output path for Xcode projects\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "################################################################################\n\n#                                compiler setup                                #\n\n################################################################################\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# check for g++ >= 4.8 or clang++ > = 3.2\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# set optional build flags\n\n# increase max. template depth on GCC and Clang\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# explicitly disable obnoxious GCC warnings\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# add \"-Werror\" flag if --pedantic-build is used\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# set compiler flags for GCOV if requested\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# set -fno-exception if requested\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# enable a ton of warnings if --more-clang-warnings is used\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# convert CMake list to a single string, erasing the \";\" separators\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# allow enabling IPO on gcc/clang\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# add -stdlib=libc++ when using Clang if possible\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# restore CXX flags\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# enable address sanitizer if requested by the user\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# check whether address sanitizer is available\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# restore CXX flags\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# -pthread is ignored on MacOSX but required on other platforms\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# -fPIC generates warnings on MinGW and Cygwin plus extra setup steps needed on MinGW\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# build static to avoid runtime dependencies to GCC libraries\n",
        "Line" : 326,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# iOS support\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# check if the user provided CXXFLAGS, set defaults otherwise\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# set build default build type to RelWithDebInfo if not set\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# needed by subprojects\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "################################################################################\n\n#                                setup logging                                 #\n\n################################################################################\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# make sure log level is defined and all-uppercase\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "################################################################################\n\n#                           setup for install target                           #\n\n################################################################################\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# install includes from test\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# process cmake_uninstall.cmake.in\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# add uninstall target\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "################################################################################\n\n#                       set inclue paths for subprojects                       #\n\n################################################################################\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# path to caf core & io headers\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# path to caf opencl headers\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# enable tests if not disabled\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# do nothing (unit tests disabled)\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# all projects need the headers of the core components\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "################################################################################\n\n#                                 add targets                                  #\n\n################################################################################\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# add headers to include directories so other subprojects can use them\n",
        "Line" : 466,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# check all aditional dependency flags\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# make sure variable is set for nicer build log\n",
        "Line" : 495,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# make sure variable is set for nicer build log\n",
        "Line" : 501,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# build core and I/O library\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# build SSL module if OpenSSL library is available\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Check OpenSSL version >= 1.0.1\n",
        "Line" : 514,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# Check if openssl headers and library versions match\n",
        "Line" : 521,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "# build opencl library if not told otherwise and OpenCL package was found\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# build Python binding if not being told otherwise\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# build examples if not being told otherwise\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# build tools if not being told otherwise\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "################################################################################\n\n#                               unit tests setup                               #\n\n################################################################################\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# setup unit test binary\n",
        "Line" : 580,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# enumerate all test suites.\n",
        "Line" : 592,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# creates one CMake test per test suite.\n",
        "Line" : 603,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# -- Fetch branch name and SHA if available ------------------------------------\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# retrieve current branch name for CAF\n",
        "Line" : 625,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# retrieve current SHA1 hash for CAF\n",
        "Line" : 632,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# generate semantic CAF version for manual\n",
        "Line" : 640,
        "CharPositionInLine" : 6
      },
      "77" : {
        "Text" : "# check whether we're building the manual for a stable release\n",
        "Line" : 642,
        "CharPositionInLine" : 6
      },
      "78" : {
        "Text" : "# retrieve current tag name for CAF\n",
        "Line" : 644,
        "CharPositionInLine" : 8
      },
      "79" : {
        "Text" : "# tags indicate stable releases -> use tag name as release version\n",
        "Line" : 651,
        "CharPositionInLine" : 8
      },
      "80" : {
        "Text" : "# -- Setup for building manual and API documentation ---------------------------\n",
        "Line" : 662,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# we need the examples and some headers relative to the build/doc/tex directory\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "################################################################################\n\n#                     Add additional project files to GUI                      #\n\n################################################################################\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "################################################################################\n\n#                                print summary                                 #\n\n################################################################################\n",
        "Line" : 678,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# little helper macro to invert a boolean\n",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# invert CAF_NO_* variables for nicer output\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# collect all compiler flags\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# done\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 88
    },
    "cmake/FindCAF.cmake" : {
      "ObjectId" : "5578bde1f8929d71f7d97132b134addc66b0c53f",
      "LastModified" : "2018-11-07T15:31:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find CAF headers and libraries.\n\n#\n\n# Use this module as follows:\n\n#\n\n#     find_package(CAF [COMPONENTS <core|io|opencl|...>*] [REQUIRED])\n\n#\n\n# Variables used by this module (they can change the default behaviour and need\n\n# to be set before calling find_package):\n\n#\n\n#  CAF_ROOT_DIR  Set this variable either to an installation prefix or to wa\n\n#                CAF build directory where to look for the CAF libraries.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  CAF_FOUND              System has CAF headers and library\n\n#  CAF_LIBRARIES          List of library files  for all components\n\n#  CAF_INCLUDE_DIRS       List of include paths for all components\n\n#  CAF_LIBRARY_$C         Library file for component $C\n\n#  CAF_INCLUDE_DIR_$C     Include path for component $C\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# iterate over user-defined components\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we use uppercase letters only for variable names\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# mark as found (set back to false when missing library or build header)\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# check for CMake-generated build header for the core component\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# look for (.dll|.so|.dylib) file, again giving hints for non-installed CAFs\n\n# skip probe_event as it is header only\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# let CMake check whether all requested components have been found\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# final step to tell CMake we're done\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/MSVC_v140_clang_c2.cmake" : {
      "ObjectId" : "3f7b420afe78e0fd42e62b21fdc235ca73ddd693",
      "LastModified" : "2017-11-08T16:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## FLAGS FOR MSVC v140_clang_c2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "4b8d90f1c5b3a1589cac629ed786fde2e535eafe",
      "LastModified" : "2018-10-05T15:04:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -- list all .tex source files ------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -- process .in files -----------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -- Doxygen setup -------------------------------------------------------------\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -- Pandoc utility macro ------------------------------------------------------\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -- LaTeX setup ---------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# enable synctex for convenient editing\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# add manual.pdf as target\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "doc/cmake/UseLATEX.cmake" : {
      "ObjectId" : "8da338e7a3c4bde91b54f8ca4718cbe96347a044",
      "LastModified" : "2018-09-22T05:46:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# File: UseLATEX.cmake\n\n# CMAKE commands to actually use the LaTeX compiler\n\n# Version: 2.4.8\n\n# Author: Kenneth Moreland <kmorel@sandia.gov>\n\n#\n\n# Copyright 2004, 2015 Sandia Corporation.\n\n# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive\n\n# license for use of this work by or on behalf of the U.S. Government.\n\n#\n\n# This software is released under the BSD 3-Clause License.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from this\n\n# software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n\n# IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n# The following function is defined:\n\n#\n\n# add_latex_document(<tex_file>\n\n#                    [BIBFILES <bib_files>]\n\n#                    [INPUTS <input_tex_files>]\n\n#                    [IMAGE_DIRS] <image_directories>\n\n#                    [IMAGES] <image_files>\n\n#                    [CONFIGURE] <tex_files>\n\n#                    [DEPENDS] <tex_files>\n\n#                    [MULTIBIB_NEWCITES] <suffix_list>\n\n#                    [USE_BIBLATEX]\n\n#                    [USE_INDEX]\n\n#                    [INDEX_NAMES <index_names>]\n\n#                    [USE_GLOSSARY] [USE_NOMENCL]\n\n#                    [FORCE_PDF] [FORCE_DVI] [FORCE_HTML]\n\n#                    [TARGET_NAME] <name>\n\n#                    [EXCLUDE_FROM_ALL]\n\n#                    [EXCLUDE_FROM_DEFAULTS])\n\n#       Adds targets that compile <tex_file>.  The latex output is placed\n\n#       in LATEX_OUTPUT_PATH or CMAKE_CURRENT_BINARY_DIR if the former is\n\n#       not set.  The latex program is picky about where files are located,\n\n#       so all input files are copied from the source directory to the\n\n#       output directory.  This includes the target tex file, any tex file\n\n#       listed with the INPUTS option, the bibliography files listed with\n\n#       the BIBFILES option, and any .cls, .bst, .clo, .sty, .ist, and .fd\n\n#       files found in the current source directory.  Images found in the\n\n#       IMAGE_DIRS directories or listed by IMAGES are also copied to the\n\n#       output directory and converted to an appropriate format if necessary.\n\n#       Any tex files also listed with the CONFIGURE option are also processed\n\n#       with the CMake CONFIGURE_FILE command (with the @ONLY flag).  Any file\n\n#       listed in CONFIGURE but not the target tex file or listed with INPUTS\n\n#       has no effect. DEPENDS can be used to specify generated files that are\n\n#       needed to compile the latex target.\n\n#\n\n#       The following targets are made. The name prefix is based off of the\n\n#       base name of the tex file unless TARGET_NAME is specified. If\n\n#       TARGET_NAME is specified, then that name is used for the targets.\n\n#\n\n#               name_dvi: Makes <name>.dvi\n\n#               name_pdf: Makes <name>.pdf using pdflatex.\n\n#               name_safepdf: Makes <name>.pdf using ps2pdf.  If using the\n\n#                       default program arguments, this will ensure all fonts\n\n#                       are embedded and no lossy compression has been\n\n#                       performed on images.\n\n#               name_ps: Makes <name>.ps\n\n#               name_html: Makes <name>.html\n\n#               name_auxclean: Deletes <name>.aux and other auxiliary files.\n\n#                       This is sometimes necessary if a LaTeX error occurs\n\n#                       and writes a bad aux file.  Unlike the regular clean\n\n#                       target, it does not delete other input files, such as\n\n#                       converted images, to save time on the rebuild.\n\n#\n\n#       Unless the EXCLUDE_FROM_ALL option is given, one of these targets\n\n#       is added to the ALL target and built by default. Which target is\n\n#       determined by the LATEX_DEFAULT_BUILD CMake variable. See the\n\n#       documentation of that variable for more details.\n\n#\n\n#       Unless the EXCLUDE_FROM_DEFAULTS option is given, all these targets\n\n#       are added as dependencies to targets named dvi, pdf, safepdf, ps,\n\n#       html, and auxclean, respectively.\n\n#\n\n#       USE_BIBLATEX enables the use of biblatex/biber as an alternative to\n\n#       bibtex. Bibtex remains the default if USE_BIBLATEX is not\n\n#       specified.\n\n#\n\n#       If the argument USE_INDEX is given, then commands to build an index\n\n#       are made. If the argument INDEX_NAMES is given, an index file is\n\n#       generated for each name in this list. See the LaTeX package multind\n\n#       for more information about how to generate multiple indices.\n\n#\n\n#       If the argument USE_GLOSSARY is given, then commands to\n\n#       build a glossary are made.  If the argument MULTIBIB_NEWCITES is\n\n#       given, then additional bibtex calls are added to the build to\n\n#       support the extra auxiliary files created with the \\newcite command\n\n#       in the multibib package.\n\n#\n\n# History:\n\n#\n\n# 2.4.8 Fix synctex issue with absolute paths not being converted.\n\n#\n\n# 2.4.7 Fix some issues with spaces in the path of the working directory where\n\n#       LaTeX is executed.\n\n#\n\n# 2.4.6 Fix parse issue with older versions of CMake.\n\n#\n\n# 2.4.5 Fix issues with files and paths containing spaces.\n\n#\n\n# 2.4.4 Improve error reporting message when LaTeX fails.\n\n#\n\n#       When LaTeX fails, delete the output file, which is invalid.\n\n#\n\n#       Add warnings for \"missing characters.\" These usually mean that a\n\n#       non-ASCII character is in the document and will not be printed\n\n#       correctly.\n\n#\n\n# 2.4.3 Check for warnings from the natbib package. When using natbib,\n\n#       warnings for missing bibliography references look different. So\n\n#       far, natbib seems to be quiet unless something is important, so\n\n#       look for all natbib warnings. (We can change this later if\n\n#       necessary.)\n\n#\n\n# 2.4.2 Fix an issue where new versions of ImageMagick expect the order of\n\n#       options in command line execution of magick/convert. (See, for\n\n#       example, http://www.imagemagick.org/Usage/basics/#why.)\n\n#\n\n# 2.4.1 Add ability to dump LaTeX log file when using batch mode. Batch\n\n#       mode suppresses most output, often including error messages. To\n\n#       make sure critical error messages get displayed, show the full log\n\n#       on failures.\n\n#\n\n# 2.4.0 Remove \"-r 600\" from the default PDFTOPS_CONVERTER_FLAGS. The -r flag\n\n#       is available from the Poppler version of pdftops, but not the Xpdf\n\n#       version.\n\n#\n\n#       Fix an issue with the flags for the different programs not being\n\n#       properly separated.\n\n#\n\n#       Fix an issue on windows where the = character is not allowed for\n\n#       ps2pdf arguments.\n\n#\n\n#       Change default arguments for latex and pdflatex commands. Makes the\n\n#       output more quiet and prints out the file/line where errors occur.\n\n#       (Thanks to Nikos Koukis.)\n\n#\n\n#       After a LaTeX build, check the log file for warnings that are\n\n#       indicative of problems with the build.\n\n#\n\n#       Remove support for latex2html. Instead, use the htlatex program.\n\n#       This is now part of TeX Live and most other distributions. It also\n\n#       behaves much more like the other LaTeX programs. Also fixed some\n\n#       nasty issues with the htlatex arguments.\n\n#\n\n# 2.3.2 Declare LaTeX input files as sources for targets so that they show\n\n#       up in IDEs like QtCreator.\n\n#\n\n#       Fix issue where main tex files in subdirectories were creating\n\n#       invalid targets for building HTML. Just disable the HTML targets in\n\n#       this case.\n\n#\n\n# 2.3.1 Support use of magick command instead of convert command for\n\n#       ImageMagick 7.\n\n#\n\n# 2.3.0 Add USE_BIBLATEX option to support the biblatex package, which\n\n#       requires using the program biber as a replacement for bibtex\n\n#       (thanks to David Tracey).\n\n#\n\n# 2.2.1 Add STRINGS property to LATEX_DEFAULT_BUILD to make it easier to\n\n#       select the default build in the CMake GUI.\n\n#\n\n# 2.2.0 Add TARGET_NAME option.\n\n#\n\n# 2.1.1 Support for finding bmp, ppm, and other image files.\n\n#\n\n# 2.1.0 Fix an error where the pdf target and others were defined multiple\n\n#       times if UseLATEX.cmake was included multiple times.\n\n#\n\n#       Added INDEX_NAMES option to support multiple indexes in a single\n\n#       document from the multind package (thanks to Dan Lipsa).\n\n#\n\n# 2.0.0 First major revision of UseLATEX.cmake updates to more recent features\n\n#       of CMake and some non-backward compatible changes.\n\n#\n\n#       Changed all function and macro names to lower case. CMake's identifiers\n\n#       are case insensitive, but the convention moved from all upper case to\n\n#       all lower case somewhere around the release of CMake 2. (The original\n\n#       version of UseLATEX.cmake predates that.)\n\n#\n\n#       Remove condition matching in if statements. They are no longer necessary\n\n#       and are even discouraged (because else clauses get confusing).\n\n#\n\n#       Use \"new\" features available in CMake such as list and argument parsing.\n\n#\n\n#       Remove some code that has been deprecated for a while.\n\n#\n\n#       Mark variables for compiler and converter executables as advanced to\n\n#       match the more conventional CMake behavior.\n\n#\n\n#       Changed how default builds are specified and add the ability to force\n\n#       a particular build.\n\n#\n\n#       Made the base targets (pdf, dvi, etc.) global. add_latex_document\n\n#       always mangles its target names and these base targets depend on\n\n#       the targets with mangled names.\n\n#\n\n# 1.10.5 Fix for Window's convert check (thanks to Martin Baute).\n\n#\n\n# 1.10.4 Copy font files to binary directory for packages that come with\n\n#       their own fonts.\n\n#\n\n# 1.10.3 Check for Windows version of convert being used instead of\n\n#       ImageMagick's version (thanks to Martin Baute).\n\n#\n\n# 1.10.2 Use htlatex as a fallback when latex2html is not available (thanks\n\n#       to Tomasz Grzegurzko).\n\n#\n\n# 1.10.1 Make convert program mandatory only if actually used (thanks to\n\n#       Julien Schueller).\n\n#\n\n# 1.10.0 Added NO_DEFAULT and DEFAULT_PS options.\n\n#       Fixed issue with cleaning files for LaTeX documents originating in\n\n#       a subdirectory.\n\n#\n\n# 1.9.6 Fixed problem with LATEX_SMALL_IMAGES.\n\n#       Strengthened check to make sure the output directory does not contain\n\n#       the source files.\n\n#\n\n# 1.9.5 Add support for image types not directly supported by either latex\n\n#       or pdflatex.  (Thanks to Jorge Gerardo Pena Pastor for SVG support.)\n\n#\n\n# 1.9.4 Fix issues with filenames containing multiple periods.\n\n#\n\n# 1.9.3 Hide some variables that are now cached but should not show up in\n\n#       the ccmake list of variables.\n\n#\n\n# 1.9.2 Changed MACRO declarations to FUNCTION declarations.  The better\n\n#       FUNCTION scoping will hopefully avoid some common but subtle bugs.\n\n#       This implicitly increases the minimum CMake version to 4.6 (although\n\n#       I honestly only test it with the latest 4.8 version).\n\n#\n\n#       Since we are updating the minimum CMake version, I'm going to start\n\n#       using the builtin LIST commands that are now available.\n\n#\n\n#       Favor using pdftops from the Poppler package to convert from pdf to\n\n#       eps.  It does a much better job than ImageMagick or ghostscript.\n\n#\n\n# 1.9.1 Fixed typo that caused the LATEX_SMALL_IMAGES option to fail to\n\n#       activate.\n\n#\n\n# 1.9.0 Add support for the multibib package (thanks to Antonio LaTorre).\n\n#\n\n# 1.8.2 Fix corner case when an argument name was also a variable containing\n\n#       the text of an argument.  In this case, the CMake IF was matching\n\n#       the argument text with the contents of the variable with the same\n\n#       argument name.\n\n#\n\n# 1.8.1 Fix problem where ps2pdf was not getting the appropriate arguments.\n\n#\n\n# 1.8.0 Add support for synctex.\n\n#\n\n# 1.7.7 Support calling xindy when making glossaries.\n\n#\n\n#       Improved make clean support.\n\n#\n\n# 1.7.6 Add support for the nomencl package (thanks to Myles English).\n\n#\n\n# 1.7.5 Fix issue with bibfiles being copied two different ways, which causes\n\n#       Problems with dependencies (thanks to Edwin van Leeuwen).\n\n#\n\n# 1.7.4 Added the DEFAULT_SAFEPDF option (thanks to Raymond Wan).\n\n#\n\n#       Added warnings when image directories are not found (and were\n\n#       probably not given relative to the source directory).\n\n#\n\n# 1.7.3 Fix some issues with interactions between makeglossaries and bibtex\n\n#       (thanks to Mark de Wever).\n\n#\n\n# 1.7.2 Use ps2pdf to convert eps to pdf to get around the problem with\n\n#       ImageMagick dropping the bounding box (thanks to Lukasz Lis).\n\n#\n\n# 1.7.1 Fixed some dependency issues.\n\n#\n\n# 1.7.0 Added DEPENDS options (thanks to Theodore Papadopoulo).\n\n#\n\n# 1.6.1 Ported the makeglossaries command to CMake and embedded the port\n\n#       into UseLATEX.cmake.\n\n#\n\n# 1.6.0 Allow the use of the makeglossaries command.  Thanks to Oystein\n\n#       S. Haaland for the patch.\n\n#\n\n# 1.5.0 Allow any type of file in the INPUTS lists, not just tex file\n\n#       (suggested by Eric Noulard).  As a consequence, the ability to\n\n#       specify tex files without the .tex extension is removed.  The removed\n\n#       function is of dubious value anyway.\n\n#\n\n#       When copying input files, skip over any file that exists in the\n\n#       binary directory but does not exist in the source directory with the\n\n#       assumption that these files were added by some other mechanism.  I\n\n#       find this useful when creating large documents with multiple\n\n#       chapters that I want to build separately (for speed) as I work on\n\n#       them.  I use the same boilerplate as the starting point for all\n\n#       and just copy it with different configurations.  This was what the\n\n#       separate ADD_LATEX_DOCUMENT method was supposed to originally be for.\n\n#       Since its external use is pretty much deprecated, I removed that\n\n#       documentation.\n\n#\n\n# 1.4.1 Copy .sty files along with the other class and package files.\n\n#\n\n# 1.4.0 Added a MANGLE_TARGET_NAMES option that will mangle the target names.\n\n#\n\n#       Fixed problem with copying bib files that became apparent with\n\n#       CMake 2.4.\n\n#\n\n# 1.3.0 Added a LATEX_OUTPUT_PATH variable that allows you or the user to\n\n#       specify where the built latex documents to go.  This is especially\n\n#       handy if you want to do in-source builds.\n\n#\n\n#       Removed the ADD_LATEX_IMAGES macro and absorbed the functionality\n\n#       into ADD_LATEX_DOCUMENT.  The old interface was always kind of\n\n#       clunky anyway since you had to specify the image directory in both\n\n#       places.  It also made supporting LATEX_OUTPUT_PATH problematic.\n\n#\n\n#       Added support for jpeg files.\n\n#\n\n# 1.2.0 Changed the configuration options yet again.  Removed the NO_CONFIGURE\n\n#       Replaced it with a CONFIGURE option that lists input files for which\n\n#       configure should be run.\n\n#\n\n#       The pdf target no longer depends on the dvi target.  This allows you\n\n#       to build latex documents that require pdflatex.  Also added an option\n\n#       to make the pdf target the default one.\n\n#\n\n# 1.1.1 Added the NO_CONFIGURE option.  The @ character can be used when\n\n#       specifying table column separators.  If two or more are used, then\n\n#       will incorrectly substitute them.\n\n#\n\n# 1.1.0 Added ability include multiple bib files.  Added ability to do copy\n\n#       sub-tex files for multipart tex files.\n\n#\n\n# 1.0.0 If both ps and pdf type images exist, just copy the one that\n\n#       matches the current render mode.  Replaced a bunch of STRING\n\n#       commands with GET_FILENAME_COMPONENT commands that were made to do\n\n#       the desired function.\n\n#\n\n# 0.4.0 First version posted to CMake Wiki.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n\n# Find the location of myself while originally executing.  If you do this\n\n# inside of a macro, it will recode where the macro was invoked.\n\n#############################################################################\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n\n# Generic helper functions\n\n#############################################################################\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Match the contents of a file to a regular expression.\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The FILE STRINGS command would be a bit better, but I'm not totally sure\n\n# the match will always be to a whole line, and I don't want to break things.\n",
        "Line" : 397,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# A version of GET_FILENAME_COMPONENT that treats extensions after the last\n\n# period rather than the first.  To the best of my knowledge, all filenames\n\n# typically used by LaTeX, including image files, have small extensions\n\n# after the last dot.\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############################################################################\n\n# Functions that perform processing during a LaTeX build.\n\n#############################################################################\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Chose the native method for parsing command arguments. Newer versions of\n\n# CMake allow you to just use NATIVE_COMMAND.\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Preps variables for use in execute_process.\n\n# Even though we expect LATEX_WORKING_DIRECTORY to have a single \"argument,\"\n\n# we also want to make sure that we strip out any escape characters that can\n\n# foul up the WORKING_DIRECTORY argument.\n",
        "Line" : 462,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# LaTeX tends to write a file when a failure happens. Delete that file so\n\n# that LaTeX will run again.\n",
        "Line" : 476,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This is really a bare bones port of the makeglossaries perl script into\n\n# CMake scripting.\n",
        "Line" : 491,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# What crazy person makes a LaTeX index generator that uses different\n\n# identifiers for language than babel (or at least does not support\n\n# the old ones)?\n",
        "Line" : 559,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Ideally, we would check that the language is compatible with the\n\n# default codepage, but I'm hoping that distributions will be smart\n\n# enough to specify their own codepage.  I know, it's asking a lot.\n",
        "Line" : 602,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# So, it is possible (perhaps common?) for aux files to specify a\n\n# language and codepage that are incompatible with each other.  Check\n\n# for that condition, and if it happens run again with the default\n\n# codepage.\n",
        "Line" : 623,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Relative paths\n",
        "Line" : 706,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Absolute paths\n",
        "Line" : 714,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Check for undefined references\n",
        "Line" : 756,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Check for natbib warnings\n",
        "Line" : 770,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Check for overfull\n",
        "Line" : 784,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Check for invalid characters\n",
        "Line" : 798,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#############################################################################\n\n# Helper functions for establishing LaTeX build.\n\n#############################################################################\n",
        "Line" : 820,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Most windows ports of ghostscript utilities use .bat files for ps2pdf\n\n# commands. bat scripts interpret \"=\" as a special character and separate\n\n# those arguments. To get around this, the ghostscript utilities also\n\n# support using \"#\" in place of \"=\".\n",
        "Line" : 915,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Because it is easier to type, the flags variables are entered as\n\n# space-separated strings much like you would in a shell. However, when\n\n# using a CMake command to execute a program, it works better to hold the\n\n# arguments in semicolon-separated lists (otherwise the whole string will\n\n# be interpreted as a single argument). Use the separate_arguments to\n\n# convert the space-separated strings to semicolon-separated lists.\n",
        "Line" : 942,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Not quite done. When you call separate_arguments on a cache variable,\n\n# the result is written to a local variable. That local variable goes\n\n# away when this function returns (which is before any of them are used).\n\n# So, copy these variables with local scope to cache variables with\n\n# global scope.\n",
        "Line" : 961,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Just holds extensions for known image types.  They should all be lower case.\n\n# For historical reasons, these are all declared in the global scope.\n",
        "Line" : 1014,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# ImageMagick has broken eps to pdf conversion\n\n# use ps2pdf instead\n",
        "Line" : 1114,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# ImageMagick can also be sketchy on pdf to eps conversion.  Not good with\n\n# color spaces and tends to unnecessarily rasterize.\n\n# use pdftops instead\n",
        "Line" : 1124,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# ImageMagick requires a special order of arguments where resize and\n\n# arguments of that nature must be placed after the input image path.\n",
        "Line" : 1146,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Not ImageMagick convert\n",
        "Line" : 1157,
        "CharPositionInLine" : 9
      },
      "29" : {
        "Text" : "# Makes custom commands to convert a file to a particular type.\n",
        "Line" : 1166,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Check input filename for potential problems with LaTeX.\n",
        "Line" : 1181,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# As a shortcut, we can just copy the file.\n",
        "Line" : 1205,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Check to see if there is another input file of the appropriate type.\n",
        "Line" : 1215,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# If we still need to convert, do it.\n",
        "Line" : 1225,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Adds custom commands to process the given files for dvi and pdf builds.\n\n# Adds the output files to the given variables (does not replace).\n",
        "Line" : 1237,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Check to see if we need to downsample the image.\n",
        "Line" : 1248,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# Make sure the output directory exists.\n",
        "Line" : 1257,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Special case: output exists but input does not.  Assume that it was\n\n# created elsewhere and skip the input file copy.\n",
        "Line" : 1308,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "#############################################################################\n\n# Commands provided by the UseLATEX.cmake \"package\"\n\n#############################################################################\n",
        "Line" : 1316,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Parses arguments to add_latex_document and ADD_LATEX_TARGETS and sets the\n\n# variables LATEX_TARGET, LATEX_IMAGE_DIR, LATEX_BIBFILES, LATEX_DEPENDS, and\n\n# LATEX_INPUTS.\n",
        "Line" : 1326,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Deprecated options\n",
        "Line" : 1340,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Handle invalid and deprecated arguments\n",
        "Line" : 1364,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Capture the first argument, which is the main LaTeX input.\n",
        "Line" : 1387,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Propagate the result variables to the caller\n",
        "Line" : 1392,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# The commands to run LaTeX.  They are repeated multiple times.\n",
        "Line" : 1408,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Wrap command in script that dumps the log file on error. This makes sure\n\n# errors can be seen.\n",
        "Line" : 1413,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Wrap command in script that dumps the log file on error. This makes sure\n\n# errors can be seen.\n",
        "Line" : 1429,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Use the main filename (minus the .tex) as the target name. Remove any\n\n# spaces since CMake cannot have spaces in its target names.\n",
        "Line" : 1443,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Some LaTeX commands may need to be modified (or may not work) if the main\n\n# tex file is in a subdirectory. Make a flag for that.\n",
        "Line" : 1448,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Set up target names.\n",
        "Line" : 1452,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Probably not all of these will be generated, but they could be.\n\n# Note that the aux file is added later.\n",
        "Line" : 1460,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# For each directory in LATEX_IMAGE_DIRS, glob all the image files and\n\n# place them in LATEX_IMAGES.\n",
        "Line" : 1488,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Dependent .tex files might have their own .aux files created.  Make\n\n# sure these get cleaned as well.  This might replicate the cleaning\n\n# of the main .aux file, which is OK.\n",
        "Line" : 1519,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "# Repeat these commands twice.\n",
        "Line" : 1533,
        "CharPositionInLine" : 25
      },
      "54" : {
        "Text" : "# Repeat these commands twice.\n",
        "Line" : 1562,
        "CharPositionInLine" : 25
      },
      "55" : {
        "Text" : "# Need to run one more time to remove biblatex' warning\n\n# about page breaks that have changed.\n",
        "Line" : 1669,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Check LaTeX output for important warnings at end of build\n",
        "Line" : 1704,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Capture the default build.\n",
        "Line" : 1720,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Add commands and targets for building pdf outputs (with pdflatex).\n",
        "Line" : 1727,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Add commands and targets for building dvi outputs.\n",
        "Line" : 1748,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Since both the pdf and safepdf targets have the same output, we\n\n# cannot properly do the dependencies for both.  When selecting safepdf,\n\n# simply force a recompile every time.\n",
        "Line" : 1783,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "# The code below to run HTML assumes that LATEX_TARGET.tex is in the\n\n# current directory. I have tried to specify that LATEX_TARGET.tex is\n\n# in a subdirectory. That makes the build targets correct, but the\n\n# HTML build still fails (at least for htlatex) because files are not\n\n# generated where expected. I am getting around the problem by simply\n\n# disabling HTML in this case. If someone really cares, they can fix\n\n# this, but make sure it runs on many platforms and build programs.\n",
        "Line" : 1807,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : "# htlatex places the output in a different location\n",
        "Line" : 1815,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# Set default targets.\n",
        "Line" : 1839,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "#############################################################################\n\n# Actually do stuff\n\n#############################################################################\n",
        "Line" : 1902,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Must be part of the actual configure (included from CMakeLists.txt).\n",
        "Line" : 1939,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 66
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "a6bb9cafc44aae6e90c61fa5bd5a3b3d56ffe5dc",
      "LastModified" : "2019-03-04T13:00:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# introductionary applications\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# basic message passing primitives\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# streaming API\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# dynamic behavior changes using 'become'\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# composing actors using states or other actors\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# adding custom message types\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# basic remoting\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# basic I/O with brokers\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add binary dir as include path as generated headers will be located there\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#include(${QT_USE_FILE})\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# generated headers will be in cmake build directory\n\n#include_directories(. qtsupport ${CMAKE_CURRENT_BINARY_DIR} ${CPPA_INCLUDE})\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# generated headers will be in cmake build directory\n\n#include_directories(. qtsupport ${CMAKE_CURRENT_BINARY_DIR} ${CPPA_INCLUDE})\n",
        "Line" : 106,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 12
    },
    "libcaf_core/CMakeLists.txt" : {
      "ObjectId" : "6c0093e86f1f3165f79cc9a719328c55d4c5602a",
      "LastModified" : "2019-03-04T13:00:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get header files; only needed by CMake generators,\n\n# e.g., for creating proper Xcode projects\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# list cpp files excluding platform-dependent files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# configure build_config.hpp header\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build shared library if not compiling static only\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# build static library only if --build-static or --build-static-only was set\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libcaf_io/CMakeLists.txt" : {
      "ObjectId" : "ba0417efc256423fb1dc764e70d86c9facc878b9",
      "LastModified" : "2019-03-15T11:00:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get header files; only needed by CMake generators,\n\n# e.g., for creating proper Xcode projects\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# list cpp files excluding platform-dependent files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build shared library if not compiling static only\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build static library only if --build-static or --build-static-only was set\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# install includes\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libcaf_opencl/CMakeLists.txt" : {
      "ObjectId" : "2355618ace7ba82c37f466d475489ea29323be7f",
      "LastModified" : "2019-03-04T13:00:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get header files; only needed by CMake generators,\n\n# e.g., for creating proper Xcode projects\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# list cpp files excluding platform-dependent files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build shared library if not compiling static only\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build static library only if --build-static or --build-static-only was set\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# install includes\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libcaf_opencl/examples/CMakeLists.txt" : {
      "ObjectId" : "400d8c35cfdf2e02755edeb732ea2559fb0d46bc",
      "LastModified" : "2018-09-22T05:46:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libcaf_openssl/CMakeLists.txt" : {
      "ObjectId" : "522d41dd1854ec75d4b068c05a31b6ae20a9a3b7",
      "LastModified" : "2019-03-04T13:00:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get header files; only needed by CMake generators,\n\n# e.g., for creating proper Xcode projects\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# list cpp files excluding platform-dependent files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build shared library if not compiling static only\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build static library only if --build-static or --build-static-only was set\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# install includes\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libcaf_python/CMakeLists.txt" : {
      "ObjectId" : "650efe91328e200e65f22e1c16bb8bdfc21d600b",
      "LastModified" : "2019-03-04T13:00:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check whether submodules are available\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# strip -I from each path\n",
        "Line" : 23,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# add targets to CMake\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "1a2c90060c24a528d7615d2046b1ad2029a67bb7",
      "LastModified" : "2019-03-04T13:00:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 13
  },
  "ElapsedTime" : 2070
}