{
  "Repository" : "24923049",
  "Revision" : "HEAD",
  "ObjectId" : "a0526ee5d79de66efe7c2eaa885577af064e38d6",
  "CommitTime" : "2019-04-11T12:22:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "880dde809afb78b5e6ebe7dd61235eee645a0b70",
      "LastModified" : "2019-04-11T12:22:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main audi/pyaudi project version.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake version check.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Module path setup.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set default build type to \"Release\".\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Main build options: build audi or pyaudi. They cannot be on at the same time,\n\n# and only one must be chosen.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check consistency.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Initial setup of a audi build.\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Build option: enable test set.\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Build Option: when active the file main.cpp is built.\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Initial setup of a pyaudi build.\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Common general bits.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Initial setup of compiler flags.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Threading setup.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Assemble the flags.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Disable the idiotic minmax macros on MSVC, some annoying warnings,\n\n# and enable the bigobj option.\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# NOTE: on MSVC we use the push/pop pragmas, but they do not seem to work on Intel (the pragmas\n\n# in icc influence the behaviour at instantiation point, not at definition point).\n\n# These warnings are useful in principle, but they are generated a lot from cereal and we have no\n\n# way of disabling them selectively. Just rely on the other compilers to provde good diagnostic.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Flag needed to deal with big binaries in MinGW.\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Some flags that generate warnings due to Eigen or Piranha obsolete versions\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Configure config.hpp.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# audi dependencies.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Python version check.\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# NOTE: for the time being, require that audi/pyaudi versions are matching exactly.\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Internal variable that will be used to tell AudiFindBoost to locate Boost.Python.\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Boost setup (common to audi/pyaudi).\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# audi dependencies.\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Eigen setup\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Piranha setup.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# GMP setup.\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# MPFR setup.\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# MP++ SETUP\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Setup of the header-only audi library.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# This sets up the include directory to be different if we build\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# These lines are temporary with piranha v0.10, will be simplified when this is updated\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Builds the main file\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Builds the tests (performance in Release, the others in Debug)\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Configure the doc files.\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Setup of the export.\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Setup of the optional deps.\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Take care of versioning.\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Do the actual library installation.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Configure version\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Add the pyaudi subdirectory.\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# NOTE: this is necessary on linux but harmful on mingw.\n",
        "Line" : 226,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 43
    },
    "cmake_modules/AudiFindBoost.cmake" : {
      "ObjectId" : "8d5201b48e0040f7871c3962556f6160708b52e9",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: since Boost 1.67, the naming of the Boost.Python library has changed to include the\n\n# major and minor python version as a suffix. See the release notes:\n\n# https://www.boost.org/users/history/version_1_67_0.html\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Might need to recreate targets if they are missing (e.g., older CMake versions).\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_modules/FindEigen3.cmake" : {
      "ObjectId" : "a9ac0b0eac743cc1d52a95a9cff40a9269bd218d",
      "LastModified" : "2018-02-13T17:09:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n\n#\n\n# This module reads hints about search locations from \n\n# the following enviroment variables:\n\n#\n\n# EIGEN3_ROOT\n\n# EIGEN3_ROOT_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# search first if an Eigen3Config.cmake is available in the system,\n\n# if successful this would set EIGEN3_INCLUDE_DIR and the rest of\n\n# the script will work as usual\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake_modules/FindGMP.cmake" : {
      "ObjectId" : "e46ce4a8801f973fd468fa626c068b713bd7c101",
      "LastModified" : "2018-05-25T11:54:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Originally copied from the KDE project repository:\n\n# http://websvn.kde.org/trunk/KDE/kdeutils/cmake/modules/FindGMP.cmake?view=markup&pathrev=675218\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n# Copyright (c) 2008-2018 Francesco Biscani, <bluescarni@gmail.com>\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# ------------------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# NOTE: this has been adapted from CMake's FindPNG.cmake.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake_modules/FindMPFR.cmake" : {
      "ObjectId" : "fd382e107a590a12413ea198d21a0c32f03eca91",
      "LastModified" : "2018-05-25T11:54:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Originally copied from the KDE project repository:\n\n# http://websvn.kde.org/trunk/KDE/kdeutils/cmake/modules/FindGMP.cmake?view=markup&pathrev=675218\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n# Copyright (c) 2008-2018 Francesco Biscani, <bluescarni@gmail.com>\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# ------------------------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# NOTE: this has been adapted from CMake's FindPNG.cmake.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake_modules/FindPiranha.cmake" : {
      "ObjectId" : "e913b2471075465d7012c9c3d3ee68610b1b55fb",
      "LastModified" : "2018-02-13T17:09:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "cmake_modules/yacma/YACMACompilerLinkerSettings.cmake" : {
      "ObjectId" : "510909e0987af61b8a634161665be6e0f58b890f",
      "LastModified" : "2019-01-07T14:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: we want to make sure the following variables are defined each time we include\n\n# this file, even when the file is re-included (e.g., from a parallel unrelated tree).\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang detection:\n\n# http://stackoverflow.com/questions/10046114/in-cmake-how-can-i-test-if-the-compiler-is-clang\n\n# http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:CMAKE_LANG_COMPILER_ID\n\n# NOTE: we use MATCHES here because on OSX sometimes the compiler calls itself \"AppleClang\".\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Detect the hcc compiler.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is an OS X specific setting that is suggested to be enabled. See:\n\n# https://blog.kitware.com/upcoming-in-cmake-2-8-12-osx-rpath-support/\n\n# http://stackoverflow.com/questions/31561309/cmake-warnings-under-os-x-macosx-rpath-is-not-specified-for-the-following-targe\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Helper function to print out the autodetected flags.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Enable conditionally a CXX flag, if supported by the compiler.\n\n# This is for flags intended to be enabled in all configurations.\n\n# NOTE: we use macros and go through temporary private variables\n\n# because it's apparently impossible to append to an internal\n\n# CACHEd list.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NOTE: check_cxx_compiler stores variables in the cache.\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Enable conditionally a debug CXX flag, is supported by the compiler.\n\n# This is for flags intended to be enabled in debug mode.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# What we want to avoid is to re-run the expensive flag checks. We will set cache variables\n\n# on the initial run and skip following CMake runs.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Init the flags lists.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Configuration bits specific for GCC.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Configuration bits specific for clang.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# For now it seems like -Wshadow from clang behaves better than GCC's, just enable it here\n\n# for the time being.\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Clang is better at this flag than GCC.\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Common configuration for GCC, clang and Intel.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# This limit is supposed to be at least 1024 in C++11, but for some reason\n\n# clang sets this to 256, and gcc to 900.\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# NOTE: disable this for now, as it results in a lot of clutter from Boost.\n\n# _YACMA_CHECK_ENABLE_CXX_FLAG(-Wzero-as-null-pointer-constant)\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# This is useful when the compiler decides the template backtrace is too verbose.\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# A few suggestion flags.\n",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# From GCC 5.\n",
        "Line" : 135,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# From GCC 6.\n",
        "Line" : 140,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# From GCC 7.\n\n#_YACMA_CHECK_ENABLE_DEBUG_CXX_FLAG(-Wduplicated-branches)\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# From GCC 8.\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# This is supposed to produce a nice graphical visualization\n\n# of mismatching template errors.\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# NOTE: GCC >= 6 seems to be wrongly warning about visibility attributes\n\n# in some situations:\n\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80947\n\n# Let's just disable the warning for now.\n",
        "Line" : 155,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# The -Wmaybe-uninitialized flag is enabled by -Wall, but it is known\n\n# to emit a lot of possibly spurious warnings. Let's just disable it.\n",
        "Line" : 163,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# MSVC setup.\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Enable higher warning level than usual.\n",
        "Line" : 172,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Treat warnings as errors.\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# Set the cache variables.\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Final report.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Mark as included.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "cmake_modules/yacma/YACMAPythonSetup.cmake" : {
      "ObjectId" : "ceed64ed349aaf26879099fbefd858594ff2c9dc",
      "LastModified" : "2019-01-07T14:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: this is a heuristic to determine whether we need to link to the Python library.\n\n# In theory, Python extensions don't need to, as they are dlopened() by the Python process\n\n# and thus they don't need to be linked to the Python library at compile time. However,\n\n# the dependency on Boost.Python muddies the waters, as BP itself does link to the Python\n\n# library, at least on some platforms. The following configuration seems to be working fine\n\n# on various CI setups.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find Python interpreter.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE: this will give us both the Python lib and the Python include dir.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: we need to determine the include dir on our own.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# An imported target to be used when building extension modules.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This flag is used to signal the need to override the default extension of the Python modules\n\n# depending on the architecture. Under Windows, for instance, CMake produces shared objects as\n\n# .dll files, but Python from 2.5 onwards requires .pyd files (hence the need to override).\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Platform-specific setup.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Apparently on OS X Python expects the .so extension for compiled modules.\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# NOTE: here we use this contraption (instead of the simple method below for Win32) because like this we can\n\n# support installation into the CMake prefix (e.g., in the user's home dir).\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# On Windows, we will install directly into the install path of the Python interpreter.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Check the install path was actually detected.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If we need an explicit link to the Python library, we compile it as a normal shared library.\n\n# Otherwise, we compile it as a module.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Any \"lib\" prefix normally added by CMake must be removed.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If needed, set a custom extension for the module.\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# We need extra flags to be set when compiling Python modules, at least\n\n# with clang and gcc. See:\n\n# https://bugs.python.org/issue11149\n\n# http://www.python.org/dev/peps/pep-3123/\n\n# NOTE: not sure here how we should set flags up for MSVC or clang on windows, need\n\n# to check in the future.\n\n# NOTE: do not use the yacma compiler linker settings bits, so this module\n\n# can be used stand-alone.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# On OSX + Clang this link flag is apparently necessary in order to avoid\n\n# undefined references to symbols defined in the Python library. See also:\n\n# https://github.com/potassco/clingo/issues/79\n\n# https://stackoverflow.com/questions/25421479/clang-and-undefined-symbols-when-building-a-library\n\n# https://cmake.org/pipermail/cmake/2017-March/065115.html\n",
        "Line" : 139,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Mark as included.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake_modules/yacma/YACMAThreadingSetup.cmake" : {
      "ObjectId" : "c9e24f98eec40b5b5a1f3ccf2731c413d8f77067",
      "LastModified" : "2018-02-13T17:09:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Initial thread setup. See FindThreads.cmake for an explanation.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup variable for threading-specific flags.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# POSIX thread setup. Intended both for UNIX and Windows (the latter when using some sort of\n\n# pthread emulation/wrapper like pthreads-win32).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Detect affinity setting primitives.\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Check if we have thread_local.\n\n# NOTE: we need to double check what happens with OSX's clang here.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Final report.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Mark as included.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "doc/sphinx/Makefile" : {
      "ObjectId" : "a7a6a01c9c4f2e5c51e1b47a3d6008e4637bea44",
      "LastModified" : "2019-01-07T14:43:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "pyaudi/CMakeLists.txt" : {
      "ObjectId" : "ab82226693663c6c265614f64f3cf27112ea7faa",
      "LastModified" : "2019-01-07T14:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On unix platforms, we set the rpath of the pyaudi libraries\n\n# to the lib subdirectory of the install prefix. This allows\n\n# to install pyaudi in nonstandard locations (e.g., ~/.local)\n\n# without having to muck around with library search paths.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The name of the BP target to link to depends on the Boost and Python versions.\n\n# NOTE: since Boost 1.67, the naming of the Boost.Python library has changed to include the\n\n# major and minor python version as a suffix. See the release notes:\n\n# https://www.boost.org/users/history/version_1_67_0.html\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Boost.Python version 1.64 (and possibly later?) has issues with default hidden visibility.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup of the header-only pyaudi library.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setup of the pyaudi core module.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Setup the installation path.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the Python files.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "375874be21f14c0a8d0d2eb958e9a7c3caa8ee94",
      "LastModified" : "2019-01-07T14:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the unit test library.\n\n# NOTE: probably we should have a check in the build system to determine\n\n# whether Boost libraries are static or dynamic.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 11,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1017
}