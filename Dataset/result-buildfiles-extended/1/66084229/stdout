{
  "Repository" : "66084229",
  "Revision" : "HEAD",
  "ObjectId" : "b5846fb397aaf60c016072bd096002420735277b",
  "CommitTime" : "2019-04-06T21:33:41Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "585c55ed86d973a3f1ef4ecab49459cf024e4b0c",
      "LastModified" : "2019-04-03T15:34:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BEGIN [Environment-controlled \"sticky\" cache variables]\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Main variables\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# USE_SYSCC-related variables\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debug cache variables\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We don't really need to cache the values of CC/CXX, but is useful to that\n\n# in order to prevent user errors. Since CC/CXX affect the build only the first\n\n# time CMake is run, it makes sense to check for the next runs whether the env\n\n# vars CC/CXX changed (if set) by the user or an incorrect script. In case\n\n# they are, we have to stop the build because their new value will be otherwise\n\n# completely ignored. In order words, \"fail early\".\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# END [Environment-controlled \"sticky\" cache variables]\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Reset the default flags\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compile options\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Non-boolean kernel options\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Kernel options (enabled by default)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Kernel options (disabled by default)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Various options\n",
        "Line" : 118,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# Non-boolean kernel options\n",
        "Line" : 123,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# Boolean options ENABLED by default\n",
        "Line" : 127,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# Boolean options DISABLED by default\n",
        "Line" : 133,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "###########################################################\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# BEGIN [ARCH-dependent paths]\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Main toolchain (musl)\n",
        "Line" : 177,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# Glibc toolchain\n",
        "Line" : 184,
        "CharPositionInLine" : 3
      },
      "20" : {
        "Text" : "# END [ARCH-dependent paths]\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119\n",
        "Line" : 259,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "################################################################################\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "################################################################################\n\n# Bootloaders, build-scripts and link-scripts config\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# use qemu's default: 128 MB\n",
        "Line" : 309,
        "CharPositionInLine" : 31
      },
      "25" : {
        "Text" : "# Generate config files & build scripts\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "################################################################################\n\n# Include sub-directories\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "################################################################################\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ~36 MB\n",
        "Line" : 359,
        "CharPositionInLine" : 71
      },
      "29" : {
        "Text" : "# We MUST depend on BOTH each wrapper-target AND its OUTPUT in order to\n\n# our image file to be re-built when the *.bin files are re-built.\n",
        "Line" : 369,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "#36MB\n",
        "Line" : 407,
        "CharPositionInLine" : 75
      },
      "CommentCount" : 31
    },
    "Makefile" : {
      "ObjectId" : "45078ca6acb085f1b75bc5461958d046361aafe7",
      "LastModified" : "2018-07-26T17:37:52Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This is a commodity fake Makefile that allows people to run the build from the\n\n# project's root directory, instead of entering in the build/ directory first.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "boot/efi/CMakeLists.txt" : {
      "ObjectId" : "47dcb9c17120b25f016f2efa811612df0d914180",
      "LastModified" : "2018-12-12T23:29:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "boot/efi/GenericBuild.cmake" : {
      "ObjectId" : "6ebe90516f5169847ed696144c426d76d8226485",
      "LastModified" : "2019-01-17T13:02:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove -rdynamic\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# necessary in order to use MS_ABI\n",
        "Line" : 20,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# allows to call UEFI funcs without the wrapper\n",
        "Line" : 76,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 4
    },
    "boot/efi/ia32/CMakeLists.txt" : {
      "ObjectId" : "e4a26a66a01dd3f0dfb729d27ac50e6742bebc01",
      "LastModified" : "2018-12-12T23:29:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "boot/efi/x86_64/CMakeLists.txt" : {
      "ObjectId" : "f13ea62641eca65e63afb35dfdc027b3fad3e008",
      "LastModified" : "2018-12-12T23:29:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "boot/legacy/CMakeLists.txt" : {
      "ObjectId" : "653de4ab91561ed73ddeb3bf5219d16f570edbde",
      "LastModified" : "2019-03-26T19:36:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove -rdynamic\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common directories, both for early_boot and for elf_stage3\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#### COMMENTED BLOCK: See the comments in elf_stage3_script.ld.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(tmp \"${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}\")\n\n#set(STAGE3_STARTUP_OBJ_FILE \"${tmp}/elf_stage3.dir/stage3_entry.S.o\")\n\n#unset(tmp)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#### END COMMENTED BLOCK\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Disable the generation of any kind of FPU instructions\n",
        "Line" : 74,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Allow easier disassembly debugging\n\n# -mpush-args\n\n# -mno-accumulate-outgoing-args\n\n# -mno-stack-arg-probe\n",
        "Line" : 81,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# -lgcc is necessary for things like 64 bit integers in 32 bit mode.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "kernel/CMakeLists.txt" : {
      "ObjectId" : "617fbb98a24ff749ddd988900ac52538486d7e6f",
      "LastModified" : "2019-04-03T15:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Creating a static library target for putting kernel's arch-independent code.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/arch/CMakeLists.txt" : {
      "ObjectId" : "140c0891be242c5cb734569e17e8bdbe8f8f6957",
      "LastModified" : "2019-03-26T19:36:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If system's compiler (CC) is Clang, we cannot use it for compiling\n\n# our assembly code, because LLVM's assembler (llvm-as) is not 100%\n\n# compatible with GAS's intel-syntax dialect.\n",
        "Line" : 14,
        "CharPositionInLine" : 9
      },
      "2" : {
        "Text" : "# B2O = Binary to Object file [options]\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "kernel/arch/i386/CMakeLists.txt" : {
      "ObjectId" : "d09d3c81dc006c0c7ee7604d9b81bf1fbdd1fd5f",
      "LastModified" : "2019-03-26T19:36:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove -rdynamic\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Options that will be used only when building the actual kernel, not when\n\n# building kernel's code for unit testing.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disable the generation of any kind of FPU instructions\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Allow easier disassembly debugging\n\n# -mpush-args\n\n# -mno-accumulate-outgoing-args\n\n# -mno-stack-arg-probe\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Override CMake's default executable output directory\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# -lgcc is necessary for things like 64 bit integers in 32 bit mode.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "other/errors.cmake" : {
      "ObjectId" : "f275804e80ebb7b34cdd5a65029bab7c43594317",
      "LastModified" : "2019-03-26T19:36:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "other/gen_config.cmake" : {
      "ObjectId" : "61494daffd48695d25c4c9f4d5ca0e505317395a",
      "LastModified" : "2019-04-03T16:58:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run qemu scripts\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "other/utils.cmake" : {
      "ObjectId" : "52417f7a3113ecc5bd8d21e882aaca9cfeb7b11f",
      "LastModified" : "2019-03-29T23:21:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Assume that the system's compiler is already able to build for\n\n# the given target architecture without additional flags.\n",
        "Line" : 95,
        "CharPositionInLine" : 9
      },
      "2" : {
        "Text" : "# DEFAULT CASE: use our pre-built toolchain\n",
        "Line" : 105,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DEFAULT CASE: use our pre-built toolchain\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# This macro is used in case ARCH_GTESTS is ON.\n",
        "Line" : 146,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Special case: the user wants to use system's compiler to compile code\n\n# for the target architecture. Just use our basic set_cross_compiler()\n\n# macro.\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# DEFAULT CASE: use our pre-built toolchain\n",
        "Line" : 158,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# We want to use a cross-compiler BUT it has to use glibc instead of\n\n# libmusl as libc.\n",
        "Line" : 160,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#message(\"CMAKE_ASM_COMPILE_OBJECT: ${CMAKE_ASM_COMPILE_OBJECT}\")\n\n#message(\"CMAKE_C_LINK_EXECUTABLE: ${CMAKE_C_LINK_EXECUTABLE}\")\n\n#message(\"CMAKE_C_COMPILE_OBJECT: ${CMAKE_C_COMPILE_OBJECT}\")\n\n#message(\"CMAKE_C_LINK_FLAGS: ${CMAKE_C_LINK_FLAGS}\")\n\n#message(\"CMAKE_CXX_COMPILE_OBJECT: ${CMAKE_CXX_COMPILE_OBJECT}\")\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# skip the \"0x\" prefix\n",
        "Line" : 211,
        "CharPositionInLine" : 43
      },
      "CommentCount" : 10
    },
    "scripts/build_apps/CMakeLists.txt" : {
      "ObjectId" : "5095f2f0c5c462520ada3d1d19983b148f11bae6",
      "LastModified" : "2019-03-26T19:36:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/unit/CMakeLists.txt" : {
      "ObjectId" : "8a94b46175d71eaac2bc25ad50c1e777c90c8d1b",
      "LastModified" : "2019-04-03T15:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Override CMake's default executable output directory\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if (${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\")\n\n#    set(CLANG_OPTS \"-fsanitize=address\")\n\n#    message(STATUS \"Using CLANG_OPTS: ${CLANG_OPTS}\")\n\n# endif()\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if (${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\")\n\n#    target_link_libraries(gtests asan)\n\n# endif()\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "userapps/CMakeLists.txt" : {
      "ObjectId" : "57810d44391d6bc5eb9e7134f310443cad662ca6",
      "LastModified" : "2019-04-03T16:58:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "######################## COMMON CODE & DEFINITIONS #############################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force static building for all the user applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# [build utils]\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# [/build utils]\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################ TARGETS #######################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# [simple apps]\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# [/simple apps]\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# [devshell]\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# [/devshell]\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# [ncurses test app]\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# [/ncurses test app]\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# [extra]\n\n# This macro makes the integration with extra apps much easier.\n\n# It's enough for the external app to just add a call to tilck_add_extra_app()\n\n# with the full-path of a binary in order to that deliverable to become a file\n\n# dependency of Tilck's main target (the image) and get that deliverable copied\n\n# in /usr/bin (in Tilck's fatpart).\n\n# Example: https://github.com/vvaltchev/tfblib\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# [/extra]\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "userapps/extra/CMakeLists.txt" : {
      "ObjectId" : "5e6aebcfbbb061921ae286e0722cb08efe1d8cef",
      "LastModified" : "2019-04-03T15:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SPDX-License-Identifier: BSD-2-Clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 16,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1142
}