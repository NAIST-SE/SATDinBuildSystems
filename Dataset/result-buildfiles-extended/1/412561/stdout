{
  "Repository" : "412561",
  "Revision" : "HEAD",
  "ObjectId" : "d557624118dd41f7c9cd4aec0fd91512c5dde484",
  "CommitTime" : "2019-04-15T16:35:58Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "dbc58832006173f1c76d1a76c9e6673d38884103",
      "LastModified" : "2019-04-02T14:06:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Evolution-EWS build script\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Required for FindIntltool module\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Required for 'disttest' and 'ditcheck' of DistTarget module\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Keep these two definitions in agreement.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Keep these two definitions in agreement.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Keep these two definitions in agreement.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Warn about API usage that violates our minimum requirements.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These will suppress warnings about newly-deprecated symbols. Ideally\n\n# these settings should match our minimum requirements and we will clean\n\n# up any new deprecation warnings after bumping our minimum requirements.\n\n# But if the warnings get to be overwhelming, use fixed versions instead.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Load modules from the source tree\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Packagers might want to need different settings for the RPATH related things\n\n# From experience, especially CMAKE_BUILD_WITH_INSTALL_RPATH might need to be\n\n# switched to ON, if CMake fails to set the right values during make install\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CMAKE_INSTALL_RPATH is set below\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# CMake modules\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Project custom modules\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ******************************\n\n# Dependencies\n\n# ******************************\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Setup compiler/linker flags\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ******************************\n\n# libmspack with OAB support\n\n# ******************************\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ******************************\n\n# SOUP_MESSAGE_IDEMPOTENT flag\n\n# ******************************\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ******************************\n\n# uhttpmock for tests\n\n# ******************************\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ******************************\n\n# Office365 OAuth2 support\n\n# ******************************\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ******************************\n\n# Special directories\n\n# ******************************\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# On Win32 there is no \"rpath\" mechanism. We install the private\n\n# shared libraries in $libdir, meaning the DLLs will actually be in\n\n# $bindir. This means just having $bindir in PATH will be enough.\n",
        "Line" : 218,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Generate the ${PROJECT_NAME}-config.h file\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/modules/CheckTarget.cmake" : {
      "ObjectId" : "71824a990ad4c84a3d58661da549d4e9e2735eab",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CheckTarget.cmake\n\n#\n\n# Defines a custom target 'check', which gathers test programs like 'make check'\n\n# This is taken from https://cmake.org/Wiki/CMakeEmulateMakeCheck\n\n#\n\n# What you do is to call command:\n\n# add_check_test(_name)\n\n#   where _name is the name of the test, as defined by add_executable().\n\n#   Note it is a good idea to use EXCLUDE_FROM_ALL within the add_executable().\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable this to not have verbose tests\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/CodeCoverageGCOV.cmake" : {
      "ObjectId" : "bf670e0a5977dbddaa0fa5bd89b000c66418b2ae",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CodeCoverageGCOV.cmake\n\n#\n\n# Adds options ENABLE_CODE_COVERAGE, which builds the project with\n\n# code coverage support\n\n#\n\n# It sets variables:\n\n# CODE_COVERAGE_DEFINES - to be used with target_compile_definitions() and similar\n\n# CODE_COVERAGE_CFLAGS - to be used with target_compile_options() and similar for C code\n\n# CODE_COVERAGE_CXXFLAGS - to be used with target_compile_options() and similar for C++ code\n\n# CODE_COVERAGE_LDFLAGS - to be used with target_link_libraries() and similar\n\n#\n\n# These variables should be added as the last in the options, because they change compilation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/DistTargets.cmake" : {
      "ObjectId" : "2e6f037bf10c0f3438242af384b98df906eb7119",
      "LastModified" : "2016-10-12T08:07:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DistTarget.cmake\n\n#\n\n# Defines custom targets related to distributing source code.\n\n# It requires to have populated 'PROJECT_NAME' and 'PROJECT_VERSION' variables,\n\n# possibly through the project() command. It also uses 'PROJECT_DISTCONFIGURE_PARAMS'\n\n# variable when configuring the unpacked distribution.\n\n#\n\n# Added targets:\n\n# dist - only creates a tarball\n\n# disttest - creates a tarball and 'make && make install' it to a temporary prefix\n\n#    to verify that the code can be built and installed; it also verifies\n\n#    that the first line of the NEWS file contains the same version as\n\n#    the tarball and that it claims today's date.\n\n# distcheck - similar to 'disttest', only runs also 'make check' before installing\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Filenames for tarball\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# remove any left-over directory\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# extract the tarball\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# verify the NEWS file contains what it should contain\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# create a _build sub-directory\n",
        "Line" : 43,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# configure the project with PROJECT_DISTCHECK_PARAMS\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# 'make' the project\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# 'make check' the project\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# 'make install' the project\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# if we get this far, then everything worked, thus clean up\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# and show the good news\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# 'make install' the project\n",
        "Line" : 78,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# if we get this far, then everything worked, thus clean up\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# and show the good news\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 15
    },
    "cmake/modules/EvolutionMacros.cmake" : {
      "ObjectId" : "0491e135a0c1da590980d3abe4ad2bacaf83d6d0",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EvolutionMacros.cmake\n\n#\n\n# Utility macros for evolution-related files\n\n#\n\n# add_error_files(_part _file0)\n\n#    Adds build and install rules to create .error files from .error.xml\n\n#    files in the current source directory. The _file0 is expected to be\n\n#    without the .xml extension. The macro can receive one or more error\n\n#    files. There is created a custom \"${_part}-error-files\" target.\n\n#\n\n# add_eplug_file(_part _eplug_filename)\n\n#    Adds build and install rules to create .eplug files from .eplug.xml\n\n#    files in the current source directory. The _eplug_filename is expected\n\n#    to be without the .xml extension. The macro can receive exactly one\n\n#    eplug file. There is created a custom \"${_part}-eplug-file\" target.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindIntltool.cmake" : {
      "ObjectId" : "8e223e9d7fc007071aa7b602a593032d79ecaea2",
      "LastModified" : "2018-10-30T14:56:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindIntltool.cmake\n\n#\n\n# Searches for intltool and gettext. It aborts, if anything cannot be found.\n\n# Requires GETTEXT_PO_DIR to be set to full path of the po/ directory.\n\n#\n\n# Output is:\n\n#   INTLTOOL_UPDATE  - an intltool-update executable path, as found\n\n#   INTLTOOL_EXTRACT  - an intltool-extract executable path, as found\n\n#   INTLTOOL_MERGE  - an intltool-merge executable path, as found\n\n#\n\n# and anything from the FindGettext module.\n\n#\n\n# The below provided macros require GETTEXT_PACKAGE to be set.\n\n#\n\n# intltool_add_check_potfiles_target()\n\n#    Adds a check-potfiles target, which verifies that all files with translations\n\n#    are added in the POTFILES.in file inside GETTEXT_PO_DIR. This macro can be called\n\n#    only inside GETTEXT_PO_DIR.\n\n#\n\n# intltool_add_pot_file_target()\n\n#    Creates a new target pot-file, which generates ${GETTEXT_PACKAGE}.pot file into\n\n#    the CMAKE_CURERNT_BINARY_DIR. This target is not part of ALL.\n\n#    This can be called only inside GETTEXT_PO_DIR.\n\n#\n\n# intltool_process_po_files()\n\n#    Processes all files in the GETTEXT_PO_DIR and generates .gmo files for them\n\n#    in CMAKE_CURRENT_BINARY_DIR. These are added into a new target gmo-files.\n\n#    It also installs them into proper location under LOCALE_INSTALL_DIR.\n\n#    This can be called only inside GETTEXT_PO_DIR.\n\n#\n\n# intltool_setup_po_dir()\n\n#    Shortcut to setup intltool's po/ directory by adding all custom targets\n\n#    and such. this can be called only inside GETTEXT_PO_DIR.\n\n#\n\n# intltool_merge(_in_filename _out_filename ...args)\n\n#    Adds rule to call intltool-merge. The args are optional arguments.\n\n#    This can be called in any folder, only the GETTEXT_PO_DIR should\n\n#    be properly set, otherwise the call will fail.\n\n#\n\n# add_appdata_file(_infilename _outfilename)\n\n#    A shortcut to call intltool-merge() for an appdata file and install it\n\n#    to ${SHARE_INSTALL_PREFIX}/metainfo\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/GLibTools.cmake" : {
      "ObjectId" : "d40953c4fb9f7409bf98651b42d86459f065f8ee",
      "LastModified" : "2018-10-30T14:56:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GLibTools.cmake\n\n#\n\n# Provides functions to run glib tools.\n\n#\n\n# Functions:\n\n#\n\n# glib_mkenums(_output_filename_noext _enums_header _define_name)\n\n#    runs glib-mkenums to generate enumtypes .h and .c files from _enums_header.\n\n#    It searches for files in the current source directory and exports to the current\n\n#    binary directory.\n\n#\n\n#    An example call is:\n\n#        glib_mkenums(camel-enumtypes camel-enums.h CAMEL_ENUMTYPES_H)\n\n#        which uses camel-enums.h as the source of known enums and generates\n\n#        camel-enumtypes.h which will use the CAMEL_ENUMTYPES_H define\n\n#        and also generates camel-enumtypes.c with the needed code.\n\n#\n\n# glib_genmarshal(_output_filename_noext _prefix _marshallist_filename)\n\n#    runs glib-genmarshal to process ${_marshallist_filename} to ${_output_filename_noext}.c\n\n#    and ${_output_filename_noext}.h files in the current binary directory, using\n\n#    the ${_prefix} as the function prefix.\n\n#\n\n# gdbus_codegen(_xml _interface_prefix _c_namespace _files_prefix _list_gens)\n\n#    runs gdbus-codegen to generate GDBus code from _xml file description,\n\n#    using _interface_prefix, _c_namespace and _files_prefix as arguments.\n\n#    The _list_gens is a list variable are stored expected generated files.\n\n#\n\n#    An example call is:\n\n#        set(GENERATED_DBUS_LOCALE\n\n#               e-dbus-localed.c\n\n#\t        e-dbus-localed.h\n\n#        )\n\n#        gdbus_codegen(org.freedesktop.locale1.xml org.freedesktop. E_DBus e-dbus-localed GENERATED_DBUS_LOCALE)\n\n#\n\n# gdbus_codegen_custom(_xml _interface_prefix _c_namespace _files_prefix _list_gens _args)\n\n#    The same as gdbus_codegen() except allows to pass other arguments to the call,\n\n#    like for example --c-generate-object-manager\n\n#\n\n# add_gsettings_schemas(_target _schema0 ...)\n\n#    Adds one or more GSettings schemas. The extension is supposed to be .gschema.xml. The schema file generation\n\n#    is added as a dependency of _target.\n\n#\n\n# glib_compile_resources _sourcedir _outputprefix _cname _inxml ...deps)\n\n#    Calls glib-compile-resources as defined in _inxml and using _outputprefix and_cname as other arguments\n\n#    beside _sourcedir. The optional arguments are other dependencies.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this is required to compile gsettings schemas like after 'make install,\n\n# because there is no better way in CMake to run a code/script after\n\n# the whole `make install`\n",
        "Line" : 226,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# Do both, to have 'uninstall' working properly\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Compile gsettings schemas and ensure that all of them are in the place.\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This is called too early, when the schemas are not installed yet during `make install`\n\n#\n\n# compile_gsettings_schemas()\n\n#    Optionally (based on ENABLE_SCHEMAS_COMPILE) recompiles schemas at the destination folder\n\n#    after install. It's necessary to call it as the last command in the toplevel CMakeLists.txt,\n\n#    thus the compile runs when all the schemas are installed.\n\n#\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/PkgConfigEx.cmake" : {
      "ObjectId" : "866fe7c0749e726f8e57870d19597ef9838db040",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PkgConfigEx.cmake\n\n#\n\n# Extends CMake's PkgConfig module with commands:\n\n#\n\n# pkg_check_modules_for_option(_option_name _option_description _prefix _module0)\n\n#\n\n#    which calls `pkg_check_modules(_prefix _module0)` and if <_prefix>_FOUND is False,\n\n#    then prints an error with a hint to disaable the _option_name if needed.\n\n#\n\n# pkg_check_exists(_output_name _pkg)\n\n#\n\n#    calls pkg-config --exists for _pkg and stores the result to _output_name.\n\n#\n\n# pkg_check_at_least_version(_output_name _pkg _version)\n\n#\n\n#    calls pkg-config --at-least-version=_version for _pkg and stores the result to _output_name.\n\n#\n\n# pkg_check_exact_version(_output_name _pkg _version)\n\n#\n\n#    calls pkg-config --exact-version=_version for _pkg and stores the result to _output_name.\n\n#\n\n# pkg_check_variable(_output_name _pkg _name)\n\n#\n\n#    gets a variable named _name from package _pkg and stores the result into _output_name\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Negate the result, because 0 means 'found'\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Negate the result, because 0 means 'found'\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Negate the result, because 0 means 'found'\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/modules/PrintableOptions.cmake" : {
      "ObjectId" : "23ce356991d2761a6bd803b1ae19af6d5f560760",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PrintableOptions.cmake\n\n#\n\n# Provides functions to manage printable otpions,\n\n# which can be printed at the end of the configuration\n\n#\n\n# add_printable_variable_bare(_name)\n\n#    adds variable named _name to the list of prinable options\n\n#\n\n# add_printable_option(_name _description _default_value)\n\n#    the same as option() commnd, only also notes this option for later printing\n\n#\n\n# add_printable_variable(_name _description _default_value)\n\n#    sets a new cached STRING variable and adds it to the list of printable options\n\n#\n\n# add_printable_variable_path(_name _description _default_value)\n\n#    sets a new cached PATH variable and adds it to the list of printable options\n\n#\n\n# print_build_options()\n\n#    prints all the build options previously added with the above functions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/SetupBuildFlags.cmake" : {
      "ObjectId" : "284445455a79a98a342958077129e035a916b829",
      "LastModified" : "2019-04-02T14:06:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SetupBuildFlags.cmake\n\n#\n\n# Setups compiler/linker flags, skipping those which are not supported.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/UninstallTarget.cmake" : {
      "ObjectId" : "7ccfcf39476a8ad9c3cb3e1e42395bd440ff40fa",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UninstallTarget.cmake\n\n#\n\n# Defines a custom target named 'uninstall'\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "9e81642a72ed308831aec05fcd05bae11775fb05",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "5b514ee3151bee1c51d7b97c8ab3444fe99afe08",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/addressbook/CMakeLists.txt" : {
      "ObjectId" : "9852fb32fed20d63ae0f788b69d005db6a53426e",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ******************************\n\n# Internal test programs\n\n# ******************************\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# **************************************************************\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "src/calendar/CMakeLists.txt" : {
      "ObjectId" : "fff441f5ca592a01b7867b57a92e7d3b926266a4",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/camel/CMakeLists.txt" : {
      "ObjectId" : "469eb0f984795556dc3aa2846546081a9905352b",
      "LastModified" : "2017-01-13T13:06:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# *************************************************\n\n# Installed private library which can be linked to\n\n# *************************************************\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# *************************************************\n\n# Provider module\n\n# *************************************************\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/collection/CMakeLists.txt" : {
      "ObjectId" : "b8aaa16fe94ad482c266c0c3d69191e0e8a75394",
      "LastModified" : "2016-10-10T13:49:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/configuration/CMakeLists.txt" : {
      "ObjectId" : "76779bb9fdc47d4c32205dafb44eb99a75569d72",
      "LastModified" : "2018-10-30T14:56:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/server/CMakeLists.txt" : {
      "ObjectId" : "e33acefb57cba97928d3675fc41be866bdca8cbc",
      "LastModified" : "2018-10-30T14:56:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "378b8d24b1fc2adc7cc1af66cdf98820f70d5fd7",
      "LastModified" : "2016-10-13T18:01:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 20
  },
  "ElapsedTime" : 1453
}