{
  "Repository" : "25396781",
  "Revision" : "HEAD",
  "ObjectId" : "6b781c2471abc47fbd6a325cb95c5a1195369fe5",
  "CommitTime" : "2018-05-24T16:00:25Z",
  "Files" : {
    "bootstrap/CMakeLists.txt" : {
      "ObjectId" : "da13ad105746727bdb67a05a40c641252ede1cf9",
      "LastModified" : "2017-10-22T16:35:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for information related to nany, see settings.txt\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for beauty\n",
        "Line" : 41,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 3
    },
    "bootstrap/cmake/arch-platform.cmake" : {
      "ObjectId" : "3b0895a48b49c08c645bb34836bd3b69bc45e20b",
      "LastModified" : "2017-04-03T16:28:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Architecture\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add check for arm here\n\n# see http://msdn.microsoft.com/en-us/library/b0084kay.aspx\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Underlying platform\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "bootstrap/cmake/build-settings.cmake" : {
      "ObjectId" : "ce9c75bf7779c6e27b771795ae3d20a2d4c3704a",
      "LastModified" : "2018-05-24T14:49:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# do not append a metadata when compiled from a tag\n",
        "Line" : 20,
        "CharPositionInLine" : 3
      },
      "1" : {
        "Text" : "# release by default\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# for beauty (and to find it easily)\n",
        "Line" : 72,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# warning: nested namespace definition is a C++1z extension\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "bootstrap/cmake/compilation-database.cmake" : {
      "ObjectId" : "ce0eaf2a3a11a253188b57d0e4cd2c8bcf2ff974",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bootstrap/cmake/cpack.cmake" : {
      "ObjectId" : "ed72851418b6ef8ddfebbb8c6823d438bdcce864",
      "LastModified" : "2017-04-03T16:28:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bootstrap/cmake/grammar.cmake" : {
      "ObjectId" : "17a5c5608a89b7afc9d3c838eb6051483f414f6c",
      "LastModified" : "2017-04-03T16:28:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bootstrap/cmake/libdyncall.cmake" : {
      "ObjectId" : "db3c4b7dc682e72682e918df2b4506c363399fd1",
      "LastModified" : "2017-04-03T16:28:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DynCALL does not like SAFESEH on Windows x86\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# -- dyncall - (Generic Dynamic FFI package / http://www.dyncall.org/)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bootstrap/cmake/libyuni.cmake" : {
      "ObjectId" : "a9fc6c3249ce74e6d8cb390213205901e2b3e28b",
      "LastModified" : "2017-04-04T12:09:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compilation Flags\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# linking issues with LTO currently\n\n#set(extra_flags_release \"${extra_flags_release} -flto\")\n\n#set(CMAKE_STATIC_LINKER_FLAGS_RELEASE}\" ${CMAKE_STATIC_LINKER_FLAGS_RELEASE} -flto\")\n\n#set(CMAKE_SHARED_LINKER_FLAGS_RELEASE}\" ${CMAKE_SHARED_LINKER_FLAGS_RELEASE} -flto\")\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "bootstrap/cmake/messages.cmake" : {
      "ObjectId" : "2f37a4b4c0fd8f26760c330fb2f3480c0cacfd63",
      "LastModified" : "2017-04-04T12:09:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bootstrap/cmake/package-deb.cmake" : {
      "ObjectId" : "38ea94a37bfbcf5c97afbff186086ca3a889d170",
      "LastModified" : "2017-10-22T16:35:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bootstrap/cmake/utils.cmake" : {
      "ObjectId" : "9db1eb7b73f5652918649818c34b76e4472e9caa",
      "LastModified" : "2017-04-03T16:28:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bootstrap/cmake/you-complete-me.vim.template.cmake" : {
      "ObjectId" : "cd59610af94cee73d024e2439500765e0b236cec",
      "LastModified" : "2017-04-03T16:28:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is NOT licensed under the GPLv3, which is the license for the rest\n\n# of YouCompleteMe.\n\n#\n\n# Here's the license text for this file:\n\n#\n\n# This is free and unencumbered software released into the public domain.\n\n#\n\n# Anyone is free to copy, modify, publish, use, compile, sell, or\n\n# distribute this software, either in source code form or as a compiled\n\n# binary, for any purpose, commercial or non-commercial, and by any\n\n# means.\n\n#\n\n# In jurisdictions that recognize copyright laws, the author or authors\n\n# of this software dedicate any and all copyright interest in the\n\n# software to the public domain. We make this dedication for the benefit\n\n# of the public at large and to the detriment of our heirs and\n\n# successors. We intend this dedication to be an overt act of\n\n# relinquishment in perpetuity of all present and future rights to this\n\n# software under copyright law.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n\n# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\n# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#\n\n# For more information, please refer to <http://unlicense.org/>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These are the compilation flags that will be used in case there's no\n\n# compilation database set (by default, one is not set).\n\n# CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# THIS IS IMPORTANT! Without a \"-std=<something>\" flag, clang won't know which\n\n# language to use when compiling headers. So it will guess. Badly. So C++\n\n# headers will be compiled as C headers. You don't want that so ALWAYS specify\n\n# a \"-std=<something>\".\n\n# For a C project, you would set this to something like 'c99' instead of\n\n# 'c++11'.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ...and the same thing goes for the magic -x option which specifies the\n\n# language that the files to be compiled are written in. This is mostly\n\n# relevant for c++ headers.\n\n# For a C project, you would set this to 'c' instead of 'c++'.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This path will only work on OS X, but extra paths that don't exist are not\n\n# harmful\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set this to the absolute path to the folder (NOT the file!) containing the\n\n# compile_commands.json file to use that instead of 'flags'. See here for\n\n# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html\n\n#\n\n# You can get CMake to generate this file for you by adding:\n\n#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )\n\n# to your CMakeLists.txt file.\n\n#\n\n# Most projects will NOT need to set this to anything; you can just change the\n\n# 'flags' list of compilation flags. Notice that YCM itself uses that approach.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The compilation_commands.json file generated by CMake does not have entries\n\n# for header files. So we do our best by asking the db for flags for a\n\n# corresponding source file, if any. If one exists, the flags for that file\n\n# should be good enough.\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Bear in mind that compilation_info.compiler_flags_ does NOT return a\n\n# python list, but a \"list-like\" StringVec object\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# NOTE: This is just for YouCompleteMe; it's highly likely that your project\n\n# does NOT need to remove the stdlib flag. DO NOT USE THIS IN YOUR\n\n# ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "bootstrap/cmake/yuni-profilebuild-template.cmake" : {
      "ObjectId" : "c8348307368ec28a6c1b65f291204ad06c099ed5",
      "LastModified" : "2017-04-03T16:28:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Profile \n\n#  Everything related to this particular profile\n\n###############################################################################\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Profile name\n\n# FIXME: Document usage.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# Environment\n\n#  Compilers, program search paths, everything about your system.\n\n###############################################################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# YUNI_MACPORTS_PREFIX\n\n# Mac-specific: MacPorts path. When you specify \"macports\" in a package search,\n\n# this prefix is used.\n\n# \n\n# Default: Prefix of the first «port» program found in PATH.\n\n# Should be /opt/local in the most common case.\n\n# \n\n#set(YUNI_MACPORTS_PREFIX \"/my/twisted/macports/prefix\")\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################\n\n# Target\n\n#  What is produced, and everything related to it.\n\n###############################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# YUNI_TARGET\n\n# Specifies the compilation profile. Accepted values are:\n\n# - debug: No optimization, debug info, very slow.\n\n# - release: O3 optimization level, no debug, production code.\n\n# \n\n# Default: debug\n\n#\n\n#set(YUNI_TARGET \"debug\")\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# MODULES\n\n# Specifies which Yuni components should be build.\n\n# Uncomment the following line to override the module list\n\n# Example : `ui,scripts,-net`\n\n# Note : `cmake -DMODULES=help` to have a list of all available modules\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###############################################################################\n\n# External packages\n\n#\n\n# A module often requires one or more external packages (`lua` for example).\n\n# Most of the time the system has its own package management utility, which\n\n# will provide all needed and up-to-date packages (`lua`, `libxml`...).\n\n# It is not always the case (Windows for example), so some pre-built packages\n\n# (DevPacks) are available on http://devpacks.libyuni.org and can be\n\n# automatically downloaded.\n\n#\n\n# Several modes can be given in the preferred order to find and use the\n\n# appropriate package. If nothing suits your needs, it is possible to use the\n\n# `custom` mode and to set the prefix path where the package can be found.\n\n# This is useful if you have special needs or wish to integrate Yuni in an\n\n# software that already uses the package.\n\n#\n\n# Generic modes :\n\n#\n\n#    disabled: Do as if the particular package could not be found.\n\n#              Implemented only for certain packages providing optional support.\n\n#\n\n#    system  : Try to use the standard way to find the package provided by the system\n\n#              Standard paths, System Frameworks (OS X)\n\n#\n\n#    custom  : Try to find the package from a custom prefix path\n\n#              The variable `YUNI_DvP_<pkg>_PREFIX` must be set.\n\n#              Other variables may need to be set, on a per-package\n\n#              basis\n\n#\n\n#    macport : Try to find the package from a macport installation (Mac OS X)\n\n#              (http://www.macports.org)\n\n#\n\n#    devpack : Download and use the pre-build package from `devpacks.libyuni.org`\n\n#              This is the recommended way on Windows, and when you want to have\n\n#              a known-working build.\n\n#\n\n# NOTE: Each package is not required to support every mode. Available modes are speci\n\n#\n\n# Example :\n\n# Use `lua` compiled by hand, installed in `/opt/lua` (/opt/lua/include and `/opt/lua/lib`) :\n\n#   Set(YUNI_DvP_LUA_MODE custom)\n\n#   Set(YUNI_DvP_LUA_PREFIX \"/opt/lua\")\n\n#\n\n###############################################################################\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Core\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# PThread [FIXME: NOT IMPLEMENTED]\n\n# Provides: Threads, locking, synchronisation\n\n# Modes: system\n\n# Required for Core module.\n\n#set(YUNI_DvP_PTHREAD_MODE     system)\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Audio\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ZLIB [FIXME: NOT IMPLEMENTED]\n\n# Provides: GZip compression support\n\n# Modes: system, custom\n\n# Required for Audio module.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# OpenAL\n\n# Provides: Audio abstraction layer.\n\n# Modes: system, devpack, custom\n\n# Required for Audio module.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Scripts\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Lua (+script,+lua)\n\n# Provides: Lua scripting support\n\n# Modes: devpack, system, macports, custom\n\n# Optional.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###############################################################################\n\n# Platform-specific options\n\n###############################################################################\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# For building universal binaries on OS X\n\n# Value by default : i686;x86_64\n\n#set(YUNI_MACOX_UNIVERSAL_BINARIES  \"ppc;ppc64;i386;x86_64\")\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "###############################################################################\n\n# Miscellaneous build options\n\n#  Options that concern small features, tweaks or optimisations\n\n###############################################################################\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Auto-Compile yuni-config from CMake\n\n# Enable this option to automatically compile yuni-config from CMake\n\n# FIXME: Describe when this could be useful.\n\n#set(YUNI_AUTO_COMPILE_YUNI_CONFIG  false)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Special instructions sets\n\n# The following options enable or disable certain CPU optimisations.\n\n# If you have to run on platforms that do not support certain options,\n\n# we recommend to disable them.\n\n# Options:\n\n#  auto  : Auto detect if these sets can be used (based on build host)\n\n#  no    : Completely disable it\n\n#  yes   : Try to use it anyways (it may not even compile, though)\n\n#\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# MMX\n\n# 3DNow!\n\n# SSE\n\n# SSE2 (depends on SSE)\n\n# SSE3 (depends on SSE2)\n\n# SSE4 (depends on SSE3)\n\n# SSE4a (depends on SSE3)\n\n# SSE 4.1 (depends on SSE3)\n\n# SSE 4.2 (depends on SSE3)\n",
        "Line" : 161,
        "CharPositionInLine" : 38
      },
      "21" : {
        "Text" : "# yuni-config\n\n# Enable this option to skip the build of yuni-config\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Custom C/C++ Flags\n\n#\n\n# Advanced users only : it may not a good idea to use your own CFlags\n\n# for compiling the Yuni library. Do not file any bug reports before re-testing\n\n# with standard build-flags.\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Uncomment the following line to ADD some C++ compiler flags\n\n#set(YUNI_CXX_FLAGS_OVERRIDE_ADD_DEBUG          \"-Wextra\")\n\n#set(YUNI_CXX_FLAGS_OVERRIDE_ADD_RELEASE        \"-Wextra\")\n\n#set(YUNI_CXX_FLAGS_OVERRIDE_ADD_RELWITHDEBINFO \"-Wextra\")\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Uncomment the following line to OVERRIDE the C++ compiler flags\n\n# This is not recommended.\n\n#set(YUNI_CXX_FLAGS_OVERRIDE_DEBUG          \"-g -ggdb -Wall -Wextra\")\n\n#set(YUNI_CXX_FLAGS_OVERRIDE_RELEASE        \"-g -ggdb -Wall -Wextra\")\n\n#set(YUNI_CXX_FLAGS_OVERRIDE_RELWITHDEBINFO \"-g -ggdb -Wall -Wextra\")\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# That's all, folks ! #########################################################\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "bootstrap/libnanyc/CMakeLists.txt" : {
      "ObjectId" : "76b28a392a3d8acad5de059534cdae7af63063ef",
      "LastModified" : "2017-11-04T06:37:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate nsl:std.core\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 319,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "bootstrap/libnanyc/cmake/configure-config.h.cmake" : {
      "ObjectId" : "e68db666cc637f2e547bc051e73c619db04e44a9",
      "LastModified" : "2017-11-17T13:42:55Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n** ny - https://nany.io\n** This Source Code Form is subject to the terms of the Mozilla Public\n** License, v. 2.0. If a copy of the MPL was not distributed with this\n** file, You can obtain one at http://mozilla.org/MPL/2.0/.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* NOTE: this file is generated by cmake */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "//! The maximum number of nested namespaces",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "//! Maximum number of parameters when declaring a function",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "//! Maximum length for a symbol name",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/*zero-terminated*/",
        "Line" : 20,
        "CharPositionInLine" : 55
      },
      "6" : {
        "Text" : "//! Maxmimum number of pushed parameters for calling a function",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "//! Remove redundant dbg info (line,offset) in opcode programs",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "//! Size that should be added to any ny objects\n// (reference counter)",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "//! Import the NSL",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "// ny::config",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "/* vim: set ft=cpp: */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "bootstrap/libnanyc/cmake/configure-traces.h.cmake" : {
      "ObjectId" : "4b00e4b40ea96bd78b885c1ff1696b8f9313ae00",
      "LastModified" : "2018-02-19T06:44:26Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n** ny - https://nany.io\n** This Source Code Form is subject to the terms of the Mozilla Public\n** License, v. 2.0. If a copy of the MPL was not distributed with this\n** file, You can obtain one at http://mozilla.org/MPL/2.0/.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* NOTE: this file is generated by cmake */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "//! Enable all traces (very verbose)",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "//! Print all AST",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "//! Print AST before normalization",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "//! Print AST after normalization",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "//! Print ATOM table",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "//! Print ATOM table",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "//! Print all types",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "//! Print classdef table",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "//! Print opcodes generated from AST",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "//! Print opcodes after program instanciation",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "//! Additionnal traces for properties resolution",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "//! Export all raised errors per atom",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "// ny::config::traces",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "// vim: set ft=cpp:",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "bootstrap/libnanyc/cmake/configure-version.h.cmake" : {
      "ObjectId" : "cbfa99a9844db20d8229636fc41a1e3367d1d7bf",
      "LastModified" : "2017-11-17T13:42:55Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n** Nany - https://nany.io\n** This Source Code Form is subject to the terms of the Mozilla Public\n** License, v. 2.0. If a copy of the MPL was not distributed with this\n** file, You can obtain one at http://mozilla.org/MPL/2.0/.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* NOTE: this file is generated by cmake */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/*! Nany default website */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/*! C++ compiler */",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/*! Nany version version major */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/*! Nany version version minor */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/*! Nany version version patch */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/*! Nany version prerelease */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/*! Nany version metadata */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/*! Nany version string */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* vim: set ft=cpp: */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "bootstrap/src/CMakeLists.txt" : {
      "ObjectId" : "0413dbb80885bf78029859968f0122d7cc1eb81a",
      "LastModified" : "2017-11-17T13:42:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### nanyc\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### nanyc-unittest\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### nanyc-dump-ast\n\n# note: this executable does not rely on `libnanyc` library on purpose\n\n# (if something goes wrong with libnanyc, it might be essential to simply print the input AST)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# nanyc-dump-ast does not use libnanyc (on purpose)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### nanyc-check-syntax\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "bootstrap/tools/CMakeLists.txt" : {
      "ObjectId" : "c5f2e6857d2c60c2b85e62f3b3ab972caa5789f7",
      "LastModified" : "2017-11-17T13:42:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/nsl/nsl.cmake" : {
      "ObjectId" : "5ca34d37f64ffbe471c7ace07037b17b7469800a",
      "LastModified" : "2017-11-17T13:42:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Standard Library (NSL) for Nany C++/Bootstrap\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "CMAKESOURCE" : 3
  },
  "ElapsedTime" : 812
}