{
  "Repository" : "60097785",
  "Revision" : "HEAD",
  "ObjectId" : "02eb361704eeea519a1cb600cc8562ce839966d2",
  "CommitTime" : "2019-02-10T03:33:02Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "38ebd75317b42a9ebb3c19467b673eb3a3365302",
      "LastModified" : "2019-01-23T11:36:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Root CMake file for SEIMS.\n\n#     Spatially Explicit Integrated Modeling System\n\n#\n\n#     Please from the off-tree build directory, invoke:\n\n#       $ cmake <path/to/SEIMS>\n\n#\n\n#  Routine testing platforms and compilers include:\n\n#     1. Windows 10 with Visual Studio 2010/2013, mongo-c-driver-1.5.5, GDAL-1.11.4\n\n#     2. Windows 10 with mingw64 (GCC-8.2.0), mongo-c-driver-1.6.1, GDAL-2.3.2\n\n#     3. CentOS 6.2 (cluster) with GCC-4.8.4, mongo-c-driver-1.5.5, GDAL-1.9.0\n\n#     4. Red Hat Server 6.2 (cluster) with ICC-12.1.0, mongo-c-driver-1.6.1, GDAL-1.11.5 (Without UnitTest)\n\n#     5. macOS 10.12.6 with Clang-8.0 (or GCC-4.9.3), mongo-c-driver-1.5.5, GDAL-1.11.4\n\n#\n\n#  Created and maintained by Liangjun Zhu (zlj@lreis.ac.cn)\n\n#  Latest updated: Nov. 14, 2018\n\n#\n\n#  Copyright (C) 2013-2018 Lreis, IGSNRR, CAS, and NJNU\n\n# ----------------------------------------------------------------------------\n\n### Disable in-source builds to prevent source tree corruption.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Set coding language\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### SEIMS Version.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Build Postfix\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Set cmake find path\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### Find MPI which is required\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### Find OMP which is optional\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### Set default or specified installation directory.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "### Allow project folders in MSVC and Xcode.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "### OS platform.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### Break in case of popular CMake configuration mistakes.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Global flag to cause add_library to create shared libraries if on, otherwise static library.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# libraries built with hunter link against the dynamic CRT on windows\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build documatation by doxygen\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "### Detect compiler and target platform architecture.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "### Use statically or dynamically linked CRT? Default: dynamic\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### Add standard paths or specified paths for Find libraries and headers.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "### Find GDAL which is required.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "### Set specific packages.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "### Bson and MongoC.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "### Add subdirectories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ADD_SUBDIRECTORY(./gui)  # TODO\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "### Build platform.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "### C/C++ options.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "### Dependencies.\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "### Auxiliary.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "cmake/AddFindPaths.cmake" : {
      "ObjectId" : "dce70683f903b80807f6af2ae6cdd3f625020f5b",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Add standard paths or specified paths for Find libraries and headers.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add these standard paths to the search paths for FIND_PATH\n\n# to find include files from these locations first\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CRTLinkage.cmake" : {
      "ObjectId" : "6be220bf1bf3154d237ef81a8970233058695ee1",
      "LastModified" : "2019-01-23T11:44:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Removing LNK4075 warnings for debug WinRT builds\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF' specification\"\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:REF' specification\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Optional verification checks since we don't know existing contents of variables below\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Mandatory\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Ignore warning: This object file does not define any previously undefined public symbols, ...\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/CodeCoverage.cmake" : {
      "ObjectId" : "f63ca5329579989f442da6c1c18279693fe31d95",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2017, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# CHANGES:\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# 2016-02-03, Lars Bilke\n\n# - Refactored functions to use named parameters\n\n#\n\n# 2017-06-02, Lars Bilke\n\n# - Merged with modified version from github.com/ufz/ogs\n\n#\n\n#\n\n# USAGE:\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      include(CodeCoverage)\n\n#\n\n# 3. Append necessary compiler flags:\n\n#      APPEND_COVERAGE_COMPILER_FLAGS()\n\n#\n\n# 4. If you need to exclude additional directories from the report, specify them\n\n#    using the COVERAGE_EXCLUDES variable before calling SETUP_TARGET_FOR_COVERAGE.\n\n#    Example:\n\n#      set(COVERAGE_EXCLUDES 'dir1/*' 'dir2/*')\n\n#\n\n# 5. Use the functions described below to create a custom make target which\n\n#    runs your test executable and produces a code coverage report.\n\n#\n\n# 6. Build a Debug build:\n\n#      cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#      make\n\n#      make my_coverage_target\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Defines a target for running and collection code coverage information\n\n# Builds dependencies, runs the given executable and outputs reports.\n\n# NOTE! The executable should always have a ZERO as exit code otherwise\n\n# the coverage generation will not complete.\n\n#\n\n# setup_target_for_coverage(\n\n#     NAME testrunner_coverage                    # New target name\n\n#     EXECUTABLE testrunner -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR\n\n#     DEPENDENCIES testrunner                     # Dependencies to build first\n\n# )\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 143,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 147,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Setup target\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Run tests\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# setup_target_for_coverage\n",
        "Line" : 175,
        "CharPositionInLine" : 14
      },
      "13" : {
        "Text" : "# append_coverage_compiler_flags\n",
        "Line" : 181,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 14
    },
    "cmake/DetectCXXCompiler.cmake" : {
      "ObjectId" : "3bfce2acdffbf201659d5bbd5c4dff25acf1ccad",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect Microsoft compiler:\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect Intel ICC compiler -- for -fPIC in 3rdparty ( UNIX ONLY ):\n\n# NOTE: The system needs to determine if the '-fPIC' option needs to be added\n\n#  for the 3rdparty static libs being compiled.  The CMakeLists.txt files\n\n#  in 3rdparty use the CMAKE_COMPILER_IS_ICC definition being set here to determine if\n\n#  the -fPIC flag should be used.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect and set architecture:\n\n#\n\n#   ${CMAKE_CXX_COMPILER} -dumpmachine examples:\n\n#     in Windows 10, ming64 bash: x86_64-w64-mingw32\n\n#     in CentOS 6.2: x86_64-redhat-linux\n\n#     in macOS 10.12.6: x86_64-apple-darwin16.7.0\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disables the use of the global variable errno\n\n# for math functions that represent a single floating-point instruction.\n\n# Not sure if this is safe and needed. ljzhu\n\n#IF(CMAKE_COMPILER_IS_GNUCXX)\n\n#  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ffast-math\")\n\n#  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ffast-math\")\n\n#ENDIF()\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Workaround for 32-bit operating systems on 64-bit x86_64 processor\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Fix handling of duplicated files in the same static library:\n\n# https://public.kitware.com/Bug/view.php?id=14874\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# refers to https://github.com/biicode/client/issues/10\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/DownloadProject.cmake" : {
      "ObjectId" : "e300f42658a532b948852e6d92e43f1fd7c2374e",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved MIT License.  See accompanying\n\n# file LICENSE or https://github.com/Crascit/DownloadProject for details.\n\n#\n\n# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(DownloadProject)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be.\n\n# The prefix must always be an absolute path.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The way that CLion manages multiple configurations, it causes a copy of\n\n# the CMakeCache.txt to be copied across due to it not expecting there to\n\n# be a project within a project.  This causes the hard-coded paths in the\n\n# cache to be copied and builds to fail.  To mitigate this, we simply\n\n# remove the cache if it exists before we configure the new project.  It\n\n# is safe to do so because it will be re-generated.  Since this is only\n\n# executed at the configure step, it should not cause additional builds or\n\n# downloads.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n\n# Make sure to pass through CMAKE_MAKE_PROGRAM in case the main project\n\n# has this set to something not findable on the PATH.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/FindBson.cmake" : {
      "ObjectId" : "13990fd231d2a0a1f74b6fa641e735d0c02000a8",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module accepts the following environment variables:\n\n#\n\n#   BSON_DIR, BSON_ROOT, or BSON_ROOT_DIR - Specify the location of BSON\n\n#\n\n# Read-Only variables:\n\n#  BSON_FOUND - system has the BSON library\n\n#  BSON_INCLUDE_DIR - the BSON include directory\n\n#  BSON_LIBRARIES - The libraries needed to use BSON\n\n#  BSON_DLLS - The dynamic libraries needed to run BSON program on Windows\n\n#  BSON_VERSION - This is set to $major.$minor.$revision$path (eg. 0.4.1)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bother supporting this?\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/FindMongoC.cmake" : {
      "ObjectId" : "1dd87bb5844d10c8d6beaf85706c3a9469e0c1da",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module accepts the following environment variables:\n\n#\n\n#   MONGOC_DIR, MONGOC_ROOT, or MONGOC_ROOT_DIR - Specify the location of MONGOC\n\n#\n\n# Read-Only variables:\n\n#  MONGOC_FOUND - system has the MONGOC library\n\n#  MONGOC_INCLUDE_DIR - the MONGOC include directory\n\n#  MONGOC_LIBRARIES - The libraries needed to use MONGOC\n\n#  MONGOC_DLLS - The dynamic libraries needed to run MONGOC program on Windows\n\n#  MONGOC_VERSION - This is set to $major.$minor.$revision$path (eg. 0.4.1)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bother supporting this?\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/SetFlagGDAL.cmake" : {
      "ObjectId" : "d4ede832850e4c123db6f40c5a98af936f4c72c5",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### GDAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fixup GDAL variable.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On Windows, find_package always selects the release dll named\n\n# libgdal.dll. This is a symbolic links which trips the linker. Also,\n\n# for debug builds, we want to link against the debug library.\n\n# Before fixing this, verify that the variable contains a single string\n\n# and that the name is libgdal.dll. The CMake module may be fixed at\n\n# some point.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/SetFlagMPI.cmake" : {
      "ObjectId" : "ba10d31557da6482182cb6555a5c3ddf1e22a38d",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### MPI\n\n# currently, for mingw64 on Windows, you must specify MPI_LIBRARIES and DMPI_INCLUDE_PATH through CMake command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# using regular Clang or AppleClang\n",
        "Line" : 10,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : "# fix: Xcode ld error: framework not found gdal.\n",
        "Line" : 12,
        "CharPositionInLine" : 56
      },
      "3" : {
        "Text" : "# Select flags for ICC, refers to https://software.intel.com/en-us/articles/intel-cluster-toolkit-for-linux-error-when-compiling-c-aps-using-intel-mpi-library-compilation-driver-mpiicpc\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/SetFlagOpenMP.cmake" : {
      "ObjectId" : "f0bb1405be3ad99973d3eefe8c215d3f92b77317",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### OpenMP, FIND_PACKAGE(OpenMP) MUST be invoked before.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "ba55631ddf1e9da20370e6d88bd3c8fd26abaff4",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clears all passed variables\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# nothing\n",
        "Line" : 15,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# CMP0056 do this on new CMake\n",
        "Line" : 50,
        "CharPositionInLine" : 75
      },
      "3" : {
        "Text" : "# Debugging function\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#geo_debug_message(\"Preserve old value for ${VAR}: ${${VAR}}\")\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Search packages for the host system instead of packages for the target system\n\n# in case of cross compilation these macros should be defined by the toolchain file\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# assert macro\n\n# Note: it doesn't support lists in arguments\n\n# Usage samples:\n\n#   geo_assert(MyLib_FOUND)\n\n#   geo_assert(DEFINED MyLib_INCLUDE_DIRS)\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  string(REPLACE \";\" \" \" __msg \"${ARGN}\")\n\n#  message(STATUS \"${__msg}\")\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Assume that we receive paths\n",
        "Line" : 178,
        "CharPositionInLine" : 47
      },
      "9" : {
        "Text" : "#message(STATUS \"'${P1}' '${P2_}' => '${${result_var}}'\")\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# adds include directories in such a way that directories from the repository source tree go first\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# workaround for GCC 6.x bug\n",
        "Line" : 225,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# GNU\n",
        "Line" : 244,
        "CharPositionInLine" : 65
      },
      "13" : {
        "Text" : "# GNU\n",
        "Line" : 245,
        "CharPositionInLine" : 59
      },
      "14" : {
        "Text" : "# GNU\n\n# Clang\n\n# MSVC\n\n# MSVC, any lang\n\n# Intel\n\n# HP\n\n# SunPro\n\n# XL\n",
        "Line" : 246,
        "CharPositionInLine" : 48
      },
      "15" : {
        "Text" : "# AIX (';' is replaced with ',')\n",
        "Line" : 254,
        "CharPositionInLine" : 57
      },
      "16" : {
        "Text" : "# PGI\n\n# Open64\n",
        "Line" : 255,
        "CharPositionInLine" : 48
      },
      "17" : {
        "Text" : "# turns off warnings\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Provides an option that the user can optionally select.\n\n# Can accept condition to control when option is available for user.\n\n# Usage:\n\n#   option(<option_variable> \"help string describing the option\" <initial value or boolean expression> [IF <condition>])\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Usage: geo_append_build_options(HIGHGUI FFMPEG)\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Usage is similar to CMake 'pkg_check_modules' command\n\n# It additionally controls HAVE_${define} and ${define}_${modname}_FOUND variables\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Macro that checks if module has been installed.\n\n# After it adds module to build and define\n\n# constants passed as second arg\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Guard CMake standalone invocations\n",
        "Line" : 455,
        "CharPositionInLine" : 27
      },
      "23" : {
        "Text" : "# Status report function.\n\n# Automatically align right column and selects text based on condition.\n\n# Usage:\n\n#   status(<text>)\n\n#   status(<heading> <value1> [<value2> ...])\n\n#   status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOT DEFINED CMAKE_ARGC\n",
        "Line" : 519,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# remove all matching elements from the list\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# stable & safe duplicates removal macro\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# safe list reversal macro\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# safe list sorting macro\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# add prefix to each item in the list\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add suffix to each item in the list\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# gets and removes the first element from the list\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# convert list of paths to full paths\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# convert list of paths to libraries names without lib prefix\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# read set of version defines from the header file\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# read single version define from the header file\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 675,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# read single version info from the pkg file\n",
        "Line" : 688,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "7e31374acea418632df105ab260f90c555d8e011",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# list(APPEND MARKDOWN_DOC ${CMAKE_CURRENT_LIST_DIR}/../README.md)\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "seims/CMakeLists.txt" : {
      "ObjectId" : "1ead9ec88ebe03eb1c937f1697ffbcb940cc322d",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Use MongoDB as database if available\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############  Set CCGL               ###############\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############  Stand-alone programs   ###############\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### unit test is an optional configuration.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "############  step into subdirectories   #############\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### For CLion to implement the \"make install\" command\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "seims/src/ccgl/CMakeLists.txt" : {
      "ObjectId" : "5d632159b74232ee4bbbf476254565697ec67b06",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Root CMake file for CCGL.\n\n#     A simple Common Cross-platform Geographic Library.\n\n#        + Basic operations on array, file system, string, and time, etc.\n\n#        + Raster data class with support of GDAL\n\n#        + Data management with support of MongoDB\n\n#\n\n#     Please build from the off-tree build directory, e.g.:\n\n#       $ mkdir -p build\n\n#       $ cd build\n\n#       $ cmake ..\n\n#     Optional cmake options:\n\n#       -DUNITTEST=1  means run unittest based gtest/gmock\n\n#       -DRUNCOV=1    means run code coverage based gcov and lcov\n\n#\n\n#  Routine testing platforms and compilers include:\n\n#     1. Windows 10 with Visual Studio 2010/2013, mongo-c-driver-1.5.5, GDAL-1.11.4\n\n#     2. Windows 10 with msys2/mingw64 (GCC-8.2.0), mongo-c-driver-1.6.1, GDAL-2.3.2\n\n#     3. CentOS 6.2 (cluster) with GCC-4.8.4, mongo-c-driver-1.5.5, GDAL-1.9.0\n\n#     4. Red Hat Server 6.2 (cluster) with ICC-12.1.0, mongo-c-driver-1.6.1, GDAL-1.11.5 (Without UnitTest)\n\n#     5. macOS 10.12.6 with Clang-8.0 (or GCC-4.9.3), mongo-c-driver-1.5.5, GDAL-1.11.4\n\n#     6. Windows 10 with Visual Studio 2013+Intel C++ Compiler 17.0, mongo-c-driver-1.5.5, GDAL-1.11.4\n\n#\n\n#  Created and maintained by Liangjun Zhu (zlj@lreis.ac.cn)\n\n#  Latest updated: Sep. 13, 2018\n\n#  Copyright (C) 2017-2018 Lreis, IGSNRR, CAS\n\n# ----------------------------------------------------------------------------\n\n### Disable in-source builds to prevent source tree corruption.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Set coding language\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Project name and output library name\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Set cmake find path\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Set default or specified installation directory.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### Allow project folders in MSVC.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### OS platform.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### Break in case of popular CMake configuration mistakes.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Global flag to cause add_library to create shared libraries if on, otherwise static library.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# libraries built with hunter link against the dynamic CRT on windows\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### Detect compiler and target platform architecture.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "### Use statically or dynamically linked CRT? Default: dynamic\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### Add standard paths or specified paths for Find libraries and headers.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "### CCGL library\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "### Find OMP which is optional\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "### Find GDAL which is optional.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### Find mongo-c-driver which is optional\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "### Set code coverage linkage.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Code coverage needs the UnitTest\n",
        "Line" : 175,
        "CharPositionInLine" : 20
      },
      "20" : {
        "Text" : "### unittest based on gtest/gmock, which is optional.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "### Download and compile googletest\n",
        "Line" : 189,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "### Copy test data to build directory for UnitTest Only!\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# For the convenient of debugging in MSVC and CLion\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "### For CLion to implement the \"make install\" command\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "### Build platform.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "### C/C++ options.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "### Dependencies.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "### Auxiliary.\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "seims/src/ccgl/cmake/AddFindPaths.cmake" : {
      "ObjectId" : "dce70683f903b80807f6af2ae6cdd3f625020f5b",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Add standard paths or specified paths for Find libraries and headers.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add these standard paths to the search paths for FIND_PATH\n\n# to find include files from these locations first\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/ccgl/cmake/CRTLinkage.cmake" : {
      "ObjectId" : "b1cfe593c3e5b101575c47bdfa00a54870056691",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Removing LNK4075 warnings for debug WinRT builds\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF' specification\"\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:REF' specification\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Optional verification checks since we don't know existing contents of variables below\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Mandatory\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Ignore warning: This object file does not define any previously undefined public symbols, ...\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "seims/src/ccgl/cmake/CodeCoverage.cmake" : {
      "ObjectId" : "f63ca5329579989f442da6c1c18279693fe31d95",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2017, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# CHANGES:\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# 2016-02-03, Lars Bilke\n\n# - Refactored functions to use named parameters\n\n#\n\n# 2017-06-02, Lars Bilke\n\n# - Merged with modified version from github.com/ufz/ogs\n\n#\n\n#\n\n# USAGE:\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      include(CodeCoverage)\n\n#\n\n# 3. Append necessary compiler flags:\n\n#      APPEND_COVERAGE_COMPILER_FLAGS()\n\n#\n\n# 4. If you need to exclude additional directories from the report, specify them\n\n#    using the COVERAGE_EXCLUDES variable before calling SETUP_TARGET_FOR_COVERAGE.\n\n#    Example:\n\n#      set(COVERAGE_EXCLUDES 'dir1/*' 'dir2/*')\n\n#\n\n# 5. Use the functions described below to create a custom make target which\n\n#    runs your test executable and produces a code coverage report.\n\n#\n\n# 6. Build a Debug build:\n\n#      cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#      make\n\n#      make my_coverage_target\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Defines a target for running and collection code coverage information\n\n# Builds dependencies, runs the given executable and outputs reports.\n\n# NOTE! The executable should always have a ZERO as exit code otherwise\n\n# the coverage generation will not complete.\n\n#\n\n# setup_target_for_coverage(\n\n#     NAME testrunner_coverage                    # New target name\n\n#     EXECUTABLE testrunner -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR\n\n#     DEPENDENCIES testrunner                     # Dependencies to build first\n\n# )\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 143,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 147,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Setup target\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Run tests\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# setup_target_for_coverage\n",
        "Line" : 175,
        "CharPositionInLine" : 14
      },
      "13" : {
        "Text" : "# append_coverage_compiler_flags\n",
        "Line" : 181,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 14
    },
    "seims/src/ccgl/cmake/DetectCXXCompiler.cmake" : {
      "ObjectId" : "3bfce2acdffbf201659d5bbd5c4dff25acf1ccad",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect Microsoft compiler:\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect Intel ICC compiler -- for -fPIC in 3rdparty ( UNIX ONLY ):\n\n# NOTE: The system needs to determine if the '-fPIC' option needs to be added\n\n#  for the 3rdparty static libs being compiled.  The CMakeLists.txt files\n\n#  in 3rdparty use the CMAKE_COMPILER_IS_ICC definition being set here to determine if\n\n#  the -fPIC flag should be used.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect and set architecture:\n\n#\n\n#   ${CMAKE_CXX_COMPILER} -dumpmachine examples:\n\n#     in Windows 10, ming64 bash: x86_64-w64-mingw32\n\n#     in CentOS 6.2: x86_64-redhat-linux\n\n#     in macOS 10.12.6: x86_64-apple-darwin16.7.0\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disables the use of the global variable errno\n\n# for math functions that represent a single floating-point instruction.\n\n# Not sure if this is safe and needed. ljzhu\n\n#IF(CMAKE_COMPILER_IS_GNUCXX)\n\n#  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ffast-math\")\n\n#  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ffast-math\")\n\n#ENDIF()\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Workaround for 32-bit operating systems on 64-bit x86_64 processor\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Fix handling of duplicated files in the same static library:\n\n# https://public.kitware.com/Bug/view.php?id=14874\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# refers to https://github.com/biicode/client/issues/10\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "seims/src/ccgl/cmake/DownloadProject.cmake" : {
      "ObjectId" : "e300f42658a532b948852e6d92e43f1fd7c2374e",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved MIT License.  See accompanying\n\n# file LICENSE or https://github.com/Crascit/DownloadProject for details.\n\n#\n\n# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(DownloadProject)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be.\n\n# The prefix must always be an absolute path.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The way that CLion manages multiple configurations, it causes a copy of\n\n# the CMakeCache.txt to be copied across due to it not expecting there to\n\n# be a project within a project.  This causes the hard-coded paths in the\n\n# cache to be copied and builds to fail.  To mitigate this, we simply\n\n# remove the cache if it exists before we configure the new project.  It\n\n# is safe to do so because it will be re-generated.  Since this is only\n\n# executed at the configure step, it should not cause additional builds or\n\n# downloads.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n\n# Make sure to pass through CMAKE_MAKE_PROGRAM in case the main project\n\n# has this set to something not findable on the PATH.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "seims/src/ccgl/cmake/FindBson.cmake" : {
      "ObjectId" : "13990fd231d2a0a1f74b6fa641e735d0c02000a8",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module accepts the following environment variables:\n\n#\n\n#   BSON_DIR, BSON_ROOT, or BSON_ROOT_DIR - Specify the location of BSON\n\n#\n\n# Read-Only variables:\n\n#  BSON_FOUND - system has the BSON library\n\n#  BSON_INCLUDE_DIR - the BSON include directory\n\n#  BSON_LIBRARIES - The libraries needed to use BSON\n\n#  BSON_DLLS - The dynamic libraries needed to run BSON program on Windows\n\n#  BSON_VERSION - This is set to $major.$minor.$revision$path (eg. 0.4.1)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bother supporting this?\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "seims/src/ccgl/cmake/FindMongoC.cmake" : {
      "ObjectId" : "1dd87bb5844d10c8d6beaf85706c3a9469e0c1da",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module accepts the following environment variables:\n\n#\n\n#   MONGOC_DIR, MONGOC_ROOT, or MONGOC_ROOT_DIR - Specify the location of MONGOC\n\n#\n\n# Read-Only variables:\n\n#  MONGOC_FOUND - system has the MONGOC library\n\n#  MONGOC_INCLUDE_DIR - the MONGOC include directory\n\n#  MONGOC_LIBRARIES - The libraries needed to use MONGOC\n\n#  MONGOC_DLLS - The dynamic libraries needed to run MONGOC program on Windows\n\n#  MONGOC_VERSION - This is set to $major.$minor.$revision$path (eg. 0.4.1)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bother supporting this?\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "seims/src/ccgl/cmake/SetFlagGDAL.cmake" : {
      "ObjectId" : "d4ede832850e4c123db6f40c5a98af936f4c72c5",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### GDAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fixup GDAL variable.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On Windows, find_package always selects the release dll named\n\n# libgdal.dll. This is a symbolic links which trips the linker. Also,\n\n# for debug builds, we want to link against the debug library.\n\n# Before fixing this, verify that the variable contains a single string\n\n# and that the name is libgdal.dll. The CMake module may be fixed at\n\n# some point.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "seims/src/ccgl/cmake/SetFlagMPI.cmake" : {
      "ObjectId" : "ba10d31557da6482182cb6555a5c3ddf1e22a38d",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### MPI\n\n# currently, for mingw64 on Windows, you must specify MPI_LIBRARIES and DMPI_INCLUDE_PATH through CMake command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# using regular Clang or AppleClang\n",
        "Line" : 10,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : "# fix: Xcode ld error: framework not found gdal.\n",
        "Line" : 12,
        "CharPositionInLine" : 56
      },
      "3" : {
        "Text" : "# Select flags for ICC, refers to https://software.intel.com/en-us/articles/intel-cluster-toolkit-for-linux-error-when-compiling-c-aps-using-intel-mpi-library-compilation-driver-mpiicpc\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "seims/src/ccgl/cmake/SetFlagOpenMP.cmake" : {
      "ObjectId" : "f0bb1405be3ad99973d3eefe8c215d3f92b77317",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### OpenMP, FIND_PACKAGE(OpenMP) MUST be invoked before.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "seims/src/ccgl/cmake/Utils.cmake" : {
      "ObjectId" : "ba55631ddf1e9da20370e6d88bd3c8fd26abaff4",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clears all passed variables\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# nothing\n",
        "Line" : 15,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# CMP0056 do this on new CMake\n",
        "Line" : 50,
        "CharPositionInLine" : 75
      },
      "3" : {
        "Text" : "# Debugging function\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#geo_debug_message(\"Preserve old value for ${VAR}: ${${VAR}}\")\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Search packages for the host system instead of packages for the target system\n\n# in case of cross compilation these macros should be defined by the toolchain file\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# assert macro\n\n# Note: it doesn't support lists in arguments\n\n# Usage samples:\n\n#   geo_assert(MyLib_FOUND)\n\n#   geo_assert(DEFINED MyLib_INCLUDE_DIRS)\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  string(REPLACE \";\" \" \" __msg \"${ARGN}\")\n\n#  message(STATUS \"${__msg}\")\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Assume that we receive paths\n",
        "Line" : 178,
        "CharPositionInLine" : 47
      },
      "9" : {
        "Text" : "#message(STATUS \"'${P1}' '${P2_}' => '${${result_var}}'\")\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# adds include directories in such a way that directories from the repository source tree go first\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# workaround for GCC 6.x bug\n",
        "Line" : 225,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# GNU\n",
        "Line" : 244,
        "CharPositionInLine" : 65
      },
      "13" : {
        "Text" : "# GNU\n",
        "Line" : 245,
        "CharPositionInLine" : 59
      },
      "14" : {
        "Text" : "# GNU\n\n# Clang\n\n# MSVC\n\n# MSVC, any lang\n\n# Intel\n\n# HP\n\n# SunPro\n\n# XL\n",
        "Line" : 246,
        "CharPositionInLine" : 48
      },
      "15" : {
        "Text" : "# AIX (';' is replaced with ',')\n",
        "Line" : 254,
        "CharPositionInLine" : 57
      },
      "16" : {
        "Text" : "# PGI\n\n# Open64\n",
        "Line" : 255,
        "CharPositionInLine" : 48
      },
      "17" : {
        "Text" : "# turns off warnings\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Provides an option that the user can optionally select.\n\n# Can accept condition to control when option is available for user.\n\n# Usage:\n\n#   option(<option_variable> \"help string describing the option\" <initial value or boolean expression> [IF <condition>])\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Usage: geo_append_build_options(HIGHGUI FFMPEG)\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Usage is similar to CMake 'pkg_check_modules' command\n\n# It additionally controls HAVE_${define} and ${define}_${modname}_FOUND variables\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Macro that checks if module has been installed.\n\n# After it adds module to build and define\n\n# constants passed as second arg\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Guard CMake standalone invocations\n",
        "Line" : 455,
        "CharPositionInLine" : 27
      },
      "23" : {
        "Text" : "# Status report function.\n\n# Automatically align right column and selects text based on condition.\n\n# Usage:\n\n#   status(<text>)\n\n#   status(<heading> <value1> [<value2> ...])\n\n#   status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOT DEFINED CMAKE_ARGC\n",
        "Line" : 519,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# remove all matching elements from the list\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# stable & safe duplicates removal macro\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# safe list reversal macro\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# safe list sorting macro\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# add prefix to each item in the list\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add suffix to each item in the list\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# gets and removes the first element from the list\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# convert list of paths to full paths\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# convert list of paths to libraries names without lib prefix\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# read set of version defines from the header file\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# read single version define from the header file\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 675,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# read single version info from the pkg file\n",
        "Line" : 688,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "seims/src/ccgl/test/CMakeLists.txt" : {
      "ObjectId" : "7964c571a55c5607d39e02f95a2bf9ffb9e07805",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############\n\n# Unit Tests\n\n##############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n## This is so you can do 'make test' to see all your tests run, instead of\n\n## manually running the executable runUnitTests to see those specific tests.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# New target name\n\n# Executable in PROJECT_BINARY_DIR\n\n# Dependencies to build first\n",
        "Line" : 23,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 3
    },
    "seims/src/combine_raster/CMakeLists.txt" : {
      "ObjectId" : "4e5e28f28439f397a9c41b81b4fe1996c0b494e9",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ Add executables #################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "seims/src/field_partition/CMakeLists.txt" : {
      "ObjectId" : "e2e23587efa2948ece59d8ac3f7094b9affb1f6a",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ Add executables #################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not need MongoDB support\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/grid_layering/CMakeLists.txt" : {
      "ObjectId" : "8066c3c2d46fbb67b7688bb04230eca3f7559228",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ Add executables #################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "seims/src/import_raster/CMakeLists.txt" : {
      "ObjectId" : "6e11dfa94578949cac5122c15feebbe33b1eef09",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ Add executables #################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "seims/src/iuh/CMakeLists.txt" : {
      "ObjectId" : "eed540b1b59edec46a823545db3550d570df9dfa",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ Add executables #################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "seims/src/mask_rasters/CMakeLists.txt" : {
      "ObjectId" : "8e40ed53d317e8db0f1cd152efe875010a00188f",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ Add executables #################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not need MongoDB support\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/metis/CMakeLists.txt" : {
      "ObjectId" : "f8860ca316896116f9299b6b8b95f7313bded31f",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if (MSVC)\n\n#     set(METIS_INSTALL FALSE)\n\n# else ()\n\n#     set(METIS_INSTALL TRUE)\n\n# endif ()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure libmetis library.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add include directories.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Recursively look for CMakeLists.txt in subdirs.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### For CLion to implement the \"make install\" command\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "seims/src/metis/GKlib/CMakeLists.txt" : {
      "ObjectId" : "4c4893e433092e157d6fd17882ac26fe2e872a83",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/metis/GKlib/GKlibSystem.cmake" : {
      "ObjectId" : "b946b0dd7778c6759c221d3b5d0bf500cf2d1556",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup options.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add compiler flags.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GCC opts.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# GCC warnings.\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Sun insists on -xc99.\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Find OpenMP if it is requested.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add various definitions.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add various options\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check for features.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Custom check for TLS.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This if checks if that value is cached or not.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Finally set the official C flags.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find GKlib sources.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "seims/src/metis/GKlib/Makefile" : {
      "ObjectId" : "d17b4f44c9621fcebdfa09a1378c7f842540959d",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Configuration options.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Basically proxies everything to the builddir cmake.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Process configuration options.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "seims/src/metis/GKlib/test/CMakeLists.txt" : {
      "ObjectId" : "87f226d719a354718f6eb446178477a860b6cc40",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Where the header files reside\n\n#include_directories(../)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build program.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/metis/Makefile" : {
      "ObjectId" : "e4ea0100c60fbf35da6cb45de0bd5cda1208c450",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Configuration options.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Basically proxies everything to the builddir cmake.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Process configuration options.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "seims/src/metis/include/CMakeLists.txt" : {
      "ObjectId" : "1d1695c3a3ff4abfa53f49ff7cee9e425977fea8",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/metis/libmetis/CMakeLists.txt" : {
      "ObjectId" : "f2855e0bab775b990eebbf14c35e6d634f2b1f32",
      "LastModified" : "2019-01-23T12:28:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add this directory for internal users.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find sources.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build libmetis.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# refers to https://github.com/Alexpux/MINGW-packages/tree/master/mingw-w64-metis\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "seims/src/metis/programs/CMakeLists.txt" : {
      "ObjectId" : "1b358c1c9027fc328aa7fd087ca59a32b2501771",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These programs use internal metis data structures.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link_directories(/home/karypis/local/lib)\n\n# Build program.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  target_link_libraries(${prog} metis profiler)\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Try to find subversion revision.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "seims/src/reclassify/CMakeLists.txt" : {
      "ObjectId" : "1c9ae22038c3cfb1b816d87cf95ee4db9bbfd602",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################ Add executables #################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not need MongoDB support\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/seims_main/CMakeLists.txt" : {
      "ObjectId" : "063515c301b0940636bf675b917b46cbe061ef34",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Root CMake file for the main program of SEIMS.\n\n#     Spatially Explicit Integrated Modeling System\n\n#\n\n#     Please from the off-tree build directory, invoke:\n\n#       $ cmake <path/to/SEIMS/seims/seims_main>\n\n#\n\n#  Routine testing platforms and compilers include:\n\n#     1. Windows 10 with Visual Studio 2010/2013, mongo-c-driver-1.5.5, GDAL-1.11.4\n\n#     2. Windows 10 with mingw64 (GCC-4.9.3), mongo-c-driver-1.8.1, GDAL-1.11.5\n\n#     3. CentOS 6.2 (cluster) with GCC-4.8.4, mongo-c-driver-1.5.5, GDAL-1.9.0\n\n#     4. Red Hat Server 6.2 (cluster) with ICC-12.1.0, mongo-c-driver-1.6.1, GDAL-1.11.5 (Without UnitTest)\n\n#     5. macOS 10.12.6 with Clang-8.0 (or GCC-4.9.3), mongo-c-driver-1.5.5, GDAL-1.11.4\n\n#\n\n#  Created and maintained by Liangjun Zhu (zlj@lreis.ac.cn)\n\n#  Latest updated: Mar. 4, 2017\n\n#\n\n#  Copyright (C) 2013-2018 Lreis, IGSNRR, CAS\n\n# ----------------------------------------------------------------------------\n\n### Set coding language\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### SEIMS Version.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Check MPI which is optional\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Check OMP which is optional\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Compile with Visual leak detector for MSVC\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### Use MongoDB as database\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########  Stand-alone libraries/programs   ###########\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############  Set include directories    #############\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "############  step into subdirectories   #############\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "seims/src/seims_main/base/CMakeLists.txt" : {
      "ObjectId" : "199b10fd3adee24992c44e45ad120b70155c1f2a",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/base/bmps/CMakeLists.txt" : {
      "ObjectId" : "d85ad1755b9fc9ed1f06a3f49b78e40e045d775c",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/base/common_algorithm/CMakeLists.txt" : {
      "ObjectId" : "3158efe93ae1afd8b822c4a22dd567c53772e6de",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/base/data/CMakeLists.txt" : {
      "ObjectId" : "07a243106a069fe98ab23e98a6e90c372e04c37d",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/base/module_setting/CMakeLists.txt" : {
      "ObjectId" : "af9cd82e1d1c4229873cb8f560e1d546e63828b3",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/main/CMakeLists.txt" : {
      "ObjectId" : "189241499ef709b4f60eaca483135b07e2351f87",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ADD_SUBDIRECTORY(./main_mpi_deprecated)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "seims/src/seims_main/main/main_mpi/CMakeLists.txt" : {
      "ObjectId" : "5992f700d5ca93af20c68a472a0ee43601ba0e8a",
      "LastModified" : "2019-01-30T13:32:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add ModelMain class\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add combine raster function\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# VS2010 has MPI debug tool and seims_mpi should not included in folder\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "seims/src/seims_main/main/main_mpi_deprecated/CMakeLists.txt" : {
      "ObjectId" : "7157d9bdc40a24460039e06636fdfc27ec3fa978",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add ModelMain class\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add combine raster function\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# VS2010 has MPI debug tool and seims_mpi should not included in folder\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "seims/src/seims_main/main/main_omp/CMakeLists.txt" : {
      "ObjectId" : "2c8eefd3029d715d95167b22e60bacb176a66ff8",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/CMakeLists.txt" : {
      "ObjectId" : "fd8fa44361223a17bee8ff683546bf05f779b66b",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/climate/CMakeLists.txt" : {
      "ObjectId" : "3f1b3d5caa45d61738c1654bb7fcbbb7a6f4edc7",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/climate/ITP/CMakeLists.txt" : {
      "ObjectId" : "e5f13426d391413cf4e602faf9d2d5f0a7a4d71b",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/climate/TSD_RD/CMakeLists.txt" : {
      "ObjectId" : "e0271544b6ddd6460df79c180d70382e5e5a6429",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/ecology/AET_PTH/CMakeLists.txt" : {
      "ObjectId" : "069b302556d6fd8ad61958e5c483f3fb1c1f228e",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/ecology/CMakeLists.txt" : {
      "ObjectId" : "235f8305c949ecbd3ebc37e24deee9058645dcc7",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/ecology/PG_EPIC/CMakeLists.txt" : {
      "ObjectId" : "9fbdc6699be5f78606dad308321d649d8145ed59",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/ecology/PG_ORYZA/CMakeLists.txt" : {
      "ObjectId" : "81fd1a28a1a5407e2a8eee7d6fd40d20fbdc171e",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/erosion/CMakeLists.txt" : {
      "ObjectId" : "0bb741f105552538cf57cc7e60c3d83c76ce66b0",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# longterm model modules\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# storm model modules\n\n#ADD_SUBDIRECTORY(./SPLASHERO_PARK)\n\n#ADD_SUBDIRECTORY(./MUSLE_I30)\n\n#ADD_SUBDIRECTORY(./KinWavSed_OL)\n\n#ADD_SUBDIRECTORY(./KinWavSed_CH)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/seims_main/modules/erosion/IUH_SED_OL/CMakeLists.txt" : {
      "ObjectId" : "d6365caab5a29e4052ab143a706bb107752916a7",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/erosion/KinWavSed_CH/CMakeLists.txt" : {
      "ObjectId" : "93c8b399068fad6e943270c94d80dd8688303775",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/erosion/KinWavSed_OL/CMakeLists.txt" : {
      "ObjectId" : "74b266585e118d1368eb7073ee03a3bd294e11d7",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/erosion/MUSLE_I30/CMakeLists.txt" : {
      "ObjectId" : "a3d148fe7809058ce4082c63d7b614c221fdc6c9",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/erosion/SEDR_SBAGNOLD/CMakeLists.txt" : {
      "ObjectId" : "4557e9f1eca753d06cd0e1cff46f6c983c950e52",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/erosion/SERO_MUSLE/CMakeLists.txt" : {
      "ObjectId" : "2b95221675949d092126d48dc9e169f6e0e410fb",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/erosion/SPLASHERO_PARK/CMakeLists.txt" : {
      "ObjectId" : "85c6d2e2ef893102a5c147098c17a6c7e7c752c3",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/CH_DW/CMakeLists.txt" : {
      "ObjectId" : "a746afede36c218abfb021c9d77fbb7f1a44ab22",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/CMakeLists.txt" : {
      "ObjectId" : "e05a8311b48b9dbb5a1432ebb48fbccda66de251",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_SUBDIRECTORY(./CH_DW)\n\n#ADD_SUBDIRECTORY(./CH_MSK)\n\n#ADD_SUBDIRECTORY(./DEP_FS)\n\n#ADD_SUBDIRECTORY(./GW_RSVR)\n\n#ADD_SUBDIRECTORY(./HS_WB)\n\n#ADD_SUBDIRECTORY(./IKW_CH)\n\n#ADD_SUBDIRECTORY(./IKW_OL)\n\n#ADD_SUBDIRECTORY(./IKW_IF)\n\n#ADD_SUBDIRECTORY(./PERCO_DARCY)\n\n#ADD_SUBDIRECTORY(./PI_SVSC)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_SUBDIRECTORY(./SUR_SGA)\n\n#ADD_SUBDIRECTORY(./SUR_EXCESS)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/seims_main/modules/hydrology/DEP_FS/CMakeLists.txt" : {
      "ObjectId" : "dfc6150feca105c86beee9f8c0d3dc87307e19fa",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/GW_RSVR/CMakeLists.txt" : {
      "ObjectId" : "c7e5c0261e08cf197c57f8dcd6e382aedfdafe9a",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/HS_WB/CMakeLists.txt" : {
      "ObjectId" : "f285845eca8b02b474d4fb324fb4899663079678",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/IKW_CH/CMakeLists.txt" : {
      "ObjectId" : "81fe46adf6873aafaf81e9ef7f415782f0698830",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/IKW_IF/CMakeLists.txt" : {
      "ObjectId" : "35fe3a92a30765d017107f74746f8116706198df",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/IKW_OL/CMakeLists.txt" : {
      "ObjectId" : "4b74e4200dbc8c86eba29f1fa7adfbe948b61a5a",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/PERCO_DARCY/CMakeLists.txt" : {
      "ObjectId" : "5fa68eedd63218de3a3f25cad5203b3a7def96f3",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/PI_MCS/CMakeLists.txt" : {
      "ObjectId" : "c3b0ace4ad8b314edd51360fa0b1357b17cafcb6",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/PI_SVSC/CMakeLists.txt" : {
      "ObjectId" : "47f47de09d2ddc3c6deb35304f78809c2b0972bd",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/SUR_EXCESS/CMakeLists.txt" : {
      "ObjectId" : "f142c30971b5fbc375e827abf772affb88443cea",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology/SUR_SGA/CMakeLists.txt" : {
      "ObjectId" : "f0ee3791bafaab2562d5322447db107f57528945",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/CMakeLists.txt" : {
      "ObjectId" : "96e390fdd86f17e37df82f38a1cdf589485b0770",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ADD_SUBDIRECTORY(./IKW_REACH)\n\n# ADD_SUBDIRECTORY(./IUH_IF)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ADD_SUBDIRECTORY(./SNO_DD)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ADD_SUBDIRECTORY(./SNO_WB)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ADD_SUBDIRECTORY(./SRD_MB)\n\n# ADD_SUBDIRECTORY(./SSM_PE)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ADD_SUBDIRECTORY(./SUR_CN)\n\n# ADD_SUBDIRECTORY(./SUR_ES)\n\n# ADD_SUBDIRECTORY(./SUR_GA)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ADD_SUBDIRECTORY(./UNSAT_FLOW)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "seims/src/seims_main/modules/hydrology_longterm/DEP_LINSLEY/CMakeLists.txt" : {
      "ObjectId" : "88e51f9e580227df0952206258d18b96bad743e0",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/GWA_RE/CMakeLists.txt" : {
      "ObjectId" : "4c045a6be6ce8ad174f11bc9b08d095680bd2389",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/IKW_REACH/CMakeLists.txt" : {
      "ObjectId" : "aa364776229858c6bd22ce48062b37e6842c51ba",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/IMP_SWAT/CMakeLists.txt" : {
      "ObjectId" : "41d6d8332f81a75ec956d1938744e777ac817710",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/IUH_IF/CMakeLists.txt" : {
      "ObjectId" : "344f2b74c1d3748eb23555934ab910d6aef52bac",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/IUH_OL/CMakeLists.txt" : {
      "ObjectId" : "cc0c170620b1d3c90199f534b6c82082d8f170ff",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/MUSK_CH/CMakeLists.txt" : {
      "ObjectId" : "1c508ff589a663927c55f0baa334df704c639e0d",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/PER_PI/CMakeLists.txt" : {
      "ObjectId" : "9bec1dde8f50c14d4290865921f5599e1ce9aebe",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/PER_STR/CMakeLists.txt" : {
      "ObjectId" : "978d6f99342417e84c125a6f68250e62335e149e",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/PET_H/CMakeLists.txt" : {
      "ObjectId" : "c5c576650928434573071909a8dbe23d5d2410a0",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/PET_PM/CMakeLists.txt" : {
      "ObjectId" : "81d22ae1ae64be22b31909aadb409a8007b02306",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/PET_PT/CMakeLists.txt" : {
      "ObjectId" : "e717a9e1898504686c375979db0338e05b18ab94",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SET_LM/CMakeLists.txt" : {
      "ObjectId" : "d980aa56381f3c5a8795514bc262817c8f02b4d2",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SNO_DD/CMakeLists.txt" : {
      "ObjectId" : "17f7501abdccbaf85197365d7cd32676ee886b4a",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SNO_SP/CMakeLists.txt" : {
      "ObjectId" : "c93d78509ec8fea0b33faedabeeea35f726291d5",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SNO_WB/CMakeLists.txt" : {
      "ObjectId" : "977c3645ee33b3273caecf208049d0a4160fc96c",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SOL_WB/CMakeLists.txt" : {
      "ObjectId" : "5efcbb138fccf5c542f61f582f23e8dbb2c32f50",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SRD_MB/CMakeLists.txt" : {
      "ObjectId" : "c356f2a24556a5eae3b291e1bb95b3ee8ba00a26",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SSM_PE/CMakeLists.txt" : {
      "ObjectId" : "4d163957def9cf945be11c30294144669c2504ca",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SSR_DA/CMakeLists.txt" : {
      "ObjectId" : "6edc9186d67c15cf4c56aed619003b99af1a9901",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/STP_FP/CMakeLists.txt" : {
      "ObjectId" : "b7d533933656ab4905be890ea5a4a40c1d0a9dca",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SUR_CN/CMakeLists.txt" : {
      "ObjectId" : "aa0ce61a2c7454f74fe030903cbc7cd9df153ba3",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SUR_ES/CMakeLists.txt" : {
      "ObjectId" : "d028616214f78e93eaf31d258e752365090841d9",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SUR_GA/CMakeLists.txt" : {
      "ObjectId" : "c6e28e97c6b40031ff55d78b7dfc5cf8aa86c32e",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/SUR_MR/CMakeLists.txt" : {
      "ObjectId" : "0fd340861180fc403f16a33035764330e94a5099",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/hydrology_longterm/UNSAT_FLOW/CMakeLists.txt" : {
      "ObjectId" : "38787cf27d566e55dd1af99a4f5b0cadd4398c0c",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/management/CMakeLists.txt" : {
      "ObjectId" : "0e3c9ab3aa2d202f1168a911733f752a526fb853",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/management/NPSMGT/CMakeLists.txt" : {
      "ObjectId" : "adbb1ad013c8ae7c610bbcba6b02a0dc4d280e91",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/management/PLTMGT_SWAT/CMakeLists.txt" : {
      "ObjectId" : "145b15f6ac8ebd88135746b1228773e023312dbc",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/nutrient/AtmDep/CMakeLists.txt" : {
      "ObjectId" : "95e9475dd6c8c6923ed2dc4c58bedaad7d08006c",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/nutrient/CMakeLists.txt" : {
      "ObjectId" : "026fbdb261a335e5f3d2af4d691724eeb0196abf",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/nutrient/NUTR_TF/CMakeLists.txt" : {
      "ObjectId" : "dca55a81f8ae5f9bb87bbc1353a1fdaf7ea093ff",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/nutrient/NutrCH_QUAL2E/CMakeLists.txt" : {
      "ObjectId" : "7f9f284403d400a74dba23e6516b4ad15aec2d34",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/nutrient/NutrGW/CMakeLists.txt" : {
      "ObjectId" : "aa875f637d845488f54e9532ad5fa89189c68b33",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/nutrient/NutrMV/CMakeLists.txt" : {
      "ObjectId" : "5ffd4e08838939c57ccaf2f8cd0b8735f067eaf9",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/nutrient/NutrSED/CMakeLists.txt" : {
      "ObjectId" : "ebc5ab13c22ad806c37197cb52190cf925fa1a67",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/test/CMakeLists.txt" : {
      "ObjectId" : "8ae49145bb7ccc27f3466995b7dee38d63b41e76",
      "LastModified" : "2019-01-30T13:32:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/test/IO_TEST/CMakeLists.txt" : {
      "ObjectId" : "a101f379563c02503e5b027c5d5e022b0fb3123c",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/seims_main/modules/test/template/CMakeLists.txt" : {
      "ObjectId" : "ad67329fb69a4ca03c4e0e6d0ddedba87f40394f",
      "LastModified" : "2019-01-30T13:32:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "seims/src/taudem/CMakeLists.txt" : {
      "ObjectId" : "aaa55268638f0ff33c9ab165adab2cfb54e130d3",
      "LastModified" : "2019-01-30T13:32:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Root CMake file for extended TauDEM.\n\n#\n\n#     Please from the off-tree build directory, invoke:\n\n#       $ cmake <path/to/TauDEM_ext>\n\n#\n\n#  Routine testing platforms and compilers include:\n\n#     1. Windows 10 with Visual Studio 2010/2013, MSMPI-v8, GDAL-1.11.4\n\n#     2. Windows 10 with mingw64 (GCC-8.2.0), MSMPI-v8, GDAL-2.3.2\n\n#     3. CentOS 6.2 (cluster) with GCC-4.8.4, MPICH-3.1.4, GDAL-1.9.0\n\n#     4. Red Hat Server 6.2 (cluster) with ICC-12.1.0, Intel MPI 4.0.3, GDAL-1.11.5\n\n#     5. macOS 10.12.6 with Clang-8.0 (or GCC-4.9.3), OpenMPI-1.10.4, GDAL-1.11.4 (Framework)\n\n#\n\n#  Created and maintained by Liang-Jun Zhu (zlj@lreis.ac.cn)\n\n#  Latest updated: Jan. 23, 2019\n\n# ----------------------------------------------------------------------------\n\n### Disable in-source builds to prevent source tree corruption.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set initial project name with coding languages\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### TauDEM_ext compilation version.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Build Postfix\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Set cmake find path\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### Set default or specified installation directory.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### Allow project folders in MSVC.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### Break in case of popular CMake configuration mistakes.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "### Detect compiler and target platform architecture.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "### Add standard paths or specified paths for Find libraries and headers.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### Find packages.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "### Find MPI which is required\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### Find OMP which is optional\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "### Find GDAL which is required.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "### Set specific packages.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "### Use statically or dynamically linked CRT? Default: dynamic\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### OS platform.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "### For CLion to implement the \"make install\" command\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "### Build platform.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "### C/C++ options.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "### Dependencies.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "### Auxiliary.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "seims/src/taudem/cmake/AddFindPaths.cmake" : {
      "ObjectId" : "dce70683f903b80807f6af2ae6cdd3f625020f5b",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Add standard paths or specified paths for Find libraries and headers.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add these standard paths to the search paths for FIND_PATH\n\n# to find include files from these locations first\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/taudem/cmake/CRTLinkage.cmake" : {
      "ObjectId" : "6be220bf1bf3154d237ef81a8970233058695ee1",
      "LastModified" : "2019-01-30T13:32:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Removing LNK4075 warnings for debug WinRT builds\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF' specification\"\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:REF' specification\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Optional verification checks since we don't know existing contents of variables below\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Mandatory\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Ignore warning: This object file does not define any previously undefined public symbols, ...\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "seims/src/taudem/cmake/CodeCoverage.cmake" : {
      "ObjectId" : "f63ca5329579989f442da6c1c18279693fe31d95",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2017, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# CHANGES:\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# 2016-02-03, Lars Bilke\n\n# - Refactored functions to use named parameters\n\n#\n\n# 2017-06-02, Lars Bilke\n\n# - Merged with modified version from github.com/ufz/ogs\n\n#\n\n#\n\n# USAGE:\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      include(CodeCoverage)\n\n#\n\n# 3. Append necessary compiler flags:\n\n#      APPEND_COVERAGE_COMPILER_FLAGS()\n\n#\n\n# 4. If you need to exclude additional directories from the report, specify them\n\n#    using the COVERAGE_EXCLUDES variable before calling SETUP_TARGET_FOR_COVERAGE.\n\n#    Example:\n\n#      set(COVERAGE_EXCLUDES 'dir1/*' 'dir2/*')\n\n#\n\n# 5. Use the functions described below to create a custom make target which\n\n#    runs your test executable and produces a code coverage report.\n\n#\n\n# 6. Build a Debug build:\n\n#      cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#      make\n\n#      make my_coverage_target\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Defines a target for running and collection code coverage information\n\n# Builds dependencies, runs the given executable and outputs reports.\n\n# NOTE! The executable should always have a ZERO as exit code otherwise\n\n# the coverage generation will not complete.\n\n#\n\n# setup_target_for_coverage(\n\n#     NAME testrunner_coverage                    # New target name\n\n#     EXECUTABLE testrunner -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR\n\n#     DEPENDENCIES testrunner                     # Dependencies to build first\n\n# )\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 143,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 147,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Setup target\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Run tests\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# setup_target_for_coverage\n",
        "Line" : 175,
        "CharPositionInLine" : 14
      },
      "13" : {
        "Text" : "# append_coverage_compiler_flags\n",
        "Line" : 181,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 14
    },
    "seims/src/taudem/cmake/DetectCXXCompiler.cmake" : {
      "ObjectId" : "3bfce2acdffbf201659d5bbd5c4dff25acf1ccad",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect Microsoft compiler:\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect Intel ICC compiler -- for -fPIC in 3rdparty ( UNIX ONLY ):\n\n# NOTE: The system needs to determine if the '-fPIC' option needs to be added\n\n#  for the 3rdparty static libs being compiled.  The CMakeLists.txt files\n\n#  in 3rdparty use the CMAKE_COMPILER_IS_ICC definition being set here to determine if\n\n#  the -fPIC flag should be used.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect and set architecture:\n\n#\n\n#   ${CMAKE_CXX_COMPILER} -dumpmachine examples:\n\n#     in Windows 10, ming64 bash: x86_64-w64-mingw32\n\n#     in CentOS 6.2: x86_64-redhat-linux\n\n#     in macOS 10.12.6: x86_64-apple-darwin16.7.0\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disables the use of the global variable errno\n\n# for math functions that represent a single floating-point instruction.\n\n# Not sure if this is safe and needed. ljzhu\n\n#IF(CMAKE_COMPILER_IS_GNUCXX)\n\n#  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ffast-math\")\n\n#  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ffast-math\")\n\n#ENDIF()\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Workaround for 32-bit operating systems on 64-bit x86_64 processor\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Fix handling of duplicated files in the same static library:\n\n# https://public.kitware.com/Bug/view.php?id=14874\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# refers to https://github.com/biicode/client/issues/10\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "seims/src/taudem/cmake/DownloadProject.cmake" : {
      "ObjectId" : "e300f42658a532b948852e6d92e43f1fd7c2374e",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved MIT License.  See accompanying\n\n# file LICENSE or https://github.com/Crascit/DownloadProject for details.\n\n#\n\n# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(DownloadProject)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be.\n\n# The prefix must always be an absolute path.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The way that CLion manages multiple configurations, it causes a copy of\n\n# the CMakeCache.txt to be copied across due to it not expecting there to\n\n# be a project within a project.  This causes the hard-coded paths in the\n\n# cache to be copied and builds to fail.  To mitigate this, we simply\n\n# remove the cache if it exists before we configure the new project.  It\n\n# is safe to do so because it will be re-generated.  Since this is only\n\n# executed at the configure step, it should not cause additional builds or\n\n# downloads.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n\n# Make sure to pass through CMAKE_MAKE_PROGRAM in case the main project\n\n# has this set to something not findable on the PATH.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "seims/src/taudem/cmake/FindBson.cmake" : {
      "ObjectId" : "13990fd231d2a0a1f74b6fa641e735d0c02000a8",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module accepts the following environment variables:\n\n#\n\n#   BSON_DIR, BSON_ROOT, or BSON_ROOT_DIR - Specify the location of BSON\n\n#\n\n# Read-Only variables:\n\n#  BSON_FOUND - system has the BSON library\n\n#  BSON_INCLUDE_DIR - the BSON include directory\n\n#  BSON_LIBRARIES - The libraries needed to use BSON\n\n#  BSON_DLLS - The dynamic libraries needed to run BSON program on Windows\n\n#  BSON_VERSION - This is set to $major.$minor.$revision$path (eg. 0.4.1)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bother supporting this?\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "seims/src/taudem/cmake/FindMongoC.cmake" : {
      "ObjectId" : "1dd87bb5844d10c8d6beaf85706c3a9469e0c1da",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module accepts the following environment variables:\n\n#\n\n#   MONGOC_DIR, MONGOC_ROOT, or MONGOC_ROOT_DIR - Specify the location of MONGOC\n\n#\n\n# Read-Only variables:\n\n#  MONGOC_FOUND - system has the MONGOC library\n\n#  MONGOC_INCLUDE_DIR - the MONGOC include directory\n\n#  MONGOC_LIBRARIES - The libraries needed to use MONGOC\n\n#  MONGOC_DLLS - The dynamic libraries needed to run MONGOC program on Windows\n\n#  MONGOC_VERSION - This is set to $major.$minor.$revision$path (eg. 0.4.1)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bother supporting this?\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "seims/src/taudem/cmake/SetFlagGDAL.cmake" : {
      "ObjectId" : "d4ede832850e4c123db6f40c5a98af936f4c72c5",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### GDAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fixup GDAL variable.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On Windows, find_package always selects the release dll named\n\n# libgdal.dll. This is a symbolic links which trips the linker. Also,\n\n# for debug builds, we want to link against the debug library.\n\n# Before fixing this, verify that the variable contains a single string\n\n# and that the name is libgdal.dll. The CMake module may be fixed at\n\n# some point.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "seims/src/taudem/cmake/SetFlagMPI.cmake" : {
      "ObjectId" : "ba10d31557da6482182cb6555a5c3ddf1e22a38d",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### MPI\n\n# currently, for mingw64 on Windows, you must specify MPI_LIBRARIES and DMPI_INCLUDE_PATH through CMake command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# using regular Clang or AppleClang\n",
        "Line" : 10,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : "# fix: Xcode ld error: framework not found gdal.\n",
        "Line" : 12,
        "CharPositionInLine" : 56
      },
      "3" : {
        "Text" : "# Select flags for ICC, refers to https://software.intel.com/en-us/articles/intel-cluster-toolkit-for-linux-error-when-compiling-c-aps-using-intel-mpi-library-compilation-driver-mpiicpc\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "seims/src/taudem/cmake/SetFlagOpenMP.cmake" : {
      "ObjectId" : "f0bb1405be3ad99973d3eefe8c215d3f92b77317",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### OpenMP, FIND_PACKAGE(OpenMP) MUST be invoked before.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "seims/src/taudem/cmake/Utils.cmake" : {
      "ObjectId" : "ba55631ddf1e9da20370e6d88bd3c8fd26abaff4",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clears all passed variables\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# nothing\n",
        "Line" : 15,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# CMP0056 do this on new CMake\n",
        "Line" : 50,
        "CharPositionInLine" : 75
      },
      "3" : {
        "Text" : "# Debugging function\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#geo_debug_message(\"Preserve old value for ${VAR}: ${${VAR}}\")\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Search packages for the host system instead of packages for the target system\n\n# in case of cross compilation these macros should be defined by the toolchain file\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# assert macro\n\n# Note: it doesn't support lists in arguments\n\n# Usage samples:\n\n#   geo_assert(MyLib_FOUND)\n\n#   geo_assert(DEFINED MyLib_INCLUDE_DIRS)\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  string(REPLACE \";\" \" \" __msg \"${ARGN}\")\n\n#  message(STATUS \"${__msg}\")\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Assume that we receive paths\n",
        "Line" : 178,
        "CharPositionInLine" : 47
      },
      "9" : {
        "Text" : "#message(STATUS \"'${P1}' '${P2_}' => '${${result_var}}'\")\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# adds include directories in such a way that directories from the repository source tree go first\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# workaround for GCC 6.x bug\n",
        "Line" : 225,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# GNU\n",
        "Line" : 244,
        "CharPositionInLine" : 65
      },
      "13" : {
        "Text" : "# GNU\n",
        "Line" : 245,
        "CharPositionInLine" : 59
      },
      "14" : {
        "Text" : "# GNU\n\n# Clang\n\n# MSVC\n\n# MSVC, any lang\n\n# Intel\n\n# HP\n\n# SunPro\n\n# XL\n",
        "Line" : 246,
        "CharPositionInLine" : 48
      },
      "15" : {
        "Text" : "# AIX (';' is replaced with ',')\n",
        "Line" : 254,
        "CharPositionInLine" : 57
      },
      "16" : {
        "Text" : "# PGI\n\n# Open64\n",
        "Line" : 255,
        "CharPositionInLine" : 48
      },
      "17" : {
        "Text" : "# turns off warnings\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Provides an option that the user can optionally select.\n\n# Can accept condition to control when option is available for user.\n\n# Usage:\n\n#   option(<option_variable> \"help string describing the option\" <initial value or boolean expression> [IF <condition>])\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Usage: geo_append_build_options(HIGHGUI FFMPEG)\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Usage is similar to CMake 'pkg_check_modules' command\n\n# It additionally controls HAVE_${define} and ${define}_${modname}_FOUND variables\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Macro that checks if module has been installed.\n\n# After it adds module to build and define\n\n# constants passed as second arg\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Guard CMake standalone invocations\n",
        "Line" : 455,
        "CharPositionInLine" : 27
      },
      "23" : {
        "Text" : "# Status report function.\n\n# Automatically align right column and selects text based on condition.\n\n# Usage:\n\n#   status(<text>)\n\n#   status(<heading> <value1> [<value2> ...])\n\n#   status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOT DEFINED CMAKE_ARGC\n",
        "Line" : 519,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# remove all matching elements from the list\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# stable & safe duplicates removal macro\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# safe list reversal macro\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# safe list sorting macro\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# add prefix to each item in the list\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add suffix to each item in the list\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# gets and removes the first element from the list\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# convert list of paths to full paths\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# convert list of paths to libraries names without lib prefix\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# read set of version defines from the header file\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# read single version define from the header file\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 675,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# read single version info from the pkg file\n",
        "Line" : 688,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "seims/src/taudem/src/CMakeLists.txt" : {
      "ObjectId" : "449a3bea9c9064afda6a1e4bd69f236869ddd6b0",
      "LastModified" : "2018-11-14T14:21:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# New apps from TauDEM 5.3.8\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set (INUNMAP InunMapmn.cpp InunMap.cpp ${common_srcs} ${shape_srcs}) # Need netcdf lib\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_executable (inunmap ${INUNMAP})\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# inunmap)\n",
        "Line" : 124,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "seims/src/taudem/src_ext/CMakeLists.txt" : {
      "ObjectId" : "30a1525e2de64f9084154f7ca57feae97f4b3c77",
      "LastModified" : "2019-01-30T13:32:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds include directories in such a way that directories from the TauDEM source tree go first.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Added by Liangjun Zhu, 2015/5/21\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Integrated from AutoFuzSlpPos project by Liangjun Zhu, 2019/01/23\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## TODO, TauDEM also implemented a similar function named dinfdistup, we need to find if they can be merged!\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# third-party programs based on TauDEM framework\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add other directories\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "seims/src/taudem/src_ext/autofuzslppos/CMakeLists.txt" : {
      "ObjectId" : "e16cecb843e00dcda5a0e780e39cea443a407157",
      "LastModified" : "2019-01-30T13:32:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds include directories in such a way that directories from the TauDEM source tree go first.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# third-party programs based on TauDEM framework\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/test/CMakeLists.txt" : {
      "ObjectId" : "7953ad4a9e890aa760c1b6f3dac64c0ad205877a",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first build google test (gmock, gtest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add framework unittest\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "seims/src/test/googletest/CMakeLists.txt" : {
      "ObjectId" : "bccb46ea36bbd1b88a2e65d5b4f10ea2dd94a022",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n#########  Git clone the latest googletest   ##############\n\n###########################################################\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent GoogleTest from overriding our compiler/linker options\n\n# when building with Visual Studio\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# solve the bug of error LNK2038\n\n# refers to https://stackoverflow.com/questions/14172856/cmake-compile-with-mt-instead-of-md\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "seims/src/test/seims_framework/CMakeLists.txt" : {
      "ObjectId" : "7c668705623afd42699eec51b4579c85575e2e68",
      "LastModified" : "2018-09-19T09:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n######              unittest executable        ############\n\n###########################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## here is the template for adding another unittest of a module\n\n# 1. Create a unittest_MODULEID.cpp, e.g., unittest_utilsclass.cpp\n\n# 2. Add target_link_libraries(${PROJECT_TEST_NAME} MODULEID) in this file\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 138,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 2770
}