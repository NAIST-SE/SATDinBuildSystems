{
  "Repository" : "15558250",
  "Revision" : "HEAD",
  "ObjectId" : "b2b72c36c6200ad71a76e9de2e0e764eb6260b31",
  "CommitTime" : "2016-08-23T12:52:50Z",
  "Files" : {
    "experiments/issue269/rng-microbenchmark/Makefile" : {
      "ObjectId" : "bee346dd93a3347c6fdb7fd313ba39814d457ca7",
      "LastModified" : "2014-12-14T16:17:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## CXXFLAGS, LDFLAGS, POSTLINKOPT are options for compiler and linker\n\n## that are used for all three targets (release, debug, and profile).\n\n## (POSTLINKOPT are options that appear *after* all object files.)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: we write \"-std=c++0x\" rather than \"-std=c++11\" to support gcc 4.4.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Build rules for the release target follow.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Build rules for the debug target follow.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Build rules for the profile target follow.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Additional targets follow.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## NOTE: If we just call gcc -MM on a source file that lives within a\n\n## subdirectory, it will strip the directory part in the output. Hence\n\n## the for loop with the sed call.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7,
      "Errorlog" : "line 137:8 token recognition error at: '\"s@\\(.*\\)\\.o:\\(.*\\)@.obj/\\1'\nline 137:62 token recognition error at: '\\2'\nline 138:33 token recognition error at: '\\1'\nline 138:60 token recognition error at: '\\2'\nline 139:33 token recognition error at: '\\1'\nline 139:62 token recognition error at: '\\2'\nline 139:65 token recognition error at: '\" Makefile.temp >> Makefile.depend\\n\\trm -f Makefile.temp\\n\\nifneq ($(MAKECMDGOALS),clean)\\n    ifneq ($(MAKECMDGOALS),distclean)\\n        -include Makefile.depend\\n    endif\\nendif\\n\\n.PHONY: default all release debug profile clean distclean\\n\u0000'\n"
    },
    "experiments/issue532/timers-microbenchmark/Makefile" : {
      "ObjectId" : "11199419935e9a9862276ceea136717efb41d8ec",
      "LastModified" : "2015-10-02T16:38:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## CXXFLAGS, LDFLAGS, POSTLINKOPT are options for compiler and linker\n\n## that are used for all three targets (release, debug, and profile).\n\n## (POSTLINKOPT are options that appear *after* all object files.)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build rules for the release target follow.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Build rules for the debug target follow.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Build rules for the profile target follow.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Additional targets follow.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## NOTE: If we just call gcc -MM on a source file that lives within a\n\n## subdirectory, it will strip the directory part in the output. Hence\n\n## the for loop with the sed call.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 132:8 token recognition error at: '\"s@\\(.*\\)\\.o:\\(.*\\)@.obj/\\1'\nline 132:62 token recognition error at: '\\2'\nline 133:33 token recognition error at: '\\1'\nline 133:60 token recognition error at: '\\2'\nline 134:33 token recognition error at: '\\1'\nline 134:62 token recognition error at: '\\2'\nline 134:65 token recognition error at: '\" Makefile.temp >> Makefile.depend\\n\\trm -f Makefile.temp\\n\\nifneq ($(MAKECMDGOALS),clean)\\n    ifneq ($(MAKECMDGOALS),distclean)\\n        -include Makefile.depend\\n    endif\\nendif\\n\\n.PHONY: default all release debug profile clean distclean\\n\u0000'\n"
    },
    "experiments/issue611/peak-memory-microbenchmark/Makefile" : {
      "ObjectId" : "7682214f17ea6b0a58f454d8b3ce46b0313e60b0",
      "LastModified" : "2015-12-16T21:19:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## CXXFLAGS, LDFLAGS, POSTLINKOPT are options for compiler and linker\n\n## that are used for all three targets (release, debug, and profile).\n\n## (POSTLINKOPT are options that appear *after* all object files.)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: we write \"-std=c++0x\" rather than \"-std=c++11\" to support gcc 4.4.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Build rules for the release target follow.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Build rules for the debug target follow.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Build rules for the profile target follow.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Additional targets follow.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## NOTE: If we just call gcc -MM on a source file that lives within a\n\n## subdirectory, it will strip the directory part in the output. Hence\n\n## the for loop with the sed call.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7,
      "Errorlog" : "line 135:8 token recognition error at: '\"s@\\(.*\\)\\.o:\\(.*\\)@.obj/\\1'\nline 135:62 token recognition error at: '\\2'\nline 136:33 token recognition error at: '\\1'\nline 136:60 token recognition error at: '\\2'\nline 137:33 token recognition error at: '\\1'\nline 137:62 token recognition error at: '\\2'\nline 137:65 token recognition error at: '\" Makefile.temp >> Makefile.depend\\n\\trm -f Makefile.temp\\n\\nifneq ($(MAKECMDGOALS),clean)\\n    ifneq ($(MAKECMDGOALS),distclean)\\n        -include Makefile.depend\\n    endif\\nendif\\n\\n.PHONY: default all release debug profile clean distclean\\n\u0000'\n"
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "df560ce8ae0ca826b3fbf48b8a700a0087d33e10",
      "LastModified" : "2016-05-11T17:06:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Usage:\n\n#         mkdir -p builds/release32\n\n#         cd builds/release32\n\n#         cmake path/to/src\n\n#         make [-j4]\n\n# The call to cmake caches settings in the build directory and reads\n\n# them from the cache on subsequent builds. If you want to change the\n\n# settings of some options, do _not_ change the CMakeLIsts.txt files.\n\n# Instead, create a new build directory, pass -DMY_OPTION=my_value to\n\n# cmake. Alternatively, you can use a cmake GUI like ccmake to edit\n\n# the cache.\n\n#\n\n# Three build targets are defined:\n\n#\n\n# * release (default)\n\n#      -O3 optimisation, debugging symbols, assertions inactive\n\n# * debug\n\n#      -O3 optimisation, full debugging information, assertions active\n\n# * profile\n\n#      like Debug but with profile information linked in\n\n#\n\n# In all build targets, we overwrite the default configuration to\n\n# include \"-g\", allow cross compilation and switch to pedantic error\n\n# reporting.\n\n#\n\n# You can change the build target, by adding the parameter\n\n#   -DCMAKE_BUILD_TYPE=type\n\n# to the cmake call.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Version 2.8.3 introduces CMakeParseArguments.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Respect the PATH environment variable when searching for compilers.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Path containing custom CMake modules\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We have to set the desired bitwidth before we can define the project.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Due to a bug in cmake, configuration types are only set up correctly on the second cmake run.\n\n# This means that cmake has to be called twice for multi-config generators like Visual Studio.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add planner components as subprojects.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Copy the translator into the output directory.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/cmake_modules/FastDownwardMacros.cmake" : {
      "ObjectId" : "3236802ad26cf950ac926c3b683593e249b0ca78",
      "LastModified" : "2016-05-11T17:06:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: on CMake >= 3.0 the compiler ID of Apple-provided clang is AppleClang.\n\n# If we change the required CMake version from 2.8.3 to 3.0 or greater,\n\n# we have to fix this.\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "## Configuration-specific flags\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# We force linking to be static because the dynamically linked code is\n\n# about 10% slower on Linux (see issue67). On Windows this is a compiler\n\n# setting, not a linker setting.\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Enable exceptions.\n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Use warning level 4 (/W4) and treat warnings as errors (/WX)\n\n# -Wall currently detects too many warnings outside of our code to be useful.\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Disable warnings that currently trigger in the code until we fix them.\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# forcing value to bool\n\n# assignment operator could not be generated\n\n# assignment within conditional expression (in tree.hh)\n\n# unreferenced formal parameter (in OSI)\n\n# conditional expression is constant (in tree.hh and in our code)\n\n# conversion with possible loss of data\n\n# unreachable code\n\n# nonstandard extension used\n\n# function call with parameters that may be unsafe\n\n# declaration hides previous local declaration\n\n# declaration hides class member\n\n# conversion from size_t to int with possible loss of data\n",
        "Line" : 41,
        "CharPositionInLine" : 58
      },
      "7" : {
        "Text" : "# The following are disabled because of what seems to be compiler bugs.\n\n# \"unreferenced local function has been removed\";\n\n# see http://stackoverflow.com/questions/3051992/compiler-warning-at-c-template-base-class\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# TODO: Configuration-specific flags. We currently rely on the fact that\n\n# CMAKE_CXX_FLAGS_RELEASE and CMAKE_CXX_FLAGS_DEBUG get reasonable settings\n\n# from cmake. This is the case for most build environments, but we have less\n\n# control over the way the binary is created.\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# We try to force linking to be static because the dynamically linked code is\n\n# about 10% slower on Linux (see issue67).\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Static linking is not supported by Apple.\n\n# https://developer.apple.com/library/mac/qa/qa1118/_index.html\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Any libs we build should be static.\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Any libraries that are implicitly added to the end of the linker\n\n# command should be linked statically.\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Do not add \"-rdynamic\" flag.\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Only look for static libraries (Windows does not support this).\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Set linker flags to link statically.\n",
        "Line" : 93,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# We don't offer a dedicated PROFILE build on Windows.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Only for single-config generators (like Makefiles) that choose the build type at generation time.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Only for multi-config generators (like Visual Studio Projects) that choose\n\n# the build type at build time.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Add -m32 to the compiler flags on Unix, unless ALLOW_64_BIT is set to true.\n\n# This has to be done before defining the project.\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Since compiling for 32-bit works differently on each platform, we let\n\n# users set up their own build environment and only check which one is\n\n# used. Compiling a 64-bit version of the planner without explicitly\n\n# settig ALLOW_64_BIT to true results in an error.\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# The macro fast_downward_set_bitwidth\n\n# adds -m32 to the compiler flags on Unix, unless ALLOW_64_BIT is\n\n# set to true. If this done before defining a project, the tool\n\n# chain will be set up for 32-bit and CMAKE_SIZEOF_VOID_P should be 4.\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Check mandatory arguments.\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Check optional arguments.\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Decide whether the plugin should be enabled by default.\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Overwrite default value for core plugins and dependecy-only plugins.\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "src/cmake_modules/FindClp.cmake" : {
      "ObjectId" : "1817115a15487e439b7d71bdd2659bffe84c24e1",
      "LastModified" : "2015-12-16T21:19:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the CLP LP solver.\n\n# This code defines the following variables:\n\n#\n\n#  CLP_FOUND                 - TRUE if CLP was found.\n\n#  CLP_INCLUDE_DIRS          - Full paths to all include dirs.\n\n#  CLP_LIBRARIES             - Full paths to all libraries.\n\n#\n\n# Usage:\n\n#  find_package(clp)\n\n#\n\n# Hints to the location of CLP can be specified using the variables\n\n# COIN_HINT_PATHS_RELEASE and COIN_HINT_PATHS_DEBUG. This is used by\n\n# FindOsi to locate the CLP version that is shipped with the OSI version\n\n# which was found.\n\n#\n\n# Note that the standard FIND_PACKAGE features are supported\n\n# (QUIET, REQUIRED, etc.).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if everything was found and set CLP_FOUND.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake_modules/FindCplex.cmake" : {
      "ObjectId" : "70f435a1bef2ef79bd78b44d3d5314c4648cb505",
      "LastModified" : "2016-05-11T17:06:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the CPLEX LP solver.\n\n# This code defines the following variables:\n\n#\n\n#  CPLEX_FOUND                 - TRUE if CPLEX was found.\n\n#  CPLEX_INCLUDE_DIRS          - Full paths to all include dirs.\n\n#  CPLEX_LIBRARIES             - Full paths to all libraries.\n\n#  CPLEX_RUNTIME_LIBRARY       - Full path to the dll file on windows\n\n#\n\n# Usage:\n\n#  find_package(cplex)\n\n#\n\n# The location of CPLEX can be specified using the environment variable\n\n# or cmake parameter DOWNWARD_CPLEX_ROOT.\n\n#\n\n# Note that the standard FIND_PACKAGE features are supported\n\n# (QUIET, REQUIRED, etc.).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that the numbers are correct: Visual Studio 2011 is version 10.\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# HACK: there must be a better way to find the dll file.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check if everything was found and set CPLEX_FOUND.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake_modules/FindOSI.cmake" : {
      "ObjectId" : "24cf7d2f05850c608f83de7b7f325ff0ea469851",
      "LastModified" : "2015-12-16T21:19:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Open Solver Interface by COIN/OR.\n\n# This module will search for the OSI proxies for the solvers\n\n# specified as components in the FIND_PACKAGE call.\n\n# Possible solvers are:\n\n#\n\n#  Clp (internal solver of COIN)\n\n#  Cpx (CPLEX)\n\n#  Grb (Gurobi)\n\n#\n\n# This code defines the following variables:\n\n#\n\n#  OSI_FOUND                 - TRUE if all components are found.\n\n#  OSI_INCLUDE_DIRS          - Full paths to all include dirs.\n\n#  OSI_LIBRARIES             - Full paths to all libraries.\n\n#  OSI_<solver>_FOUND        - TRUE if a proxy for <solver> is found.\n\n#  OSI_<solver>_INCLUDE_DIRS - Full path to include directories for <solver>.\n\n#  OSI_<solver>_LIBRARIES    - Full path to proxy and main libraries for <solver>.\n\n#\n\n# Example Usages:\n\n#  find_package(OSI)\n\n#  find_package(OSI COMPONENTS Clp Cpx)\n\n#\n\n# The location of OSI can be specified using the environment variable\n\n# or cmake parameter DOWNWARD_COIN_ROOT. If different installations\n\n# for 32-/64-bit versions and release/debug versions of OSI are available,\n\n# they can be specified with\n\n#   DOWNWARD_COIN_ROOT32\n\n#   DOWNWARD_COIN_ROOT64\n\n#   DOWNWARD_COIN_ROOT_RELEASE32\n\n#   DOWNWARD_COIN_ROOT_RELEASE64\n\n#   DOWNWARD_COIN_ROOT_DEBUG32\n\n#   DOWNWARD_COIN_ROOT_DEBUG64\n\n# More specific paths are prefered over less specific ones when searching\n\n# for libraries.\n\n#\n\n# Note that the standard FIND_PACKAGE features are supported\n\n# (QUIET, REQUIRED, etc.).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find include dirs.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find main libraries.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find solver proxies.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# A component is present if its adapter is present and its solver is present.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Clp component\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Cpx component\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Grb component\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for consistency and handle arguments like QUIET, REQUIRED, etc.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Do not show internal variables in cmake GUIs like ccmake.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/preprocess/CMakeLists.txt" : {
      "ObjectId" : "6ea7a4d378332f86d2562af9e3452e19dc3d5935",
      "LastModified" : "2015-12-16T21:19:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/search/CMakeLists.txt" : {
      "ObjectId" : "5e72f507b2c9e03ad24ab59d3a92c00602c4977f",
      "LastModified" : "2016-06-28T15:59:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## == Project ==\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Collect source files needed for the active plugins.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## == Includes ==\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## == Libraries ==\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On Linux, find the rt library for clock_gettime().\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On Windows, find the psapi library for determining peak memory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If any enabled plugin requires an LP solver, compile with all\n\n# available LP solvers. If no solvers are installed, the planner will\n\n# still compile, but using heuristics that depend on an LP solver will\n\n# cause an error. This behavior can be overwritten by setting the\n\n# option USE_LP to false.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note that basic OSI libs must be added after (!) all OSI solver libs.\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "src/search/DownwardFiles.cmake" : {
      "ObjectId" : "3e8c6b33aece4e449e27429167af1cdffc0fdacd",
      "LastModified" : "2016-08-19T10:00:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See http://www.fast-downward.org/ForDevelopers/AddingSourceFiles\n\n# for general information on adding source files and CMake plugins.\n\n#\n\n# If you're adding a file to the codebase which *isn't* a plugin, add\n\n# it to the following list. We assume that every *.cc file has a\n\n# corresponding *.h file and add headers to the project automatically.\n\n# For plugin files, see below.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Details of the plugins\n\n#\n\n# For now, everything defaults to being enabled - it's up to the user to specify\n\n#    -DPLUGIN_FOO_ENABLED=FALSE\n\n# to disable a given plugin.\n\n#\n\n# Defining a new plugin:\n\n#    fast_downward_plugin(\n\n#        NAME <NAME>\n\n#        [ DISPLAY_NAME <DISPLAY_NAME> ]\n\n#        [ HELP <HELP> ]\n\n#        SOURCES\n\n#            <FILE_1> [ <FILE_2> ... ]\n\n#        [ DEPENDS <PLUGIN_NAME_1> [ <PLUGIN_NAME_2> ... ] ]\n\n#        [ DEPENDENCY_ONLY ]\n\n#        [ CORE_PLUGIN ]\n\n#    )\n\n#\n\n# <DISPLAY_NAME> defaults to lower case <NAME> and is used to group\n\n#                files in IDEs and for messages.\n\n# <HELP> defaults to <DISPLAY_NAME> and is used to describe the cmake option.\n\n# DEPENDS lists plugins that will be automatically enabled if this plugin\n\n# is enabled. If the dependency was not enabled before, this will be logged.\n\n# DEPENDENCY_ONLY disables the plugin unless it is needed as a dependency and\n\n#     hides the option to enable the plugin in cmake GUIs like ccmake.\n\n# CORE_PLUGIN enables the plugin and hides the option to disable it in\n\n#     cmake GUIs like ccmake.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This option should not show up in cmake GUIs like ccmake where all\n\n# plugins are enabled or disabled manually.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The order in PLANNER_SOURCES influences the order in which object\n\n# files are given to the linker, which can have a significant influence\n\n# on performance (see issue67). The general recommendation seems to be\n\n# to list files that define functions after files that use them.\n\n# We approximate this by reversing the list, which will put the plugins\n\n# first, followed by the core files, followed by the main file.\n\n# This is certainly not optimal, but works well enough in practice.\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 8,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 3789
}