{
  "Repository" : "19343319",
  "Revision" : "HEAD",
  "ObjectId" : "fe3cfd14873ae08ec1537bf69a08d45a5919a12b",
  "CommitTime" : "2019-04-15T18:22:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "5c771d88e4e151bc38ce18ad79cdd5d974b1bc08",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Master AtomSpace CMake file.\n\n#\n\n# General organization:\n\n# -- check for different compilers, OS'es\n\n# -- search for various required & optional libraries/tools\n\n# -- decide what to build based on above results.\n\n# -- configure various config files.\n\n# -- print pretty summary\n\n#\n\n# cogutils already requires 2.8.12.2, so may as well ask for that.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------\n\n# User-modifiable options. Feel free to change these!\n\n#\n\n# Uncomment to be in Release mode [default].\n\n# SET(CMAKE_BUILD_TYPE Release)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Uncomment to build in debug mode.\n\n# SET(CMAKE_BUILD_TYPE Debug)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment to be in coverage testing mode.\n\n# SET(CMAKE_BUILD_TYPE Coverage)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Uncomment to build in profile mode.\n\n# SET(CMAKE_BUILD_TYPE Profile)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Uncomment to build in release mode with debug information.\n\n# SET(CMAKE_BUILD_TYPE RelWithDebInfo)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# default build type\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ===============================================================\n\n# Detect different compilers and OS'es, tweak flags as necessary.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The default case for non-profile builds is to use shared libraries. So don't\n\n# use explicit SHARED in the ADD_LIBRARY calls in CMakeLists.txt instances or\n\n# this flag won't work since it only affects the default.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ----------------------------------------------------\n\n# Do the windows build.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#   SET(WIN32 1)\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# It is \"not unix\" when the code is compiled under windows but not\n\n# under cygwin\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# ===============================================================\n\n# Check for existance of various required, optional packages.\n\n# Listed in alphabetical order, more or less.\n\n# CogUtil must come first, because it supplies various FindXXX macros.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add the 'lib' dir to cmake's module search path\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Cogutil\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# add the 'cmake' directory from cogutil to search path\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ----------------------------------------------------------\n\n# Check for boost. We need dynamic-linked, threaded libs by default.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Required boost packages\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Atomspace won't compile with Boost 1.51, some kind of conflict with\n\n# hash functions, see github bugs 1 and 36\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Arghhh. Except cmake is treating above as required, not optional. #$%**&\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ----------------------------------------------------------\n\n# Needed for unit tests.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ----------------------------------------------------------\n\n# Optional, unused distributed processing framework.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ----------------------------------------------------------\n\n# This is required for Guile\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Gnu Guile scheme interpreter. Mandatory\n\n# Version 2.2.2 is needed for mrs io ports, compilation, atomics, nlp\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ----------------------------------------------------------\n\n# Google Protobuf library\n\n# The protocol buffer compiler is needed for ZMQ-based persistence.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# If we are here, then we are missing either the libraries, or the\n\n# compiler. React appropriately.\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# ----------------------------------------------------------\n\n# Python and Cython\n\n#\n\n# NOTE: Python interpreter is needed for runing python unit tests,\n\n# and for running the FindCython module.\n\n#\n\n# Search for Python3 first, and use that, if found. Else use Python2.\n\n# To use Python2 only from the build directory run the following\n\n# rm CMakeCache.txt && cmake -DCMAKE_DISABLE_FIND_PACKAGE_Python3Interp=TRUE ..\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Cython is used to generate python bindings.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Find python destination dir for python bindings\n\n# because it may differ on each operating system.\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Chop off leading /usr\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Replace new line at end\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# thunk\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Nosetests will find and automatically run python tests.\n",
        "Line" : 292,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# ----------------------------------------------------------\n\n# Glasgow Haskell compiler\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ----------------------------------------------------------\n\n# Optional/deprecated ODBC.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ----------------------------------------------------------\n\n# Mandatory Postgres\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ----------------------------------------------------------\n\n# Optional, currently needed only to hush up DRD in util/Logger.cc\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ----------------------------------------------------------\n\n# Optional and almost obsolete...\n\n# Remove after the REST interfaces get fixed.\n\n# ZeroMQ\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ===============================================================\n\n# Get atomspace version\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# NOTE: This is the official semantic-version, as it is derived from\n\n# a version-control independent means of declaring versioning.\n\n#\n\n# TODO: Once CMAKE_MINIMUM_REQUIRED >= 3.0.2 check use of policy\n\n# CMP0048.\n\n#\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ===================================================================\n\n# Global includes\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# -------------------------------------------------\n\n# Include configuration.\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Set default include paths.\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Macros that define how atom types get declared.\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# -------------------------------------------------\n\n# Library configuration\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Small hack to handle unixes that use \"/usr/lib64\" instead of\n\n# \"/usr/lib\" as the default lib path on 64 bit archs.\n\n#\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# RPATH handling (see https://cmake.org/Wiki/CMake_RPATH_handling)\n\n# Note: RPATH only supported under Linux!\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# -------------------------------------------------\n\n# Install configuration\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Only list install files that have actually changed.\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Set confdir and datadir.\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# (re?)define MAN_INSTALL_DIR\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# ==========================================================\n\n# Decide what to build, based on the packages found.\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Both protobuf and also zmq are needed to build ZMQ API.\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# doing coverage stuff while running tests if this is the Coverage build\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# TODO lcov should be found by cmake first\n\n# TODO set it up so that we can pick to run coverage per test, or\n\n# combined across all tests (the latter is MUCH faster). Use a define?\n\n# There is coverage specific stuff in AddCxxTest.cmake now...\n\n# -\n",
        "Line" : 479,
        "CharPositionInLine" : 3
      },
      "55" : {
        "Text" : "# This script combines the coverage analysis of each test,\n\n# then creates html in tests/lcov\n\n# COMMAND genhtml -o ../lcov -t \"All AtomSpace unit tests\" *.info\n",
        "Line" : 491,
        "CharPositionInLine" : 3
      },
      "56" : {
        "Text" : "# Coverage is disabled; test normally\n",
        "Line" : 498,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# COMMAND ${CMAKE_CTEST_COMMAND} --force-new-ctest-process $(ARGS)\n",
        "Line" : 502,
        "CharPositionInLine" : 3
      },
      "58" : {
        "Text" : "# using CMAKE_BUILD_TOOL results in teh cryptic error message\n\n# warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.\n\n# This is because make doesn't know how to pass jobserver args to\n\n# the submake.  So, instead, just use $(MAKE) (with round parens)\n\n# -- that will do the right thing.\n\n# COMMAND ${CMAKE_BUILD_TOOL}\n",
        "Line" : 529,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# ===============================================================\n\n# Packaging\n\n## Architecture the package is for.\n\n## TODO: Will give error on non debian distros, fix it.\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# If 'sudo make install' is run before 'make package', then install_manifest.txt\n\n# will be owned by root. Creating the file during configuration stage ensures\n\n# that is owned by the builder thus avoiding 'Permission denied' error when\n\n# packaging\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "## Cpack configuration\n",
        "Line" : 562,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "## Debian specific configurations\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# ===================================================================\n\n# Documentation.\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# ===================================================================\n\n# Show a summary of what we found, what we will do.\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 65
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "acfeeb373fbd0900e46c5b5ae6dd45c3374a7c33",
      "LastModified" : "2018-11-30T10:01:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCogAtomTypes.cmake" : {
      "ObjectId" : "e8e794f0718259e532c31f3e37c1a41fb800ef6b",
      "LastModified" : "2019-01-24T14:28:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Definitions for automatically building the atom_types files, given\n\n# a master file \"atom_types.script\" that defines all of the type\n\n# relationships.\n\n# Macro example call:\n\n# OPENCOG_ADD_ATOM_TYPES(\n\n#        SCRIPT_FILE\n\n#        HEADER_FILE\n\n#        DEFINITIONS_FILE\n\n#        INHERITANCE_FILE\n\n#        SCM_FILE\n\n#        PYTHON_FILE)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need to touch the class-server before doing anything.\n\n# This is in order to guarantee that the main atomspace types\n\n# get created before other derived types.\n\n#\n\n# There's still a potentially nasty bug here: if some third types.script\n\n# file depends on types defined in a second file, but the third initializer\n\n# runs before the second, then any atoms in that third file that inherit\n\n# from the second will get a type of zero.  This will crash code later on.\n\n# The only fix for this is to make sure that the third script forces the\n\n# initailzers for the second one to run first. Hopefully, the programmer\n\n# will figure this out, before the bug shows up. :-)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this regular expression is more complex than required due to cmake's\n\n# regex engine bugs\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set type name using camel casing\n",
        "Line" : 112,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Try to guess if the thing is a node or link based on its name\n",
        "Line" : 138,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# If not explicitly named, assume its a link. This is kind of\n\n# hacky, but is needed for e.g. \"VariableList\" ...\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Print out the scheme definitions\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Print out the python definitions. Note: We special-case Atom\n\n# since we don't want to create a function with the same\n\n# identifier as the Python Atom object.\n",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Single arg will work as all of value constructors has\n\n# single argument: either value or vector.\n",
        "Line" : 188,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# If not named as a node or a link, assume its a link\n\n# This is kind of hacky, but I don't know what else to do ...\n",
        "Line" : 204,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# skip inheritance of the special \"notype\" class; we could move\n\n# this test up but it was left here for simplicity's sake\n",
        "Line" : 220,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 11
    },
    "cmake/OpenCogFunctions.cmake" : {
      "ObjectId" : "03c4a4071f406b75a0491e8b8f5e87d746b87116",
      "LastModified" : "2019-02-04T18:49:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2016 OpenCog Foundation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# References:\n\n# https://www.gnu.org/software/guile/manual/guile.html#Modules-and-the-File-System\n\n# https://www.gnu.org/software/guile/manual/guile.html#Creating-Guile-Modules\n\n# https://www.gnu.org/software/guile/manual/guile.html#Installing-Site-Packages\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Definitions:\n\n#\n\n# * MODULE_FILE: The name of the file that defines the module. It has\n\n#   the same name as the directory it is in, or the name of the parent\n\n#   directory of current directory if it is in a folder named 'scm'.\n\n#   In addition this file shoule have a define-module expression\n\n#   for it be importable, as per guile's specification. See reference\n\n#   links above.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# By default Guile return the path to its installation location.\n\n# Such path will not work for users who wants to compile and install\n\n# the project with a custom CMAKE_INSTALL_PREFIX. Compiling with \n\n# custom PREFIX is a common practice. To support custom PREFIX \n\n# this condition is added to override GUILE_SITE_DIR value using\n\n# `cmake -DGUILE_SITE_DIR=...`.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# This configures the install and binary paths for each file, passed to it,\n\n# based on the value of the variables MODULE_NAME, MODULE_FILE_DIR_PATH and\n\n# MODULE_DIR_PATH in the PARENT_SCOPE.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy files into build directory mirroring the install path structure,\n\n# and also set the install path.\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# When building, all files specifed are are copied to\n\n# '${CMAKE_BINARY_DIR}/opencog/scm' following the file tree structure created\n\n# when installing to /usr/local/share/opencog/scm. It has three keyword arguments\n\n#\n\n# FILES: List of files to be installed/copied\n\n#\n\n# MODULE_DESTINATION: The absolute path where the files associated\n\n#   with the module are installed, with the exception of the\n\n#   MODULE_FILE(see definition at top of this file). The path for\n\n#   MODULE_FILE, is inferred from this argument, even if it is the only file to\n\n#   be installed.\n\n#\n\n# DEPENDS: The name of a target that generates a scheme file that is to be\n\n# installed. This is an optional argument only required for generated files.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Define the target that will be used to copy scheme files in the current\n\n# source directory to the build directory. This is done so as to be able to\n\n# run scheme unit-tests without having to run 'make install'.\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# This is used only as a place-holder\n",
        "Line" : 91,
        "CharPositionInLine" : 21
      },
      "9" : {
        "Text" : "# NOTE:  The keyword arguments 'FILES' and 'MODULE_DESTINATION' are\n\n# required.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# FILE_PATH is used for variable name because files in\n\n# sub-directories may be passed.\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Check if the file exists or is generated, and set FULL_DIR_PATH\n\n# or target dependencies.\n",
        "Line" : 107,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Specify module paths.\n",
        "Line" : 126,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# MODULE_NAME: it is equal to the MODULE_DESTINATION directory name\n\n# MODULE_FILE_DIR_PATH: the directory path where the MODULE_FILE is\n\n#   installed.\n\n# MODULE_DIR_PATH: the directory path where the files associated\n\n#   with the module are installed at and copied to, with the exception\n\n#   of the MODULE_FILE.\n",
        "Line" : 131,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# NOTE: The install configuration isn't part of\n\n# PROCESS_MODULE_STRUCTURE function so as to avoid \"Command\n\n# INSTALL() is not scriptable\" error, when using it in copying\n\n# scheme files during code-generation by the OPENCOG_ADD_ATOM_TYPES\n\n# macro.\n",
        "Line" : 142,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# srfi-64 is installed in guile 2.2 and above, thus check for it.\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Check if the file exists in the current source directory.\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 17
    },
    "cmake/OpenCogMacros.cmake" : {
      "ObjectId" : "3b4e0bb33c9738fe89f7feccfc0a910de682c33c",
      "LastModified" : "2018-11-30T15:24:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "0cb050c02b7ffffe1c4a62f9063c2a36a0328e55",
      "LastModified" : "2018-11-30T10:01:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# COMMAND bzr nick\n\n# This will get the current branch name; I think that is what is wanted?\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "doc/HaskellDoc.cmake" : {
      "ObjectId" : "b7d4d81c6775c9dda379b543ad4aa0b94aca0977",
      "LastModified" : "2018-11-30T10:01:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "7eb8f4465c8be8549bfe2cf4911d103582e3aecc",
      "LastModified" : "2019-02-19T15:35:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/c++-api/CMakeLists.txt" : {
      "ObjectId" : "36195774507a64f17b20802425c7f0f0955c1b6d",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/c++-guile/CMakeLists.txt" : {
      "ObjectId" : "35bf812588bfb6be0b7594ea43c89f5eeeb40d1c",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is what the install should look like.\n\n# INSTALL (TARGETS example DESTINATION \"lib${LIB_DIR_SUFFIX}/opencog\")\n\n# INSTALL (FILES opencog/example.scm DESTINATION \"${GUILE_SITE_DIR}/opencog\")\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "5564f670f921163faf96f7a1c78844f57f138e43",
      "LastModified" : "2018-12-14T19:17:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Create a test configuration file by copying the default config file\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build_type is used in AtomSpaceConfig.cmake.in\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "opencog/CMakeLists.txt" : {
      "ObjectId" : "7b144478b505db0f8808eae2ff57a46a7811086f",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The build order used here is loosely in terms of \n\n# dependencies: the later parts depend on, or may\n\n# someday depend on the earlier parts.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Extension language support\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Haskell bindings.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "opencog/atoms/CMakeLists.txt" : {
      "ObjectId" : "5551ac726724e412ba57c56ac98624c044b808f5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/atoms/atom_types/CMakeLists.txt" : {
      "ObjectId" : "22479330c1200fed4adc73360626063914c1c8c5",
      "LastModified" : "2018-12-21T07:32:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install the auto-generated atom types as well\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "opencog/atoms/base/CMakeLists.txt" : {
      "ObjectId" : "dfd323091f1813be5b32209bf4f39dee96df4b8c",
      "LastModified" : "2018-12-14T19:17:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "opencog/atoms/core/CMakeLists.txt" : {
      "ObjectId" : "0097461720d4abb1e817f8cd11be1ff1c50193d1",
      "LastModified" : "2019-02-17T02:21:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "opencog/atoms/execution/CMakeLists.txt" : {
      "ObjectId" : "b604864bcd3cda3bc99ec7c6c6c2d438efe96b5f",
      "LastModified" : "2019-02-04T23:18:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This does not belong, but cannot be fixed until the Python bindings\n\n# are fixed, first.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "opencog/atoms/pattern/CMakeLists.txt" : {
      "ObjectId" : "61dac4f281d2a0748ecd3dd5b5c5b0cc109b822a",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "opencog/atoms/reduct/CMakeLists.txt" : {
      "ObjectId" : "88b3309fc2b1c637594afcddc097ba5770e33c33",
      "LastModified" : "2018-12-14T19:17:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "opencog/atoms/truthvalue/CMakeLists.txt" : {
      "ObjectId" : "f2b3a79785a36f51df69fc3d5688725941bbbe98",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "opencog/atoms/value/CMakeLists.txt" : {
      "ObjectId" : "de65568d59d7703b2e429cce43d091bea4645b24",
      "LastModified" : "2018-12-14T19:17:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "opencog/atomspace/CMakeLists.txt" : {
      "ObjectId" : "da6581b8d1c844c51324a3d3b1f5e2f98b705f37",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without this, parallel make will race and crap up the generated files.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We want to list every possible library that defines some\n\n# atom type, so that the library ctors will run, and add those\n\n# atom types to the classserver. If this is not done, then the\n\n# classserver will fail to run atom factories, viz, will fail\n\n# to run the ctors for C++-backed atom types, resulting in\n\n# screwball failures.\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "opencog/atomspaceutils/CMakeLists.txt" : {
      "ObjectId" : "a0b802376c5b95f4c895f7b8d2eff2208a3e9507",
      "LastModified" : "2018-11-30T10:01:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/cython/CMakeLists.txt" : {
      "ObjectId" : "1f3d91582b049f4bbadb7191912257344990935e",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Need to use -fno-strict-aliasing when compiling cython code, in order\n\n# to avoid nasty compiler warnings about aliasing.  Cython explicitly\n\n# performs aliasing, in order to emulate python object inheritance.\n\n# See, for example, https://groups.google.com/forum/#!topic/cython-users/JV1-KvIUeIg\n\n#\n\n# Also suppress unused function warnings for static functions, since\n\n# Cython generates a static function that it puts in a header which\n\n# causes this warning to appear whenever anyone includes the header\n\n# and doesn't use all the functions.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Python Module init\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------\n\n# The scheme wrapper for PythonEval. Allows python snippets to be\n\n# called from scheme.\n\n#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "opencog/cython/opencog/CMakeLists.txt" : {
      "ObjectId" : "bbd2e47878ee532eed17c85241c6fcd09929c68f",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Need to use -fno-strict-aliasing when compiling cython code, in order\n\n# to avoid nasty compiler warnings about aliasing.  Cython explicitly\n\n# performs aliasing, in order to emulate python object inheritance.\n\n# See, for example,\n\n# https://groups.google.com/forum/#!topic/cython-users/JV1-KvIUeIg\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cythonizes one .pyx file into a .cpp file\n\n# Additional arguments are dependencies\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow the user to specify dependencies as optional arguments\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Use this as a guide:\n\n# https://github.com/OpenKinect/libfreenect/blob/master/wrappers/python/CMakeLists.txt\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################### logger ##########################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################### atomspace ####################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list(APPEND ADDITIONAL_MAKE_CLEAN_FILES \"atomspace.cpp\")\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# opencog.atomspace Python bindings\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The atomspace_api.h must be generated before PythonEval is compiled, thus\n\n# this phony-target is created. Why not add_dependencies between PythonEval\n\n# and atomspace_cython? -> Because that results in a cyclic dependency.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# XXX FIXME Cython should not static link the atom-types, but\n\n# but should instead dynamic-load them, as needed.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The cogserver needs the atomspace pxd file to get the Handle, Atom and\n\n# AtomSpace defintions during compilation. So this must be installed.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "############################## type constructors #####################\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "############################## utilities #####################\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "############################## bindlink #####################\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "############################## scheme wrapper #####################\n",
        "Line" : 189,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "##################### URE #####################\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# opencog.ure Python bindings\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##################################################\n\n# Tell python where to find modules.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "opencog/eval/CMakeLists.txt" : {
      "ObjectId" : "45af5bd0ead397b98af088d42aa4e7c7e72d835a",
      "LastModified" : "2018-11-30T10:01:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/guile/CMakeLists.txt" : {
      "ObjectId" : "cb3541d983d68bca6d8e11d242bbc12bf1350f3e",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We want to list every possible library that defines some\n\n# atom type, so that the library ctors will run, and add those\n\n# atom types to the classserver. If this is not done, then the\n\n# classserver will fail to run atom factories, viz, will fail\n\n# to run the ctors for C++-backed atom types, resulting in\n\n# screwball failures.\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "opencog/guile/modules/CMakeLists.txt" : {
      "ObjectId" : "6626e1de7585152726dd58e55cfccd0adb519389",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for cog-ure-logger XXX FIXME this is insane. WTF!??\n",
        "Line" : 15,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 1
    },
    "opencog/haskell/CMakeLists.txt" : {
      "ObjectId" : "cfdb5bb1d10bde23c44ca3d914a53aee37edc17c",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/matrix/CMakeLists.txt" : {
      "ObjectId" : "c2c86cf66e5ae1d7812771c4999ed62a5cd10c64",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/persist/CMakeLists.txt" : {
      "ObjectId" : "9460d826460c99e69c4a1e74c68d8d77d002a88c",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/persist/gearman/CMakeLists.txt" : {
      "ObjectId" : "e76f09adb3adcc8e153cd8497bd9f51fa3caad85",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build the GearMan based distributed system.\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "opencog/persist/guile/CMakeLists.txt" : {
      "ObjectId" : "cd322238696f0767d48330491b4740fd86e00acf",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/persist/sql/CMakeLists.txt" : {
      "ObjectId" : "534d944c5996a4bb75d035dd3f133307033fca37",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/persist/sql/multi-driver/CMakeLists.txt" : {
      "ObjectId" : "63e08fce053e3a90c64a103232033e506cadcc59",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Uncomment this if SQL is installed.\n\n# ADD_DEFINITIONS(-DHAVE_SQL_STORAGE)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "opencog/persist/zmq/CMakeLists.txt" : {
      "ObjectId" : "f74dda4ca7d49e8c9aad6cce1d54764b3c1eff7e",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/persist/zmq/atomspace/CMakeLists.txt" : {
      "ObjectId" : "6766c51037afe797d3159728d5fdb1c050b5d9f5",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate the .pb.h and .pb.cc files dynamically.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "opencog/query/CMakeLists.txt" : {
      "ObjectId" : "e488db4e388dcea817a17ec8404f2b57bf0cd566",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build the query-engine library\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "opencog/scm/CMakeLists.txt" : {
      "ObjectId" : "b32c7b8e828bfd64ffefcde0034c8e2dda0f22af",
      "LastModified" : "2019-04-02T09:23:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No CMakeLists.txt in dir:\n\n#ADD_SUBDIRECTORY (wires)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These guile modules spew \"libBlahBlah.so not found\" errors,\n\n# if the user failed to actually build the needed component.\n\n# So, do not install them if the component is missing.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "opencog/sheaf/CMakeLists.txt" : {
      "ObjectId" : "cb81fafb62101f996ca74e401efbebda56cf4703",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/unify/CMakeLists.txt" : {
      "ObjectId" : "9022d37fbfea4f38193a59ce33d166f413d672b5",
      "LastModified" : "2019-03-02T03:43:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/ure/CMakeLists.txt" : {
      "ObjectId" : "b6fbf6e87783c8ea1878762bf8c6805d1044e5cc",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Rule engine lib build\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "opencog/ure/backwardchainer/CMakeLists.txt" : {
      "ObjectId" : "6517d8cac37b41ab0bf45b4bb1434d3802d55016",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opencog/ure/forwardchainer/CMakeLists.txt" : {
      "ObjectId" : "a0db2eecf710e56816173477a1596df1d1018832",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "e5a1099fc42241f4a66960718150b5b83283bcc2",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The atom_types.h file is written to the build directory\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Perform tests in component-dependency order, as much as possible.\n\n# For example, since most things depends on the atomspace,\n\n# its is tested first.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Persistence is for saving/restoring atomspace to disk.\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# guile provides scheme bindings for the atomspace.\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Many of the query tests require a working guile, so run\n\n# these only after guile has been tested.\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Reasoning depends on query, above.\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "tests/atoms/CMakeLists.txt" : {
      "ObjectId" : "b255ff88865540dcf584dce76b27ec30243b50fc",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/atoms/atom_types/CMakeLists.txt" : {
      "ObjectId" : "691141d1ee94ca58457847dcdfe8cec76d9c1eea",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/atoms/base/CMakeLists.txt" : {
      "ObjectId" : "0777b9a698c72a744a5e5c4851bfae2bb1929c31",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/atoms/core/CMakeLists.txt" : {
      "ObjectId" : "ce17a959707aead6a9e411bf66567ac4354bcdbf",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/atoms/truthvalue/CMakeLists.txt" : {
      "ObjectId" : "6762054ffdd71d4d89e7cd0d12ca5030a08de2f9",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ADD_CXXTEST(IndefiniteTruthValueUTest)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/atoms/value/CMakeLists.txt" : {
      "ObjectId" : "0cd01d87d987f7e0242743232115a59c2c9909fb",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/atomspace/CMakeLists.txt" : {
      "ObjectId" : "bf0daf421dee13e2ab188e00abb1de586d6bc41c",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The ValuationTable is no longer used or even built, so don't test it.\n\n# ADD_CXXTEST(ValuationTableUTest)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/atomspaceutils/CMakeLists.txt" : {
      "ObjectId" : "a842aa8b94ff1999ed3a5abf2c6c6be8f0bad0d2",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/cython/CMakeLists.txt" : {
      "ObjectId" : "6e46e808c99dd8839bd852b8bb0cd9314ceea849",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The PythonEvalUTest tests PythonEval independent of the CogServer. It depends\n\n# on the server being around for the Scheme code but it does not message\n\n# through a \"py-eval\" server request.\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The PythonUtilitiesUTest tests C++ utility functions used from Cython bindings\n\n# outside of those bindings so failures are easier to debug.\n\n#\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Basic test, just does the cython wrapper for opencog/util\n",
        "Line" : 63,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# All of the subsequent cython unit tests  depend on having\n\n# guile working. So test guile first, and then the others.\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "tests/haskell/CMakeLists.txt" : {
      "ObjectId" : "1ec894b768a53a768ee07b274c7284c3612275d8",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/haskell/executionTestLib/CMakeLists.txt" : {
      "ObjectId" : "eac31067c8d47aaa2e6df6293bccba5af42cdd13",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/haskell/haskellTest/CMakeLists.txt" : {
      "ObjectId" : "39b6b2fb8c5eb5d2584b47a1e138e7df962356f0",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#The Code does not actually depend on haskell-atomspace-test\n\n#but we can't build both at the same time\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/matrix/CMakeLists.txt" : {
      "ObjectId" : "95d2bd2751d2cec62a13bb99f07c69cc36102093",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/persist/CMakeLists.txt" : {
      "ObjectId" : "332a480f76dcba9681e81befefffa9d96ac2b54e",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/persist/gearman/CMakeLists.txt" : {
      "ObjectId" : "261889f69e861f3a4f6300bc1b98875b5ae6e53b",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that the Gearman job server is running.\n\n# See the README file for details.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/persist/sql/CMakeLists.txt" : {
      "ObjectId" : "243c3f895af96b69b9e04b5a6a6acd4d03387ca7",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# If SQL is not installed, then don't build the tests.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/persist/sql/multi-driver/CMakeLists.txt" : {
      "ObjectId" : "4ff3fe9567832f6df24f959a73daec8b59087564",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Immediately below is some complicated cmake junk to detect if SQL is\n\n# correctly comfigured.  If it is configured, then DB_IS_CONFIGURED\n\n# is set, and the unit tests are executed. If not, then not.  This\n\n# avoids having the unit tests fail for those users who have not\n\n# configured SQL.  To configure SQL, see the README file, and then\n\n# re-run cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Arghhhh. This is painfully wrong. Forcing -h locahost makes it\n\n# use tcpip instead of unix domain sockets; to get tcpip to work,\n\n# users have to alter pg_hba.conf.\n",
        "Line" : 21,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Check the return code from PSQL; if it failed, try a second time.\n\n# The most likely cause of failure is that \"-h localhost\" requires\n\n# a tcp socket to be open; it might not be. So we retest; then,\n\n# without the PGHOST and without the \"-h localhost\", the unix-domain\n\n# socket will get used.\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Check the return code from PSQL\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If above doesn't work, then uncomment this line.\n\n# SET(DB_IS_CONFIGURED 1)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Hacky attempt to try to make unit tests run in series\n\n# and not in parallel. ... make each depend on the last one.\n\n# They cannot be run in parallel, they all use the same database.\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "tests/query/CMakeLists.txt" : {
      "ObjectId" : "405fd21e6c4a9d8fe8a83fb886c3cc6144d212af",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We want to run the tests in the order below;\n\n# Each test gets progressively more complex, and exercises\n\n# features that the later tests depend on.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These are NOT in alphabetical order; they are in order of\n\n# simpler to more complex.  Later test cases assume features\n\n# that are tested in earlier test cases.  DO NOT reorder this\n\n# list unless you are sure of what you are doing.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Run only the tests in this subdirectory\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/scm/CMakeLists.txt" : {
      "ObjectId" : "c3326354935b4074f7faf050ba06224b1c7861c4",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The SCMOpencogTestRunnerFail fails purposely, as it is testing that the\n\n# scheme opencog-test-runner exits properly; thus requiring the flipping\n\n# of the test result by setting its properties.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure LD_LIBRARY_PATH for loading the libraries used by the guile code,\n\n# so as to make it possible to run tests before executing \"make install\".\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Guile-python bridge requires python\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/unify/CMakeLists.txt" : {
      "ObjectId" : "78843591d1c1d19f6f131bfdabab2f26ead481c1",
      "LastModified" : "2019-04-01T12:00:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/ure/CMakeLists.txt" : {
      "ObjectId" : "83756c4230e20d038110a391780a9446b183a26a",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Run the tests in logical order, not alphabetical order:\n\n# The URE reader has to work, else the chainers will fail\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/ure/backwardchainer/CMakeLists.txt" : {
      "ObjectId" : "0472ce53ff8d6f0b1e2a9de3d223083c2d0aac3a",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/ure/forwardchainer/CMakeLists.txt" : {
      "ObjectId" : "a758174905b11c65d000452f8f0b8e2b0e0adafd",
      "LastModified" : "2019-04-02T08:15:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 68
  },
  "ElapsedTime" : 10823
}