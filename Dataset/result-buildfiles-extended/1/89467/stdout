{
  "Repository" : "89467",
  "Revision" : "HEAD",
  "ObjectId" : "4c19e0775a576c1657160747ce2a081226f323de",
  "CommitTime" : "2017-09-11T12:01:36Z",
  "Files" : {
    "Apps/Benches/CMakeLists.txt" : {
      "ObjectId" : "17bd1480d00db55b56a1adaba29f34d357f30209",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/CMakeLists.txt" : {
      "ObjectId" : "6cbc10228bd40ab5d3f7ad59fb8dd05cec5c1bd5",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# topology container utils include by dependencies\n",
        "Line" : 7,
        "CharPositionInLine" : 22
      },
      "1" : {
        "Text" : "# Release/Debug added automatically by visual\n",
        "Line" : 15,
        "CharPositionInLine" : 72
      },
      "2" : {
        "Text" : "# Release/Debug added automatically by visual\n",
        "Line" : 18,
        "CharPositionInLine" : 53
      },
      "3" : {
        "Text" : "#include_directories(\n\n#\t${CGoGN_ROOT_DIR}/include\n\n#\t${CGoGN_EXT_INCLUDES})\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Apps/Examples/CMakeLists.txt" : {
      "ObjectId" : "f7d911512e151d6b6925ceab47548006312ee1f9",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define includes path\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#define exec to compile\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#need to define that we use Qt (only once per cmake directory!)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Apps/SandBox/CMakeLists.txt" : {
      "ObjectId" : "5df64eced1ef4a100e77fafb9cd8d5e7d58dc895",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Example with Qt\n\n#\n\n#qt_wrap_cpp(tuto1_moc tuto1.h)\n\n#add_executable( tuto1 tuto1.cpp ${tuto1_moc})\n\n#target_link_libraries( tuto1 ${CGoGN_LIBS}  ${CGoGN_EXT_LIBS} )\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Apps/Tests/Algo/BooleanOperator/CMakeLists.txt" : {
      "ObjectId" : "0a9e9c7ce9595227c8e515e56eae6a41c1e9fd32",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/CMakeLists.txt" : {
      "ObjectId" : "31421e7e33b130bb8417e30c3ffc4d599782a690",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(ImplicitHierarchicalMesh)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory(Multiresolution)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Apps/Tests/Algo/Decimation/CMakeLists.txt" : {
      "ObjectId" : "f9699e0cc476622dd71520202b0d2dbd7a72d0dd",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Export/CMakeLists.txt" : {
      "ObjectId" : "ed8c04e9ef0cd2567c517b7d2e9ffc4e117790bd",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Filtering/CMakeLists.txt" : {
      "ObjectId" : "989ef4f79c624e12a11b0f4879e9b9d84f5c75d3",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Geometry/CMakeLists.txt" : {
      "ObjectId" : "73ee0920f51db5dcb862088ca88437ba8f593f1e",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Histogram/CMakeLists.txt" : {
      "ObjectId" : "05f52cbae48b1988284d045338988044bd85b0c1",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Import/CMakeLists.txt" : {
      "ObjectId" : "c99b1bccef8e6152e9b8ec559a87cdd7b0dd0da8",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#AHEMImporter.cpp\n\n#AHEMImporterDefAttr.cpp\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#importSvg\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Apps/Tests/Algo/LinearSolving/CMakeLists.txt" : {
      "ObjectId" : "93ab3e2135b6f7a8925d8d7f4e729d9d0b1d37af",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/MC/CMakeLists.txt" : {
      "ObjectId" : "338e06e3fbc24f6e1887e7098bcbac19a08c7625",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Modelisation/CMakeLists.txt" : {
      "ObjectId" : "7544fe3234eca20b0ef4e8d5aa2a947c2304f551",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/MovingObjects/CMakeLists.txt" : {
      "ObjectId" : "2add0cdfef38d89eaec517077991869faef0bc1a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/ProgressiveMesh/CMakeLists.txt" : {
      "ObjectId" : "aa0c6e87bc1fdf5ea04f8c7cf860b3efa44954ec",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Remeshing/CMakeLists.txt" : {
      "ObjectId" : "44137027ca2b8553b6d3e4aad9fb2133290ee46d",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Render/CMakeLists.txt" : {
      "ObjectId" : "e5319093323e62a18ea301f39e92dfd58413124a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Selection/CMakeLists.txt" : {
      "ObjectId" : "ce55c79c35665a928e592b5d6cd52dc3fe4e10f5",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Simulation/CMakeLists.txt" : {
      "ObjectId" : "5415476fe5de19dd13f30d0546d3a392423dc639",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Tiling/CMakeLists.txt" : {
      "ObjectId" : "edcb7a229c6503ac78feb9e5d61e85e5e7c81205",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Algo/Topo/CMakeLists.txt" : {
      "ObjectId" : "25fb22a6a84094ea2c9266569e417a71c7acf39e",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/CMakeLists.txt" : {
      "ObjectId" : "2d805eb950b75de4a0b58e610c5b3ac13712f47f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#define exec to compile\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Apps/Tests/Container/CMakeLists.txt" : {
      "ObjectId" : "8b0149b83292dce047b7727d19226f6d7284f6c3",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Geometry/CMakeLists.txt" : {
      "ObjectId" : "0b07614818f8c30e6bb4210d470c44bf4b78f0d0",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tests/Utils/CMakeLists.txt" : {
      "ObjectId" : "8bf0002ebf3e7e304d924930fe4a523c5374e2a1",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\tshared_mem.cpp\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Apps/Tuto/Attributes/CMakeLists.txt" : {
      "ObjectId" : "ead80f3ddd1d4cbfc84a0e234851bdd75be33012",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tuto/Boundary/CMakeLists.txt" : {
      "ObjectId" : "b86138a4cdd89db86fb8eb1321d7c2f8bdbbd2a8",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tuto/CMakeLists.txt" : {
      "ObjectId" : "7b349be461fa1e862b77865b76dddf43bae0d3a1",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#define exec to compile\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tqt_wrap_cpp(tp_master_moc tp_master.h)\n\n#\tadd_executable( tp_master tp_master.cpp ${tp_master_moc})\n\n#\ttarget_link_libraries( tp_master ${CGoGN_LIBS}  ${CGoGN_EXT_LIBS}  )\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Apps/Tuto/Markers/CMakeLists.txt" : {
      "ObjectId" : "7b006778f91421c6a3aa52c6f465f5b39272dd26",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tuto/Modelling/CMakeLists.txt" : {
      "ObjectId" : "894724cf57169e758c09edc416ef27b72e0a09bb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Apps/Tuto/Traversals/CMakeLists.txt" : {
      "ObjectId" : "8c4f9736d59dedbc64a39452b74da7233300433e",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CGoGN/CMakeLists.txt" : {
      "ObjectId" : "fb0849a2962060f5cf0553ca96d5ad5db8d2e219",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for shaders\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ensure that shader_to_h is compiled\n",
        "Line" : 61,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : "# WARNING NO MORE RECURSE TO AVOID TAKING QT FILES\n",
        "Line" : 64,
        "CharPositionInLine" : 7
      },
      "3" : {
        "Text" : "#link_directories( ${CGoGN_ROOT_DIR}/lib/${CMAKE_BUILD_TYPE} )\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMakeLists.txt" : {
      "ObjectId" : "44673bf613abd620a32e73f01b588f27137cb08f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Thanks to Etienne Schmitt for CMakeLists modifications\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Available options\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# External Libraries (not included a third party libraries)\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\tThirdParty\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#IF (CGoGN_WITH_QT AND (NOT WIN32))\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# COMPILER FLAGS\n\n#\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# remove the 60000+ \"no unused local typedefs\" warnings with GCC4.8+\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#dll export warnings\n",
        "Line" : 128,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : "#\n\n# COMPILE DEFINITIONS\n\n#\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tLIST(APPEND CGoGN_DEFS(\"-DCGOGN_QT_DESIRED_VERSION=${CGoGN_DESIRED_QT_VERSION}\"))\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# INCLUDES AND LIBS\n\n#\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# define includes of external libs \n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# define libs for external libs\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# added for debug linking ??\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#for c++11 thread\n",
        "Line" : 249,
        "CharPositionInLine" : 37
      },
      "15" : {
        "Text" : "#\n\n# save some infos for schnapps and apps\n\n#\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# \n\n# Add custom clean targets for cleaning without cleaning dependencies\n\n#\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "SCHNApps/CMakeLists.txt" : {
      "ObjectId" : "13840dbb146eb1dcf08d671cadb02055ff9a0d44",
      "LastModified" : "2017-08-23T16:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\tSET(LIBRARY_OUTPUT_PATH ${SCHNApps_ROOT_DIR}/lib/${CMAKE_BUILD_TYPE})\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# choose same Qt version than in CGoGN\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PythonQt third-party dependency\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CGoGN compiled in one or several libs\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# definitions from CGoGN\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#and schnapps options\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# includes from CGoGN + python\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# libs from CGoGN + python + PythonQt\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# SCHNApps main application\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "SCHNApps/Plugins/CMakeLists.txt" : {
      "ObjectId" : "6b26cc185ccf123dd6a8da5ae473bd4b45609243",
      "LastModified" : "2016-04-26T08:28:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_SUBDIRECTORY(surface_tilings)\n\n#ADD_SUBDIRECTORY(cage2D_deformation)\n\n#ADD_SUBDIRECTORY(cage3D_deformation)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_SUBDIRECTORY(volume_render)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ADD_SUBDIRECTORY(volumetric)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "SCHNApps/Plugins/schnapps/CMakeLists.txt" : {
      "ObjectId" : "6b9ad67f560e8c8e8d2d0372572e0c6741372ed3",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SCHNApps files to compile in a lib for dll access from plugins\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "SCHNApps/Plugins/surface_deformation/CMakeLists.txt" : {
      "ObjectId" : "6b90c45b6338f83058e170b33f7216f4241e51ff",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_differentialProperties/CMakeLists.txt" : {
      "ObjectId" : "78f0cbdfe2bf8a005dcdb6f4dfedc9a8a55c259b",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_distance/CMakeLists.txt" : {
      "ObjectId" : "8190bbd77122ccb1f4ad18c545d773f717ad1377",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_import/CMakeLists.txt" : {
      "ObjectId" : "388190412472b62cc540780149db32dee4766ff7",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_lsm/CMakeLists.txt" : {
      "ObjectId" : "f16ab47b7cbaeece54107932062ec2b6ebb66944",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_modelisation/CMakeLists.txt" : {
      "ObjectId" : "95aeb31578005a5fcc40bbf71b241abd1507d8c2",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_radiance/CMakeLists.txt" : {
      "ObjectId" : "55558f1feeaf543f5707934483d2d99ff11b063e",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_render/CMakeLists.txt" : {
      "ObjectId" : "7709dabc8fa607a5d2e8b5cefe588e9da48933e2",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_renderScalar/CMakeLists.txt" : {
      "ObjectId" : "9fbace5f9d9a2a07b55c6e7c935ed1652a59c759",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_renderTopo/CMakeLists.txt" : {
      "ObjectId" : "f6d227595107a6e84b722b5f26f7a16c1efe1974",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_renderVector/CMakeLists.txt" : {
      "ObjectId" : "95191bb0ba40734cab22de887bbfa60464d98ad2",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_selection/CMakeLists.txt" : {
      "ObjectId" : "549248852481cc3b0f5052a0c7044208142e2086",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/surface_subdivision/CMakeLists.txt" : {
      "ObjectId" : "a3a34238182f0f0965b313f6529775fc4c77d077",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/volume_import/CMakeLists.txt" : {
      "ObjectId" : "8059ca949b8c4fcc45162c6b1c02e376b7ff1a87",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SCHNApps/Plugins/volume_render/CMakeLists.txt" : {
      "ObjectId" : "81d0ffc01be25ee61593c7507a9e535291933882",
      "LastModified" : "2016-05-03T16:16:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/CMakeLists.txt" : {
      "ObjectId" : "9663d5ce201140a40502b076642fb872ea64a735",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/code/CMakeLists.txt" : {
      "ObjectId" : "8b403553e9059b4609b484f47341ecf772d85986",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Listing and grouping of all the source files for use with IDE project\r\n\n# generators.\r\n\n#\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SOURCE_GROUP( zlib FILES\r\n\n#\t../contrib/zlib/adler32.c\r\n\n#\t../contrib/zlib/compress.c\r\n\n#\t../contrib/zlib/crc32.c\r\n\n#\t../contrib/zlib/crc32.h\r\n\n#\t../contrib/zlib/deflate.c\r\n\n#\t../contrib/zlib/deflate.h\r\n\n#\t../contrib/zlib/inffast.c\r\n\n#\t../contrib/zlib/inffast.h\r\n\n#\t../contrib/zlib/inffixed.h\r\n\n#\t../contrib/zlib/inflate.c\r\n\n#\t../contrib/zlib/inflate.h\r\n\n#\t../contrib/zlib/inftrees.c\r\n\n#\t../contrib/zlib/inftrees.h\r\n\n#\t../contrib/zlib/trees.c\r\n\n#\t../contrib/zlib/trees.h\r\n\n#\t../contrib/zlib/zconf.h\r\n\n#\t../contrib/zlib/zconf.in.h\r\n\n#\t../contrib/zlib/zlib.h\r\n\n#\t../contrib/zlib/zutil.c\r\n\n#\t../contrib/zlib/zutil.h\r\n\n#)\r\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t../contrib/zlib/adler32.c\r\n\n#\t../contrib/zlib/compress.c\r\n\n#\t../contrib/zlib/crc32.c\r\n\n#\t../contrib/zlib/crc32.h\r\n\n#\t../contrib/zlib/deflate.c\r\n\n#\t../contrib/zlib/deflate.h\r\n\n#\t../contrib/zlib/inffast.c\r\n\n#\t../contrib/zlib/inffast.h\r\n\n#\t../contrib/zlib/inffixed.h\r\n\n#\t../contrib/zlib/inflate.c\r\n\n#\t../contrib/zlib/inflate.h\r\n\n#\t../contrib/zlib/inftrees.c\r\n\n#\t../contrib/zlib/inftrees.h\r\n\n#\t../contrib/zlib/trees.c\r\n\n#\t../contrib/zlib/trees.h\r\n\n#\t../contrib/zlib/zconf.h\r\n\n#\t../contrib/zlib/zconf.in.h\r\n\n#\t../contrib/zlib/zlib.h\r\n\n#\t../contrib/zlib/zutil.c\r\n\n#\t../contrib/zlib/zutil.h\r\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Necessary to show the headers in the project when using the VC++ generator:\r\n",
        "Line" : 722,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#\tBoostWorkaround/boost/math/common_factor_rt.hpp\r\n\n#\tBoostWorkaround/boost/foreach.hpp\r\n\n#\tBoostWorkaround/boost/format.hpp\r\n\n#\tBoostWorkaround/boost/scoped_array.hpp\r\n\n#\tBoostWorkaround/boost/scoped_ptr.hpp\r\n\n#\tBoostWorkaround/boost/shared_array.hpp\r\n\n#\tBoostWorkaround/boost/shared_ptr.hpp\r\n\n#\tBoostWorkaround/boost/static_assert.hpp\r\n\n#\tBoostWorkaround/boost/tuple/tuple.hpp\r\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#INSTALL( TARGETS assimp DESTINATION ${LIB_INSTALL_DIR} )\r\n\n#INSTALL( FILES ${PUBLIC_HEADERS} DESTINATION ${INCLUDE_INSTALL_DIR}/assimp )\r\n\n#INSTALL( FILES ${COMPILER_HEADERS} DESTINATION ${INCLUDE_INSTALL_DIR}/assimp/Compiler )\r\n",
        "Line" : 748,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/Makefile.am" : {
      "ObjectId" : "90642176e06f888e9401322d559b18ded051381d",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Not sure what is creating the timestamp file.\n\n# The so_locations file only happens on IRIX.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/doc/Makefile.am" : {
      "ObjectId" : "08e5a03b69fba9c8e8e82760376401e4c059265a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# DOC is defined if installer requests doc generation.\n\n# For now, we only install HTML documentation.  We could install manpages\n\n# using the following\n\n#   man_MANS = man/man3/CppUnit.3\n\n#   man/man3/CppUnit.3: dox\n\n# and an extra copy or two in the install-data-hook.  \n\n# However, the manpages do not appear to be tremendously useful, so\n\n# let's not bother.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake's \"distcheck\" is sensitive to having files left over\n\n# after \"make uninstall\", so we have to clean up the install hook.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We repeat the three targets in both the \"if\" and \"else\" clauses\n\n# of the conditional, because the generated makefile will contain\n\n# references to the targets (target \"install\" depends on target\n\n# \"install-datahook\", for example), and some make programs get upset\n\n# if no target exists.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make tarfile to distribute the HTML documentation.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/Makefile.am" : {
      "ObjectId" : "872ec7063606ee69539dd9abb907ef637dacda09",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# already handled by toplevel dist-hook.\n\n# DIST_SUBDIRS = msvc6\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/Makefile.am" : {
      "ObjectId" : "c743a67c549fc371269143f76d870995ae82a597",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/config/Makefile.am" : {
      "ObjectId" : "2f0b1f80671e54282274c6d74c8319a3d4952b44",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/extensions/Makefile.am" : {
      "ObjectId" : "ff96de3183757e90cf1154aab59deb28d74a641f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/plugin/Makefile.am" : {
      "ObjectId" : "5221a6693843005ba431546ec09c4b3d58b59317",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/portability/Makefile.am" : {
      "ObjectId" : "2caeb321a524d5f1689894678250af94935fb1e4",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/tools/Makefile.am" : {
      "ObjectId" : "8ce080867c305e52e082934bed548639febabc50",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/ui/Makefile.am" : {
      "ObjectId" : "1b9f08efe77924ea80eb40d26328a0c8bb9edbcb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/ui/mfc/Makefile.am" : {
      "ObjectId" : "1ea8b5edf8e27819c102212c344120eb843a2f33",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/ui/qt/Makefile.am" : {
      "ObjectId" : "7d4fb46c03ad9e57cb2a3c9bb812b001e40692a3",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/include/cppunit/ui/text/Makefile.am" : {
      "ObjectId" : "5f01d81462f46f623d06523ed66ac76153bc4aca",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/src/Makefile.am" : {
      "ObjectId" : "81430b4e3cbd2123cda2607c40c68d355ab054c1",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# already handled by toplevel dist-hook.\n\n# DIST_SUBDIRS = msvc6",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/Assimp/contrib/cppunit-1.12.1/src/cppunit/Makefile.am" : {
      "ObjectId" : "d5a60bf737572dd1232d34b7669cb36c194e9c68",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#\n\n# $Id: Makefile.am,v 1.44 2005/06/14 21:28:46 blep Exp $\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/OpenNL/CMake/CMakeLists.txt" : {
      "ObjectId" : "0107572cc4c9923b6a3dd613dbdf8e1a3370bf7f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/OpenNL/CMakeLists.txt" : {
      "ObjectId" : "9d9ab7253c42d7d0cdcde6c068815ab490302cb4",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################################\n\n#      CMake version checks\n\n######################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# or NEW\n",
        "Line" : 16,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "######################################\n\n#              Project\n\n######################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET(GEEX_BUILD_PATH ${PROJECT_BINARY_DIR})\n\n#SET(BINARIES_RELATIVE_PATH /binaries/bin/)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#IF (WIN32)\n\n#    SET(LIBRARIES_RELATIVE_PATH /binaries/bin/)\n\n#ELSE(WIN32)\n\n#    SET(LIBRARIES_RELATIVE_PATH /binaries/lib/)\n\n#ENDIF(WIN32)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#IF(WIN32)\n\n#    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}${BINARIES_RELATIVE_PATH})\n\n#ELSE(WIN32)\n\n#    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}${LIBRARIES_RELATIVE_PATH})\n\n#ENDIF(WIN32)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}${BINARIES_RELATIVE_PATH})\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########################################\n\n# ADD HERE ADDITIONAL INCLUDE DIRECTORIES\n\n#########################################\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#########################################\n\n# ADD HERE SUBDIRECTORIES\n\n#########################################\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ThirdParty/OpenNL/CMakeModules/FindCUDA.cmake" : {
      "ObjectId" : "7c28498d65ab90e67b0c7afb07956687a509af5a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Tools for building CUDA C files: libraries and build dependencies.\n\n# This script locates the NVIDIA CUDA C tools. It should work on linux, windows,\n\n# and mac and should be reasonably up to date with CUDA C releases.\n\n#\n\n# This script makes use of the standard find_package arguments of <VERSION>,\n\n# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\n\n# was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix\n\n# cannot be determined by the location of nvcc in the system path and REQUIRED\n\n# is specified to find_package(). To use a different installed version of the\n\n# toolkit set the environment variable CUDA_BIN_PATH before running cmake\n\n# (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda)\n\n# or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If you change the value of\n\n# CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be\n\n# relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default location. In\n\n# newer versions of the toolkit the cuda library is included with the graphics\n\n# driver- be sure that the driver version matches what is needed by the cuda\n\n# runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the script (in\n\n# alphebetical order).  Note that any of these flags can be changed multiple\n\n# times in the same directory before calling CUDA_ADD_EXECUTABLE,\n\n# CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX or CUDA_WRAP_SRCS.\n\n#\n\n#  CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#  -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#     Note that making this different from the host code when generating object\n\n#     or C files from CUDA code just won't work, because size_t gets defined by\n\n#     nvcc in the generated source.  If you compile to PTX and then load the\n\n#     file yourself, you can mix bit sizes between device and host.\n\n#\n\n#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#  -- Set to ON if you want the custom build rule to be attached to the source\n\n#     file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#     targets.\n\n#\n\n#     This allows the user to build the target from the CUDA file; however, bad\n\n#     things can happen if the CUDA source file is added to multiple targets.\n\n#     When performing parallel builds it is possible for the custom build\n\n#     command to be run more than once and in parallel causing cryptic build\n\n#     errors.  VS runs the rules for every source file in the target, and a\n\n#     source can have only one rule no matter how many projects it is added to.\n\n#     When the rule is run from multiple targets race conditions can occur on\n\n#     the generated file.  Eventually everything will get built, but if the user\n\n#     is unaware of this behavior, there may be confusion.  It would be nice if\n\n#     this script could detect the reuse of source files across multiple targets\n\n#     and turn the option off for the user, but no good solution could be found.\n\n#\n\n#  CUDA_BUILD_CUBIN (Default OFF)\n\n#  -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#     Device mode. The output is parsed and register, shared memory usage is\n\n#     printed during build.\n\n#\n\n#  CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#  -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#     when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#  CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#  -- Set to the path you wish to have the generated files placed.  If it is\n\n#     blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#     Intermediate files will always be placed in\n\n#     CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#  CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#  -- Set to OFF for C compilation of host code.\n\n#\n\n#  CUDA_NVCC_FLAGS\n\n#  CUDA_NVCC_FLAGS_<CONFIG>\n\n#  -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#     semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#  -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#     dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#     host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#     generated host code match the rest of the system better.  Sometimes\n\n#     certain flags give nvcc problems, and this will help you turn the flag\n\n#     propagation off.  This does not affect the flags supplied directly to nvcc\n\n#     via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#     CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#     shared library compilation are not affected by this flag.\n\n#\n\n#  CUDA_VERBOSE_BUILD (Default OFF)\n\n#  -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#     using a Makefile generator the value defaults to VERBOSE (run make\n\n#     VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#     always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order):\n\n#\n\n#  CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#  -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#     you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#  -- Adds the cublas library to the target (can be any target).  Handles\n\n#     whether you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                       [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Creates an executable \"cuda_target\" which is made up of the files\n\n#     specified.  All of the non CUDA C files are compiled using the standard\n\n#     build rules specified by CMAKE and the cuda files are compiled to object\n\n#     files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#     added automatically to include_directories().  Standard CMake target calls\n\n#     can be used on the target after calling this macro\n\n#     (e.g. set_target_properties and target_link_libraries).\n\n#\n\n#  CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#  CUDA_BUILD_CLEAN_TARGET()\n\n#  -- Creates a convience target that deletes all the dependency files\n\n#     generated.  You should make clean after running this target to ensure the\n\n#     dependency files get regenerated.\n\n#\n\n#  CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                [OPTIONS ...] )\n\n#  -- Returns a list of generated files from the input source files to be used\n\n#     with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#  CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#  -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#  CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#  -- Sets the directories that should be passed to nvcc\n\n#     (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#     files.\n\n#\n\n#  CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#  -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#     CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#     function under the hood.\n\n#\n\n#     Given the list of files (file0 file1 ... fileN) this macro generates\n\n#     custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#     \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#     or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#     The arguments passed in after OPTIONS are extra command line options to\n\n#     give to nvcc.  You can also specify per configuration options by\n\n#     specifying the name of the configuration followed by the options.  General\n\n#     options must preceed configuration specific options.  Not all\n\n#     configurations need to be specified, only the ones provided will be used.\n\n#\n\n#        OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#        DEBUG -g\n\n#        RELEASE --use_fast_math\n\n#        RELWITHDEBINFO --use_fast_math;-g\n\n#        MINSIZEREL --use_fast_math\n\n#\n\n#     For certain configurations (namely VS generating object files with\n\n#     CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#     be produced for the given cuda file.  This is because when you add the\n\n#     cuda file to Visual Studio it knows that this file produces an object file\n\n#     and will link in the resulting object file automatically.\n\n#\n\n#     This script will also generate a separate cmake script that is used at\n\n#     build time to invoke nvcc.  This is for serveral reasons.\n\n#\n\n#       1. nvcc can return negative numbers as return values which confuses\n\n#       Visual Studio into thinking that the command succeeded.  The script now\n\n#       checks the error codes and produces errors when there was a problem.\n\n#\n\n#       2. nvcc has been known to not delete incomplete results when it\n\n#       encounters problems.  This confuses build systems into thinking the\n\n#       target was generated when in fact an unusable file exists.  The script\n\n#       now deletes the output files if there was an error.\n\n#\n\n#       3. By putting all the options that affect the build into a file and then\n\n#       make the build rule dependent on the file, the output files will be\n\n#       regenerated when the options change.\n\n#\n\n#     This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#     determine when to target the object compilation for a shared library.\n\n#     BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#     CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#     objects intended for shared libraries.  A preprocessor macro,\n\n#     <target_name>_EXPORTS is defined when a shared library compilation is\n\n#     detected.\n\n#\n\n#     Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n# The script defines the following variables:\n\n#\n\n#  CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#  CUDA_VERSION_MINOR    -- The minor version.\n\n#  CUDA_VERSION\n\n#  CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#  CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                           SDK.  This script will not directly support finding\n\n#                           specific libraries or headers, as that isn't\n\n#                           supported by NVIDIA.  If you want to change\n\n#                           libraries when the path changes see the\n\n#                           FindCUDA.cmake script for an example of how to clear\n\n#                           these variables.  There are also examples of how to\n\n#                           use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                           libraries, if you so choose (at your own risk).\n\n#  CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                           for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#  CUDA_LIBRARIES        -- Cuda RT library.\n\n#  CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                           implementation (alternative to:\n\n#                           CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#  CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                           implementation (alterative to:\n\n#                           CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#\n\n#\n\n#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to have at least this version to support the VERSION_LESS argument to 'if' (2.6.2) and unset (2.6.3)\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND true\")\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#message(\"searching for ${f}\")\n",
        "Line" : 322,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 324,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\n",
        "Line" : 426,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Now search default paths\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 453,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Compute the version.\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Here we need to determine if the version we found is acceptable.  We will\n\n# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\n\n# specified.  The presence of either of these options checks the version\n\n# string and signals if the version is acceptable or not.\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 514,
        "CharPositionInLine" : 21
      },
      "48" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 539,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Add cuda library to the link line only if it is found.\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Search for cufft and cublas libraries.\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "########################\n\n# Look for the SDK stuff\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil32)\n\n# endif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n",
        "Line" : 623,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "##############################################################################\n",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 708,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 715,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 726,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 756,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependant upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Set up all the command line flags here, so that they can be overriden on a per target basis.\n",
        "Line" : 801,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 805,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Emulation.\n",
        "Line" : 807,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 810,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.\n",
        "Line" : 828,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Add nvcc flag for 64b Windows\n",
        "Line" : 832,
        "CharPositionInLine" : 6
      },
      "83" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 837,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 847,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Reset these variables\n",
        "Line" : 857,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 867,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 870,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# STATIC\n",
        "Line" : 876,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 882,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 884,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 890,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 899,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 902,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# nvcc chokes on -g3, so replace it with -g\n",
        "Line" : 906,
        "CharPositionInLine" : 6
      },
      "96" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 916,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 923,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 928,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Determine output directory\n",
        "Line" : 940,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 947,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 950,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 953,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 957,
        "CharPositionInLine" : 6
      },
      "104" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 971,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 981,
        "CharPositionInLine" : 6
      },
      "106" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 985,
        "CharPositionInLine" : 31
      },
      "107" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 989,
        "CharPositionInLine" : 6
      },
      "108" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 997,
        "CharPositionInLine" : 6
      },
      "109" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1000,
        "CharPositionInLine" : 6
      },
      "110" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1007,
        "CharPositionInLine" : 6
      },
      "111" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1015,
        "CharPositionInLine" : 6
      },
      "112" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1018,
        "CharPositionInLine" : 6
      },
      "113" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1035,
        "CharPositionInLine" : 6
      },
      "114" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1043,
        "CharPositionInLine" : 6
      },
      "115" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1046,
        "CharPositionInLine" : 8
      },
      "116" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1050,
        "CharPositionInLine" : 8
      },
      "117" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1062,
        "CharPositionInLine" : 6
      },
      "118" : {
        "Text" : "# Don't add the object file to the list of generated files if we are using\n\n# visual studio and we are attaching the build rule to the cuda file.  VS\n\n# will add our object file to the linker automatically for us.\n",
        "Line" : 1065,
        "CharPositionInLine" : 6
      },
      "119" : {
        "Text" : "# Visual Studio 8 crashes when you close the solution when you don't add the object file.\n",
        "Line" : 1071,
        "CharPositionInLine" : 8
      },
      "120" : {
        "Text" : "#message(\"Not adding ${generated_file}\")\n",
        "Line" : 1073,
        "CharPositionInLine" : 10
      },
      "121" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1082,
        "CharPositionInLine" : 6
      },
      "122" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1090,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1095,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1104,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1107,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# Add the library.\n",
        "Line" : 1112,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1122,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1132,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1141,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1143,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Add the library.\n",
        "Line" : 1146,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1156,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1166,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1175,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1184,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1191,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1193,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1201,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1214,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1227,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1233,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1244,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 144
    },
    "ThirdParty/OpenNL/CMakeModules/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "7fce167c23ac70663c370d34a8809c4e2d0015ce",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ThirdParty/OpenNL/CMakeModules/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "2518c685250cf3c1b78779eae3c1946d3678d220",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 62,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 64,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# else (${entry} MATCHES \"^_\")\n",
        "Line" : 68,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# endif (${entry} MATCHES \"^_\")\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Registers\n",
        "Line" : 77,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Local memory\n",
        "Line" : 83,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Shared memory\n",
        "Line" : 89,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "ThirdParty/OpenNL/CMakeModules/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "fc5a9c0768bed0cc1b8e231f7f1f45a717ab6584",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Echo the command\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Run the command\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Delete the target file\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Generate the code\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 28
    },
    "ThirdParty/OpenNL/CMakeModules/FindSuiteSparse.cmake" : {
      "ObjectId" : "7565b190a3f1ca8c0ac1e0b20e9ba1fb4e70ac2b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find SUITESPARSE\r\n\n# Once done this will define\r\n\n#  \r\n\n#  SUITESPARSE_FOUND            - system has SUITESPARSE\r\n\n#  SUITESPARSE_INCLUDE_DIRS     - the SUITESPARSE include directory\r\n\n#  SUITESPARSE_LIBRARIES        - Link these to use SUITESPARSE\r\n\n#  SUITESPARSE_SPQR_LIBRARY     - name of spqr library (necessary due to error in debian package)\r\n\n#  SUITESPARSE_SPQR_LIBRARY_DIR - name of spqr library (necessary due to error in debian package)\r\n\n#  SUITESPARSE_LIBRARY_DIR      - Library main directory containing suitesparse libs\r\n\n#  SUITESPARSE_LIBRARY_DIRS     - all Library directories containing suitesparse libs\r\n\n#  SUITESPARSE_SPQR_VALID       - automatic identification whether or not spqr package is installed correctly\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find cholmod part of the suitesparse library collection\r\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Add cholmod include directory to collection include directories\r\n",
        "Line" : 24,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# find path suitesparse library\r\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# if we found the library, add it to the defined libraries\r\n",
        "Line" : 35,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Add cholmod include directory to collection include directories\r\n",
        "Line" : 67,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# if we found the library, add it to the defined libraries\r\n",
        "Line" : 72,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#     list ( APPEND SUITESPARSE_LIBRARIES csparse)\r\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#     list ( APPEND SUITESPARSE_LIBRARIES spqr)\r\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Metis and spqr are optional\r\n",
        "Line" : 91,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 11
    },
    "ThirdParty/OpenNL/CMakeModules/FindSuperLU.cmake" : {
      "ObjectId" : "317b0a73c76b5c6f17616e21d5ce3b788bc1087c",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Module that checks whether SuperLU is available and usable.\n\n# SuperLU must be a version released after the year 2005.\n\n#\n\n# Variables used by this module which you may want to set:\n\n# SUPERLU_PREFIX          Path list to search for SuperLU\n\n#\n\n# Sets the follwing variable:\n\n#\n\n# SUPERLU_FOUND           True if SuperLU available and usable.\n\n# SUPERLU_MIN_VERSION_4_3 True if SuperLU version >= 4.3.\n\n# SUPERLU_WITH_VERSION    Human readable string containing version information.\n\n# SUPERLU_INCLUDE_DIRS    Path to the SuperLU include dirs.\n\n# SUPERLU_LIBRARIES       Name to the SuperLU library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adds SuperLU flags to the targets\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# look for BLAS\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# look for header files, only at positions given by the user\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# look for header files, including default paths\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# look for library, only at positions given by the user\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# look for library files, including default paths\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# check version specific macros\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# we need if clauses here because variable is set variable-NOTFOUND\n\n# if the searches above were not successful\n\n# Without them CMake print errors like: \n\n# \"CMake Error: The following variables are used in this project, but they are set to NOTFOUND.\n\n# Please set them or make sure they are set and tested correctly in the CMake files:\"\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# check whether \"mem_usage_t.expansions\" was found in \"slu_ddefs.h\"\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# check whether version is at least 4.3\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if both headers and library are found, store results\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# log result\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# log errornous result\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# set HAVE_SUPERLU for config.h\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "ThirdParty/OpenNL/examples/CMakeLists.txt" : {
      "ObjectId" : "6dd97e731dd154445a6d0ab4797c1edce35deec4",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Choose here what exemples you want to compile\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/OpenNL/examples/lscm_NL/CMakeLists.txt" : {
      "ObjectId" : "ed16ed0fa7c8552ac9e366ae9aff11976e0e3e4a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/OpenNL/examples/mmtx/CMakeLists.txt" : {
      "ObjectId" : "774a939284afd99839817c0c1808ef0f6fcce5c7",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/OpenNL/src/CMakeLists.txt" : {
      "ObjectId" : "b7790d6b84de6f599227d00a251185365fbe3cf0",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# extensions\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   SET(SUPERLU_INCS ${SUPERLU_HOME}/SRC)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# creation of the library\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t\tIF(USE_SUPERLU)\n\n#\t\t\tTARGET_LINK_LIBRARIES(nl ${SUPERLU_LIBRARIES})\n\n#\t\tENDIF(USE_SUPERLU)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ThirdParty/PythonQt/CMakeLists.txt" : {
      "ObjectId" : "dded7fd891e6e0e6d6abc8d94704d6c252f5594f",
      "LastModified" : "2017-08-23T16:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# NOTE: The CMake files have been contributed to PythonQt and have not been tested with the current\r\n\n# PythonQt version. They have not yet been updated to support Qt 5 and/or Python 3.\r\n\n#\r\n\n# If you are not a CMake expert, you should better use the provided qmake profiles.\r\n\n#-----------------------------------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Python libraries\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Build options\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Force option if it applies\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# xmlpatterns wrapper does *NOT* build at all :(  \r\n",
        "Line" : 32,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Setup Qt\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NEW\r\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# OLD\r\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Also use 4.7 wrappers for 4.6.x version\r\n",
        "Line" : 72,
        "CharPositionInLine" : 44
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# List headers.  This is list is used for the install command.\r\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Headers that should run through moc\r\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Add extra sources\r\n\n#foreach(qtlib core gui network opengl sql svg uitools webkit xml xmlpatterns)\r\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  if (${PythonQt_Wrap_Qt${qtlib}})\r\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#    ADD_DEFINITIONS(-DPYTHONQT_WRAP_Qt${qtlib})\r\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#    set(file_prefix generated_cpp${generated_cpp_suffix}/com_trolltech_qt_${qtlib}/com_trolltech_qt_${qtlib})\r\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#    foreach(index RANGE 0 11)\r\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#      # Source files\r\n\n#      if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${file_prefix}${index}.cpp)\r\n\n#        list(APPEND sources ${file_prefix}${index}.cpp)\r\n\n#      endif()\r\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#      # Headers that should run through moc\r\n\n#      if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${file_prefix}${index}.h)\r\n\n#        list(APPEND moc_sources ${file_prefix}${index}.h)\r\n\n#      endif()\r\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#    endforeach()\r\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#    list(APPEND sources ${file_prefix}_init.cpp)\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#  endif()\r\n\n#endforeach()\r\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# UI files\r\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Resources\r\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Do wrapping\r\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#qt_wrap_ui(gen_ui_sources ${ui_sources})\r\n\n#qt_add_resources(gen_qrc_sources ${qrc_sources})\r\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Build the library\r\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\r\n\n# That should solve linkage error on Mac when the project is used in a superbuild setup\r\n\n# See http://blog.onesadcookie.com/2008/01/installname-magic.html\r\n\n#\r\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Install library (on windows, put the dll in 'bin' and the archive in 'lib')\r\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "ThirdParty/PythonQt/PythonQt.pro" : {
      "ObjectId" : "93bf3d9f51b62dbc796083ec58c4cfd9dad511e2",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/examples/CPPPyWrapperExample/CPPPyWrapperExample.pro" : {
      "ObjectId" : "9d52a9e11fd61a5b5aa7d8211af7bc428b0879a9",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/examples/PyCPPWrapperExample/PyCPPWrapperExample.pro" : {
      "ObjectId" : "b9dad42ff09e3ccff9f5f80b1110a684e58260af",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PyCPPWrapperExample profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/examples/PyCustomMetaTypeExample/PyCustomMetaTypeExample.pro" : {
      "ObjectId" : "b6aff3bc96257b3851b8e4815c90b97d088b1d46",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PyCustomMetaTypeExample profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/examples/PyDecoratorsExample/PyDecoratorsExample.pro" : {
      "ObjectId" : "33953d0e88f9d71700fe764cce60a1cb4e800d0b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PyGuiExample profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/examples/PyGettingStarted/PyGettingStarted.pro" : {
      "ObjectId" : "8eb8231d4c5f0ec49e53e878a15e7b86c8f847ef",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PyScriptingConsole profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/examples/PyGuiExample/PyGuiExample.pro" : {
      "ObjectId" : "4461f71c6e386ab888ff3aee9fd6254bab9c03f4",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PyGuiExample profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/examples/PyLauncher/PyLauncher.pro" : {
      "ObjectId" : "04881645653af09067965c09bb4df18b1f89081b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PyLauncher profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/examples/PyScriptingConsole/PyScriptingConsole.pro" : {
      "ObjectId" : "106d90838611a98b8b4aa90e6790977b8bd08521",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PyScriptingConsole profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/examples/examples.pro" : {
      "ObjectId" : "b94741ed72c7dbc6bb62d06929d8eba93f9d8ab2",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/extensions/PythonQt_QtAll/PythonQt_QtAll.pro" : {
      "ObjectId" : "17cf530d6fc541e7616836c61d0162d4121ea879",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/extensions/extensions.pro" : {
      "ObjectId" : "9481fc6a934a7094513c1fecfffb2308a7e9aa99",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_core/com_trolltech_qt_core.pri" : {
      "ObjectId" : "d9003d9f46269a555274b126697d5904a4ee9fd9",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_core_builtin/com_trolltech_qt_core_builtin.pri" : {
      "ObjectId" : "181c29c57b5b7c0ffbd25035d49d39e268b719cb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_gui/com_trolltech_qt_gui.pri" : {
      "ObjectId" : "753be3ba3ee93a9380886fed23343860244d737c",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_gui_builtin/com_trolltech_qt_gui_builtin.pri" : {
      "ObjectId" : "4aa1ce87b01909ffc0271d87ca112513dd538e90",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_network/com_trolltech_qt_network.pri" : {
      "ObjectId" : "71768c91718661713f3e0d6abc5ac7c7780466e9",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_opengl/com_trolltech_qt_opengl.pri" : {
      "ObjectId" : "9ef686c4c1d995aa4271f944db670b02e02729fc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_sql/com_trolltech_qt_sql.pri" : {
      "ObjectId" : "38611e2cef21a1fb7dd6338a475661aca37ebb62",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_svg/com_trolltech_qt_svg.pri" : {
      "ObjectId" : "eeea59429bc6829929a1332fffa927ef46f94627",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_uitools/com_trolltech_qt_uitools.pri" : {
      "ObjectId" : "680ce5250f3034f782e39a0b56066738e0b9ba56",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_webkit/com_trolltech_qt_webkit.pri" : {
      "ObjectId" : "4ae397cc06bae9dcec942e459ba4d1575aa6eb9b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_xml/com_trolltech_qt_xml.pri" : {
      "ObjectId" : "222476a562e3485c2a92ee9631b23cb1c817115b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_47/com_trolltech_qt_xmlpatterns/com_trolltech_qt_xmlpatterns.pri" : {
      "ObjectId" : "7e3085dad511d04ab227f47de71147b0abb24010",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_core/com_trolltech_qt_core.pri" : {
      "ObjectId" : "d9003d9f46269a555274b126697d5904a4ee9fd9",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_core_builtin/com_trolltech_qt_core_builtin.pri" : {
      "ObjectId" : "181c29c57b5b7c0ffbd25035d49d39e268b719cb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_gui/com_trolltech_qt_gui.pri" : {
      "ObjectId" : "9fe6dc2e789c6e8827ccf4b17aa14b5fac71cca1",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_gui_builtin/com_trolltech_qt_gui_builtin.pri" : {
      "ObjectId" : "4aa1ce87b01909ffc0271d87ca112513dd538e90",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_network/com_trolltech_qt_network.pri" : {
      "ObjectId" : "7d5a60093f2ffe557fc05972621b52104d7fa63f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_opengl/com_trolltech_qt_opengl.pri" : {
      "ObjectId" : "9ef686c4c1d995aa4271f944db670b02e02729fc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_sql/com_trolltech_qt_sql.pri" : {
      "ObjectId" : "38611e2cef21a1fb7dd6338a475661aca37ebb62",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_svg/com_trolltech_qt_svg.pri" : {
      "ObjectId" : "eeea59429bc6829929a1332fffa927ef46f94627",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_uitools/com_trolltech_qt_uitools.pri" : {
      "ObjectId" : "680ce5250f3034f782e39a0b56066738e0b9ba56",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_webkit/com_trolltech_qt_webkit.pri" : {
      "ObjectId" : "4ae397cc06bae9dcec942e459ba4d1575aa6eb9b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_xml/com_trolltech_qt_xml.pri" : {
      "ObjectId" : "222476a562e3485c2a92ee9631b23cb1c817115b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_48/com_trolltech_qt_xmlpatterns/com_trolltech_qt_xmlpatterns.pri" : {
      "ObjectId" : "7e3085dad511d04ab227f47de71147b0abb24010",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_core/com_trolltech_qt_core.pri" : {
      "ObjectId" : "65310b62da3978f43a95c63861424f9dd0bae59f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_core_builtin/com_trolltech_qt_core_builtin.pri" : {
      "ObjectId" : "181c29c57b5b7c0ffbd25035d49d39e268b719cb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_gui/com_trolltech_qt_gui.pri" : {
      "ObjectId" : "9fe6dc2e789c6e8827ccf4b17aa14b5fac71cca1",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_gui_builtin/com_trolltech_qt_gui_builtin.pri" : {
      "ObjectId" : "4aa1ce87b01909ffc0271d87ca112513dd538e90",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_multimedia/com_trolltech_qt_multimedia.pri" : {
      "ObjectId" : "07b7dfd26f43be4d3d41d107fdc53b2eb7e76560",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_network/com_trolltech_qt_network.pri" : {
      "ObjectId" : "7d5a60093f2ffe557fc05972621b52104d7fa63f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_opengl/com_trolltech_qt_opengl.pri" : {
      "ObjectId" : "9ef686c4c1d995aa4271f944db670b02e02729fc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_sql/com_trolltech_qt_sql.pri" : {
      "ObjectId" : "38611e2cef21a1fb7dd6338a475661aca37ebb62",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_svg/com_trolltech_qt_svg.pri" : {
      "ObjectId" : "eeea59429bc6829929a1332fffa927ef46f94627",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_uitools/com_trolltech_qt_uitools.pri" : {
      "ObjectId" : "680ce5250f3034f782e39a0b56066738e0b9ba56",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_webkit/com_trolltech_qt_webkit.pri" : {
      "ObjectId" : "4ae397cc06bae9dcec942e459ba4d1575aa6eb9b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_xml/com_trolltech_qt_xml.pri" : {
      "ObjectId" : "222476a562e3485c2a92ee9631b23cb1c817115b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_50/com_trolltech_qt_xmlpatterns/com_trolltech_qt_xmlpatterns.pri" : {
      "ObjectId" : "7e3085dad511d04ab227f47de71147b0abb24010",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_core/com_trolltech_qt_core.pri" : {
      "ObjectId" : "65310b62da3978f43a95c63861424f9dd0bae59f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_core_builtin/com_trolltech_qt_core_builtin.pri" : {
      "ObjectId" : "181c29c57b5b7c0ffbd25035d49d39e268b719cb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_gui/com_trolltech_qt_gui.pri" : {
      "ObjectId" : "da88b6a38003520500254753c25f2267b86f79ec",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_gui_builtin/com_trolltech_qt_gui_builtin.pri" : {
      "ObjectId" : "4aa1ce87b01909ffc0271d87ca112513dd538e90",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_multimedia/com_trolltech_qt_multimedia.pri" : {
      "ObjectId" : "07b7dfd26f43be4d3d41d107fdc53b2eb7e76560",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_network/com_trolltech_qt_network.pri" : {
      "ObjectId" : "7d5a60093f2ffe557fc05972621b52104d7fa63f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_opengl/com_trolltech_qt_opengl.pri" : {
      "ObjectId" : "9ef686c4c1d995aa4271f944db670b02e02729fc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_sql/com_trolltech_qt_sql.pri" : {
      "ObjectId" : "38611e2cef21a1fb7dd6338a475661aca37ebb62",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_svg/com_trolltech_qt_svg.pri" : {
      "ObjectId" : "eeea59429bc6829929a1332fffa927ef46f94627",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_uitools/com_trolltech_qt_uitools.pri" : {
      "ObjectId" : "680ce5250f3034f782e39a0b56066738e0b9ba56",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_webkit/com_trolltech_qt_webkit.pri" : {
      "ObjectId" : "4ae397cc06bae9dcec942e459ba4d1575aa6eb9b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_xml/com_trolltech_qt_xml.pri" : {
      "ObjectId" : "222476a562e3485c2a92ee9631b23cb1c817115b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_53/com_trolltech_qt_xmlpatterns/com_trolltech_qt_xmlpatterns.pri" : {
      "ObjectId" : "7e3085dad511d04ab227f47de71147b0abb24010",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_core/com_trolltech_qt_core.pri" : {
      "ObjectId" : "65310b62da3978f43a95c63861424f9dd0bae59f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_core_builtin/com_trolltech_qt_core_builtin.pri" : {
      "ObjectId" : "181c29c57b5b7c0ffbd25035d49d39e268b719cb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_gui/com_trolltech_qt_gui.pri" : {
      "ObjectId" : "da88b6a38003520500254753c25f2267b86f79ec",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_gui_builtin/com_trolltech_qt_gui_builtin.pri" : {
      "ObjectId" : "4aa1ce87b01909ffc0271d87ca112513dd538e90",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_multimedia/com_trolltech_qt_multimedia.pri" : {
      "ObjectId" : "07b7dfd26f43be4d3d41d107fdc53b2eb7e76560",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_network/com_trolltech_qt_network.pri" : {
      "ObjectId" : "7d5a60093f2ffe557fc05972621b52104d7fa63f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_opengl/com_trolltech_qt_opengl.pri" : {
      "ObjectId" : "9ef686c4c1d995aa4271f944db670b02e02729fc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_sql/com_trolltech_qt_sql.pri" : {
      "ObjectId" : "38611e2cef21a1fb7dd6338a475661aca37ebb62",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_svg/com_trolltech_qt_svg.pri" : {
      "ObjectId" : "eeea59429bc6829929a1332fffa927ef46f94627",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_uitools/com_trolltech_qt_uitools.pri" : {
      "ObjectId" : "680ce5250f3034f782e39a0b56066738e0b9ba56",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_webkit/com_trolltech_qt_webkit.pri" : {
      "ObjectId" : "4ae397cc06bae9dcec942e459ba4d1575aa6eb9b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_xml/com_trolltech_qt_xml.pri" : {
      "ObjectId" : "222476a562e3485c2a92ee9631b23cb1c817115b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generated_cpp_54/com_trolltech_qt_xmlpatterns/com_trolltech_qt_xmlpatterns.pri" : {
      "ObjectId" : "7e3085dad511d04ab227f47de71147b0abb24010",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generator/CMakeLists.txt" : {
      "ObjectId" : "5fd9b24bfcd803c74cd25013f42ac2b9578c3408",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Setup Qt\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Sources\r\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# List headers.  This list is used for the install command.\r\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Headers that should run through moc\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# UI files\r\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Resources\r\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Do wrapping\r\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Copy file expected by the generator and specify install rules\r\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Build the library\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Install library (on windows, put the dll in 'bin' and the archive in 'lib')\r\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "ThirdParty/PythonQt/generator/generator.pri" : {
      "ObjectId" : "c8a651a002b6bc0cb4c2a2d6a79215f92928ca9a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Input\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/generator/generator.pro" : {
      "ObjectId" : "a33b7fe9bb1589c46dd522677b053334ad9496e6",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Input\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/generator/parser/rpp/rpp.pri" : {
      "ObjectId" : "8468bcf978b732574c3ca8a9b0fb0506236d0b8c",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generator/parser/rxx.pri" : {
      "ObjectId" : "867deb7ceae44f4c40e180710d83cd1c517ccbc9",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/PythonQt/generator/parser/rxx.pro" : {
      "ObjectId" : "8c75b8b83baca041de82b783bee747b60356f4df",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# File generated by kdevelop's qmake manager.\r\n\n# -------------------------------------------\r\n\n# Subdir relative project main directory: .\r\n\n# Target is an application:  r++0\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/src/src.pri" : {
      "ObjectId" : "a44f255c269f6851bead17745787a71d98ac790a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# This was needed to work around \"number of sections exceeded object file format limit\" linker error\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/PythonQt/src/src.pro" : {
      "ObjectId" : "15ab092db3603fb473a265ebe1fe45fd8c9ca59f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PythonQt profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# allow to choose static linking through the environment variable PYTHONQT_STATIC\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Qt 5.4 adds this option, but this is not compatible with the Python API\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ThirdParty/PythonQt/tests/tests.pro" : {
      "ObjectId" : "96b161da4b9fd8a13a47e262e10a10d647329815",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# --------- PythonQtTest profile -------------------\r\n\n# Last changed by $Author: florian $\r\n\n# $Id: PythonQt.pro 35381 2006-03-16 13:05:52Z florian $\r\n\n# $Source$\r\n\n# --------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/TinyXml2/CMakeLists.txt" : {
      "ObjectId" : "f7955dfcffd043e6a763a1cc7b8e8bea0e654d2c",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmake_policy(VERSION 2.6)\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#install(TARGETS tinyxml2\r\n\n#        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\r\n\n#        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\r\n\n#        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#install(FILES tinyxml2.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#foreach(p LIB INCLUDE)\r\n\n#\tset(var CMAKE_INSTALL_${p}DIR)\r\n\n#\tif(NOT IS_ABSOLUTE \"${${var}}\")\r\n\n#\t\tset(${var} \"${CMAKE_INSTALL_PREFIX}/${${var}}\")\r\n\n#\tendif()\r\n\n#endforeach()\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#configure_file(tinyxml2.pc.in tinyxml2.pc @ONLY)\r\n\n#install(FILES ${CMAKE_CURRENT_BINARY_DIR}/tinyxml2.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#add_test(xmltest ${SAMPLE_NAME} COMMAND $<TARGET_FILE:${SAMPLE_NAME}>)\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "ThirdParty/Tools/CMakeLists.txt" : {
      "ObjectId" : "1087a8cb05fdec60a463e95ca347c1c522dea221",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/Zinri/CMakeLists.txt" : {
      "ObjectId" : "3f8fff8b76fc5267815667a5b242716d0794559b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/CMakeLists.txt" : {
      "ObjectId" : "a92dd6f6cafd2206f8be1a50f1294e2ae49feb5a",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/CMakeLists.txt" : {
      "ObjectId" : "c326f374d9ee89c953dd9caefbfaffccb905511c",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Cholesky/CMakeLists.txt" : {
      "ObjectId" : "d01488b41a826850277a918f555e3668167dd367",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/CholmodSupport/CMakeLists.txt" : {
      "ObjectId" : "814dfa61313847c0f33538e11c4ac4557ec3e32e",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/CMakeLists.txt" : {
      "ObjectId" : "2346fc2bbca4d9bd699efc4c366afd7abd400e3c",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/arch/AltiVec/CMakeLists.txt" : {
      "ObjectId" : "9f8d2e9c46765f4253d6877d040e5c2a90612086",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/arch/CMakeLists.txt" : {
      "ObjectId" : "8456dec1581554a4f7798ebe7d9d292369f21607",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/arch/Default/CMakeLists.txt" : {
      "ObjectId" : "339c091d156100d46f3acbc67ad205749d8f4b3d",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/arch/NEON/CMakeLists.txt" : {
      "ObjectId" : "fd4d4af50cb46dac7e6b29ef8654e70528e1f3ca",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/arch/SSE/CMakeLists.txt" : {
      "ObjectId" : "46ea7cc623c62394c78425b15e100b84126b40a7",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/products/CMakeLists.txt" : {
      "ObjectId" : "21fc94ae38a5574289ae4e304ce087f3ed6897f0",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Core/util/CMakeLists.txt" : {
      "ObjectId" : "a1e2e521fc11124c92768621c4edf784bc10f51f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Eigen2Support/CMakeLists.txt" : {
      "ObjectId" : "7ae41b3cbe9c568f7efdaf45cd1a1ef874bf309b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Eigen2Support/Geometry/CMakeLists.txt" : {
      "ObjectId" : "c347a8f26228694dc67e0e89ff6d509152dac738",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Eigenvalues/CMakeLists.txt" : {
      "ObjectId" : "193e0268599516e2515318ed04eb6dda37b2dd59",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Geometry/CMakeLists.txt" : {
      "ObjectId" : "f8f728b84faf0e08d91fac04e2986260368b9063",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Geometry/arch/CMakeLists.txt" : {
      "ObjectId" : "1267a79c78767c43d11c529cc84468cbdd1052a2",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Householder/CMakeLists.txt" : {
      "ObjectId" : "ce4937db061bbadb0357ccc45547b141761a70e3",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/IterativeLinearSolvers/CMakeLists.txt" : {
      "ObjectId" : "59ccc0072cc4ed78e6aa783bfab2486aac757fca",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/Jacobi/CMakeLists.txt" : {
      "ObjectId" : "490dac626439ade5e05baaba504689366db22e6d",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/LU/CMakeLists.txt" : {
      "ObjectId" : "e0d8d78c1720abb27432f41aa2ace29ef3f3794f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/LU/arch/CMakeLists.txt" : {
      "ObjectId" : "f6b7ed9ecc3a25e3885c7fece60428481e51c696",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/OrderingMethods/CMakeLists.txt" : {
      "ObjectId" : "9f4bb275808257ac71d6c04d9c602ce5c0b5be8d",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/PaStiXSupport/CMakeLists.txt" : {
      "ObjectId" : "28c657e9bcf7d3e0ecc800f6d5a11d54020b58cc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/PardisoSupport/CMakeLists.txt" : {
      "ObjectId" : "a097ab401920ea1b7068f790edcfcf9086b3038b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/QR/CMakeLists.txt" : {
      "ObjectId" : "96f43d7f5b30fa024b9bd2d9e3a5dacb9d401ecb",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/SVD/CMakeLists.txt" : {
      "ObjectId" : "55efc44b12970d5ec715393cb68cd061203ce941",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/SparseCholesky/CMakeLists.txt" : {
      "ObjectId" : "375a59d7a577877313a1ff2a6bf1c8fac138768b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/SparseCore/CMakeLists.txt" : {
      "ObjectId" : "d860452a65cb20850a12a120ab1fd3e3fd83dccc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/StlSupport/CMakeLists.txt" : {
      "ObjectId" : "0f094f637acd51b0931e58a199c30f550beaa282",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/SuperLUSupport/CMakeLists.txt" : {
      "ObjectId" : "b28ebe5839cf5c664abdb44c186547507ce688d3",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/UmfPackSupport/CMakeLists.txt" : {
      "ObjectId" : "a57de00209d3bc746b050d1b8aa736bccc66f2bc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/misc/CMakeLists.txt" : {
      "ObjectId" : "a58ffb7457e06a7a69426a21a9d46d07a6a8ee91",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/Eigen/src/plugins/CMakeLists.txt" : {
      "ObjectId" : "1a1d3ffbd724d17e161c40c48ac56c8b1aeb2e1f",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/include/glm/CMakeLists.txt" : {
      "ObjectId" : "5037421ee1a9b9a43b7ebdcb9fbafbafb4b6ec8c",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(glm STATIC glm.cpp)\r\n\n#add_library(glm_shared SHARED glm.cpp)\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/libQGLViewer/QGLViewer/CMakeLists.txt" : {
      "ObjectId" : "19cd4c272b05b8fffd9eec21c85bed92341de860",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# in order to be able to include generated files (ui and moc)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make mocced header / form files path from absolute to relative\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# these header files do not need MOCcing\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ThirdParty/libQGLViewer/QGLViewer/QGLViewer.pro" : {
      "ObjectId" : "d805aa07ae8817fef24aab6876d48e8d06c809a5",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#\t\t    l i b Q G L V i e w e r\n\n#\tC o m p i l a t i o n    c o n f i g u r a t i o n\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run \"qmake; make; make install\" to compile and install the library on Unix systems.\n\n# Optional arguments can tune install paths (as in \"qmake PREFIX=$HOME\"). See doc/download.html for details.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -----------------------------------\n\n# --  I m a g e I n t e r f a c e  --\n\n# -----------------------------------\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---------------------------------------------\n\n# --  V e c t o r i a l   R e n d e r i n g  --\n\n# ---------------------------------------------\n\n# In case of compilation troubles with vectorial rendering, uncomment this line\n\n# DEFINES *= NO_VECTORIAL_RENDER\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---------------\n\n# --  U n i x  --\n\n# ---------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# INCLUDE_DIR and LIB_DIR specify where to install the include files and the library.\n\n# Use qmake INCLUDE_DIR=... LIB_DIR=... , or qmake PREFIX=... to customize your installation.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# GLUT for Unix architecture\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# GLU is part of the OpenGL framework\n",
        "Line" : 151,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Adds a -P option so that \"make install\" as root creates files owned by root and links are preserved.\n\n# This is not a standard option, and it may have to be removed on old Unix flavors.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Make much smaller libraries (and packages) by removing debugging informations\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# install header\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Should be $$replace(TRANSLATIONS, .ts, .qm), but 'replace' only appeared in Qt 4.3\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# install documentation html\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# install documentation images\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# install documentation examples\n\n#docExamples.path = $${DOC_DIR}/examples\n\n#docExamples.files = ../examples/*../examples/*/*\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# install documentation refManual\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# install static library\n\n#staticlib.extra = make -f Makefile.Release staticlib\n\n#staticlib.path = $${LIB_DIR_}\n\n#staticlib.files = lib$${TARGET}.a\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# install library\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# \"make install\" configuration options\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# -----------------------\n\n# --  S G I   I r i x  --\n\n# -----------------------\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# GLUT for SGI architecture\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# -------------------\n\n# --  M a c O S X  --\n\n# -------------------\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# This setting creates a Mac framework. Comment out this line to create a dylib instead.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Should be $$replace(TRANSLATIONS, .ts, .qm), but 'replace' is only available in Qt 4.3\n",
        "Line" : 238,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# For a Framework, 'include' and 'lib' do no make sense.\n\n# These and prefix will all define the DESTDIR, in that order in case several are defined\n",
        "Line" : 245,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "#QMAKE_LFLAGS_SONAME  = -Wl,-install_name,@executable_path/../Frameworks/\n\n#QMAKE_LFLAGS_SONAME  = -Wl,-install_name,\n",
        "Line" : 261,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Framework already installed, with includes\n",
        "Line" : 264,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "#QMAKE_LFLAGS_SONAME  = -Wl,-install_name,libQGLViewer.dylib\n",
        "Line" : 267,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# GLUT for Macintosh architecture\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# ---------------------\n\n# --  W i n d o w s  --\n\n# ---------------------\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Windows requires a debug lib version to link against debug applications\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Needed by Intel C++, (icl.exe) so that WINGDIAPI is a defined symbol in gl.h.\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# TP : C++ source code\n\n# GR : Enables run-time type information (RTTI).\n\n# Zi : Generates complete debugging information (removed)\n\n# EHs : The exception-handling model that catches C++ exceptions only and tells the\n\n#       compiler to assume that functions declared as extern \"C\" may throw an exception.\n\n# FS : Enable parallel compilation\n\n# Any feedback on these flags is welcome.\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 33
    },
    "ThirdParty/libuuid/CMakeLists.txt" : {
      "ObjectId" : "b64ee17f409e19bb5df26b10faa67db9819069ca",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/tetgen/CMakeLists.txt" : {
      "ObjectId" : "536100314fd9241bbbcc1c42f1118a15ef3784fc",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set  the minimum  required version  of cmake  for a  project.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Add a library to the project using the specified source files. \n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Set properties on a target. \n\n#We use this here to set -DTETLIBRARY for when compiling the library\n\n#set_target_properties(tet PROPERTIES \"COMPILE_DEFINITIONS\" TETLIBRARY)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindDevIL.cmake" : {
      "ObjectId" : "ae0f97d7330d44725589d91846dedb6be4466aaa",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module locates the developer's image library.\n\n# http://openil.sourceforge.net/\n\n#\n\n# This module sets:\n\n# IL_LIBRARIES the name of the IL library. These include the full path to the core DevIL library. This one has to be linked into the application.\n\n# ILU_LIBRARIES the name of the ILU library. Again, the full path. This library is for filters and effects, not actual loading. It doesn't have to be linked if the functionality it provides is not used.\n\n# ILUT_LIBRARIES the name of the ILUT library. Full path. This part of the library interfaces with OpenGL. It is not strictly needed in applications.\n\n# IL_INCLUDE_DIR where to find the il.h, ilu.h and ilut.h files.\n\n# IL_FOUND this is set to TRUE if all the above variables were set. This will be set to false if ILU or ILUT are not found, even if they are not needed. In most systems, if one library is found all the others are as well. That's the way the DevIL developers release it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n# Copyright 2008 Christopher Harvey\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Add version support.\n\n# Tested under Linux and Windows (MSVC)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MESSAGE(\"IL_INCLUDE_DIR is ${IL_INCLUDE_DIR}\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#MESSAGE(\"IL_LIBRARIES is ${IL_LIBRARIES}\")\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#MESSAGE(\"ILUT_LIBRARIES is ${ILUT_LIBRARIES}\")\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"ILU_LIBRARIES is ${ILU_LIBRARIES}\")\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake_modules/FindGLEW.cmake" : {
      "ObjectId" : "033ca963d2bbb79c78d5e4391a3a49e19db0a846",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find GLEW\n\n# Find the GLEW includes and library\n\n#\n\n#  GLEW_INCLUDE_DIRS   - where to find glew.h, etc.\n\n#  GLEW_LIBRARIES      - List of libraries when using GLEW.\n\n#  GLEW_FOUND          - True if GLEW found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GLEW_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_modules/FindQGLViewer.cmake" : {
      "ObjectId" : "8aa535990af5b36c03f11592f680b41df1a37935",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find QGLViewer\n\n# Once done this will define\n\n#\n\n#  QGLVIEWER_FOUND - system has QGLViewer\n\n#  QGLVIEWER_INCLUDE_DIR - the QGLViewer include directory\n\n#  QGLVIEWER_LIBRARIES - Link these to use QGLViewer\n\n#  QGLVIEWER_DEFINITIONS - Compiler switches required for using QGLViewer\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake_modules/FindQwt.cmake" : {
      "ObjectId" : "b64011f96baa3cc441c8c19aae5c799552262b6b",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Qwt\n\n# ~~~~~~~~\n\n# Copyright (c) 2010, Tim Sutton <tim at linfiniti.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Once run this will define: \n\n# \n\n# QWT_FOUND       = system has QWT lib\n\n# QWT_LIBRARY     = full path to the QWT library\n\n# QWT_INCLUDE_DIR = where to find headers \n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake_modules/FindSuiteSparse.cmake" : {
      "ObjectId" : "3487cf2a12e7391552fce4d78a3d3533108c7ba7",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## CMake file to locate SuiteSparse and its useful composite projects\r\n\n## The first developpement of this file was made fro Windows users who\r\n\n## use the http://code.google.com/p/suitesparse-metis-for-windows/\r\n\n## downloaded here :\r\n\n## svn checkout http://suitesparse-metis-for-windows.googlecode.com/svn/trunk/ suitesparse-metis-for-windows\r\n\n## Anyway, it chould be work also on linux (tested on fedora 17 when you installed suitesparse from yum)\r\n\n##\r\n\n##\r\n\n## Inputs variables this file can process (variable must be given before find_package(SUITESPARES ...) command) :\r\n\n##   * SUITESPARSE_VERBOSE\t\t\tDefault to OFF\r\n\n##   * SUITESPARSE_USE_LAPACK_BLAS\tDefault to OFF. If ON append to SUITESPARSE_LIBRARIES the blas and lapack library\r\n\n##   Note: SuiteSparse lib usually requires linking to a blas and lapack library.\r\n\n##\r\n\n##\r\n\n## Help variables this file handle internaly :\r\n\n##   * SUITESPARSE_SEARCH_LIB_POSTFIX\t\tIs set in cache (as advanced) to look into the right lib/lib64 dir for libraries (user can change)\r\n\n##\r\n\n##\r\n\n## Variables this file provide : \r\n\n##   * SUITESPARSE_FOUND         \t\t\tTrue if SuiteSparse given COMPONENTS include and libraries were found\r\n\n##   * SUITESPARSE_INCLUDE_DIRS  \t\t\tPaths containing SuiteSparse needed headers (depend on which COMPONENTS you gave)\r\n\n##   * SUITESPARSE_LIBRARIES     \t\t\tAbsolute paths of SuiteSparse libs found (depend on which COMPONENTS you gave)\r\n\n##   If SUITESPARSE_USE_LAPACK_BLAS is set to ON : \r\n\n##   \t* SUITESPARSE_LAPACK_BLAS_LIBRARIES \tWhich contain the libblas and liblapack libraries\r\n\n##   \tOn windows:\r\n\n##   \t\t* SUITESPARSE_LAPACK_BLAS_DLL\t\tWhich contain all requiered binaries for use libblas and liblapack\r\n\n##\r\n\n##\r\n\n## Detailed variables this file provide :\r\n\n##   * SUITESPARSE_<UPPPER_CASE_COMPONENT>_FOUND\t\tTrue if the given component to look for is found (INCLUDE DIR and LIBRARY)\r\n\n##   * SUITESPARSE_<UPPPER_CASE_COMPONENT>_INCLUDE_DIR\tThe path directory where we can found all compenent header files\r\n\n##   * SUITESPARSE_<UPPPER_CASE_COMPONENT>_LIBRARY\t\tThe file path to the component library\r\n\n##   Note: If a component is not found, a SUITESPARSE_<UPPPER_CASE_COMPONENT>_DIR cache variable is set to allow user set the search directory.\r\n\n##\r\n\n##\r\n\n## Possible componnents to find are (maybe some others can be available):\r\n\n##   * AMD\r\n\n##   * CAMD\r\n\n##   * COLAMD\r\n\n##   * CCOLAMD\r\n\n##   * CHOLMOD\t: this lib need all previous one. According to how it was build (a single static lib or a full dynamic one), you should looking for its dependencies.\r\n\n##   * metis (opt): may not be found (depend if suitesparse was build with metis or not) => required by CHOLMOD (optional)\r\n\n##\r\n\n##\r\n\n## How to use this file : \r\n\n##   (opt) set(SUITESPARSE_VERBOSE ON)\r\n\n##   (opt) set(SUITESPARSE_USE_LAPACK_BLAS ON)\r\n\n##   ( 1 ) find_package(SuiteSparse) ## metis is not search by default because it's not a part of suitesparse (suitesparse can be built without metis)\r\n\n##   ( 2 ) find_package(SuiteSparse COMPONENTS metis CHOLMOD) \t\t## be careful, components are case sensitive\r\n\n##   ( 3 ) find_package(SuiteSparse COMPONENTS metis suitesparse)\t## valid on windows (linux have no suitesparse library)\r\n\n##   ( 4 ) find_package(SuiteSparse COMPONENTS suitesparse)\r\n\n## \r\n\n##    if(SUITESPARSE_FOUND)\r\n\n##       include_directories(${SUITESPARSE_INCLUDE_DIRS})\r\n\n##\t\t target_link_library(<myProject> ${SUITESPARSE_LIBRARIES})\r\n\n##\t  endif()\r\n\n##\r\n\n## Created by jesnault (jerome.esnault@inria.fr) 2014-01-15\r\n\n## Updated by jesnault (jerome.esnault@inria.fr) 2014-01-21\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## check if global root SuiteSparse folder is set or not and cache it in order to let user fill it\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## set default verbosity\r\n\n## Process the CMake automatically-generated var: SUITESPARSE_FIND_QUIETLY: supersedes *_VERBOSE.\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## set the LIB POSTFIX to find in a right directory according to what kind of compiler we use (32/64bits)\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Size in bytes!\r\n",
        "Line" : 79,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# Size in bytes!\r\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "## This utility macro is used to find all suitesparse projects by giving its name\r\n\n## Since the name structure is the same for lib name and include dir name,\r\n\n## we can use a generic way to find all of these with simple cmake lines of code\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## On windows : we absolutly need SUITESPARSE_config.h every time for all projects\r\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "## special check for suitesparse component (allow to find on windows but not on linux because doesn't exist)\r\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "## do nothing, the user didn't provide the suisparse componnent\r\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## do nothing, the user provide the suisparse componnent we will try to find\r\n",
        "Line" : 114,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "## Look for each component the same way :\r\n\n##  * For include dir the reference file is the <component>.h\r\n\n##\t* for library fileName the reference is the <component> itself (cmake will prepend/append necessary prefix/suffix according to the plateform)\r\n",
        "Line" : 123,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "## used to construct specific cmake variables (in upper case) according to the component, but also used for find_*()\r\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "## Special case: CXSparse library is named \"libcxsparse.*\" but headers are \"cs.h\":\r\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Alternative names\r\n",
        "Line" : 133,
        "CharPositionInLine" : 48
      },
      "15" : {
        "Text" : "# Alternative name of CXSparse\r\n",
        "Line" : 135,
        "CharPositionInLine" : 33
      },
      "16" : {
        "Text" : "## try to find include dir (looking for very important header file)\r\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "## check if found\r\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "## try to find filepath lib name (looking for very important lib file)\r\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "## check and append the and SUITESPARSE_LIBRARIES list, and warn if not found (release and debug) otherwise\r\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "## here we allow to find at least the include OR the lib dir and just warn if one of both missing\r\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "## if one of both (include dir or filepath lib), then we provide a new cmake cache variable for the search. Otherwise we don't need anymore to expose all intermediates variables\r\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "## special definition needed for metis\r\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "## set the final SUITESPARSE_FOUND based on all previous components found (status)\r\n",
        "Line" : 231,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "## one component not found is enought to failed\r\n",
        "Line" : 239,
        "CharPositionInLine" : 11
      },
      "25" : {
        "Text" : "## Default behavior if user don't use the COMPONENTS flag in find_package(SuiteSparse ...) command\r\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## suitesparse and metis are not searched by default (special case)\r\n",
        "Line" : 246,
        "CharPositionInLine" : 109
      },
      "27" : {
        "Text" : "## check if we have to find also blas and lapack lib for SuiteSparse\r\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## set additional search dirs\r\n",
        "Line" : 254,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "## try to find blas lib\r\n",
        "Line" : 268,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Send all msgs as \"STATUS\": We'll send an error at the bottom, only if \"REQUIRED\" is set.\r\n",
        "Line" : 281,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "## try to find lapack lib\r\n",
        "Line" : 292,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Send all msgs as \"STATUS\": We'll send an error at the bottom, only if \"REQUIRED\" is set.\r\n",
        "Line" : 305,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "## well, now append to the SUITESPARSE_LIBRARIES and print infos if VERBOSE\r\n",
        "Line" : 329,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "## Now looking for *.dll => note that this is not a safe way to get it...\r\n",
        "Line" : 341,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "## append the *.dll\r\n",
        "Line" : 373,
        "CharPositionInLine" : 81
      },
      "36" : {
        "Text" : "## Show error if not found and _REQUIRED\r\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# make FIND_PACKAGE friendly\r\n",
        "Line" : 426,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 38
    },
    "cmake_modules/FindTinyXml2.cmake" : {
      "ObjectId" : "874744aebde31971fc34a819c3ec1fba5f96aaf0",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#########################\n\n# UPDATE VARIABLES:\n\n# - TINYXML2_FOUND\n\n# - TINYXML2_INCLUDE_DIR\n\n# - TINYXML2_LIBRARY\n\n#########################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake_modules/Qt_4x.cmake" : {
      "ObjectId" : "4c459a0fa397279aecea54622571a51807e91ea7",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# qt5_use_modules port\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# macro that include module need by cgogn\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# aliases to make it work across Qt4/Qt5\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake_modules/Qt_5x.cmake" : {
      "ObjectId" : "23d99539e3dd62747f4d4a0b7836bf034029e066",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Qt5Widgets required for qt5_wrap_ui\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# aliases (module Widgets included by default)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# macro that include module need by cgogn\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# version\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake_modules/functions.cmake" : {
      "ObjectId" : "bfa27d4fbbdd26929edc7ff4ff24743b31ebc485",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ====== Check GCC VERSION FOR C++11 ======\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# ====== Check CLANG VERSION FOR C++11 ======\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# ====== Check MSVC VERSION FOR C++11 ======\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "doc/Makefile" : {
      "ObjectId" : "dfcef1f88f3ca9373f6ddeb7103f551db0f48147",
      "LastModified" : "2016-04-26T08:28:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 119,
    "QMAKE" : 84,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 15
  },
  "ElapsedTime" : 3683
}