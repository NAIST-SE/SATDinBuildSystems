{
  "Repository" : "25978150",
  "Revision" : "HEAD",
  "ObjectId" : "d2f0419c0f3283e33da45dd8f74dcc6743671d97",
  "CommitTime" : "2019-03-31T20:55:42Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "b9fa3174c28fc77aad938004c5d1ceef6e20f7cf",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "docs/Makefile" : {
      "ObjectId" : "1005e265973ba976766d336b6c043d066e663d6e",
      "LastModified" : "2014-07-12T18:18:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "skbuild/resources/cmake/FindCython.cmake" : {
      "ObjectId" : "b8ae3053234829c281aab38cbe57290a849c7d00",
      "LastModified" : "2016-09-20T00:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# Find ``cython`` executable.\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n#  ``CYTHON_EXECUTABLE``\n\n#    path to the ``cython`` program\n\n#\n\n#  ``CYTHON_VERSION``\n\n#    version of ``cython``\n\n#\n\n#  ``CYTHON_FOUND``\n\n#    true if the program was found\n\n#\n\n# For more information on the Cython project, see http://cython.org/.\n\n#\n\n# *Cython is a language that makes writing C extensions for the Python language\n\n# as easy as Python itself.*\n\n#\n\n#=============================================================================\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use the Cython executable that lives next to the Python executable\n\n# if it is a local installation.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "skbuild/resources/cmake/FindF2PY.cmake" : {
      "ObjectId" : "0ab0fdbefb64f31c9aba8b2bb9281cdb156a0902",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# The purpose of the F2PY –Fortran to Python interface generator– project is to provide a\n\n# connection between Python and Fortran languages.\n\n#\n\n# F2PY is a Python package (with a command line tool f2py and a module f2py2e) that facilitates\n\n# creating/building Python C/API extension modules that make it possible to call Fortran 77/90/95\n\n# external subroutines and Fortran 90/95 module subroutines as well as C functions; to access Fortran\n\n# 77 COMMON blocks and Fortran 90/95 module data, including allocatable arrays from Python.\n\n#\n\n# For more information on the F2PY project, see http://www.f2py.com/.\n\n#\n\n# The following variables are defined:\n\n#\n\n# ::\n\n#\n\n#   F2PY_EXECUTABLE      - absolute path to the F2PY executable\n\n#\n\n# ::\n\n#\n\n#   F2PY_VERSION_STRING  - the version of F2PY found\n\n#   F2PY_VERSION_MAJOR   - the F2PY major version\n\n#   F2PY_VERSION_MINOR   - the F2PY minor version\n\n#   F2PY_VERSION_PATCH   - the F2PY patch version\n\n#\n\n#\n\n# .. note::\n\n#\n\n#   By default, the module finds the F2PY program associated with the installed NumPy package.\n\n#\n\n# Example usage\n\n# ^^^^^^^^^^^^^\n\n#\n\n# Assuming that a package named ``method`` is declared in ``setup.py`` and that the corresponding directory\n\n# containing ``__init__.py`` also exists, the following CMake code can be added to ``method/CMakeLists.txt``\n\n# to ensure the C sources associated with ``cylinder_methods.f90`` are generated and the corresponding module\n\n# is compiled:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   find_package(F2PY REQUIRED)\n\n#\n\n#   set(f2py_module_name \"_cylinder_methods\")\n\n#   set(fortran_src_file \"${CMAKE_CURRENT_SOURCE_DIR}/cylinder_methods.f90\")\n\n#\n\n#   set(generated_module_file ${CMAKE_CURRENT_BINARY_DIR}/${f2py_module_name}${PYTHON_EXTENSION_MODULE_SUFFIX})\n\n#\n\n#   add_custom_target(${f2py_module_name} ALL\n\n#     DEPENDS ${generated_module_file}\n\n#     )\n\n#\n\n#   add_custom_command(\n\n#     OUTPUT ${generated_module_file}\n\n#     COMMAND ${F2PY_EXECUTABLE}\n\n#       -m ${f2py_module_name}\n\n#       -c\n\n#       ${fortran_src_file}\n\n#     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n\n#     )\n\n#\n\n#   install(FILES ${generated_module_file} DESTINATION methods)\n\n#\n\n# .. warning::\n\n#\n\n#   Using ``f2py`` with ``-c`` argument means that f2py is also responsible to build the module. In that\n\n#   case, CMake is not used to find the compiler and configure the associated build system.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# extract the version string\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set F2PY_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "skbuild/resources/cmake/FindNumPy.cmake" : {
      "ObjectId" : "cd78112b50d3d3f1aa7e28198647cbb08ff4f2b9",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# Find the include directory for ``numpy/arrayobject.h`` as well as other NumPy tools like ``conv-template`` and\n\n# ``from-template``.\n\n#\n\n# This module sets the following variables:\n\n#\n\n# ``NumPy_FOUND``\n\n#   True if NumPy was found.\n\n# ``NumPy_INCLUDE_DIRS``\n\n#   The include directories needed to use NumpPy.\n\n# ``NumPy_VERSION``\n\n#   The version of NumPy found.\n\n# ``NumPy_CONV_TEMPLATE_EXECUTABLE``\n\n#   Path to conv-template executable.\n\n# ``NumPy_FROM_TEMPLATE_EXECUTABLE``\n\n#   Path to from-template executable.\n\n#\n\n# The module will also explicitly define one cache variable:\n\n#\n\n# ``NumPy_INCLUDE_DIR``\n\n#\n\n# .. note::\n\n#\n\n#     To support NumPy < v0.15.0 where ``from-template`` and ``conv-template`` are not declared as entry points,\n\n#     the module emulates the behavior of standalone executables by setting the corresponding variables with the\n\n#     path the the python interpreter and the path to the associated script. For example:\n\n#     ::\n\n#\n\n#         set(NumPy_CONV_TEMPLATE_EXECUTABLE /path/to/python /path/to/site-packages/numpy/distutils/conv_template.py CACHE STRING \"Command executing conv-template program\" FORCE)\n\n#\n\n#         set(NumPy_FROM_TEMPLATE_EXECUTABLE /path/to/python /path/to/site-packages/numpy/distutils/from_template.py CACHE STRING \"Command executing from-template program\" FORCE)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# XXX This is required to support NumPy < v0.15.0. See note in module documentation above.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# XXX This is required to support NumPy < v0.15.0. See note in module documentation above.\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NumPy_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "skbuild/resources/cmake/FindPythonExtensions.cmake" : {
      "ObjectId" : "dafc337bd8d76753e2433762135178f4b723cd6a",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# This module defines CMake functions to build Python extension modules and\n\n# stand-alone executables.\n\n#\n\n# The following variables are defined:\n\n# ::\n\n#\n\n#   PYTHON_PREFIX                     - absolute path to the current Python\n\n#                                       distribution's prefix\n\n#   PYTHON_SITE_PACKAGES_DIR          - absolute path to the current Python\n\n#                                       distribution's site-packages directory\n\n#   PYTHON_RELATIVE_SITE_PACKAGES_DIR - path to the current Python\n\n#                                       distribution's site-packages directory\n\n#                                       relative to its prefix\n\n#   PYTHON_SEPARATOR                  - separator string for file path\n\n#                                       components.  Equivalent to ``os.sep`` in\n\n#                                       Python.\n\n#   PYTHON_PATH_SEPARATOR             - separator string for PATH-style\n\n#                                       environment variables.  Equivalent to\n\n#                                       ``os.pathsep`` in Python.\n\n#   PYTHON_EXTENSION_MODULE_SUFFIX    - suffix of the compiled module. For example, on\n\n#                                       Linux, based on environment, it could be ``.cpython-35m-x86_64-linux-gnu.so``.\n\n#\n\n#\n\n#\n\n# The following functions are defined:\n\n#\n\n# .. cmake:command:: python_extension_module\n\n#\n\n# For libraries meant to be used as Python extension modules, either dynamically\n\n# loaded or directly linked.  Amend the configuration of the library target\n\n# (created using ``add_library``) with additional options needed to build and\n\n# use the referenced library as a Python extension module.\n\n#\n\n#   python_extension_module(<Target>\n\n#                           [LINKED_MODULES_VAR <LinkedModVar>]\n\n#                           [FORWARD_DECL_MODULES_VAR <ForwardDeclModVar>]\n\n#                           [MODULE_SUFFIX <ModuleSuffix>])\n\n#\n\n# Only extension modules that are configured to be built as MODULE libraries can\n\n# be runtime-loaded through the standard Python import mechanism.  All other\n\n# modules can only be included in standalone applications that are written to\n\n# expect their presence.  In addition to being linked against the libraries for\n\n# these modules, such applications must forward declare their entry points and\n\n# initialize them prior to use.  To generate these forward declarations and\n\n# initializations, see ``python_modules_header``.\n\n#\n\n# If ``<Target>`` does not refer to a target, then it is assumed to refer to an\n\n# extension module that is not linked at all, but compiled along with other\n\n# source files directly into an executable.  Adding these modules does not cause\n\n# any library configuration modifications, and they are not added to the list of\n\n# linked modules.  They still must be forward declared and initialized, however,\n\n# and so are added to the forward declared modules list.\n\n#\n\n# If the associated target is of type ``MODULE_LIBRARY``, the LINK_FLAGS target\n\n# property is used to set symbol visibility and export only the module init function.\n\n# This applies to GNU and MSVC compilers.\n\n#\n\n# Options:\n\n#\n\n# ``LINKED_MODULES_VAR <LinkedModVar>``\n\n#   Name of the variable referencing a list of extension modules whose libraries\n\n#   must be linked into the executables of any stand-alone applications that use\n\n#   them.  By default, the global property ``PY_LINKED_MODULES_LIST`` is used.\n\n#\n\n# ``FORWARD_DECL_MODULES_VAR <ForwardDeclModVar>``\n\n#   Name of the variable referencing a list of extension modules whose entry\n\n#   points must be forward declared and called by any stand-alone applications\n\n#   that use them.  By default, the global property\n\n#   ``PY_FORWARD_DECL_MODULES_LIST`` is used.\n\n#\n\n# ``MODULE_SUFFIX <ModuleSuffix>``\n\n#   Suffix appended to the python extension module file.\n\n#   The default suffix is retrieved using ``sysconfig.get_config_var(\"SO\")\"``,\n\n#   if not available, the default is then ``.so`` on unix and ``.pyd`` on\n\n#   windows.\n\n#   Setting the variable ``PYTHON_EXTENSION_MODULE_SUFFIX`` in the caller\n\n#   scope defines the value used for all extensions not having a suffix\n\n#   explicitly specified using ``MODULE_SUFFIX`` parameter.\n\n#\n\n#\n\n# .. cmake:command:: python_standalone_executable\n\n#\n\n#   python_standalone_executable(<Target>)\n\n#\n\n# For standalone executables that initialize their own Python runtime\n\n# (such as when building source files that include one generated by Cython with\n\n# the --embed option).  Amend the configuration of the executable target\n\n# (created using ``add_executable``) with additional options needed to properly\n\n# build the referenced executable.\n\n#\n\n#\n\n# .. cmake:command:: python_modules_header\n\n#\n\n# Generate a header file that contains the forward declarations and\n\n# initialization routines for the given list of Python extension modules.\n\n# ``<Name>`` is the logical name for the header file (no file extensions).\n\n# ``<HeaderFilename>`` is the actual destination filename for the header file\n\n# (e.g.: decl_modules.h).\n\n#\n\n#   python_modules_header(<Name> [HeaderFilename]\n\n#                         [FORWARD_DECL_MODULES_LIST <ForwardDeclModList>]\n\n#                         [HEADER_OUTPUT_VAR <HeaderOutputVar>]\n\n#                         [INCLUDE_DIR_OUTPUT_VAR <IncludeDirOutputVar>])\n\n#\n\n# If only ``<Name>`` is provided, and it ends in the \".h\" extension, then it\n\n# is assumed to be the ``<HeaderFilename>``.  The filename of the header file\n\n# without the extension is used as the logical name.  If only ``<Name>`` is\n\n# provided, and it does not end in the \".h\" extension, then the\n\n# ``<HeaderFilename>`` is assumed to ``<Name>.h``.\n\n#\n\n# The exact contents of the generated header file depend on the logical\n\n# ``<Name>``.  It should be set to a value that corresponds to the target\n\n# application, or for the case of multiple applications, some identifier that\n\n# conveyes its purpose.  It is featured in the generated multiple inclusion\n\n# guard as well as the names of the generated initialization routines.\n\n#\n\n# The generated header file includes forward declarations for all listed\n\n# modules, as well as implementations for the following class of routines:\n\n#\n\n# ``int <Name>_<Module>(void)``\n\n#   Initializes the python extension module, ``<Module>``.  Returns an integer\n\n#   handle to the module.\n\n#\n\n# ``void <Name>_LoadAllPythonModules(void)``\n\n#   Initializes all listed python extension modules.\n\n#\n\n# ``void CMakeLoadAllPythonModules(void);``\n\n#   Alias for ``<Name>_LoadAllPythonModules`` whose name does not depend on\n\n#   ``<Name>``.  This function is excluded during preprocessing if the\n\n#   preprocessing macro ``EXCLUDE_LOAD_ALL_FUNCTION`` is defined.\n\n#\n\n# ``void Py_Initialize_Wrapper();``\n\n#   Wrapper arpund ``Py_Initialize()`` that initializes all listed python\n\n#   extension modules.  This function is excluded during preprocessing if the\n\n#   preprocessing macro ``EXCLUDE_PY_INIT_WRAPPER`` is defined.  If this\n\n#   function is generated, then ``Py_Initialize()`` is redefined to a macro\n\n#   that calls this function.\n\n#\n\n# Options:\n\n#\n\n# ``FORWARD_DECL_MODULES_LIST <ForwardDeclModList>``\n\n#   List of extension modules for which to generate forward declarations of\n\n#   their entry points and their initializations.  By default, the global\n\n#   property ``PY_FORWARD_DECL_MODULES_LIST`` is used.\n\n#\n\n# ``HEADER_OUTPUT_VAR <HeaderOutputVar>``\n\n#   Name of the variable to set to the path to the generated header file.  By\n\n#   default, ``<Name>`` is used.\n\n#\n\n# ``INCLUDE_DIR_OUTPUT_VAR <IncludeDirOutputVar>``\n\n#   Name of the variable to set to the path to the directory containing the\n\n#   generated header file.  By default, ``<Name>_INCLUDE_DIRS`` is used.\n\n#\n\n# Defined variables:\n\n#\n\n# ``<HeaderOutputVar>``\n\n#   The path to the generated header file\n\n#\n\n# ``<IncludeDirOutputVar>``\n\n#   Directory containing the generated header file\n\n#\n\n#\n\n# Example usage\n\n# ^^^^^^^^^^^^^\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#    find_package(PythonInterp)\n\n#    find_package(PythonLibs)\n\n#    find_package(PythonExtensions)\n\n#    find_package(Cython)\n\n#    find_package(Boost COMPONENTS python)\n\n#\n\n#    # Simple Cython Module -- no executables\n\n#    add_cython_target(_module.pyx)\n\n#    add_library(_module MODULE ${_module})\n\n#    python_extension_module(_module)\n\n#\n\n#    # Mix of Cython-generated code and C++ code using Boost Python\n\n#    # Stand-alone executable -- no modules\n\n#    include_directories(${Boost_INCLUDE_DIRS})\n\n#    add_cython_target(main.pyx CXX EMBED_MAIN)\n\n#    add_executable(main boost_python_module.cxx ${main})\n\n#    target_link_libraries(main ${Boost_LIBRARIES})\n\n#    python_standalone_executable(main)\n\n#\n\n#    # stand-alone executable with three extension modules:\n\n#    # one statically linked, one dynamically linked, and one loaded at runtime\n\n#    #\n\n#    # Freely mixes Cython-generated code, code using Boost-Python, and\n\n#    # hand-written code using the CPython API.\n\n#\n\n#    # module1 -- statically linked\n\n#    add_cython_target(module1.pyx)\n\n#    add_library(module1 STATIC ${module1})\n\n#    python_extension_module(module1\n\n#                            LINKED_MODULES_VAR linked_module_list\n\n#                            FORWARD_DECL_MODULES_VAR fdecl_module_list)\n\n#\n\n#    # module2 -- dynamically linked\n\n#    include_directories({Boost_INCLUDE_DIRS})\n\n#    add_library(module2 SHARED boost_module2.cxx)\n\n#    target_link_libraries(module2 ${Boost_LIBRARIES})\n\n#    python_extension_module(module2\n\n#                            LINKED_MODULES_VAR linked_module_list\n\n#                            FORWARD_DECL_MODULES_VAR fdecl_module_list)\n\n#\n\n#    # module3 -- loaded at runtime\n\n#    add_cython_target(module3a.pyx)\n\n#    add_library(module3 MODULE ${module3a} module3b.cxx)\n\n#    target_link_libraries(module3 ${Boost_LIBRARIES})\n\n#    python_extension_module(module3\n\n#                            LINKED_MODULES_VAR linked_module_list\n\n#                            FORWARD_DECL_MODULES_VAR fdecl_module_list)\n\n#\n\n#    # application executable -- generated header file + other source files\n\n#    python_modules_header(modules\n\n#                          FORWARD_DECL_MODULES_LIST ${fdecl_module_list})\n\n#    include_directories(${modules_INCLUDE_DIRS})\n\n#\n\n#    add_cython_target(mainA)\n\n#    add_cython_target(mainC)\n\n#    add_executable(main ${mainA} mainB.cxx ${mainC} mainD.c)\n\n#\n\n#    target_link_libraries(main ${linked_module_list} ${Boost_LIBRARIES})\n\n#    python_standalone_executable(main)\n\n#\n\n#=============================================================================\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if present, use arg0 as the input file path\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# otherwise, must determine source file from name, or vice versa\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# if extension provided, _name is the source file\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# otherwise, assume the source file is ${_name}.h\n",
        "Line" : 456,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# with configure_file() cmake complains that you may not use a file created\n\n# using file(WRITE) as input file for configure_file()\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "skbuild/resources/cmake/UseCython.cmake" : {
      "ObjectId" : "a38eb65c35bde95cac9399bd8d610b70d53a30e1",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# The following functions are defined:\n\n#\n\n# .. cmake:command:: add_cython_target\n\n#\n\n# Create a custom rule to generate the source code for a Python extension module\n\n# using cython.\n\n#\n\n#   add_cython_target(<Name> [<CythonInput>]\n\n#                     [EMBED_MAIN]\n\n#                     [C | CXX]\n\n#                     [PY2 | PY3]\n\n#                     [OUTPUT_VAR <OutputVar>])\n\n#\n\n# ``<Name>`` is the name of the new target, and ``<CythonInput>``\n\n# is the path to a cython source file.  Note that, despite the name, no new\n\n# targets are created by this function.  Instead, see ``OUTPUT_VAR`` for\n\n# retrieving the path to the generated source for subsequent targets.\n\n#\n\n# If only ``<Name>`` is provided, and it ends in the \".pyx\" extension, then it\n\n# is assumed to be the ``<CythonInput>``.  The name of the input without the\n\n# extension is used as the target name.  If only ``<Name>`` is provided, and it\n\n# does not end in the \".pyx\" extension, then the ``<CythonInput>`` is assumed to\n\n# be ``<Name>.pyx``.\n\n#\n\n# The Cython include search path is amended with any entries found in the\n\n# ``INCLUDE_DIRECTORIES`` property of the directory containing the\n\n# ``<CythonInput>`` file.  Use ``include_directories`` to add to the Cython\n\n# include search path.\n\n#\n\n# Options:\n\n#\n\n# ``EMBED_MAIN``\n\n#   Embed a main() function in the generated output (for stand-alone\n\n#   applications that initialize their own Python runtime).\n\n#\n\n# ``C | CXX``\n\n#   Force the generation of either a C or C++ file.  By default, a C file is\n\n#   generated, unless the C language is not enabled for the project; in this\n\n#   case, a C++ file is generated by default.\n\n#\n\n# ``PY2 | PY3``\n\n#   Force compilation using either Python-2 or Python-3 syntax and code\n\n#   semantics.  By default, Python-2 syntax and semantics are used if the major\n\n#   version of Python found is 2.  Otherwise, Python-3 syntax and sematics are\n\n#   used.\n\n#\n\n# ``OUTPUT_VAR <OutputVar>``\n\n#   Set the variable ``<OutputVar>`` in the parent scope to the path to the\n\n#   generated source file.  By default, ``<Name>`` is used as the output\n\n#   variable name.\n\n#\n\n# Defined variables:\n\n#\n\n# ``<OutputVar>``\n\n#   The path of the generated source file.\n\n#\n\n# Cache variables that effect the behavior include:\n\n#\n\n# ``CYTHON_ANNOTATE``\n\n#   whether to create an annotated .html file when compiling\n\n#\n\n# ``CYTHON_FLAGS``\n\n#   additional flags to pass to the Cython compiler\n\n#\n\n# Example usage\n\n# ^^^^^^^^^^^^^\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   find_package(Cython)\n\n#\n\n#   # Note: In this case, either one of these arguments may be omitted; their\n\n#   # value would have been inferred from that of the other.\n\n#   add_cython_target(cy_code cy_code.pyx)\n\n#\n\n#   add_library(cy_code MODULE ${cy_code})\n\n#   target_link_libraries(cy_code ...)\n\n#\n\n#=============================================================================\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configuration options.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if provided, use _arg0 as the input file path\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# otherwise, must determine source file from name, or vice versa\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# if extension provided, _name is the source file\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# otherwise, assume the source file is ${_name}.pyx\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Get the include directories.\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Determine dependencies.\n\n# Add the pxd file with the same basename as the given pyx file.\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# pxd files to check for additional dependencies\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# look for C headers\n",
        "Line" : 239,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Had trouble getting the quote in the regex\n",
        "Line" : 243,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# check for pxd dependencies\n\n# Look for cimport statements.\n",
        "Line" : 257,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# check for pxi dependencies\n\n# Look for include statements.\n",
        "Line" : 274,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Add modules to the files to check, if appropriate.\n",
        "Line" : 288,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# if it is not already going to be checked\n",
        "Line" : 301,
        "CharPositionInLine" : 20
      },
      "15" : {
        "Text" : "# if it has not already been checked\n",
        "Line" : 302,
        "CharPositionInLine" : 18
      },
      "16" : {
        "Text" : "# if pxd file can be found\n",
        "Line" : 303,
        "CharPositionInLine" : 16
      },
      "17" : {
        "Text" : "# for each module dependency discovered\n",
        "Line" : 304,
        "CharPositionInLine" : 19
      },
      "18" : {
        "Text" : "# Add includes to the files to check, if appropriate.\n",
        "Line" : 306,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# if it is not already going to be checked\n",
        "Line" : 319,
        "CharPositionInLine" : 20
      },
      "20" : {
        "Text" : "# if it has not already been checked\n",
        "Line" : 320,
        "CharPositionInLine" : 18
      },
      "21" : {
        "Text" : "# if include file can be found\n",
        "Line" : 321,
        "CharPositionInLine" : 16
      },
      "22" : {
        "Text" : "# for each include dependency discovered\n",
        "Line" : 322,
        "CharPositionInLine" : 19
      },
      "23" : {
        "Text" : "# for each include file to check\n",
        "Line" : 323,
        "CharPositionInLine" : 17
      },
      "24" : {
        "Text" : "# Set additional flags.\n",
        "Line" : 328,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Include directory arguments.\n",
        "Line" : 350,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Add the command to run the compiler.\n",
        "Line" : 361,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# NOTE(opadron): I thought about making a proper target, but after trying it\n\n# out, I decided that it would be far too convenient to use the same name as\n\n# the target for the extension module (e.g.: for single-file modules):\n\n#\n\n# ...\n\n# add_cython_target(_module.pyx)\n\n# add_library(_module ${_module})\n\n# ...\n\n#\n\n# The above example would not be possible since the \"_module\" target name\n\n# would already be taken by the cython target.  Since I can't think of a\n\n# reason why someone would need the custom target instead of just using the\n\n# generated file directly, I decided to leave this commented out.\n\n#\n\n# add_custom_target(${_name} DEPENDS ${generated_file})\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Remove their visibility to the user.\n",
        "Line" : 391,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "skbuild/resources/cmake/targetLinkLibrariesWithDynamicLookup.cmake" : {
      "ObjectId" : "192cadb575a30ab7b797c3bd5ec58da0222af6b4",
      "LastModified" : "2018-04-08T18:56:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# Public Functions\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# The following functions are defined:\n\n#\n\n# .. cmake:command:: target_link_libraries_with_dynamic_lookup\n\n#\n\n# ::\n\n#\n\n#     target_link_libraries_with_dynamic_lookup(<Target> [<Libraries>])\n\n#\n\n#\n\n# Useful to \"weakly\" link a loadable module. For example, it should be used\n\n# when compiling a loadable module when the symbols should be resolve from\n\n# the run-time environment where the module is loaded, and not a specific\n\n# system library.\n\n#\n\n# Like proper linking, except that the given ``<Libraries>`` are not necessarily\n\n# linked. Instead, the ``<Target>`` is produced in a manner that allows for\n\n# symbols unresolved within it to be resolved at runtime, presumably by the\n\n# given ``<Libraries>``.  If such a target can be produced, the provided\n\n# ``<Libraries>`` are not actually linked.\n\n#\n\n# It links a library to a target such that the symbols are resolved at\n\n# run-time not link-time.\n\n#\n\n# The linker is checked to see if it supports undefined\n\n# symbols when linking a shared library. If it does then the library\n\n# is not linked when specified with this function.\n\n#\n\n# On platforms that do not support weak-linking, this function works just\n\n# like ``target_link_libraries``.\n\n#\n\n# .. note::\n\n#\n\n#     For OSX it uses ``undefined dynamic_lookup``. This is similar to using\n\n#     ``-shared`` on Linux where undefined symbols are ignored.\n\n#\n\n#     For more details, see `blog <http://blog.tim-smith.us/2015/09/python-extension-modules-os-x/>`_\n\n#     from Tim D. Smith.\n\n#\n\n#\n\n# .. cmake:command:: check_dynamic_lookup\n\n#\n\n# Check if the linker requires a command line flag to allow leaving symbols\n\n# unresolved when producing a target of type ``<TargetType>`` that is\n\n# weakly-linked against a dependency of type ``<LibType>``.\n\n#\n\n# ``<TargetType>``\n\n#   can be one of \"STATIC\", \"SHARED\", \"MODULE\", or \"EXE\".\n\n#\n\n# ``<LibType>``\n\n#   can be one of \"STATIC\", \"SHARED\", or \"MODULE\".\n\n#\n\n# Long signature:\n\n#\n\n# ::\n\n#\n\n#     check_dynamic_lookup(<TargetType>\n\n#                          <LibType>\n\n#                          <ResultVar>\n\n#                          [<LinkFlagsVar>])\n\n#\n\n#\n\n# Short signature:\n\n#\n\n# ::\n\n#\n\n#     check_dynamic_lookup(<ResultVar>) # <TargetType> set to \"MODULE\"\n\n#                                       # <LibType> set to \"SHARED\"\n\n#\n\n#\n\n# The result is cached between invocations and recomputed only when the value\n\n# of CMake's linker flag list changes; ``CMAKE_STATIC_LINKER_FLAGS`` if\n\n# ``<TargetType>`` is \"STATIC\", and ``CMAKE_SHARED_LINKER_FLAGS`` otherwise.\n\n#\n\n#\n\n# Defined variables:\n\n#\n\n# ``<ResultVar>``\n\n#   Whether the current C toolchain supports weak-linking for target binaries of\n\n#   type ``<TargetType>`` that are weakly-linked against a dependency target of\n\n#   type ``<LibType>``.\n\n#\n\n# ``<LinkFlagsVar>``\n\n#   List of flags to add to the linker command to produce a working target\n\n#   binary of type ``<TargetType>`` that is weakly-linked against a dependency\n\n#   target of type ``<LibType>``.\n\n#\n\n# ``HAS_DYNAMIC_LOOKUP_<TargetType>_<LibType>``\n\n#   Cached, global alias for ``<ResultVar>``\n\n#\n\n# ``DYNAMIC_LOOKUP_FLAGS_<TargetType>_<LibType>``\n\n#   Cached, global alias for ``<LinkFlagsVar>``\n\n#\n\n#\n\n# Private Functions\n\n# ^^^^^^^^^^^^^^^^^\n\n#\n\n# The following private functions are defined:\n\n#\n\n# .. warning:: These functions are not part of the scikit-build API. They\n\n#     exist purely as an implementation detail and may change from version\n\n#     to version without notice, or even be removed.\n\n#\n\n#     We mean it.\n\n#\n\n#\n\n# .. cmake:command:: _get_target_type\n\n#\n\n# ::\n\n#\n\n#     _get_target_type(<ResultVar> <Target>)\n\n#\n\n#\n\n# Shorthand for querying an abbreviated version of the target type\n\n# of the given ``<Target>``.\n\n#\n\n# ``<ResultVar>`` is set to:\n\n#\n\n# - \"STATIC\" for a STATIC_LIBRARY,\n\n# - \"SHARED\" for a SHARED_LIBRARY,\n\n# - \"MODULE\" for a MODULE_LIBRARY,\n\n# - and \"EXE\" for an EXECUTABLE.\n\n#\n\n# Defined variables:\n\n#\n\n# ``<ResultVar>``\n\n#   The abbreviated version of the ``<Target>``'s type.\n\n#\n\n#\n\n# .. cmake:command:: _test_weak_link_project\n\n#\n\n# ::\n\n#\n\n#     _test_weak_link_project(<TargetType>\n\n#                             <LibType>\n\n#                             <ResultVar>\n\n#                             <LinkFlagsVar>)\n\n#\n\n#\n\n# Attempt to compile and run a test project where a target of type\n\n# ``<TargetType>`` is weakly-linked against a dependency of type ``<LibType>``:\n\n#\n\n# - ``<TargetType>`` can be one of \"STATIC\", \"SHARED\", \"MODULE\", or \"EXE\".\n\n# - ``<LibType>`` can be one of \"STATIC\", \"SHARED\", or \"MODULE\".\n\n#\n\n# Defined variables:\n\n#\n\n# ``<ResultVar>``\n\n#   Whether the current C toolchain can produce a working target binary of type\n\n#   ``<TargetType>`` that is weakly-linked against a dependency target of type\n\n#   ``<LibType>``.\n\n#\n\n# ``<LinkFlagsVar>``\n\n#   List of flags to add to the linker command to produce a working target\n\n#   binary of type ``<TargetType>`` that is weakly-linked against a dependency\n\n#   target of type ``<LibType>``.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Two signatures are supported:\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# check_dynamic_lookup(<ResultVar>)\n\n#\n",
        "Line" : 432,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# check_dynamic_lookup(<TargetType>\n\n#                      <LibType>\n\n#                      <ResultVar>\n\n#                      [<LinkFlagsVar>])\n\n#\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# hash the CMAKE_FLAGS passed and check cache to know if we need to rerun\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# See gh-255\n",
        "Line" : 554,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "tests/samples/cmakelists-not-in-top-level-dir/hello/CMakeLists.txt" : {
      "ObjectId" : "d7939b646c185e4053978013eeba08c0ec139c73",
      "LastModified" : "2018-07-05T13:37:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/fail-hello-with-compile-error/CMakeLists.txt" : {
      "ObjectId" : "f8b030504a00d4c8635ecf19fb4be16525a51bfe",
      "LastModified" : "2018-07-05T13:37:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/fail-hello-with-compile-error/hello/CMakeLists.txt" : {
      "ObjectId" : "aa4c7e2e9431e82dde7abd53a9898cc1e3f252af",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/fail-outside-project-root/CMakeLists.txt" : {
      "ObjectId" : "6d5b91fc89ce6ff8d8b786d6ae36b49ae9de5cd1",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Install other_project\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "tests/samples/fail-outside-project-root/other_project/CMakeLists.txt" : {
      "ObjectId" : "7ba49bef4788acf141dbf703d2a830b6d7f8614e",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/fail-unless-skbuild-set/CMakeLists.txt" : {
      "ObjectId" : "c8894167d296d93414beb42ab83a328bf1f0631e",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/fail-with-fatal-error-cmakelists/CMakeLists.txt" : {
      "ObjectId" : "debe902dd71b23b73944c72f817bc74f37f0f04d",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/fail-with-syntax-error-cmakelists/CMakeLists.txt" : {
      "ObjectId" : "7e227bbfcbc07d8614dd88afef5089789ea105b4",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0,
      "Errorlog" : "line 7:15 token recognition error at: '\"This is incorrect  # Parenthesis omitted on purpose\\n\u0000'\n"
    },
    "tests/samples/hello-cpp/CMakeLists.txt" : {
      "ObjectId" : "837291a10080a74a88b4eda61320c13d832fac94",
      "LastModified" : "2018-07-05T13:37:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This code is here *ONLY* to test that the different signatures of\n\n# \"check_dynamic_lookup\" functions are not causing errors.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/samples/hello-cpp/hello/CMakeLists.txt" : {
      "ObjectId" : "a4d23c15d614081f80ec69940ebf3ddbe9b5c0d0",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/hello-cython/CMakeLists.txt" : {
      "ObjectId" : "1dd0c74cdb6878184f1a759d7c0dd36f48203b11",
      "LastModified" : "2018-07-05T13:37:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/hello-cython/hello/CMakeLists.txt" : {
      "ObjectId" : "853fb891adef723c97ac2cdf96d6e2ccb8cba433",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/hello-no-language/CMakeLists.txt" : {
      "ObjectId" : "31496008774687afdea2941634ffef74cbd6dafe",
      "LastModified" : "2018-02-21T22:18:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/issue-274-support-default-package-dir/CMakeLists.txt" : {
      "ObjectId" : "cabc21539a4082734dafab0ffe79839623c5116d",
      "LastModified" : "2018-07-05T13:37:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/issue-274-support-one-package-without-package-dir/CMakeLists.txt" : {
      "ObjectId" : "17bca234348fa14781a8074cf41b0f076a695bd7",
      "LastModified" : "2018-07-05T13:37:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/issue-284-build-ext-inplace/CMakeLists.txt" : {
      "ObjectId" : "e821e3e3ce03a062046b45faddbdd648fde77df3",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/issue-334-configure-cmakelist-non-cp1252-encoding/CMakeLists.txt" : {
      "ObjectId" : "de4b071b882d3735347ff070f60db286a4a8dc5f",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sanskrit for \"I can eat glass, it does not hurt me\"\n\n# See http://kermitproject.org/utf8.html\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/samples/issue-335-support-cmake-source-dir/CMakeLists.txt" : {
      "ObjectId" : "7e391c46172974b823b04451971b20b9b02a16f5",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Static libraries\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Executables\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/samples/issue-335-support-cmake-source-dir/wrapping/python/CMakeLists.txt" : {
      "ObjectId" : "d38061d4b4af5cbb88ec21735f30f353d9bf93ac",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/test-hide-listing/CMakeLists.txt" : {
      "ObjectId" : "4404a2b6d8b15e279d455299988c6fb2bbffa1a9",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/test-hide-listing/hello/CMakeLists.txt" : {
      "ObjectId" : "04fa9a37ba6d3411e196a348bf0411e105b15785",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/samples/test-include-exclude-data-with-base/CMakeLists.txt" : {
      "ObjectId" : "35fd0fab6dbbbdf9c53f52401d55c033a3b2faba",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# hello data\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# hello2 data\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/samples/test-include-exclude-data/CMakeLists.txt" : {
      "ObjectId" : "9da2010f6ef070dc2f034b409756caa3b2cd2369",
      "LastModified" : "2019-03-28T03:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# hello data\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# hello2 data\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 29,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1290
}