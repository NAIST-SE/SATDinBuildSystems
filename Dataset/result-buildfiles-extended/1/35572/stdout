{
  "Repository" : "35572",
  "Revision" : "HEAD",
  "ObjectId" : "50ea7fdb2919e7e628a29744a4a640470a55b53e",
  "CommitTime" : "2019-04-05T02:52:54Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6b023b2dc12bdeccfd948085d35af46323efebe7",
      "LastModified" : "2019-04-04T00:28:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# basic setup for cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# disable in source builds\n\n# this is only a temporary fix, but for now we need it as cmake will\n\n# otherwise overwrite the existing makefiles\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add a directory for cmake modules\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we use git rev-list and pipe that through wc here. Newer git versions support --count as option to rev-list but that might not always be available\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# PROJECT is QUDA\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n\n# QUDA OPTIONS\n\n# likely to be changed by users\n\n#######################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# build options\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Dynamic inversion saves memory but decreases the flops\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Multi-GPU options\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#BLAS library\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#ARPACK\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Interface options\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# QDPJIT\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Locations for QIO / QMP\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#######################################################################\n\n#QUDA ADVANCED OPTIONS\n\n# that ususally should not be changed by users\n\n#######################################################################\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set CTest options\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NVTX options\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# features in development\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#######################################################################\n\n# options that are not exposed at all because only one option exists\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#######################################################################\n\n# everything below here is processing the setup\n\n#######################################################################\n\n# we need to check for some packages\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#######################################################################\n\n## QUDA depends on Eigen\n\n## this part makes sure we can download eigen if it is not found\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# fall back to using find_package\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "## Now we hopefully found some way to get eigen to work\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Linux: CMAKE_HOST_SYSTEM_PROCESSOR \"x86_64\"\n\n# Mac: CMAKE_HOST_SYSTEM_PROCESSOR \"x86_64\"\n\n# Power: CMAKE_HOST_SYSTEM_PROCESSOR \"ppc64le\"\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## We need to use different optimization flags depending on whether we are on x86 or power\n\n## Note: This only applies to the RELASE build type\n\n## this is just a quick fix and we should probably use https://cmake.org/cmake/help/latest/module/CheckCXXCompilerFlag.html\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#define CXX FLAGS\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#define C FLAGS\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# do all the build definitions\n\n#\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# if we are using MPI and no MPI_<LANG>_COMPILER was specified on the command line check for MPICXX and MPICC environment variables\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#FIND_LIBRARY(QMP_LIB qmp ${QUDA_QMPHOME}/lib)\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# prefer static library\n",
        "Line" : 382,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# append additional libraries required by magma\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# and any additional OpenMP linker flags\n",
        "Line" : 388,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# This selects arpack or parpack for Multi GPU\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# MAX_MULTI_BLAS_N\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# set which precisions to enable\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# set which precisions to enable\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#  find_library(LibDL_Libraries nvToolsExt ${CUDA_TOOLKIT_ROOT_DIR}/lib/)\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#define FORTRAN FLAGS\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# derive whether we need to build the fortran interface\n",
        "Line" : 574,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# CUDA stuff\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# NVCC FLAGS independent off build type\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "## define CUDA flags when CMake >= 3.8\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# We need threads\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# COMPILER OPTIONS and BUILD types\n",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# QUDA_HASH for tunecache\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# this allows simplified running of clang-tidy \n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# build up git version\n\n# add -debug to GITVERSION if we build with debug options enabled\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# GPU ARCH\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# make the compiler flags an advanced option for all user defined build types (cmake defined build types are advanced by default )\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "### add tests and quda library\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "cmake/FindCUDALibs.cmake" : {
      "ObjectId" : "c7b5adf333aa6fa414ea4d9a1a46a46915d59859",
      "LastModified" : "2018-10-23T09:54:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDALibs\n\n# --------\n\n#\n\n# Finds libraries provided by the CUDA Toolkit\n\n#\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n#\n\n#\n\n# The modules defines the following variables::\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvrtc_LIBRARY    -- CUDA Run-time Compiler.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cuda_LIBRARY      \n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDALibs.cmake\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compute the version. from  CMAKE_CUDA_COMPILER_VERSION\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# nvrtc showed up in version 7.0\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "cmake/FindCUDAWrapper.cmake" : {
      "ObjectId" : "7d71e02a8ca81c9f30521855e102f4326ea7b0e3",
      "LastModified" : "2018-05-03T17:04:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDAWrapper\n\n# --------\n\n#\n\n# wrapper calls to help port cuda_add_executable / cuda_add_library over to\n\n# the new cmake cuda first class support\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCUDAWrapper.cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Very important the first step is to enable the CUDA language.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the CUDA_INCLUDE_DIRS and CUDA_TOOLKIT_INCLUDE like FindCUDA does\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 15,
        "CharPositionInLine" : 21
      },
      "5" : {
        "Text" : "# Setup CUDA_LIBRARIES\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# wrapper for cuda_add_library\n\n# Issues:\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# wrapper for cuda_add_library\n\n# Issues:\n\n#\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindEigen.cmake" : {
      "ObjectId" : "5d8ecdac63aa87c1b43e37f64d10702884e876b6",
      "LastModified" : "2016-07-20T19:56:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2015 Google Inc. All rights reserved.\n\n# http://ceres-solver.org/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindEigen.cmake - Find Eigen library, version >= 3.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# EIGEN_FOUND: TRUE iff Eigen is found.\n\n# EIGEN_INCLUDE_DIRS: Include directories for Eigen.\n\n#\n\n# EIGEN_VERSION: Extracted from Eigen/src/Core/util/Macros.h\n\n# EIGEN_WORLD_VERSION: Equal to 3 if EIGEN_VERSION = 3.2.0\n\n# EIGEN_MAJOR_VERSION: Equal to 2 if EIGEN_VERSION = 3.2.0\n\n# EIGEN_MINOR_VERSION: Equal to 0 if EIGEN_VERSION = 3.2.0\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# EIGEN_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                          search for eigen includes, e.g: /timbuktu/eigen3.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# EIGEN_INCLUDE_DIR: Include directory for CXSparse, not including the\n\n#                    include directory of any dependencies.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Called if we failed to find Eigen or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make results of search visible in the CMake GUI if Eigen has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n\n#\n\n# TODO: Add standard Windows search locations for Eigen.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Mac OS X\n",
        "Line" : 92,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 93,
        "CharPositionInLine" : 35
      },
      "9" : {
        "Text" : "# Additional suffixes to try appending to each search path.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Default root directory for Eigen.\n",
        "Line" : 98,
        "CharPositionInLine" : 9
      },
      "11" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 99,
        "CharPositionInLine" : 25
      },
      "12" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Mark internally as found, then verify. EIGEN_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Extract Eigen version from Eigen/src/Core/util/Macros.h\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This is on a single line s/t CMake does not interpret it as a list of\n\n# elements and insert ';' separators which would result in 3.;2.;0 nonsense.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments and version.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Only mark internal variables as advanced if we found Eigen, otherwise\n\n# leave it visible in the standard GUI for the user to set manually.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake/FindLibDL.cmake" : {
      "ObjectId" : "1689e4c7fbe33386615a79cae2cd572c87adfc78",
      "LastModified" : "2018-09-03T03:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libdl\n\n# Find the native LIBDL includes and library\n\n#\n\n#  LIBDL_INCLUDE_DIR - where to find dlfcn.h, etc.\n\n#  LIBDL_LIBRARIES   - List of libraries when using libdl.\n\n#  LIBDL_FOUND       - True if libdl found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBDL_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindNVML.cmake" : {
      "ObjectId" : "66959f55e87a23b46b5745c7d9e8a9c3344f7a42",
      "LastModified" : "2018-09-03T03:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindNVML\n\n# --------\n\n#\n\n# Find the NVIDIA Management Library (NVML) includes and library. NVML documentation\n\n# is available at: http://docs.nvidia.com/deploy/nvml-api/index.html\n\n#\n\n# NVML is part of the GPU Deployment Kit (GDK) and GPU_DEPLOYMENT_KIT_ROOT_DIR can\n\n# be specified if the GPU Deployment Kit is not installed in a default location.\n\n#\n\n# FindNVML defines the following variables:\n\n#\n\n#   NVML_INCLUDE_DIR, where to find nvml.h, etc.\n\n#   NVML_LIBRARY, the libraries needed to use NVML.\n\n#   NVML_FOUND, If false, do not try to use NVML.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   Jiri Kraus, NVIDIA Corp (nvidia.com - jkraus)\n\n#\n\n#   Copyright (c) 2008 - 2014 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   This code is licensed under the MIT License.  See the FindNVML.cmake script\n\n#   for the text of the license.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#TODO: Should GPU_DEPLOYMENT_KIT_ROOT_DIR override the default locations?\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 51:22 token recognition error at: '\"C:\\P'\nline 51:39 token recognition error at: '\\N'\nline 51:58 token recognition error at: '\\G'\nline 53:67 token recognition error at: '\\l'\nline 57:25 token recognition error at: '\\P'\nline 57:39 token recognition error at: '\\N'\nline 57:58 token recognition error at: '\\G'\nline 57:67 token recognition error at: '\\i'\nline 59:67 token recognition error at: '\\i'\nline 75:75 token recognition error at: '\")\\n  endif()\\nendif()\\n\\nfind_library(NVML_LIBRARY NAMES ${NVML_NAMES} PATHS ${CMAKE_CUDA_IMPLICIT_LINK_DIRECTORIES} ${NVML_LIB_PATHS} HINTS ${CUDA_TOOLKIT_ROOT_DIR}/lib ${CUDA_TOOLKIT_ROOT_DIR}/lib64 PATH_SUFFIXES stubs)\\n\\nfind_path(NVML_INCLUDE_DIR nvml.h PATHS ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES} ${NVML_INC_PATHS})\\n\\n# handle the QUIETLY and REQUIRED arguments and set NVML_FOUND to TRUE if\\n# all listed variables are TRUE\\n#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\\nFIND_PACKAGE_HANDLE_STANDARD_ARGS(NVML DEFAULT_MSG NVML_LIBRARY NVML_INCLUDE_DIR)\\n\\nmark_as_advanced(NVML_LIBRARY NVML_INCLUDE_DIR)\\n\u0000'\n"
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "58fb5536c7a83c556f0fc4bd54e6ecbb0ca48cec",
      "LastModified" : "2018-09-03T03:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add doxygen add doxygen documentation\n\n# note that cmake 3.9 introduced a nicer way to do this but we don't want to require cmake 3.9 by default yet\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "jenkins/bqcd.config.cmake" : {
      "ObjectId" : "72d13db67ea9602379f495772c1762795f32e25b",
      "LastModified" : "2018-09-03T03:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# preload file for jenkins test\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MILC - turns on staggered dirac and all HISQ and gauge features for MILC RHMC\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# advanced \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build with MILC interface\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "jenkins/milc.config.cmake" : {
      "ObjectId" : "a2809790329db599960c7dbee6e7c0858383a0d6",
      "LastModified" : "2018-09-03T03:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# preload file for jenkins test\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MILC - turns on staggered dirac and all HISQ and gauge features for MILC RHMC\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "jenkins/twistedmass.config.cmake" : {
      "ObjectId" : "72d13db67ea9602379f495772c1762795f32e25b",
      "LastModified" : "2018-09-03T03:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# preload file for jenkins test\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MILC - turns on staggered dirac and all HISQ and gauge features for MILC RHMC\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# advanced \n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build with MILC interface\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "fc9fc31b16b549168b4f0a73b24e86dc31eba0e3",
      "LastModified" : "2019-03-01T08:33:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all files for quda -- needs some cleanup\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## split source into cu and cpp files\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# QUDA_CU_OBJS shoudl contain all cuda files now\n\n# QUDA_OBJS all c, cpp, fortran sources\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if we have a git version make version.cpp depend on git head so that it is rebuild if the git sha changed\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# generate a cmake object library for all cpp files first\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add some deifnitions that cause issues with cmake 3.7 and nvcc only to cpp files\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# make one library\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# include_directories\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# propagate CXX flags to CUDA host compiler\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# some clang warnings shouds be warning even when turning warnings into errors\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# this is a hack to get colored diagnostics back when using Ninja and clang\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# malloc.cpp uses both the driver and runtime api\n\n# So we need to find the CUDA_CUDA_LIBRARY (driver api) or the stub version\n\n# for cmake 3.8 and later this has been integrated into  FindCUDALibs.cmake \n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if we did not find Eigen but downloaded it we need to add it as dependency so the download is done first\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# until we define an install step copy the include directory to the build directory\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# some hackery to prevent having old shared / static builds of quda messing with the current build\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "985e3e97c57c1c4aa910da8b48e26665f4250088",
      "LastModified" : "2019-04-04T00:28:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## enable tests\n\n#build a common library for all test utilities\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#define tests\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if we build with QDP JIT the tests cannot run anyway\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  use FindMPI variables for QUDA_CTEST_LAUNCH\n\n# set MPIEXEC_MAX_NUMPROCS to the number of ranks you want to launch\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## BLAS test\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# loop over Dslash policies\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# symmetric preconditioning\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# asymmetric preconditioning\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# asymmetric preconditioning\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# symmetric preconditioning\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# asymmetric preconditioning\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# symmetric preconditioning\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# asymmetric preconditioning\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# symmetric 4-d preconditioning\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# asymmetric 4-d preconditioning\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "CMAKE" : 12
  },
  "ElapsedTime" : 5091
}