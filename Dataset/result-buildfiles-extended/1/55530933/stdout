{
  "Repository" : "55530933",
  "Revision" : "HEAD",
  "ObjectId" : "fb9813ac3c8e5a21ab73ac622c2cd6aee86dac48",
  "CommitTime" : "2019-04-18T11:58:04Z",
  "Files" : {
    "CMake/Modules/CHIBIOS_STM32F0xx_GCC_options.cmake" : {
      "ObjectId" : "49c172471d3b3244e13faa93e923514543fa2fd6",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################\n\n# WHEN ADDING A NEW SERIES add the appropriate GCC options bellow\n\n#################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# need to specify this for assembler\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# need to specify linker flags here\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include any extra options comming from any extra args?\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# this series doesn't have FPU \n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# request specs from newlib nano\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# set extra linker flags\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# set optimization linker flags for RELEASE and MinSizeRel\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# set optimization flags\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# set link map\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "CMake/Modules/CHIBIOS_STM32F0xx_sources.cmake" : {
      "ObjectId" : "733f9677774da0b82bd6621d87aa27d76ca766c4",
      "LastModified" : "2019-03-27T13:38:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# from startup_stm32f0xx.mk\n\n# List of the ChibiOS generic STM32F0xx startup and CMSIS files.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n\n# WHEN ADDING A NEW BOARD add the source code file for the STM32F0xx\\platform.mk\n\n################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# startup code\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# RT\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# message(\"${SRC_FILE} >> ${CHIBIOS_F0_SRC_FILE}\") # debug helper\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "####################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the include directory(ies) bellow \n\n####################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################################################################\n\n# Add above the required include directory(ies) for a new nanoFramework overlay component that you are adding\n\n# following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/ports/<path-here>)\n\n###############################################################################################################################\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "####################################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the source file(s) specific to this series bellow \n\n####################################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##########################################################################################################################\n\n# Add above ALL the source code file(s) low level driver specif for a series required for a new nanoFramework \n\n# overlay component that you are adding following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_SOURCES ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/src/<path-here>)\n\n##########################################################################################################################\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "CMake/Modules/CHIBIOS_STM32F4xx_GCC_options.cmake" : {
      "ObjectId" : "72f60b3afa0484cd05867831bc5bfb24d4a1bdeb",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################\n\n# WHEN ADDING A NEW SERIES add the appropriate GCC options bellow\n\n#################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# need to specify this for assembler\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# need to specify linker flags here\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include any extra options comming from any extra args?\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# this series has FPU \n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# request specs from newlib nano\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# set extra linker flags\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# set optimization linker flags for RELEASE and MinSizeRel\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# set optimization flags\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# set link map\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "CMake/Modules/CHIBIOS_STM32F4xx_sources.cmake" : {
      "ObjectId" : "4138979a9c0e657cd6a22889d3423402e039cd04",
      "LastModified" : "2019-03-27T13:38:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# from startup_stm32f4xx.mk\n\n# List of the ChibiOS generic STM32F4xx startup and CMSIS files.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# WHEN ADDING A NEW BOARD add the source code file for the hal/ports/STM32/STM32F4xx/platform.mk\n\n################################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# startup code\n",
        "Line" : 14,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# RT\n",
        "Line" : 51,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : "# message(\"${SRC_FILE} >> ${CHIBIOS_F4_SRC_FILE}\") # debug helper\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "####################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the include directory(ies) bellow \n\n####################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# component STM32_ONEWIRE (One Wire driver)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################################################################\n\n# Add above the required include directory(ies) for a new nanoFramework overlay component that you are adding\n\n# following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/ports/<path-here>)\n\n###############################################################################################################################\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "####################################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the source file(s) specific to this series bellow \n\n####################################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##########################################################################################################################\n\n# Add above ALL the source code file(s) low level driver specif for a series required for a new nanoFramework \n\n# overlay component that you are adding following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_SOURCES ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/src/<path-here>)\n\n##########################################################################################################################\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "CMake/Modules/CHIBIOS_STM32F7xx_GCC_options.cmake" : {
      "ObjectId" : "d2200f71bf94d11ddb4c5f007d0fe2b75c6b8316",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################\n\n# WHEN ADDING A NEW SERIES add the appropriate GCC options bellow\n\n#################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# need to specify this for assembler\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# need to specify linker flags here\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include any extra options comming from any extra args?\n\n# STMF7 cores have SP and DP, the default is SP. DP can be set if developer realy needs that.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# this series has FPU \n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# request specs from newlib nano\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# set extra linker flags\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# set optimization linker flags for RELEASE and MinSizeRel\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# set optimization flags\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# set link map\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "CMake/Modules/CHIBIOS_STM32F7xx_sources.cmake" : {
      "ObjectId" : "9bf9345c33db6f3d2b6ba172a694418b99d0290d",
      "LastModified" : "2019-03-27T13:38:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# from startup_stm32f7xx.mk\n\n# List of the ChibiOS generic STM32F7xx startup and CMSIS files.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# WHEN ADDING A NEW BOARD add the source code file for the hal/ports/STM32/STM32F7xx/platform.mk\n\n################################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# startup code\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# RT\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# message(\"${SRC_FILE} >> ${CHIBIOS_F7_SRC_FILE}\") # debug helper\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "####################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the include directory(ies) bellow \n\n####################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################################################################\n\n# Add above the required include directory(ies) for a new nanoFramework overlay component that you are adding\n\n# following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/ports/<path-here>)\n\n###############################################################################################################################\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "####################################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the source file(s) specific to this series bellow \n\n####################################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##########################################################################################################################\n\n# Add above ALL the source code file(s) low level driver specif for a series required for a new nanoFramework \n\n# overlay component that you are adding following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_SOURCES ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/src/<path-here>)\n\n##########################################################################################################################\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "CMake/Modules/CHIBIOS_STM32H7xx_GCC_options.cmake" : {
      "ObjectId" : "d2200f71bf94d11ddb4c5f007d0fe2b75c6b8316",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################\n\n# WHEN ADDING A NEW SERIES add the appropriate GCC options bellow\n\n#################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# need to specify this for assembler\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# need to specify linker flags here\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include any extra options comming from any extra args?\n\n# STMF7 cores have SP and DP, the default is SP. DP can be set if developer realy needs that.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# this series has FPU \n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# request specs from newlib nano\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# set extra linker flags\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# set optimization linker flags for RELEASE and MinSizeRel\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# set optimization flags\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# set link map\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "CMake/Modules/CHIBIOS_STM32H7xx_sources.cmake" : {
      "ObjectId" : "d130e15a9ca2800e352c463c5c25d3caf6df52ba",
      "LastModified" : "2019-03-27T13:38:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# from os/common/startup/ARMCMx/compilers/GCC/mk/startup_stm32h7xx.mk\n\n# List of the ChibiOS generic STM32H7xx startup and CMSIS files.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# WHEN ADDING A NEW BOARD add the source code file for the hal/ports/STM32/STM32H7xx/platform.mk\n\n################################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# startup code\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# RT\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# ${PROJECT_BINARY_DIR}/ChibiOS_Source/os/hal/ports/STM32/LLD/USBv1\n",
        "Line" : 85,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# message(\"${SRC_FILE} >> ${CHIBIOS_H7_SRC_FILE}\") # debug helper\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# list(APPEND CHIBIOS_INCLUDE_DIRS ${PROJECT_BINARY_DIR}/ChibiOS_Source/os/hal/ports/STM32/LLD/USBv1)\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "####################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the include directory(ies) bellow \n\n####################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###############################################################################################################################\n\n# Add above the required include directory(ies) for a new nanoFramework overlay component that you are adding\n\n# following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/ports/<path-here>)\n\n###############################################################################################################################\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "####################################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the source file(s) specific to this series bellow \n\n####################################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########################################################################################################################\n\n# Add above ALL the source code file(s) low level driver specif for a series required for a new nanoFramework \n\n# overlay component that you are adding following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_SOURCES ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/src/<path-here>)\n\n##########################################################################################################################\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "CMake/Modules/CHIBIOS_STM32L0xx_GCC_options.cmake" : {
      "ObjectId" : "eb7bdd0acefa7b15309ba593ae63dbd2096d1d66",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2018 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################\n\n# WHEN ADDING A NEW SERIES add the appropriate GCC options bellow\n\n#################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# need to specify this for assembler\n\n#####################################################################\n\n# because nanoCLR is loaded the VTOR has to be init in ChibiOS CRT0\n\n# this define has to be placed here because it's on an assembly file\n\n#####################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# need to specify linker flags here\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# include any extra options comming from any extra args?\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# this series doesn't have FPU \n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# request specs from newlib nano\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# set extra linker flags\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# set optimization linker flags for RELEASE and MinSizeRel\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# set optimization flags\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# set link map\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "CMake/Modules/CHIBIOS_STM32L0xx_sources.cmake" : {
      "ObjectId" : "20378644ecf4e4643709902de65d1c31c499664f",
      "LastModified" : "2019-03-27T13:38:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2018 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# from startup_stm32l0xx.mk\n\n# List of the ChibiOS generic STM32L0xx startup and CMSIS files.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n\n# WHEN ADDING A NEW BOARD add the source code file for the STM32L0xx\\platform.mk\n\n################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# startup code\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# RT\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# message(\"${SRC_FILE} >> ${CHIBIOS_L0_SRC_FILE}\") # debug helper\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "####################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the include directory(ies) bellow \n\n####################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################################################################\n\n# Add above the required include directory(ies) for a new nanoFramework overlay component that you are adding\n\n# following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/ports/<path-here>)\n\n###############################################################################################################################\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "####################################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the source file(s) specific to this series bellow \n\n####################################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# component STM32_ONEWIRE\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##########################################################################################################################\n\n# Add above ALL the source code file(s) low level driver specif for a series required for a new nanoFramework \n\n# overlay component that you are adding following the template bellow. \n\n#\n\n# list(APPEND CHIBIOS_SOURCES ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/src/<path-here>)\n\n##########################################################################################################################\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "CMake/Modules/FindBuildUtils.cmake" : {
      "ObjectId" : "c26b37c0b33d2e56486619fef51ac10805381581",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    if(${VISUAL_STUDIO})\n\n#        # CMAKE command add_custom_Command 'POST_BUILD' currently fails,  \"CMD.EXE\" not recognised\n\n#        # Use the CopyBuildOutput.cmd in the VisualStudioDevelopment folder to manually perform the same function\n\n#        return()\n\n#    endif()\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# need to remove the .elf suffix from target name\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# copy target image to other formats\n",
        "Line" : 43,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# copy target file to build folder (this is only usefull for debugging in VS Code because of path in launch.json)\n\n#COMMAND ${CMAKE_OBJCOPY} $<TARGET_FILE:${TARGET_SHORT}.elf> ${PROJECT_SOURCE_DIR}/build/${TARGET_SHORT}.elf\n",
        "Line" : 48,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# copy target image to other formats\n",
        "Line" : 56,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# copy target file to build folder (this is only usefull for debugging in VS Code because of path in launch.json)\n\n#COMMAND ${CMAKE_OBJCOPY} $<TARGET_FILE:${TARGET_SHORT}.elf> ${PROJECT_SOURCE_DIR}/build/${TARGET_SHORT}.elf\n",
        "Line" : 61,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# dump target image as source code listing \n\n# ONLY when DEBUG info is available, this is on 'Debug' and 'RelWithDebInfo'\n",
        "Line" : 64,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "# add this to print the size of the output targets\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#######################################################################################################################################\n\n# this function sets the linker options AND a specific linker file (full path and name, including extension)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/Modules/FindCHIBIOS.cmake" : {
      "ObjectId" : "a68dfb9a720ab3962e6074c190af0597f75719af",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################################################\n\n# WHEN ADDING A NEW series add the respective name to the list bellow along with the CMake files with GCC options and source files\n\n###################################################################################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check if the series name is supported \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# including here the CMake files for the source files specific to the target series\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# and here the GCC options tuned for the target series \n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# message(\"ChibiOS board series is ${TARGET_SERIES}\") # debug helper\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set include directories for ChibiOS\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# append dummy include directory when not using ChibiOS-Contrib\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# append include directory for boards in the nanoFramework ChibiOS 'overlay'\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append include directory for boards in the nanoFramework ChibiOS 'overlay' provideded by the community\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# source files and GCC options according to target vendor and series\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# source files for ChibiOS\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# HAL-OSAL files\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#hal_ext.c #notfound\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#hal_qspi.c #notfound\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#new\n",
        "Line" : 84,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "#new\n",
        "Line" : 86,
        "CharPositionInLine" : 15
      },
      "17" : {
        "Text" : "#new\n",
        "Line" : 90,
        "CharPositionInLine" : 15
      },
      "18" : {
        "Text" : "# OSAL RT\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# RT\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# required to use malloc and other newlib stuff\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# CMSIS\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# board file(s)\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# the following hint order is for the board.c file, it has to match the search order of the main CMake otherwise we'll pick one that is the pair\n\n# this path hint is for OEM boards for which the board file(s) are probably located directly in the \"target\" folder along with remaining files\n",
        "Line" : 141,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# this path hint is for the alternative boards folder in the nanoFramework ChibiOS 'overlay'\n",
        "Line" : 145,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# this path hint is for the usual location of the board.c file\n",
        "Line" : 148,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# this path hint is for the alternative boards folder in the nanoFramework ChibiOS 'overlay' provideded by the community\n",
        "Line" : 151,
        "CharPositionInLine" : 12
      },
      "27" : {
        "Text" : "# this path hint is for Community provided boards that are located directly in the \"targets-community\" folder\n",
        "Line" : 154,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "#message(\"${SRC_FILE} >> ${CHIBIOS_SRC_FILE}\") # debug helper\n",
        "Line" : 159,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 29
    },
    "CMake/Modules/FindCHIBIOS_FATFS.cmake" : {
      "ObjectId" : "1b2ae5e44271ad605ea4babca78ec01bcb963ac5",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of the required FatFs include files.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# bindings\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# fatfs\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${FATFS_SRC_FILE}\") # debug helper\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# fatfs_diskio is hacked because of USB Host, so we need to use the source from the appropriate location\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# get it from ChibiOS contribution\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# get it from standard ChibiOS\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# setup target to unzip ChibiOS external filesystem components\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# this depends on ChibiOS target being already downloaded\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/Modules/FindCHIBIOS_LWIP.cmake" : {
      "ObjectId" : "df168ba9639edc606ff1ed07cd541c6c632a880b",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# extract LwIP source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# List of the required lwIp include files.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# sys_arch.c\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# core\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# ipv4\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ip6\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# api\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# api_msg.c\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# sockets.c\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# api patched files for nanoframework\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# bindings\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# platform implementations\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#extras\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# netif\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# 6LoWPAN\n\n# lowpan6.c\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# PPP\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# PPP SSL\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# APPS!\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# SNMPv2c agent\n\n# snmp_asn1.c\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# snmp_core.c\n\n# snmp_mib2.c\n\n# snmp_mib2_icmp.c\n\n# snmp_mib2_interfaces.c\n\n# snmp_mib2_ip.c\n\n# snmp_mib2_snmp.c\n\n# snmp_mib2_system.c\n\n# snmp_mib2_tcp.c\n\n# snmp_mib2_udp.c\n\n# snmp_msg.c\n\n# snmpv3.c\n\n# snmp_netconn.c\n\n# snmp_pbuf_stream.c\n\n# snmp_raw.c\n\n# snmp_scalar.c\n\n# snmp_table.c\n\n# snmp_threadsync.c\n\n# snmp_traps.c\n\n# snmpv3_mbedtls.c\n\n# snmpv3_dummy.c\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# http server\n\n# fs.c\n\n# httpd.c\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# iperf server\n\n# lwiperf.c\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# SNTP client\n\n# this one is added bellow if NF_NETWORKING_SNTP option is ON\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# sntp.c\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# MDNS responder\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# NetBIOS server\n\n# netbiosns.c\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# TFTP server\n\n# tftp_server.c\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# MQTT client\n\n# mqtt.c\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# APPS:\n",
        "Line" : 200,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "# message(\"${SRC_FILE} >> ${LWIP_SRC_FILE}\") # debug helper\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# setup target to unzip ChibiOS external network components\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# this depends on ChibiOS target being already downloaded\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "CMake/Modules/FindChibiOS-Contrib.cmake" : {
      "ObjectId" : "57f28ba8ef3a5186568986af448e0472370bc355",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories for ChibiOS-Contrib\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the path is one folder UP from the includes directory to allow a selective inclusion of our own hal_community.h\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "####################################################################################\n\n# WHEN ADDING A NEW ChibiOS-Contrib component add the include directory(ies) bellow\n\n####################################################################################\n\n# component IMACOMPONENT\n\n#list(APPEND CHIBIOS_CONTRIB_INCLUDE_DIRS ${PROJECT_BINARY_DIR}/ChibiOS-Contrib_Source/os/hal/include/IMACOMPONENT)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# USB Host v1\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "####################################################################################################################################\n\n# Because we've \"hacked\" ChibiOS overlay mechanism used by the community contributions we can't add the \"official\" hal_community.c #\n\n# Instead we have to add the required and equivalent calls that exist in the official source file                                  #\n\n# in our hal_community.c @ targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/src/hal_community.c                                          #\n\n# the include paths are to be added to our hal_community.h @ targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/include/hal_community.h    #\n\n####################################################################################################################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "####################################################################################################\n\n# WHEN ADDING A NEW ChibiOS-Contrib component add the source file(s) specific to it bellow \n\n####################################################################################################\n\n# component IMACOMPONENT\n\n# list(APPEND CHIBIOS_CONTRIB_SOURCES ${PROJECT_BINARY_DIR}/ChibiOS-Contrib_Source/os/hal/src/IMACOMPONENT/source-file-1.c)\n\n# list(APPEND CHIBIOS_CONTRIB_SOURCES ${PROJECT_BINARY_DIR}/ChibiOS-Contrib_Source/os/hal/src/IMACOMPONENT/source-file-2.c)\n\n# list(APPEND CHIBIOS_CONTRIB_SOURCES ${PROJECT_BINARY_DIR}/ChibiOS-Contrib_Source/os/hal/src/IMACOMPONENT/source-file-3.c)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# USB Host v1\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMake/Modules/FindChibiOSnfOverlay.cmake" : {
      "ObjectId" : "09a5735978d05a6145302a7ecfdbd88e923b9558",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set include directories for ChibiOS nanoFramework Overlay\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "####################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the include directory(ies) bellow \n\n####################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# component STM32_ONEWIRE (One Wire driver)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##################################################################################################################################\n\n# Add above the required include directory(ies) for a new nanoFramework overlay component that you are adding\n\n# following the template bellow. \n\n#\n\n# If the component includes a low level driver specif for a series make sure you add the include dirs \n\n# in the CHIBIOS_NNNNNN_sources.cmake\n\n#\n\n# list(APPEND ChibiOSnfOverlay_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/include/<path-here>)\n\n##################################################################################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##################################################\n\n# source files for ChibiOS nanoFramework Overlay\n\n##################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "####################################################################################################\n\n# WHEN ADDING A NEW CHIBIOS OVERLAY component add the source file(s) specific to this series bellow \n\n####################################################################################################\n\n# component STM32_FLASH\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# component STM32_CRC\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# component STM32_RNG\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# component STM32_FSMC (Flexible Memory Controller)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# component STM32_ONEWIRE (One Wire driver)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#########################################################################################################################\n\n# Add above ALL the source code file(s) required for a new nanoFramework overlay component that you are adding\n\n# following the template bellow.\n\n#\n\n# If the component includes a low level driver specif for a series make sure you add the source files \n\n# in the CHIBIOS_NNNNNN_sources.cmake\n\n#\n\n# list(APPEND ChibiOSnfOverlay_SOURCES ${PROJECT_SOURCE_DIR}/targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/src/<path-here>)\n\n#########################################################################################################################\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "CMake/Modules/FindMBEDOS.cmake" : {
      "ObjectId" : "974999db7fa87714b1ee142c5b869a9604ed2fd6",
      "LastModified" : "2017-01-26T21:59:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# read mBed targets file\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try to find target\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(STATUS \"${MBED_TARGET} @ ${FOUND_TARGET}\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# target found\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# get substring with data\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# because there is not an elegant way of finding the end of the json section of this target we are setting this to 1000 chars\n\n# the downside is that for most target this overuns to the next target\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# parse target data\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try to extract relevant data \n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# sanity check when json parse has overun to the next target\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# seems to belong to target, extract data\n\n#message(\"${var} : ${${var}}\") # debug helper\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# core \n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# extra labels 0 is: target vendor\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# extra labels 1 is: target series/variant\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# extra labels 2 is used for compiler defs\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# 'macros' lists target aditional macros\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# 'device has' lists target features\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# 'supported form factors' lists supported form factors for board\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"mBed target features: ${MBED_TARGET_FEATURES}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# get target core short name\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set compiler options (general)\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# extra compiler def from extra label 2\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set compiler options (target specific features)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# set compiler options (form factors)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# set compiler options (macros)\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#message(\">>MBEDOS_COMPILE_OPTIONS: ${MBEDOS_COMPILE_OPTIONS}<<\") # debug helper\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# set include directories for mBed RTOS\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# source files and GCC options according to target vendor and series\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# source files for RTOS\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# drivers\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# events\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# features\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# mbed tls\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# net socket\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# mBed HAL\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# mBed platfom\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# RTOS\n",
        "Line" : 327,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# message(\"${SRC_FILE} >> ${MBEDOS_SRC_FILE}\") # debug helper\n",
        "Line" : 377,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 37
    },
    "CMake/Modules/FindNF_CoreCLR.cmake" : {
      "ObjectId" : "9d37719588edecc3808e784a290492a1c700a007",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories for nanoFramework Core, CoreLib and CLR startup\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include directories for Core\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include directories for CoreLib\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CLR startup\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# others\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# source files for nanoFramework Core, CoreLib and CLR startup\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Core\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# CoreLib\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# CLR startup\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Messaging\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Runtime.Native\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Core stubs\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CLR stubs\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Helpers\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# HAL\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# PAL\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# PAL stubs\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# target specifics\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# include configuration manager file\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# feature enabled, full support\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# feature disabled, stubs only\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Core\n",
        "Line" : 194,
        "CharPositionInLine" : 12
      },
      "23" : {
        "Text" : "# CoreLib\n",
        "Line" : 197,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# CLR startup\n",
        "Line" : 200,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# Runtime.Native\n",
        "Line" : 203,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# Core stubs\n",
        "Line" : 206,
        "CharPositionInLine" : 12
      },
      "27" : {
        "Text" : "# CLR stubs\n",
        "Line" : 213,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "# Helpers\n",
        "Line" : 218,
        "CharPositionInLine" : 12
      },
      "29" : {
        "Text" : "# HAL\n",
        "Line" : 222,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "# PAL\n",
        "Line" : 225,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# PAL stubs\n",
        "Line" : 230,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "# target\n",
        "Line" : 235,
        "CharPositionInLine" : 12
      },
      "33" : {
        "Text" : "# message(\"${SRC_FILE} >> ${NF_CoreCLR_SRC_FILE}\") # debug helper\n",
        "Line" : 240,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 34
    },
    "CMake/Modules/FindNF_Debugger.cmake" : {
      "ObjectId" : "84655de414a618ae9d5f4b853560564f4d631f81",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories for nanoFramework Debugger\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# source files for nanoFramework Debugger\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add the debugger source file according to the build flavor\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${NF_Debugger_SRC_FILE}\") # debug helper\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindNF_Diagnostics.cmake" : {
      "ObjectId" : "a5b68c76c60aee52c2b9dc86c84f382f853dbaf7",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# source files \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"${SRC_FILE} >> ${NF_Diagnostics_SRC_FILE}\") # debug helper\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "CMake/Modules/FindNF_Networking.cmake" : {
      "ObjectId" : "865a14127af965800a775709e761ba73da780aa5",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories for nanoFramework network\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# source files for nanoFramework Networking\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#pal Socket\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Lwip \n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# source files for security layer\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ssl_types.cpp\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# add source files in two steps\n\n# 1st pass: common source files\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ${PROJECT_SOURCE_DIR}/src/PAL/COM/sockets/ssl/mbedTLS\n",
        "Line" : 68,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# message(\"${SRC_FILE} >> ${NF_Networking_SRC_FILE}\") # debug helper\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# 2nd pass: security files if option is selected \n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# message(\"${SRC_FILE} >> ${NF_Networking_SRC_FILE}\") # debug helper\n",
        "Line" : 101,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "CMake/Modules/FindRTXRTOS.cmake" : {
      "ObjectId" : "f1811485d0c29dae5e061c61d114b3a88685b6bc",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build path hints according to device series\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories for RXT RTOS\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find path for HAL_CMx file\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find path for SVC_Table file\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMake/Modules/FindRTXRTOS2.cmake" : {
      "ObjectId" : "9a95ef4c7c59df49ea1250a210f1ff651ae9fb15",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build path hints according to device series\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories for RXT RTOS\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find path for HAL_CMx file\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# # find path for SVC_Table file\n\n# set(RTXRTOS2_SRC_FILE SRC_FILE-NOTFOUND)\n\n# find_file(RTXRTOS2_SRC_FILE SVC_Table.S\n\n#     PATHS PATHS ${PROJECT_BINARY_DIR}/RTXRTOS_Source/CMSIS/RTOS/RTX/SRC/GCC\n\n#     CMAKE_FIND_ROOT_PATH_BOTH\n\n# )\n\n# list(APPEND RTXRTOS2_SOURCES ${RTXRTOS2_SRC_FILE})\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMake/Modules/FindSTM32FREERTOS.cmake" : {
      "ObjectId" : "56461232f1ea47217607ff7c1eda52da2f792767",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find path of STM32 CMSIS FreeRTOS port for include files\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set path search for FreeRTOS distribution\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build path hints according to device series\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#PATH_SUFFIXES CMSIS_RTOS\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# choose here the appropriate memory management for FreeRTOS (see http://www.freertos.org/a00111.html)\n\n# heap_1.c\n\n# heap_2.c\n\n# heap_3.c\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#heap_5.c\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "CMake/Modules/FindSystem.Math.cmake" : {
      "ObjectId" : "e211bf2bc61b1be521e3971f40c45c72678fdec0",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2018 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${System.Math_SRC_FILE}\") # debug helper\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindSystem.Net.cmake" : {
      "ObjectId" : "b8bf39f2e212613f3da9b59d72f81d50b8e4f0dc",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# source files\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# System.Net\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# System.Net.NetworkInformation\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# System.Security.Cryptography.X509Certificates \n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# System.Net.Security\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# message(\"${SRC_FILE} >> ${System.Net_SRC_FILE}\") # debug helper\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "CMake/Modules/FindWindows.Devices.Adc.cmake" : {
      "ObjectId" : "ccfcaf0b451fd8e6b72c9e4f48f4e63d1309c4e7",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Devices.Adc_SRC_FILE}\") # debug helper\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindWindows.Devices.Gpio.cmake" : {
      "ObjectId" : "b0381299fc78f8e3a49edbbfe8688b386dff1c52",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# class library source files\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# core source files\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# class library source files\n",
        "Line" : 39,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# core source files\n",
        "Line" : 42,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Devices.Gpio_SRC_FILE}\") # debug helper\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "CMake/Modules/FindWindows.Devices.I2c.cmake" : {
      "ObjectId" : "91db8f15a52d6e6d2f429efe4563024c8e86d5c9",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Devices.I2c_SRC_FILE}\") # debug helper\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindWindows.Devices.Pwm.cmake" : {
      "ObjectId" : "26537deea8861462b9a11870759f2d45cec391ff",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Devices.Pwm_SRC_FILE}\") # debug helper\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindWindows.Devices.SerialCommunication.cmake" : {
      "ObjectId" : "dc5bdab3326740771e9dbba5a6ff92444fcbe19e",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Devices.SerialCommunication_SRC_FILE}\") # debug helper\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindWindows.Devices.Spi.cmake" : {
      "ObjectId" : "75b242d82323dace0e7177897edd629e7d33f650",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Devices.Spi_SRC_FILE}\") # debug helper\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindWindows.Devices.WiFi.cmake" : {
      "ObjectId" : "ab0d534144c64119353a7f76c97263d6edeb43c9",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#message(\"${SRC_FILE} >> ${Windows.Devices.Wifi_SRC_FILE}\") # debug helper\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindWindows.Networking.Sockets.cmake" : {
      "ObjectId" : "79c2a267e211449583d022280ce6daec36d00721",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n\n#set(BASE_PATH_FOR_THIS_MODULE \"${BASE_PATH_FOR_CLASS_LIBRARIES_MODULES}/Windows.Networking.Sockets\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    win_net_sockets_native.cpp\n\n#    win_net_sockets_native_Windows_Networking_Sockets_SocketNative.cpp\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Networking.Sockets_SRC_FILE}\") # debug helper\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "CMake/Modules/FindWindows.Storage.cmake" : {
      "ObjectId" : "6fa07d89903d85560522ce4117b4b0fe5be10b99",
      "LastModified" : "2019-04-18T08:07:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Windows.Storage_SRC_FILE}\") # debug helper\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindWireProtocol.cmake" : {
      "ObjectId" : "4ab68c8cf7784f7dc41e1f7429deb8cf8598b9c7",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle Wire Protocol _TRACE_ preferences, if any\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this one has to follow the declaration on src\\CLR\\Include\\WireProtocol_Message.h\n\n# #define TRACE_ERRORS 1\n\n# #define TRACE_HEADERS 2\n\n# #define TRACE_STATE 4\n\n# #define TRACE_NODATA 8\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# default to 0 (no Wire Protocol trace)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# debug helper\n",
        "Line" : 39,
        "CharPositionInLine" : 65
      },
      "5" : {
        "Text" : "# set include directories for Wire Protocol\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# source files for Wire Protocol\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# message(\"${SRC_FILE} >> ${WireProtocol_SRC_FILE}\") # debug helper\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "CMake/Modules/FindmbedTLS.cmake" : {
      "ObjectId" : "039d37f948c1bf765fbd96a1000bc3792e55fa3b",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2018 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# because of issues when passing the config file as a string when using ExternalProject_Add with mbedTLS\n\n# we are replicating their CMakeList where. Actually this is more a simplified version...\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# List of the required include paths\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_subdirectory(library)\n\n# add_subdirectory(include)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${MBEDTLS_SRC_FILE}\") # debug helper\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# unset this warning as error required for this source file\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# message(\"${SRC_FILE} >> ${MBEDTLS_SRC_FILE}\") # debug helper\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# message(\"${SRC_FILE} >> ${MBEDTLS_SRC_FILE}\") # debug helper\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "CMake/Modules/FindnanoFramework.Devices.Can.cmake" : {
      "ObjectId" : "a52445cb53201aec66c891f5020aad8e6bd126ee",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2018 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${nanoFramework.Devices.Can_SRC_FILE}\") # debug helper\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindnanoFramework.Devices.OneWire.cmake" : {
      "ObjectId" : "e06aa1d4ecc49672697c0ca7d7ceca70cc5b3e0e",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2018 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${nanoFramework.Devices.OneWire_SRC_FILE}\") # debug helper\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindnanoFramework.Hardware.Esp32.cmake" : {
      "ObjectId" : "5c826af4444d20adaf63f67502c36c726279f8d7",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${Hardware.Esp32_SRC_FILE}\") # debug helper\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindnanoFramework.Hardware.Stm32.cmake" : {
      "ObjectId" : "04db2898fe414d92822e10480e6b23c64f518be9",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n\n# list(APPEND nanoFramework.Hardware.Stm32_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/src/CLR/Core\")\n\n# list(APPEND nanoFramework.Hardware.Stm32_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/src/CLR/Include\")\n\n# list(APPEND nanoFramework.Hardware.Stm32_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/src/HAL/Include\")\n\n# list(APPEND nanoFramework.Hardware.Stm32_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/src/PAL/Include\")\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"${SRC_FILE} >> ${nanoFramework.Hardware.Stm32_SRC_FILE}\") # debug helper\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "CMake/Modules/FindnanoFramework.Networking.Sntp.cmake" : {
      "ObjectId" : "75604406c713a7bdc7093f8b173db1a09f72f992",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set include directories\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# source files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files of the assembly\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# path for source files of this module\n",
        "Line" : 26,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# message(\"${SRC_FILE} >> ${nanoFramework.Networking.Sntp_SRC_FILE}\") # debug helper\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "CMake/Modules/FindnanoFramework.Runtime.Events.cmake" : {
      "ObjectId" : "6dfabc5a1f04a664b7e40e2925c31fd55c4fb7b3",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# native code directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set include directories\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# source files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# source files of the assembly\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# source files\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# path for source files of this module\n",
        "Line" : 39,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# path for AsyncProcCall and related code\n",
        "Line" : 42,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# message(\"${SRC_FILE} >> ${nanoFramework.Runtime.Events_SRC_FILE}\") # debug helper\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "CMake/Modules/Hack_SetGitSearchPath.cmake" : {
      "ObjectId" : "e47ba709abfdd964fd685aeb7e56cf7a42e37833",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this hack is required to make the search for Git path to work in Windows platforms\n\n# it can safelly be removed after:\n\n# https://gitlab.kitware.com/cmake/cmake/merge_requests/332 is MERGED\n\n# and makes it to a release version of CMake, then we need to have that version as minimum required\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GitHub search path for Windows\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# SourceTree search path for Windows\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "CMake/Modules/JSONParser.cmake" : {
      "ObjectId" : "b9230e4e4674673f2692cc679fe43c417dea3f7b",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# source from https://github.com/sbellus/json-cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check if name ends\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# reserved word starts\n",
        "Line" : 127,
        "CharPositionInLine" : 20
      },
      "3" : {
        "Text" : "# name without value\n",
        "Line" : 132,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# remove escapes\n",
        "Line" : 140,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# check if name starts\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# turn off implicit expansions in if statement\n",
        "Line" : 181,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "# check if json_value ends, it is ended by \"\n",
        "Line" : 189,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# if \" is escaped consume\n",
        "Line" : 200,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# if it is not \" then copy also escape character\n",
        "Line" : 208,
        "CharPositionInLine" : 20
      },
      "10" : {
        "Text" : "# check if value starts\n",
        "Line" : 216,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# simple value\n",
        "Line" : 245,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# object\n",
        "Line" : 249,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 13
    },
    "CMake/Modules/MBED_STM32F0_GCC_options.cmake" : {
      "ObjectId" : "2f2a2a9440ba62488cae0e01c18d88cedf268a71",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#################################################################\n\n# WHEN ADDING A NEW TARGET add the appropriate GCC options bellow\n\n#################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/Modules/MBED_STM32F0_sources.cmake" : {
      "ObjectId" : "3f74c3bf3eee23f1c41f29716cbe3fa80580e55b",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# WHEN ADDING A NEW SERIES add the include to the vendor source code bellow\n\n###########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################################\n\n# WHEN ADDING A NEW TARGET add the source code file for the series\\device folder bellow\n\n#######################################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# sources in series\\device folder\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"${SRC_FILE} >> ${MBEDOS_SRC_FILE}\") # debug helper\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "##########################################################################\n\n# WHEN ADDING A NEW TARGET add the source code file for the series bellow\n\n##########################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# message(\"${SRC_FILE} >> ${MBEDOS_SRC_FILE}\") # debug helper\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#######################################################################################################################################\n\n# WHEN ADDING A NEW TARGET add the respective if clause bellow along with the startup file and the linker file name (without extension)\n\n#######################################################################################################################################\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# startup file\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################################################################################################\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################\n\n# WHEN ADDING A NEW TARGET check if the linker file bellow works\n\n################################################################\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "CMake/Modules/MBED_STM_sources.cmake" : {
      "ObjectId" : "ae807738b6e4d319671682a65a43818349746046",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#####################################################################\"######\n\n# WHEN ADDING A NEW VENDOR add the source code from the vendor folder bellow\n\n######################################################################\"#####\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# source files common for all STM targets\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(\"${SRC_FILE} >> ${MBEDOS_SRC_FILE}\") # debug helper\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# HAL_CMx file\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SVC_Table file\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CMake/Modules/NF_NativeAssemblies.cmake" : {
      "ObjectId" : "2f49618f05aeb876fd7efeb553f0ea302ed130ff",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################################################\n\n# WHEN ADDING A NEW API add the name that corresponds to the CMake option here\n\n# e.g.: for namespace Windows.Devices.Gpio, the CMake option is 'API_Windows.Devices.Gpio' \n\n# and the namespace designation is 'Windows.Devices.Gpio'\n\n###########################################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Esp32 only\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Stm32 only\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#################################################################\n\n# macro to perform individual settings to add an API to the build\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# namespace with '_' replacing '.'\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# list this option\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# append to list of declaration for Interop Assemblies table\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# append to list of entries for Interop Assemblies table\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# find the module\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# append include directories to list with includes for all the APIs\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# append source files to list wiht source files for all the APIs\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "############################################################################################\n\n# WHEN ADDING A NEW API add the corresponding block bellow \n\n# required changes:\n\n# 1. change the 'IF' to match the CMake option \n\n# 2. change the call to PerformSettingsForApiEntry() macro with the API name (doted naming)\n\n############################################################################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Hardware.Esp32\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Hardware.Stm32\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# nanoFramework.Devices.Can\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# nanoFramework.Devices.OneWire\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 96,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# nanoFramework.Networking.Sntp\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# nanoFramework.Runtime.Events\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# this one is special because it requires also another assembly for events that is internal (doens't have a managed end)\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# append to list of declaration for Interop Assemblies table\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# append to list of entries for Interop Assemblies table\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# System.Math\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# System.Net\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Windows.Devices.Adc\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 134,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Windows.Devices.Gpio\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 140,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# Windows.Devices.I2c\n",
        "Line" : 144,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# Windows.Devices.Pwm\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Windows.Devices.SerialCommunication\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Windows.Devices.Spi\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# Windows.Networking.Sockets\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 170,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# Windows.Devices.Wifi\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 176,
        "CharPositionInLine" : 7
      },
      "49" : {
        "Text" : "# Windows.Storage\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "##### API name here (doted name)\n",
        "Line" : 182,
        "CharPositionInLine" : 7
      },
      "51" : {
        "Text" : "# Interop assemblies\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# parse the declarations to have new lines and ';'\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# parse the list to have new lines, ',' and identation\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# make the vars global\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# output the list of APIs included\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# APIs included\n",
        "Line" : 206,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "# no APIs were included\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "##############################################################################\n\n# macro to perform individual settings to add an Interop assembly to the build\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# namespace with '_' replacing '.'\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# list this option\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# append to list of declaration for Interop Assemblies table\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# append to list of entries for Interop Assemblies table\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# find the module\n",
        "Line" : 242,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "#########\n\n# because Interop assemblies are considered and treated as like any CLR assembly we add them to the same lists\n\n#########\n",
        "Line" : 245,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# append include directories to list with includes for all the APIs\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# append source files to list wiht source files for all the APIs\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#################################################################\n\n# macro that adds the requested Interop assemblies to the build\n\n# requiremens to add an Interop assemble:\n\n# 1) add it's namespace to the NF_INTEROP_ASSEMBLIES CMake options\n\n# 2) have the corresponding CMake module in the Modules folder (mind the correct naming)\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# check if there are any Interop assemblies to be added\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# loop through each Interop assembly and add it to the build\n",
        "Line" : 269,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# output the list of Interop assemblies included\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# APIs included\n",
        "Line" : 281,
        "CharPositionInLine" : 8
      },
      "72" : {
        "Text" : "# no Interop assemblies were included\n",
        "Line" : 295,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 73
    },
    "CMake/toolchain.ChibiOS.GCC.cmake" : {
      "ObjectId" : "3deea8cea1000b73b0881128da4d874ad07e2e1c",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if( DEFINED CMAKE_CROSSCOMPILING )\n\n#     # subsequent toolchain loading is not really needed\n\n#     return()\n\n# endif()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###################################################\n\n# set C and C++ flags for compiler detection tests\n\n###################################################\n\n# IMPORTANT: these flags need to be removed after \n\n# the compiler detection otherwise they'll get \n\n# added to all compiler build calls and \n\n# will colide with the use of nano.specs\n\n###################################################\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set toolchain directories\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the name of the operating system for which CMake is to build\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# name of the CPU CMake is building for\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# macro to setup compilers\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# setup C compiler\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# setup C++ compiler\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# setup Assembler compiler\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# other toolchain configurations\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# root paths to search on the filesystem for cross-compiling\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set required C and C++ standard for ALL targets\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# set all C and C++ extensions to be OFF on ALL targets\n\n# this forces the use of -std=c11 and -std=c++11 instead of -std=gnu11 and -std=gnu++11\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#get_filename_component(FNSHORT ${FILENAME} NAME_WE)\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# add targets for HEX, BIN and S19 formats with no output so they will always be built\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# need to remove the .elf suffix from target name\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# add linker flags to generate map file\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# definition for platform \n\n# (always ARM here)\n\n# ChibiOS HAL community always include (nanoFramework overlay and official community contributions optionally)\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# build types that have debugging capabilities AND are NOT RTM have to have the define 'NANOCLR_ENABLE_SOURCELEVELDEBUGGING'\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# set compiler definition for RTM build option\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# set compiler definition for using Application Domains feature\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# set compiler definition for implementing (or not) CRC32 in Wire Protocol\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# set definition for Wire Protocol trace mask\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# set compiler definition regarding inclusion of trace messages and checks on CLR\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# set compiler definition regarding CLR IL inlining\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# include any extra compiler definitions comming from extra args\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# set linker file name\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 29
    },
    "CMake/toolchain.FreeRtos.ESP32.GCC.cmake" : {
      "ObjectId" : "52f53487d5e7f919c982d35a590f2110d2190565",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if( DEFINED CMAKE_CROSSCOMPILING )\n\n#     # subsequent toolchain loading is not really needed\n\n#     return()\n\n# endif()\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check for toolchain path\n\n# if(NOT TOOLCHAIN_PREFIX)\n\n# \tmessage( \"tcp ${TOOLCHAIN_PREFIX}\" )\n\n#      message(STATUS \"\\n-- ########################################\\nNo TOOLCHAIN_PREFIX specified, need one!\\nCall CMake with -DTOOLCHAIN_PREFIX=\\\"<path_to_your_gcc_toolchain>\\\"\\n specifing the path to your GCC toolchain\")\n\n#      message(STATUS \"\\nNOTE: mind the forward slash in the path, without trailing slash.)\")\n\n#      message(STATUS \"########################################\\n\\n\")\n\n#      message(FATAL_ERROR \"No TOOLCHAIN_PREFIX specified\")\n\n# endif()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Stop cmake trying to check if compiler works\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set toolchain directories\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the name of the operating system for which CMake is to build\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# name of the CPU CMake is building for\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# macro to setup compilers\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# setup C compiler\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# setup C++ compiler\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# setup Assembler compiler\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# other toolchain configurations  \n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# set debug flags\n\n#set(CMAKE_C_FLAGS \"-DTEST_WITH_C_FLAGS \" CACHE INTERNAL \"c compiler flags \")\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS_DEBUG \" ${GCC_ESP32_LINKER_FLAGS} ${GCC_ESP32_LINKER_LIBS} ${GCC_ESP32_LINKER_LD} \" CACHE INTERNAL \"linker flags debug\")\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set release flags\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# root paths to search on the filesystem for cross-compiling\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "CMake/toolchain.mBed.GCC.cmake" : {
      "ObjectId" : "4a3daaac6c3c44362e957bf0f23e4ca64293ef63",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if( DEFINED CMAKE_CROSSCOMPILING )\n\n#     # subsequent toolchain loading is not really needed\n\n#     return()\n\n# endif()\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check for toolchain path\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set toolchain directories\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the name of the operating system for which CMake is to build\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# name of the CPU CMake is building for\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# macro to setup compilers\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# setup C compiler\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# setup C++ compiler\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# setup Assembler compiler\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# other toolchain configurations  \n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set debug flags\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# set release flags\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# root paths to search on the filesystem for cross-compiling\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add targets for HEX, BIN and S19 formats with no output so they will always be built\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "CMakeLists.txt" : {
      "ObjectId" : "5c924e037867c544b7fb2a031143f77224c93fe0",
      "LastModified" : "2019-04-18T08:07:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set(CMAKE_VERBOSE_MAKEFILE 1)  # debug helper\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the following prevents launchin a build in the source tree\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# fatal error and message explaining this\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################################\n\n# path to local CMake modules\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "######################################################\n\n# set build type to release if not specified otherwise\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "######################################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "######################################################\n\n# set time stamp of build\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "######################################################\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#######################\n\n# handle RTOSes choice\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# no RTOS selected, defaulting to ChibiOS\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# list of supported RTOSes\n\n# when adding a new RTOS add the corresponding string bellow AND...\n\n# ... also on the compare block bellow\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##########################################################################\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#######################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##########################################\n\n# set default toolchain to GCC\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# have it lower case too for file names\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########################################\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# check for toolchain path\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# set toolchain file\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Set up short path substitution on Windows\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# else()\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#     # find out the chip vendor in order to move on with the appropriate configuration\n\n#     string(REGEX MATCH \"^[S][T][M]32\" CHIP_VENDOR_STM32 \"${TARGET_CHIP}\")\n\n#     string(COMPARE EQUAL \"STM32\" \"${CHIP_VENDOR_STM32}\" CHIP_VENDOR_STM32_CHECK)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#     if(CHIP_VENDOR_STM32_CHECK)\n\n#         # vendor is ST and toolchain is GCC\n\n#         message(STATUS \"Chip vendor is ST. Chip is STM32.\")\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#         # set CMSIS include directories\n\n#         include_directories(STM32CMSIS_INCLUDE_DIRS)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#         # set toolchain file for cross-compiling with CMake\n\n#         # for this vendor/chip it will be\n\n#     # elseif(CHIP_VENDOR_??_CHECK)\n\n#     #\n\n#     #     # vendor is ?? and toolchain is GCC\n\n#     #     message(\"Chip vendor is ??. Chip is ???.\")\n\n#     #     set(CMAKE_TOOLCHAIN_FILE CMake/???.cmake)\n\n#     #\n\n#     else()\n\n#         message(STATUS \"\\n-- ###############################################\\n\")\n\n#         message(STATUS \"Unknow vendor or chip. Supported vendors/chips:\\n-- ST's STM32 (e.g. STM32F407VG)\\n\")\n\n#         message(STATUS \"###############################################\\n\\n\")\n\n#         message(FATAL_ERROR \"Unknow vendor or chip in TARGET_CHIP\")\n\n#     endif()\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#     # set toolchain file\n\n#     set(CMAKE_TOOLCHAIN_FILE CMake/toolchain.${CHIP_VENDOR_STM32}.${TOOLCHAIN}.cmake)\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#########################################\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "########################################################\n\n# check availability of hex2dfu tool if specified\n\n# only relevant if this is running on a Windows machine\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# set default version\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#######################\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#######################\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#################################################################\n\n# ouput RTM build option\n\n# Build RTM version of firmware (default is OFF so the build is not RTM and the CLR outputs some debug informations)\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#################################################################\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#################################################################\n\n# clear CMAKE_C_FLAGS_INIT and CMAKE_CXX_FLAGS_INIT\n\n# (this needs to be here and not before because by now\n\n# the compiler detection has already occurred)\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#################################################################\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "#################################################################\n\n# clear some CMake flavor flags that are being set as default\n\n# in the GNU compiler init\n\n# we want to control and fine tune these\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "#################################################################\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "#################################################################\n\n# clear default libraries that are set by CMake\n\n# we want to control\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "#################################################################\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#################################################################################\n\n# chooses if double-point float point support is provided by the platform\n\n# (default is OFF which means that single-precision floating point is effective)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "###################################################################################\n\n# chooses if platform provides support for converting string to values on any base\n\n# (default is OFF which means that conversion to value from base 10 and 16 (partial) is effective)\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#################################################################\n\n# true random number generation option supported by hardware\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#################################################################\n\n# nanoFramework features\n\n#################################################################\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "###################################################################\n\n# debugger (default is OFF so no support for debugging is included\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#################################################################\n\n# enables Application Domains support in nanoCLR\n\n# (default is OFF so Application Domains is NOT supported)\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#################################################################\n\n# disable all trace messages and checks on CLR\n\n# (default is OFF so all traces and checks are enabled)\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#################################################################\n\n# disable CLR IL inlining\n\n# (default is OFF so CLR IL inline is enabled)\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#################################################################\n\n# enables configuration block storage support\n\n# (default is OFF so Configuration block storage is NOT supported)\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#################################################################\n\n# enables support for SD Card\n\n# (default is OFF so SD Card is NOT supported)\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# this feature currently is supported only on ChibiOS\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# force inclusion of Windows.Storage API\n",
        "Line" : 341,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "#################################################################\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#################################################################\n\n# enables USB Mass Storage support\n\n# (default is OFF so USB Mass Storage is NOT supported)\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# this feature currently is supported only on ChibiOS\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# this feature requires inclusion of ChibiOS contribution repository\n",
        "Line" : 363,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# force inclusion of Windows.Storage API\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "#################################################################\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#################################################################\n\n# ARM Cortex-M Single Wire Output (SWO)\n\n# (default is OFF so no SWO output)\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "#################################################################\n",
        "Line" : 391,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "#################################################################\n\n# enables use of ChibiOS Community contribution\n\n# (default is OFF so ChibiOS Community is NOT included)\n",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "#################################################################\n",
        "Line" : 397,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "#################################################################\n\n# reports Wire Protocol CRC32 implementation\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#################################################################\n\n# enables Networking support in nanoCLR\n\n# declares Networking option\n\n# needs to show before the API namespaces processing because it's used there\n\n# (default is OFF so Networking is NOT supported)\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# (default is OFF so OpenSSL is NOT used)\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# (default is OFF so mbed TLS is NOT used)\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# sanity check for both providers set\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# set default option for SNTP to ON\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#################################################################\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#################################################################\n\n# manage HAL/PAL required for API namespaces\n\n#################################################################\n\n# for some APIs we need to enable the device in the HAL config\n\n# and/or manage other APIs that are required\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# set NETWORKING option to true\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# set Security module to use\n",
        "Line" : 454,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "#################################################################\n\n# manage dependent APIs required for some API namespaces\n\n#################################################################\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# include nanoFramework.Runtime.Events API\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# these APIs requires nanoFramework.Runtime.Events\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# manage inclusion of SNTP\n",
        "Line" : 548,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "#################################################################\n\n# handles Networking support at HAL level\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# sanity check for missing configuration block option\n\n# which is required for network\n",
        "Line" : 571,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "#################################################################\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "#################################################################\n\n# enables filesysytem support in nanoCLR\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#################################################################\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#################################################################\n\n# RTC (real time clock) (default is OFF so RTC is NOT included)\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "#################################################################\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#################################################################\n\n# CPU watchdog (default is ON so watchdog is included)\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#################################################################\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#######################\n\n# ChibiOS\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# sanity check on SSL provider: ChibiOS only supports mbed TLS\n",
        "Line" : 626,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# check if CHIBIOS_SOURCE was specified or if it's empty (default is empty)\n",
        "Line" : 631,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# check if CHIBIOS-Contrib_SOURCE was specified or if it's empty (default is empty)\n",
        "Line" : 639,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# no CHIBIOS source specified, download it from it's repo\n",
        "Line" : 648,
        "CharPositionInLine" : 8
      },
      "91" : {
        "Text" : "# hack to make the FindGit to work in Windows platforms (check the module comment for details)\n",
        "Line" : 650,
        "CharPositionInLine" : 8
      },
      "92" : {
        "Text" : "# check for Git (needed here for advanced warning to user if it's not installed)\n",
        "Line" : 653,
        "CharPositionInLine" : 8
      },
      "93" : {
        "Text" : "#  check if Git was found, if not report to user and abort\n",
        "Line" : 656,
        "CharPositionInLine" : 8
      },
      "94" : {
        "Text" : "# ChibiOS version\n",
        "Line" : 661,
        "CharPositionInLine" : 8
      },
      "95" : {
        "Text" : "# check if build was requested with a specifc ChibiOS version\n",
        "Line" : 664,
        "CharPositionInLine" : 8
      },
      "96" : {
        "Text" : "# no ChibiOS version actualy specified, must be empty which is fine, we'll grab the code from the stable_18.2.x branch\n",
        "Line" : 672,
        "CharPositionInLine" : 12
      },
      "97" : {
        "Text" : "# branch naming follows the pattern 'stable_18.2.x'\n\n# need to extract the major and minor numbers from the CHIBIOS_VERSION parameter\n\n# find 1st dot in version number\n",
        "Line" : 678,
        "CharPositionInLine" : 12
      },
      "98" : {
        "Text" : "# find 2nd dot in version number\n",
        "Line" : 682,
        "CharPositionInLine" : 12
      },
      "99" : {
        "Text" : "# extract 'short' version\n",
        "Line" : 684,
        "CharPositionInLine" : 12
      },
      "100" : {
        "Text" : "# set branch name\n",
        "Line" : 687,
        "CharPositionInLine" : 12
      },
      "101" : {
        "Text" : "# need to setup a separate CMake project to download the code from the GitHub repository\n\n# otherwise it won't be available before the actual build step\n",
        "Line" : 691,
        "CharPositionInLine" : 8
      },
      "102" : {
        "Text" : "# setup CMake project for ChibiOS download\n",
        "Line" : 696,
        "CharPositionInLine" : 8
      },
      "103" : {
        "Text" : "# run build on ChibiOS download CMake project to perform the download\n",
        "Line" : 701,
        "CharPositionInLine" : 8
      },
      "104" : {
        "Text" : "# add ChibiOS as external project\n",
        "Line" : 706,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "# target specified branch\n",
        "Line" : 712,
        "CharPositionInLine" : 40
      },
      "106" : {
        "Text" : "# download only the tip of the branch, not the complete history\n",
        "Line" : 713,
        "CharPositionInLine" : 28
      },
      "107" : {
        "Text" : "# install command has to perform TWO extracts\n\n# in order to set multiple commands with INSTALL_COMMAND they have to be concatenated by a COMMAND keyword \n",
        "Line" : 717,
        "CharPositionInLine" : 12
      },
      "108" : {
        "Text" : "# Disable all other steps\n",
        "Line" : 722,
        "CharPositionInLine" : 12
      },
      "109" : {
        "Text" : "# get source dir for ChibiOS CMake project\n",
        "Line" : 727,
        "CharPositionInLine" : 8
      },
      "110" : {
        "Text" : "# ChibiOS source was specified\n",
        "Line" : 731,
        "CharPositionInLine" : 8
      },
      "111" : {
        "Text" : "# sanity check is source path exists\n",
        "Line" : 733,
        "CharPositionInLine" : 8
      },
      "112" : {
        "Text" : "# check if we already have the sources, no need to copy again\n",
        "Line" : 737,
        "CharPositionInLine" : 12
      },
      "113" : {
        "Text" : "# add ChibiOS as external project\n",
        "Line" : 749,
        "CharPositionInLine" : 8
      },
      "114" : {
        "Text" : "# install command has to perform TWO extracts\n\n# in order to set multiple commands with INSTALL_COMMAND they have to be concatenated by a COMMAND keyword \n",
        "Line" : 755,
        "CharPositionInLine" : 12
      },
      "115" : {
        "Text" : "# Disable all other steps\n",
        "Line" : 760,
        "CharPositionInLine" : 12
      },
      "116" : {
        "Text" : "# get source dir for ChibiOS CMake project\n",
        "Line" : 765,
        "CharPositionInLine" : 8
      },
      "117" : {
        "Text" : "# no CHIBIOS_CONTRIB source specified, download it from it's repo\n",
        "Line" : 772,
        "CharPositionInLine" : 12
      },
      "118" : {
        "Text" : "# hack to make the FindGit to work in Windows platforms (check the module comment for details)\n",
        "Line" : 774,
        "CharPositionInLine" : 12
      },
      "119" : {
        "Text" : "# check for Git (needed here for advanced warning to user if it's not installed)\n",
        "Line" : 777,
        "CharPositionInLine" : 12
      },
      "120" : {
        "Text" : "#  check if Git was found, if not report to user and abort\n",
        "Line" : 780,
        "CharPositionInLine" : 12
      },
      "121" : {
        "Text" : "# need to setup a separate CMake project to download the code from the GitHub repository\n\n# otherwise it won't be available before the actual build step\n",
        "Line" : 787,
        "CharPositionInLine" : 12
      },
      "122" : {
        "Text" : "# setup CMake project for ChibiOS-Contrib download\n",
        "Line" : 792,
        "CharPositionInLine" : 12
      },
      "123" : {
        "Text" : "# run build on ChibiOS-Contrib download CMake project to perform the download\n",
        "Line" : 797,
        "CharPositionInLine" : 12
      },
      "124" : {
        "Text" : "# add ChibiOS-Contrib as external project\n\n# need to specify nanoframework as the active branch\n",
        "Line" : 802,
        "CharPositionInLine" : 12
      },
      "125" : {
        "Text" : "# target specified branch\n",
        "Line" : 809,
        "CharPositionInLine" : 39
      },
      "126" : {
        "Text" : "# download only the tip of the branch, not the complete history\n",
        "Line" : 810,
        "CharPositionInLine" : 32
      },
      "127" : {
        "Text" : "# Disable all other steps\n",
        "Line" : 813,
        "CharPositionInLine" : 16
      },
      "128" : {
        "Text" : "# get source dir for ChibiOS-Contrib CMake project\n",
        "Line" : 819,
        "CharPositionInLine" : 12
      },
      "129" : {
        "Text" : "# ChibiOS-Contrib source was specified\n",
        "Line" : 823,
        "CharPositionInLine" : 12
      },
      "130" : {
        "Text" : "# sanity check is source path exists\n",
        "Line" : 825,
        "CharPositionInLine" : 12
      },
      "131" : {
        "Text" : "# check if we already have the sources, no need to copy again\n",
        "Line" : 829,
        "CharPositionInLine" : 16
      },
      "132" : {
        "Text" : "# add ChibiOS-Contrib as external project\n",
        "Line" : 841,
        "CharPositionInLine" : 12
      },
      "133" : {
        "Text" : "# Disable all other steps\n",
        "Line" : 846,
        "CharPositionInLine" : 16
      },
      "134" : {
        "Text" : "# get source dir for ChibiOS-Contrib CMake project\n",
        "Line" : 852,
        "CharPositionInLine" : 12
      },
      "135" : {
        "Text" : "# if mbed TLS is enabled add it to the build\n",
        "Line" : 858,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# check if MBEDTLS_SOURCE was specified or if it's empty (default is empty)\n",
        "Line" : 861,
        "CharPositionInLine" : 8
      },
      "137" : {
        "Text" : "# set options for mbed TLS\n",
        "Line" : 870,
        "CharPositionInLine" : 8
      },
      "138" : {
        "Text" : "# no mbed TLS source specified, download it from it's repo\n",
        "Line" : 874,
        "CharPositionInLine" : 12
      },
      "139" : {
        "Text" : "# hack to make the FindGit to work in Windows platforms (check the module comment for details)\n",
        "Line" : 876,
        "CharPositionInLine" : 12
      },
      "140" : {
        "Text" : "# check for Git (needed here for advanced warning to user if it's not installed)\n",
        "Line" : 879,
        "CharPositionInLine" : 12
      },
      "141" : {
        "Text" : "#  check if Git was found, if not report to user and abort\n",
        "Line" : 882,
        "CharPositionInLine" : 12
      },
      "142" : {
        "Text" : "# set tag for currently supported version\n",
        "Line" : 887,
        "CharPositionInLine" : 12
      },
      "143" : {
        "Text" : "# need to setup a separate CMake project to download the code from the GitHub repository\n\n# otherwise it won't be available before the actual build step\n",
        "Line" : 890,
        "CharPositionInLine" : 12
      },
      "144" : {
        "Text" : "# setup CMake project for mbedTLS download\n",
        "Line" : 895,
        "CharPositionInLine" : 12
      },
      "145" : {
        "Text" : "# run build on mbedTLS download CMake project to perform the download\n",
        "Line" : 900,
        "CharPositionInLine" : 12
      },
      "146" : {
        "Text" : "# add mbedTLS as external project\n",
        "Line" : 905,
        "CharPositionInLine" : 12
      },
      "147" : {
        "Text" : "# target specified branch\n",
        "Line" : 911,
        "CharPositionInLine" : 44
      },
      "148" : {
        "Text" : "# download only the tip of the branch, not the complete history\n",
        "Line" : 912,
        "CharPositionInLine" : 32
      },
      "149" : {
        "Text" : "# Disable all other steps\n",
        "Line" : 916,
        "CharPositionInLine" : 16
      },
      "150" : {
        "Text" : "# mbedTLS source was specified\n",
        "Line" : 923,
        "CharPositionInLine" : 12
      },
      "151" : {
        "Text" : "# sanity check is source path exists\n",
        "Line" : 925,
        "CharPositionInLine" : 12
      },
      "152" : {
        "Text" : "# check if we already have the sources, no need to copy again\n",
        "Line" : 928,
        "CharPositionInLine" : 16
      },
      "153" : {
        "Text" : "# add mbedTLS as external project\n",
        "Line" : 941,
        "CharPositionInLine" : 12
      },
      "154" : {
        "Text" : "# Disable all other steps\n",
        "Line" : 947,
        "CharPositionInLine" : 16
      },
      "155" : {
        "Text" : "# get source dir for mbedTLS CMake project\n",
        "Line" : 955,
        "CharPositionInLine" : 8
      },
      "156" : {
        "Text" : "# Define base path for the class libraries\n",
        "Line" : 964,
        "CharPositionInLine" : 4
      },
      "157" : {
        "Text" : "# set target base location\n\n# this has to be set before the class library modules are pulled in\n",
        "Line" : 967,
        "CharPositionInLine" : 4
      },
      "158" : {
        "Text" : "# set target base location\n",
        "Line" : 970,
        "CharPositionInLine" : 8
      },
      "159" : {
        "Text" : "# try to find board in the Community targets folder\n",
        "Line" : 973,
        "CharPositionInLine" : 8
      },
      "160" : {
        "Text" : "# set target base location\n",
        "Line" : 975,
        "CharPositionInLine" : 12
      },
      "161" : {
        "Text" : "# board NOT found in targets folder\n\n# can't continue\n",
        "Line" : 978,
        "CharPositionInLine" : 12
      },
      "162" : {
        "Text" : "# set CMSIS RTOS include directory\n",
        "Line" : 984,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "# add target CMSIS OS folders\n",
        "Line" : 987,
        "CharPositionInLine" : 4
      },
      "164" : {
        "Text" : "# need to find board definition files (board.c and board.h)\n",
        "Line" : 993,
        "CharPositionInLine" : 4
      },
      "165" : {
        "Text" : "# assume no community board... until proven otherwise\n",
        "Line" : 995,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# start search in nanoFramework ChibiOS 'overlay' folder\n",
        "Line" : 998,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# board found\n\n# if it's on nF overlay board.c and board.h exist there for sure\n",
        "Line" : 1000,
        "CharPositionInLine" : 8
      },
      "168" : {
        "Text" : "# board NOT found in ChibiOS 'overlay'\n",
        "Line" : 1004,
        "CharPositionInLine" : 8
      },
      "169" : {
        "Text" : "# try to find it in the target boards\n",
        "Line" : 1006,
        "CharPositionInLine" : 8
      },
      "170" : {
        "Text" : "# board found\n\n# check if the board definition files are available at the target folder\n",
        "Line" : 1008,
        "CharPositionInLine" : 12
      },
      "171" : {
        "Text" : "# definition files found\n",
        "Line" : 1012,
        "CharPositionInLine" : 16
      },
      "172" : {
        "Text" : "# board.c and board.h are NOT in the target folder, try to find them in the official distribution\n",
        "Line" : 1016,
        "CharPositionInLine" : 16
      },
      "173" : {
        "Text" : "# board found\n\n# if it's on the ChibiOS official distribution board.c and board.h exist here for sure\n",
        "Line" : 1019,
        "CharPositionInLine" : 20
      },
      "174" : {
        "Text" : "# board NOT found in official distribution\n\n# quit now as there is no were else to search for these\n",
        "Line" : 1024,
        "CharPositionInLine" : 20
      },
      "175" : {
        "Text" : "# try to find board in the Community targets folder\n",
        "Line" : 1032,
        "CharPositionInLine" : 12
      },
      "176" : {
        "Text" : "# set flag for this being a community board\n",
        "Line" : 1034,
        "CharPositionInLine" : 16
      },
      "177" : {
        "Text" : "# board NOT found in official distribution\n\n# quit now as there is no were else to search for these\n",
        "Line" : 1037,
        "CharPositionInLine" : 16
      },
      "178" : {
        "Text" : "# add target ChibiOS dirs\n",
        "Line" : 1046,
        "CharPositionInLine" : 4
      },
      "179" : {
        "Text" : "# now add the subdirectory for the board\n\n# try to find board in the targets folder\n",
        "Line" : 1052,
        "CharPositionInLine" : 4
      },
      "180" : {
        "Text" : "# board found\n",
        "Line" : 1055,
        "CharPositionInLine" : 8
      },
      "181" : {
        "Text" : "# add TARGET board directory\n",
        "Line" : 1059,
        "CharPositionInLine" : 8
      },
      "182" : {
        "Text" : "# try to find board in the Community targets folder\n",
        "Line" : 1064,
        "CharPositionInLine" : 8
      },
      "183" : {
        "Text" : "# board found\n",
        "Line" : 1066,
        "CharPositionInLine" : 12
      },
      "184" : {
        "Text" : "# add TARGET board directory from Community\n",
        "Line" : 1070,
        "CharPositionInLine" : 12
      },
      "185" : {
        "Text" : "# board NOT found in targets folder\n",
        "Line" : 1074,
        "CharPositionInLine" : 8
      },
      "186" : {
        "Text" : "# board NOT found in targets folder\n",
        "Line" : 1075,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 187,
      "Errorlog" : "line 1076:32 token recognition error at: '\"\\n\\nSorry but support for ${CHIBIOS_BOARD} target is not available...\\n\\Y'\nline 1099:93 token recognition error at: '\")\\n \\t\\tadd_subdirectory(targets/FreeRTOS_ESP32/${ESP32_BOARD})\\n\\n    endif()\\n\\nendif()\\n\u0000'\n"
    },
    "src/CLR/Debugger/CMakeLists.txt" : {
      "ObjectId" : "ab90ee1a21f84cb4169a0a60528c188097aa2b0b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append Wire Protocol files to source \n\n# list(APPEND DEBUGGER_WIRE_PROTOCOL_SOURCES_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/WireProtocol_Commands.c\")\n\n# list(APPEND DEBUGGER_WIRE_PROTOCOL_SOURCES_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/WireProtocol_App_Interface.c\")\n\n# make Wire Protocol files list global\n\n# set(DEBUGGER_WIRE_PROTOCOL_SOURCES ${DEBUGGER_WIRE_PROTOCOL_SOURCES_LIST} CACHE INTERNAL \"CLR debugger Wire Protocol source files list\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# append Wire Protocol include directory\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make include dirs global\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "targets/CMSIS-OS/ChibiOS/Include/CMakeLists.txt" : {
      "ObjectId" : "011c8fada448fe4708e94bebbf52b1bdc1769980",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append include directory for target ChibiOS\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add header with target platform definitions\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "targets/CMSIS-OS/ChibiOS/MBN_QUAIL/CMakeLists.txt" : {
      "ObjectId" : "a9a75402889b7724cb8c225fd8b4601dcf7a439b",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Copyright (c) 2017 The nanoFramework project contributors\r\n\n# See LICENSE file in the project root for full license information.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add header files with common OS definitions and board definitions specific for each image\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# packages for nanoFramework libraries\r\n\n#######################################\r\n\n# mandatory \r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################\r\n\n# optional\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ChibiOS contrib repo\r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# nF feature: debugger\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# nF feature: networking\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# nF feature: filesystem\r\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################\r\n\n# nanoBooter executable\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# executables for project, project sources\r\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# need to add configuration manager to allow get/store configuration blocks\r\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#######################\r\n\n# nanoCLR executable\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# executables for project, project sources\r\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# sources for nanoFramework libraries\r\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# sources for nanoFramework APIs\r\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# add dependency from ChibiOS (this is required to make sure the ChibiOS repo is downloaded before the build starts)\r\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add dependencies from CHIBIOS_FILESYSTEM_COMPONENTS (this is required to make sure that ChibiOS filesystem components are unzip at the proper locations before the build starts)\r\n\n# only required if filesystem is ON\r\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# include common directories\r\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# include directories for nanoBooter\r\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# include directories for nanoCLR\r\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# directories for nanoFramework libraries\r\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# includes for nanoFramework APIs\r\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# includes for ChibiOS LwIP\r\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# set compiler options\r\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# set compiler definitions\r\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set linker files\r\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# set linker options\r\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# add other linker flags\r\n\n###########################################################\r\n\n# the sizes of CRT heap and ChibiOS stacks are defined here\r\n\n############################################################################\r\n\n# CRT heap is assigned to RAM4 region @ CCM SRAM so we are OK to use it all\r\n\n############################################################################\r\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# generate output files\r\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# if HEX2DFU tool is available pack the binaries into a DFU package\r\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "####################################################################################################\r\n\n## when changing the linker file make sure to update the new addresses for the image files bellow ##\r\n\n## DO NOT use the leading 0x notation, just the address in plain hexadecimal formating            ##\r\n\n####################################################################################################\r\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 32
    },
    "targets/CMSIS-OS/ChibiOS/MBN_QUAIL/common/CMakeLists.txt" : {
      "ObjectId" : "6c1542ca48680f038b39a2cfe788d9a31f333661",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Copyright (c) 2017 The nanoFramework project contributors\r\n\n# See LICENSE file in the project root for full license information.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append common source files\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/MBN_QUAIL/nanoBooter/CMakeLists.txt" : {
      "ObjectId" : "fca210179c6423e71cf3ecab61d94a50927af5f1",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Copyright (c) 2017 The nanoFramework project contributors\r\n\n# See LICENSE file in the project root for full license information.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # append nanoBooter source files\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/MBN_QUAIL/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "43cba589313dae83a7df8b0b4d9324156392826b",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Copyright (c) 2017 The nanoFramework project contributors\r\n\n# See LICENSE file in the project root for full license information.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append nanoCLR source files\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/NETDUINO3_WIFI/CMakeLists.txt" : {
      "ObjectId" : "01d62d2687d2d03a6fb7b5c217416fd133851eb3",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add header files with common OS definitions and board definitions specific for each image\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# packages for nanoFramework libraries\n\n#######################################\n\n# mandatory \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################\n\n# optional\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ChibiOS contrib repo\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# nF feature: debugger\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# nF feature: networking\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# nF feature: filesystem\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################\n\n# nanoBooter executable\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# need to add configuration manager to allow get/store configuration blocks\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#######################\n\n# nanoCLR executable\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# sources for nanoFramework libraries\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# sources for ChibiOS FatFS\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# sources for nanoFramework APIs\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# add dependency from ChibiOS (this is required to make sure the ChibiOS repo is downloaded before the build starts)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# add dependencies from CHIBIOS_FILESYSTEM_COMPONENTS (this is required to make sure that ChibiOS filesystem components are unzip at the proper locations before the build starts)\n\n# only required if filesystem is ON\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# include common directories\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# include directories for nanoBooter\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# include directories for nanoCLR\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# directories for nanoFramework libraries\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# includes for nanoFramework APIs\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# includes for ChibiOS FatFS\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# includes for ChibiOS LwIP\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# set compiler options\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# set compiler definitions\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# set linker files\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set linker options\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add other linker flags\n\n###########################################################\n\n# the sizes of CRT heap and ChibiOS stacks are defined here\n\n############################################################################\n\n# CRT heap is assigned to RAM4 region @ CCM SRAM so we are OK to use it all\n\n############################################################################\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# generate output files\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# if HEX2DFU tool is available pack the binaries into a DFU package\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "####################################################################################################\n\n## when changing the linker file make sure to update the new addresses for the image files bellow ##\n\n## DO NOT use the leading 0x notation, just the address in plain hexadecimal formating            ##\n\n####################################################################################################\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 34
    },
    "targets/CMSIS-OS/ChibiOS/NETDUINO3_WIFI/common/CMakeLists.txt" : {
      "ObjectId" : "aa7f1d543be2dad0dd79662d5d40a6f859c4620d",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append common source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/NETDUINO3_WIFI/nanoBooter/CMakeLists.txt" : {
      "ObjectId" : "291f47e1213882b1e07ffb0561cffb1146040af7",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # append nanoBooter source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/NETDUINO3_WIFI/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "e5496b7ea0753f6ee83350ec195111eba48e29db",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append nanoCLR source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_NUCLEO64_F091RC/CMakeLists.txt" : {
      "ObjectId" : "a49e9bca1ef3b4ff0e7cc61448917f5eb7c38033",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add header files with common OS definitions and board definitions specific for each image\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# packages for nanoFramework libraries\n\n#######################################\n\n# mandatory \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################\n\n# optional\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ChibiOS contrib repo\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# nF feature: debugger\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# nF feature: networking\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# nF feature: filesystem\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################\n\n# nanoBooter executable\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# need to add configuration manager to allow get/store configuration blocks\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#######################\n\n# nanoCLR executable\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# sources for nanoFramework libraries\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# sources for ChibiOS FatFS\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# sources for nanoFramework APIs\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# add dependency from ChibiOS (this is required to make sure the ChibiOS repo is downloaded before the build starts)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# include common directories\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# include directories for nanoBooter\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# include directories for nanoCLR\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# directories for nanoFramework libraries\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# includes for nanoFramework APIs\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# includes for ChibiOS FatFS\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# includes for ChibiOS LwIP\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# set compiler options\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set compiler definitions\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# set linker files\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# set linker options\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# add other linker flags\n\n###########################################################\n\n# the sizes of CRT heap and ChibiOS stacks are defined here\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# generate output files\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "targets/CMSIS-OS/ChibiOS/ST_NUCLEO64_F091RC/common/CMakeLists.txt" : {
      "ObjectId" : "777d4ec38763b7cf636e1ce8342b7d3ce9b18720",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append source files required for ChibiOS interface  \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_NUCLEO64_F091RC/nanoBooter/CMakeLists.txt" : {
      "ObjectId" : "291f47e1213882b1e07ffb0561cffb1146040af7",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # append nanoBooter source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_NUCLEO64_F091RC/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "e5496b7ea0753f6ee83350ec195111eba48e29db",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append nanoCLR source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F429I_DISCOVERY/CMakeLists.txt" : {
      "ObjectId" : "11f047880c575f11d9a444c03124371208718a7e",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add header files with common OS definitions and board definitions specific for each image\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# packages for nanoFramework libraries\n\n#######################################\n\n# mandatory \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################\n\n# optional\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ChibiOS contrib repo\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# nF feature: debugger\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# nF feature: networking\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# nF feature: filesystem\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################\n\n# nanoBooter executable\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# need to add configuration manager to allow get/store configuration blocks\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#######################\n\n# nanoCLR executable\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# the next one is required is the target implements and it's using external memory\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# sources for nanoFramework libraries\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# sources for ChibiOS FatFS\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# sources for nanoFramework APIs\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# add dependency from ChibiOS (this is required to make sure the ChibiOS repo is downloaded before the build starts)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# include common directories\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# include directories for nanoBooter\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# include directories for nanoCLR\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# directories for nanoFramework libraries\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# includes for nanoFramework APIs\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# includes for ChibiOS FatFS\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# includes for ChibiOS LwIP\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# set compiler options\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# set compiler definitions\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# set linker files\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set linker options\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add other linker flags\n\n###########################################################\n\n# the sizes of CRT heap and ChibiOS stacks are defined here\n\n############################################################################\n\n# CRT heap is assigned to RAM4 region @ CCM SRAM so we are OK to use it all\n\n############################################################################\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# generate output files\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F429I_DISCOVERY/common/CMakeLists.txt" : {
      "ObjectId" : "aa7f1d543be2dad0dd79662d5d40a6f859c4620d",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append common source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F429I_DISCOVERY/nanoBooter/CMakeLists.txt" : {
      "ObjectId" : "291f47e1213882b1e07ffb0561cffb1146040af7",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # append nanoBooter source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F429I_DISCOVERY/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "e5496b7ea0753f6ee83350ec195111eba48e29db",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append nanoCLR source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F769I_DISCOVERY/CMakeLists.txt" : {
      "ObjectId" : "c2f0d4fa2bec0bb011707d8dc481107018257757",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add header files with common OS definitions and board definitions specific for each image\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# packages for nanoFramework libraries\n\n#######################################\n\n# mandatory \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################\n\n# optional\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ChibiOS contrib repo\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# nF feature: debugger\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# nF feature: networking\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# nF feature: filesystem\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# security provider is mbedTLS\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#######################\n\n# nanoBooter executable\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# need to add configuration manager to allow get/store configuration blocks\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#######################\n\n# nanoCLR executable\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# the next one is required is the target implements and it's using external memory\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# sources for nanoFramework libraries\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# sources for ChibiOS FatFS\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# sources for nanoFramework Network LWIP, Sockets and TLS\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# sources for nanoFramework APIs\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# add dependency from ChibiOS (this is required to make sure the ChibiOS repo is downloaded before the build starts)\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# add dependencies from CHIBIOS_NETWORK_COMPONENTS (this is required to make sure that ChibiOS network components are unzip at the proper locations before the build starts)\n\n# only required if networking is ON\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# add dependency for security provider mbedTLS\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# add dependencies from CHIBIOS_FILESYSTEM_COMPONENTS (this is required to make sure that ChibiOS filesystem components are unzip at the proper locations before the build starts)\n\n# only required if filesystem is ON\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# include common directories\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# include directories for nanoBooter\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# includes for ChibiOS LwIP\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# include directories for nanoCLR\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# directories for nanoFramework libraries\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# includes for nanoFramework APIs\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# includes for ChibiOS FatFS\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# includes for ChibiOS LwIP\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# incudes for Networking and TLS\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# set compiler options\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# mbed TLS requires a config file\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# this seems to be only option to properly set a compiler define through the command line that needs to be a string literal\n",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# set compiler definitions\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# set linker files\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# set linker options\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# add other linker flags\n\n###########################################################\n\n# the sizes of CRT heap and ChibiOS stacks are defined here\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# generate output files\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F769I_DISCOVERY/common/CMakeLists.txt" : {
      "ObjectId" : "01e0f5b98f161dfae3fd5292582454e4149111e2",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append common source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F769I_DISCOVERY/nanoBooter/CMakeLists.txt" : {
      "ObjectId" : "f0e921f750264874406553766f6290bc059e5ec2",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# # append nanoBooter source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/ST_STM32F769I_DISCOVERY/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "e5496b7ea0753f6ee83350ec195111eba48e29db",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append nanoCLR source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/ChibiOS/common/CMakeLists.txt" : {
      "ObjectId" : "9a103c028a11d8d37c7bb489a9f2ebbea118cec8",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append target ChibiOS source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# append Target files\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include configuration manager file, if feature is enabled\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# append nanoHAL\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# append hard fault handler if the build type is to include debug info\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append networking files, if enabled\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# append mbed TLS entropy generator, if hardware has it\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# make var global\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "targets/CMSIS-OS/ChibiOS/nanoBooter/CMakeLists.txt" : {
      "ObjectId" : "d88eae237e840397b34e23e075d67e9ec03f5c22",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append target ChibiOS nanoBooter source files \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# append include directory for debugger\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# append target ChibiOS nanoBooter include directory\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# make var global\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "targets/CMSIS-OS/ChibiOS/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "8400310ccff802aa88f80186a0dcacefeb106c20",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add header file with common target definitions\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# append nanoHAL\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# append target ChibiOS nanoCLR source files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# append target HAL source files\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# append watchdog only if option is ON\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append target PAL source files\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# append other CLR core files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# append nanoCRT\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append files from Runtime.Native\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# append TRNG only if option is ON\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# append random implementation for all series, except F0\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# this series doesn't feature hardware TRNG, report\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# add native assemblies\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# configure code file with Interop Assemblies table and...\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ... now add Interop Assemblies table to ChibiOS nanoCLR sources list\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# make var global\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# append target ChibiOS nanoCLR include directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# append PAL include directory\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# append Runtime.Native include directory\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# make var global\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "targets/CMSIS-OS/common/CMakeLists.txt" : {
      "ObjectId" : "b0df1bf25fe177fdcafc21377577703a829ae4cb",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append target CMSIS-OS common source files \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if SWO opting add source file\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make var global\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "targets/CMSIS-OS/common/Include/CMakeLists.txt" : {
      "ObjectId" : "3be552a42a03e1867ab53d4980b5a8ec7997d148",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append include directory for target CMSIS, need this to be the binary dir because the header is a config file\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/CMSIS-OS/nanoBooter/CMakeLists.txt" : {
      "ObjectId" : "0753c7f36d8b01c3d6e574ccb6192f3f086ba939",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append target CMSIS-OS nanoBooter source files \n\n# list(APPEND TARGET_CMSIS_NANOBOOTER_SOURCES \"${CMAKE_CURRENT_SOURCE_DIR}/WireProtocol_ReceiverThread.c\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PAL source files \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make var global\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# appendtarget CMSIS-OS nanoBooter include directory\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# make var global\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "targets/CMSIS-OS/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "4bbd64326dc195747aebf247ded8f185b5f6dd9c",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append target CMSIS-OS nanoCLR source files \n\n# list(APPEND TARGET_CMSIS_NANOCLR_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/nanoCLR_dat.s)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# append target CMSIS-OS nanoCLR include directory\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# make var global\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "targets/FreeRTOS_ESP32/ESP32_WROOM_32/CMakeLists.txt" : {
      "ObjectId" : "f2e135823ede17eb508c68a5850f315d8e816cbb",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# packages for nanoFramework libraries\n\n# mandatory \n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################\n\n# optional\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# nF feature: debugger\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# nF feature: Networking Stack, LWIP included in IDF libs\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# RTC (real time clock) (default is OFF so RTC is NOT included)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#######################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# lwip must be before IDF\n",
        "Line" : 52,
        "CharPositionInLine" : 26
      },
      "8" : {
        "Text" : "# Build the networking components as a separate library\n\n# This is done this way to stop \"Createprocess: file no found\" errors in linker when object input file is greater than 32k\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################\n\n# nanoCLR executable\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# executables for project, project sources\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# sources for nanoFramework libraries\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# sources for nanoFramework Network sockets & LWIP\n",
        "Line" : 88,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#    \"${NF_Networking_SOURCES}\"\n\n#    \"${TARGET_ESP32_NETWORK_SOURCES}\"  \n\n#    \"${TARGET_LWIP_SOURCES}\"\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# # sources for nanoFramework APIs\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Add link flags\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#message( \"project libs:${PROJECT_LINK_LIBS} \" )\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add options into LINK_FLAGS in same position as IDF link\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Cxx Library needs an undefine\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Cxx Library needs an undefine\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#message( \"wireprotol :${WireProtocol_INCLUDE_DIRS}\")\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# include common directories\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# include directories for nanoCLR\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# directories for nanoFramework libraries\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# includes for nanoFramework APIs\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Set Includes & compile definition for Network library\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Inhibit warnings so we can compile 3rd party code (Lwip)\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# set platform for NanoClr\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# build types that have debugging capabilities AND are NOT RTM have to have the define 'NANOCLR_ENABLE_SOURCELEVELDEBUGGING'\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set compiler definition for using Application Domains feature\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# set compiler definition for implementing (or not) CRC32 in Wire Protocol\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# set compiler definition regarding inclusion of trace messages and checks on CLR\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# set compiler definition regarding CLR IL inlining\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# set extra linker flags for DEBUG\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# set extra linker flags for RELEASE\n\n#set_property(TARGET ${NANOCLR_PROJECT_NAME}.elf APPEND_STRING PROPERTY LINK_FLAGS_RELEASE \" -flto \")\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# add linker flags set with traditional CMAKE_EXE_LINKER_FLAGS\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# add linker flags to generate map file\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Create bin file from elf\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# # Create partition table\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# list partition table\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#message(\"CMAKE_CXX_FLAGS:${CMAKE_CXX_FLAGS}\" )\n\n#message(\"CMAKE_EXE_LINKER_FLAGS:${CMAKE_EXE_LINKER_FLAGS}\" )\n\n#message(\"CMAKE_EXE_LINKER_FLAGS_DEBUG:${CMAKE_EXE_LINKER_FLAGS_DEBUG}\" )\n\n#message(\"CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT:${CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT}\" )\n\n#message(\"CMAKE_CXX_LINK_EXECUTABLE:${CMAKE_CXX_LINK_EXECUTABLE}\" )\n\n#message(\"CMAKE_C_LINK_EXECUTABLE:${CMAKE_C_LINK_EXECUTABLE}\" )\n\n#message(\"FLAGS:${FLAGS}\" )\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "targets/FreeRTOS_ESP32/ESP32_WROOM_32/IDF/CMakeLists.txt" : {
      "ObjectId" : "c87ed22204115cf8a715da741f59da39557d7f1a",
      "LastModified" : "2019-04-18T08:07:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#append ESP32 IDF include paths\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#sdkconfig reference\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# library paths for Example project\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find_library(   LIB_APPTRACE_PATH\n\n# \t\t\t\tNAMES libapp_trace.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/app_trace\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_APPTRACE_PATH})\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# find_library(   LIB_APPUPDATE_PATH\n\n# \t\t\t\tNAMES libapp_update.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/app_update\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_APPUPDATE_PATH})\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# find_library(   LIB_AWS_IOT_PATH\n\n# \t\t\t\tNAMES libaws_iot.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/aws_iot\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_AWS_IOT_PATH})\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# find_library(   LIB_BOOTLOADER_SUPPORT_PATH\n\n# \t\t\t\tNAMES libbootloader_support.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/bootloader_support\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_BOOTLOADER_SUPPORT_PATH})\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# find_library(   LIB_BT_PATH\n\n# \t\t\t\tNAMES libbt.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/bt\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_BT_PATH})\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# find_library(   LIB_COAP_PATH\n\n# \t\t\t\tNAMES libcoap.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/coap\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_COAP_PATH})\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# find_library(   LIB_CONSOLE_PATH\n\n# \t\t\t\tNAMES libconsole.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/console\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_CONSOLE_PATH})\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# find_library(   LIB_CXX_PATH\n\n# \t\t\t\tNAMES libcxx.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/cxx\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_CXX_PATH})\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# find_library(   LIB_DRIVER_PATH\n\n# \t\t\t\tNAMES libdriver.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/driver\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_DRIVER_PATH})\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# find_library(   LIB_ESP32_PATH\n\n# \t\t\t\tNAMES libesp32.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/esp32\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_ESP32_PATH})\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# find_library(   LIB_ETHERNET_PATH\n\n# \t\t\t\tNAMES libethernet.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/ethernet\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_ETHERNET_PATH})\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# find_library(   LIB_EXPAT_PATH\n\n# \t\t\t\tNAMES libexpat.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/expat\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_EXPAT_PATH})\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find_library(   LIB_FATFS_PATH\n\n# \t\t\t\tNAMES libfatfs.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/fatfs\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_FATFS_PATH})\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# find_library(   LIB_FREERTOS_PATH\n\n# \t\t\t\tNAMES libfreertos.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/freertos\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_FREERTOS_PATH})\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# find_library(   LIB_HEAP_PATH\n\n# \t\t\t\tNAMES libheap.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/heap\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_HEAP_PATH})\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# find_library(   LIB_JSMN_PATH\n\n# \t\t\t\tNAMES libjsmn.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/jsmn\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_JSMN_PATH})\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# find_library(   LIB_JSON_PATH\n\n# \t\t\t\tNAMES libjson.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/json\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_JSON_PATH})\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# find_library(   LIB_SODIUM_PATH\n\n# \t\t\t\tNAMES liblibsodium.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/libsodium\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_SODIUM_PATH})\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# find_library(   LIB_LOG_PATH\n\n# \t\t\t\tNAMES liblog.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/log\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_LOG_PATH})\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# find_library(   LIB_LWIP_PATH\n\n# \t\t\t\tNAMES liblwip.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/lwip\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_LWIP_PATH})\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# find_library(   LIB_MBEDTLS_PATH\n\n# \t\t\t\tNAMES libmbedtls.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/mbedtls\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_MBEDTLS_PATH})\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# find_library(   LIB_MDNS_PATH\n\n# \t\t\t\tNAMES libmdns.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/mdns\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_MDNS_PATH})\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# find_library(   LIB_MICROECC_PATH\n\n# \t\t\t\tNAMES libmicro-ecc.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/micro-ecc\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_MICROECC_PATH})\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# find_library(   LIB_NEWLIB_PATH\n\n# \t\t\t\tNAMES libnewlib.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/newlib\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_NEWLIB_PATH})\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# find_library(   LIB_NGHTTP_PATH\n\n# \t\t\t\tNAMES libnghttp.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/nghttp\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_NGHTTP_PATH})\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# find_library(   LIB_NVSFLASH_PATH\n\n# \t\t\t\tNAMES libnvs_flash.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/nvs_flash\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_NVSFLASH_PATH})\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# find_library(   LIB_OPENSSL_PATH\n\n# \t\t\t\tNAMES libopenssl.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/openssl\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_OPENSSL_PATH})\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# find_library(   LIB_SDMMC_PATH\n\n# \t\t\t\tNAMES libsdmmc.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/sdmmc\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_SDMMC_PATH})\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# find_library(   LIB_SOC_PATH\n\n# \t\t\t\tNAMES libsoc.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/soc\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_SOC_PATH})\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# find_library(   LIB_SPIFLASH_PATH\n\n# \t\t\t\tNAMES libspi_flash.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/spi_flash\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_SPIFLASH_PATH})\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# find_library(   LIB_TCPIPADAPTER_PATH\n\n# \t\t\t\tNAMES libtcpip_adapter.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/tcpip_adapter\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_TCPIPADAPTER_PATH})\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# find_library(   LIB_ULP_PATH\n\n# \t\t\t\tNAMES libulp.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/ulp\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_ULP_PATH})\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# find_library(   LIB_VFS_PATH\n\n# \t\t\t\tNAMES libvfs.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/vfs\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_VFS_PATH})\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# find_library(   LIB_WEAR_PATH\n\n# \t\t\t\tNAMES libwear_levelling.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/wear_levelling\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_WEAR_PATH})\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# find_library(   LIB_WPA_PATH\n\n# \t\t\t\tNAMES libwpa_supplicant.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/wpa_supplicant\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_WPA_PATH})\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# find_library(   LIB_PTHREAD_PATH\n\n# \t\t\t\tNAMES libpthread.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/pthread\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_PTHREAD_PATH})\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# find_library(   LIB_DEBUG_PATH\n\n# \t\t\t\tNAMES libxtensa-debug-module.a\n\n# \t\t\t\tHINTS \"${IDF_NANOFRAMEWORK_BASE}/xtensa-debug-module\" \n\n# \t\t\t\tNO_CMAKE_FIND_ROOT_PATH )\n\n# list(APPEND PROJECT_LINK_LIBS ${LIB_DEBUG_PATH})\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Path to pre compiled Libs\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#message( \"direct link path:${DIRECT_LINK_PATH}\")\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#list(APPEND DIRECT_LINK_LIBS \"${DIRECT_LINK_PATH}/libaws_iot.a\")\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Lwip lib is built separately \n\n#list(APPEND DIRECT_LINK_LIBS ${DIRECT_LINK_PATH}/liblwip.a)\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#set(DIRECT_LINK_LIBS ${DIRECT_LINK_LIBS} CACHE INTERNAL \"make global\")\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46
    },
    "targets/FreeRTOS_ESP32/ESP32_WROOM_32/Lwip/CMakeLists.txt" : {
      "ObjectId" : "9796f116bfc8ad26b747bb6f15c93a5d179a86fe",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We build Lwip library from sources so as to include patches required for nanoFramework\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add current source path for lwipopts.h and sdkconfig.h\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Lwip Library\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#list( APPEND CMAKE_C_FLAGS \" -Wno-address -Wno-unused-variable -Wno-unused-but-set-variable \" )\n\n#add_library( lwip STATIC ${TARGET_LWIP_SOURCES}  )\n\n#target_include_directories( lwip PUBLIC  ${TARGET_ESP32_IDF_INCLUDES} )\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# make var global\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "targets/FreeRTOS_ESP32/ESP32_WROOM_32/Network/CMakeLists.txt" : {
      "ObjectId" : "35fff0f5285ae1937d72342f9447f2835e48f84a",
      "LastModified" : "2019-02-05T14:52:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append networking files, if enabled\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make var global\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "targets/FreeRTOS_ESP32/ESP32_WROOM_32/common/CMakeLists.txt" : {
      "ObjectId" : "e22f755f48e29623679b6602343325a37271acb4",
      "LastModified" : "2019-04-17T11:22:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# append target ESP32 source files \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# list(APPEND TARGET_ESP32_COMMON_SOURCES \"${CMAKE_CURRENT_SOURCE_DIR}/Device_BlockStorage-2mb.c\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# append nanoHAL\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# append networking files, if enabled\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# make var global\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "targets/FreeRTOS_ESP32/ESP32_WROOM_32/nanoCLR/CMakeLists.txt" : {
      "ObjectId" : "a2ce538b6f81229ef1df086ddfc669f7cf35a06a",
      "LastModified" : "2019-04-18T08:07:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 The nanoFramework project contributors\n\n# See LICENSE file in the project root for full license information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add header file with common target definitions\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# append target Esp32 nanoCLR source files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# append target HAL source files\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Either NVS or SPIFSS storage for config, NVS is unable to store large Certificate bundles(over 1864 bytes)\n\n#list(APPEND TARGET_ESP32_NANOCLR_SOURCES \"${CMAKE_CURRENT_SOURCE_DIR}/targetHAL_ConfigStorageNVS.cpp\")\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# alternative to using NVS or Spiffs but requires minimum of 528K partition size\n\n#list(APPEND TARGET_ESP32_NANOCLR_SOURCES \"${CMAKE_CURRENT_SOURCE_DIR}/targetHAL_ConfigStorageFATFS.cpp\")\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append target PAL source files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# append other CLR core files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# append nanoCRT\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append nanoHAL\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# append files from Runtime.Native\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# append nanoHAL\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add native assemblies\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# configure code file with Interop Assemblies table and...\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ... now add Interop Assemblies table to Esp32 nanoCLR sources list\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# make var global\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# append target nanoCLR include directory\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# append PAL include directory\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# append Runtime.Native include directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# make var global\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    }
  },
  "FileTypes" : {
    "CMAKE" : 88
  },
  "ElapsedTime" : 1857
}