{
  "Repository" : "18937276",
  "Revision" : "HEAD",
  "ObjectId" : "6858dd93abdd9c0c8b7d2bea667d9d3f69544e48",
  "CommitTime" : "2019-04-11T23:08:55Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d50693a4433877c78cf12b95634ea9b7ea898509",
      "LastModified" : "2017-06-19T21:04:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# http://www.cmake.org/cmake/help/v3.0/policy/CMP0042.html\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Options\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We use a cached string variable instead of the standard (boolean) OPTION\n\n# command so that we can default to auto-detecting optional depencies, while\n\n# still providing a mechanism to force/disable these optional dependencies, as\n\n# prescribed in http://www.gentoo.org/proj/en/qa/automagic.xml\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Proprietary Linux games often ship their own libraries (zlib, libstdc++,\n\n# etc.) in order to ship a single set of binaries across multiple\n\n# distributions.  Given that apitrace wrapper modules will be loaded into those\n\n# processes, they must not depend on any shared object that could also be\n\n# provided by such applications.  See also\n\n# http://lists.freedesktop.org/archives/mesa-dev/2015-March/079121.html\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# XXX: Should probably throw a run-time too.\n",
        "Line" : 68,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "##############################################################################\n\n# Find dependencies\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check for compiler TLS support.  We don't use compiler TLS support on Windows\n\n# because, even if the compiler supports it, Windows XP does not support TLS on\n\n# DLLs.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# http://msdn.microsoft.com/en-us/library/aa383745.aspx\n\n# Windows 8\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Print a clear message when X11 is not found\n",
        "Line" : 161,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Use Waffle for eglretrace\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "##############################################################################\n\n# Set global build options\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# No RTTI required\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Disable C++ exceptions\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Enable math constants defines\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# No min/max macros\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# XXX: it's safer to use ssize_t everywhere instead of disabling warning\n",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# signed/unsigned mismatch\n\n# not a valid value for switch of enum\n\n# unreferenced formal parameter\n\n# conditional expression is constant\n\n# conversion from 'type1' to 'type2', possible loss of data\n\n# conversion from 'type1' to 'type2', possible loss of data\n\n# unreferenced local function has been removed\n\n# assignment operator could not be generated\n\n# forcing value to bool 'true' or 'false' (performance warning)\n",
        "Line" : 226,
        "CharPositionInLine" : 33
      },
      "18" : {
        "Text" : "# Use static runtime\n\n# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# if (${flag_var} MATCHES \"/MD\")\n",
        "Line" : 242,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# string (REGEX REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n",
        "Line" : 243,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# endif ()\n",
        "Line" : 244,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Enable and require C++11\n\n#\n\n# We must use `-std=gnu++11` instead `-std=c++11` as the latter defines\n\n# __STRICT_ANSI__ which prevents _isnan from being declared with MinGW.\n\n#\n\n# See also:\n\n# - https://gcc.gnu.org/projects/cxx0x.html\n\n# - http://clang.llvm.org/cxx_status.html\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# We require at least GCC 4.9 for decent C++11 support\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# XXX: it's safer to use ssize_t everywhere instead of disabling warning\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# comparison between signed and unsigned integer expressions\n",
        "Line" : 271,
        "CharPositionInLine" : 43
      },
      "27" : {
        "Text" : "# Disable strict aliasing assumptions.  We generate a lot of C++ code, and\n\n# it's not always easy to guarantee or spot when strict aliasing\n\n# assumptions are violated.  Above all, the benefit is not worth the risk.\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# No RTTI required\n\n# XXX: there's a dynamic_cast in Android\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Disable C++ exceptions\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Enable Address Sanitizer\n",
        "Line" : 287,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Enable SSE2 intrinsics on x86\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# And tell GCC to assume 4 bytes alignment, many Linux/Windows\n\n# applications only guarantee that, but not on systems where ABI\n\n# clearly states otherwise.\n\n#\n\n# See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38496\n",
        "Line" : 297,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Be nice to Eclipse\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Avoid depending on MinGW runtime DLLs\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# disable frame pointer omission\n",
        "Line" : 328,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Enable Data Execution Prevention and Address Space Layout Randomization\n",
        "Line" : 337,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Use more than 2GB virtual memory address space for 32-bits processes\n\n# where available (3GB on 32-bits Windows with 4GT, 4GB on 64-bits Windows)\n",
        "Line" : 344,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# For RTLD_DEFAULT and RTLD_NEXT\n",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Force certain components to always be built as release\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# TODO: Needs special care due since runtime must match\n",
        "Line" : 369,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Put all executables into the same top level build directory, regardless of\n\n# which subdirectory they are declared\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Single configuration\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Multiple configuration\n",
        "Line" : 387,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "##############################################################################\n\n# Installation directories\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Debian multiarch support\n",
        "Line" : 396,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# On Windows/MacOSX, applications are usually installed on a directory of\n\n# their own\n",
        "Line" : 405,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Allow customization of the doc installation dir (Slackware uses different\n\n# location)\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "##############################################################################\n\n# Bundled dependencies\n\n#\n\n# We prefer to bundle and statically link against many dependencies:\n\n# - on Windows to make it easy to deploy the wrappers DLLs\n\n# - on unices to prevent symbol collisions when tracing applications that link\n\n# against other versions of these libraries\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# zlib 1.2.4-1.2.5 made it impossible to read the last block of incomplete\n\n# gzip traces (e.g., apitrace-tests/traces/zlib-no-eof.trace).\n",
        "Line" : 452,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# FindPNG.cmake will search ZLIB internally (without requiring any particular\n\n# version), adding its include dirs and libraries, and overwriting ZLIB_FOUND.\n\n# So if the system's ZLIB was did not meet the our requirements, then there's\n\n# no safe way to use the system's PNG library.\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# We use bundled headers for all Khronos APIs, to guarantee support for both\n\n# OpenGL and OpenGL ES at build time, because the OpenGL and OpenGL ES 1 APIs\n\n# are so intertwined that conditional compilation extremely difficult. This\n\n# also avoids missing/inconsistent declarations in system headers.\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# We use non-standard C++ flags, so we can't just use GTest's CMakeLists.txt\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Convenience macro for adding unit tests\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "##############################################################################\n\n# Common libraries / utilities\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "##############################################################################\n\n# CLI\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "##############################################################################\n\n# GUI\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "##############################################################################\n\n# Packaging\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Use current date in YYYYMMDD format as patch number \n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# cpack mistakenly detects Mingw-w64 as win32\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# See http://www.vtk.org/Wiki/CMake:CPackPackageGenerators\n",
        "Line" : 600,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 61
    },
    "cli/CMakeLists.txt" : {
      "ObjectId" : "a018920261cce4c295f3099e1fcbd090e8861e21",
      "LastModified" : "2017-04-11T12:53:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Expose the binary/install directories to source\n\n#\n\n# TODO: Use the same directory layout, for both build and install directories,\n\n# so that binaries can find each other using just relative paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On debug builds tell where the source is so that scripts can be found\n\n# http://www.cmake.org/cmake/help/v3.0/policy/CMP0043.html\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/ConvenienceLibrary.cmake" : {
      "ObjectId" : "eb6443e1c79a8d5b02d0367004b1e15633385526",
      "LastModified" : "2014-07-17T12:33:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function for convenience libraries, ie., libraries which can be statically\n\n# linked into shared libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ensure it can be statically linked onto shared libraries\n",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/FindDirectX.cmake" : {
      "ObjectId" : "f4534503bc61f7a60a95c4c24c77d615bbff4191",
      "LastModified" : "2017-03-22T15:04:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find DirectX include directories and libraries\n\n#\n\n# Once done this will define:\n\n#\n\n#  DirectX_XYZ_INCLUDE_FOUND - system has the include for the XYZ API\n\n#  DirectX_XYZ_INCLUDE_DIR   - include directory for the XYZ API\n\n#\n\n# Where XYZ can be any of:\n\n#\n\n#  DDRAW\n\n#  D3D\n\n#  D3D8\n\n#  D3D9\n\n#  D3D10\n\n#  D3D10_1\n\n#  D3D11\n\n#  D3D11_1\n\n#  D3D11_2\n\n#  D2D1\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Can't use \"$ENV{ProgramFiles(x86)}\" to avoid violating CMP0053.  See\n\n# http://public.kitware.com/pipermail/cmake-developers/2014-October/023190.html\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# With VS 2011 and Windows 8 SDK, the DirectX SDK is included as part of\n\n# the Windows SDK.\n\n#\n\n# See also:\n\n# - http://msdn.microsoft.com/en-us/library/windows/desktop/ee663275.aspx\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Find a header in the DirectX SDK\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Find a header in the Windows SDK\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Windows SDK\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 6
    },
    "cmake/FindSNAPPY.cmake" : {
      "ObjectId" : "f50e154c3bc3eb7a5596721d58fa6570cdb237d5",
      "LastModified" : "2015-03-13T12:25:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find SNAPPY - A fast compressor/decompressor\n\n#\n\n# This module defines\n\n#  SNAPPY_FOUND - whether the snappy library was found\n\n#  SNAPPY_LIBRARIES - the snappy library\n\n#  SNAPPY_INCLUDE_DIR - the include path of the snappy library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Findprocps.cmake" : {
      "ObjectId" : "e614d7cd269e953daa1b5b64eb0b75cb6998e498",
      "LastModified" : "2015-03-13T12:25:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find procps directories and libraries\n\n#\n\n# Once done this will define:\n\n#\n\n#  PROCPS_FOUND\n\n#  PROCPS_INCLUDE_DIR\n\n#  PROCPS_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/InstallPDB.cmake" : {
      "ObjectId" : "d7ed761827ed47810a896ede06cfbffa75a2e31c",
      "LastModified" : "2015-03-13T12:25:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The documentation for the INSTALL command doesn't mention generator\n\n# expressions, but they actually work quite well, both when building\n\n# MSBuild and Ninja.\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "dispatch/CMakeLists.txt" : {
      "ObjectId" : "ddb38153261b5580263382d21387e05e82269625",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# Dispatch\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Wrap glproc.{hpp,cpp} as a target to prevent the command from being executed\n\n# multiple times simultanously, when the targets that depend on it are built in\n\n# parallel.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gui/CMakeLists.txt" : {
      "ObjectId" : "eb2a7bcb90ebe1086604585c27661b45a4389160",
      "LastModified" : "2017-09-26T01:22:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake will throw a cryptic message if an user unwittingly invokes it from\n\n# this directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Silence `Note: No relevant classes found. No output generated.`\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_app_icon(qapitrace_SRCS ../icons/hi*-qapitrace.png)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid qt5_use_modules. See also:\n\n# - https://bugreports.qt.io/browse/QTBUG-39457\n\n# - http://doc.qt.io/qt-5/cmake-manual.html\n\n# - http://www.kdab.com/using-cmake-with-qt-5/\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use Windows subsystem (i.e., no console).\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# When the Windows subsystem is chosen by default MSVC expects WinMain()\n\n# entry point, but we rather use plain old main() everywhere.\n",
        "Line" : 120,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "########### install files ###############\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#install (FILES qapitrace.desktop DESTINATION ${XDG_APPS_INSTALL_DIR})\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Deployt Qt dependencies\n\n#\n\n# See:\n\n# - http://doc.qt.io/qt-5/windows-deployment.html\n\n#\n\n# XXX: windeployqt can fail if there's weird stuff in the Path env var, so we\n\n# invoke it with a sanitized Path, via `cmake -E env` that was introduced in\n\n# CMake 3.1.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# http://stackoverflow.com/a/24676432\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# It's safer to use `\\` separateors in the Path, but we need to escape them\n",
        "Line" : 148,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# windeployqt needs VCINSTALLDIR to copy MSVC Runtime files, but it's\n\n# usually not define with MSBuild builds.\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "helpers/CMakeLists.txt" : {
      "ObjectId" : "b4e9648153ac6bde57a93233340a8b0698614c3a",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# API helpers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "inject/CMakeLists.txt" : {
      "ObjectId" : "e98b077d28510595309b09ae50462dffcb2f591a",
      "LastModified" : "2016-09-21T10:46:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "be8a4454ccd6eb51579a77cb211fd3395411ffce",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/guids/CMakeLists.txt" : {
      "ObjectId" : "ce0f86da6128cd80e5f1f377cec31d1aef6d45dd",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/highlight/CMakeLists.txt" : {
      "ObjectId" : "1f3c59620de484b254c2ea86f8f317099735d116",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/image/CMakeLists.txt" : {
      "ObjectId" : "1cc3c4ce1d9c4369e122b603c391386eff340d8b",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/os/CMakeLists.txt" : {
      "ObjectId" : "222411e0d274692190fc7780891bdb3301998802",
      "LastModified" : "2016-08-09T15:58:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/trace/CMakeLists.txt" : {
      "ObjectId" : "d72e070922c170b836c72aa3f22edc1ae4cfdf8b",
      "LastModified" : "2017-09-26T01:22:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "retrace/CMakeLists.txt" : {
      "ObjectId" : "fa4c48539d74533f08a5c7036ce5bb7ad9143f35",
      "LastModified" : "2017-09-26T01:22:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# API retracers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TODO(majanes) seems wrong to link this here\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# CGS*\n",
        "Line" : 135,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : "#\"-framework OpenGL\" # CGL*\n",
        "Line" : 136,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# Bundle Info.plist\n",
        "Line" : 139,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# gdb doesn't like when pthreads is loaded through dlopen (which happens\n\n# when dlopen'ing libGL), so link pthreads to avoid this issue.  See also\n\n# http://stackoverflow.com/questions/2702628/gdb-cannot-find-new-threads-generic-error\n",
        "Line" : 149,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# FIXME According to android.toolchain.cmake decumentation the\n\n# android libs should be putted to\n\n# ${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME} but\n\n# android.toolchain.cmake sees LIBRARY_OUTPUT_PATH_ROOT as\n\n# CMAKE_SOURCE_DIR and this CMakeLists.txt file sees it as\n\n# ANDROID_BUILD_DIR ;-( so, I must use\n\n# ${CMAKE_SOURCE_DIR}/libs/${ANDROID_NDK_ABI_NAME} insted of\n\n# ${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME} ...\n",
        "Line" : 224,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 7
    },
    "retrace/daemon/CMakeLists.txt" : {
      "ObjectId" : "c91539d7e9170521331b5ae56c718ee94147f47b",
      "LastModified" : "2019-04-04T04:22:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018 Intel Corporation\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "retrace/daemon/CustomProtoBuf.cmake" : {
      "ObjectId" : "27e45267ff9761817b65029c9c6a73f45ce9e4e3",
      "LastModified" : "2018-02-14T00:42:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "retrace/daemon/Lint.cmake" : {
      "ObjectId" : "6df64d521ea782def27e34ae4b662ed88c68d4c5",
      "LastModified" : "2018-02-14T00:42:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build a list of full paths to files in the list\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# make a unique target name for the current directory, by replacing\n\n# illegal characters in the path\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# create a target to run lint on source files\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "retrace/daemon/amd_gpa/CMakeLists.txt" : {
      "ObjectId" : "ab9046c3ec2d9d7753857800d8606a0bb1a3bcbd",
      "LastModified" : "2018-08-15T16:20:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "retrace/daemon/bargraph/CMakeLists.txt" : {
      "ObjectId" : "230db2222eade78602938cba2d0828e5e8d75eea",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 Intel Corporation\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "retrace/daemon/bargraph/test/CMakeLists.txt" : {
      "ObjectId" : "bcecc0c16f6e5efa00d8cfc792985090041a2470",
      "LastModified" : "2018-02-14T00:42:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "retrace/daemon/bargraph/ui/CMakeLists.txt" : {
      "ObjectId" : "bea833e87dd08fda94a9c90d9f6dabc8cd2eb50d",
      "LastModified" : "2018-02-14T00:42:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 Intel Corporation\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Instruct CMake to run moc automatically when needed.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "retrace/daemon/context/CMakeLists.txt" : {
      "ObjectId" : "70c6793e0bc816ebcbd28db56d7463885e85c589",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "retrace/daemon/framestat/CMakeLists.txt" : {
      "ObjectId" : "26a0695f67c5864d76cf8ecb3b96e4072e2de710",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2018 Intel Corporation\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "retrace/daemon/gldispatch/CMakeLists.txt" : {
      "ObjectId" : "411fe73f8fc58946d2ae5ddb462b3f3a10294831",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 Intel Corporation\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "retrace/daemon/server/CMakeLists.txt" : {
      "ObjectId" : "d606163a9cbb5d4f99c4d166cac55a53e61dadb6",
      "LastModified" : "2018-08-15T16:20:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "retrace/daemon/test/CMakeLists.txt" : {
      "ObjectId" : "77f67ccbfc2a80377eecdeac72540d98c5ab60e1",
      "LastModified" : "2018-08-15T16:20:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "retrace/daemon/ui/CMakeLists.txt" : {
      "ObjectId" : "5a545c65fe70c7da8bb3f6b784d1c28f7c2da287",
      "LastModified" : "2019-03-26T23:40:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Instruct CMake to run moc automatically when needed.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "11384a4454296d5c450a64ddcb2e725c6a3d7de2",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "specs/scripts/Makefile" : {
      "ObjectId" : "2332839003bb02b19d6f3f965148c09b89b202c7",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "thirdparty/brotli/CMakeLists.txt" : {
      "ObjectId" : "a087790ac18480aa7aa1697cab77bf586d561c8a",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# XXX\n",
        "Line" : 26,
        "CharPositionInLine" : 20
      },
      "1" : {
        "Text" : "# XXX\n",
        "Line" : 34,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 2
    },
    "thirdparty/crc32c/CMakeLists.txt" : {
      "ObjectId" : "c9fa4051cb53d6943bedffc1511117a8eb947a36",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/devcon/CMakeLists.txt" : {
      "ObjectId" : "290d7a2209f8ada78dcc12986781e9d4fd830a4f",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/directxtex/CMakeLists.txt" : {
      "ObjectId" : "d67b7eeee0dd51438cc7be2b8b47543cd2b2059b",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Several MinGW headers are lacking.  Use our own.\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "#inhibit warnings\n",
        "Line" : 26,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Force include this header with tweaks for mingw\n",
        "Line" : 29,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "#DirectXTex/DirectXTexD3D11.cpp\n\n#DirectXTex/DirectXTexDDS.cpp\n\n#DirectXTex/DirectXTexFlipRotate.cpp\n",
        "Line" : 52,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#DirectXTex/DirectXTexNormalMaps.cpp\n\n#DirectXTex/DirectXTexResize.cpp\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "thirdparty/dxerr/CMakeLists.txt" : {
      "ObjectId" : "95d286a760fe9e0a3df69b8e6bca0e2b270f1eaf",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/getopt/CMakeLists.txt" : {
      "ObjectId" : "224fc1ea508754dbf0d522c02f5fa1b58deb3a93",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/gtest/CMakeLists.txt" : {
      "ObjectId" : "621d0f0421543eba41e1d69f497814104bb9c6a7",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 210,
        "CharPositionInLine" : 43
      },
      "22" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 232,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "thirdparty/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "777b91ed4b8caa226ea55cfa61fe7ec433ffb452",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 83,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 126,
        "CharPositionInLine" : 32
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "thirdparty/khronos/Makefile" : {
      "ObjectId" : "2c04a6f3ce27655b88ddb77279d205897c63b799",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "thirdparty/libbacktrace/CMakeLists.txt" : {
      "ObjectId" : "ac0089f0fe77085de322931b761a97c24baeb97a",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    CMakeLists.txt -- libbacktrace CMake build script\n\n#    Contributed by Alexander Monakov, ISP RAS\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#     (1) Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n#\n\n#     (2) Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in\n\n#     the documentation and/or other materials provided with the\n\n#     distribution.\n\n#\n\n#     (3) The name of the author may not be used to\n\n#     endorse or promote products derived from this software without\n\n#     specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n\n# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n\n# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n\n# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.  */\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "thirdparty/libbacktrace/config.h.in.cmake" : {
      "ObjectId" : "876ea359c63977fade2315ab9ef33cf8ee8474e2",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#define BACKTRACE_ELF_SIZE @BACKTRACE_ELF_SIZE@\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cmakedefine HAVE_ATOMIC_FUNCTIONS 1\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#cmakedefine HAVE_DECL_STRNLEN 1\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#cmakedefine HAVE_DL_ITERATE_PHDR 1\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#cmakedefine HAVE_FCNTL 1\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#cmakedefine HAVE_GETEXECNAME 1\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#cmakedefine HAVE_GETIPINFO 1\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#cmakedefine HAVE_SYNC_FUNCTIONS 1\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#cmakedefine HAVE_LIBDWARF_DWARF_H 1\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "thirdparty/libpng/CMakeLists.txt" : {
      "ObjectId" : "227688c395270444300b9325be61b98ab64cf4b2",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/md5/CMakeLists.txt" : {
      "ObjectId" : "c5da18a7faddf20d62ce16131fe5d405af3ed4a6",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/mhook/CMakeLists.txt" : {
      "ObjectId" : "8545a5fffdef71dff0c42e7775598897b5cb753a",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/BUILD" : {
      "ObjectId" : "3c03bfacc3b0281bad17e423138f013510da0329",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel (http://bazel.io/) BUILD file for Protobuf.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n# Protobuf Runtime Library\n################################################################################",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Android builds do not need to link in a separate pthread library.",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# AUTOGEN(protobuf_lite_srcs)",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# AUTOGEN(protobuf_srcs)",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# AUTOGEN(well_known_protos)",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "################################################################################\n# Protocol Buffers Compiler\n################################################################################",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# AUTOGEN(protoc_lib_srcs)",
        "Line" : 233,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "################################################################################\n# Tests\n################################################################################",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# AUTOGEN(lite_test_protos)",
        "Line" : 347,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# AUTOGEN(test_protos)",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# AUTOGEN(common_test_srcs)",
        "Line" : 414,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# AUTOGEN(test_plugin_srcs)",
        "Line" : 425,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# AUTOGEN(test_srcs)",
        "Line" : 440,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "################################################################################\n# Java support\n################################################################################",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################################\n# Python support\n################################################################################",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Copy the builtin proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly since they are all part of the same Python\n# package.",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python in srcs.",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Copy the test proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly by the tests since they are all part of the\n# same Python package.",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python_test in srcs.",
        "Line" : 682,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "thirdparty/protobuf/Makefile.am" : {
      "ObjectId" : "7e47a1193e1905854919ce39095d86e3873fbb69",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always include gmock in distributions.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build gmock before we build protobuf tests.  We don't add gmock to SUBDIRS\n\n# because then \"make check\" would also build and run all of gmock's own tests,\n\n# which takes a lot of time and is generally not useful to us.  Also, we don't\n\n# want \"make install\" to recurse into gmock since we don't want to overwrite\n\n# the installed version of gmock if there is one.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We would like to clean gmock when \"make clean\" is invoked.  But we have to\n\n# be careful because clean-local is also invoked during \"make distclean\", but\n\n# \"make distclean\" already recurses into gmock because it's listed among the\n\n# DIST_SUBDIRS.  distclean will delete gmock/Makefile, so if we then try to\n\n# cd to the directory again and \"make clean\" it will fail.  So, check that the\n\n# Makefile exists before recursing.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Deletes all the files generated by autogen.sh.\n",
        "Line" : 873,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "thirdparty/protobuf/benchmarks/Makefile.am" : {
      "ObjectId" : "d98eae5eadbbeb8c169fe109b132c59fdac468f6",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Explicit deps because BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n\n# See: https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "thirdparty/protobuf/cmake/CMakeLists.txt" : {
      "ObjectId" : "74a6f66672d4182f2a4ff02b608f1902a94e7ce1",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake policies\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Project\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Options\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# User options\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Path to main configure script\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Parse configure script\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Description\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Version\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Contact\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Parse version tweaks\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Package version\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# FindZLIB module define ZLIB_INCLUDE_DIRS variable\n\n# Set ZLIB_INCLUDE_DIRECTORIES for compatible\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Using imported target if exists\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Explicitly set these to empty (override NOT_FOUND) so cmake doesn't\n\n# complain when we use them later.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# In case we are building static libraries, link also the runtime library statically\n\n# so that MSVCR*.DLL is not required at runtime.\n\n# https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx\n\n# This is achieved by replacing msvc option /MD with /MT and /MDd with /MTd\n\n# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Build with multiple processes\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Allow big object\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Add the \"lib\" prefix for generated .lib outputs.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# When building with \"make\", \"lib\" prefix will be added automatically by\n\n# the build tool.\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# do not install protobuf libraries: FrameRetrace links against them statically\n\n# include(install.cmake)\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "thirdparty/protobuf/cmake/examples.cmake" : {
      "ObjectId" : "e5cad63f67650db353a1f3a0e8b349e8cf0db32f",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal utility function: Create a custom target representing a build of examples with custom options.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Skip\n",
        "Line" : 20,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Add examples as an external project.\n\n# sub_directory cannot be used because the find_package(protobuf) call would cause failures with redefined targets.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Build using the legacy compatibility module.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#Build using the installed library.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Build using the installed library in legacy compatibility mode.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "thirdparty/protobuf/cmake/install.cmake" : {
      "ObjectId" : "73e31984c53947714a895fb17503d66f3c19eba0",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal function for parsing auto tools scripts\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install well-known type proto files\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install configuration\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allows the build directory to be used as a find directory.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "thirdparty/protobuf/cmake/libprotobuf-lite.cmake" : {
      "ObjectId" : "036b051707db291fd2978ab9d9f5893393669de7",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/cmake/libprotobuf.cmake" : {
      "ObjectId" : "26e1f356176af93357c6576e3d5d8c9ce08ee8da",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/cmake/libprotoc.cmake" : {
      "ObjectId" : "71c3494ccb7c262998e376e1b62e07479ed31362",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/cmake/protobuf-options.cmake" : {
      "ObjectId" : "47fb15825752e544fda411db01c8a4391ed4dd38",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verbose output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindProtobuf module compatibel\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "thirdparty/protobuf/cmake/protoc.cmake" : {
      "ObjectId" : "4f07c389c976777e7685beb8e321e7ffcb98fcff",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/cmake/tests.cmake" : {
      "ObjectId" : "30214e7d0f5bedb5e50ced2eeabf9b3338d12e61",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/conformance/Makefile.am" : {
      "ObjectId" : "5985e1d92baf11a42ea598408d36594d9c47ce3f",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# lite/com/google/protobuf/Any.java                            \\\n  # lite/com/google/protobuf/AnyOrBuilder.java                   \\\n  # lite/com/google/protobuf/AnyProto.java                       \\\n  # lite/com/google/protobuf/BoolValue.java                      \\\n  # lite/com/google/protobuf/BoolValueOrBuilder.java             \\\n  # lite/com/google/protobuf/BytesValue.java                     \\\n  # lite/com/google/protobuf/BytesValueOrBuilder.java            \\\n  # lite/com/google/protobuf/conformance/Conformance.java        \\\n  # lite/com/google/protobuf/DoubleValue.java                    \\\n  # lite/com/google/protobuf/DoubleValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Duration.java                       \\\n  # lite/com/google/protobuf/DurationOrBuilder.java              \\\n  # lite/com/google/protobuf/DurationProto.java                  \\\n  # lite/com/google/protobuf/FieldMask.java                      \\\n  # lite/com/google/protobuf/FieldMaskOrBuilder.java             \\\n  # lite/com/google/protobuf/FieldMaskProto.java                 \\\n  # lite/com/google/protobuf/FloatValue.java                     \\\n  # lite/com/google/protobuf/FloatValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int32Value.java                     \\\n  # lite/com/google/protobuf/Int32ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int64Value.java                     \\\n  # lite/com/google/protobuf/Int64ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/ListValue.java                      \\\n  # lite/com/google/protobuf/ListValueOrBuilder.java             \\\n  # lite/com/google/protobuf/NullValue.java                      \\\n  # lite/com/google/protobuf/StringValue.java                    \\\n  # lite/com/google/protobuf/StringValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Struct.java                         \\\n  # lite/com/google/protobuf/StructOrBuilder.java                \\\n  # lite/com/google/protobuf/StructProto.java                    \\\n  # lite/com/google/protobuf/Timestamp.java                      \\\n  # lite/com/google/protobuf/TimestampOrBuilder.java             \\\n  # lite/com/google/protobuf/TimestampProto.java                 \\\n  # lite/com/google/protobuf/UInt32Value.java                    \\\n  # lite/com/google/protobuf/UInt32ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/UInt64Value.java                    \\\n  # lite/com/google/protobuf/UInt64ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Value.java                          \\\n  # lite/com/google/protobuf/ValueOrBuilder.java                 \\\n  # lite/com/google/protobuf/WrappersProto.java\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# All source files excepet C++/Objective-C ones should be explicitly listed\n\n# here because the autoconf tools don't include files of other languages\n\n# automatically.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Explicit deps beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On travis, the build fails without the isysroot because whatever system\n\n# headers are being found don't include generics support for\n\n# NSArray/NSDictionary, the only guess is their image at one time had an odd\n\n# setup for Xcode and old frameworks are being found.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_objc\" could fail if parallel enough.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Some implementations include pre-generated versions of well-known types.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## $(PROTOC) -I$(srcdir) -I$(top_srcdir) --java_out=lite:lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs)\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## @mkdir -p lite\n\n## oldpwd=`pwd` && ( cd $(srcdir) && $$oldpwd/../src/protoc$(EXEEXT) -I. -I$(top_srcdir)/src --java_out=lite:$$oldpwd/lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs) )\n",
        "Line" : 206,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Currently the conformance code is alongside the rest of the C#\n\n# source, as it's easier to maintain there. We assume we've already\n\n# built that, so we just need a script to run it.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Targets for actually running tests.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# These depend on library paths being properly set up.  The easiest way to\n\n# run them is to just use \"tox\" from the python dir.\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "thirdparty/protobuf/examples/CMakeLists.txt" : {
      "ObjectId" : "2cd2acc0134fc5419aacb79dd9c58f1997d71389",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find required protobuf package\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Code Generation\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Legacy Support\n",
        "Line" : 32,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "#Executable setup\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#Legacy mode\n",
        "Line" : 56,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 8
    },
    "thirdparty/protobuf/java/compatibility_tests/v2.5.0/deps/pom.xml" : {
      "ObjectId" : "7ceb96049d72b06a79b0756da0d22769068adf17",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/java/compatibility_tests/v2.5.0/more_protos/pom.xml" : {
      "ObjectId" : "ff0c4133f0d89cf066f9ccfbdc44a3ece26cad51",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/java/compatibility_tests/v2.5.0/pom.xml" : {
      "ObjectId" : "83a7563afd9f147ec67a38c1a5561d58a402292e",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/java/compatibility_tests/v2.5.0/protos/pom.xml" : {
      "ObjectId" : "24447bdc85617bb68ec131e13872b2efc40e431a",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/java/compatibility_tests/v2.5.0/tests/pom.xml" : {
      "ObjectId" : "f1ce46e7ab2d4e1a81fbbf00f6d87034558453d0",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/java/core/pom.xml" : {
      "ObjectId" : "8a83eb4e1591a9f3dabbf01a82a87fe8b5ffbe0e",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Include core protos in the bundle as resources ",
        "Line" : 37,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " Use Antrun plugin to generate sources with protoc ",
        "Line" : 59,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : " Generate core protos ",
        "Line" : 63,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : " Generate the test protos ",
        "Line" : 77,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : " Add the generated sources to the build ",
        "Line" : 93,
        "CharPositionInLine" : 54
      },
      "5" : {
        "Text" : " OSGI bundle configuration ",
        "Line" : 102,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 6
    },
    "thirdparty/protobuf/java/lite/pom.xml" : {
      "ObjectId" : "9862cd94c2803269ede3335d9e9588f54c42030c",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Use Antrun plugin to generate sources with protoc ",
        "Line" : 43,
        "CharPositionInLine" : 65
      },
      "1" : {
        "Text" : " Generate core protos ",
        "Line" : 47,
        "CharPositionInLine" : 40
      },
      "2" : {
        "Text" : " Generate the test protos ",
        "Line" : 61,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : " Only compile a subset of the files ",
        "Line" : 77,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : " OSGI bundle configuration ",
        "Line" : 140,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 5
    },
    "thirdparty/protobuf/java/pom.xml" : {
      "ObjectId" : "881473f37127ecdca5a42420a2883a6105fb27ab",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " These are relative to the submodules ",
        "Line" : 29,
        "CharPositionInLine" : 50
      },
      "1" : {
        "Text" : " <module>lite</module> ",
        "Line" : 211,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 2
    },
    "thirdparty/protobuf/java/util/pom.xml" : {
      "ObjectId" : "6b07bcdf800d6bce800e7207e9946f91a2f93a70",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Use the core proto dir so that we can call the core generation script ",
        "Line" : 48,
        "CharPositionInLine" : 83
      },
      "1" : {
        "Text" : " Generate the test protos ",
        "Line" : 57,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : " Generate all of the test protos from the core module ",
        "Line" : 63,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " Generate additional test protos for this module ",
        "Line" : 66,
        "CharPositionInLine" : 73
      },
      "4" : {
        "Text" : " Add the generated test sources to the build ",
        "Line" : 85,
        "CharPositionInLine" : 63
      },
      "5" : {
        "Text" : " Configure the OSGI bundle ",
        "Line" : 90,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : " Configure the fat jar to include all dependencies ",
        "Line" : 104,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 7
    },
    "thirdparty/protobuf/javanano/pom.xml" : {
      "ObjectId" : "6bac76c9f39bf68341db060345452ed558aa7927",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/protobuf.bzl" : {
      "ObjectId" : "ac4482011ee3ed5103e840ed900b53c9f08f7f07",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python; -*- PYTHON-PREPROCESSING-REQUIRED",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"General implementation for generating protos\"\"\"",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "\"\"\"Generates codes from Protocol Buffers definitions.\n\nThis rule helps you to implement Skylark macros specific to the target\nlanguage. You should prefer more specific `cc_proto_library `,\n`py_proto_library` and others unless you are adding such wrapper macros.\n\nArgs:\n  srcs: Protocol Buffers definition files (.proto) to run the protocol compiler\n    against.\n  deps: a list of dependency labels; must be other proto libraries.\n  includes: a list of include paths to .proto files.\n  protoc: the label of the protocol compiler to generate the sources.\n  plugin: the label of the protocol compiler plugin to be passed to the protocol\n    compiler.\n  plugin_language: the language of the generated sources\n  plugin_options: a list of options to be passed to the plugin\n  gen_cc: generates C++ sources in addition to the ones from the plugin. \n  gen_py: generates Python sources in addition to the ones from the plugin.\n  outs: a list of labels of the expected outputs from the protocol compiler.\n\"\"\"",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "\"\"\"Bazel rule to create a C++ protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the cc_proto_library.\n    srcs: the .proto files of the cc_proto_library.\n    deps: a list of dependency labels; must be cc_proto_library.\n    cc_libs: a list of other cc_library targets depended by the generated\n        cc_library.\n    include: a string indicating the include path of the .proto files.\n    protoc: the label of the protocol compiler to generate the sources.\n    internal_bootstrap_hack: a flag indicate the cc_proto_library is used only\n        for bootstraping. When it is set to True, no files will be generated.\n        The rule will simply be a provider for .proto files, so that other\n        cc_proto_library can depend on it.\n    use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin\n        when processing the proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated cc_library target.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# For pre-checked-in generated files, we add the internal_bootstrap_hack\n# which will skip the codegen action.",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# An empty cc_library to make rule dependency consistent.",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "\"\"\"Bazel rule to generate the gen_well_known_protos_java genrule\n\n  Args:\n    srcs: the well known protos\n  \"\"\"",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "\"\"\"Macro to copy files to a different directory and then create a filegroup.\n\n  This is used by the //:protobuf_python py_proto_library target to work around\n  an issue caused by Python source files that are part of the same Python\n  package being in separate directories.\n\n  Args:\n    srcs: The source files to copy and add to the filegroup.\n    strip_prefix: Path to the root of the files to copy.\n    dest: The directory to copy the source files into.\n    **kwargs: extra arguments that will be passesd to the filegroup.\n  \"\"\"",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "\"\"\"Bazel rule to create a Python protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the py_proto_library.\n    srcs: the .proto files of the py_proto_library.\n    deps: a list of dependency labels; must be py_proto_library.\n    py_libs: a list of other py_library targets depended by the generated\n        py_library.\n    py_extra_srcs: extra source files that will be added to the output\n        py_library. This attribute is used for internal bootstrapping.\n    include: a string indicating the include path of the .proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated py_library target.\n    protoc: the label of the protocol compiler to generate the sources.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "\"\"\"Bazel rules to create batch tests for protobuf internal.\n\n  Args:\n    name: the name of the rule.\n    modules: a list of modules for tests. The macro will create a py_test for\n        each of the parameter with the source \"google/protobuf/%s.py\"\n    kargs: extra parameters that will be passed into the py_test.\n\n  \"\"\"",
        "Line" : 360,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "thirdparty/protobuf/protoc-artifacts/pom.xml" : {
      "ObjectId" : "680154b1b272ff667c5cb91173e4327953bebb2c",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Specify the staging repository to deploy to. This can be left\n             empty for the first deployment, and Sonatype will create one. For\n             subsequent deployments it should be set to what Sonatype has\n             created, so that all deployments will go to the same repository.\n             ",
        "Line" : 99,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 1
    },
    "thirdparty/protobuf/ruby/pom.xml" : {
      "ObjectId" : "7b896137f86580dffe4dc3d6243872f645b200ae",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "thirdparty/protobuf/src/Makefile.am" : {
      "ObjectId" : "faee6d969c703902c22cb09e0744a9a95def23e5",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Turn on all warnings except for sign comparison (we ignore sign comparison\n\n# in Google so our code base have tons of such warnings).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If I say \"dist_include_DATA\", automake complains that $(includedir) is not\n\n# a \"legitimate\" directory for DATA.  Screw you, automake.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you are adding new files here, also remember to change the build files for\n\n# all other languages, //protoc-artifacts/build-zip.sh and run\n\n# //update_file_list.sh for bazel.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Not sure why these don't get cleaned automatically.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Disable optimization for tests unless the user explicitly asked for it,\n\n# since test_util.cc takes forever to compile with optimization (with GCC).\n\n# See configure.ac for more info.\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Run cpp_unittest again with PROTOBUF_TEST_NO_DESCRIPTORS defined.\n",
        "Line" : 784,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build lite_unittest separately, since it doesn't use gtest. It can't\n\n# depend on gtest because our internal version of gtest depend on proto\n\n# full runtime and we want to make sure this test builds without full\n\n# runtime.\n",
        "Line" : 807,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# lite_arena_unittest depends on gtest because teboring@ found that without\n\n# gtest when building the test internally our memory sanitizer doesn't detect\n\n# memory leaks (don't know why).\n",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Test plugin binary.\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This test target is to ensure all our public header files and generated\n\n# code is free from warnings. We have to be more pedantic about these\n\n# files because they are compiled by users with different compiler flags.\n",
        "Line" : 851,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "thirdparty/protobuf/util/python/BUILD" : {
      "ObjectId" : "3ac03856690e43bba992ea8e5a1047e6435eed61",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This is a placeholder for python headers. Projects needing to use\n# fast cpp protos in protobuf's python interface should build with\n# --define=use_fast_cpp_protos=true, and in addition, provide\n# //external:python_headers dependency that in turn provides Python.h.\n#\n# Projects that include protobuf using a Bazel external repository will need to\n# add a workspace rule to their WORKSPACE files to add an external workspace\n# that includes the Python headers. For example, the protobuf WORKSPACE file\n# includes the following local_repository rule that points to this directory:\n#\n# new_local_repository(\n#   name = \"python\",\n#   path = __workspace_dir__ + \"/util/python\",\n# )",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty/snappy/CMakeLists.txt" : {
      "ObjectId" : "88a0c46161091f0cc537788faecf3cd1e2537018",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adjust warnings\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty/zlib/CMakeLists.txt" : {
      "ObjectId" : "a0a1ca07e52de0f49658cb00d4ffa6933d293898",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# adjust warnings\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# uses old-style declarator\n",
        "Line" : 7,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 2
    },
    "wrappers/CMakeLists.txt" : {
      "ObjectId" : "4b21bc992a9eee27a51ec552462170f6bee53d30",
      "LastModified" : "2018-03-21T21:59:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# API tracers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unfortunately for a long time static libstdcxx didn't built with -fPIC\n\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=28811\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# https://sourceware.org/binutils/docs/ld/VERSION.html\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# XXX: Unfortunately LINK_DEPENDS is ignored in non-Makefile generators\n\n# See also http://www.cmake.org/pipermail/cmake/2010-May/037206.html\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Prevent symbol relocations internal to our wrapper library to be\n\n# overwritten by the application.  And fail if there are missing\n\n# symbols.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Fail if there are missing symbols, except when using Address Sanitizer\n\n# since libasan symbols are supposed to be preloaded.\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Code shared across all APIs\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Code shared across all OpenGL variants\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Silence warnings about @nn suffix mismatch\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# ddraw.dll\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# d3d8.dll\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# d3d9.dll\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# dxgi.dll, d3d10.dll, d3d10_1.dll, d3d11.dll\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# d2d1.dll, dwrite.dll\n",
        "Line" : 242,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# opengl32.dll\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# OpenGL framework\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# OpenGL framework name\n",
        "Line" : 329,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Mac framework\n",
        "Line" : 331,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Specificy the version and reexport GLU symbols\n",
        "Line" : 333,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# libGL.so\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# avoid the default \"lib\" prefix\n",
        "Line" : 370,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# libEGL.so/libGL.so\n",
        "Line" : 388,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# avoid the default \"lib\" prefix\n",
        "Line" : 413,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 23
    }
  },
  "FileTypes" : {
    "CMAKE" : 58,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 4,
    "BAZEL" : 3,
    "MAVEN" : 12
  },
  "ElapsedTime" : 5561
}