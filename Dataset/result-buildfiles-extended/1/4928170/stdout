{
  "Repository" : "4928170",
  "Revision" : "HEAD",
  "ObjectId" : "8631c9acb0fef6c5039783173ef173ec9488f53b",
  "CommitTime" : "2019-03-20T08:42:54Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "2880593f61cf0bb4916f5e333ff8168b772611bc",
      "LastModified" : "2015-12-04T13:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmake ver req\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#project name\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#for shared libs\n\n#for static libs\n\n#for static libs\n",
        "Line" : 37,
        "CharPositionInLine" : 61
      },
      "3" : {
        "Text" : "#if(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR Clang)\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Werror -Wshadow -Wconversion -Wno-long-long -pedantic -Wconstant-conversion\")\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c99\")\n\n#endif()\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##Audio module##\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "##Structure module##\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "##Entity module##\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "##Rendering module##\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "##UI module##\n",
        "Line" : 371,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#find all source files\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#include/fea/ui/contextsettings.hpp\n",
        "Line" : 385,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "#src/ui/contextsettings.cpp\n",
        "Line" : 425,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "#src/ui/contextsettings.cpp\n",
        "Line" : 451,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "#src/ui/contextsettings.cpp\n",
        "Line" : 478,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "##Util module##\n",
        "Line" : 493,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#find all source files\n",
        "Line" : 497,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "cmake/modules/FindFeatherkit.cmake" : {
      "ObjectId" : "c9c8e857415e09c6a8f69120068b76afa82dbd14",
      "LastModified" : "2014-09-02T18:20:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#list(FIND Featherkit_FIND_COMPONENTS \"rendering\" Featherkit_NEEDS_GLM)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(Featherkit_NEEDS_GLM EQUAL -1)\n\n#    message(\"i don't need glm!\")\n\n#else()\n\n#    message(\"i need glm!\")\n\n#endif()\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#second pass with anti suffix\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#let the user know\n",
        "Line" : 93,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindGLM.cmake" : {
      "ObjectId" : "aa8183f86336da490e62e1ebfff04dd5f9d44693",
      "LastModified" : "2015-03-01T16:12:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindGLM - attempts to locate the glm matrix/vector library.\n\n#\n\n# This module defines the following variables (on success):\n\n#   GLM_INCLUDE_DIRS  - where to find glm/glm.hpp\n\n#   GLM_FOUND         - if the library was successfully located\n\n#\n\n# It is trying a few standard installation locations, but can be customized\n\n# with the following variables:\n\n#   GLM_ROOT_DIR      - root directory of a glm installation\n\n#                       Headers are expected to be found in either:\n\n#                       <GLM_ROOT_DIR>/glm/glm.hpp           OR\n\n#                       <GLM_ROOT_DIR>/include/glm/glm.hpp\n\n#                       This variable can either be a cmake or environment\n\n#                       variable. Note however that changing the value\n\n#                       of the environment varible will NOT result in\n\n#                       re-running the header search and therefore NOT\n\n#                       adjust the variables set by this module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Carsten Neumann\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# default search dirs\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check environment variable\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put user specified location at beginning of search\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate header\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindJsonCpp.cmake" : {
      "ObjectId" : "89838de4f736e306a5636d1b1f050e3b7a41f24a",
      "LastModified" : "2015-03-01T16:12:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find JsonCpp\n\n# Find the JsonCpp includes and library\n\n# This module defines\n\n#  JSONCPP_INCLUDE_DIRS\n\n#  JSONCPP_LIBRARIES\n\n#  JSONCPP_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindOGG.cmake" : {
      "ObjectId" : "2a7c8670a5b88930b4db95e81ae484025e69ca28",
      "LastModified" : "2015-03-01T16:12:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate OGG\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\n\n#\n\n# $OGGDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$OGGDIR\n\n# used in building OGG.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 13,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# >= 1600\n",
        "Line" : 20,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# >= 1500\n",
        "Line" : 22,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# >= 1400\n",
        "Line" : 24,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "# >= 1300\n",
        "Line" : 26,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "# >= 1200\n",
        "Line" : 28,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : "# First search for d-suffixed libs\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 69,
        "CharPositionInLine" : 39
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/modules/FindSDL2.cmake" : {
      "ObjectId" : "bcc346202c674c8942fd311147c88ac0d85b6e0f",
      "LastModified" : "2015-03-01T16:12:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 73,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 74,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 75,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "cmake/modules/FindSFML.cmake" : {
      "ObjectId" : "99cbff2e0c23b72ed4d85c3c579fc957f7d8e618",
      "LastModified" : "2015-03-01T16:12:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the SFML library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n\n# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n\n# example:\n\n#   find_package(SFML COMPONENTS graphics window system) // find the graphics, window and system modules\n\n#\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n\n# If nothing is specified, the version won't be checked (ie. any version will be accepted).\n\n# example:\n\n#   find_package(SFML COMPONENTS ...)     // no specific version required\n\n#   find_package(SFML 2 COMPONENTS ...)   // any 2.x version\n\n#   find_package(SFML 2.4 COMPONENTS ...) // version 2.4 or greater\n\n#\n\n# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\n\n# In case of static linking, the SFML_STATIC macro will also be defined by this script.\n\n# example:\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(SFML 2 COMPONENTS network system)\n\n#\n\n# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n\n# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\n\n# are available for both release and debug modes.\n\n#\n\n# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\n\n# to tell CMake where SFML is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\n\n#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\n\n#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\n\n#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n\n#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n\n# - SFML_LIBRARIES:   the list of all libraries corresponding to the required modules\n\n# - SFML_FOUND:       true if all the required modules are found\n\n# - SFML_INCLUDE_DIR: the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\n\n#\n\n# example:\n\n#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\n\n#   include_directories(${SFML_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the SFML_STATIC macro if static build was chosen\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# deduce the libraries suffix from the options\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the SFML include directory\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Fink\n\n# DarwinPorts\n\n# Blastwave\n",
        "Line" : 74,
        "CharPositionInLine" : 23
      },
      "5" : {
        "Text" : "# check the version number\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# extract the major and minor version numbers from SFML/Config.hpp\n\n# we have to handle framework a little bit differently :\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# if we could extract them, compare with the requested version number\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# compare them\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# SFML version is < 2.0\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# find the requested modules\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# will be set to false if one of the required modules is not found\n",
        "Line" : 115,
        "CharPositionInLine" : 21
      },
      "13" : {
        "Text" : "# no suffix for sfml-main, it is always a static library\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# debug library\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# release library\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# library found\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# if both are found, set SFML_XXX_LIBRARY to contain both\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# debug and not release\n",
        "Line" : 161,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# release and not debug\n",
        "Line" : 166,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# library not found\n",
        "Line" : 171,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# mark as advanced\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# add to the global list of libraries\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# handle errors\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# SFML version not ok\n",
        "Line" : 189,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# fatal error\n",
        "Line" : 198,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# error but continue\n",
        "Line" : 201,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# handle success\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/modules/FindVorbisFile.cmake" : {
      "ObjectId" : "8935d13c4a2d6c37138367feb1826c60d0a76d10",
      "LastModified" : "2015-03-01T16:12:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Vorbis File library\n\n#\n\n#  VorbisFile_INCLUDE_DIR - where to find vorbisfile.h, etc.\n\n#  VorbisFile_LIBRARIES   - List of libraries when using Vorbis.\n\n#  VorbisFile_FOUND       - True if Vorbis File found.\n\n#\n\n# $VORBISDIR is an environment variable used\n\n# for finding Vorbis.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 838
}