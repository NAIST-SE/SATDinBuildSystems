{
  "Repository" : "700422",
  "Revision" : "HEAD",
  "ObjectId" : "fd8081560a05cd89fd98f87f7070a27008c74e1f",
  "CommitTime" : "2019-03-16T11:08:38Z",
  "Files" : {
    "Attic/btree/Makefile" : {
      "ObjectId" : "fbc1949d8ddf18b374c4dd7999e8d00b372b2d49",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# include ../config.mk\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Attic/judy/Makefile" : {
      "ObjectId" : "4440d3b059b59c5e99119813c9a34874a6e609d1",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Attic/mixed/Makefile" : {
      "ObjectId" : "24454b895ee58ba743d19da0bf2cfadc5db49387",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# include ../config.mk\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Attic/pair/Makefile" : {
      "ObjectId" : "5d173ff4d298863a04a8c218d644d1676ebae7fb",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# include ../config.mk\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Attic/r_db/Makefile" : {
      "ObjectId" : "7f7bb0fedece18e3bac1782c9500905c54d7ffa2",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# include ../config.mk\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Attic/slist/Makefile" : {
      "ObjectId" : "9dd2e942ff1371de9c68745678161789ae3ba9d5",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Attic/trie/Makefile" : {
      "ObjectId" : "3b222b3727053641b9d57c177b5efbf0c202ec86",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Makefile" : {
      "ObjectId" : "24e02198ac5b4f593caedbbdee6ff7db09a607b9",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#EMCCFLAGS+=--embed-file sdb.data\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# windows compiler prefix\n\n# travis/debian\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# mxe\n\n#WCP=i686-pc-mingw32\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ios toolchain\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "bindings/benchmark/Makefile" : {
      "ObjectId" : "c52e0a7d7ea73378f5020eb6bfc8d98621f99b7a",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#CFLAGS+=-I../src\n\n#LDFLAGS+=-L../src -lsdb\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sudo cpan -i JSON\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "bindings/csharp/Makefile" : {
      "ObjectId" : "4ce669338cb4dba6ec5495f180fe4d05601b4957",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/d/Makefile" : {
      "ObjectId" : "6d324ba97042ea2dbadd8306a6079929f934011d",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/go/Makefile" : {
      "ObjectId" : "3852cbcb46835d93d62256fcfa99ec94cb3795d0",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/nodejs/cc/Makefile" : {
      "ObjectId" : "8fa092ea635032a8268e187ee878239266add7ac",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/nodejs/json/Makefile" : {
      "ObjectId" : "bfa330413ffd9e6ea2e176aaf1fdbce16a4d1912",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/nodejs/nan/Makefile" : {
      "ObjectId" : "b7e8b7b5533cb63eab0a25c842a84fa05b9ab6bc",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "bindings/python/Makefile" : {
      "ObjectId" : "ec753198511a1e158231c3a61e37de917826eb3c",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/vala/Makefile" : {
      "ObjectId" : "a67902ec4afb6c043ee8e53435804cc959515ad2",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "bindings/vala/types/Makefile" : {
      "ObjectId" : "350ee524a353f3053f66acd4c3293200a752b8da",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "memcache/Makefile" : {
      "ObjectId" : "7b52ef093f00e7c51b9b5d7549814c88ae9e4ff6",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "one/Makefile" : {
      "ObjectId" : "ae91f024bd34c1cdb5e5923dd40bea33f23d8c67",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pkgconfig/Makefile" : {
      "ObjectId" : "bf8475bc49a849ba30957d98b9d676a620e38010",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Makefile" : {
      "ObjectId" : "d3e29085b7c733ba6427e94d5bba4d84d6185dc0",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# rules #\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/json/Makefile" : {
      "ObjectId" : "1c3034f5df8103690852d7e8135a97a08a292aed",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/Makefile" : {
      "ObjectId" : "19fb0f73b990434bb73889fd15463ee4b808e43a",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#$(SHELL) -c \"./$@\"\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "test/api/Makefile" : {
      "ObjectId" : "654ede328d5c0f73c5d42c6cd557836c0d9b258b",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/auth/Makefile" : {
      "ObjectId" : "2776d931421127d3740e0c09abbe7f446e39b3ff",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/bench/Makefile" : {
      "ObjectId" : "7c38b3c6646b5797c8c2d658a55cdf2574a7d555",
      "LastModified" : "2018-11-28T08:42:03Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/bench/vs/Makefile" : {
      "ObjectId" : "a99fec0fc206dfd34440eeed8cf901cb160cd9e7",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/fuzz/Makefile" : {
      "ObjectId" : "796fb8c3ec6b1aa7fced829ac2a28a3d23ce4f22",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/leaks/Makefile" : {
      "ObjectId" : "63d7e763aa56a171929afeaa3c20c69a54689dc8",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "test/reset/Makefile" : {
      "ObjectId" : "86671b79917108a13686184c15900f77026a0d88",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/unit/Makefile" : {
      "ObjectId" : "39ba50c0314d6abd3a3cd5166094ed65a14091fe",
      "LastModified" : "2018-11-14T10:31:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CFLAGS += -fsanitize=address\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 32
  },
  "ElapsedTime" : 803
}