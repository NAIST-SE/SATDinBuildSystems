{
  "Repository" : "254761",
  "Revision" : "HEAD",
  "ObjectId" : "ae6dc5e9b1ec83429af3b3ba17a7d61a046d3400",
  "CommitTime" : "2019-04-04T12:16:50Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "dca6241b86febcb8cb3de7175b9b055a5ab3b120",
      "LastModified" : "2019-04-02T18:00:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Want to say \"version >= 3.1\", but no idea how to achieve that otherwise.\n",
        "Line" : 3,
        "CharPositionInLine" : 45
      },
      "1" : {
        "Text" : "# Don't expand vars inside quotes, i.e. don't expand a line of form: ''if (\"MSVC\")'', but require ''if (\"${MSVC}\")''\n",
        "Line" : 4,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "#Define cmake install path\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make relative paths absolute (needed later on)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# N.B. These exist for inter-opping to other libraries written by the author.\n\n# Feel free to remove.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: Use a separate MATH_INCLUDE_TESTS?\n",
        "Line" : 50,
        "CharPositionInLine" : 70
      },
      "6" : {
        "Text" : "# clock_gettime() is found from the library librt on linux.\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Ignore warning LNK4264: archiving object file compiled with /ZW into a static library; note that when authoring Windows Runtime types it is not recommended to link with a static library that contains Windows Runtime metadata\n\n#    since we are not authoring any WinRT components from this code.\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# install lib and header files if testing is disabled\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Handle CMake Config\n\n# Add all targets to the build-tree export set\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Export the package for use from the build-tree\n\n# (this registers the build-tree with a global CMake-registry)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create the ${PROJECT_NAME}Config.cmake and ${PROJECT_NAME}ConfigVersion files\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ... for the build tree\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ... for the install tree\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ... for both\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Install the ${PROJECT_NAME}Config.cmake and ${PROJECT_NAME}ConfigVersion.cmake\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Install the export set for use with the install-tree\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "CommonOptions.cmake" : {
      "ObjectId" : "3b44f0a4730cc9e34368d1d2614ad2801b385cd2",
      "LastModified" : "2019-04-02T18:00:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Undef WIN32 when Windows is only used as a host system\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the global _DEBUG flag from WIN32 platform to all others, which is universally used in MGL to\n\n# perform debug-mode-specific compilation.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Perform extremely aggressive optimization on Release builds:\n\n# Flags on Visual Studio 2010 and newer:\n\n# Runtime library: Multi-threaded (/MT) as opposed to default 'Multi-threaded DLL' - static runtime library allows better LTCG inlining opportunities.\n\n# Optimization: Full Optimization (/Ox)\n\n# Inline Function Expansion: Any Suitable (/Ob2)\n\n# Enable Intrinsic Functions: Yes (/Oi)\n\n# Favor Size Or Speed: Favor fast code (/Ot)\n\n# Enable Fiber-Safe Optimizations: Yes (/GT)\n\n# Enable String Pooling: Yes (/GF)\n\n# Buffer Security Check: No (/GS-)\n\n# Floating Point Model: Fast (/fp:fast)\n\n# Enable Floating Point Exceptions: No (/fp:except-)\n\n# Build with Multiple Processes (/MP)\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Set up flags that affect ABI and linking to other projects as well, but only in unit test runner:\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Exception handling model: Catch C++ exceptions only, assume that \"extern C\" functions will never throw a C++ exception.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Ignore noisy VS warnings that complain about bad std library functions (for now?)\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Disable all forms of MSVC debug iterator checking in new and old Visual Studios.\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Since Visual Studio 2012 the IDE has an option: Secure Development Lifecycle (SDL) flags: No (/sdl-)\n\n# but that is implied by /GS- already above, so no need to set that.\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Disable Incremental Linking (/INCREMENTAL:NO) This is incompatible with LTCG, but RelWithDebInfo has this default on.\n\n# Perform identical COMDAT folding (/OPT:ICF)\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# When outputting assembly we want to have all functions in, independent of whether they're used.\n",
        "Line" : 86,
        "CharPositionInLine" : 31
      },
      "10" : {
        "Text" : "# Remove unreferenced data (/OPT:REF)\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# XXX Work around MSVC bug with x64 + /GL + /O2 /arch:AVX, see https://connect.microsoft.com/VisualStudio/feedback/details/814682/visual-studio-2013-x64-compiler-generates-faulty-code-with-gl-o2-arch-avx-flags-enabled\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# First fix was actually in VS2013 Update 2 already, but don't know what the version of that compiler was.\n",
        "Line" : 95,
        "CharPositionInLine" : 173
      },
      "13" : {
        "Text" : "# Whole Program Optimization: Yes (/GL)\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Link-time Code Generation (/LTCG)\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Omit Frame Pointers: Yes (/Oy)\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Don't omit frame pointers, but add Debug database (/Zi).\n",
        "Line" : 109,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Suppress Visual Studio linker warning LNK4221: This object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library\n\n# This happens on .cpp compilation units that do not contain any public symbols in them, e.g. PBVolume.cpp. We do not want to add dummy symbols to that file, and do want to have a file in the project\n\n# that only includes PBVolume.h and nothing else, to make sure that PBVolume.h can be #included on its own. Therefore suppress this warning.\n",
        "Line" : 121,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# -fkeep-inline-functions: Inline everything, but also keep a separate inlined copy for asm outputting purposes.\n\n# Add -ffast-math and -fno-math-errno\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Prefer outputting Intel syntax for assembly.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# GCC\n",
        "Line" : 148,
        "CharPositionInLine" : 73
      },
      "21" : {
        "Text" : "# To interleave source code, run 'as -alhnd file.s > file.lst'\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#\tGCC 4.7.2 generates broken code that fails Float4Normalize4 test and others under -O3 -ffast-math, so don't do that.\n\n#\tset(OPT_FLAGS \"-O3 -ffast-math\")\n\n#\tset(CMAKE_C_FLAGS_RELEASE     \"${CMAKE_C_FLAGS_RELEASE} ${OPT_FLAGS}\")\n\n#\tset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} ${OPT_FLAGS}\")\n\n#\tset(CMAKE_C_FLAGS_RELWITHDEBINFO     \"${CMAKE_C_FLAGS_RELWITHDEBINFO} ${OPT_FLAGS}\")\n\n#\tset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${OPT_FLAGS}\")\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# MATH_NO_WINVER: Set this to TRUE to have MathGeoLib build to not define the Windows version to target itself.\n\n# MATH_WINVER: Set this to a custom Windows version that MathGeoLib should target.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Require Windows XP.\n\n# See http://msdn.microsoft.com/en-us/library/6sehtctf.aspx\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Force to always compile with W4\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Between FMA3 and FMA4, the intrinsics are the same so C code doesn't need to know which to call,\n\n# it can just call _mm_fmadd_ps(), so this passed #define doesn't need to distinguish.\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# However for GCC codegen, it needs to know which instruction set to target:\n",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# http://gcc.gnu.org/onlinedocs/gcc-4.8.2/gcc/i386-and-x86-64-Options.html#i386-and-x86-64-Options\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# http://gcc.gnu.org/onlinedocs/gcc-4.8.2/gcc/i386-and-x86-64-Options.html#i386-and-x86-64-Options\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# VS2013 no longer has /arch:SSE2, it's always enabled.\n",
        "Line" : 247,
        "CharPositionInLine" : 38
      },
      "31" : {
        "Text" : "# No equivalent for Visual Studio, after SSE2, arch jumps to AVX.\n",
        "Line" : 248,
        "CharPositionInLine" : 30
      },
      "32" : {
        "Text" : "# Note: corei7 also requires SSE 4.2\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# VS2013 no longer has /arch:SSE2, it's always enabled.\n",
        "Line" : 258,
        "CharPositionInLine" : 38
      },
      "34" : {
        "Text" : "# No equivalent for Visual Studio, after SSE2, arch jumps to AVX.\n",
        "Line" : 259,
        "CharPositionInLine" : 30
      },
      "35" : {
        "Text" : "# VS2013 no longer has /arch:SSE2, it's always enabled.\n",
        "Line" : 268,
        "CharPositionInLine" : 38
      },
      "36" : {
        "Text" : "# If requested from the command line, run Visual Studio 2012 static code analysis. Warning: this is very slow!\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "ios/iOS-toolchain.cmake" : {
      "ObjectId" : "8ff6f07d81064923b59bc5430b2f266d5e3d6073",
      "LastModified" : "2013-04-19T17:09:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file was downloaded from http://code.google.com/p/ios-cmake/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Standard settings\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force the compilers to gcc for iOS\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 102,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 107,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Setup iOS developer location unless specified manually with CMAKE_IOS_DEVELOPER_ROOT\n\n# Note Xcode 4.3 changed the installation location, choose the most recent one available\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# set the architecture for iOS \n\n# NOTE: Currently both ARCHS_STANDARD_32_BIT and ARCHS_UNIVERSAL_IPHONE_OS set armv7 only, so set both manually\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This little macro lets you set any XCode specific property\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    }
  },
  "FileTypes" : {
    "CMAKE" : 3
  },
  "ElapsedTime" : 1099
}