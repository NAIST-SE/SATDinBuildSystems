{
  "Repository" : "29021748",
  "Revision" : "HEAD",
  "ObjectId" : "7ebc9108679a6cabca166de202419741d039409d",
  "CommitTime" : "2017-01-04T14:39:01Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b97bf8df531320cda689ef15a34f72ad0d2bb7be",
      "LastModified" : "2016-02-01T15:31:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(BUILD_SHARED_LIBS FALSE)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(Boost_DEBUG ON)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DEBUG definition\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindGLFW.cmake" : {
      "ObjectId" : "7e7caae6c8e3b83abcfe1ab33d206d3adcf51d22",
      "LastModified" : "2015-11-30T10:16:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GLFW_FOUND\n\n# GLFW_INCLUDE_DIRS\n\n# GLFW_LIBRARYS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindXerces.cmake" : {
      "ObjectId" : "651453bdc363fdb47b56f2078c2ec03619a4041e",
      "LastModified" : "2015-12-10T09:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Xerces_FOUND\n\n# Xerces_INCLUDE_DIRS\n\n# Xerces_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Findassimp.cmake" : {
      "ObjectId" : "e1b817b8a5d958684c07781c5327c9316078d35f",
      "LastModified" : "2015-11-30T10:16:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "3236fa13903bf9d97be551411d3969e2421ad242",
      "LastModified" : "2015-11-30T16:02:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2015 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# process transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 394,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 416,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 423,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 455,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 467,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# platform specific flags\n",
        "Line" : 478,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# default include dirs\n",
        "Line" : 513,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 520,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 532,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# target include directories\n",
        "Line" : 544,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 556,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 626,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# target export define symbol\n",
        "Line" : 630,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 635,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# target compile definitions\n",
        "Line" : 644,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 653,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 662,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 678,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 911,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 955,
        "CharPositionInLine" : 3
      },
      "50" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 963,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 966,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# header is outside\n",
        "Line" : 980,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 991,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# check header file extension\n",
        "Line" : 1001,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1014,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1019,
        "CharPositionInLine" : 3
      },
      "57" : {
        "Text" : "# GCC like output\n",
        "Line" : 1028,
        "CharPositionInLine" : 3
      },
      "58" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1044,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1047,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1049,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# then separate lines\n",
        "Line" : 1051,
        "CharPositionInLine" : 1
      },
      "62" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1054,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1072,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# update stack\n",
        "Line" : 1082,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1098,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1100,
        "CharPositionInLine" : 5
      },
      "67" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1107,
        "CharPositionInLine" : 5
      },
      "68" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1116,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1128,
        "CharPositionInLine" : 5
      },
      "70" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1167,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1183,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1331,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# create empty log file\n",
        "Line" : 1372,
        "CharPositionInLine" : 3
      },
      "74" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1388,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1422,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# append to list\n",
        "Line" : 1431,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1434,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1438,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# append to list\n",
        "Line" : 1443,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1449,
        "CharPositionInLine" : 3
      },
      "81" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1456,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# append to list\n",
        "Line" : 1461,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1464,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1469,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# append to list\n",
        "Line" : 1478,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1481,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1485,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# append to list\n",
        "Line" : 1490,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1496,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1515,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# append to list\n",
        "Line" : 1526,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1533,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1540,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# append to list\n",
        "Line" : 1549,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1552,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1560,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# append to list\n",
        "Line" : 1572,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1579,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1586,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# append to list\n",
        "Line" : 1597,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1606,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1623,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# append to list\n",
        "Line" : 1631,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1637,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1644,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# append to list\n",
        "Line" : 1646,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1649,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1654,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# append to list\n",
        "Line" : 1659,
        "CharPositionInLine" : 3
      },
      "110" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1662,
        "CharPositionInLine" : 3
      },
      "111" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1666,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# append to list\n",
        "Line" : 1672,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1675,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1681,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# append to list\n",
        "Line" : 1689,
        "CharPositionInLine" : 5
      },
      "116" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1695,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1702,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# append to list\n",
        "Line" : 1704,
        "CharPositionInLine" : 5
      },
      "119" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1707,
        "CharPositionInLine" : 5
      },
      "120" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1712,
        "CharPositionInLine" : 3
      },
      "121" : {
        "Text" : "# append to list\n",
        "Line" : 1721,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1727,
        "CharPositionInLine" : 5
      },
      "123" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1734,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# append to list\n",
        "Line" : 1736,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1739,
        "CharPositionInLine" : 5
      },
      "126" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1776,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1792,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1796,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1803,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1806,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1823,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1842,
        "CharPositionInLine" : 1
      },
      "133" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1885,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1896,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1899,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1970,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1975,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 1978,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1981,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 1984,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2016,
        "CharPositionInLine" : 1
      },
      "142" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2020,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2025,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2042,
        "CharPositionInLine" : 1
      },
      "145" : {
        "Text" : "# GCC and clang raise a fatal error if a file is not found during preprocessing\n\n# thus we depend on target's generated source files for prefix header generation\n",
        "Line" : 2046,
        "CharPositionInLine" : 2
      },
      "146" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2063,
        "CharPositionInLine" : 1
      },
      "147" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2087,
        "CharPositionInLine" : 1
      },
      "148" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2092,
        "CharPositionInLine" : 3
      },
      "149" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2099,
        "CharPositionInLine" : 1
      },
      "150" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2102,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2107,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# generate target script file\n",
        "Line" : 2130,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2135,
        "CharPositionInLine" : 2
      },
      "154" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2149,
        "CharPositionInLine" : 2
      },
      "155" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2158,
        "CharPositionInLine" : 3
      },
      "156" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2160,
        "CharPositionInLine" : 3
      },
      "157" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2164,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2187,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2192,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2199,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2205,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2212,
        "CharPositionInLine" : 3
      },
      "163" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2215,
        "CharPositionInLine" : 2
      },
      "164" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2222,
        "CharPositionInLine" : 1
      },
      "165" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2229,
        "CharPositionInLine" : 1
      },
      "166" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2231,
        "CharPositionInLine" : 1
      },
      "167" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2291,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2302,
        "CharPositionInLine" : 3
      },
      "169" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2313,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2321,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2325,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2329,
        "CharPositionInLine" : 3
      },
      "173" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2351,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2357,
        "CharPositionInLine" : 3
      },
      "175" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2366,
        "CharPositionInLine" : 3
      },
      "176" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2374,
        "CharPositionInLine" : 3
      },
      "177" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2424,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2433,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2442,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2449,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2622,
        "CharPositionInLine" : 3
      },
      "182" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2626,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2640,
        "CharPositionInLine" : 3
      },
      "184" : {
        "Text" : "# use all available cores\n",
        "Line" : 2660,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2685,
        "CharPositionInLine" : 1
      },
      "186" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2692,
        "CharPositionInLine" : 1
      },
      "187" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2702,
        "CharPositionInLine" : 1
      },
      "188" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2707,
        "CharPositionInLine" : 1
      },
      "189" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2709,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2718,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2728,
        "CharPositionInLine" : 4
      },
      "192" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2735,
        "CharPositionInLine" : 3
      },
      "193" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2739,
        "CharPositionInLine" : 1
      },
      "194" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2767,
        "CharPositionInLine" : 2
      },
      "195" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2772,
        "CharPositionInLine" : 4
      },
      "196" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2787,
        "CharPositionInLine" : 2
      },
      "197" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2798,
        "CharPositionInLine" : 3
      },
      "198" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2806,
        "CharPositionInLine" : 3
      },
      "199" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2820,
        "CharPositionInLine" : 4
      },
      "200" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2832,
        "CharPositionInLine" : 1
      },
      "201" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2842,
        "CharPositionInLine" : 1
      },
      "202" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2845,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2850,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2855,
        "CharPositionInLine" : 1
      },
      "205" : {
        "Text" : "# generate unity target\n",
        "Line" : 2862,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2869,
        "CharPositionInLine" : 2
      },
      "207" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2872,
        "CharPositionInLine" : 1
      },
      "208" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2882,
        "CharPositionInLine" : 3
      },
      "209" : {
        "Text" : "# copy output name\n",
        "Line" : 2907,
        "CharPositionInLine" : 1
      },
      "210" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2915,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# copy compile features\n",
        "Line" : 2924,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2929,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2937,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2947,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 2950,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 2955,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 2965,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2968,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2973,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# trivial checks\n",
        "Line" : 2997,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# resolve alias\n",
        "Line" : 3003,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3011,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3027,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3032,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3066,
        "CharPositionInLine" : 3
      },
      "226" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3115,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3202,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# include target script if available\n",
        "Line" : 3214,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3216,
        "CharPositionInLine" : 2
      },
      "230" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3232,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3252,
        "CharPositionInLine" : 3
      },
      "232" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3255,
        "CharPositionInLine" : 3
      },
      "233" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3274,
        "CharPositionInLine" : 3
      },
      "234" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3277,
        "CharPositionInLine" : 3
      },
      "235" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3343,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3346,
        "CharPositionInLine" : 3
      },
      "237" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3369,
        "CharPositionInLine" : 1
      },
      "238" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3406,
        "CharPositionInLine" : 3
      },
      "239" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3440,
        "CharPositionInLine" : 2
      },
      "240" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3454,
        "CharPositionInLine" : 3
      },
      "241" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3461,
        "CharPositionInLine" : 1
      },
      "242" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3514,
        "CharPositionInLine" : 1
      },
      "243" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3586,
        "CharPositionInLine" : 1
      },
      "244" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3750,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 245
    },
    "src/Engine/CMakeLists.txt" : {
      "ObjectId" : "e74214cf6bf882546f78590ad71aca5635c54522",
      "LastModified" : "2016-02-18T09:33:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Because FindOpenAL is retarded\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# nativefiledialog\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Link with GTK+ here!\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#set_target_properties(Engine PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${INCLUDE_PATH}/PrecompiledHeader.h\")\n\n#cotire(Engine)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/Game/CMakeLists.txt" : {
      "ObjectId" : "a9aa829ff47de7cfadf9572136029ed6bfda8e41",
      "LastModified" : "2016-03-14T00:53:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Tests/CMakeLists.txt" : {
      "ObjectId" : "a3f95a37faa457adb18b4a3d3bf2b1d5e03795b1",
      "LastModified" : "2015-12-18T10:42:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 1717
}