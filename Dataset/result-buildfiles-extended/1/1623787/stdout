{
  "Repository" : "1623787",
  "Revision" : "HEAD",
  "ObjectId" : "4153ebac5849bb04230d2ffbab7c74c482ba96fe",
  "CommitTime" : "2019-04-11T11:54:48Z",
  "Files" : {
    "AI/BattleAI/CMakeLists.txt" : {
      "ObjectId" : "eab378a650825f41a4d8bc9f398d1d87388b3906",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# android compiles ai libs into main lib directly, so we skip this library and just reuse sources list\n",
        "Line" : 30,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 1
    },
    "AI/CMakeLists.txt" : {
      "ObjectId" : "6e9786950707a119a5cdafd80c2cec56f85dca57",
      "LastModified" : "2017-08-16T13:12:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#######################################\n\n#        FuzzyLite support            #\n\n#######################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################\n\n#        Add subdirectories           #\n\n#######################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "AI/EmptyAI/CMakeLists.txt" : {
      "ObjectId" : "deac9bfa7b98263ed1ef2ae4f608e1542cf1a0d0",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "AI/StupidAI/CMakeLists.txt" : {
      "ObjectId" : "5575df428f956de6b892a9c1aed4c86f77ae5617",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "AI/VCAI/CMakeLists.txt" : {
      "ObjectId" : "9ff6c785c26ed7c6ad519f03d7c71075f6580f0e",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# android compiles ai libs into main lib directly, so we skip this library and just reuse sources list\n",
        "Line" : 106,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "c1c5a963fb981ef94f8d54d52216eef29718c711",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum required version greatly affect CMake behavior\n\n# So cmake_minimum_required must be called before the project()\n\n# 2.8.12 is used since it's present in Ubuntu 14.04 and Cotire require it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO\n\n# macOS:\n\n# - There is problem with running fixup_bundle in main project after subdirectories.\n\n# Cmake put them after all install code of main CMakelists in cmake_install.cmake\n\n# Currently I just added extra add_subdirectory and CMakeLists.txt in osx directory to bypass that.\n\n# - Try to fix build with RPATH.\n\n# Currently if CMAKE_MACOSX_RPATH=1 then AI libs unable to find @rpath/libvcmi.dylib\n\n# I tried to set few different INSTALL_RPATH for all targets in AI directory, but nothing worked.\n\n#\n\n# MXE:\n\n# - Try to implement MXE support into BundleUtilities so we can deploy deps automatically\n\n#\n\n# Vckpg:\n\n# - Improve install code once there is better way to deploy DLLs and Qt plugins\n\n# - Move Vcpkg install BundleUtilities code from osx/CMakeLists.txt\n\n#\n\n# Other:\n\n# - Cleanup remove_directory copy_directory if performance will be a problem.\n\n# We can use some macro over copy_if_different since it's only work for single file.\n\n# - Find a way to move add_custom_command for assets deploy out of \"lib/CMakeLists.txt\"\n\n# - Consider to remove M_DATA_DIR, DM_BIN_DIR, DM_LIB_DIR and not use them in code as well\n\n# - Try to get rid of FOLDER override with define_property\n\n# It's used currently to make sure that 3rd-party dependencies in git submodules get proper FOLDER property\n\n# - Make FindFuzzyLite check for the right version and disable FORCE_BUNDLED_FL by default\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "############################################\n\n#        User-provided options             #\n\n############################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Used for Snap packages and also useful for debugging\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow to pass package name from Travis CI\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############################################\n\n#        Miscellaneous options             #\n\n############################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Contains custom functions and macros, but don't altering any options\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Options to enable folders in CMake generated projects for Visual Studio, Xcode, etc\n\n# Very useful to put 3rd-party libraries such as Minizip, GoogleTest and FuzzyLite in their own folders\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make FOLDER property inheritable\n\n# So when we set FOLDER property on AI directory all and targets inside will inherit it\n\n#\n\n# Important! This trick depend on undefined behavior since we override CMake own property.\n\n# In same time define_property documentation states it's function for custom properties.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Generate Version.cpp\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Precompiled header configuration\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "############################################\n\n#        Documentation section             #\n\n############################################\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "############################################\n\n#        Compile and linking options       #\n\n############################################\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Windows Vista or newer for FuzzyLite 6 to compile\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "#delete lib prefix for dlls (libvcmi -> vcmi)\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Don't link with SDLMain\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Suppress warnings\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Workaround: Visual Studio has issues with exports of classes that inherit templates\n\n# https://stackoverflow.com/questions/44960760/msvc-dll-exporting-class-that-inherits-from-template-cause-lnk2005-already-defin\n\n# Reported to Microsoft here:\n\n# https://developercommunity.visualstudio.com/content/problem/224597/linker-failing-because-of-multiple-definitions-of.html\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Required at least for compatibility with Boost 1.68 on Vcpkg\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Check for iconv (may be needed for Boost.Locale)\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Prevent compiler issues when building Debug\n\n# Assembler might fail with \"too many sections\"\n\n# With big-obj or 64-bit build will take hours\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#so far all *nix compilers support such parameters\n",
        "Line" : 181,
        "CharPositionInLine" : 42
      },
      "22" : {
        "Text" : "# Check if some platform-specific libraries are needed for linking\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Shared memory functions used by Boost.Interprocess\n\n# FindBoost handle linking with pthreads, but doesn't handle this\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "############################################\n\n#        Finding packages                  #\n\n############################################\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Widgets finds its own dependencies (QtGui and QtCore).\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "############################################\n\n#        Output directories                #\n\n############################################\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# on Win everything goes into H3 root directory\n",
        "Line" : 237,
        "CharPositionInLine" : 10
      },
      "28" : {
        "Text" : "# includes lib path which determines where to install shared libraries (either /lib or /lib64)\n",
        "Line" : 242,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# includes lib path which determines where to install shared libraries (either /lib or /lib64)\n",
        "Line" : 260,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# following constants only used for platforms using XDG (Linux, BSD, etc)\n",
        "Line" : 280,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "#######################################\n\n#        Add subdirectories           #\n\n#######################################\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#######################################\n\n#        Installation section         #\n\n#######################################\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# that script is useless for Windows\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Copy debug versions of libraries if build type is debug\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#######################################\n\n#       Packaging section             #\n\n#######################################\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# vcmi does not have \"patch version\" in version string\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#TODO: remove version from Global.h and use this one as define?\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Note: due to NSI script generation process all of the backward slashes here are useful\n",
        "Line" : 389,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# set the install/unistall icon used for the installer itself\n\n# There is a bug in NSI that does not handle full unix paths properly.\n",
        "Line" : 408,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# set the package header icon for MUI\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# Use BundleUtilities to fix build when Vcpkg is used and disable it for MXE\n",
        "Line" : 424,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# CMake code for CPACK_DMG_DS_STORE executed before DS_STORE_SETUP_SCRIPT\n\n# So we can keep both enabled and this shouldn't hurt\n\n# set(CPACK_DMG_DS_STORE \"${CMAKE_SOURCE_DIR}/osx/dmg_DS_Store\")\n",
        "Line" : 432,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# Always use \"VCMI\" as volume name so full path will be /Volumes/VCMI/\n\n# Otherwise DMG background image wouldn't work\n\n# Pre-generated DS_Store use absolute path to background image\n",
        "Line" : 437,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Bundle fixing code must be in separate directory to be executed after all other install code\n",
        "Line" : 456,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 45
    },
    "client/CMakeLists.txt" : {
      "ObjectId" : "2ba5d8f363795be6587e4acdb2bb0c0fecdc6518",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# android needs client/server to be libraries, not executables, so we can't reuse the build part of this script\n",
        "Line" : 147,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "#install icons and desktop file on Linux\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FIXME: move to client makefile?\n",
        "Line" : 199,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindFFmpeg.cmake" : {
      "ObjectId" : "4557d9d774ae41f60eb09c77b8cbd9aa3a28bbdf",
      "LastModified" : "2017-08-16T13:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: ts=2 sw=2\n\n# - Try to find the required ffmpeg components(default: AVFORMAT, AVUTIL, AVCODEC)\n\n#\n\n# Once done this will define\n\n#  FFMPEG_FOUND         - System has the all required components.\n\n#  FFMPEG_INCLUDE_DIRS  - Include directory necessary for using the required components headers.\n\n#  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.\n\n#  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.\n\n#\n\n# For each of the components it will additionally set.\n\n#   - AVCODEC\n\n#   - AVDEVICE\n\n#   - AVFORMAT\n\n#   - AVUTIL\n\n#   - POSTPROCESS\n\n#   - SWSCALE\n\n# the following variables will be defined\n\n#  <component>_FOUND        - System has <component>\n\n#  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers\n\n#  <component>_LIBRARIES    - Link these to use <component>\n\n#  <component>_DEFINITIONS  - Compiler switches required for using <component>\n\n#  <component>_VERSION      - The components version\n\n#\n\n# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2011, Michael Jansen, <kde@michael-jansen.biz>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The default components were taken from a survey over other FindFFMPEG.cmake files\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n### Macro: set_component_found\n\n#\n\n# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.\n\n#\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(STATUS \"  - ${_component} found.\")\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# message(STATUS \"  - ${_component} not found.\")\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n### Macro: find_component\n\n#\n\n# Checks for the given component by invoking pkgconfig and then looking up the libraries and\n\n# include directories.\n\n#\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 69,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "# Check for cached results. If there are skip the costly part.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for all possible component.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check if the required components were found and add their stuff to the FFMPEG_* vars.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# message(STATUS \"Required component ${_component} present.\")\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# message(STATUS \"Required component ${_component} missing.\")\n",
        "Line" : 126,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Build the include path with duplicates removed.\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# cache the vars.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Now set the noncached _FOUND vars for the components.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Compile the list of required vars\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# On OS X we ffmpeg libraries depend on VideoDecodeAcceleration and CoreVideo frameworks\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Give a nice error message if some of the required vars are missing.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake_modules/FindFuzzyLite.cmake" : {
      "ObjectId" : "4a97df5fd00c9c2884c01c6cfc42fa863cbabd79",
      "LastModified" : "2017-08-16T13:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindFuzzylite\n\n# --------\n\n#\n\n# Locate FuzzyLite library\n\n#\n\n#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n# Copyright 2014 Mikhail Paulyshka\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file kitware license.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake_modules/FindMinizip.cmake" : {
      "ObjectId" : "6411918266dc65e14312578d4283700a8f606eed",
      "LastModified" : "2017-08-16T13:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindMINIZIP\n\n# --------\n\n#\n\n# Locate Minizip library\n\n#\n\n# This module defines\n\n#\n\n# ::\n\n#\n\n#   MINIZIP_LIBRARY, the name of the library to link against\n\n#   MINIZIP_FOUND, if false, do not try to link to Minizip\n\n#   MINIZIP_INCLUDE_DIR, where to find unzip.h\n\n#   MINIZIP_VERSION_STRING, human-readable string containing the version of Minizip\n\n#\n\n#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file kitware license.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake_modules/FindSDL2.cmake" : {
      "ObjectId" : "14bc76f46a6eda567ca00a8f849dc4d6bd1b462e",
      "LastModified" : "2017-08-16T13:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSDL2\n\n# --------\n\n#\n\n# Locate SDL2 library\n\n#\n\n# This module defines\n\n#\n\n# ::\n\n#\n\n#   SDL2_LIBRARY, the name of the library to link against\n\n#   SDL2_FOUND, if false, do not try to link to SDL\n\n#   SDL2_INCLUDE_DIR, where to find SDL.h\n\n#   SDL2_VERSION_STRING, human-readable string containing the version of SDL\n\n#\n\n#\n\n#\n\n# This module responds to the flag:\n\n#\n\n# ::\n\n#\n\n#   SDL2_BUILDING_LIBRARY\n\n#     If this is defined, then no SDL2_main will be linked in because\n\n#     only applications need main().\n\n#     Otherwise, it is assumed you are building an application and this\n\n#     module will attempt to locate and set the proper link flags\n\n#     as part of the returned SDL2_LIBRARY variable.\n\n#\n\n#\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version.  (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your\n\n# configuration and no SDL2_LIBRARY, it means CMake did not find your SDL\n\n# library (SDL2.dll, libSDL2.so, SDL.framework, etc).  Set\n\n# SDL2_LIBRARY_TEMP to point to your SDL library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this\n\n# value as appropriate.  These values are used to generate the final\n\n# SDL2_LIBRARY variable, but when these values are unset, SDL2_LIBRARY\n\n# does not get created.\n\n#\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDL2DIR used in building SDL.  l.e.galup 9-20-02\n\n#\n\n# Modified by Eric Wing.  Added code to assist with automated building\n\n# by using environmental variables and providing a more\n\n# controlled/consistent search behavior.  Added new modifications to\n\n# recognize OS X frameworks and additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL\n\n# guidelines.  Added a search for SDLmain which is needed by some\n\n# platforms.  Added a search for threads which is needed by some\n\n# platforms.  Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of SDL2_LIBRARY to\n\n# override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file kitware license.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDLmain. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDLmain for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# SDL may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDLmain -lSDL -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# For SDLmain\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For OS X, SDL uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# For MinGW library\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "cmake_modules/FindSDL2_image.cmake" : {
      "ObjectId" : "5ae7e0e868032940d6ec40e0c7a74b4589f0eb5b",
      "LastModified" : "2017-08-16T13:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSDL2_image\n\n# --------------\n\n#\n\n# Locate SDL2_image library\n\n#\n\n# This module defines:\n\n#\n\n# ::\n\n#\n\n#   SDL2_IMAGE_LIBRARIES, the name of the library to link against\n\n#   SDL2_IMAGE_INCLUDE_DIRS, where to find the headers\n\n#   SDL2_IMAGE_FOUND, if false, do not try to link against\n\n#   SDL2_IMAGE_VERSION_STRING - human-readable string containing the version of SDL2_image\n\n#\n\n# $SDL2DIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDL2DIR used in building SDL.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL2.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file kitware license.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_modules/FindSDL2_mixer.cmake" : {
      "ObjectId" : "d7f71d8ddc3c7f376a2f363dc1395e3c15986a08",
      "LastModified" : "2017-08-16T13:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSDL2_mixer\n\n# --------------\n\n#\n\n# Locate SDL2_mixer library\n\n#\n\n# This module defines:\n\n#\n\n# ::\n\n#\n\n#   SDL2_MIXER_LIBRARIES, the name of the library to link against\n\n#   SDL2_MIXER_INCLUDE_DIRS, where to find the headers\n\n#   SDL2_MIXER_FOUND, if false, do not try to link against\n\n#   SDL2_MIXER_VERSION_STRING - human-readable string containing the version of SDL_mixer\n\n#\n\n# $SDL2DIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDL2DIR used in building SDL.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL2.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file kitware license.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_modules/FindSDL2_ttf.cmake" : {
      "ObjectId" : "67b40f9cf0961de7639d82e9712b66dc2b700b0f",
      "LastModified" : "2017-08-16T13:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSDL2_ttf\n\n# ------------\n\n#\n\n# Locate SDL2_ttf library\n\n#\n\n# This module defines:\n\n#\n\n# ::\n\n#\n\n#   SDL2_TTF_LIBRARIES, the name of the library to link against\n\n#   SDL2_TTF_INCLUDE_DIRS, where to find the headers\n\n#   SDL2_TTF_FOUND, if false, do not try to link against\n\n#   SDL2_TTF_VERSION_STRING - human-readable string containing the version of SDL2_ttf\n\n#\n\n# $SDL2DIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDL2DIR used in building SDL.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL2.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file kitware license.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "afaed162566311cb1cb48ab4be61fe3fbd701f7d",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake_modules/VCMIUtils.cmake" : {
      "ObjectId" : "4a7cdf1e4d35b964d0c2d60aa754b2a1b90aff8f",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should contain custom functions and macro and them only.\n\n# It's should not alter any configuration on inclusion\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################\n\n#        Build output path            #\n\n#######################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Multi-config builds for Visual Studio, Xcode\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Generic no-config case for Makefiles, Ninja.\n\n# This is what Qt Creator is using\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#######################################\n\n#        Project generation           #\n\n#######################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Let us have proper tree-like structure in IDEs such as Visual Studio\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Macro to add subdirectory and set appropriate FOLDER for generated projects files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Macro for Xcode Projects generation\n\n# Slightly outdated, but useful reference for all options available here:\n\n# https://pewpewthespells.com/blog/buildsettings.html\n\n# https://github.com/samdmarshall/Xcode-Build-Settings-Reference\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################\n\n#        CMake debugging              #\n\n#######################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Can be called to see check cmake variables and environment variables\n\n# For \"install\" debugging just copy it here. There no easy way to include modules from source.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Print CMake variables most important for debugging\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tmessage(STATUS \"PROJECT_BINARY_DIR: \" ${PROJECT_BINARY_DIR})\n\n#\tmessage(STATUS \"PROJECT_SOURCE_DIR: \" ${PROJECT_SOURCE_DIR})\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\tmessage(STATUS \"CMAKE_CURRENT_LIST_FILE and LINE: ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}\")\n\n#\tmessage(STATUS \"CMAKE_INCLUDE_PATH: \" ${CMAKE_INCLUDE_PATH})\n\n#\tmessage(STATUS \"CMAKE_LIBRARY_PATH: \" ${CMAKE_LIBRARY_PATH})\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\tmessage(STATUS \"CMAKE_COMPILER_IS_GNUCC: \" ${CMAKE_COMPILER_IS_GNUCC})\n\n#\tmessage(STATUS \"CMAKE_COMPILER_IS_GNUCXX: \" ${CMAKE_COMPILER_IS_GNUCXX})\n\n#\tmessage(STATUS \"CMAKE_C_FLAGS: \" ${CMAKE_C_FLAGS})\n\n#\tmessage(STATUS \"CMAKE_CXX_FLAGS: \" ${CMAKE_CXX_FLAGS})\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Print Git commit hash\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake_modules/Version.cmake" : {
      "ObjectId" : "c39dcfc0f83c70cb99bb8533debe5df1dbd99818",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake_modules/cotire.cmake" : {
      "ObjectId" : "62cd23db987b85040a47799c88a720a5c8e2952d",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2017 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# strict checking for break() command\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 209,
        "CharPositionInLine" : 7
      },
      "19" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# remove from head\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 344,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# option with separate argument\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# remember option\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# option with joined argument\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# flush remembered option\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 422,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# add target compile flags\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# target compile options\n",
        "Line" : 444,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 451,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 462,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 482,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 494,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# platform specific flags\n",
        "Line" : 505,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# default include dirs\n",
        "Line" : 540,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 547,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 559,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# target include directories\n",
        "Line" : 571,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 583,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 591,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 687,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# target export define symbol\n",
        "Line" : 691,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 696,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# target compile definitions\n",
        "Line" : 705,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 714,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 723,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 739,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 894,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 983,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1027,
        "CharPositionInLine" : 3
      },
      "55" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1035,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1038,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# header is outside\n",
        "Line" : 1052,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1063,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# check header file extension\n",
        "Line" : 1073,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1086,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1091,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# GCC like output\n",
        "Line" : 1100,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1116,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1119,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1121,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# then separate lines\n",
        "Line" : 1123,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1126,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1144,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# update stack\n",
        "Line" : 1154,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1170,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1172,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1179,
        "CharPositionInLine" : 5
      },
      "73" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1188,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1200,
        "CharPositionInLine" : 5
      },
      "75" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1238,
        "CharPositionInLine" : 1
      },
      "76" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1254,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1405,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# create empty log file\n",
        "Line" : 1446,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1462,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1499,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# append to list\n",
        "Line" : 1508,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1511,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1515,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# append to list\n",
        "Line" : 1520,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1526,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1533,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# append to list\n",
        "Line" : 1538,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1541,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1546,
        "CharPositionInLine" : 3
      },
      "90" : {
        "Text" : "# append to list\n",
        "Line" : 1555,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1558,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1562,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# append to list\n",
        "Line" : 1567,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1573,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1592,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# append to list\n",
        "Line" : 1603,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1610,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1617,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# append to list\n",
        "Line" : 1626,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1629,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1637,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# append to list\n",
        "Line" : 1649,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1656,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1663,
        "CharPositionInLine" : 3
      },
      "105" : {
        "Text" : "# append to list\n",
        "Line" : 1678,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1689,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1708,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# append to list\n",
        "Line" : 1716,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1722,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1729,
        "CharPositionInLine" : 3
      },
      "111" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1734,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1739,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# append to list\n",
        "Line" : 1744,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1747,
        "CharPositionInLine" : 3
      },
      "116" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1751,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# append to list\n",
        "Line" : 1757,
        "CharPositionInLine" : 3
      },
      "118" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1760,
        "CharPositionInLine" : 3
      },
      "119" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1766,
        "CharPositionInLine" : 3
      },
      "120" : {
        "Text" : "# append to list\n",
        "Line" : 1774,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1780,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1787,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# append to list\n",
        "Line" : 1789,
        "CharPositionInLine" : 5
      },
      "124" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1792,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1797,
        "CharPositionInLine" : 3
      },
      "126" : {
        "Text" : "# append to list\n",
        "Line" : 1810,
        "CharPositionInLine" : 5
      },
      "127" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1818,
        "CharPositionInLine" : 5
      },
      "128" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1827,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# append to list\n",
        "Line" : 1829,
        "CharPositionInLine" : 5
      },
      "130" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1832,
        "CharPositionInLine" : 5
      },
      "131" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1869,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Newer versions of Clang and GCC seem to embed a compilation timestamp into the precompiled header binary,\n\n# which results in \"file has been modified since the precompiled header was built\" errors if ccache is used.\n\n# We work around the problem by disabling ccache upon pre-compiling the prefix header.\n",
        "Line" : 1874,
        "CharPositionInLine" : 3
      },
      "133" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1893,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1897,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1904,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1907,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1946,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1965,
        "CharPositionInLine" : 1
      },
      "139" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 2008,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 2019,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 2022,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2093,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2098,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2101,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2104,
        "CharPositionInLine" : 4
      },
      "146" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2107,
        "CharPositionInLine" : 4
      },
      "147" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2139,
        "CharPositionInLine" : 1
      },
      "148" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2143,
        "CharPositionInLine" : 2
      },
      "149" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2148,
        "CharPositionInLine" : 2
      },
      "150" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2165,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2178,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2203,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2208,
        "CharPositionInLine" : 3
      },
      "154" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2215,
        "CharPositionInLine" : 1
      },
      "155" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2218,
        "CharPositionInLine" : 1
      },
      "156" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2223,
        "CharPositionInLine" : 1
      },
      "157" : {
        "Text" : "# generate target script file\n",
        "Line" : 2246,
        "CharPositionInLine" : 1
      },
      "158" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2251,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2265,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2274,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2276,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2280,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2289,
        "CharPositionInLine" : 3
      },
      "164" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2311,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2316,
        "CharPositionInLine" : 3
      },
      "166" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2323,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2329,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2336,
        "CharPositionInLine" : 3
      },
      "169" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2339,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2346,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2353,
        "CharPositionInLine" : 1
      },
      "172" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2355,
        "CharPositionInLine" : 1
      },
      "173" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2419,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2430,
        "CharPositionInLine" : 3
      },
      "175" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2441,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2449,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2453,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2457,
        "CharPositionInLine" : 3
      },
      "179" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2479,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2485,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2494,
        "CharPositionInLine" : 3
      },
      "182" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2502,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2532,
        "CharPositionInLine" : 1
      },
      "184" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2550,
        "CharPositionInLine" : 1
      },
      "185" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2555,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2580,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2589,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2598,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2605,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2780,
        "CharPositionInLine" : 3
      },
      "191" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2784,
        "CharPositionInLine" : 3
      },
      "192" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2798,
        "CharPositionInLine" : 3
      },
      "193" : {
        "Text" : "# use all available cores\n",
        "Line" : 2818,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2843,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2850,
        "CharPositionInLine" : 1
      },
      "196" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2860,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2865,
        "CharPositionInLine" : 1
      },
      "198" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2867,
        "CharPositionInLine" : 2
      },
      "199" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2876,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2886,
        "CharPositionInLine" : 4
      },
      "201" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2893,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2897,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2925,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2930,
        "CharPositionInLine" : 4
      },
      "205" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2945,
        "CharPositionInLine" : 2
      },
      "206" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2966,
        "CharPositionInLine" : 3
      },
      "207" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2974,
        "CharPositionInLine" : 3
      },
      "208" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2997,
        "CharPositionInLine" : 4
      },
      "209" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 3009,
        "CharPositionInLine" : 1
      },
      "210" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 3019,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 3022,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 3027,
        "CharPositionInLine" : 2
      },
      "213" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 3037,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# generate unity target\n",
        "Line" : 3044,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# depend on original target's automoc target, if it exists\n",
        "Line" : 3051,
        "CharPositionInLine" : 2
      },
      "216" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 3057,
        "CharPositionInLine" : 3
      },
      "217" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3065,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3075,
        "CharPositionInLine" : 3
      },
      "219" : {
        "Text" : "# copy output name\n",
        "Line" : 3100,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3108,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# copy compile features\n",
        "Line" : 3120,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3125,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3133,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3144,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3147,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3153,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3169,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3177,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3182,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3206,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# resolve alias\n",
        "Line" : 3218,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3226,
        "CharPositionInLine" : 1
      },
      "233" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3242,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3247,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3296,
        "CharPositionInLine" : 4
      },
      "236" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3358,
        "CharPositionInLine" : 1
      },
      "237" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3445,
        "CharPositionInLine" : 1
      },
      "238" : {
        "Text" : "# include target script if available\n",
        "Line" : 3457,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3459,
        "CharPositionInLine" : 2
      },
      "240" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3475,
        "CharPositionInLine" : 1
      },
      "241" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3495,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3498,
        "CharPositionInLine" : 3
      },
      "243" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3517,
        "CharPositionInLine" : 3
      },
      "244" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3520,
        "CharPositionInLine" : 3
      },
      "245" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3588,
        "CharPositionInLine" : 3
      },
      "246" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3591,
        "CharPositionInLine" : 3
      },
      "247" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3614,
        "CharPositionInLine" : 1
      },
      "248" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3651,
        "CharPositionInLine" : 3
      },
      "249" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3685,
        "CharPositionInLine" : 2
      },
      "250" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3699,
        "CharPositionInLine" : 3
      },
      "251" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3706,
        "CharPositionInLine" : 1
      },
      "252" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3759,
        "CharPositionInLine" : 1
      },
      "253" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3831,
        "CharPositionInLine" : 1
      },
      "254" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3995,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 255
    },
    "launcher/CMakeLists.txt" : {
      "ObjectId" : "250e0ac6cf6507b734a1d50982d2e32269498684",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell CMake to run moc when necessary:\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As moc files are generated in the binary dir, tell CMake\n\n# to always look for includes there:\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Executables fail to build with Qt 5 in the default configuration\n\n# without -fPIE. We add that here.\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# FIXME: Can't to get CMP0020 working with Vcpkg and CMake 3.8.2\n\n# So far I tried:\n\n# - cmake_minimum_required set to 2.8.11 globally and in this file\n\n# - cmake_policy in all possible places\n\n# - used NO_POLICY_SCOPE to make sure no other parts reset policies\n\n# Still nothing worked, warning kept appearing and WinMain didn't link automatically\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# This makes Xcode project prettier by moving vcmilauncher_autogen directory into vcmiclient subfolder\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# temporary(?) disabled - generation of PCH takes too much time since cotire is trying to collect all Qt headers\n\n#set_target_properties(vcmilauncher PROPERTIES ${PCH_PROPERTIES})\n\n#cotire(vcmilauncher)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Copy to build directory for easier debugging\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# copy whole directory\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install icons and desktop file on Linux\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "fdfba6656186616ec0d0f7321af92488bdf80558",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Version.cpp is a generated file\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We want to deploy assets into build directory for easier debugging without install\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Update version before vcmi compiling\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "lib/minizip/CMakeLists.txt" : {
      "ObjectId" : "f2d966af1421460de92b94039cc0b42589819a13",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#NOTE: full library consists from several more files\n\n# but right now VCMI does not need any extra functionality\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "osx/CMakeLists.txt" : {
      "ObjectId" : "845cb7d59c8f59ab52c0100a3addc3c603500129",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to keep this code into separate directory so CMake will execute it after all other subdirectories install code\n\n# Otherwise we can't fix Mac bundle dependencies since binaries wouldn't be there when this code executed\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This will likely only work for Vcpkg\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Temporary ugly fix for Qt deployment since windeployqt broken in Vcpkg\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "scripting/erm/CMakeLists.txt" : {
      "ObjectId" : "f0fb4074841e06d24a030b9b192826891bc2c1cd",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "server/CMakeLists.txt" : {
      "ObjectId" : "de4f179c0c8927392c91c4565f5fdba4aea39834",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# android needs client/server to be libraries, not executables, so we can't reuse the build part of this script\n",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "6ad71bd1256496c5860901eaaffc36d9c80a3553",
      "LastModified" : "2019-03-28T13:56:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Running tests one by one using ctest not recommended due to vcmi having\n\n# slow global initialization.\n",
        "Line" : 123,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 25
  },
  "ElapsedTime" : 3763
}