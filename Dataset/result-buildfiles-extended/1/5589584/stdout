{
  "Repository" : "5589584",
  "Revision" : "HEAD",
  "ObjectId" : "bb2eed8ec5a722ce1da1e36471703bcb05df5f63",
  "CommitTime" : "2019-04-18T12:41:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "bd106c7ffbf9bd73cc09e6ad6bd8661104a35c2a",
      "LastModified" : "2018-12-13T21:27:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This policy is not known to versions prior 3.1 and would result in errors,\n\n# if set on such systems. This can be removed when cmake_minimum_required is set\n\n# to 3.1 or newer by using:\n\n# cmake_policy(VERSION 3.1)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This policy is not known to versions prior 3.11 and would result in errors,\n\n# if set on such systems. This can be removed when cmake_minimum_required is set\n\n# to 3.11 or newer  by using:\n\n# cmake_policy(VERSION 3.11)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO(stonerl): Check on later Ubuntu releases whether this workaround is\n\n# still needed or not.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# DISTRO_NAME is different on the build-servers.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This policy is not known to versions prior 3.12 and would result in errors,\n\n# if set on such systems. This can be removed when cmake_minimum_required is set\n\n# to 3.12 or newer  by using:\n\n# cmake_policy(VERSION 3.12)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define the directory structure for installation - will be hardcoded in WL bin\n\n# (through config.h). If not specified, we are going to use the directory where\n\n# the executable is in. Also on Linux.\n\n# Packagers (or people using make install) have to set this variable to an absolute path.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define the directory structure for installation of the data files - will be hardcoded\n\n# in WL bin (through config.h). If not specified, we are going to use the \"data\" directory\n\n# below the directory where the executable is in. Also on Linux.\n\n# Packagers (or people using make install) have to set this variable to an absolute path.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Disable no symbols warning on macOS, but only on versions where this is\n\n# supported. It is not supported on OS X 10.7 (DARWIN_MAJOR_VERSION == 11).\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO(sirver): One day, this should be enabled. Then we have no more cycles in our dependencies....\n\n# set_property(GLOBAL PROPERTY GLOBAL_DEPENDS_NO_CYCLES ON)\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# See http://clang.llvm.org/docs/AddressSanitizer.html\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# This is set to avoid linker errors when using GLVND-libs on Linux\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Disabled warnings that are overly verbose right now or just do not make sense.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# It is impossible to write code that both GCC and Clang will like,\n\n# so we have to switch off the warning for one of them.\n\n# http://clang-developers.42468.n3.nabble.com/Question-on-Wswitch-enum-td4025927.html\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# TODO(sirver): weak-vtables should be enabled, but leads to lot of errors right now.\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Assuming GCC 4.8 or higher.\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# This is needed for getenv().\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# SDL and MinGW both declare 'unsigned int __builtin_ia32_crc32qi(unsigned int, unsigned char)', resulting in lots of warnings. So, we can't have this flag in Windows.\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Because of: https://svn.boost.org/trac/boost/ticket/9240.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Turn some warnings into errors.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# on BSD this must be explicitly linked\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Not needed on Debian GNU/kFreeBSD..\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# OpenBSD needs the X11 include directory in order to find GL/glu.h\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Enable testing.\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Run a test after a normal compile. This magic is needed as 'make test' will\n\n# not rebuild tests:\n\n# http://stackoverflow.com/questions/733475/cmake-ctest-make-test-doesnt-build-tests\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Installation.\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# install files to the correct locations here\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "cmake/BzrRevision.cmake" : {
      "ObjectId" : "f410aea5d47838d18b771d455c596d9eb3e88452",
      "LastModified" : "2018-09-26T13:47:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/IncludeDirectories.cmake" : {
      "ObjectId" : "da72a6ca162053bf622e1bf6e2f15c1e4dde4fe7",
      "LastModified" : "2014-07-13T09:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/IncludeDirectoriesOld.cmake" : {
      "ObjectId" : "40f4a3ec13aeda5447f79a74a725b24163b36f7d",
      "LastModified" : "2014-07-13T09:26:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/InputRevision.cmake" : {
      "ObjectId" : "1b2a2e21d96588a6b64dc41104e2d8748be5fbfe",
      "LastModified" : "2014-06-12T08:56:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindGLEW.cmake" : {
      "ObjectId" : "97345caa41ee41d977f82e43105730f120c44788",
      "LastModified" : "2015-10-20T19:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GLEW\n\n# Once done this will define\n\n#  \n\n#  GLEW_FOUND        - system has GLEW\n\n#  GLEW_INCLUDE_DIR  - the GLEW include directory\n\n#  GLEW_LIBRARY_DIR  - where the libraries are\n\n#  GLEW_LIBRARY      - Link these to use GLEW\n\n#   \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Static library version requires extra flag\n",
        "Line" : 28,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindICU.cmake" : {
      "ObjectId" : "f65b529e16206d228658337f0ec715421190f2c7",
      "LastModified" : "2015-10-20T19:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from https://github.com/julp/FindICU.cmake\n\n#\n\n# This module can find the International Components for Unicode (ICU) Library\n\n#\n\n# Requirements:\n\n# - CMake >= 2.8.3 (for new version of find_package_handle_standard_args)\n\n#\n\n# The following variables will be defined for your use:\n\n#   - ICU_FOUND             : were all of your specified components found (include dependencies)?\n\n#   - ICU_INCLUDE_DIRS      : ICU include directory\n\n#   - ICU_LIBRARIES         : ICU libraries\n\n#   - ICU_VERSION           : complete version of ICU (x.y.z)\n\n#   - ICU_MAJOR_VERSION     : major version of ICU\n\n#   - ICU_MINOR_VERSION     : minor version of ICU\n\n#   - ICU_PATCH_VERSION     : patch version of ICU\n\n#   - ICU_<COMPONENT>_FOUND : were <COMPONENT> found? (FALSE for non specified component if it is not a dependency)\n\n#\n\n# For windows or non standard installation, define ICU_ROOT variable to point to the root installation of ICU. Two ways:\n\n#   - run cmake with -DICU_ROOT=<PATH>\n\n#   - define an environment variable with the same name before running cmake\n\n# With cmake-gui, before pressing \"Configure\":\n\n#   1) Press \"Add Entry\" button\n\n#   2) Add a new entry defined as:\n\n#     - Name: ICU_ROOT\n\n#     - Type: choose PATH in the selection list\n\n#     - Press \"...\" button and select the root installation of ICU\n\n#\n\n# Example Usage:\n\n#\n\n#   1. Copy this file in the root of your project source directory\n\n#   2. Then, tell CMake to search this non-standard module in your project directory by adding to your CMakeLists.txt:\n\n#     set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n\n#   3. Finally call find_package() once, here are some examples to pick from\n\n#\n\n#   Require ICU 4.4 or later\n\n#     find_package(ICU 4.4 REQUIRED)\n\n#\n\n#   if(ICU_FOUND)\n\n#      include_directories(${ICU_INCLUDE_DIRS})\n\n#      add_executable(myapp myapp.c)\n\n#      target_link_libraries(myapp ${ICU_LIBRARIES})\n\n#   endif(ICU_FOUND)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright (c) 2011-2013, julp\n\n#\n\n# Distributed under the OSI-approved BSD License\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#=============================================================================\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########## Private ##########\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prefix for all ICU relative public variables\n",
        "Line" : 57,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# Prefix for all ICU relative internal variables\n",
        "Line" : 60,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Prefix for all pkg-config relative internal variables\n",
        "Line" : 63,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# <icu component name> <library name 1> ... <library name N>\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Common and Data libraries\n\n# Internationalization library\n\n# Stream and I/O Library\n\n# Layout library\n\n# Paragraph Layout library\n",
        "Line" : 101,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "########## Public ##########\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# may be done in the icu_declare_component macro\n",
        "Line" : 119,
        "CharPositionInLine" : 85
      },
      "10" : {
        "Text" : "# Check components\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# uc required at least\n",
        "Line" : 123,
        "CharPositionInLine" : 45
      },
      "12" : {
        "Text" : "# Includes\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########## <part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# ICU >= 4\n",
        "Line" : 146,
        "CharPositionInLine" : 72
      },
      "15" : {
        "Text" : "# ICU [2;4[\n",
        "Line" : 148,
        "CharPositionInLine" : 77
      },
      "16" : {
        "Text" : "# ICU [1.4;2[\n",
        "Line" : 150,
        "CharPositionInLine" : 75
      },
      "17" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 152,
        "CharPositionInLine" : 67
      },
      "18" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 158,
        "CharPositionInLine" : 105
      },
      "19" : {
        "Text" : "# [1.3;1.4[ as #define ICU_VERSION \"3\" (no patch version, ie all 1.3.X versions will be detected as 1.3.0)\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#\n\n# Since version 4.9.1, ICU release version numbering was totaly changed, see:\n\n# - http://site.icu-project.org/download/49\n\n# - http://userguide.icu-project.org/design#TOC-Version-Numbers-in-ICU\n\n#\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# ICU [1.4;1.8[\n",
        "Line" : 172,
        "CharPositionInLine" : 125
      },
      "22" : {
        "Text" : "# [1.4;1.8[ as #define U_ICU_VERSION \"1.4.1.2\" but it seems that some 1.4.1(?:\\.\\d)? have releasing error and appears as 1.4.0\n",
        "Line" : 173,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# copy CMAKE_MATCH_1, no longer valid on the following if\n",
        "Line" : 174,
        "CharPositionInLine" : 67
      },
      "24" : {
        "Text" : "########## </part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Check dependencies (implies pkg-config)\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Check libraries\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# both not found\n",
        "Line" : 233,
        "CharPositionInLine" : 160
      },
      "28" : {
        "Text" : "# one or both found\n",
        "Line" : 236,
        "CharPositionInLine" : 162
      },
      "29" : {
        "Text" : "# release not found => we are in debug\n",
        "Line" : 238,
        "CharPositionInLine" : 89
      },
      "30" : {
        "Text" : "# debug not found => we are in release\n",
        "Line" : 240,
        "CharPositionInLine" : 91
      },
      "31" : {
        "Text" : "# both found\n",
        "Line" : 242,
        "CharPositionInLine" : 19
      },
      "32" : {
        "Text" : "# Try to find out compiler flags\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Check find_package arguments\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# IN (args)\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# OUT\n\n# Found\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Flags\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Linking\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Version\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "cmake/Modules/FindSDL2.cmake" : {
      "ObjectId" : "7b6fc34df9d5967094bcf09cd326970ddb85b701",
      "LastModified" : "2015-10-20T19:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL_main will be linked in because \n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the \n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this \n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL library \n\n# (SDL.dll, libsdl.so, SDL.framework, etc). \n\n# Set SDL_LIBRARY_TEMP to point to your SDL library, and configure again. \n\n# Similarly, if you see an empty SDLMAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL_LIBRARY\n\n# variable, but when these values are unset, SDL_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing. \n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and \n\n# additional Unix paths (FreeBSD, etc). \n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDLmain which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of \n\n# SDL_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 76,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 77,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 78,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#Win32\n",
        "Line" : 80,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "#MESSAGE(STATUS \"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to \n\n# SDLmain. This is mainly for Windows and OS X. Other (Unix) platforms \n\n# seem to provide SDLmain for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# SDL may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the \n\n# frameworks may already provide it. \n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDLmain -lSDL -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDLmain\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even \n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the \n\n# \"real\" variable in one-shot.\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#MESSAGE(STATUS \"SDL2_LIBRARY is ${SDL2_LIBRARY}\")\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/Modules/FindSDL2_image.cmake" : {
      "ObjectId" : "a8ed7786103af06264ad3fa4e5e305d3a85875c9",
      "LastModified" : "2015-10-20T19:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_image library\r\n\n# This module defines:\r\n\n#  SDL2_IMAGE_LIBRARIES, the name of the library to link against\r\n\n#  SDL2_IMAGE_INCLUDE_DIRS, where to find the headers\r\n\n#  SDL2_IMAGE_FOUND, if false, do not try to link against\r\n\n#  SDL2_IMAGE_VERSION_STRING - human-readable string containing the version of SDL_image\r\n\n#\r\n\n# For backward compatiblity the following variables are also set:\r\n\n#  SDL2IMAGE_LIBRARY (same value as SDL2_IMAGE_LIBRARIES)\r\n\n#  SDL2IMAGE_INCLUDE_DIR (same value as SDL2_IMAGE_INCLUDE_DIRS)\r\n\n#  SDL2IMAGE_FOUND (same value as SDL2_IMAGE_FOUND)\r\n\n#\r\n\n# $SDL2DIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$SDL2DIR\r\n\n# used in building SDL2.\r\n\n#\r\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake\r\n\n# module, but with modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2005-2009 Kitware, Inc.\r\n\n# Copyright 2012 Benjamin Eikel\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\r\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for backward compatiblity\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindSDL2_mixer.cmake" : {
      "ObjectId" : "00a4b7a0e09a698343e24ba3f1771bab90d0868c",
      "LastModified" : "2015-10-20T19:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_mixer library\r\n\n# This module defines:\r\n\n#  SDL2_MIXER_LIBRARIES, the name of the library to link against\r\n\n#  SDL2_MIXER_INCLUDE_DIRS, where to find the headers\r\n\n#  SDL2_MIXER_FOUND, if false, do not try to link against\r\n\n#  SDL2_MIXER_VERSION_STRING - human-readable string containing the version of SDL_mixer\r\n\n#\r\n\n# For backward compatiblity the following variables are also set:\r\n\n#  SDL2MIXER_LIBRARY (same value as SDL2_MIXER_LIBRARIES)\r\n\n#  SDL2MIXER_INCLUDE_DIR (same value as SDL2_MIXER_INCLUDE_DIRS)\r\n\n#  SDL2MIXER_FOUND (same value as SDL2_MIXER_FOUND)\r\n\n#\r\n\n# $SDL2DIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$SDL2DIR\r\n\n# used in building SDL2.\r\n\n#\r\n\n# Created by Eric Wing. This was influenced by the FindSDL2.cmake\r\n\n# module, but with modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2005-2009 Kitware, Inc.\r\n\n# Copyright 2012 Benjamin Eikel\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\r\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for backward compatiblity\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindSDL2_ttf.cmake" : {
      "ObjectId" : "5d132964af674dfa5379e0e4693a64b4a5f891cb",
      "LastModified" : "2015-10-20T19:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_ttf library\r\n\n# This module defines:\r\n\n#  SDL2_TTF_LIBRARIES, the name of the library to link against\r\n\n#  SDL2_TTF_INCLUDE_DIRS, where to find the headers\r\n\n#  SDL2_TTF_FOUND, if false, do not try to link against\r\n\n#  SDL2_TTF_VERSION_STRING - human-readable string containing the version of SDL2_ttf\r\n\n#\r\n\n# For backward compatiblity the following variables are also set:\r\n\n#  SDL2TTF_LIBRARY (same value as SDL2_TTF_LIBRARIES)\r\n\n#  SDL2TTF_INCLUDE_DIR (same value as SDL2_TTF_INCLUDE_DIRS)\r\n\n#  SDL2TTF_FOUND (same value as SDL2_TTF_FOUND)\r\n\n#\r\n\n# $SDL2DIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$SDL2DIR\r\n\n# used in building SDL2.\r\n\n#\r\n\n# Created by Eric Wing. This was influenced by the FindSDL2.cmake\r\n\n# module, but with modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2005-2009 Kitware, Inc.\r\n\n# Copyright 2012 Benjamin Eikel\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\r\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for backward compatiblity\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/Findintl.cmake" : {
      "ObjectId" : "c31fb6cd49b3c4753d039c3a73378dc4810a859e",
      "LastModified" : "2015-10-20T19:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate intl library\n\n# This module defines\n\n# INTL_LIBRARY, the name of the library to link against\n\n# INTL_FOUND, if false, do not try to link to intl\n\n# INTL_INCLUDE_DIR, where to find libintl.h\n\n#\n\n# $INTLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$INTLDIR\n\n# used in building libintl.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake \n\n# module, but with modifications to recognize OS X frameworks and \n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/UseSystemInfo.cmake" : {
      "ObjectId" : "2347bdd10c3941830fdd526e70256e1d473db7ab",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Print CMake and OS distribution version\n\n# \n\n# This file comes courtesy of opm-project.org\n\n# https://github.com/OPM/opm-common/blob/master/cmake/Modules/UseSystemInfo.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# query operating system for information\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# split multi-line into various fields\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# get the various fields\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# remove extraneous whitespace\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# assemble result variable\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# probe various system files that may be found\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# start with /etc/os-release,\n\n# see <http://0pointer.de/blog/projects/os-release.html>\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# previous \"standard\", used on older Ubuntu and Debian\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# RHEL/CentOS etc. has just a text-file\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# no yet known release file found\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# return from function (into appropriate variable)\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# read property from the newer /etc/os-release\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# remove trailing quote that got globbed by the wildcard (greedy match)\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# the following code is adapted from commit f7467762 of the code at\n\n# <https://github.com/petroules/solar-cmake/blob/master/TargetArch.cmake>\n\n# which is Copyright (c) 2012 Petroules Corporation, and which at the\n\n# time of download (2013-04-07 12:30 CET) is made available with a BSD license.\n\n#\n\n# it attempts to compile a program which detects the architecture from the\n\n# preprocessor symbols and communicate this back to us through an error message(!)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# OS X is capable of building for *several* architectures at once in\n\n# the Mach-O binary, and there is a variable that tells us which those\n\n# are, but they may be in any order, so they must be normalized\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# detect each of the possible candidates as a separate flag\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# add all architectures back in normalized order\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# use the preprocessor defines to determine which target architectures\n\n# that are available\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# write a temporary program that can be compiled to get the result\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# parse the architecture name from the compiler output\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# get rid of the value marker leaving just the architecture name\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# if we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 23
    },
    "cmake/WlFunctions.cmake" : {
      "ObjectId" : "dd8664e9a6b65ad3e419542ae138973122948e1d",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Utilize cmake_parse_arguments standard function to parse for common arguments.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Is a third party lib. Less warnings, no codecheck.\n",
        "Line" : 5,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "# Pure C library. No CXX flags.\n",
        "Line" : 6,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# Windows binary/library.\n",
        "Line" : 7,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Set variable VAR to VALUE if it is not set or empty. Does nothing if already set.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add DIR as include directores for TARGET. Depending on cmake version the way how\n\n# it works is different.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add DIR as SYSTEM include directores for TARGET. Depending on cmake version the way how\n\n# it works is different. SYSTEM includes silence warnings for included headers etc.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add common compile tasks, like includes and libraries to link against for third party\n\n# libraries, and codecheck hook for sources.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is needed for header only libraries. While they do not really mean\n\n# anything for cmake, they are useful to make dependencies explicit.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Disable all warnings for third_party.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# src/ is the base for all of our includes. The binary one is for generated files.\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Boost is practically the standard library, so we always add a search path\n\n# to include it easily. Except for third party.\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# OpenGL and GLEW are one thing for us. If you use the one, you also use the\n\n# other. We always add definitions, because add_definition() is not\n\n# transitive and therefore some dependent targets do not set them properly.\n\n# And a few -D do not hurt anything.\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Early versions of glbinding defined GLBINDING_INCLUDES, newer use\n\n# cmake's module system.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# libintl is not used on all systems, so only include it, when we actually\n\n# found it.\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Common library target definition.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# increase the tries for the linker searching for cyclic dependencies\n\n# TODO(sirver): remove this once cycling dependencies are history in widelands\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Common test target definition.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If boost unit test library is linked dynamically, BOOST_TEST_DYN_LINK must be defined\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Tests need to link with SDL2 library without main.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Checks a single 'SRC' file using Codecheck and writes a file named\n\n# codecheck_<shasum of input> if the codecheck did not yield anything. The\n\n# target for the codecheck will be added as a dependency to 'NAME' for debug\n\n# builds, but always for the target 'codecheck', so that make codecheck checks\n\n# all source code.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# If the file does not exist, it is probably auto-generated. In that case, it\n\n# makes no sense to codecheck it.\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Add a compiler flag VAR_NAME=FLAG. If VAR_NAME is already set, FLAG is appended.\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Common binary target definition.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#Quoting the CMake documentation on DESTINATION:\n\n#\"If a relative path is given it is interpreted relative to the value of CMAKE_INSTALL_PREFIX\"\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 25
    },
    "cmake/codecheck/CodeCheck.cmake" : {
      "ObjectId" : "173039b273ac71b3a743e104cecb89c79581d0ee",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "119b78e639c47ecbaad618a43515d0068985d64f",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/sphinx/Makefile" : {
      "ObjectId" : "d3920c706b3db92eaaf222c3cd77d59875ae4e54",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "doc/sphinx/source/images/geometry/Makefile" : {
      "ObjectId" : "3c0123ebbfc70f40a11af7e091373c34aa22f7a8",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "3b355dbd8a9bde13e1c61c1509ebfe3cda3fb5ce",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "po/CheckLocale.cmake" : {
      "ObjectId" : "fcc86be3fbfac0ef18ee16c37bdf35ee63070051",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "2cf1891d5ace681bf79d44334f8251c59f815ddf",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Catchall target to codecheck all files.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A target that depends on all unit tests as 'make test' will not rebuild\n\n# tests:\n\n# http://stackoverflow.com/questions/733475/cmake-ctest-make-test-doesnt-build-tests\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include the cmake version dependend macro _include_directories\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO(unknown): Ideally widelands_ball_of_mud shouldn't exist, everything should be in a\n\n# library.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO(sirver): Split into libs with useful names.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/ai/CMakeLists.txt" : {
      "ObjectId" : "f3c1b5e50fb0df4405aea20ac3e9f6dbea46444f",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/base/CMakeLists.txt" : {
      "ObjectId" : "189a4539eea0ecf408194466602899ef5fffb3f6",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/build_info.cc.cmake" : {
      "ObjectId" : "e97ba2acf8e6a4c387e4966434a912d8005cc1a8",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "src/chat/CMakeLists.txt" : {
      "ObjectId" : "a404cf0221474ea292be03b7592c62c74d0b42d7",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/config.h.cmake" : {
      "ObjectId" : "744e98ef7fd1b005ffb71357d1a34e8bc750a4f6",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "// This is the path where the data files are located; If this is an absolute\n// path (i.e. starting with a /), it will be interpreted as such. If it is a\n// relative path it will be interpreted to be relative to the executable. For a\n// standard Linux installation, this should be\n// \"/usr/local/share/games/widelands\" or something along these lines.",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "// True if getenv has been found.",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/economy/CMakeLists.txt" : {
      "ObjectId" : "154b27f67207956cd934cff850708ecaf0adbc79",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/economy/test/CMakeLists.txt" : {
      "ObjectId" : "3e9bde609e6ca18db3e445540722ae74bd4ad915",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/editor/CMakeLists.txt" : {
      "ObjectId" : "a68227262e62c28ec83ca658a685e27c09c80396",
      "LastModified" : "2019-02-23T08:39:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/game_io/CMakeLists.txt" : {
      "ObjectId" : "9662365b4c4c3c2dd90fdc2f941c815b0452de49",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/graphic/CMakeLists.txt" : {
      "ObjectId" : "d6efe40b664e31a232802d956b7696923f2f6890",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(sirver): Separate this directory into a base directory and one\n\n# that is Widelands aware (can include logic stuff).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Align and color\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Rendering utils\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Logic-aware stuff\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Font handler and text\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO(Gunchleoc): For text_width safety only - rewrite that function\n",
        "Line" : 270,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Base library\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/graphic/text/CMakeLists.txt" : {
      "ObjectId" : "823877fc0558b959205d47ab157799c052fbe7c2",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(GunChleoc): This unit testing project is currently unmaintained\n\n# Reactivate in debian/rules too once work resumes on this\n\n# add_subdirectory(test)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/graphic/text/test/CMakeLists.txt" : {
      "ObjectId" : "5beb318558673cd21378fbf0f9d4acf48d1cbab4",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(GunChleoc): This unit testing project is currently unmaintained\n\n# Reactivate in parent directory once work resumes on this\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Simple binary that renders a text into an image for manual\n\n# testing/experimenting with the rich text renderer.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/graphic/text/test/paths.h.cmake" : {
      "ObjectId" : "b0cf2231d2abd769f70c6ff0a8102673851c9a8b",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "src/io/CMakeLists.txt" : {
      "ObjectId" : "1d128a63afdeeaec0fc2bbd3999cec15ec5b7645",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/io/filesystem/CMakeLists.txt" : {
      "ObjectId" : "47f9991df92f6d87abc24386e44ac70b70683652",
      "LastModified" : "2019-02-23T08:39:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/io/filesystem/test/CMakeLists.txt" : {
      "ObjectId" : "87e96da721c6342d8088e4c775ab29443fc3c503",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logic/CMakeLists.txt" : {
      "ObjectId" : "2c42623e96d4c521b46aaf1933f1d634a7e7c7ea",
      "LastModified" : "2019-02-28T12:22:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(sirver): Uses SDL2 only on WIN32 for a dirty hack.\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/map_io/CMakeLists.txt" : {
      "ObjectId" : "f954720d0f8bf78e3634dfcaa993bd6c1eea931a",
      "LastModified" : "2019-03-11T11:42:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(sirver): separate map_object_loader/saver into\n\n# own library.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/network/CMakeLists.txt" : {
      "ObjectId" : "8b9897b1712bb8634aaa2fcf055b970177a06e04",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/notifications/CMakeLists.txt" : {
      "ObjectId" : "30f5078db44cf539a2f50a971ffbeebdd1494253",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/notifications/test/CMakeLists.txt" : {
      "ObjectId" : "1737c3478a41281c6a8a18dc6dcac754464a531f",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/profile/CMakeLists.txt" : {
      "ObjectId" : "ffcba52653fa812cc57668127e000d76c1c7764a",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/random/CMakeLists.txt" : {
      "ObjectId" : "06b04c8afe4889d87362779cc535a08074ca8368",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/scripting/CMakeLists.txt" : {
      "ObjectId" : "1dca48751bca9ec704a01fc768eb510d5d6a9189",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(sirver): Cyclic dependency. introduce a seam so that logic can\n\n# push/pull new parameters to coroutines.\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/scripting/test/CMakeLists.txt" : {
      "ObjectId" : "1f060776507ef7a08c1469e1e625138e09847443",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/sound/CMakeLists.txt" : {
      "ObjectId" : "65cebccf546316108a69f0a9a2b1ea331230df03",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/third_party/CMakeLists.txt" : {
      "ObjectId" : "8292a620a13eb20d761397fa26af6fcbb7ad8c15",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ui_basic/CMakeLists.txt" : {
      "ObjectId" : "813dbc10d81a2bac3828324b78115d6dd0ccf810",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ui_fsmenu/CMakeLists.txt" : {
      "ObjectId" : "b8946701af0060d9fec8d370bd56eb6bfad7c0a4",
      "LastModified" : "2018-10-17T21:35:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/website/CMakeLists.txt" : {
      "ObjectId" : "0529736a32511aab1957c3e2684fd529ee2356cd",
      "LastModified" : "2019-03-11T11:42:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/website/json/CMakeLists.txt" : {
      "ObjectId" : "c48ac3044af1f9c8721d2af3e92144b988c20d7a",
      "LastModified" : "2019-03-11T11:42:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/wui/CMakeLists.txt" : {
      "ObjectId" : "35080527e8b0b6c1e0541732df1b40ff7e0b1274",
      "LastModified" : "2019-03-11T11:42:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/win32/widelands.rc.cmake" : {
      "ObjectId" : "33e35e966cec30156b0ec3a3c2365de4815d4e70",
      "LastModified" : "2019-03-11T11:42:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include <windows.h> // included for version info constants\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 49,
    "CMAKESOURCE" : 3,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 22809
}