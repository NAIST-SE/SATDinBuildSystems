{
  "Repository" : "76621",
  "Revision" : "HEAD",
  "ObjectId" : "010924901947381d20e83b838502880eb2ffea72",
  "CommitTime" : "2019-01-03T18:55:35Z",
  "Files" : {
    "doc/images/origs/Makefile" : {
      "ObjectId" : "e9cf4cd79221fae7b0c10bf7b946f385a0caecc8",
      "LastModified" : "2012-12-12T01:20:33Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# output format\n\n#FORMAT = eps\n\n#FORMAT = pdf\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# messages\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -F Helvetica\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cleanup\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tools/bootloader/can/at90can/Makefile" : {
      "ObjectId" : "e019ac12d381ac74e42c056b3052b9ac15e60397",
      "LastModified" : "2012-12-12T01:20:33Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hey Emacs, this is a -*- makefile -*-\n\n#----------------------------------------------------------------------------\n\n# WinAVR Makefile Template written by Eric B. Weddington, Jï¿½rg Wunsch, et al.\n\n#\n\n# Released to the Public Domain\n\n#\n\n# Additional material for this makefile was written by:\n\n# Peter Fleury\n\n# Tim Henigan\n\n# Colin O'Flynn\n\n# Reiner Patommel\n\n# Markus Pfaff\n\n# Sander Pool\n\n# Frederik Rouleau\n\n# Carlos Lamas\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging, \n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MCU name\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Processor frequency.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Startaddress of the bootloader, 4096 word\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Target file name (without extension).\n\n#     For library the name will become libTARGET.a\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Object files directory\n\n#     To put object files in current directory, use a dot (.), do NOT make\n\n#     this an empty or blank macro!\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# List C++ source files here. (C dependencies are automatically generated.)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Programming Options\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s]. \n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Place -D or -U options here for C sources\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Place -D or -U options here for ASM sources\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Place -D or -U options here for C++ sources\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#CPPDEFS += -D__STDC_LIMIT_MACROS\n\n#CPPDEFS += -D__STDC_CONSTANT_MACROS\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#---------------- Compiler Options C ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#CFLAGS += -Wno-strict-aliasing\n\n#CFLAGS += -mshort-calls\n\n#CFLAGS += -fno-unit-at-a-time\n\n#CFLAGS += -Wundef\n\n#CFLAGS += -Wunreachable-code\n\n#CFLAGS += -Wsign-compare\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#---------------- Compiler Options C++ ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#CPPFLAGS += -mshort-calls\n\n#CPPFLAGS += -fno-unit-at-a-time\n\n#CPPFLAGS += -Wstrict-prototypes\n\n#CPPFLAGS += -Wunreachable-code\n\n#CPPFLAGS += -Wsign-compare\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#CPPFLAGS += $(CSTANDARD)\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -adhlns:   create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n\n#  -listing-cont-lines: Sets the maximum number of continuation lines of hex \n\n#       dump that will be displayed for a given single line of source input.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#PRINTF_LIB = $(PRINTF_LIB_MIN)\n\n#PRINTF_LIB = $(PRINTF_LIB_FLOAT)\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# List any extra directories to look for libraries here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#---------------- External Memory Options ----------------\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# used for variables (.data/.bss) and heap (malloc()).\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# only used for heap (malloc()).\n\n#EXTMEMOPTS = -Wl,--section-start,.data=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#LDFLAGS += -nostartfiles\n\n#LDFLAGS += -nodefaultlibs\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#LDFLAGS += -T linker_script.x\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Programming hardware: alf avr910 avrisp bascom bsd \n\n# dt006 pavr picoweb pony-stk200 sp12 stk200 stk500\n\n#\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(OBJDIR)/$(TARGET).eep\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when \n\n#     avarice is running on a different computer.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#============================================================================\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Define all object files.\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Default target.\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Change the build target to build a HEX file or a library.\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Display size of file.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#ELFSIZE = $(SIZE) --mcu=$(MCU) --format=avr $(OBJDIR)/$(TARGET).elf\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Program the device.  \n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set \n\n#     a breakpoint at main().\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Compile: create object files from C source files.\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Compile: create object files from C++ source files.\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Compile: create assembler files from C++ source files.\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Create object files directory\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 83
    },
    "tools/bootloader/can/mcp2515/Makefile" : {
      "ObjectId" : "c719e4c6c28b8ce609c68eaea64ca14a37217588",
      "LastModified" : "2012-12-12T01:20:33Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hey Emacs, this is a -*- makefile -*-\n\n#----------------------------------------------------------------------------\n\n# WinAVR Makefile Template written by Eric B. Weddington, Jï¿½rg Wunsch, et al.\n\n#\n\n# Released to the Public Domain\n\n#\n\n# Additional material for this makefile was written by:\n\n# Peter Fleury\n\n# Tim Henigan\n\n# Colin O'Flynn\n\n# Reiner Patommel\n\n# Markus Pfaff\n\n# Sander Pool\n\n# Frederik Rouleau\n\n# Carlos Lamas\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging, \n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MCU name\n\n#MCU = atmega8\n\n#MCU = atmega88\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MCU = atmega16\n\n#MCU = atmega32\n\n#MCU = atmega644\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Processor frequency.\n\n#F_CPU =  4000000\n\n#F_CPU =  7372800\n\n#F_CPU =  8000000\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#F_CPU = 16000000\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Bootloader address:\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Startaddress of the bootloader (512 words)\n\n#     ATMega8/88    => 0x1C00\n\n#     ATMega16/168  => 0x3C00\n\n#     ATMega32      => 0x7000\n\n#     ATMega644     => 0xFC00\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Target file name (without extension).\n\n#     For library the name will become libTARGET.a\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files directory\n\n#     To put object files in current directory, use a dot (.), do NOT make\n\n#     this an empty or blank macro!\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# List C++ source files here. (C dependencies are automatically generated.)\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Programming Options\n\n#AVRDUDE_PROGRAMMER = stk500\n\n#AVRDUDE_PORT = /dev/ttyUSB0\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s]. \n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n\n#DEBUG = dwarf-2\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# -luart\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Place -D or -U options here for C sources\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Place -D or -U options here for ASM sources\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Place -D or -U options here for C++ sources\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#CPPDEFS += -D__STDC_LIMIT_MACROS\n\n#CPPDEFS += -D__STDC_CONSTANT_MACROS\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#---------------- Compiler Options C ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#CFLAGS += -Wno-strict-aliasing\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#CFLAGS += -fno-unit-at-a-time\n\n#CFLAGS += -Wundef\n\n#CFLAGS += -Wunreachable-code\n\n#CFLAGS += -Wsign-compare\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#---------------- Compiler Options C++ ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#CPPFLAGS += -mshort-calls\n\n#CPPFLAGS += -fno-unit-at-a-time\n\n#CPPFLAGS += -Wstrict-prototypes\n\n#CPPFLAGS += -Wunreachable-code\n\n#CPPFLAGS += -Wsign-compare\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#CPPFLAGS += $(CSTANDARD)\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -adhlns:   create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n\n#  -listing-cont-lines: Sets the maximum number of continuation lines of hex \n\n#       dump that will be displayed for a given single line of source input.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#PRINTF_LIB = $(PRINTF_LIB_MIN)\n\n#PRINTF_LIB = $(PRINTF_LIB_FLOAT)\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# List any extra directories to look for libraries here.\n\n#     Each directory must be seperated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#---------------- External Memory Options ----------------\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# used for variables (.data/.bss) and heap (malloc()).\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# only used for heap (malloc()).\n\n#EXTMEMOPTS = -Wl,--section-start,.data=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#LDFLAGS += -T linker_script.x\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Programming hardware: alf avr910 avrisp bascom bsd \n\n# dt006 pavr picoweb pony-stk200 sp12 stk200 stk500\n\n#\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(OBJDIR)/$(TARGET).eep\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when \n\n#     avarice is running on a different computer.\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#============================================================================\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Define all object files.\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Default target.\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Change the build target to build a HEX file or a library.\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#build: lib\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Display size of file.\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#ELFSIZE = $(SIZE) --mcu=$(MCU) --format=avr $(OBJDIR)/$(TARGET).elf\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#\t@if test -f $(OBJDIR)/$(TARGET).elf; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); \\\n#\t$(AVRMEM) 2>/dev/null; echo; fi\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Program the device.  \n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set \n\n#     a breakpoint at main().\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Compile: create object files from C source files.\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Compile: create object files from C++ source files.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Compile: create assembler files from C++ source files.\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Create object files directory\n",
        "Line" : 574,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 89
    },
    "tools/device_file_generator/Makefile" : {
      "ObjectId" : "ce53bf6ec10a1d1db364517d78a8f6e45cd8eef2",
      "LastModified" : "2017-03-19T16:44:57Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 2471
}