{
  "Repository" : "7275737",
  "Revision" : "HEAD",
  "ObjectId" : "d4ef49aac412be3d3844ba338767d91ff54229de",
  "CommitTime" : "2019-04-05T10:43:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d05d87fbf9d1be4f6966c1bd1fca8abfc938981f",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use CMake File with following options\n\n# PHPCPP_COMPILE_TS     Set flag if PHP was compiled with thread safe\n\n# PHPCPP_MSVCRT_STATIC  Set flag if you want to compile the MSVC runtime as a static library\n\n# PHPCPP_ARCH           Set to \"x86_64\" if architecture and PHP was compiled under x64 or \"x86\" for 32 bit\n\n# PHPCPP_PHP_PATH       The path to PHP sources\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Should compile MSVC runtime static or dll\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "Examples/CallPhpFunctions/Makefile" : {
      "ObjectId" : "cd9ee4346206c987ad1ebaf59e47f29cae36c061",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/ConstStaticProp/cpp/Makefile" : {
      "ObjectId" : "7e951b4a6f255e61832c1a185e6c69e1bc66ad29",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/CppClassesInPhp/Makefile" : {
      "ObjectId" : "581a50ee3c1d5e7d36e2d0dd35df126837383603",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#\tMakefile template\n\n#\n\n#\tThis is an example Makefile that can be used by anyone who is building\n\n#\this or her own PHP extensions using the PHP-CPP library. \n\n#\n\n#\tIn the top part of this file we have included variables that can be\n\n#\taltered to fit your configuration, near the bottom the instructions and\n\n#\tdependencies for the compiler are defined. The deeper you get into this\n\n#\tfile, the less likely it is that you will have to change anything in it.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#\tName of your extension\n\n#\n\n#\tThis is the name of your extension. Based on this extension name, the\n\n#\tname of the library file (name.so) and the name of the config file (name.ini)\n\n#\tare automatically generated\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#\tPhp.ini directories\n\n#\n\n#\tIn the past, PHP used a single php.ini configuration file. Today, most\n\n#\tPHP installations use a conf.d directory that holds a set of config files,\n\n#\tone for each extension. Use this variable to specify this directory.\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\tThe extension dirs\n\n#\n\n#\tThis is normally a directory like /usr/lib/php5/20121221 (based on the \n\n#\tPHP version that you use. We make use of the command line 'php-config' \n\n#\tinstruction to find out what the extension directory is, you can override\n\n#\tthis with a different fixed directory\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n#\tThe name of the extension and the name of the .ini file\n\n#\n\n#\tThese two variables are based on the name of the extension. We simply add\n\n#\ta certain extension to them (.so or .ini)\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n#\tCompiler\n\n#\n\n#\tBy default, the GNU C++ compiler is used. If you want to use a different\n\n#\tcompiler, you can change that here. You can change this for both the \n\n#\tcompiler (the program that turns the c++ files into object files) and for\n\n#\tthe linker (the program that links all object files into the single .so\n\n#\tlibrary file. By default, g++ (the GNU C++ compiler) is used for both.\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n#\tCompiler and linker flags\n\n#\n\n#\tThis variable holds the flags that are passed to the compiler. By default, \n\n# \twe include the -O2 flag. This flag tells the compiler to optimize the code, \n\n#\tbut it makes debugging more difficult. So if you're debugging your application, \n\n#\tyou probably want to remove this -O2 flag. At the same time, you can then \n\n#\tadd the -g flag to instruct the compiler to include debug information in\n\n#\tthe library (but this will make the final libphpcpp.so file much bigger, so\n\n#\tyou want to leave that flag out on production servers).\n\n#\n\n#\tIf your extension depends on other libraries (and it does at least depend on\n\n#\tone: the PHP-CPP library), you should update the LINKER_DEPENDENCIES variable\n\n#\twith a list of all flags that should be passed to the linker.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n#\tCommand to remove files, copy files and create directories.\n\n#\n\n#\tI've never encountered a *nix environment in which these commands do not work. \n\n#\tSo you can probably leave this as it is\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n#\tAll source files are simply all *.cpp files found in the current directory\n\n#\n\n#\tA builtin Makefile macro is used to scan the current directory and find \n\n#\tall source files. The object files are all compiled versions of the source\n\n#\tfile, with the .cpp extension being replaced by .o.\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n#\tFrom here the build instructions start\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "Examples/DlUnrestricted/Makefile" : {
      "ObjectId" : "86cddfdf5dcf9cc3f6ae29a6050e3561626c688b",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#\tMakefile template\n\n#\n\n#\tThis is an example Makefile that can be used by anyone who is building\n\n#\this or her own PHP extensions using the PHP-CPP library. \n\n#\n\n#\tIn the top part of this file we have included variables that can be\n\n#\taltered to fit your configuration, near the bottom the instructions and\n\n#\tdependencies for the compiler are defined. The deeper you get into this\n\n#\tfile, the less likely it is that you will have to change anything in it.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#\tName of your extension\n\n#\n\n#\tThis is the name of your extension. Based on this extension name, the\n\n#\tname of the library file (name.so) and the name of the config file (name.ini)\n\n#\tare automatically generated\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#\tPhp.ini directories\n\n#\n\n#\tIn the past, PHP used a single php.ini configuration file. Today, most\n\n#\tPHP installations use a conf.d directory that holds a set of config files,\n\n#\tone for each extension. Use this variable to specify this directory.\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\tThe extension dirs\n\n#\n\n#\tThis is normally a directory like /usr/lib/php5/20121221 (based on the \n\n#\tPHP version that you use. We make use of the command line 'php-config' \n\n#\tinstruction to find out what the extension directory is, you can override\n\n#\tthis with a different fixed directory\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n#\tThe name of the extension and the name of the .ini file\n\n#\n\n#\tThese two variables are based on the name of the extension. We simply add\n\n#\ta certain extension to them (.so or .ini)\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n#\tCompiler\n\n#\n\n#\tBy default, the GNU C++ compiler is used. If you want to use a different\n\n#\tcompiler, you can change that here. You can change this for both the \n\n#\tcompiler (the program that turns the c++ files into object files) and for\n\n#\tthe linker (the program that links all object files into the single .so\n\n#\tlibrary file. By default, g++ (the GNU C++ compiler) is used for both.\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n#\tCompiler and linker flags\n\n#\n\n#\tThis variable holds the flags that are passed to the compiler. By default, \n\n# \twe include the -O2 flag. This flag tells the compiler to optimize the code, \n\n#\tbut it makes debugging more difficult. So if you're debugging your application, \n\n#\tyou probably want to remove this -O2 flag. At the same time, you can then \n\n#\tadd the -g flag to instruct the compiler to include debug information in\n\n#\tthe library (but this will make the final libphpcpp.so file much bigger, so\n\n#\tyou want to leave that flag out on production servers).\n\n#\n\n#\tIf your extension depends on other libraries (and it does at least depend on\n\n#\tone: the PHP-CPP library), you should update the LINKER_DEPENDENCIES variable\n\n#\twith a list of all flags that should be passed to the linker.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n#\tCommand to remove files, copy files and create directories.\n\n#\n\n#\tI've never encountered a *nix environment in which these commands do not work. \n\n#\tSo you can probably leave this as it is\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n#\tAll source files are simply all *.cpp files found in the current directory\n\n#\n\n#\tA builtin Makefile macro is used to scan the current directory and find \n\n#\tall source files. The object files are all compiled versions of the source\n\n#\tfile, with the .cpp extension being replaced by .o.\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n#\tFrom here the build instructions start\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "Examples/EmptyExtension/Makefile" : {
      "ObjectId" : "deb78f26a42841488e093046869d85321598a110",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#\tMakefile template\n\n#\n\n#\tThis is an example Makefile that can be used by anyone who is building\n\n#\this or her own PHP extensions using the PHP-CPP library. \n\n#\n\n#\tIn the top part of this file we have included variables that can be\n\n#\taltered to fit your configuration, near the bottom the instructions and\n\n#\tdependencies for the compiler are defined. The deeper you get into this\n\n#\tfile, the less likely it is that you will have to change anything in it.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#\tName of your extension\n\n#\n\n#\tThis is the name of your extension. Based on this extension name, the\n\n#\tname of the library file (name.so) and the name of the config file (name.ini)\n\n#\tare automatically generated\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#\tPhp.ini directories\n\n#\n\n#\tIn the past, PHP used a single php.ini configuration file. Today, most\n\n#\tPHP installations use a conf.d directory that holds a set of config files,\n\n#\tone for each extension. Use this variable to specify this directory.\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\tThe extension dirs\n\n#\n\n#\tThis is normally a directory like /usr/lib/php5/20121221 (based on the \n\n#\tPHP version that you use. We make use of the command line 'php-config' \n\n#\tinstruction to find out what the extension directory is, you can override\n\n#\tthis with a different fixed directory\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n#\tThe name of the extension and the name of the .ini file\n\n#\n\n#\tThese two variables are based on the name of the extension. We simply add\n\n#\ta certain extension to them (.so or .ini)\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n#\tCompiler\n\n#\n\n#\tBy default, the GNU C++ compiler is used. If you want to use a different\n\n#\tcompiler, you can change that here. You can change this for both the \n\n#\tcompiler (the program that turns the c++ files into object files) and for\n\n#\tthe linker (the program that links all object files into the single .so\n\n#\tlibrary file. By default, g++ (the GNU C++ compiler) is used for both.\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n#\tCompiler and linker flags\n\n#\n\n#\tThis variable holds the flags that are passed to the compiler. By default, \n\n# \twe include the -O2 flag. This flag tells the compiler to optimize the code, \n\n#\tbut it makes debugging more difficult. So if you're debugging your application, \n\n#\tyou probably want to remove this -O2 flag. At the same time, you can then \n\n#\tadd the -g flag to instruct the compiler to include debug information in\n\n#\tthe library (but this will make the final libphpcpp.so file much bigger, so\n\n#\tyou want to leave that flag out on production servers).\n\n#\n\n#\tIf your extension depends on other libraries (and it does at least depend on\n\n#\tone: the PHP-CPP library), you should update the LINKER_DEPENDENCIES variable\n\n#\twith a list of all flags that should be passed to the linker.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n#\tCommand to remove files, copy files and create directories.\n\n#\n\n#\tI've never encountered a *nix environment in which these commands do not work. \n\n#\tSo you can probably leave this as it is\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n#\tAll source files are simply all *.cpp files found in the current directory\n\n#\n\n#\tA builtin Makefile macro is used to scan the current directory and find \n\n#\tall source files. The object files are all compiled versions of the source\n\n#\tfile, with the .cpp extension being replaced by .o.\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n#\tFrom here the build instructions start\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "Examples/Exceptions/ExceptionCatch/Makefile" : {
      "ObjectId" : "83537dd2604db7c0171aa1733cbe49781009318d",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/Exceptions/ExceptionThrow/Makefile" : {
      "ObjectId" : "c8571ca34bdb5f1abfd9aa4f5a3213b592b1b067",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/Extension/Makefile" : {
      "ObjectId" : "a55b6c1d44dc4297a6b29c4fb1af153515e6e743",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/FunctionNoParameters/Makefile" : {
      "ObjectId" : "ccd4ac22841e0877f871868293d49296b317b0dc",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/FunctionReturnValue/Makefile" : {
      "ObjectId" : "0a2e1c30c53375b1a1d30a7c2250e605eef3be21",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/FunctionVoid/Makefile" : {
      "ObjectId" : "fbf4bdd55f51d36bf56ae887f36a7702dffa1835",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/FunctionWithParameters/Makefile" : {
      "ObjectId" : "bbebb43d0de36fcd124dddd4017188bbb542018e",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/Globals/Makefile" : {
      "ObjectId" : "fec79f70533f2a23b286a6ac33964a71df6a2801",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Examples/Makefile" : {
      "ObjectId" : "2f74b32e99df110488f2d474271fb585acb020b6",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Examples/ReturnObject/Makefile" : {
      "ObjectId" : "526e4bc28d83d345e1dd75d0f1fbacdc49cb64a4",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#\tMakefile template\n\n#\n\n#\tThis is an example Makefile that can be used by anyone who is building\n\n#\this or her own PHP extensions using the PHP-CPP library. \n\n#\n\n#\tIn the top part of this file we have included variables that can be\n\n#\taltered to fit your configuration, near the bottom the instructions and\n\n#\tdependencies for the compiler are defined. The deeper you get into this\n\n#\tfile, the less likely it is that you will have to change anything in it.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#\tName of your extension\n\n#\n\n#\tThis is the name of your extension. Based on this extension name, the\n\n#\tname of the library file (name.so) and the name of the config file (name.ini)\n\n#\tare automatically generated\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#\tPhp.ini directories\n\n#\n\n#\tIn the past, PHP used a single php.ini configuration file. Today, most\n\n#\tPHP installations use a conf.d directory that holds a set of config files,\n\n#\tone for each extension. Use this variable to specify this directory.\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#\tThe extension dirs\n\n#\n\n#\tThis is normally a directory like /usr/lib/php5/20121221 (based on the \n\n#\tPHP version that you use. We make use of the command line 'php-config' \n\n#\tinstruction to find out what the extension directory is, you can override\n\n#\tthis with a different fixed directory\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n#\tThe name of the extension and the name of the .ini file\n\n#\n\n#\tThese two variables are based on the name of the extension. We simply add\n\n#\ta certain extension to them (.so or .ini)\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n#\tCompiler\n\n#\n\n#\tBy default, the GNU C++ compiler is used. If you want to use a different\n\n#\tcompiler, you can change that here. You can change this for both the \n\n#\tcompiler (the program that turns the c++ files into object files) and for\n\n#\tthe linker (the program that links all object files into the single .so\n\n#\tlibrary file. By default, g++ (the GNU C++ compiler) is used for both.\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n#\tCompiler and linker flags\n\n#\n\n#\tThis variable holds the flags that are passed to the compiler. By default, \n\n# \twe include the -O2 flag. This flag tells the compiler to optimize the code, \n\n#\tbut it makes debugging more difficult. So if you're debugging your application, \n\n#\tyou probably want to remove this -O2 flag. At the same time, you can then \n\n#\tadd the -g flag to instruct the compiler to include debug information in\n\n#\tthe library (but this will make the final libphpcpp.so file much bigger, so\n\n#\tyou want to leave that flag out on production servers).\n\n#\n\n#\tIf your extension depends on other libraries (and it does at least depend on\n\n#\tone: the PHP-CPP library), you should update the LINKER_DEPENDENCIES variable\n\n#\twith a list of all flags that should be passed to the linker.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n#\tCommand to remove files, copy files and create directories.\n\n#\n\n#\tI've never encountered a *nix environment in which these commands do not work. \n\n#\tSo you can probably leave this as it is\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n#\tAll source files are simply all *.cpp files found in the current directory\n\n#\n\n#\tA builtin Makefile macro is used to scan the current directory and find \n\n#\tall source files. The object files are all compiled versions of the source\n\n#\tfile, with the .cpp extension being replaced by .o.\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n#\tFrom here the build instructions start\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "Examples/simple/Makefile" : {
      "ObjectId" : "a85c7f8d8d4d91e3a2d2f2685fd97283d5ada323",
      "LastModified" : "2017-08-18T14:18:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Edit these lines to correspond with your own directories\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Makefile" : {
      "ObjectId" : "cbd04ce4868b8beab85fc1503ea3b8a2ebb8e1f0",
      "LastModified" : "2019-04-05T10:43:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#   PHP-CPP Makefile\n\n#\n\n#   This makefile has a user friendly order: the top part of this file contains\n\n#   all variable settings that you may alter to suit your own system, while at\n\n#   the bottom you will find instructions for the compiler in which you will\n\n#   probably not have to make any changes\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#   Php-config utility\n\n#\n\n#   PHP comes with a standard utility program called 'php-config'. This program\n\n#   can be used to find out in which directories PHP is installed. Inside this\n\n#   makefile this utility program is used to find include directories, shared\n\n#   libraries and the path to the binary file. If your php-config is not\n\n#   installed in the default directory, you can change that here.\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#   Installation directory\n\n#\n\n#   When you install the PHP-CPP library, it will place a number of C++ *.h\n\n#   header files in your system include directory, and a libphpcpp.so shared\n\n#   library file in your system libraries directory. Most users set this to\n\n#   the regular /usr/include and /usr/lib directories, or /usr/local/include\n\n#   and /usr/local/lib. You can of course change it to whatever suits you best\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Since OSX 10.10 Yosemite, /usr/include gives problem\n\n# So, let's switch to /usr/local as default instead.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n#   SONAME and version\n\n#\n\n#   When ABI changes, soname and minor version of the library should be raised.\n\n#   Otherwise only release verions changes. (version is MAJOR.MINOR.RELEASE)\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n#   Name of the target library name and config-generator\n\n#\n\n#   The PHP-CPP library will be installed on your system as libphpcpp.so.\n\n#   This is a brilliant name. If you want to use a different name for it,\n\n#   you can change that here.\n\n#\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n#   Compiler\n\n#\n\n#   By default, the GNU C++ compiler is used. If you want to use a different\n\n#   compiler, you can change that here. You can change this for both the\n\n#   compiler (the program that turns the c++ files into object files) and for\n\n#   the linker (the program that links all object files into a single .so\n\n#   library file. By default, g++ (the GNU C++ compiler) is used for both.\n\n#\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n#   Compiler flags\n\n#\n\n#   This variable holds the flags that are passed to the compiler. By default,\n\n#   we include the -O2 flag. This flag tells the compiler to optimize the code,\n\n#   but it makes debugging more difficult. So if you're debugging your application,\n\n#   you probably want to remove this -O2 flag. At the same time, you can then\n\n#   add the -g flag to instruct the compiler to include debug information in\n\n#   the library (but this will make the final libphpcpp.so file much bigger, so\n\n#   you want to leave that flag out on production servers).\n\n#\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n#   Linker flags\n\n#\n\n#   Just like the compiler, the linker can have flags too. The default flag\n\n#   is probably the only one you need.\n\n#\n\n#   Are you compiling on OSX? You may have to append the option \"-undefined dynamic_lookup\"\n\n#   to the linker flags\n\n#\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n#   Command to remove files, copy files, link files and create directories.\n\n#\n\n#   I've never encountered a *nix environment in which these commands do not work.\n\n#   So you can probably leave this as it is\n\n#\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n#   The source files\n\n#\n\n#   For this we use a special Makefile function that automatically scans the\n\n#   common/ and zend/ directories for all *.cpp files. No changes are\n\n#   probably necessary here\n\n#\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n#   The object files\n\n#\n\n#   The intermediate object files are generated by the compiler right before\n\n#   the linker turns all these object files into the libphpcpp.so shared\n\n#   library. We also use a Makefile function here that takes all source files.\n\n#\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n#   Dependencies\n\n#\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n#   End of the variables section. Here starts the list of instructions and\n\n#   dependencies that are used by the compiler.\n\n#\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The if statements below must be seen as single line by make\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "CMAKE" : 1,
    "MAKEFILE" : 17
  },
  "ElapsedTime" : 1111
}