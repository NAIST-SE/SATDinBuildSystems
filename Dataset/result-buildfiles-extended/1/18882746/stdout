{
  "Repository" : "18882746",
  "Revision" : "HEAD",
  "ObjectId" : "29dbe6b3940f49bf6382bd29bac5ea9b40f954d7",
  "CommitTime" : "2017-01-04T20:05:23Z",
  "Files" : {
    "BALLS-Main/CMakeLists.txt" : {
      "ObjectId" : "157b1a4e32fe3039236a5c7c1b9c1bcf4ad69398",
      "LastModified" : "2017-01-02T21:30:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "BALLS-Tests/CMakeLists.txt" : {
      "ObjectId" : "3236b07e8666885d1c19900be07d955d6ad8e050",
      "LastModified" : "2017-01-02T21:36:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "BALLS-Tests/PropertyObjectTests/CMakeLists.txt" : {
      "ObjectId" : "00b338c895b46f9380d944726f13cfed83a13093",
      "LastModified" : "2017-01-03T00:16:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: It is important that BALLS's directory be listed before QPropertyEditor's,\n\n# as they both have a file named \"precompiled.hpp\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "BALLS-Tests/TestConversions/CMakeLists.txt" : {
      "ObjectId" : "0bcee8fb336499d8fe29bbd53ec3a53d0172532e",
      "LastModified" : "2017-01-03T00:16:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: It is important that BALLS's directory be listed before QPropertyEditor's,\n\n# as they both have a file named \"precompiled.hpp\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "BALLS-Tests/TestJSONConversions/CMakeLists.txt" : {
      "ObjectId" : "94d695c5cf8a4162b423348994c1515f60a31787",
      "LastModified" : "2017-01-03T00:16:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: It is important that BALLS's directory be listed before QPropertyEditor's,\n\n# as they both have a file named \"precompiled.hpp\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "BALLS-Tests/TestUniforms/CMakeLists.txt" : {
      "ObjectId" : "c5070ff91dec8980306baf6b9e5d44feecd1ce61",
      "LastModified" : "2017-01-03T00:16:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: It is important that BALLS's directory be listed before QPropertyEditor's,\n\n# as they both have a file named \"precompiled.hpp\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "BALLS/CMakeLists.txt" : {
      "ObjectId" : "78f981fa3cf6a3c7d865a4c3122e373526e1b3e9",
      "LastModified" : "2017-01-03T00:16:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The moc-generated files need the precompiled header (because of all the typedefs\n\n# and metatype declarations)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "2c8f0459408694606d202086254b2f247b8adf97",
      "LastModified" : "2017-01-03T01:10:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO: Add ppa:nschloe/boost-nightly and ppa:nschloe/cmake-nightly to Vagrantfile\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "QPropertyEditor/CMakeLists.txt" : {
      "ObjectId" : "fe58ff843ea5e734273ba297d79b2e4e02cbfebc",
      "LastModified" : "2017-01-03T01:10:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindQScintilla.cmake" : {
      "ObjectId" : "e81acd8cbf058a33d112e483a458f8c3d6d54bd7",
      "LastModified" : "2017-01-03T01:10:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the QScintilla2 includes and library\n\n# which defines\n\n#\n\n# QSCINTILLA_FOUND - system has QScintilla2\n\n# QSCINTILLA_INCLUDE_DIR - where to find qextscintilla.h\n\n# QSCINTILLA_LIBRARIES - the libraries to link against to use QScintilla\n\n# QSCINTILLA_LIBRARY - where to find the QScintilla library (not for general use)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# copyright (c) 2007 Thomas Moenicke thomas.moenicke@kdemail.net\n\n# Heavily based on https://git.io/viwyp\n\n#\n\n# Redistribution and use is allowed according to the terms of the FreeBSD license.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the user has the qscintilla2 formula installed...\n",
        "Line" : 37,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# brew --prefix will list where qscintilla2 would be installed, whether\n\n# or not it actually is.  I'd rather play it safe and not assume the\n\n# command succeeded, though.\n",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# brew --prefix outputs a newline, so we must strip it\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# The usage of brew on OSX should be considered an implementation detail\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/LibFindMacros.cmake" : {
      "ObjectId" : "3ef5844dd1e1805f0eeadd3b74b5abdd7e78195b",
      "LastModified" : "2016-09-14T23:18:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Version 2.2\n\n# Public Domain, originally written by Lasse Kärkkäinen <tronic>\n\n# Maintained at https://github.com/Tronic/cmake-modules\n\n# Please send your improvements as pull requests on Github.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find another package and make it a dependency of the current package.\n\n# This also automatically forwards the \"REQUIRED\" argument.\n\n# Usage: libfind_package(<prefix> <another package> [extra args to find_package])\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A simple wrapper to make pkg-config searches a bit easier.\n\n# Works the same as CMake's internal pkg_check_modules but is always quiet.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid useless copy&pasta by doing what most simple libraries do anyway:\n\n# pkg-config, find headers, find library.\n\n# Usage: libfind_pkg_detect(<prefix> <pkg-config args> FIND_PATH <name> [other args] FIND_LIBRARY <name> [other args])\n\n# E.g. libfind_pkg_detect(SDL2 sdl2 FIND_PATH SDL.h PATH_SUFFIXES SDL2 FIND_LIBRARY SDL2)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Parse arguments\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find library\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Extracts a version #define from a version.h file, output stored to <PREFIX>_VERSION.\n\n# Usage: libfind_version_header(Foobar foobar/version.h FOOBAR_VERSION_STR)\n\n# Fourth argument \"QUIET\" may be used for silently testing different define names.\n\n# This function does nothing if the version variable is already defined.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip processing if we already have a version or if the include dir was not found\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Process optional arguments\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Read the header and parse for version number\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# No regex match?\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Export the version string\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Skip processing if already processed during this configuration run\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Start with the assumption that the package was found\n",
        "Line" : 108,
        "CharPositionInLine" : 19
      },
      "15" : {
        "Text" : "# Did we find any files? Did we miss includes? These are for formatting better error messages.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Shorthands for some variables that we need often\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Lists of config option names (all, includes, libs)\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Process deps to add to \n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# The package seems to export option lists that we can use, woohoo!\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# If plural forms don't exist or they equal singular forms\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Singular forms can be used\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Oh no, we don't know the option names\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Include/library names separated by spaces (notice: not CMake lists)\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Process all includes and set found false if any are missing\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Process all libraries and set found false if any are missing\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Version checks\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# If all-OK, hide all config options, export variables, print status and exit\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Format messages for debug info and the type of error\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Fatal error out if REQUIRED\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Otherwise just print a nasty warning\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 31
    },
    "cmake/PrecompiledHeader.cmake" : {
      "ObjectId" : "6211ce8d3c6796712493ccf70d7ae9b2c9e60027",
      "LastModified" : "2016-09-14T23:18:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function for setting up precompiled headers. Usage:\n\n#\n\n#   add_library/executable(target\n\n#       pchheader.c pchheader.cpp pchheader.h)\n\n#\n\n#   add_precompiled_header(target pchheader.h\n\n#       [FORCEINCLUDE]\n\n#       [SOURCE_C pchheader.c]\n\n#       [SOURCE_CXX pchheader.cpp])\n\n#\n\n# Options:\n\n#\n\n#   FORCEINCLUDE: Add compiler flags to automatically include the\n\n#   pchheader.h from every source file. Works with both GCC and\n\n#   MSVC. This is recommended.\n\n#\n\n#   SOURCE_C/CXX: Specifies the .c/.cpp source file that includes\n\n#   pchheader.h for generating the pre-compiled header\n\n#   output. Defaults to pchheader.c. Only required for MSVC.\n\n#\n\n# Caveats:\n\n#\n\n#   * Its not currently possible to use the same precompiled-header in\n\n#     more than a single target in the same directory (No way to set\n\n#     the source file properties differently for each target).\n\n#\n\n#   * MSVC: A source file with the same name as the header must exist\n\n#     and be included in the target (E.g. header.cpp). Name of file\n\n#     can be changed using the SOURCE_CXX/SOURCE_C options.\n\n#\n\n# License:\n\n#\n\n# Copyright (C) 2009-2013 Lars Christensen <larsch@belunktum.dk>\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the 'Software') deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "741d6901f157bd038741a523ddda099440159d0b",
      "LastModified" : "2016-09-14T23:18:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2016 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 441,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 452,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 473,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 485,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# platform specific flags\n",
        "Line" : 496,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# default include dirs\n",
        "Line" : 531,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 538,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 550,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# target include directories\n",
        "Line" : 562,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 574,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 582,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 659,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# target export define symbol\n",
        "Line" : 663,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 668,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# target compile definitions\n",
        "Line" : 677,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 686,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 695,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 711,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 863,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 952,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 996,
        "CharPositionInLine" : 3
      },
      "52" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1004,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# header is outside\n",
        "Line" : 1021,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1032,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# check header file extension\n",
        "Line" : 1042,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1055,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1060,
        "CharPositionInLine" : 3
      },
      "59" : {
        "Text" : "# GCC like output\n",
        "Line" : 1069,
        "CharPositionInLine" : 3
      },
      "60" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1085,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1088,
        "CharPositionInLine" : 1
      },
      "62" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1090,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# then separate lines\n",
        "Line" : 1092,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1095,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1113,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# update stack\n",
        "Line" : 1123,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1139,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1141,
        "CharPositionInLine" : 5
      },
      "69" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1148,
        "CharPositionInLine" : 5
      },
      "70" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1157,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1169,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1207,
        "CharPositionInLine" : 1
      },
      "73" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1223,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1371,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# create empty log file\n",
        "Line" : 1412,
        "CharPositionInLine" : 3
      },
      "76" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1428,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1464,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# append to list\n",
        "Line" : 1473,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1476,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1480,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# append to list\n",
        "Line" : 1485,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1491,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1498,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# append to list\n",
        "Line" : 1503,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1506,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1511,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# append to list\n",
        "Line" : 1520,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1523,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1527,
        "CharPositionInLine" : 3
      },
      "90" : {
        "Text" : "# append to list\n",
        "Line" : 1532,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1538,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1557,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# append to list\n",
        "Line" : 1568,
        "CharPositionInLine" : 3
      },
      "94" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1575,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1582,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# append to list\n",
        "Line" : 1591,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1594,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1602,
        "CharPositionInLine" : 3
      },
      "99" : {
        "Text" : "# append to list\n",
        "Line" : 1614,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1621,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1628,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# append to list\n",
        "Line" : 1639,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1648,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1665,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# append to list\n",
        "Line" : 1673,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1679,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1686,
        "CharPositionInLine" : 3
      },
      "108" : {
        "Text" : "# append to list\n",
        "Line" : 1688,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1691,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1696,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# append to list\n",
        "Line" : 1701,
        "CharPositionInLine" : 3
      },
      "112" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1704,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1708,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# append to list\n",
        "Line" : 1714,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1717,
        "CharPositionInLine" : 3
      },
      "116" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1723,
        "CharPositionInLine" : 3
      },
      "117" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 5
      },
      "118" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1737,
        "CharPositionInLine" : 5
      },
      "119" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1744,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# append to list\n",
        "Line" : 1746,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1749,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1754,
        "CharPositionInLine" : 3
      },
      "123" : {
        "Text" : "# append to list\n",
        "Line" : 1763,
        "CharPositionInLine" : 5
      },
      "124" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1769,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1776,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# append to list\n",
        "Line" : 1778,
        "CharPositionInLine" : 5
      },
      "127" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1781,
        "CharPositionInLine" : 5
      },
      "128" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1818,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1834,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1838,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1845,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1848,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1866,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1885,
        "CharPositionInLine" : 1
      },
      "135" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1928,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1939,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1942,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2013,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2018,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2021,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2024,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2027,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2059,
        "CharPositionInLine" : 1
      },
      "144" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2063,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2068,
        "CharPositionInLine" : 2
      },
      "146" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2085,
        "CharPositionInLine" : 1
      },
      "147" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2098,
        "CharPositionInLine" : 1
      },
      "148" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2123,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2128,
        "CharPositionInLine" : 3
      },
      "150" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2135,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2138,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2143,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# generate target script file\n",
        "Line" : 2166,
        "CharPositionInLine" : 1
      },
      "154" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2171,
        "CharPositionInLine" : 2
      },
      "155" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2185,
        "CharPositionInLine" : 2
      },
      "156" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2194,
        "CharPositionInLine" : 3
      },
      "157" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2196,
        "CharPositionInLine" : 3
      },
      "158" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2200,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2227,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2232,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2239,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2245,
        "CharPositionInLine" : 3
      },
      "163" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2252,
        "CharPositionInLine" : 3
      },
      "164" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2255,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2262,
        "CharPositionInLine" : 1
      },
      "166" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2269,
        "CharPositionInLine" : 1
      },
      "167" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2271,
        "CharPositionInLine" : 1
      },
      "168" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2335,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2346,
        "CharPositionInLine" : 3
      },
      "170" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2357,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2365,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2369,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2373,
        "CharPositionInLine" : 3
      },
      "174" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2395,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2401,
        "CharPositionInLine" : 3
      },
      "176" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2410,
        "CharPositionInLine" : 3
      },
      "177" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2418,
        "CharPositionInLine" : 3
      },
      "178" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2462,
        "CharPositionInLine" : 1
      },
      "179" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2467,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2492,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2501,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2510,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2517,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2690,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2694,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2708,
        "CharPositionInLine" : 3
      },
      "187" : {
        "Text" : "# use all available cores\n",
        "Line" : 2728,
        "CharPositionInLine" : 3
      },
      "188" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2753,
        "CharPositionInLine" : 1
      },
      "189" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2760,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2770,
        "CharPositionInLine" : 1
      },
      "191" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2775,
        "CharPositionInLine" : 1
      },
      "192" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2777,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2786,
        "CharPositionInLine" : 2
      },
      "194" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2796,
        "CharPositionInLine" : 4
      },
      "195" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2803,
        "CharPositionInLine" : 3
      },
      "196" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2807,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2835,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2840,
        "CharPositionInLine" : 4
      },
      "199" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2855,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2866,
        "CharPositionInLine" : 3
      },
      "201" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2874,
        "CharPositionInLine" : 3
      },
      "202" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2888,
        "CharPositionInLine" : 4
      },
      "203" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2900,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2910,
        "CharPositionInLine" : 1
      },
      "205" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2913,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2918,
        "CharPositionInLine" : 2
      },
      "207" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2923,
        "CharPositionInLine" : 1
      },
      "208" : {
        "Text" : "# generate unity target\n",
        "Line" : 2930,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2937,
        "CharPositionInLine" : 2
      },
      "210" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2940,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2950,
        "CharPositionInLine" : 3
      },
      "212" : {
        "Text" : "# copy output name\n",
        "Line" : 2975,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2983,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# copy compile features\n",
        "Line" : 2994,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2999,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3007,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3017,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3020,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3026,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3040,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3048,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3053,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3077,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# resolve alias\n",
        "Line" : 3089,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3097,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3113,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3118,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3161,
        "CharPositionInLine" : 4
      },
      "229" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3221,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3308,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# include target script if available\n",
        "Line" : 3320,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3322,
        "CharPositionInLine" : 2
      },
      "233" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3338,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3358,
        "CharPositionInLine" : 3
      },
      "235" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3361,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3380,
        "CharPositionInLine" : 3
      },
      "237" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3383,
        "CharPositionInLine" : 3
      },
      "238" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3451,
        "CharPositionInLine" : 3
      },
      "239" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3454,
        "CharPositionInLine" : 3
      },
      "240" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3477,
        "CharPositionInLine" : 1
      },
      "241" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3514,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3548,
        "CharPositionInLine" : 2
      },
      "243" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3562,
        "CharPositionInLine" : 3
      },
      "244" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3569,
        "CharPositionInLine" : 1
      },
      "245" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3622,
        "CharPositionInLine" : 1
      },
      "246" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3694,
        "CharPositionInLine" : 1
      },
      "247" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3858,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 248
    }
  },
  "FileTypes" : {
    "CMAKE" : 13
  },
  "ElapsedTime" : 697
}