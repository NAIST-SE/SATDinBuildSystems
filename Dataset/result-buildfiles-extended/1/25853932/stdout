{
  "Repository" : "25853932",
  "Revision" : "HEAD",
  "ObjectId" : "bc3a3b3acc58d12327ff0689d809292ce70cd6e3",
  "CommitTime" : "2019-02-03T15:28:02Z",
  "Files" : {
    "gsl/CMakeLists.txt" : {
      "ObjectId" : "0ab5e440958b806cf63409d3bbb4960f25df5149",
      "LastModified" : "2018-05-07T17:24:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# creates a library GSL which is an interface (header files only)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine whether this is a standalone project or included by other projects\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# when minimum version required is 3.8.0 remove if below\n\n# both branches do exactly the same thing\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the GSL library to be compiled only with c++14\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# on *nix systems force the use of -std=c++XX instead of -std=gnu++XX (default)\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# add definitions to the library and targets that consume it\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# remove unnecessary warnings about unchecked iterators\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# add include folders to the library and targets that consume it\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add natvis file to the library so it will automatically be loaded into Visual Studio\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "gsl/tests/CMakeLists.txt" : {
      "ObjectId" : "0e08d77292838cd3830b52b8740af514c57b8ca5",
      "LastModified" : "2018-05-07T17:24:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# will make visual studio generated project group files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add catch\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# assume catch is installed in a system directory\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# this interface adds compile options to how the tests are run\n\n# please try to keep entries ordered =)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for tests to find the catch header\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set definitions for tests\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# create the main executable for each test. this reduces the compile time\n\n# of each test by pre-compiling catch.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# group all tests under GSL_tests\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# No exception tests\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# this interface adds compile options to how the tests are run\n\n# please try to keep entries ordered =)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set definitions for tests\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# group all tests under GSL_tests_noexcept\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "outcome/.ci.cmake" : {
      "ObjectId" : "d2c85a3f743eea817ee7b1f1e4f868ef63e0bc4c",
      "LastModified" : "2018-07-02T19:24:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CTest script for a CI to submit to CDash a run of configuration,\n\n# building and testing\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ctest_upload(FILES )\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "outcome/.docs.cmake" : {
      "ObjectId" : "40b387e389f748e270575fe0fb5b430088205b26",
      "LastModified" : "2018-07-02T19:24:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CTest script for a CI to submit to CDash a documentation generation run\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#checked_execute_process(\"git reset\"\n\n#  COMMAND \"${GIT_EXECUTABLE}\" checkout gh-pages\n\n#  COMMAND \"${GIT_EXECUTABLE}\" reset --hard ae7119571a3c81cb9a683a21f2759df1d742e998\n\n#  WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/doc/html\"\n\n#)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#checked_execute_process(\"git commit\"\n\n#  COMMAND \"${GIT_EXECUTABLE}\" commit -a -m \"upd\"\n\n#  COMMAND \"${GIT_EXECUTABLE}\" push -f origin gh-pages\n\n#  WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/doc/html\"\n\n#)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "outcome/CMakeLists.txt" : {
      "ObjectId" : "85780db440d20fe3cc5530e482a2cb9931a7f1e0",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Parse the version we tell cmake directly from the version header file\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets the usual PROJECT_NAME etc\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also set a *cmake* namespace for this project\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup this cmake environment for this project\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This file should be updated with the last git SHA next commit\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find my library dependencies\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make an interface only library so dependent CMakeLists can bring in this header-only library\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make preprocessed edition of this library target\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# See if the ply package is installed so pcpp can run\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# --debug\n",
        "Line" : 49,
        "CharPositionInLine" : 67
      },
      "10" : {
        "Text" : "# Set the standard definitions for these libraries and bring in the all_* helper functions\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set the C++ features this library requires\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set the library dependencies this library has\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# On POSIX we need to patch linking to stdc++fs into the docs examples \n\n#if(DOXYGEN_FOUND AND GCC)\n\n#  target_link_libraries(outcome-example_find_regex_expected stdc++fs)\n\n#  target_link_libraries(outcome-example_find_regex_result stdc++fs)\n\n#endif()\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# For all possible configurations of this library, add each test\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Duplicate all tests into C++ exceptions disabled forms\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Disable warnings \"C++ exception handler used\" and \"noexcept used with no exception handling\"\n",
        "Line" : 117,
        "CharPositionInLine" : 10
      },
      "17" : {
        "Text" : "# Turn on C++ 17 and Concepts where possible for the test suite\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Add in the documentation snippets\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Cache this library's auto scanned sources for later reuse\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Make available this library for install and export\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "outcome/CTestConfig.cmake" : {
      "ObjectId" : "605d69372defc8df730230deafcd63d250ba7f9e",
      "LastModified" : "2018-07-02T19:24:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/abi-compliance/CMakeLists.txt" : {
      "ObjectId" : "41986beb6ec97c49657901f1cd63c97734d897c7",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hack for sibling config\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/cmake/QuickCppLibBootstrap.cmake" : {
      "ObjectId" : "58c749e8103772d55885d170bcb374a2cb44f19c",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If necessary bring in the quickcpplib cmake tooling\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_SOURCE_DIR is the very topmost parent cmake project\n\n# CMAKE_CURRENT_SOURCE_DIR is the current cmake subproject\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If there is a magic .quickcpplib_use_siblings directory above the topmost project, use sibling edition\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Read in .gitmodules and look for myself\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "outcome/cmake/headers.cmake" : {
      "ObjectId" : "04974483513ad3f62ef8b28f20560d8cfd848a7a",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/cmake/interface.cmake" : {
      "ObjectId" : "8a7b4ac27b8eaa933ce088c8ef1fe17f0cd1da2a",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/cmake/tests.cmake" : {
      "ObjectId" : "500ca70de062e7e516d4fe98f25dd19f8fa6cc22",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "outcome/conan/test_package/CMakeLists.txt" : {
      "ObjectId" : "553ede5b113a7eeacf84670a8fd22fc82fdbdcdd",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "outcome/include/outcome/quickcpplib/.ci.cmake" : {
      "ObjectId" : "25e175e3a8117384ae129048d8acfb315f37499f",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CTest script for a CI to submit to CDash a run of configuration,\n\n# building and testing\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ctest_upload(FILES )\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "outcome/include/outcome/quickcpplib/.docs.cmake" : {
      "ObjectId" : "1dc3f6b155fce4004b32b8bc9268932fc3726f44",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CTest script for a CI to submit to CDash a documentation generation run\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#checked_execute_process(\"git reset\"\n\n#  COMMAND \"${GIT_EXECUTABLE}\" checkout gh-pages\n\n#  COMMAND \"${GIT_EXECUTABLE}\" reset --hard ae7119571a3c81cb9a683a21f2759df1d742e998\n\n#  WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/doc/html\"\n\n#)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#checked_execute_process(\"git commit\"\n\n#  COMMAND \"${GIT_EXECUTABLE}\" commit -a -m \"upd\"\n\n#  COMMAND \"${GIT_EXECUTABLE}\" push -f origin gh-pages\n\n#  WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/doc/html\"\n\n#)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "outcome/include/outcome/quickcpplib/CMakeLists.txt" : {
      "ObjectId" : "4a071f0e774184c982a5659a5b2d6e73e1a61d64",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If necessary bring in the quickcpplib cmake tooling\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets the usual PROJECT_NAME etc\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# quickcpplib does not provide a master header file\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Also set a *cmake* namespace for this project\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setup this cmake environment for this project\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This file should be updated with the last git SHA next commit\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Exclude any embedded CATCH\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make an interface only library so dependent CMakeLists can bring in this header-only library\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make a docs target\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set the standard definitions for these libraries and bring in the all_* helper functions\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Set the C++ features this library requires\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  cxx_thread_local          ## Technically a requirement, but not enforced due to Xcode 7\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# On Linux, things using me must link to libdl\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# On FreeBSD, things using me must link to libexecinfo\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# For all possible configurations of this library, add each test\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# On MSVC the ringbuffer_log test needs to emit debug info to work\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The spinlock_tribool test needs OpenMP\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Cache this library's auto scanned sources for later reuse\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Make available this library for install and export\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "outcome/include/outcome/quickcpplib/CTestConfig.cmake" : {
      "ObjectId" : "4b50b6b00a410df840aeb28699af1ea0711feff7",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/include/outcome/quickcpplib/cmake/QuickCppLibBootstrap.cmake" : {
      "ObjectId" : "58c749e8103772d55885d170bcb374a2cb44f19c",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If necessary bring in the quickcpplib cmake tooling\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_SOURCE_DIR is the very topmost parent cmake project\n\n# CMAKE_CURRENT_SOURCE_DIR is the current cmake subproject\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If there is a magic .quickcpplib_use_siblings directory above the topmost project, use sibling edition\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Read in .gitmodules and look for myself\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "outcome/include/outcome/quickcpplib/cmake/headers.cmake" : {
      "ObjectId" : "0cf6a24429649c085ae2962b252608acb79acbbe",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/include/outcome/quickcpplib/cmake/interface.cmake" : {
      "ObjectId" : "9e50a4705c9ac11f0663320bdae874ca2704ef7f",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/include/outcome/quickcpplib/cmake/sources.cmake" : {
      "ObjectId" : "ffd85de2b8b0d8d74e6e18d53d434c91a17c9b3a",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/include/outcome/quickcpplib/cmake/tests.cmake" : {
      "ObjectId" : "10f4e4bf04beac633b30a124a2ef22790310a6b9",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DO NOT EDIT, GENERATED BY SCRIPT\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibApplyDefaultDefinitions.cmake" : {
      "ObjectId" : "ee08af6eda2db67cc8f5657398a2c4cb69af4d24",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Apply these compile definitions to all library targets\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Apply these compile options to all library targets\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Apply these compile features to all library targets\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Apply these include directories to all library targets\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Apply these link libraries to all library targets\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Apply these sources to all library targets\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Apply these target properties to all library targets with real outputs\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Apply these target properties to all library targets\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Ensure project files maintain the file hierarchy\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#indented_message(STATUS \"source_group(${_basepath} FILES ${PATH}/${item}\")\n",
        "Line" : 168,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Map this library's headers, sources and tests into the root\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Map our dependencies into dependency/lib\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Place all libraries into the lib directory\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Place all binaries into the bin directory\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Originally we were setting these on all targets, but the CMP0063 warning\n\n# just refused to go away despite us setting it in BoostLitePolicies. So,\n\n# I give up and just set these properties on the shared library target only.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Only explicitly exported symbols are to be available from objects\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Reduce linking times by eliminating inlines from being linked\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Unicode support\n",
        "Line" : 216,
        "CharPositionInLine" : 76
      },
      "18" : {
        "Text" : "# Stronger warnings\n",
        "Line" : 220,
        "CharPositionInLine" : 76
      },
      "19" : {
        "Text" : "# Stronger warnings\n",
        "Line" : 222,
        "CharPositionInLine" : 76
      },
      "20" : {
        "Text" : "# Make use of clang's ability to warn on bad doxygen markup\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 21
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibCacheLibrarySources.cmake" : {
      "ObjectId" : "e2417f2b5552d2738012cb9b691d441ea08d0555",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Write interface, headers, sources and tests file system scan cache files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Write a file caching the scanned files along with timestamps to check\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibMakeDoxygen.cmake" : {
      "ObjectId" : "2e73fad55d8cb837c5f1dfdc53982e79ab0373f3",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Is there an examples directory? If so, compile every example in there\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Assume the first target is enough to link the example\n",
        "Line" : 13,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# We don't have wildcard file copy in cmake < 3.5, so choose a shell copy command\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibMakeExport.cmake" : {
      "ObjectId" : "91b26970b27081661e66a83d4ceb2fb66441e215",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake before this doesn't support exporting header only libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 36
      },
      "1" : {
        "Text" : "#install(EXPORT ${PROJECT_NAMESPACE}${PROJECT_NAME}\n\n#  DESTINATION lib/${PROJECT_NAME}${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n\n#  CONFIGURATIONS Release\n\n#  NAMESPACE ${PROJECT_NAMESPACE}\n\n#)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibMakeHeaderOnlyLibrary.cmake" : {
      "ObjectId" : "de250f6527a7ea92661ba8cdb48f6281358972fc",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds an interface target representing the header-only edition of ${PROJECT_NAME}\n\n# \n\n# Outputs:\n\n#  *  ${PROJECT_NAME}_hl: Header only library target\n\n#  * ${PROJECT_NAME}_hlm: Header only C++ Module target (where supported)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#indented_message(STATUS \"${header}\")\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#  if(DEFINED ${PROJECT_NAME}_INTERFACE)\n\n#    foreach(source ${${PROJECT_NAME}_INTERFACE})\n\n#      # Cause my master header to appear in the sources of anything consuming me\n\n#      if(NOT EXISTS \"${${PROJECT_NAME}_PATH}/${source}\")\n\n#        set(source \"include/${source}\")\n\n#      endif()\n\n#      #indented_message(STATUS \"*** ${source}\")\n\n#      target_sources(${PROJECT_NAME}_hl INTERFACE\n\n#        \"$<BUILD_INTERFACE:${${PROJECT_NAME}_PATH}/${source}>\"\n\n#        \"$<INSTALL_INTERFACE:${source}>\"\n\n#      )\n\n#    endforeach()\n\n#  else()\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include all my headers into the sources of anything consuming me\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#  endif()\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do we have C++ Modules support on this compiler?\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# VS2017\n",
        "Line" : 47,
        "CharPositionInLine" : 41
      },
      "7" : {
        "Text" : "# This library provides a C++ Module source file\n",
        "Line" : 57,
        "CharPositionInLine" : 73
      },
      "8" : {
        "Text" : "# Add a C++ Module for the PCH header file\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# MSVC can't share precompiled headers between targets so fall back onto an interface library\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## Works on anything not Bash for Windows, but that's mostly what I'm testing with\n\n##  # Add a precompiled header for the PCH header file\n\n##  add_precompiled_header(${PROJECT_NAME}_hl ${${PROJECT_NAME}_INTERFACE})\n\n##  # Include all my headers into the sources of anything consuming me\n\n##  target_append_header_only_sources(${PROJECT_NAME}_hl)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set up the \"nicer\" target aliases\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibMakeInstall.cmake" : {
      "ObjectId" : "c32719336fbd47af66ea7a7abfb7ee9f032a35b6",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Firstly, to install the library into /usr/local or whatever\n\n# Note that this only installs this library, not any boost-lite imported\n\n# dependencies, and so is actually quite useless.\n\n#\n\n# The showstopper question, which we also need to answer for cmake package\n\n# support, is how best to implement cmake package dependencies.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If not a boost library, install into a library named after the library\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#indented_message(STATUS \"*** Would install ${header} => ${dir}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# All interface headers in all targets are public headers\n\n#foreach(target ${${PROJECT_NAME}_TARGETS})\n\n#  set_target_properties(${target} PROPERTIES PUBLIC_HEADER \"${${PROJECT_NAME}_HEADERS}\")\n\n#endforeach()\n\n#install(TARGETS ${${PROJECT_NAME}_TARGETS} #EXPORT ${PROJECT_NAMESPACE}${PROJECT_NAME}\n\n#  RUNTIME DESTINATION \"bin\"\n\n#  ARCHIVE DESTINATION \"lib\"\n\n#  LIBRARY DESTINATION \"lib\"\n\n#  INCLUDES DESTINATION \"include/${PROJECT_DIR}\"\n\n#)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibMakeLibrary.cmake" : {
      "ObjectId" : "c439b164f0636d41507e66ea30b04275c73be0b2",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds two targets, one a static and the other a shared library for ${PROJECT_NAME}\n\n# \n\n# Outputs:\n\n#  *  ${PROJECT_NAME}_sl: Static library target\n\n#  *  ${PROJECT_NAME}_dl: Dynamic library target\n\n#  *  ${PROJECT_NAME}_sl-Xsan: with sanitiser\n\n#  *  ${PROJECT_NAME}_dl-Xsan: with sanitiser\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##if(PROJECT_IS_DEPENDENCY)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##endif()\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##if(PROJECT_IS_DEPENDENCY)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##endif()\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check headers for C++ Modules support\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# VS2015\n",
        "Line" : 73,
        "CharPositionInLine" : 48
      },
      "7" : {
        "Text" : "# Parse the front of each header file looking for ^import .*;\n\n# todo\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Now the config is ready, generate a private precompiled header for\n\n# ${PROJECT_NAME}_INTERFACE and have the sources in ${PROJECT_NAME}_SOURCES\n\n# use the precompiled header UNLESS there is only one source file\n\n# \n\n# todo\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibMakeStandardTests.cmake" : {
      "ObjectId" : "a09d692d59179f57e263264ac37764ee0a521d80",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds standard ctest tests for each *.c;*.cpp;*.cxx in\n\n# ${PROJECT_NAME}_TESTS for all ${PROJECT_NAME}_targets\n\n#\n\n# Sets ${PROJECT_NAME}_TEST_TARGETS to the test targets generated\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Firstly get all non-source files\n",
        "Line" : 10,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# We'll assume the test name is the source file name\n",
        "Line" : 20,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# Path could however be test/tests/<name>/*.cpp\n",
        "Line" : 22,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Shut up about using POSIX functions\n",
        "Line" : 67,
        "CharPositionInLine" : 106
      },
      "5" : {
        "Text" : "# Stronger warnings\n",
        "Line" : 70,
        "CharPositionInLine" : 106
      },
      "6" : {
        "Text" : "# Stronger warnings\n",
        "Line" : 72,
        "CharPositionInLine" : 106
      },
      "7" : {
        "Text" : "# Deal with normal tests + special builds of them first\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# This is a normal test target run for success\n",
        "Line" : 88,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Output test detail to JUnit XML\n",
        "Line" : 91,
        "CharPositionInLine" : 14
      },
      "10" : {
        "Text" : "# Deal with tests which require the compilation to succeed\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Deal with tests which require the compilation to fail in an exact way\n",
        "Line" : 125,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Do not build these normally, only on request\n",
        "Line" : 129,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# This test tries to build this test expecting failure\n",
        "Line" : 135,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Fetch the regex to detect correct failure\n",
        "Line" : 140,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "#  # For all special builds, create custom \"all\" target for each of those so one can build \"everything with asan\" etc\n\n#  foreach(special ${SPECIAL_BUILDS})\n\n#    if(DEFINED ${PROJECT_NAME}_hl_${special}_TARGETS)\n\n#      indented_message(STATUS \"Creating non-default all target for special build ${PROJECT_NAME}_hl-${special}\")\n\n#      indented_message(STATUS \"*** ${${PROJECT_NAME}_hl_${special}_TARGETS}\")\n\n#      add_custom_target(${PROJECT_NAME}_hl-${special} DEPENDS ${${PROJECT_NAME}_hl_${special}_TARGETS})\n\n#    endif()\n\n#  endforeach()\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We need to now decide on some default build target group. Prefer static libraries\n\n# unless this is a header only library\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibParseLibrarySources.cmake" : {
      "ObjectId" : "1a26018bb6dce5a5d5640e835bdb6152bcfb91e3",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Parse a set of includes and sources for ${PROJECT_NAME}\n\n# \n\n# Inputs:\n\n#  *      PROJECT_NAME: The name of the project\n\n#  * PROJECT_NAMESPACE: Any namespace for the project\n\n#  * Directory structure from ${CMAKE_CURRENT_SOURCE_DIR} is assumed to be:\n\n#    * include/${PROJECT_PATH}\n\n#    * src\n\n#    * test\n\n#    Files matched are *.h, *.hpp, *.ipp, *.c, *.cpp *.cxx\n\n#    Files excluded are anything with a .quickcpplib file in its root\n\n# \n\n# Outputs:\n\n#  *                   PROJECT_DIR: PROJECT_NAMESPACE with any :: replaced with a / followed by PROJECT_NAME\n\n#  *         PROJECT_IS_DEPENDENCY: ON if this this project is a dependency of a higher level project\n\n#\n\n# Cached outputs:\n\n#  *               ${PROJECT_NAME}_PATH: ${CMAKE_CURRENT_SOURCE_DIR}\n\n#  *          ${PROJECT_NAME}_INTERFACE: The master interface PCHable header file ${PROJECT_DIR}/${PROJECT_NAME}.hpp, plus any sources which need to be compiled into any consumers\n\n#  *            ${PROJECT_NAME}_HEADERS: Any header files found in include\n\n#  *            ${PROJECT_NAME}_SOURCES: Any source files found in src\n\n#  *              ${PROJECT_NAME}_TESTS: Any source files found in test not in a special category\n\n#  *      ${PROJECT_NAME}_COMPILE_TESTS: Any source files found in test or example which must compile\n\n#  * ${PROJECT_NAME}_COMPILE_FAIL_TESTS: Any source files found in test which must fail to compile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prune any items with a .quickcpplib in their root directory\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# As an optimisation for deep nested trees of boostish libraries,\n\n# use the boostishlist to prune itself first\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Now we have an optimal boostishlist\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check a cached scan file's directory timestamps,\n\n# if any are stale then delete the cached scan file\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# cmake glob is unfortunately very slow on deep directory hierarchies, so we glob\n\n# recursively everything we need at once and extract out from that giant list what we need\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Identify source files for the interface library to be linked into all consumers\n\n# MSVC has a cool feature where .natvis files tell the debugger how to display a type\n\n# We append this to the main interface header because we want all .natvis in all the\n\n# dependencies brought into anything we link\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibPolicies.cmake" : {
      "ObjectId" : "48dec2b0daa52a42cf539a2975eb6bf6db98b096",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake_minimum_required() resets policies, so this script\n\n# resets those policies back to what BoostLite needs again\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Apply visibility to all objects\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibPrecompiledHeader.cmake" : {
      "ObjectId" : "c1064a97f706169211e5ce0908074542e901d345",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adds a custom command which generates a precompiled header\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adds an object library target which generates a precompiled header,\n\n# storing into outvar an interface library with the appropriate markup\n\n# to use the precompiled header\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# cmake 3.3 is needed for this function to work (adding dependencies to an INTERFACE target)\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# MSVC PCH generation requires a source file to include the header\n\n# so we'll need to generate one\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This bit needs >= cmake 3.3\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Whatever interface properties are set onto ${outvar} must also be set onto the PCH generation\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Can't propagate $<TARGET_PROPERTY:${outvar},INTERFACE_COMPILE_OPTIONS> else the include of\n\n# myself into dependencies gets propagated too :(\n\n#COMPILE_OPTIONS ${INTERFACE_COMPILE_OPTIONS}\n\n#INCLUDE_DIRECTORIES $<TARGET_PROPERTY:${outvar},INTERFACE_INCLUDE_DIRECTORIES>\n\n#SYSTEM_INCLUDE_DIRECTORIES $<TARGET_PROPERTY:${outvar},INTERFACE_SYSTEM_INCLUDE_DIRECTORIES>\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Visual Studio generator outputs PCH to /Fp\"afio_hl_pch.dir\\Debug\\afio_hl.pch\"\n\n#\n\n# cmake converts /Fp<something> into the native .vcxproj stanza <PrecompiledHeaderOutputFile>\n\n# which causes Visual Studio to delete the PCH before every build. Yay.\n\n#\n\n# We therefore put the interface options for including a precompiled header into a response\n\n# file to work around Visual Studio's unhelpful behaviour\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# GCC really needs the precompiled output to have a .gch extension and\n\n# to live in the same directory as its .hpp file. So copy over the .hpp\n\n# file into the output next to the gch file and add an include search\n\n# path so it picks up its siblings\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Adds an object library target which generates a C++ Module,\n\n# storing into outvar an interface library with the appropriate markup\n\n# to use the C++ Module\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cmake 3.3 is needed for this function to work (adding dependencies to an INTERFACE target)\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# This bit needs >= cmake 3.3\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Whatever interface properties are set onto ${outvar} must also be set onto the C++ Module\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Can't propagate options else the include of myself into dependencies gets propagated too :(\n\n#COMPILE_OPTIONS $<TARGET_PROPERTY:${outvar},INTERFACE_COMPILE_OPTIONS>\n\n#INCLUDE_DIRECTORIES $<TARGET_PROPERTY:${outvar},INTERFACE_INCLUDE_DIRECTORIES>\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibRequireOutOfSourceBuild.cmake" : {
      "ObjectId" : "6c3e69022dc42a075a804f7bba63a0502bb03826",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Issue an error if the source tree is in or equal to the build tree\n\n#\n\n#  include(RequireOutOfSourceBuild)\n\n#\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file ../LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS \"Checking ${_src}\")\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#message(STATUS \"Checking ${_cur_src}\")\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#message(STATUS \"comparing ${_bin} and ${_chopped}\")\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# This next call should cause CMake to crash.  We should remove this dirty hack if CMake becomes\n\n# able to be cancelled in a clean way (i.e. doesn't leave behind files/folders).\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibSetupProject.cmake" : {
      "ObjectId" : "7f48defc31b7fa6e716c4a33ec9269236d0052f1",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set up this cmake environment for this project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Bring in CTest support\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Bring in threads, this is after all the 21st century\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find a python installation, if we have one we can do preprocessing\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure an if(CLANG) and if(GCC) like if(MSVC)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#message(STATUS \"CMAKE_CXX_COMPILER_ID=${CMAKE_CXX_COMPILER_ID} MSVC=${MSVC} CLANG=${CLANG} GCC=${GCC}\")\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Are we running winclang in MSVC-ish mode or in GCC-ish mode? Unfortunately the MSVC flag\n\n# has the totally wrong setting, it should be on when winclang is in MSVC-ish mode, off otherwise.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# On MSVC very annoyingly cmake puts /EHsc and /MD(d) into the global flags which means you\n\n# get a warning when you try to disable exceptions or use the static CRT. I hate to use this\n\n# globally imposed solution, but we are going to hack the global flags to use properties to\n\n# determine whether they are on or off\n\n#\n\n# Create custom properties called CXX_EXCEPTIONS, CXX_RTTI and CXX_STATIC_RUNTIME\n\n# These get placed at global, directory and target scopes\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set the default for these properties at global scope. If they are not set per target or\n\n# whatever, the next highest scope will be looked up\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Purge unconditional use of these flags and remove all the ignored\n\n# cruft which cmake adds for the LLVM-vs* toolset.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#\"-Wall\"\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#\"-O0\"\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#message(STATUS \"${flag} = ${${flag}}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Restore those same, but now selected by the properties\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#    $<$<STREQUAL:$<TARGET_PROPERTY:CXX_STATIC_RUNTIME>,ON>:-static>\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Looks like cmake's toolset for LLVM-vs* has some serious problems\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Scan this directory for library source code\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Used to add optional build targets for every build target\n",
        "Line" : 121,
        "CharPositionInLine" : 21
      },
      "18" : {
        "Text" : "# Configure the static analyser build\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Chosen because OS X enforces this limit on stack usage\n",
        "Line" : 126,
        "CharPositionInLine" : 60
      },
      "20" : {
        "Text" : "#set(sa_LINK_FLAGS)\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#set(sa_LINK_FLAGS)\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Does this compiler have the santisers?\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# This fellow probably ought to be compiled into every executable\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# This fellow probably should just always be turned on period\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "## everything gets this flag\n",
        "Line" : 190,
        "CharPositionInLine" : 57
      },
      "26" : {
        "Text" : "# Create custom category targets to build all of some kind of thing\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "outcome/include/outcome/quickcpplib/cmakelib/QuickCppLibUtils.cmake" : {
      "ObjectId" : "7ed344f898c1ed3e28d0802c26c567976bd09ea6",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns a path with forward slashes replaced with backslashes on WIN32\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Simulate a target_link_options as cmake is missing such a thing\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Convert args to a string\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add generator expressions to appendvar expanding at build time any remaining parameters\n\n# if the <condition> is true at build time\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Emulate list(FILTER list INCLUDE|EXCLUDE REGEX regex) on cmake < 3.6\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Escape a string into a regex matching that string\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Indents a message by a global variable amount of whitespace\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Executes an external process, fatal erroring if it fails\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Determines if a git repo has changed\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  message(\"${status}\")\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Gets the committed SHA in the index for some entry\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# git ls-files -s produces entries of the format:\n\n#   100644 e10ce7c26311e43f337b1f3929450e1804059adf 0       test/test.vcxproj\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#set(cacheinfo \"${CMAKE_MATCH_1}\")\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#set(size \"${CMAKE_MATCH_3}\")\n\n#set(mentry \"${CMAKE_MATCH_4}\")\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Determines what git revision SHA some path is currently on\n\n# unsetting outvar if not a git repository\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Are you a submodule?\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# This will have the form:\n\n# gitdir: ../../../../.git/modules/include/boost/afio/boost-lite\n\n# gitdir: /home/paul/tmp/cget/cget/build/tmp-48d80d9e2c734b86800806772ac60260/boost.outcome/include/boost/outcome/boost-lite/.git\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Read .git/HEAD and the SHA and timestamp\n\n#indented_message(STATUS \"gitdir is ${gitdir}\")\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#indented_message(STATUS \"head is '${HEAD}'\")\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#indented_message(STATUS \"Last commit was ${HEADSHA} at ${HEADSTAMP}\")\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# We expect a header file with macros like\n\n# #define BOOST_AFIO_VERSION_MAJOR    2\n\n# \n\n# The first macros with _MAJOR, _MINOR, _PATCH and _REVISION at their end are parsed\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# We expect a header file like this:\n\n#   // Comment\n\n#   #define BOOST_AFIO_PREVIOUS_COMMIT_REF    x\n\n#   #define BOOST_AFIO_PREVIOUS_COMMIT_DATE   \"x\"\n\n#   #define BOOST_AFIO_PREVIOUS_COMMIT_UNIQUE x\n\n# Lines 2, 3 and 4 need their ending rewritten\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#set(temphppfile \"${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}_revision.hpp\")\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Apply OpenMP to a given target. Add REQUIRED to make it mandatory.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Currently doesn't work\n",
        "Line" : 221,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Preprocess a file\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Finds a quickcpplib library\n\n#\n\n# quickcpplib libraries can be located via these means in order of preference:\n\n# Only if \"../.quickcpplib_use_siblings\" exists:\n\n#   1) \"../${library}\"                         (e.g. ../outcome)\n\n# Otherwise it looks up ${library} in .gitmodules\n\n#\n\n# If we use a sibling edition, we update the current git index to point at the \n\n# git SHA of the sibling edition. That way when we git commit, we need not arse\n\n# around with manually updating the embedded submodules.\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Read in .gitmodules and look for the dependency\n",
        "Line" : 270,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Prefer sibling editions of dependencies to embedded editions\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# One of the only uses of a non-target specific cmake command anywhere,\n\n# but this is local to the calling CMakeLists.txt and is the correct\n\n# thing to use.\n",
        "Line" : 289,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# If we are using an embedded dependency, for any unit tests make the\n\n# dependencies appear as if at the same location as for the headers\n",
        "Line" : 304,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Reset policies after using add_subdirectory() which usually means a cmake_minimum_required()\n\n# was called which resets policies to default\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# I may need to update git submodule SHAs in the index to those of the sibling repo\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Get the SHA used by our repo for the subrepo\n",
        "Line" : 317,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# We need to delete any files inside the \"${gitsubmodulepath}\"\n\n# to prevent the submodule SHA restamp confusing git\n",
        "Line" : 323,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Git uses the magic cacheinfo of 160000 for subrepos for some reason as can be evidenced by:\n\n# ned@LYTA:~/windocs/boostish/afio$ git ls-files -s | grep -e ^160000\n\n#   160000 cc293d14a48bf1ee3fb78743c3ad5cf61d63f3ff 0       doc/html\n\n#   160000 2682d240406a8a68be442227a6c15df8e2261b94 0       include/boost/afio/boost-lite\n\n#   160000 f436d33188b0117c1ecaa40ad9ebadabfdc69c3f 0       include/boost/afio/gsl-lite\n\n#   160000 7fb9617c21cae96e04f3a9afa54310a08ad87a57 0       include/boost/afio/outcome\n\n#   160000 7f583ce7cc36d2a8baefd3c09445457503614cb8 0       test/kerneltest\n",
        "Line" : 334,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# We don't cache this as we want to rerun the above git SHA stamping etc. per build\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Configures a CTest script with a sensible set of defaults\n\n# for doing a configure, build, test and submission run\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# TODO Figure out how to use winclang via adding in -T v140_clang_c2\n",
        "Line" : 388,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Merge all the junit XML files from the testing into one junit XML file\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Figure out where this iteration's Test.xml lives\n",
        "Line" : 414,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Add the combined junit XML file into our Test.xml\n",
        "Line" : 418,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 42
    },
    "outcome/include/outcome/quickcpplib/include/gsl-lite/CMakeLists.txt" : {
      "ObjectId" : "c635518d54399fef4ca7a487f7e24c80226547bd",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2018 by Martin Moene\n\n#\n\n# gsl-lite is based on GSL: Guideline Support Library,\n\n# https://github.com/microsoft/gsl\n\n#\n\n# This code is licensed under the MIT License (MIT).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gsl-lite version, updated by script/update-version.py:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# At default, disable building and performing of tests and building of examples:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Interface library:\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Package configuration:\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Installation:\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If requested, build and perform tests, build examples:\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# end of file\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "outcome/include/outcome/quickcpplib/include/gsl-lite/example/CMakeLists.txt" : {
      "ObjectId" : "53fd81ae725c475d579dbe9905d07c9f068d87fd",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2018 by Martin Moene\n\n#\n\n# gsl-lite is based on GSL: Guideline Support Library,\n\n# https://github.com/microsoft/gsl\n\n#\n\n# This code is licensed under the MIT License (MIT).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target default options and definitions:\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sources (.cpp) and their base names:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Function to create a target:\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets:\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# end of file\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "outcome/include/outcome/quickcpplib/include/gsl-lite/example/cmake-extern/CMakeLists.txt" : {
      "ObjectId" : "6bee27f78fd6fe36c191e7cfb2140a0be944ba53",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set default ExternalProject root directory and add gsl-lite:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provide #include access to gsl-lite as 'gsl/gsl' and as 'gsl/gsl-lite.hpp': \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build program from src:\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "outcome/include/outcome/quickcpplib/include/gsl-lite/example/cmake-extern/src/CMakeLists.txt" : {
      "ObjectId" : "27dff7cca0994396d733699bbde1eebb87641660",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make program executable:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/include/outcome/quickcpplib/include/gsl-lite/example/cmake-pkg/CMakeLists.txt" : {
      "ObjectId" : "8011f58b8a6716f7c616312806b5d9c36286f26e",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gsl-lite version, updated by script/update-version.py:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "outcome/include/outcome/quickcpplib/include/gsl-lite/test/CMakeLists.txt" : {
      "ObjectId" : "c1f96771f13976d6556bddd88e3ab708819f3e02",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2018 by Martin Moene\n\n#\n\n# gsl-lite is based on GSL: Guideline Support Library,\n\n# https://github.com/microsoft/gsl\n\n#\n\n# This code is licensed under the MIT License (MIT).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Test sources:\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure gsl-lite for testing:\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Preset available C++ language compiler flags:\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine compiler-specifics for MSVC, GNUC, Clang:\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# GNU: available -std flags depends on version\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Clang: available -std flags depends on version\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# as is\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# as is\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Enable MS C++ Core Guidelines checker if MSVC:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make target, compile for given standard if specified:\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Necessary for clang 3.x:\n",
        "Line" : 128,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Ok for clang 4 and later:\n\n# set( CMAKE_CXX_STANDARD ${std} )\n\n# set( CMAKE_CXX_STANDARD_REQUIRED ON )\n\n# set( CMAKE_CXX_EXTENSIONS OFF )\n",
        "Line" : 130,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Add generic executable, unless -std flags can be specified:\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# unconditionally add C++98 variant as MSVC has no option for it:\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Configure unit tests via CTest:\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Unconditionally add C++98 variant for MSVC:\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# end of file\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "outcome/include/outcome/quickcpplib/include/optional/CMakeLists.txt" : {
      "ObjectId" : "1af707f6c5ba55fa54dcea1ffe48e275d8426c16",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if CMAKE_VERSION >= 3.0 this project installs an INTERFACE target for\n\n# the optional.hpp file.\n\n#\n\n# Usage:\n\n#\n\n# In your project's CMakeLists.txt:\n\n#\n\n#     find_package(akrzemi1_optional REQUIRED)\n\n#     ...\n\n#     target_link_libraries(mytarget ... akrzemi1::optional ...)\n\n#\n\n# In your C++ source file:\n\n#\n\n#     #include \"akrzemi1/optional.hpp\"\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# don't override c++ standard if already set\n",
        "Line" : 23,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# if CMAKE_VERSION >= 3.0\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "subprojects/protobuf-c/Makefile.am" : {
      "ObjectId" : "b59768e1f5b105547651c32813121ec595a4e2ce",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# code coverage\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# libprotobuf-c\n\n#\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# protoc-gen-c\n\n#\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# protoc-c compat link\n\n#\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# protobuf-c tests\n\n#\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# skip tests on cross-compiling\n\n#\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# BUILD_PROTO3\n",
        "Line" : 212,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Issue #220\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Issue #251\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CROSS_COMPILING\n",
        "Line" : 253,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# BUILD_COMPILER\n",
        "Line" : 255,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# documentation\n\n#\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "subprojects/protobuf-c/build-cmake/CMakeLists.txt" : {
      "ObjectId" : "165831498d4c435b63bce3216ff4e9cc27657060",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#options\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# for generated files\n",
        "Line" : 41,
        "CharPositionInLine" : 41
      },
      "3" : {
        "Text" : "# In case we are building static libraries, link also the runtime library statically\n\n# so that MSVCR*.DLL is not required at runtime.\n\n# https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx\n\n# This is achieved by replacing msvc option /MD with /MT and /MDd with /MTd\n\n# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "subprojects/protobuf/BUILD" : {
      "ObjectId" : "bcaf9cd5387fafe549de35484a4dc7ce333a152d",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel (http://bazel.io/) BUILD file for Protobuf.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n# Protobuf Runtime Library\n################################################################################",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -Wno-sign-compare\n# -Wno-unused-function",
        "Line" : 13,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "# Android and Windows builds do not need to link in a separate pthread library.",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# AUTOGEN(protobuf_lite_srcs)",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# AUTOGEN(protobuf_srcs)",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# This provides just the header files for use in projects that need to build\n# shared libraries for dynamic loading. This target is available until Bazel\n# adds native support for such use cases.\n# TODO(keveman): Remove this target once the support gets added to Bazel.",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Map of all well known protos.\n# name => (include path, imports)",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################################\n# Well Known Types Proto Library Rules\n#\n# These proto_library rules can be used with one of the language specific proto\n# library rules i.e. java_proto_library:\n#\n# java_proto_library(\n#   name = \"any_java_proto\",\n#   deps = [\"@com_google_protobuf//:any_proto],\n# )\n################################################################################",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n# Protocol Buffers Compiler\n################################################################################",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# AUTOGEN(protoc_lib_srcs)",
        "Line" : 277,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "################################################################################\n# Tests\n################################################################################",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# AUTOGEN(lite_test_protos)",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# AUTOGEN(test_protos)",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# AUTOGEN(common_test_srcs)",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# AUTOGEN(test_plugin_srcs)",
        "Line" : 474,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# AUTOGEN(test_srcs)",
        "Line" : 499,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Files for csharp_bootstrap_unittest.cc.",
        "Line" : 578,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "################################################################################\n# Java support\n################################################################################",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "################################################################################\n# Python support\n################################################################################",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Copy the builtin proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly since they are all part of the same Python\n# package.",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python in srcs.",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Copy the test proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly by the tests since they are all part of the\n# same Python package.",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python_test in srcs.",
        "Line" : 751,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "subprojects/protobuf/Makefile.am" : {
      "ObjectId" : "19a160711ef022f4919d0416ca0d9feb2978fb2c",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always include gmock in distributions.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build gmock before we build protobuf tests.  We don't add gmock to SUBDIRS\n\n# because then \"make check\" would also build and run all of gmock's own tests,\n\n# which takes a lot of time and is generally not useful to us.  Also, we don't\n\n# want \"make install\" to recurse into gmock since we don't want to overwrite\n\n# the installed version of gmock if there is one.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We would like to clean gmock when \"make clean\" is invoked.  But we have to\n\n# be careful because clean-local is also invoked during \"make distclean\", but\n\n# \"make distclean\" already recurses into gmock because it's listed among the\n\n# DIST_SUBDIRS.  distclean will delete gmock/Makefile, so if we then try to\n\n# cd to the directory again and \"make clean\" it will fail.  So, check that the\n\n# Makefile exists before recursing.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Deletes all the files generated by autogen.sh.\n",
        "Line" : 1086,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "subprojects/protobuf/benchmarks/Makefile.am" : {
      "ObjectId" : "d98eae5eadbbeb8c169fe109b132c59fdac468f6",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Explicit deps because BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n\n# See: https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "subprojects/protobuf/cmake/CMakeLists.txt" : {
      "ObjectId" : "f159f60eae652a19d2f44c95f451c9c4f7031385",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake policies\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Project\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Options\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# User options\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Path to main configure script\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Parse configure script\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Description\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Version\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Contact\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Parse version tweaks\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Package version\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# FindZLIB module define ZLIB_INCLUDE_DIRS variable\n\n# Set ZLIB_INCLUDE_DIRECTORIES for compatible\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Using imported target if exists\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Explicitly set these to empty (override NOT_FOUND) so cmake doesn't\n\n# complain when we use them later.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# In case we are building static libraries, link also the runtime library statically\n\n# so that MSVCR*.DLL is not required at runtime.\n\n# https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx\n\n# This is achieved by replacing msvc option /MD with /MT and /MDd with /MTd\n\n# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Build with multiple processes\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC warning suppressions\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# 'expression' : signed/unsigned mismatch\n\n# switch statement contains 'default' but no 'case' labels\n\n# unary minus operator applied to unsigned type, result still unsigned\n\n# 'conversion' conversion from 'type1' to 'type2', possible loss of data\n\n# 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# 'var' : conversion from 'size_t' to 'type', possible loss of data\n\n# 'identifier' : truncation from 'type1' to 'type2'\n\n# 'operator' : integral constant overflow\n\n# 'conversion' : truncation of constant value\n\n# 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)\n\n# 'this' : used in base member initializer list\n\n# no definition for inline function 'function'\n\n# 'type' : forcing value to bool 'true' or 'false' (performance warning)\n\n# The compiler encountered a deprecated declaration.\n",
        "Line" : 140,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Allow big object\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Suppress linker warnings about files with no symbols defined.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Add the \"lib\" prefix for generated .lib outputs.\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# When building with \"make\", \"lib\" prefix will be added automatically by\n\n# the build tool.\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 23
    },
    "subprojects/protobuf/cmake/examples.cmake" : {
      "ObjectId" : "e5cad63f67650db353a1f3a0e8b349e8cf0db32f",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal utility function: Create a custom target representing a build of examples with custom options.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Skip\n",
        "Line" : 20,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Add examples as an external project.\n\n# sub_directory cannot be used because the find_package(protobuf) call would cause failures with redefined targets.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Build using the legacy compatibility module.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#Build using the installed library.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Build using the installed library in legacy compatibility mode.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "subprojects/protobuf/cmake/install.cmake" : {
      "ObjectId" : "441bf5532a385100d8b09a71815f6336a81d5b9a",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal function for parsing auto tools scripts\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install well-known type proto files\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install configuration\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allows the build directory to be used as a find directory.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "subprojects/protobuf/cmake/libprotobuf-lite.cmake" : {
      "ObjectId" : "9e1fab0a79010b3a6157d92f1e66ecb4744d58b8",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "subprojects/protobuf/cmake/libprotobuf.cmake" : {
      "ObjectId" : "72db915bc99ca8682d530e2cca9380c1e76a488d",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "subprojects/protobuf/cmake/libprotoc.cmake" : {
      "ObjectId" : "107c1c526b2b0a96942784e14738f0fb0d6a57b9",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "subprojects/protobuf/cmake/protobuf-lite.pc.cmake" : {
      "ObjectId" : "cbe5426afa43872424fdb140c0f34f4268b55b13",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "subprojects/protobuf/cmake/protobuf-options.cmake" : {
      "ObjectId" : "47fb15825752e544fda411db01c8a4391ed4dd38",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verbose output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindProtobuf module compatibel\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "subprojects/protobuf/cmake/protobuf.pc.cmake" : {
      "ObjectId" : "d33e98cca8f05e95343576d01ee959c22f1b7d78",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "subprojects/protobuf/cmake/protoc.cmake" : {
      "ObjectId" : "4f07c389c976777e7685beb8e321e7ffcb98fcff",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "subprojects/protobuf/cmake/tests.cmake" : {
      "ObjectId" : "d4622c6b22f4ca9d3fdd5f420afbf1eb264a976a",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "subprojects/protobuf/conformance/Makefile.am" : {
      "ObjectId" : "765f3588ff79571bf6139b4313254a107a05bbbb",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# proto2 input files, should be separated with proto3, as we\n\n# can't generate proto2 files for ruby, php and objc\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lite/com/google/protobuf/Any.java                            \\\n  # lite/com/google/protobuf/AnyOrBuilder.java                   \\\n  # lite/com/google/protobuf/AnyProto.java                       \\\n  # lite/com/google/protobuf/BoolValue.java                      \\\n  # lite/com/google/protobuf/BoolValueOrBuilder.java             \\\n  # lite/com/google/protobuf/BytesValue.java                     \\\n  # lite/com/google/protobuf/BytesValueOrBuilder.java            \\\n  # lite/com/google/protobuf/conformance/Conformance.java        \\\n  # lite/com/google/protobuf/DoubleValue.java                    \\\n  # lite/com/google/protobuf/DoubleValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Duration.java                       \\\n  # lite/com/google/protobuf/DurationOrBuilder.java              \\\n  # lite/com/google/protobuf/DurationProto.java                  \\\n  # lite/com/google/protobuf/FieldMask.java                      \\\n  # lite/com/google/protobuf/FieldMaskOrBuilder.java             \\\n  # lite/com/google/protobuf/FieldMaskProto.java                 \\\n  # lite/com/google/protobuf/FloatValue.java                     \\\n  # lite/com/google/protobuf/FloatValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int32Value.java                     \\\n  # lite/com/google/protobuf/Int32ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int64Value.java                     \\\n  # lite/com/google/protobuf/Int64ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/ListValue.java                      \\\n  # lite/com/google/protobuf/ListValueOrBuilder.java             \\\n  # lite/com/google/protobuf/NullValue.java                      \\\n  # lite/com/google/protobuf/StringValue.java                    \\\n  # lite/com/google/protobuf/StringValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Struct.java                         \\\n  # lite/com/google/protobuf/StructOrBuilder.java                \\\n  # lite/com/google/protobuf/StructProto.java                    \\\n  # lite/com/google/protobuf/Timestamp.java                      \\\n  # lite/com/google/protobuf/TimestampOrBuilder.java             \\\n  # lite/com/google/protobuf/TimestampProto.java                 \\\n  # lite/com/google/protobuf/UInt32Value.java                    \\\n  # lite/com/google/protobuf/UInt32ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/UInt64Value.java                    \\\n  # lite/com/google/protobuf/UInt64ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Value.java                          \\\n  # lite/com/google/protobuf/ValueOrBuilder.java                 \\\n  # lite/com/google/protobuf/WrappersProto.java\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# All source files excepet C++/Objective-C ones should be explicitly listed\n\n# here because the autoconf tools don't include files of other languages\n\n# automatically.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Explicit deps beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On travis, the build fails without the isysroot because whatever system\n\n# headers are being found don't include generics support for\n\n# NSArray/NSDictionary, the only guess is their image at one time had an odd\n\n# setup for Xcode and old frameworks are being found.\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_objc\" could fail if parallel enough.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# JavaScript well-known types are expected to be in a directory called\n\n# google-protobuf, because they are usually in the google-protobuf npm\n\n# package.  But we want to use the sources from our tree, so we recreate\n\n# that directory structure here.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Some implementations include pre-generated versions of well-known types.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## $(PROTOC) -I$(srcdir) -I$(top_srcdir) --java_out=lite:lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs)\n",
        "Line" : 260,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## @mkdir -p lite\n\n## oldpwd=`pwd` && ( cd $(srcdir) && $$oldpwd/../src/protoc$(EXEEXT) -I. -I$(top_srcdir)/src --java_out=lite:$$oldpwd/lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs) )\n",
        "Line" : 272,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Currently the conformance code is alongside the rest of the C#\n\n# source, as it's easier to maintain there. We assume we've already\n\n# built that, so we just need a script to run it.\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Targets for actually running tests.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# These depend on library paths being properly set up.  The easiest way to\n\n# run them is to just use \"tox\" from the python dir.\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "subprojects/protobuf/examples/BUILD" : {
      "ObjectId" : "d5d5d9a56b25b3460164be63c99b6b9e352374fc",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This BUILD file shows how to use protobuf with bazel. Before you can use\n# proto_library/<lang>_proto_library rules in a BUILD file, you need to\n# include protobuf repo as remote repositories in your WORKSPACE file. See\n# the WORKSPACE file in the same directory with this BUILD file for an\n# example.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For each .proto file, a proto_library target should be defined. This target\n# is not bound to any particular language. Instead, it defines the dependency\n# graph of the .proto files (i.e., proto imports) and serves as the provider\n# of .proto source files to the protocol compiler.\n#\n# Remote repository \"com_google_protobuf\" must be defined to use this rule.",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The cc_proto_library rule generates C++ code for a proto_library rule. It\n# must have exactly one proto_library dependency. If you want to use multiple\n# proto_library targets, create a separate cc_proto_library target for each\n# of them.\n#\n# Remote repository \"com_google_protobuf_cc\" must be defined to use this rule.",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cc_library/cc_binary targets can depend on cc_proto_library targets.",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Similar to cc_proto_library but for Java.\n#\n# Remote repository \"com_google_protobuf_java\" must be defined to use this rule.",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Java lite.\n#\n# Remote repository \"com_google_protobuf_javalite\" must be defined to use this\n# rule.",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Java lite API is a subset of the regular Java API so if you only uses this\n# subset in your code, you can actually compile your code against both (i.e.,\n# share code between server build and Android build).\n#\n# The lite version has a smaller code size, and you can see that by comparing\n# the resulted .jar file:\n#\n#   $ bazel build :add_person_java_deploy.jar :add_person_java_lite_deploy.jar\n#   $ ls -l bazel-bin/*_deploy.jar\n#   -r-xr-xr-x 1 xiaofeng eng 1230797 Sep  8 12:24 bazel-bin/add_person_java_deploy.jar\n#   -r-xr-xr-x 1 xiaofeng eng  236166 Sep  8 12:24 bazel-bin/add_person_java_lite_deploy.jar\n#\n# In the above example, the lite .jar file is 6 times smaller. With proper\n# proguard inlining/stripping, the difference can be much more larger than\n# that.",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "subprojects/protobuf/examples/CMakeLists.txt" : {
      "ObjectId" : "3e8e65414e1d55fb67dbeec784bd50ce765c03b7",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find required protobuf package\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Code Generation\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Legacy Support\n",
        "Line" : 32,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "#Executable setup\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#Legacy mode\n",
        "Line" : 40,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 8
    },
    "subprojects/protobuf/examples/Makefile" : {
      "ObjectId" : "1ff7fa7fc5c25a381de9ca626b35d11640a764e0",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# See README.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make directory for go package\n",
        "Line" : 29,
        "CharPositionInLine" : 19
      },
      "2" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 34,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 38,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 4
    },
    "subprojects/protobuf/java/compatibility_tests/v2.5.0/deps/pom.xml" : {
      "ObjectId" : "7ceb96049d72b06a79b0756da0d22769068adf17",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "subprojects/protobuf/java/compatibility_tests/v2.5.0/more_protos/pom.xml" : {
      "ObjectId" : "ff0c4133f0d89cf066f9ccfbdc44a3ece26cad51",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "subprojects/protobuf/java/compatibility_tests/v2.5.0/pom.xml" : {
      "ObjectId" : "83a7563afd9f147ec67a38c1a5561d58a402292e",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "subprojects/protobuf/java/compatibility_tests/v2.5.0/protos/pom.xml" : {
      "ObjectId" : "a22e91ed1d61386ed98a978ca3afd4535df2fe0d",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "subprojects/protobuf/java/compatibility_tests/v2.5.0/tests/pom.xml" : {
      "ObjectId" : "f1ce46e7ab2d4e1a81fbbf00f6d87034558453d0",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "subprojects/protobuf/java/core/pom.xml" : {
      "ObjectId" : "4b65e72e600d4feaab7d4dd6b0b2d7047fe980ec",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Include core protos in the bundle as resources ",
        "Line" : 40,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " Use Antrun plugin to generate sources with protoc ",
        "Line" : 62,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : " Generate core protos ",
        "Line" : 66,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : " Generate the test protos ",
        "Line" : 80,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : " Add the generated sources to the build ",
        "Line" : 96,
        "CharPositionInLine" : 54
      },
      "5" : {
        "Text" : " OSGI bundle configuration ",
        "Line" : 128,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 6
    },
    "subprojects/protobuf/java/lite/pom.xml" : {
      "ObjectId" : "c902f8192a191327d9328b9ae55d52b3f5e631a3",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Use Antrun plugin to generate sources with protoc ",
        "Line" : 43,
        "CharPositionInLine" : 65
      },
      "1" : {
        "Text" : " Generate core protos ",
        "Line" : 47,
        "CharPositionInLine" : 40
      },
      "2" : {
        "Text" : " Generate the test protos ",
        "Line" : 61,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : " Only compile a subset of the files ",
        "Line" : 77,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : " OSGI bundle configuration ",
        "Line" : 169,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 5
    },
    "subprojects/protobuf/java/pom.xml" : {
      "ObjectId" : "6e339d7f024ebbe36446ec645ed19f88d176b515",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " These are relative to the submodules ",
        "Line" : 29,
        "CharPositionInLine" : 50
      },
      "1" : {
        "Text" : " <module>lite</module> ",
        "Line" : 211,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 2
    },
    "subprojects/protobuf/java/util/pom.xml" : {
      "ObjectId" : "3de624fa8e5478c76e58276d403526d7ad9617e5",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Use the core proto dir so that we can call the core generation script ",
        "Line" : 48,
        "CharPositionInLine" : 83
      },
      "1" : {
        "Text" : " Generate the test protos ",
        "Line" : 57,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : " Generate all of the test protos from the core module ",
        "Line" : 63,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " Generate additional test protos for this module ",
        "Line" : 66,
        "CharPositionInLine" : 73
      },
      "4" : {
        "Text" : " Add the generated test sources to the build ",
        "Line" : 82,
        "CharPositionInLine" : 59
      },
      "5" : {
        "Text" : " Configure the OSGI bundle ",
        "Line" : 102,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : " Configure the fat jar to include all dependencies ",
        "Line" : 116,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 7
    },
    "subprojects/protobuf/javanano/pom.xml" : {
      "ObjectId" : "0395e8f2dc9ab0aecd9f897de9a7599bc6897955",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "subprojects/protobuf/more_tests/Makefile" : {
      "ObjectId" : "286cf0f12c812d1034cb1c42d0e4c21e67dc5c15",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Additional tests to run before releasing a package.\n\n#\n\n# Run like:\n\n#   make PACKAGE=/path/to/protobuf-VERSION.tar.gz\n\n#\n\n# Some of these tests require tools or make assumptions that may not be\n\n# available on end-user machines, so these cannot be part of \"make check\".  For\n\n# example, we test that the headers compile with strict warning settings, but\n\n# since different compilers produce wildly different warnings we cannot assume\n\n# that this test will pass everywhere.  If we ran it as part of \"make check\",\n\n# it could unnecessarily block users from running the real tests just because\n\n# their compiler produces some extra warnings that probably aren't a big deal.\n\n# So we run it separately. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unpack the package into src, then install it into target.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Verify that headers produce no warnings even under strict settings.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO(kenton):  Consider adding -pedantic and -Weffc++.  Currently these\n\n#   produce tons of extra warnings so we'll need to do some work first.\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "subprojects/protobuf/protobuf.bzl" : {
      "ObjectId" : "23380babc311bdd40d1566a73536544e2320bbb8",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel 0.4.4 and older have genfiles paths that look like:\n#   bazel-out/local-fastbuild/genfiles/external/repo/foo\n# After the exec root rearrangement, they look like:\n#   ../repo/bazel-out/local-fastbuild/genfiles/foo",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# We are using the fact that Bazel 0.4.4+ provides repository-relative paths\n# for ctx.genfiles_dir.",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This means that we're either in the old version OR the new version in the local repo.\n# Either way, appending the source path to the genfiles dir works.",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "\"\"\"General implementation for generating protos\"\"\"",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "\"\"\"Generates codes from Protocol Buffers definitions.\n\nThis rule helps you to implement Skylark macros specific to the target\nlanguage. You should prefer more specific `cc_proto_library `,\n`py_proto_library` and others unless you are adding such wrapper macros.\n\nArgs:\n  srcs: Protocol Buffers definition files (.proto) to run the protocol compiler\n    against.\n  deps: a list of dependency labels; must be other proto libraries.\n  includes: a list of include paths to .proto files.\n  protoc: the label of the protocol compiler to generate the sources.\n  plugin: the label of the protocol compiler plugin to be passed to the protocol\n    compiler.\n  plugin_language: the language of the generated sources\n  plugin_options: a list of options to be passed to the plugin\n  gen_cc: generates C++ sources in addition to the ones from the plugin.\n  gen_py: generates Python sources in addition to the ones from the plugin.\n  outs: a list of labels of the expected outputs from the protocol compiler.\n\"\"\"",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "\"\"\"Bazel rule to create a C++ protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the cc_proto_library.\n    srcs: the .proto files of the cc_proto_library.\n    deps: a list of dependency labels; must be cc_proto_library.\n    cc_libs: a list of other cc_library targets depended by the generated\n        cc_library.\n    include: a string indicating the include path of the .proto files.\n    protoc: the label of the protocol compiler to generate the sources.\n    internal_bootstrap_hack: a flag indicate the cc_proto_library is used only\n        for bootstraping. When it is set to True, no files will be generated.\n        The rule will simply be a provider for .proto files, so that other\n        cc_proto_library can depend on it.\n    use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin\n        when processing the proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated cc_library target.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For pre-checked-in generated files, we add the internal_bootstrap_hack\n# which will skip the codegen action.",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# An empty cc_library to make rule dependency consistent.",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "\"\"\"Bazel rule to generate the gen_well_known_protos_java genrule\n\n  Args:\n    srcs: the well known protos\n  \"\"\"",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "\"\"\"Macro to copy files to a different directory and then create a filegroup.\n\n  This is used by the //:protobuf_python py_proto_library target to work around\n  an issue caused by Python source files that are part of the same Python\n  package being in separate directories.\n\n  Args:\n    srcs: The source files to copy and add to the filegroup.\n    strip_prefix: Path to the root of the files to copy.\n    dest: The directory to copy the source files into.\n    **kwargs: extra arguments that will be passesd to the filegroup.\n  \"\"\"",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "\"\"\"Bazel rule to create a Python protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the py_proto_library.\n    srcs: the .proto files of the py_proto_library.\n    deps: a list of dependency labels; must be py_proto_library.\n    py_libs: a list of other py_library targets depended by the generated\n        py_library.\n    py_extra_srcs: extra source files that will be added to the output\n        py_library. This attribute is used for internal bootstrapping.\n    include: a string indicating the include path of the .proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated py_library target.\n    protoc: the label of the protocol compiler to generate the sources.\n    use_grpc_plugin: a flag to indicate whether to call the Python C++ plugin\n        when processing the proto files.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Note: Generated grpc code depends on Python grpc module. This dependency\n# is not explicitly listed in py_libs. Instead, host system is assumed to\n# have grpc installed.",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "\"\"\"Bazel rules to create batch tests for protobuf internal.\n\n  Args:\n    name: the name of the rule.\n    modules: a list of modules for tests. The macro will create a py_test for\n        each of the parameter with the source \"google/protobuf/%s.py\"\n    kargs: extra parameters that will be passed into the py_test.\n\n  \"\"\"",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "subprojects/protobuf/protoc-artifacts/pom.xml" : {
      "ObjectId" : "0f9dd9f81e480c5e5900c79daf596385fdb2b28b",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Specify the staging repository to deploy to. This can be left\n             empty for the first deployment, and Sonatype will create one. For\n             subsequent deployments it should be set to what Sonatype has\n             created, so that all deployments will go to the same repository.\n             ",
        "Line" : 99,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 1
    },
    "subprojects/protobuf/ruby/pom.xml" : {
      "ObjectId" : "adf6ff207da9dbf68eca7d848724bb5c43f771b8",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "subprojects/protobuf/src/Makefile.am" : {
      "ObjectId" : "cdc2298b9001a230959d9d27e0b509670c9593b8",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Turn on all warnings except for sign comparison (we ignore sign comparison\n\n# in Google so our code base have tons of such warnings).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If I say \"dist_include_DATA\", automake complains that $(includedir) is not\n\n# a \"legitimate\" directory for DATA.  Screw you, automake.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you are adding new files here, also remember to change the build files for\n\n# all other languages, //protoc-artifacts/build-zip.sh and run\n\n# //update_file_list.sh for bazel.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Not sure why these don't get cleaned automatically.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The special JS code for the well-known types is linked into the compiler via\n\n# well_known_types_embed.cc, which is generated from .js source files. We have\n\n# to build the js_embed binary using $(CXX_FOR_BUILD) so that it is executable\n\n# on the build machine in a cross-compilation setup.\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We have to cd to $(srcdir) so that out-of-tree builds work properly.\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Disable optimization for tests unless the user explicitly asked for it,\n\n# since test_util.cc takes forever to compile with optimization (with GCC).\n\n# See configure.ac for more info.\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Run cpp_unittest again with PROTOBUF_TEST_NO_DESCRIPTORS defined.\n",
        "Line" : 854,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Build lite_unittest separately, since it doesn't use gtest. It can't\n\n# depend on gtest because our internal version of gtest depend on proto\n\n# full runtime and we want to make sure this test builds without full\n\n# runtime.\n",
        "Line" : 877,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# lite_arena_unittest depends on gtest because teboring@ found that without\n\n# gtest when building the test internally our memory sanitizer doesn't detect\n\n# memory leaks (don't know why).\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Test plugin binary.\n",
        "Line" : 908,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This test target is to ensure all our public header files and generated\n\n# code is free from warnings. We have to be more pedantic about these\n\n# files because they are compiled by users with different compiler flags.\n",
        "Line" : 926,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "subprojects/protobuf/util/python/BUILD" : {
      "ObjectId" : "3ac03856690e43bba992ea8e5a1047e6435eed61",
      "LastModified" : "2018-07-08T19:39:20Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This is a placeholder for python headers. Projects needing to use\n# fast cpp protos in protobuf's python interface should build with\n# --define=use_fast_cpp_protos=true, and in addition, provide\n# //external:python_headers dependency that in turn provides Python.h.\n#\n# Projects that include protobuf using a Bazel external repository will need to\n# add a workspace rule to their WORKSPACE files to add an external workspace\n# that includes the Python headers. For example, the protobuf WORKSPACE file\n# includes the following local_repository rule that points to this directory:\n#\n# new_local_repository(\n#   name = \"python\",\n#   path = __workspace_dir__ + \"/util/python\",\n# )",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 55,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 5,
    "BAZEL" : 4,
    "MAVEN" : 12
  },
  "ElapsedTime" : 4163
}