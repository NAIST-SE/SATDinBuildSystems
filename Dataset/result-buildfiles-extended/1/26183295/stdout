{
  "Repository" : "26183295",
  "Revision" : "HEAD",
  "ObjectId" : "208e21d6c1b2377ce1678a195c5697806a7236f6",
  "CommitTime" : "2019-04-17T16:30:21Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "33198babc5eea4926a48b159f6ce136cf2038e66",
      "LastModified" : "2019-04-04T13:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Extract the current version from the VERSION file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang (CMake 3.0)\n\n# Only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 20,
        "CharPositionInLine" : 10
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Check minimum required compiler versions\n\n#------------------------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Since version 3.1, CMake pulls in implicit link libraries when compiling\n\n# source files in C mode. Because we mix C and C++ code in the test driver\n\n# executable, we end up with a gcc_eh link dependency when using MinGW\n\n# which breaks exception handling in the executable. See also:\n\n#\n\n# https://stackoverflow.com/questions/46688200/mixing-c-and-c-causing-exceptions-to-terminate\n\n#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We make use of the following C++11 language and library features:\n\n#\n\n# Language feature                 GCC   Clang   Xcode   VisualStudio\n\n# -------------------------------------------------------------------\n\n# Rvalue references                4.3   2.9     6       2012\n\n# Variadic templates               4.3   2.9     6       2013*\n\n# Initializer lists                4.4   3.1     6       2013\n\n# Static assertions                4.3   2.9     6       2010\n\n# auto                             4.4   2.9     6       2010\n\n# Lambdas                          4.5   3.1     6       2012\n\n# decltype                         4.3   2.9     6       2012\n\n# Right angle brackets             4.3   2.9     6       2010\n\n# Null pointer constant            4.6   3.0     6       2010\n\n# Explicit conversion operators    4.5   3.0     6       2013\n\n# Defaulted functions              4.4   3.0     6       2013*\n\n# Deleted functions                4.4   2.9     6       2013*\n\n# Range-based for                  4.6   3.0     6       2012\n\n# Atomic operations                4.4   3.1     6       2012\n\n# thread_local (optional)          4.8   3.3     8       2015\n\n#\n\n# Library features used\n\n# ---------------------\n\n# function\n\n# unique_ptr\n\n# shared_ptr\n\n# unordered_map\n\n# unordered_set\n\n# atomic\n\n# mutex\n\n# wait_condition\n\n# exception_ptr\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Update CMake module path\n\n#------------------------------------------------------------------------------\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# CMake function(s) and macro(s)\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Init output directories\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Set a default build type if none was specified\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# CMake options\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Determine the name of the install component for \"SDK\" artifacts.\n\n# The default is \"sdk\"\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Avoid RPATH warning in cmakegui\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Cross-compiled builds need access to the host version of usResourceCompiler.\n\n# ImportExecutables.cmake is generated by the host build and contains the cmake target\n\n# for the host built usResourceCompiler. ImportExecutables.cmake can be included by the\n\n# cross-compiled build to access the host built usResourceCompiler.\n\n#\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Testing configuration\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# By default, these tests are not active until the concurrent bundle\n\n# start / stop mechanism has been properly implemented (GitHub Issue #25)\n",
        "Line" : 273,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# skip the unicode test bundle because opencppcoverage tool fails if a module is located in a path with unicode characters\n",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Valgrind rc file\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This keeps GTest CMake variables hidden from users unless they explicitly want to view/modify them.\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Prevent overriding the parent project's compiler/linker\n\n# settings on Windows\n",
        "Line" : 318,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# pthreads on MinGW is not supported, turn it off. Refer to\n\n# https://github.com/google/googletest/pull/721/files for details.\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Prevent GTest from installing libraries into our install dir.\n",
        "Line" : 333,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# This project also sets BUILD_SHARED_LIBS. We want to guarantee that GTest is always built as a\n\n# static library even if CppMicroServices is a shared library.\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# US C/CXX Flags\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n",
        "Line" : 357,
        "CharPositionInLine" : 9
      },
      "25" : {
        "Text" : "# If not cross-compiling, turn on Stack Smashing Protection.\n\n# This is done in cases where libssp.so may not be available in the\n\n# cross build toolchain. The dependency with libssp.so was originally\n\n# discovered building with the Android ARM gcc toolchain. It is\n\n# being applied to any cross compilation as a precaution.\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# The check does not work reliably for gcc\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Issue #56: Workaround a clang compiler issue (https://llvm.org/bugs/show_bug.cgi?id=26749).\n\n# The typeinfo symbols do not have reliable symbol visibility. Instead of exporting only\n\n# symbols and associated typeinfo symbols which have explicit \"default\" visibility,\n\n# export all typeinfo symbols by default and maintain hidden symbol visibility for all other\n\n# symbols (unless explicitly overriden). See\n\n# https://developer.apple.com/library/mac/technotes/tn2185/_index.html#//apple_ref/doc/uid/DTS10004200-CH1-SUBSECTION2\n\n# to understand what -fvisibility-ms-compat does.\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# suppress warnings about auto imported symbols\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# we need to define a Windows version (Windows Vista)\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# US_CXX_COVERAGE_FLAGS is used for both the compiler and the linker\n",
        "Line" : 445,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# US Link Flags\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# US_CXX_COVERAGE_FLAGS is used for both the compiler and the linker\n",
        "Line" : 480,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# US Header Checks\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# C++ language support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# The line below only works on CMake 3.8 and higher\n\n# CXX_STANDARD ${CMAKE_CXX_STANDARD}\n",
        "Line" : 509,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#\n\n# The MinGW winpthread implementation does not properly destruct\n\n# non-POD thread-local objects, leading to segmentation faults on\n\n# thread exit. See\n\n#\n\n# https://github.com/Alexpux/MINGW-packages/issues/2519\n\n# https://sourceforge.net/p/mingw-w64/bugs/527/\n\n#\n",
        "Line" : 515,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# C++ library support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# c++11 regular expressions are used in the unit tests.\n\n# Currently the default C++ library for gcc < 4.9 doesn't\n\n# fully support c++11 regex.\n\n# Generalize the detection of regex and make its availability\n\n# conditional of whether the compiler's C++ library supports it\n\n# or not.\n\n# This can be removed once the minimum supported gcc version is 4.9\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Print a warning summary\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# System Information\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Source directory\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Configure CppMicroServicesConfig.cmake for the build tree.\n\n# The file is used in sub-directories.\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Version information\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Documentation\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Installation\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Configure CppMicroServicesConfig.cmake for the install tree\n",
        "Line" : 639,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 47
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "65ff58f092e83e1970e39721701fd772e7136ed2",
      "LastModified" : "2012-02-28T09:36:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CTEST_NIGHTLY_START_TIME \"23:00:00 EDT\")\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CTEST_DROP_METHOD \"http\")\n\n#set(CTEST_DROP_SITE \"my.cdash.org\")\n\n#set(CTEST_DROP_LOCATION \"/submit.php?project=${CTEST_PROJECT_NAME}\")\n\n#set(CTEST_DROP_SITE_CDASH TRUE)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/usCTestScript.cmake" : {
      "ObjectId" : "d5566d9fe62b6a3c5c9031d84b88ce2bcc4b8d42",
      "LastModified" : "2017-07-17T19:11:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if(NOT CTEST_BUILD_NAME)\n\n#  set(CTEST_BUILD_NAME \"${CMAKE_SYSTEM}_${CTEST_COMPILER}_${CTEST_DASHBOARD_NAME}\")\n\n#endif()\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#ctest_submit()\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#=========================================================\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#            SHARED THREADING\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/usCTestScript_custom.cmake" : {
      "ObjectId" : "b6e0b95c5aac0939a46e5580bec24ca73147eced",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CTEST_COMPILER \"gcc-4.5\")\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/usCTestScript_travis.cmake" : {
      "ObjectId" : "a6d1c7f81d0dc598b0d7c67e14c0a7adffbbd9ae",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CTEST_COMPILER \"gcc-4.5\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gcc in combination with gcov seems to consume a lot of memory\n\n# and may lead to OOM error on Travis containers. Hence we compile\n\n# with -j for non-GNU compilers only.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/usFunctionAddResources.cmake" : {
      "ObjectId" : "746e10d16f81098c36347c2d81d599a7a6d08408",
      "LastModified" : "2018-05-16T10:14:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# .. cmake:command:: usFunctionAddResources\n\n#\n\n# Add resources to a library or executable.\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#    usFunctionAddResources(TARGET target [BUNDLE_NAME bundle_name]\n\n#      [WORKING_DIRECTORY dir] [COMPRESSION_LEVEL level]\n\n#      [FILES res1...] [ZIP_ARCHIVES archive1...])\n\n#\n\n# This CMake function uses an external command line program to generate a ZIP archive\n\n# containing data from external resources such as text files or images or other ZIP\n\n# archives. The created archive file can be appended or linked into the target file\n\n# using the :cmake:command:`usFunctionEmbedResources` function.\n\n#\n\n# Each bundle can call this function to add resources and make them available at\n\n# runtime through the Bundle class. Multiple calls to this function append the\n\n# input files.\n\n#\n\n# In the case of linking static bundles which contain resources to the target bundle,\n\n# adding the static bundle target name to the ``ZIP_ARCHIVES`` list will merge its\n\n# resources into the target bundle.\n\n#\n\n# .. code-block:: cmake\n\n#    :caption: Example\n\n#\n\n#    set(bundle_srcs )\n\n#    usFunctionAddResources(TARGET mylib\n\n#                           BUNDLE_NAME org_me_mylib\n\n#                           FILES config.properties logo.png\n\n#                          )\n\n#\n\n# **One-value keywords**\n\n#    * ``TARGET`` (required): The target to which the resource files are added.\n\n#    * ``BUNDLE_NAME`` (required/optional): The bundle name of the target, as specified in\n\n#      the \\c US_BUNDLE_NAME pre-processor definition of that target. This parameter\n\n#      is optional if a target property with the name US_BUNDLE_NAME exists, containing\n\n#      the required bundle name.\n\n#    * ``COMPRESSION_LEVEL`` (optional): The zip compression level (0-9). Defaults to the default zip\n\n#      level. Level 0 disables compression.\n\n#    * ``WORKING_DIRECTORY`` (optional): The root path for all resource files listed after the\n\n#      FILES argument. If no or a relative path is given, it is considered relative to the\n\n#      current CMake source directory.\n\n#\n\n# **Multi-value keywords**\n\n#    * ``FILES`` (optional): A list of resource files (paths to external files in the file system)\n\n#      relative to the current working directory.\n\n#    * ``ZIP_ARCHIVES`` (optional): A list of zip archives (relative to the current working directory\n\n#      or absolute file paths) whose contents is merged into the target bundle. If a list entry\n\n#      is a valid target name and that target is a static library, its absolute file path is\n\n#      used instead.\n\n#\n\n# .. seealso::\n\n#\n\n#    | :cmake:command:`usFunctionEmbedResources`\n\n#    | :any:`concept-resources`\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cross-compiled builds need to use the imported host version of usResourceCompiler\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/usFunctionCheckCompilerFlags.cmake" : {
      "ObjectId" : "bb3d182829f4d241c3a872ca5ac893beebf0086f",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Helper macro allowing to check if the given flags are supported\n\n# by the underlying build tool\n\n#\n\n# If the flag(s) is/are supported, they will be appended to the string identified by RESULT_VAR\n\n#\n\n# Usage:\n\n#   usFunctionCheckCompilerFlags(FLAGS_TO_CHECK VALID_FLAGS_VAR)\n\n#\n\n# Example:\n\n#\n\n#   set(myflags)\n\n#   usFunctionCheckCompilerFlags(\"-fprofile-arcs\" myflags)\n\n#   message(1-myflags:${myflags})\n\n#   usFunctionCheckCompilerFlags(\"-fauto-bugfix\" myflags)\n\n#   message(2-myflags:${myflags})\n\n#   usFunctionCheckCompilerFlags(\"-Wall\" myflags)\n\n#   message(1-myflags:${myflags})\n\n#\n\n#   The output will be:\n\n#    1-myflags: -fprofile-arcs\n\n#    2-myflags: -fprofile-arcs\n\n#    3-myflags: -fprofile-arcs -Wall\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Save the contents of RESULT_VAR temporarily.\n\n# This is needed in case ${RESULT_VAR} is one of the CMAKE_<LANG>_FLAGS_* variables.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear all flags. If not, existing flags triggering warnings might lead to\n\n# false-negatives when checking for certain compiler flags.\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Internally, the macro CMAKE_CXX_COMPILER_FLAG calls TRY_COMPILE. To avoid\n\n# the cost of compiling the test each time the project is configured, the variable set by\n\n# the macro is added to the cache so that following invocation of the macro with\n\n# the same variable name skip the compilation step.\n\n# For that same reason, the usFunctionCheckCompilerFlags function appends a unique suffix to\n\n# the HAS_CXX_FLAG variable. This suffix is created using a 'clean version' of the\n\n# flag to test. The value of HAS_CXX_FLAG_${suffix} additonally needs to be a valid\n\n# pre-processor token because CHECK_CXX_COMPILER_FLAG adds it as a definition to the compiler\n\n# arguments. An invalid token triggers compiler warnings, which in case of the \"-Werror\" flag\n\n# leads to false-negative checks.\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/usFunctionCheckResourceLinking.cmake" : {
      "ObjectId" : "d307682d99941aa07fffd95f625aaf1596dda394",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check linking capability\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# section name is \"us_resources\" because max length for section names in Mach-O format is 16 characters.\n",
        "Line" : 8,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "cmake/usFunctionCompileSnippets.cmake" : {
      "ObjectId" : "c106f15dedec3554810daad208b18a05da19338c",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get all files called \"main.cpp\"\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# get the directory containing the main.cpp file\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# If there exists a \"files.cmake\" file in the snippet directory,\n\n# include it and assume it sets the variable \"snippet_src_files\"\n\n# to a list of source files for the snippet.\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# glob all files in the directory and add them to the snippet src list\n",
        "Line" : 27,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Uset the top-level directory name as the executable name\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/usFunctionCreateTestBundle.cmake" : {
      "ObjectId" : "2c36d42fb8cacc3c312289b4250fd7772469c96f",
      "LastModified" : "2018-05-16T10:14:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clear a possible debug postfix\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/usFunctionEmbedResources.cmake" : {
      "ObjectId" : "6697418fa3681868146100cb9a3092d09b199b73",
      "LastModified" : "2018-11-20T02:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# .. cmake:command:: usFunctionEmbedResources\n\n#\n\n# Embed resources in a library or executable.\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#    usFunctionEmbedResources(TARGET target [BUNDLE_NAME bundle_name] [APPEND | LINK]\n\n#      [WORKING_DIRECTORY dir] [COMPRESSION_LEVEL level]\n\n#      [FILES res1...] [ZIP_ARCHIVES archive1...])\n\n#\n\n# This CMake function uses an external command line program to generate a ZIP archive\n\n# containing data from external resources such as text files or images or other ZIP\n\n# archives. External resources can be added to a bundle using the\n\n# :cmake:command:`usFunctionAddResources` function or directly using this function\n\n# using similar parameters. The created archive file is appended or embedded as a\n\n# binary blob to the target file.\n\n#\n\n# .. note::\n\n#\n\n#    To set-up correct file dependencies from your bundle target to your resource\n\n#    files, you have to add a special source file to the source list of the target.\n\n#    The source file name can be retrieved by using :cmake:command:`usFunctionGetResourceSource`.\n\n#    This ensures that changed resource files will automatically be re-added to the\n\n#    bundle.\n\n#\n\n# There are two different modes for including resources: *APPEND* and *LINK*. In *APPEND* mode,\n\n# the generated zip file is appended at the end of the target file. In *LINK* mode, the\n\n# zip file is compiled / linked into the target using platform specific techniques. *LINK*\n\n# mode is necessary if certain tools make additional assumptions about the object layout\n\n# of the target file (e.g. codesign on MacOS). *LINK* mode may result in slower bundle\n\n# initialization and bigger object files. The default mode is *LINK* mode on MacOS and\n\n# *APPEND* mode on all other platforms.\n\n#\n\n# .. code-block:: cmake\n\n#    :caption: Example\n\n#\n\n#    usFunctionEmbedResources(TARGET mylib\n\n#                             BUNDLE_NAME org_me_mylib\n\n#                             FILES config.properties logo.png\n\n#                            )\n\n#\n\n# **One-value keywords**\n\n#    * ``TARGET`` (required): The target to which the resource files are added.\n\n#    * ``BUNDLE_NAME`` (required/optional): The bundle name of the target, as specified in\n\n#      the ``US_BUNDLE_NAME`` pre-processor definition of that target. This parameter\n\n#      is optional if a target property with the name ``US_BUNDLE_NAME`` exists, containing\n\n#      the required bundle name.\n\n#\n\n# **Options**\n\n#    * ``APPEND``: Append the resources zip file to the target file.\n\n#    * ``LINK``: Link (embed) the resources zip file if possible.\n\n#\n\n# For the ``WORKING_DIRECTORY``, ``COMPRESSION_LEVEL``, ``FILES``, ``ZIP_ARCHIVES`` parameters see the\n\n# documentation of the usFunctionAddResources macro which is called with these parameters if set.\n\n#\n\n# .. seealso::\n\n#\n\n#    | :cmake:command:`usFunctionAddResources`\n\n#    | :cmake:command:`usFunctionGetResourceSource`\n\n#    | :any:`concept-resources`\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default resource mode\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Cross-compiled builds need to use the imported host version of usResourceCompiler\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# This resolves an issue where passing in CMAKE_CXX_FLAGS using\n\n# -D CMAKE_CXX_FLAGS:STRING=\"...\" results in a quoted string being passed to\n\n# the command below which results in the command being:\n\n#  >> clang \"...\" -c ... -o stub.o\n\n# when it should really be:\n\n#  >> clang ... -c ... -o stub.o\n\n# (pardon the elipsis for abbreviation)\n",
        "Line" : 163,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# section name is \"us_resources\" because max length for section names in Mach-O format is 16 characters.\n",
        "Line" : 172,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# If the file generated in \"Configure\" step is specified as the OUTPUT of add_custom_command,\n\n# \"Clean\" target will delete the file and subsequent build will fail. To avoid failures in\n\n# \"ReBuild\", generate the resource file in the \"Configure\" step and copy it in \"Build\" step\n",
        "Line" : 185,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# This command depends on the given resource files and creates a source\n\n# file which must be added to the source list of the related target.\n\n# This way, the following command is executed if the resources change\n\n# and it just touches the created source file to force a (actually unnecessary)\n\n# re-linking and hence the execution of POST_BUILD commands.\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/usFunctionGenerateBundleInit.cmake" : {
      "ObjectId" : "d7229a41815f92a5780c04f8009c1c9173584931",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# .. cmake:command:: usFunctionGenerateBundleInit\n\n#\n\n# Generate a source file which handles proper initialization of a bundle.\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#    usFunctionGenerateBundleInit(TARGET target OUT <out_var>)\n\n#\n\n# This CMake function will append the path to a generated source file to the\n\n# out_var variable, which should be compiled into a bundle. The bundles source\n\n# code must be compiled with the ``US_BUNDLE_NAME`` pre-processor definition.\n\n#\n\n# .. code-block:: cmake\n\n#    :caption: Example\n\n#\n\n#    set(bundle_srcs )\n\n#    usFunctionGenerateBundleInit(TARGET mylib OUT bundle_srcs)\n\n#    add_library(mylib ${bundle_srcs})\n\n#    set_property(TARGET ${mylib} APPEND PROPERTY COMPILE_DEFINITIONS US_BUNDLE_NAME=MyBundle)\n\n#\n\n# **One-value keywords**\n\n#    * ``TARGET`` (required): The name of the target for which the source file\n\n#      is generated.\n\n#    * ``OUT`` (required): A list variable to which the path of the generated\n\n#      source file will be appended.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/usFunctionGetResourceSource.cmake" : {
      "ObjectId" : "2a536eca97733af7de6815f5192dee0b1d70d73a",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n#\n\n# .. cmake:command:: usFunctionGetResourceSource\n\n#\n\n# Get a source file name for handling resource dependencies\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#    usFunctionGetResourceSource(TARGET target OUT <out_var> [LINK | APPEND])\n\n#\n\n# This CMake function retrieves the name of a generated file which has to be added\n\n# to a bundles source file list to set-up resource file dependencies. This ensures\n\n# that changed resource files will automatically be re-added to the bundle.\n\n#\n\n# .. code-block:: cmake\n\n#    :caption: Example\n\n#\n\n#    set(bundle_srcs mylib.cpp)\n\n#    usFunctionGetResourceSource(TARGET mylib\n\n#                                OUT bundle_srcs\n\n#                               )\n\n#    add_library(mylib ${bundle_srcs})\n\n#\n\n# **One-value keywords**\n\n#    * ``TARGET`` (required): The name of the target to which the resource files are added.\n\n#    * ``OUT`` (required): A list variable to which the file name will be appended.\n\n#\n\n# **Options**\n\n#    * ``LINK`` (optional): Generate a suitable source file for *LINK* mode.\n\n#    * ``APPEND`` (optional): Generate a suitable source file for *APPEND* mode.\n\n#\n\n# .. seealso::\n\n#\n\n#    | :cmake:command:`usFunctionAddResources`\n\n#    | :cmake:command:`usFunctionEmbedResources`\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/usMacroCreateBundle.cmake" : {
      "ObjectId" : "c5ba81d2ebc1a62b89ee79ec0c79ac89999e0b22",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For internal use only\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the logical target name\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the target output name\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Configure files\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Create library\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the bundle init file\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create the bundle library\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Include directories\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compile definitions\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Convenience properties\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Link flags\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Link additional libraries\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Embed bundle resources\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Install support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# US testing\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Documentation\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Compile source code snippets\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Last configuration and install steps\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Version information\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Configure config file for the build tree\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Configure config file for the install tree\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build the examples\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "844e74ec07577530b5a164ca379505d4946a3d75",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build the tutorial and example code\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build the documentation itself\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# log stdout, pass stderr\n",
        "Line" : 57,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 3
    },
    "doc/Makefile" : {
      "ObjectId" : "5eea0706b54947590af5debfae46c808c641fce9",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "doc/src/CMakeLists.txt" : {
      "ObjectId" : "c6e7614bb5b1abd65b15e94b1543b0e9fc48a42f",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# [prj-start]\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# [prj-end]\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Init output directories\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# [fnc-end]\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Test if the doc code compiles against an install tree and if the\n\n# Makefile example compiles\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The makefile is Linux specific, so only try to build the Makefile example\n\n# if we are on a proper system\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# We need to supply the correct language flag to the Makefile\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "doc/src/examples/getting_started/CMakeLists.txt" : {
      "ObjectId" : "47e655573b82a1bd2e5c3b07e73c6564e949e948",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# [proj-begin]\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# [proj-end]\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# [interface-begin]\n\n#=========================================================\n\n# A library providing the ServiceTime interface\n\n#---------------------------------------------------------\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Technically, this is not a bundle.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# [interface-end]\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# [publisher-begin]\n\n#=========================================================\n\n# A bundle implementing the ServiceTime interface\n\n#---------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set up dependencies to resources to track changes\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generate bundle initialization code\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is required for every bundle\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# This is for convenience, used by other CMake functions\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Embed meta-data from a manifest.json file\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# [publisher-end]\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#=========================================================\n\n# A bundle consuming a ServiceTime service\n\n#---------------------------------------------------------\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# [exec-begin]\n\n#=========================================================\n\n# The executable managing the CppMicroServices framework\n\n#---------------------------------------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set up dependencies to resources from static bundles\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# The executable is not a bundle itself but we still\n\n# need a bundle name for it here.\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Merge in all resources from static bundles\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# [exec-end]\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "doc/src/examples/makefile/Makefile" : {
      "ObjectId" : "2cee5240e4629dfcc069533804b670486882b8ea",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "doc/src/tutorial/dictionaryclient/CMakeLists.txt" : {
      "ObjectId" : "f5b01a17f510b1f8837f43bf2be06b66e5c2e01f",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/src/tutorial/dictionaryclient2/CMakeLists.txt" : {
      "ObjectId" : "6851673e45181cf717b877e83a636e99c12df727",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/src/tutorial/dictionaryclient3/CMakeLists.txt" : {
      "ObjectId" : "86b41ff1ac3e69b39c4339df26d274693444499c",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/src/tutorial/dictionaryservice/CMakeLists.txt" : {
      "ObjectId" : "06d656668010d3c53672cec17b61f83ab5c83399",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The library name for the bundle\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A list of source code files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add a special source file to the _srcs variable that\n\n# will enable dependency checking on bundle resources.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate bundle initialization code\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create the library\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add the US_BUNDLE_NAME target property\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the required compile definition\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Embed the manifest file\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Link the CppMicroServices library\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# [doc-end]\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The above CMake code achieves the same as the CreateTutorial macro,\n\n# but it is decorated with comments and will show up verbatim in the\n\n# documentation.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#CreateTutorial(dictionaryservice ${_srcs})\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "doc/src/tutorial/driver/CMakeLists.txt" : {
      "ObjectId" : "84c8f42cbada017a3a983d32241edd99e40760ba",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Using static bundles requires that they be linked into an EXE or shared library and that\n\n# any resources inside the static bundles are merged into that EXE or shared library.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# _target_zip_archives contains the list of static bundles and is used to both link with the executable\n\n# and merge their resources into the executable.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Merge all resources from the static bundles and embed them into the executable.\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "doc/src/tutorial/eventlistener/CMakeLists.txt" : {
      "ObjectId" : "383f68518b179fbfb7f55cf75779f4fcbc3d5c3c",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/src/tutorial/frenchdictionary/CMakeLists.txt" : {
      "ObjectId" : "dc00a842d37b026653769f08bee37535c64aa224",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/src/tutorial/spellcheckclient/CMakeLists.txt" : {
      "ObjectId" : "655bc77470979a5a3e987306e29a731f6076f0eb",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/src/tutorial/spellcheckservice/CMakeLists.txt" : {
      "ObjectId" : "8e03618f9e4f50a23f2dccfef2109479972ccff8",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/CMakeLists.txt" : {
      "ObjectId" : "1dd5831e198c5217e7f34cc259ee820c10454c33",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sources and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link libraries for the CppMicroServices lib\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure the bundles manifest.json file\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we do it manually\n",
        "Line" : 40,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 4
    },
    "framework/doc/CMakeLists.txt" : {
      "ObjectId" : "f5c5327bd6b29d4b8b795518a1b33cd0e2c056fe",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compile source code snippets\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "framework/doc/snippets/CMakeLists.txt" : {
      "ObjectId" : "ab7ecdc9bfdc58d8a8834e028ebd6cca260150d6",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/doc/snippets/uServices-resources-cmake/CMakeLists.txt" : {
      "ObjectId" : "ffd3f49286a9002962387c924aeb5a28e17562d2",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/doc/snippets/uServices-singleton/files.cmake" : {
      "ObjectId" : "7b00810ba64988d8c0ffca4572a85e800fbf9327",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/doc/snippets/uServices-staticbundles/files.cmake" : {
      "ObjectId" : "84a581aeacadf7c94b3028e161821e30bad8b855",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/include/CMakeLists.txt" : {
      "ObjectId" : "ddb8ef8e067c472822a5795b6e944275c4e013cf",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Public header files\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "framework/src/CMakeLists.txt" : {
      "ObjectId" : "d1b0b35ab606b89a3506ae620eab3c7f7da4222d",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Source files\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "framework/test/CMakeLists.txt" : {
      "ObjectId" : "6240d7899537994b60779b34ab9de5a45a8d4407",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/CMakeLists.txt" : {
      "ObjectId" : "345010aaed86ee1b29765fc635c84b5264910487",
      "LastModified" : "2019-01-25T14:16:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Create test bundles\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "framework/test/bundles/libA/CMakeLists.txt" : {
      "ObjectId" : "62905d17b7c3141b6d373b2ac88fda71a84320a1",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libA2/CMakeLists.txt" : {
      "ObjectId" : "aeca3a12732084ee9f646b0ab7cdcc30425c9886",
      "LastModified" : "2017-10-30T02:00:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libADuplicate/CMakeLists.txt" : {
      "ObjectId" : "19992e2437b5d1bb4f78370a613bec3188302460",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libBA_00/CMakeLists.txt" : {
      "ObjectId" : "d27e4d46abc9a5aa06392c95e785c3747bbbd94d",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libBA_01/CMakeLists.txt" : {
      "ObjectId" : "f520e9f5df59a28d4ef5d9b1a5984d401e41764a",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libBA_10/CMakeLists.txt" : {
      "ObjectId" : "1cca7f698d348438db0d915b928101c5b5eb1a17",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libBA_S1/CMakeLists.txt" : {
      "ObjectId" : "22aaed0c70a66048bce6d54e586262c31702e525",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libBA_X1/CMakeLists.txt" : {
      "ObjectId" : "a280bbee6a89011b9564141db3827e94730618e7",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libBWithStatic/CMakeLists.txt" : {
      "ObjectId" : "fd8fac3d10c16f813c6a7876d5d5a9b2ec48759b",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libC1/CMakeLists.txt" : {
      "ObjectId" : "15a3b46a61c78267697fb6a09501b87d49a733d7",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libH/CMakeLists.txt" : {
      "ObjectId" : "5b92fa12fa703755387b83fb2f8d80c80b6b9e79",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libLQ/CMakeLists.txt" : {
      "ObjectId" : "d4cd8b54410c7fa67b099a15b2d2e279011772b1",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libM/CMakeLists.txt" : {
      "ObjectId" : "0e775d4719d483b920a392a0ed5bfd8b2fe06527",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libMWithEmptyBundleName/CMakeLists.txt" : {
      "ObjectId" : "0cdb33bc96a4f2486518d489dd09ec08acb0ebf3",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libMWithInvalidVersion/CMakeLists.txt" : {
      "ObjectId" : "1a4d7e1ff73ee83527e8d8020a2fc40c0976b149",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libMWithInvalidVersionType/CMakeLists.txt" : {
      "ObjectId" : "1c879dab6314671a9531d1aebcc40e76332d07c2",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libMWithoutBundleName/CMakeLists.txt" : {
      "ObjectId" : "54b870cc4ce5d45705a295635ca8170a0cf5a58e",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libRWithAppendedResources/CMakeLists.txt" : {
      "ObjectId" : "441908f1b33a3e53f7382b5e3af8e5462a7d629b",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libRWithLinkedResources/CMakeLists.txt" : {
      "ObjectId" : "3a30e8b3be2c6984519193456f9f0dc674c57786",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libRWithResources/CMakeLists.txt" : {
      "ObjectId" : "f10c9c09a0f0b19baea2fc6cd0cf4c3730700cc3",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libS/CMakeLists.txt" : {
      "ObjectId" : "e77973b2cecda7082d47f71a68143d6030ff6ced",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libSL1/CMakeLists.txt" : {
      "ObjectId" : "a73f924c0ed787fcab7c4c3c367c9390fcd8e016",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libSL3/CMakeLists.txt" : {
      "ObjectId" : "befcc84e8dd7a4ef5afa22c57adbb526077cc011",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libSL4/CMakeLists.txt" : {
      "ObjectId" : "a6fdf7d25ff5954447789e33b9777d57bb8465e0",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libStartFail/CMakeLists.txt" : {
      "ObjectId" : "bb048b4f3db6734935d56fd668dca9b51cd32dae",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libStopFail/CMakeLists.txt" : {
      "ObjectId" : "52c3c019660a471f470a5d5aaaf7a23302ac34c6",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libU/CMakeLists.txt" : {
      "ObjectId" : "63c698043682c36881286cb2c6d2ad97cb07fce3",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Codepage for the prompt needs to be changed for command-line generator\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find the current codepage of DOS Prompt\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# set the current codepage for the DOS prompt to support utf-8\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# reset the codepage for the DOS prompt back to what it was\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# skipping MINGW because unicode characters in file path causes MINGW linker failure \n",
        "Line" : 24,
        "CharPositionInLine" : 14
      },
      "5" : {
        "Text" : "# override the library and runtime output directories for the target to include unicode characters in path \n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# necessary for generators such as Visual Studio and Xcode \n",
        "Line" : 27,
        "CharPositionInLine" : 42
      },
      "CommentCount" : 7
    },
    "framework/test/bundles/libWaitOnBundleOperation/CMakeLists.txt" : {
      "ObjectId" : "1560de00548adf0c50f40ac0406279d218765e02",
      "LastModified" : "2018-12-04T13:34:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libWithDeepManifest/CMakeLists.txt" : {
      "ObjectId" : "76461e21ac091c16631c12bb912eb1e3e71be41a",
      "LastModified" : "2019-01-25T14:16:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/bundles/libWithNonStandardExt/CMakeLists.txt" : {
      "ObjectId" : "4b6d99ca9fa14eeaae8ee26c7aeea13191978f71",
      "LastModified" : "2019-01-25T14:16:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "framework/test/driver/CMakeLists.txt" : {
      "ObjectId" : "0bf97ccd9cb81284d0d334fce34c0929492d6bb1",
      "LastModified" : "2019-01-25T14:16:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Configure files, include dirs, etc.\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure that the correct paths separators are used on each platform\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Add unit tests\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build the main test driver executable\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate a custom \"bundle init\" file for the test driver executable\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Needed for ResourceCompilerTest\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Disable deprecation warnings.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Needed for clock_gettime with glibc < 2.17\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add resources\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Register tests\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add a Preprocessor flag if code coverage is turned ON\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Add dependencies for shared libraries\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Add preprocessor macro to indicate C++11 unicode literal support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "framework/test/gtest/CMakeLists.txt" : {
      "ObjectId" : "04e8ff758989a1c94d996e57a4ee416c0a02feb8",
      "LastModified" : "2019-04-15T12:42:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build and run the GTest Suite of tests\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Add test source files\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Build the main test driver executable\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate a custom \"bundle init\" file for the test driver executable\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Needed for ResourceCompilerTest\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Needed for clock_gettime with glibc < 2.17\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# tests can be configured to run using add_test or GTEST_ADD_TEST (https://cmake.org/cmake/help/v3.0/module/FindGTest.html)\n\n# GTEST_ADD_TEST will run a seprate EXE for each test and test fixture in the EXE.\n\n# At this time, there isn't a need to use GTEST_ADD_TEST.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Run the GTest EXE from ctest.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Run the GTest EXE from valgrind\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Enable code coverage for GTest tests\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add a Preprocessor flag if code coverage is turned ON\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Copy the Google Test libraries into the same folder as the\n\n# executable so that they can be seen at runtime on Windows.\n\n# Mac and Linux use RPATHs and do not need to do this.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Add dependencies on test bundles if building shared libraries or \n\n# link them if building static libraries\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add resources\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Add resources\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "httpservice/CMakeLists.txt" : {
      "ObjectId" : "9a82a60c2d11efb782adf0580dfc50b207ce3409",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needed for clock_gettime with glibc < 2.17\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "shellservice/CMakeLists.txt" : {
      "ObjectId" : "dd3314aac63db6886fabad4a9efc18e50a53a427",
      "LastModified" : "2019-01-25T14:16:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/googletest/CMakeLists.txt" : {
      "ObjectId" : "21c3effbbb4978ae66e414c126463531ef58296c",
      "LastModified" : "2019-01-25T14:16:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third_party/googletest/googlemock/CMakeLists.txt" : {
      "ObjectId" : "beb259a2e9dbb5dcb50f61c7a779f563528983f6",
      "LastModified" : "2019-03-27T12:01:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 56,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 62,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 163,
        "CharPositionInLine" : 43
      },
      "23" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "third_party/googletest/googletest/CMakeLists.txt" : {
      "ObjectId" : "8839597fc9ed811e2ed5823651c6d6eed308732d",
      "LastModified" : "2019-03-27T12:01:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 212,
        "CharPositionInLine" : 43
      },
      "22" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 234,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "third_party/googletest/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "777b91ed4b8caa226ea55cfa61fe7ec433ffb452",
      "LastModified" : "2019-03-27T12:01:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 83,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 126,
        "CharPositionInLine" : 32
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "tools/jsonschemavalidator/CMakeLists.txt" : {
      "ObjectId" : "511a9acdecd37439d07d3104ba7757d37d6f9a88",
      "LastModified" : "2019-04-04T13:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the tests\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expect negative tests to fail \n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/rc/CMakeLists.txt" : {
      "ObjectId" : "1e2f6632790227173f199aeea9106515ceafbd10",
      "LastModified" : "2019-04-04T13:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# When cross-compiling, import the host machine executable from a file\n\n# See https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/CrossCompiling\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Export the host usResourceCompiler target to a file so it can be imported when cross-compiling.\n\n# Use the NAMESPACE option of EXPORT() to get a different target name for ${US_RCC_EXECUTABLE_TARGET}\n\n# when exporting.\n\n# Doing this allows the host built usResourceCompiler to be used when cross-compiling and allows\n\n# the usResourceCompiler to be built and installed for the target machine.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "tools/shell/CMakeLists.txt" : {
      "ObjectId" : "151a13a1dced4b8a27bc4526783aebb75d3b365b",
      "LastModified" : "2019-04-04T13:39:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "util/CMakeLists.txt" : {
      "ObjectId" : "06beeff4aef1d75a080d8a048cd676398df42c5c",
      "LastModified" : "2019-04-04T13:39:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "webconsole/CMakeLists.txt" : {
      "ObjectId" : "def97464301323c08cc739f173851627fec43305",
      "LastModified" : "2019-04-04T13:39:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "webconsole/examples/CMakeLists.txt" : {
      "ObjectId" : "a444104b5fa63cb3190ec6eb92c6d94086ac56d9",
      "LastModified" : "2019-04-04T13:39:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 80,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 2543
}