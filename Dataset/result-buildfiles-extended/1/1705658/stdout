{
  "Repository" : "1705658",
  "Revision" : "HEAD",
  "ObjectId" : "01d67be28f1eb983a1bd0b97f13160ffb6b39307",
  "CommitTime" : "2019-02-14T21:16:15Z",
  "Files" : {
    "3rdparty/googletest-1.8.1/CMakeLists.txt" : {
      "ObjectId" : "d77321165aeb414b616a71769c77f45882fc56d4",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/googletest-1.8.1/googlemock/CMakeLists.txt" : {
      "ObjectId" : "8a8de1f64119035b472393fa11f38d606ff42003",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These commands only run if this is the main project\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 67,
        "CharPositionInLine" : 30
      },
      "11" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This directory is needed to build directly from Google Test sources.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 185,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 186,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "3rdparty/googletest-1.8.1/googletest/CMakeLists.txt" : {
      "ObjectId" : "9ee79408c277c4a95dbd3cc4ab6f7ecc37b9aadb",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Visibility\n",
        "Line" : 51,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# These commands only run if this is the main project\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 86,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Create the CMake package file descriptors.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 253,
        "CharPositionInLine" : 43
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 275,
        "CharPositionInLine" : 46
      },
      "28" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "3rdparty/googletest-1.8.1/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8c1f9ba99cf50574f669dd7deba324dce40595f3",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Prevent D9025 warning for targets that have exception handling\n\n# turned off (/EHs-c- flag). Where required, exceptions are explicitly\n\n# re-enabled using the cxx_exception_flags variable.\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 71,
        "CharPositionInLine" : 33
      },
      "11" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 81,
        "CharPositionInLine" : 33
      },
      "15" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 90,
        "CharPositionInLine" : 39
      },
      "17" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Generate debug library name with a postfix.\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 207,
        "CharPositionInLine" : 48
      },
      "32" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 268,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 276,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 284,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# install_project(targets...)\n\n#\n\n# Installs the specified targets and configures the associated pkgconfig files.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Install the project targets.\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Configure and install pkgconfig files.\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 45
    },
    "CMakeLists.txt" : {
      "ObjectId" : "9037c89b42840c35a93bf25fb87b65979c28c377",
      "LastModified" : "2018-11-20T23:45:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main CMake file for building Quassel IRC\n\n#\n\n# See INSTALL for possible CMake options (or read the code, Luke)\n\n#####################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# General setup\n\n#####################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tell CMake about or own modules\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set up build type rather early\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Support ccache if found\n\n# This should happen before calling project(), so compiler settings are validated.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set up project\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Let CMake handle file generation for Qt\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Needed, otherwise some .moc files won't be found with older CMake versions\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include various CMake modules...\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ... and our own\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Options and variables that can be set on the command line\n\n#####################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Select the binaries to build\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Whether to enable integration with higher-tier KDE frameworks that require runtime support.\n\n# We still optionally make use of certain Tier 1 frameworks even if WITH_KDE is disabled.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Icon theme support. By default, install the Breeze icon theme (may be disabled if a system installation is present)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# For this, the feature info is added after we know if QtWebkit is installed\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For this, the feature info is added after we know if QtWebEngine is installed\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Notification Center is only available in > 10.8, which is Darwin v12\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Always embed on Windows or OSX; never embed when enabling KDE integration\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The following options are not for end-user consumption, so don't list them in the feature summary\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List of authenticators and the cmake flags to build them\n\n# (currently that's just LDAP, but more can be added here).\n\n####################################################################\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Setup CMake\n\n#####################################################################\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Visibility settings apply to all targets\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Let automoc/autouic process generated files\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Don't use X11 on OSX\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Simplify later checks\n\n#####################################################################\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Set up Qt\n\n#####################################################################\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Find package dependencies\n\n#\n\n# Note that you can forcefully disable optional packages\n\n# using -DCMAKE_DISABLE_FIND_PACKAGE_<PkgName>=TRUE\n\n#####################################################################\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Required Qt components\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Optional Qt components\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# KDE Frameworks\n\n################\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# extra-cmake-modules\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Even with KDE integration disabled, we optionally use tier1 frameworks if we find them\n",
        "Line" : 279,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# Optional KF5 tier1 components\n",
        "Line" : 302,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Non-Qt-based packages\n\n#####################################################################\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Older versions don't define the imported target\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Needed for generating backtraces\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Setup unit testing\n\n#####################################################################\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# GTest messes with CMAKE_CXX_FLAGS, so process them again\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Check for SSL support in Qt\n\n#####################################################################\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Setup support for KDE Frameworks\n\n#####################################################################\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# If KDE Frameworks are present, they're most probably providing Qt5 integration including icon loading\n",
        "Line" : 413,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# This needs to come after setting up KDE integration, so we can use KDE-specific paths\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# RPATH and output settings\n\n#####################################################################\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Build artifacts in a well-known location; especially important for Windows DLLs\n\n# (which go into RUNTIME_OUTPUT_DIRECTORY and can thus be found by executables)\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# These RPATH settings allow for running directly from the build dir\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Set install RPATH only if libdir isn't a system directory\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Various config-dependent checks and settings\n\n#####################################################################\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Check for syslog support\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Windows-specific stuff\n\n#####################################################################\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# missing by default :/\n",
        "Line" : 470,
        "CharPositionInLine" : 49
      },
      "50" : {
        "Text" : "# Prepare the build\n\n#####################################################################\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Add needed subdirs - the order is important, since src needs some vars set by other dirs\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Set up and display feature summary\n\n#####################################################################\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Finally, compile the sources\n\n# We want this after displaying the feature summary to avoid ugly\n\n# CMake backtraces in case a required Qt5 module is missing\n\n#####################################################################\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Build tests if so desired\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 55
    },
    "cmake/BuildType.cmake" : {
      "ObjectId" : "a1b0a70ef19327aee737faa109e5c1c8f1a14378",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Derived from Marcus D. Hanwell's suggestion\n\n# https://blog.kitware.com/cmake-and-the-default-build-type/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For builds from Git, default to Debug\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Multi-config generators (such as the VS one) will set the config types\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/FindGTest.cmake" : {
      "ObjectId" : "52c679c1392cc5e0bb13e86c78b2673a3375571f",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# It is recommended that projects build GTest/GMock themselves, rather\n\n# than relying on system-provided libraries. This is to ensure that the\n\n# same build configuration is used for both test cases and the\n\n# libraries.\n\n#\n\n# This find module includes bundled sources to build the GTest and GMock\n\n# libraries. Since including the provided CMake build system as a\n\n# subproject would not allow for proper target installation,\n\n# and linking GTest as a static library poses a special kind of hell,\n\n# we rely on GTest build system internals to setup targets under our\n\n# control.\n\n#\n\n# This means that this find module will only work properly as long as\n\n# the layout and the internals of the provided GTest/GMock sources\n\n# do not change in incompatible ways. Thus, if the bundled sources\n\n# are updated, this find script may have to be adapted, too.\n\n#\n\n# This find module defines one alias target GMock::GMock to depend on.\n\n########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We don't install our tests\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link against the runtime dynamically on Windows\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Here's where it gets shaky... include GTest's CMake macros, which\n\n# we'll use to setup the target with the expected compile flags.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Provided by GTest, configure compile flags\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create target using GTest's macro and compile flags\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Alias to follow our convention of namespaced targets\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set include dirs\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Ensure symbols are exported\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add support for find_package\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindLdap.cmake" : {
      "ObjectId" : "1d1d164137ab501bd35dc71a2defbeed2e7b9d26",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLdap\n\n# --------\n\n#\n\n# Try to find the LDAP client libraries.\n\n#\n\n# This will define the following variables:\n\n#\n\n# ``Ldap_FOUND``\n\n#     True if libldap is available.\n\n#\n\n# ``Ldap_VERSION``\n\n#     The version of libldap\n\n#\n\n# ``Ldap_INCLUDE_DIRS``\n\n#     This should be passed to target_include_directories() if\n\n#     the target is not used for linking\n\n#\n\n# ``Ldap_LIBRARIES``\n\n#     The LDAP libraries (libldap + liblber if available)\n\n#     This can be passed to target_link_libraries() instead of\n\n#     the ``Ldap::Ldap`` target\n\n#\n\n# If ``Ldap_FOUND`` is TRUE, the following imported target\n\n# will be available:\n\n#\n\n# ``Ldap::Ldap``\n\n#     The LDAP library\n\n#\n\n#=============================================================================\n\n# Copyright 2006 Szombathelyi György <gyurco@freemail.hu>\n\n# Copyright 2007-2016 Laurent Montel <montel@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OSX ships with an LDAP.framework which seems to be completely broken.\n\n# Force using the working version in /usr instead.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/GenerateQrc.cmake" : {
      "ObjectId" : "4614e49447a6c514c1bb5df09518dabd4b551537",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generates a .qrc file named ${QRC_FILE} with path prefix ${PREFIX}, containing\n\n# all files matching the glob ${PATTERNS} in the current working directory.\n\n# This script is intended to be executed using the cmake -P syntax, so the\n\n# arguments we're interested in start at ARGV3.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find all files matching PATTERNS in the current working directory\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate a temporary file first, so we don't touch the real thing unless something changed\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Record the timestamp of last modification so changes are detected\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check if the newly generated file has the same contents (including timestamps) as the existing one.\n\n# If the files are the same, don't touch the original to avoid useless rebuilds.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "c01e58dfd397107ac5e0569c51437ba870862a01",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file boost-license-1.0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found\n",
        "Line" : 44,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/QuasselCompileFeatures.cmake" : {
      "ObjectId" : "48faef54024c29edf35ebec9f53df55d40511095",
      "LastModified" : "2018-11-18T10:06:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The compile(r) features required to build the Quassel source.\n\n# This list is used by CMake to determine if the compiler can build the code.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/QuasselCompileSettings.cmake" : {
      "ObjectId" : "9de75dcaf6ecf80b9d02f7f98c93045328f3bd9f",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains compile flags and general build configuration for Quassel\n\n#\n\n# (C) 2014-2019 by the Quassel Project <devel@quassel-irc.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Helper function to check for linker flag support\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General compile settings\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Rely on compile features if standard is not supported\n\n# We like to be standard conform\n",
        "Line" : 24,
        "CharPositionInLine" : 40
      },
      "4" : {
        "Text" : "# For GCC and Clang, enable a whole bunch of warnings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check for and set linker flags\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Target Windows Vista\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Various settings for the Windows API\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Compile options\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Increase warning level on MSVC\n\n# CMake puts /W3 in CMAKE_CXX_FLAGS which will be appended later, so we need to replace\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Silence annoying/useless warnings\n\n#   C4127: conditional expression is constant\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#   C4244: 'identifier': conversion from 't1' to 't2', possible loss of data\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#   C4456: declaration of 'identifier' hides previous local declaration\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#   C4458: declaration of 'identifier' hides class member\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Link against the correct version of the C runtime\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# For other compilers, we rely on default settings (unless someone provides a good set of options; patches welcome!)\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Mac build stuff\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally, produce clazy warnings\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Append CMAKE_CXX_FLAGS, so our flags can be overwritten externally.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake/QuasselInstallDirs.cmake" : {
      "ObjectId" : "cf39bfd0e15f40cf8741ba97d846709e7bb4434a",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets up install locations for Quassel\n\n#\n\n# (C) 2015 by the Quassel Project <devel@quassel-irc.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup install locations\n\n#####################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We support the CMake standard variables (CMAKE_INSTALL_<TYPE>_DIR),\n\n# which can be overridden on the command line. If KDE integration is enabled,\n\n# we make use of its settings.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On Windows, we have to guess good paths\n\n# We must check if the variables are already defined on the command line\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# This sets the standard variables; however it doesn't know about icons and apps\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Special treatment for paths relative to DATAROOTDIR, as found in GNUInstallDirs\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "cmake/QuasselMacros.cmake" : {
      "ObjectId" : "247b620756db6f47f6f4b1bb9e5d2e7ec176b223",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains various functions and macros useful for building Quassel.\n\n#\n\n# (C) 2014-2019 by the Quassel Project <devel@quassel-irc.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n###################################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n\n# Adds a library target for a Quassel module.\n\n#\n\n# quassel_add_module(Module [STATIC] [EXPORT])\n\n#\n\n# The function expects the (CamelCased) module name as a parameter, and derives various\n\n# strings from it. For example, quassel_add_module(Client) produces\n\n#  - a library target named quassel_client with output name (lib)quassel-client(.so)\n\n#  - an alias target named Quassel::Client in global scope\n\n#\n\n# If the optional argument STATIC is given, a static library is built; otherwise, on\n\n# platforms other than Windows, a shared library is created. For shared libraries, also\n\n# an install rule is added.\n\n#\n\n# To generate an export header for the library, specify EXPORT. The header will be named\n\n# ${module}-export.h (where ${module} is the lower-case name of the module).\n\n#\n\n# The function exports the TARGET variable which can be used in the current scope\n\n# for setting source files, properties, link dependencies and so on.\n\n# To refer to the target outside of the current scope, e.g. for linking, use\n\n# the alias name.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Derive target, alias target, output name from the given module name\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# for generated files\n",
        "Line" : 60,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : "# Export the target name for further use\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "###################################################################################################\n\n# Provides a library that contains data files as a Qt resource (.qrc).\n\n#\n\n# quassel_add_resource(QrcName\n\n#                      [BASEDIR basedir]\n\n#                      [PREFIX prefix]\n\n#                      PATTERNS pattern1 pattern2...\n\n#                      [DEPENDS dep1 dep2...]\n\n# )\n\n#\n\n# The first parameter is the CamelCased name of the resource; the library target will be called\n\n# \"Quassel::Resource::QrcName\". The library provides a Qt resource named \"qrcname\" (lowercased QrcName)\n\n# containing the files matching PATTERNS relative to BASEDIR (by default, the current source dir).\n\n# The resource prefix can be set by giving the PREFIX argument.\n\n# Additional target dependencies can be specified with DEPENDS.\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This target will always be built, so the qrc file will always be freshly generated.\n\n# That way, changes to the glob result are always taken into account.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# RCC sucks and expects the data files relative to the qrc file, with no way to configure it differently.\n\n# Only when reading from stdin (\"-\") it takes the working directory as a base, so we have to use this if\n\n# we want to use generated qrc files (which obviously cannot be placed in the source directory).\n\n# Since neither autorcc nor qt5_add_resources() support this, we have to invoke rcc manually :(\n\n#\n\n# On Windows, input redirection apparently doesn't work, however piping does. Use this for all platforms for\n\n# consistency, accommodating for the fact that the 'cat' equivalent on Windows is 'type'.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Generate library target that can be referenced elsewhere. Force static, because\n\n# we can't easily export symbols from the generated sources.\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Set variable for referencing the target from outside\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "###################################################################################################\n\n# Adds a unit test case\n\n#\n\n# quassel_add_test(TestName\n\n#                  [LIBRARIES lib1 lib2...]\n\n# )\n\n#\n\n# The test name is given in CamelCase as first and mandatory parameter. The corresponding source file\n\n# is expected the lower-cased test name plus the .cpp extension.\n\n# The test case is automatically linked against Qt5::Test, GMock, Quassel::Common and\n\n# Quassel::Test::Main, which contains the main function. This main function also instantiates a\n\n# QCoreApplication, so the event loop can be used in test cases.\n\n#\n\n# Additional libraries can be given using the LIBRARIES argument.\n\n#\n\n# Test cases should include testglobal.h, which transitively includes the GTest/GMock headers and\n\n# exports the main function.\n\n#\n\n# The compiled test case binary is located in the unit/ directory in the build directory.\n\n#\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# On Windows, tests need to be built in the same directory that contains the libraries\n",
        "Line" : 208,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# On other platforms, separate the test cases out\n",
        "Line" : 211,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "###################################################################################################\n\n# target_link_if_exists(Target\n\n#                       [PUBLIC dep1 dep2...]\n\n#                       [PRIVATE dep3 dep4...]\n\n# )\n\n#\n\n# Convenience function to add dependencies to a target only if they exist. This is useful when\n\n# handling targets that are conditionally created, e.g. resource libraries depending on -DEMBED_DATA.\n\n#\n\n# NOTE: In order to link a given target, it must already have been created, i.e its subdirectory\n\n#       must already have been added. This is also true for globally visible ALIAS targets that\n\n#       can otherwise be linked to regardless of creation order; \"if (TARGET...)\" does not\n\n#       support handling this case correctly.\n\n#\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "###################################################################################################\n\n# process_cmake_cxx_flags()\n\n#\n\n# Append the options declared CMAKE_CXX_FLAGS and CMAKE_CXX_FLAGS_<BUILD_TYPE> to the global\n\n# compile options.\n\n# Unset the variables afterwards to avoid duplication.\n\n#\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/QuasselVersion.cmake" : {
      "ObjectId" : "6f2cbad583a1d84f35e4362c50245b7281940746",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set up version-related information\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Quassel version\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get additional version information from Git\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If in a Git repo we can get the commit-date from a git command\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If not in a Git repo try to read GIT_HEAD and GIT_DESCRIBE from enviroment\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sanitize things if we're not in a Git repo\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Ensure we have a sensible value for GIT_COMMIT_DATE\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generate version header\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Output version, with commit hash if available\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "536d82a623a344eb5e385df49b99aed89073eb83",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "icons/CMakeLists.txt" : {
      "ObjectId" : "35eae344aa3ab50a069ebd804779df265e3da750",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install icons\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Always embed a hicolor fallback containing the most important (e.g. tray) icons.\n\n# The .qrc contains aliases, so it's best to keep this manually written rather than autogenerated.\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Always embed quassel-specific icons\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Always install quassel-specific icons\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Install bundled icon themes into our data dir (instead of CMAKE_INSTALL_ICONDIR) to avoid conflicts\n\n# with themes provided by the system\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Application icon\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# hicolor contains the application icon in all relevant sizes\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Qt < 5.5 doesn't seem to correctly load icons from injected themes\n\n# Install Quassel-specific ones from Oxygen into hicolor as fallback\n",
        "Line" : 63,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# For a system install, also copy to pixmaps\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "pics/CMakeLists.txt" : {
      "ObjectId" : "8759f380c9dbeacaa55dd7113b8af504e2f1f8bf",
      "LastModified" : "2019-02-14T19:59:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# pics/ contains non-themed icons and other graphical resources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "e7df6271f0e12650e46f3cc99ff302e4230cc513",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate translations\n\n# The LINGUAS environment variable can be used to limit the set of supported languages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a .ts file from a .po file\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Clear variables just in case\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# LINGUAS can be used to limit the included languages\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Normalize and convert into list\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# We support xx.po and xx_YY.po, and additionally translations for qt using qt_xx.po or qt_xx_YY.po\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# CMake can't use MATCH to get the second catch...\n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Test if we want this language\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# idx will be -1 if ${lang} is not found in LINGUAS\n",
        "Line" : 37,
        "CharPositionInLine" : 44
      },
      "9" : {
        "Text" : "# Synchronize the (possibly outdated) .ts files with the current source tree\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Generate the final translation files (.qm) for use by Qt\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Curate the language list and give diagnostic output\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Always generate translations\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "130144b56c2a901976fd15b6d8b4b1bbcb823bd9",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/client/CMakeLists.txt" : {
      "ObjectId" : "756a5409267f4083753e6a774eae6f6c712c8a24",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed for automoc\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# QAbstractItemView in BufferModel\n",
        "Line" : 44,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 2
    },
    "src/common/CMakeLists.txt" : {
      "ObjectId" : "f53988d082d16612d9d4918f998507be9c5f3305",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed for automoc\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Needed for finding the generated version.h\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "a4cc8099679f08fa23bbcc8c3c62bc2001654011",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed for automoc\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/main/CMakeLists.txt" : {
      "ObjectId" : "b5aa96364fa7b19fbb68b74c6be609c62a843f2c",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Convenience function to avoid boilerplate\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Windows icon resource\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the executables\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build bundles for MacOSX\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/qtui/CMakeLists.txt" : {
      "ObjectId" : "eee27cb33d019eb1e27efa50ffdc5239982ef62f",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UI files\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Handle settingspages\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/qtui/settingspages/settingspages.cmake" : {
      "ObjectId" : "3a72fc59167a2edb4ab3359da9e118fe60f1fbf7",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Putting $FOO in SETTINGSPAGES automatically includes\n\n# $FOOsettingspage.cpp, $FOOsettingspage.h and $FOOsettingspage.ui\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify additional files (e.g. for subdialogs) here!\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# needed for automoc\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "02c9b6e6b189ba932a357490d50612cc78753e3e",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/global/CMakeLists.txt" : {
      "ObjectId" : "f5ff81a8653234a3899deb96669be4326556625f",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/main/CMakeLists.txt" : {
      "ObjectId" : "5d590634aad73ffa1e8daf0b5375ce54458f274b",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/util/CMakeLists.txt" : {
      "ObjectId" : "15611d34e41761305bb123e11e010bdb6c758c5f",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/uisupport/CMakeLists.txt" : {
      "ObjectId" : "3b19471d7333c2eefa12c539b17e739707c8183e",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# needed for automoc\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "e4717b2d6719fa2d26a6c88fb841d656f8ae79be",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/common/CMakeLists.txt" : {
      "ObjectId" : "6b84646864033192bf90581e1e17b8b16896b7d0",
      "LastModified" : "2019-02-13T19:39:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 33
  },
  "ElapsedTime" : 2281
}