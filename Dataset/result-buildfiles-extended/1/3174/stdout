{
  "Repository" : "3174",
  "Revision" : "HEAD",
  "ObjectId" : "b759bef872231c3f1140a6b5e2073fa316f2e661",
  "CommitTime" : "2019-04-17T22:01:20Z",
  "Files" : {
    "CMake/FindCython.cmake" : {
      "ObjectId" : "d292daa35d31545fdceb90f9c369c71cfb1c81df",
      "LastModified" : "2019-01-18T00:32:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Cython\n\n#\n\n# This module sets the following variables:\n\n# - Cython_FOUND\n\n# - CYTHON_EXE\n\n# - CYTHON_VERSION_STRING\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindDoubleConversion.cmake" : {
      "ObjectId" : "0a967eb5fade426808c6f2845c2ccf65a1dc8cd6",
      "LastModified" : "2019-01-18T00:32:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds libdouble-conversion.\n\n#\n\n# This module defines:\n\n# DOUBLE_CONVERSION_INCLUDE_DIR\n\n# DOUBLE_CONVERSION_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindLZ4.cmake" : {
      "ObjectId" : "746cad7c3bb38e9acf72c977ae3f77601bb2f97d",
      "LastModified" : "2019-01-18T00:32:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds liblz4.\n\n#\n\n# This module defines:\n\n# LZ4_FOUND\n\n# LZ4_INCLUDE_DIR\n\n# LZ4_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindLibAIO.cmake" : {
      "ObjectId" : "cd62156ed156395365dbce5d53b04d91e589870b",
      "LastModified" : "2019-01-18T00:32:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindLibDwarf.cmake" : {
      "ObjectId" : "962b5f7a4aa0133e3b83d5b50a32ecd829b7ba43",
      "LastModified" : "2019-01-18T00:32:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# dwarf.h is typically installed in a libdwarf/ subdirectory on Debian-style\n\n# Linux distributions.  It is not installed in a libdwarf/ subdirectory on Mac\n\n# systems when installed with Homebrew.  Search for it in both locations.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindLibiberty.cmake" : {
      "ObjectId" : "c0e927be01972a445a1eeccb811bb5cfa4ed469f",
      "LastModified" : "2019-01-18T00:32:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindLibsodium.cmake" : {
      "ObjectId" : "6bcceb3774f2b0e80835a5f66ecfb32b237cab69",
      "LastModified" : "2019-03-01T00:09:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindSnappy.cmake" : {
      "ObjectId" : "5122a63612b9d99693cd6b08e2980734b28d1ea5",
      "LastModified" : "2019-03-01T00:09:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Snappy libraries\n\n#\n\n# This module defines:\n\n# SNAPPY_FOUND\n\n# SNAPPY_INCLUDE_DIR\n\n# SNAPPY_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindZstd.cmake" : {
      "ObjectId" : "9f3a7379fb072245cbfec480d73f88e7bd44aff5",
      "LastModified" : "2019-03-01T00:09:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# - Try to find Facebook zstd library\n\n# This will define\n\n# ZSTD_FOUND\n\n# ZSTD_INCLUDE_DIR\n\n# ZSTD_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FollyCompilerMSVC.cmake" : {
      "ObjectId" : "eb10c30fd2797d1e14b12adfdfaca5666e795d6a",
      "LastModified" : "2019-03-01T00:09:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some additional configuration options.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Alas, option() doesn't support string values.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add a pretty drop-down selector for these values when using the GUI.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Validate, and then add the favored architecture.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "############################################################\n\n# We need to adjust a couple of the default option sets.\n\n############################################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If the static runtime is requested, we have to\n\n# overwrite some of CMake's defaults.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The Ninja generator doesn't de-dup the exception mode flag, so remove the\n\n# default flag so that MSVC doesn't warn about it on every single file.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In order for /Zc:inline, which speeds up the build significantly, to work\n\n# we need to remove the /Ob0 parameter that CMake adds by default, because that\n\n# would normally disable all inlining.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Apply the option set for Folly to the specified target.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The general options passed:\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Enable both SEH and C++ Exceptions.\n",
        "Line" : 83,
        "CharPositionInLine" : 11
      },
      "11" : {
        "Text" : "# There are bugs with constexpr StringPiece when string pooling is disabled.\n",
        "Line" : 84,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Disallow temporaries from binding to non-const lvalue references.\n",
        "Line" : 85,
        "CharPositionInLine" : 27
      },
      "13" : {
        "Text" : "# Enforce the standard rules for explicit type conversion.\n",
        "Line" : 86,
        "CharPositionInLine" : 21
      },
      "14" : {
        "Text" : "# Enable implicit noexcept specifications where required, such as destructors.\n",
        "Line" : 87,
        "CharPositionInLine" : 27
      },
      "15" : {
        "Text" : "# Don't allow conversion from a string literal to mutable characters.\n",
        "Line" : 88,
        "CharPositionInLine" : 24
      },
      "16" : {
        "Text" : "# Enable thread-safe function-local statics initialization.\n",
        "Line" : 89,
        "CharPositionInLine" : 25
      },
      "17" : {
        "Text" : "# Assume operator new throws on failure.\n",
        "Line" : 90,
        "CharPositionInLine" : 22
      },
      "18" : {
        "Text" : "# Be mean, don't allow bad non-standard stuff (C++/CLI, __declspec, etc. are all left intact).\n",
        "Line" : 92,
        "CharPositionInLine" : 19
      },
      "19" : {
        "Text" : "# Build in the requested version of C++\n",
        "Line" : 93,
        "CharPositionInLine" : 36
      },
      "20" : {
        "Text" : "# Support objects with > 65k sections. Needed due to templates.\n",
        "Line" : 96,
        "CharPositionInLine" : 14
      },
      "21" : {
        "Text" : "# Architecture to prefer when generating code.\n",
        "Line" : 97,
        "CharPositionInLine" : 42
      },
      "22" : {
        "Text" : "# Have the compiler eliminate unreferenced COMDAT functions and data before emitting the object file.\n",
        "Line" : 98,
        "CharPositionInLine" : 17
      },
      "23" : {
        "Text" : "# Enable all warnings if requested.\n\n# Enable multi-processor compilation if requested.\n",
        "Line" : 100,
        "CharPositionInLine" : 51
      },
      "24" : {
        "Text" : "# Enable static analysis if requested.\n",
        "Line" : 102,
        "CharPositionInLine" : 57
      },
      "25" : {
        "Text" : "# Debug builds\n",
        "Line" : 104,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Disable function level linking.\n",
        "Line" : 106,
        "CharPositionInLine" : 13
      },
      "27" : {
        "Text" : "# Add /Ob2 if allowing inlining in debug mode.\n",
        "Line" : 108,
        "CharPositionInLine" : 54
      },
      "28" : {
        "Text" : "# Non-debug builds\n",
        "Line" : 111,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# Optimize global data. (-fdata-sections)\n\n# Enable function level linking. (-ffunction-sections)\n",
        "Line" : 113,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "# Enable parallel code generation.\n",
        "Line" : 115,
        "CharPositionInLine" : 14
      },
      "31" : {
        "Text" : "# Enable intrinsic functions.\n\n# Favor fast code.\n",
        "Line" : 116,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "# Enable link time code generation.\n",
        "Line" : 119,
        "CharPositionInLine" : 43
      },
      "33" : {
        "Text" : "# 'type cast' unsafe conversion of function pointers\n\n# no matching operator delete found\n\n# '=' truncation of constant value\n\n# cast truncates constant value\n\n# result of unary '&' operator may be unaligned\n\n# behavior change; constructor no longer implicitly called\n\n# symbol will be dynamically initialized (implementation limitation)\n\n# digraphs not supported with -Ze\n\n# potential divide by 0\n\n# potential mod by 0\n\n# compiler may not enforce left-to-right evaluation order\n\n# user deprecated\n",
        "Line" : 125,
        "CharPositionInLine" : 14
      },
      "34" : {
        "Text" : "# The warnings that are disabled:\n",
        "Line" : 138,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Unknown pragma.\n\n# 'typedef' ignored on left of '' when no variable is declared.\n\n# Unary minus applied to unsigned type, result still unsigned.\n\n# Values being forced to bool, this happens many places, and is a \"performance warning\".\n",
        "Line" : 139,
        "CharPositionInLine" : 14
      },
      "36" : {
        "Text" : "# NOTE: glog/logging.h:1116 change to `size_t pcount() const { return size_t(pptr() - pbase()); }`\n\n# NOTE: gmock/gmock-spec-builders.h:1177 change to `*static_cast<const Action<F>*>(untyped_actions_[size_t(count - 1)]) :`\n\n# NOTE: gmock/gmock-spec-builders.h:1749 change to `const size_t count = untyped_expectations_.size();`\n\n# NOTE: gmock/gmock-spec-builders.h:1754 change to `for (size_t i = 0; i < count; i++) {`\n\n# NOTE: gtest/gtest-printers.h:173 change to `const internal::BiggestInt kBigInt = internal::BiggestInt(value);`\n\n# NOTE: gtest/internal/gtest-internal.h:890 add `GTEST_DISABLE_MSC_WARNINGS_PUSH_(4365)`\n\n# NOTE: gtest/internal/gtest-internal.h:894 ass `GTEST_DISABLE_MSC_WARNINGS_POP_()`\n\n# NOTE: boost/crc.hpp:578 change to `{ return static_cast<unsigned char>(x ^ rem); }`\n\n# NOTE: boost/regex/v4/match_results.hpp:126 change to `return m_subs[size_type(sub)].length();`\n\n# NOTE: boost/regex/v4/match_results.hpp:226 change to `return m_subs[size_type(sub)];`\n\n# NOTE: boost/date_time/adjust_functors.hpp:67 change to `origDayOfMonth_ = short(ymd.day);`\n\n# NOTE: boost/date_time/adjust_functors.hpp:75 change to `wrap_int2 wi(short(ymd.month));`\n\n# NOTE: boost/date_time/adjust_functors.hpp:82 change to `day_type resultingEndOfMonthDay(cal_type::end_of_month_day(static_cast<unsigned short>(year), static_cast<unsigned short>(wi.as_int())));`\n\n# NOTE: boost/date_time/adjust_functors.hpp:85 change to `return date_type(static_cast<unsigned short>(year), static_cast<unsigned short>(wi.as_int()), resultingEndOfMonthDay) - d;`\n\n# NOTE: boost/date_time/adjust_functors.hpp:87 change to `day_type dayOfMonth = static_cast<unsigned short>(origDayOfMonth_);`\n\n# NOTE: boost/date_time/adjust_functors.hpp:91 change to `return date_type(static_cast<unsigned short>(year), static_cast<unsigned short>(wi.as_int()), dayOfMonth) - d;`\n\n# NOTE: boost/date_time/adjust_functors.hpp:98 change to `origDayOfMonth_ = short(ymd.day);`\n\n# NOTE: boost/date_time/adjust_functors.hpp:106 change to `wrap_int2 wi(short(ymd.month));`\n\n# NOTE: boost/date_time/adjust_functors.hpp:111 change to `day_type resultingEndOfMonthDay(cal_type::end_of_month_day(static_cast<unsigned short>(year), static_cast<unsigned short>(wi.as_int())));`\n\n# NOTE: boost/date_time/adjust_functors.hpp:114 change to `return date_type(static_cast<unsigned short>(year), static_cast<unsigned short>(wi.as_int()), resultingEndOfMonthDay) - d;`\n\n# NOTE: boost/date_time/adjust_functors.hpp:116 change to `day_type dayOfMonth = static_cast<unsigned short>(origDayOfMonth_);`\n\n# NOTE: boost/date_time/adjust_functors.hpp:120 change to `return date_type(static_cast<unsigned short>(year), static_cast<unsigned short>(wi.as_int()), dayOfMonth) - d;`\n\n# NOTE: boost/date_time/gregorian_calendar.ipp:81 change to `unsigned long  d = static_cast<unsigned long>(ymd.day + ((153*m + 2)/5) + 365*y + (y/4) - (y/100) + (y/400) - 32045);`\n\n# NOTE: boost/date_time/gregorian/greg_date.hpp:122 change to `unsigned short eom_day =  gregorian_calendar::end_of_month_day(ymd.year, ymd.month);`\n\n# NOTE: boost/thread/future.hpp:1050 change to `locks[std::ptrdiff_t(i)]=BOOST_THREAD_MAKE_RV_REF(boost::unique_lock<boost::mutex>(futures[i].future_->mutex));`\n\n# NOTE: boost/thread/future.hpp:1063 change to `locks[std::ptrdiff_t(i)].unlock();`\n\n# NOTE: boost/thread/win32/basic_recursive_mutex.hpp:47 change to `long const current_thread_id=long(win32::GetCurrentThreadId());`\n\n# NOTE: boost/thread/win32/basic_recursive_mutex.hpp:53 change to `long const current_thread_id=long(win32::GetCurrentThreadId());`\n\n# NOTE: boost/thread/win32/basic_recursive_mutex.hpp:64 change to `long const current_thread_id=long(win32::GetCurrentThreadId());`\n\n# NOTE: boost/thread/win32/basic_recursive_mutex.hpp:78 change to `long const current_thread_id=long(win32::GetCurrentThreadId());`\n\n# NOTE: boost/thread/win32/basic_recursive_mutex.hpp:84 change to `long const current_thread_id=long(win32::GetCurrentThreadId());`\n\n# NOTE: boost/thread/win32/condition_variable.hpp:79 change to `detail::win32::ReleaseSemaphore(semaphore,long(count_to_release),0);`\n\n# NOTE: boost/thread/win32/condition_variable.hpp:84 change to `release(unsigned(detail::interlocked_read_acquire(&waiters)));`\n\n# NOTE: boost/algorithm/string/detail/classification.hpp:85 change to `std::size_t Size=std::size_t(::boost::distance(Range));`\n",
        "Line" : 144,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Signed/unsigned mismatch.\n\n# Signed/unsigned mismatch.\n\n# Signed/unsigned mismatch on relative comparison operator.\n\n# Signed/unsigned mismatch on equality comparison operator.\n",
        "Line" : 178,
        "CharPositionInLine" : 14
      },
      "38" : {
        "Text" : "# TODO:\n",
        "Line" : 183,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Unreferenced formal parameter.\n\n# Declaration of parameter hides global declaration.\n\n# Unreferenced local function has been removed.\n\n# Potentially uninitialized local variable used.\n\n# Unreachable code.\n",
        "Line" : 184,
        "CharPositionInLine" : 14
      },
      "40" : {
        "Text" : "# These warnings are disabled because we've\n\n# enabled all warnings. If all warnings are\n\n# not enabled, we still need to disable them\n\n# for consuming libs.\n",
        "Line" : 190,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# Enum value not handled by a case in a switch on an enum. This isn't very helpful because it is produced even if a default statement is present.\n\n# Conditional expression is constant.\n\n# Non-standard extension, zero sized array.\n\n# Non-standard extension used: nameless struct/union.\n\n# '<' Expression is always false.\n\n# Object allocated on the heap may not be aligned to 128.\n\n# Structure was padded due to alignment specifier.\n\n# 'this' used in base member initializer list.\n\n# Layout of class may have changed due to fixes in packing.\n\n# Object layout under /vd2 will change due to virtual base.\n\n# Unreferenced inline function has been removed. (caused by /Zc:inline)\n\n# Expression before comma has no effect. I wouldn't disable this normally, but malloc.h triggers this warning.\n\n# ifdef'd macro was defined to 0.\n\n# Constructor is not implicitly called.\n\n# Destructor is not implicitly called.\n\n# Invalid warning number used in #pragma warning.\n\n# Default constructor was implicitly defined as deleted.\n\n# Copy constructor was implicitly defined as deleted.\n\n# Assignment operator was implicitly defined as deleted.\n\n# Forward declaring standard library types is not permitted.\n\n# Behavior change in __is_pod.\n\n# Macro was not defined, replacing with 0.\n\n# Assignment within conditional expression.\n\n# Function was not inlined.\n\n# Function was selected for automated inlining.\n\n# Function marked as __forceinline not inlined.\n\n# Padding added after data member.\n\n# Move constructor was implicitly defined as deleted.\n\n# Move assignment operator was implicitly defined as deleted.\n\n# #pragma warning(pop): likely mismatch, popping warning state pushed in different file. This is needed because of how boost does things.\n\n# Compiler will insert Spectre mitigation for memory load if /Qspectre switch is specified.\n",
        "Line" : 194,
        "CharPositionInLine" : 14
      },
      "42" : {
        "Text" : "# Warnings to treat as errors:\n",
        "Line" : 226,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Mixed use of struct and class on same type names.\n\n# Unknown escape sequence. This is usually caused by incorrect escaping.\n\n# Character cannot be represented in current charset. This is remidied by prefixing string with \"u8\".\n",
        "Line" : 227,
        "CharPositionInLine" : 14
      },
      "44" : {
        "Text" : "# Warnings disabled for /analyze\n",
        "Line" : 232,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# Using uninitialized memory. This is disabled because it is wrong 99% of the time.\n\n# Dereferencing potentially NULL pointer.\n\n# Return value ignored.\n\n# (<non-zero constant> || <expression>) is always a non-zero constant.\n\n# (<zero> && <expression>) is always zero. <expression> is never evaluated and may have side effects.\n\n# (<non-zero constant> && <expression>) always evaluates to the result of <expression>.\n\n# (<expression> && <non-zero constant>) always evaluates to the result of <expression>.\n\n# Local declaration hides declaration of same name in outer scope.\n\n# Setting a SECURITY_DESCRIPTOR's DACL to NULL will result in an unprotected object. This is done by one of the boost headers.\n\n# _alloca indicates failure by raising a stack overflow exception.\n\n# Function uses more than x bytes of stack space.\n\n# Extra parameter passed to format function. The analysis pass doesn't recognize %j or %z, even though the runtime does.\n\n# (<non-zero constant> || <non-zero constant>) is always true.\n\n# 32-bit value is shifted then cast to 64-bits. The places this occurs never use more than 32 bits.\n\n# Realloc might return null pointer: assigning null pointer to '<name>', which is passed as an argument to 'realloc', will cause the original memory to leak.\n\n# Potential comparison of a constant with another constant.\n\n# Unsigned/signed mismatch when passed as a parameter.\n\n# Mismatch on sign when passed as format string value.\n\n# '<value>' could be '0': This does not adhere to the specification for a function.\n",
        "Line" : 234,
        "CharPositionInLine" : 16
      },
      "46" : {
        "Text" : "# Dereferencing NULL pointer. '<value>' contains the same NULL value as '<expression>'.\n\n# Inconsistent annotation for function. This is because we only annotate the declaration and not the definition.\n\n# Function appears with no prototype in scope.\n",
        "Line" : 253,
        "CharPositionInLine" : 17
      },
      "47" : {
        "Text" : "# And the extra defines:\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Don't deprecate posix names of functions.\n",
        "Line" : 262,
        "CharPositionInLine" : 31
      },
      "49" : {
        "Text" : "# Don't deprecate the non _s versions of various standard library functions, because safety is for chumps.\n\n# Don't deprecate the non _s versions of various standard library functions, because safety is for chumps.\n",
        "Line" : 263,
        "CharPositionInLine" : 30
      },
      "50" : {
        "Text" : "#A type with an extended alignment in VS 15.8 or later\n",
        "Line" : 265,
        "CharPositionInLine" : 40
      },
      "51" : {
        "Text" : "# We're building in C++ 17 or greater mode, but certain dependencies (Boost) still have dependencies on unary_function and binary_function, so we have to make sure not to remove them.\n",
        "Line" : 268,
        "CharPositionInLine" : 63
      },
      "52" : {
        "Text" : "# Don't include most of Windows.h\n",
        "Line" : 269,
        "CharPositionInLine" : 74
      },
      "53" : {
        "Text" : "# MSVC moves faster than boost, so add a quick way to disable the messages.\n",
        "Line" : 270,
        "CharPositionInLine" : 95
      },
      "54" : {
        "Text" : "# Ignore a warning about an object file not defining any symbols,\n\n# these are known, and we don't care.\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# The options to pass to the linker:\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Do incremental linking.\n",
        "Line" : 278,
        "CharPositionInLine" : 92
      },
      "57" : {
        "Text" : "# No unreferenced data elimination.\n\n# No Identical COMDAT folding.\n",
        "Line" : 280,
        "CharPositionInLine" : 92
      },
      "58" : {
        "Text" : "# Remove unreferenced functions and data.\n\n# Identical COMDAT folding.\n",
        "Line" : 283,
        "CharPositionInLine" : 92
      },
      "59" : {
        "Text" : "# Generate a partial PDB file that simply references the original object and library files.\n",
        "Line" : 288,
        "CharPositionInLine" : 97
      },
      "60" : {
        "Text" : "# Add /GL to the compiler, and /LTCG to the linker\n\n# if link time code generation is enabled.\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 61
    },
    "CMake/FollyCompilerUnix.cmake" : {
      "ObjectId" : "9c76fdc6fe7dd2f6b30acd12721d00f9eb08ea68",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Provide an option to control the -std argument for the C++ compiler.\n\n# We don't use CMAKE_CXX_STANDARD since it requires at least CMake 3.8\n\n# to support C++17.\n\n#\n\n# Most users probably want to stick with the default here.  However, gnu++1z\n\n# does change the linkage of how some symbols are emitted (e.g., constexpr\n\n# variables defined in headers).  In case this causes problems for downstream\n\n# libraries that aren't using gnu++1z yet, provide an option to let them still\n\n# override this with gnu++14 if they need to.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note that CMAKE_REQUIRED_FLAGS must be a string, not a list\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/FollyConfigChecks.cmake" : {
      "ObjectId" : "49a776cb5cad9cca1684d8d6654737c076cf506f",
      "LastModified" : "2019-03-19T09:40:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clang only rejects unknown warning flags if -Werror=unknown-warning-option\n\n# is also specified.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Unfortunately check_symbol_exists() does not work for memrchr():\n\n# it fails complaining that there are multiple overloaded versions of memrchr()\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Older releases of gflags used the namespace \"gflags\"; newer releases\n\n# use \"google\" but also make symbols available in the deprecated \"gflags\"\n\n# namespace too.  The folly code internally uses \"gflags\" unless we tell it\n\n# otherwise.\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CMake/FollyFunctions.cmake" : {
      "ObjectId" : "3e3b3f7c62dca15c9edd5fd32cf8b559e1727ae2",
      "LastModified" : "2019-03-01T00:09:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remove all files matching a set of patterns, and,\n\n# optionally, not matching a second set of patterns,\n\n# from a set of lists.\n\n#\n\n# Example:\n\n# This will remove all files in the CPP_SOURCES list\n\n# matching \"/test/\" or \"Test.cpp$\", but not matching\n\n# \"BobTest.cpp$\".\n\n# REMOVE_MATCHES_FROM_LISTS(CPP_SOURCES MATCHES \"/test/\" \"Test.cpp$\" IGNORE_MATCHES \"BobTest.cpp$\")\n\n#\n\n# Parameters:\n\n#\n\n# [...]:\n\n# The names of the lists to remove matches from.\n\n#\n\n# [MATCHES ...]:\n\n# The matches to remove from the lists.\n\n#\n\n# [IGNORE_MATCHES ...]:\n\n# The matches not to remove, even if they match\n\n# the main set of matches to remove.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automatically create source_group directives for the sources passed in.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake is a pain and doesn't have an easy way to install only the files\n\n# we actually included in our build :(\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need a single list of sources to get source_group to work nicely.\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# If we have CMake's built-in gtest support use it to add each test\n\n# function as a separate test.\n",
        "Line" : 266,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Otherwise add each test executable as a single test.\n",
        "Line" : 274,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Copy the content directory to the output directory tree so that\n\n# tests can be run easily from Visual Studio without having to change\n\n# the working directory for each test individually.\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Strip the tailing test directory name for the folder name.\n",
        "Line" : 297,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 8
    },
    "CMake/GenPkgConfig.cmake" : {
      "ObjectId" : "425a73b1ede5e6ed7a139306fad225abf815dd24",
      "LastModified" : "2019-03-01T00:09:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate variables that can be used to help emit a pkg-config file\n\n# using configure_file().\n\n#\n\n# Usage: gen_pkgconfig_vars(VAR_PREFIX target)\n\n#\n\n# This will set two variables in the caller scope:\n\n# ${VAR_PREFIX}_CFLAGS: set to the compile flags computed from the specified\n\n#   target\n\n# ${VAR_PREFIX}_PRIVATE_LIBS: set to the linker flags needed for static\n\n#   linking computed from the specified target\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The INTERFACE_LINK_LIBRARIES list is unfortunately somewhat awkward to\n\n# process.  Entries in this list may be any of\n\n# - target names\n\n# - absolute paths to a library file\n\n# - plain library names that need \"-l\" prepended\n\n# - other linker flags starting with \"-\"\n\n#\n\n# Walk through each entry and transform it into the desired arguments\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Add any compile options specified in the targets\n\n# INTERFACE_COMPILE_OPTIONS.  We don't need to process its\n\n# INTERFACE_LINK_LIBRARIES property, since our INTERFACE_LINK_LIBRARIES\n\n# will already include its entries transitively.\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Set the output variables\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "CMake/folly-config.h.cmake" : {
      "ObjectId" : "8caed8c1a35680b31273050a86c839e682ca525c",
      "LastModified" : "2019-03-19T09:40:09Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n * Copyright 2016 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/folly-deps.cmake" : {
      "ObjectId" : "e0bbcbb381fddeefe9646d8002c8b125a4ad9f6e",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Force static lib in msvc\n",
        "Line" : 6,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# Using clang with libstdc++ requires explicitly linking against libatomic\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# All of the functions in folly/detail/Sse.cpp are intended to be compiled\n\n# with ASAN disabled.  They are marked with attributes to disable the\n\n# sanitizer, but even so, gcc fails to compile them for some reason when\n\n# sanitization is enabled on the compile line.\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "CMakeLists.txt" : {
      "ObjectId" : "95d2b2ab8ffd823a6445c27e6bfcc822f823f86d",
      "LastModified" : "2019-04-08T18:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We use the GoogleTest module if it is available (only in CMake 3.9+)\n\n# It requires CMP0054 and CMP0057 to be enabled.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMP0075 Include file check macros honor CMAKE_REQUIRED_LIBRARIES\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# includes\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for in-fbsource builds\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# For shipit-transformed builds\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# package information\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 150+ tests in the root folder anyone? No? I didn't think so.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Mark BUILD_SHARED_LIBS as an \"advanced\" option, since enabling it\n\n# is generally discouraged.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check target architecture\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Find the required packages\n",
        "Line" : 96,
        "CharPositionInLine" : 20
      },
      "10" : {
        "Text" : "# We currently build the main libfolly library by finding all sources\n\n# and header files.  We then exclude specific files below.\n\n#\n\n# In the future it would perhaps be nicer to explicitly list the files we want\n\n# to include, and to move the source lists in to separate per-subdirectory\n\n# CMakeLists.txt files.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Exclude tests, benchmarks, and other standalone utility executables from the\n\n# library sources.  Test sources are listed separately below.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Explicitly include utility library code from inside\n\n# folly/test and folly/io/async/test/\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Exclude specific sources if we do not have third-party libraries\n\n# required to build them.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add the generated files to the correct source group.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Generate pkg-config variables from folly_deps before we add our own\n\n# build/install-time include directory generator expressions\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Compile folly such that it can be linked in to a shared library\n\n# required for linking to python extensions\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Test utilities exported for use by downstream projects\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Generate the folly-config.cmake file for installation so that\n\n# downstream projects that use on folly can easily depend on it in their CMake\n\n# files using \"find_package(folly CONFIG)\"\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Generate a pkg-config file so that downstream projects that don't use\n\n# CMake can depend on folly using pkg-config.\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The ThreadLocalTest code uses a helper shared library for one of its tests.\n\n# This can only be built if folly itself was built as a shared library.\n",
        "Line" : 416,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# TODO: CMake's gtest_add_tests() function currently chokes on\n\n# EnumerateTest.cpp since it uses macros to define tests.\n\n#TEST enumerate_test SOURCES EnumerateTest.cpp\n",
        "Line" : 494,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# FunctionSchedulerTest has a lot of timing-dependent checks,\n\n# and tends to fail on heavily loaded systems.\n",
        "Line" : 543,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "#TEST nested_command_line_app_test SOURCES NestedCommandLineAppTest.cpp\n\n#TEST program_options_test SOURCES ProgramOptionsTest.cpp\n\n# Depends on liburcu\n\n#TEST read_mostly_shared_ptr_test SOURCES ReadMostlySharedPtrTest.cpp\n\n#TEST ref_count_test SOURCES RefCountTest.cpp\n",
        "Line" : 549,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# MSVC bug can't resolve initializer_list constructor properly\n\n#TEST base_test SOURCES BaseTest.cpp\n",
        "Line" : 639,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# A number of tests in the async_test binary are unfortunately flaky.\n\n# When run under Travis CI a number of the tests also hang (it looks\n\n# like they do not get expected socket accept events, causing them\n\n# to never break out of their event loops).\n",
        "Line" : 662,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# This is disabled because it depends on things that don't exist\n\n# on Windows.\n\n#EventHandlerTest.cpp\n\n# The async signal handler is not supported on Windows.\n\n#AsyncSignalHandlerTest.cpp\n",
        "Line" : 680,
        "CharPositionInLine" : 10
      },
      "27" : {
        "Text" : "#TEST subprocess_test SOURCES SubprocessTest.cpp\n",
        "Line" : 750,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Open-source linux build can't handle running this.\n\n#TEST file_lock_test SOURCES FileLockTest.cpp\n",
        "Line" : 787,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# MSVC Preprocessor stringizing raw string literals bug\n\n#TEST json_test SOURCES JsonTest.cpp\n",
        "Line" : 806,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "#TEST poly_test SOURCES PolyTest.cpp\n",
        "Line" : 836,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Heavily dependent on drand and srand48\n\n#TEST shared_mutex_test SOURCES SharedMutexTest.cpp\n\n# SingletonTest requires Subprocess\n\n#TEST singleton_test SOURCES SingletonTest.cpp\n",
        "Line" : 844,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 32
    },
    "build/fbcode_builder/CMake/FindGMock.cmake" : {
      "ObjectId" : "7a785044a0c5f3b5251f8a90559ac04681d6c967",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find libgmock\n\n#\n\n#  LIBGMOCK_DEFINES     - List of defines when using libgmock.\n\n#  LIBGMOCK_INCLUDE_DIR - where to find gmock/gmock.h, etc.\n\n#  LIBGMOCK_LIBRARIES   - List of libraries when using libgmock.\n\n#  LIBGMOCK_FOUND       - True if libgmock found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Explicitly set to empty string if not found to avoid it being\n\n# set to NOTFOUND and breaking compilation\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The GTEST_LINKED_AS_SHARED_LIBRARY macro must be set properly on Windows.\n\n#\n\n# There isn't currently an easy way to determine if a library was compiled as\n\n# a shared library on Windows, so just assume we've been built against a\n\n# shared build of gmock for now.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBGMOCK_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "build/fbcode_builder/CMake/FindGflags.cmake" : {
      "ObjectId" : "246ceacdd091fed1a7850d6e3d4cff92c6f8383a",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# Find libgflags.\n\n# There's a lot of compatibility cruft going on in here, both\n\n# to deal with changes across the FB consumers of this and also\n\n# to deal with variances in behavior of cmake itself.\n\n#\n\n# Since this file is named FindGflags.cmake the cmake convention\n\n# is for the module to export both GFLAGS_FOUND and Gflags_FOUND.\n\n# The convention expected by consumers is that we export the\n\n# following variables, even though these do not match the cmake\n\n# conventions:\n\n#\n\n#  LIBGFLAGS_INCLUDE_DIR - where to find gflags/gflags.h, etc.\n\n#  LIBGFLAGS_LIBRARY     - List of libraries when using libgflags.\n\n#  LIBGFLAGS_FOUND       - True if libgflags found.\n\n#\n\n# We need to be able to locate gflags both from an installed\n\n# cmake config file and just from the raw headers and libs, so\n\n# test for the former and then the latter, and then stick\n\n# the results together and export them into the variables\n\n# listed above.\n\n#\n\n# For forwards compatibility, we export the following variables:\n\n#\n\n#  gflags_INCLUDE_DIR - where to find gflags/gflags.h, etc.\n\n#  gflags_TARGET / GFLAGS_TARGET / gflags_LIBRARIES\n\n#                     - List of libraries when using libgflags.\n\n#  gflags_FOUND       - True if libgflags found.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Re-export the config-specified libs with our local names\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# cmake module compat\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBGFLAGS_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# cmake module compat\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# compat with some existing FindGflags consumers\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Compat with the gflags CONFIG based detection\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Compat with the gflags CONFIG based detection\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "build/fbcode_builder/CMake/FindGlog.cmake" : {
      "ObjectId" : "a589b2e37d31af883b59096005474a4e01416833",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# - Try to find Glog\n\n# Once done, this will define\n\n#\n\n# GLOG_FOUND - system has Glog\n\n# GLOG_INCLUDE_DIRS - the Glog include directories\n\n# GLOG_LIBRARIES - link these to use Glog\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/fbcode_builder/CMake/FindLibEvent.cmake" : {
      "ObjectId" : "dd11ebd8435d7d475d78855d2baa2e2009299ea4",
      "LastModified" : "2019-04-08T18:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# - Find LibEvent (a cross event library)\n\n# This module defines\n\n# LIBEVENT_INCLUDE_DIR, where to find LibEvent headers\n\n# LIBEVENT_LIB, LibEvent libraries\n\n# LibEvent_FOUND, If false, do not try to use libevent\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Re-export the config under our own names\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Somewhat gross, but some vcpkg installed libevents have a relative\n\n# `include` path exported into LIBEVENT_INCLUDE_DIRS, which triggers\n\n# a cmake error because it resolves to the `include` dir within the\n\n# folly repo, which is not something cmake allows to be in the\n\n# INTERFACE_INCLUDE_DIRECTORIES.  Thankfully on such a system the\n\n# actual include directory is already part of the global include\n\n# directories, so we can just skip it.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Unfortunately, with a bare target name `event`, downstream consumers\n\n# of the package that depends on `Libevent` located via CONFIG end\n\n# up exporting just a bare `event` in their libraries.  This is problematic\n\n# because this in interpreted as just `-levent` with no library path.\n\n# When libevent is not installed in the default installation prefix\n\n# this results in linker errors.\n\n# To resolve this, we ask cmake to lookup the full path to the library\n\n# and use that instead.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Allow reading the LOCATION property\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "build/fbcode_builder/CMake/FindPCRE.cmake" : {
      "ObjectId" : "32ccb372536f92a3b983baf2f8b4641823a19ea4",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/fbcode_builder/CMake/ThriftCppLibrary.cmake" : {
      "ObjectId" : "2613e888a4f36da9b37aa006dad6e8d2187f3c96",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# NOTE: If you change this file, fbcode/fboss/github/ThriftCppLibrary.cmake also\n\n# needs to be changed.  TODO: this should be handled via shipit.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 3.12 is finally getting a list(JOIN) function, but until then\n\n# treating the list as a string and replacing the semicolons is good enough.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Compute the list of generated files\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Emit the rule to run the thrift compiler\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Now emit the library rule to compile the sources\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "folly/CMakeLists.txt" : {
      "ObjectId" : "9dc843217125fb6eedd9a1527f5495b394011691",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create tree of symbolic links in structure required for successful\n\n# compliation by Cython.\n\n#   - must be in path named same as extension\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Tell setup.py where to find includes and libfolly_pic.a\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Install Folly Python Bindings\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "folly/docs/Makefile" : {
      "ObjectId" : "97be3da96c1b8d831cf43fadcf90b3073ca0eba7",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This needs pandoc 1.9 or later to work\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "folly/experimental/exception_tracer/CMakeLists.txt" : {
      "ObjectId" : "883931cc0e915ef211c7ee412fc72ba927dcbaf8",
      "LastModified" : "2019-04-02T15:10:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 24,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1368
}