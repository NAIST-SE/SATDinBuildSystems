{
  "Repository" : "77536937",
  "Revision" : "HEAD",
  "ObjectId" : "a04840488efe7dfda1f2aee6153179939ece48c8",
  "CommitTime" : "2019-04-08T11:53:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "19d216393e38322921232fc7ab9131d236428feb",
      "LastModified" : "2019-01-10T17:42:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Build type for AliceVision\")\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# GNUInstallDirs CMake module\n\n# - Define GNU standard installation directories\n\n# - Provides install directory variables as defined by the GNU Coding Standards.\n\n# ==============================================================================\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==============================================================================\n\n# Enable cmake UNIT TEST framework\n\n# ==============================================================================\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==============================================================================\n\n# Use CMake ExternalProject to build all dependencies\n\n# ==============================================================================\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add Geogram\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add Cuda\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# URL https://developer.nvidia.com/compute/cuda/9.2/Prod/local_installers/cuda_9.2.88_396.26_linux\n",
        "Line" : 139,
        "CharPositionInLine" : 7
      },
      "7" : {
        "Text" : "# Add Tbb\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add Eigen\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# URL http://faculty.cse.tamu.edu/davis/SuiteSparse/SuiteSparse-5.4.0.tar.gz  # requires gxx >= 4.9, centos 7 use gxx-4.8.5\n",
        "Line" : 235,
        "CharPositionInLine" : 7
      },
      "10" : {
        "Text" : "# Add ceres-solver: A Nonlinear Least Squares Minimizer\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add OpenEXR\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# URL https://github.com/openexr/openexr/archive/v2.2.1.tar.gz\n\n# The release 2.2.1 has troubles with C++17, which breaks compilation with recent compilers.\n\n# The problem has been fixed https://github.com/openexr/openexr/issues/235\n\n# but there is no release yet, so we use the development version.\n\n# GIT_REPOSITORY https://github.com/openexr/openexr\n\n# Use the latest commit with g++4.X compatibility\n\n# GIT_TAG 74b5c1dc2dfbdce74987a57f5e011dc711f9ca65\n\n# Finally use a custom version for a cmake fix\n\n# GIT_REPOSITORY https://github.com/alicevision/openexr\n\n# GIT_TAG develop_compatibility_gxx4\n\n# GIT_REPOSITORY https://github.com/openexr/openexr\n\n# GIT_TAG a12937f6d7650d4fb81b469900ee2fd4c082c208\n",
        "Line" : 271,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Add LibTiff\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add LibPng\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#    http://prdownloads.sourceforge.net/libpng/libpng-1.6.34.tar.gz\n\n#    https://sourceforge.net/projects/libpng/files/libpng16/1.6.34/libpng-1.6.34.tar.gz\n",
        "Line" : 319,
        "CharPositionInLine" : 7
      },
      "16" : {
        "Text" : "# CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> \n",
        "Line" : 328,
        "CharPositionInLine" : 7
      },
      "17" : {
        "Text" : "# Add turbojpeg\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add libraw\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Native libraw configure script doesn't work on centos 7 (autoconf 2.69)\n\n# CONFIGURE_COMMAND autoconf && ./configure --enable-jpeg --enable-openmp --disable-examples --prefix=<INSTALL_DIR>\n\n# Use cmake build system (not maintained by libraw devs)\n",
        "Line" : 380,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Add Boost\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#    http://sourceforge.net/projects/boost/files/boost/1.66.0/boost_1_66_0.tar.bz2\n\n#    https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.gz\n\n# GIT_REPOSITORY https://github.com/boostorg/boost.git\n\n# GIT_TAG boost-1.61.0\n",
        "Line" : 393,
        "CharPositionInLine" : 7
      },
      "22" : {
        "Text" : "# Add OpenImageIO\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO: openjpeg\n\n# -DOPENJPEG_INCLUDE_DIR=$OPENJPEG_INCLUDE_DIR/openjpeg-2.0 -DOPENJPEG_OPENJP2_LIBRARIES=$OPENJPEG_OPENJP2_LIBRARIES\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Add Alembic: I/O for Point Cloud and Cameras\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Add PopSift\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Install dependencies libraries\n",
        "Line" : 500,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Install dependencies build files\n",
        "Line" : 502,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Install AliceVision's build files\n",
        "Line" : 525,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# ==============================================================================\n\n# Standard cmake project without internal support for dependencies\n\n# ==============================================================================\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Add sources\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Bundle target (see src/cmake/MakeBundle.cmake)\n\n# Note: require that the install rule has been executed\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Include VCPKG installed dir for runtime dependencies lookup\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Script arguments:\n",
        "Line" : 561,
        "CharPositionInLine" : 20
      },
      "34" : {
        "Text" : "# Script:\n",
        "Line" : 565,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 35
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "7ea64f600ae19d42503f9f504ed34117d1f5d7c4",
      "LastModified" : "2019-01-17T14:39:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Guard against in-source builds\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Trilean option\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# C++11\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==============================================================================\n\n# AliceVision build options\n\n# ==============================================================================\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Since OpenCV 3, SIFT is no longer in the default modules. See\n\n# https://github.com/itseez/opencv_contrib for more informations.\n\n# Enable this to be able to use OpenCV SIFT in main_ComputeFeatures_OpenCV.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Default build is in Release mode\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ==============================================================================\n\n# GNUInstallDirs CMake module\n\n# - Define GNU standard installation directories\n\n# - Provides install directory variables as defined by the GNU Coding Standards.\n\n# ==============================================================================\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set build path\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Windows specific defines\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Folders\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# There was a bug in FindCUDA fixed in cmake 3.10 that creates empty strings on the nvcc command line.\n\n# The solution merged in cmake 3.10 use the command COMMAND_EXPAND_LISTS only available from cmake >= 3.8\n\n# https://gitlab.kitware.com/cmake/cmake/merge_requests/1008\n\n# So we use another solution compatible with cmake >= 3.4 proposed here:\n\n# https://gitlab.kitware.com/cmake/cmake/issues/16411\n\n# if cmake version < 3.10 use our hacked version of FindCUDA:\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set shared or static mode\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Export all symbols from the dynamic libraries by default (avoid dllexport markup)\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# ==============================================================================\n\n# MACRO utility\n\n# ==============================================================================\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# in case it's NOTFOUND\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# ==============================================================================\n\n# Check that submodule have been initialized and updated\n\n# ==============================================================================\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ==============================================================================\n\n# Additional cmake find modules\n\n# ==============================================================================\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This flag is useful as not returning from a non-void function is an error with MSVC\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# ==============================================================================\n\n# Check C++11 support\n\n# ==============================================================================\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ==============================================================================\n\n# Enable code coverage generation (only with GCC)\n\n# ==============================================================================\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ==============================================================================\n\n# OpenMP\n\n# ==============================================================================\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ON OR AUTO\n",
        "Line" : 209,
        "CharPositionInLine" : 7
      },
      "22" : {
        "Text" : "# for those using the clang with OpenMP support\n",
        "Line" : 228,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# ==============================================================================\n\n# Boost\n\n# ==============================================================================\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Disable BOOST autolink\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Force BOOST to use dynamic libraries (avoid link error with boost program_options)\n\n# https://lists.boost.org/boost-users/2009/11/54015.php\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Avoid link errors on boost filesystem copy_file function\n\n# http://stackoverflow.com/questions/35007134/c-boost-undefined-reference-to-boostfilesystemdetailcopy-file\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# ==============================================================================\n\n# OpenEXR\n\n# ==============================================================================\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ==============================================================================\n\n# OpenImageIO\n\n# ==============================================================================\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Add DL dependency on linux\n",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# ==============================================================================\n\n# Mosek (linear programming interface)\n\n# ==============================================================================\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Install RULES\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# ==============================================================================\n\n# Eigen\n\n# ==============================================================================\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# message(FATAL_ERROR \"EIGEN_INCLUDE_DIR: ${EIGEN_INCLUDE_DIR}\")\n",
        "Line" : 320,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# See https://eigen.tuxfamily.org/dox/group__TopicUnalignedArrayAssert.html\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# ==============================================================================\n\n# Ceres\n\n# ==============================================================================\n\n# - rely on Ceres_DIR\n\n# ==============================================================================\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Ceres export include dirs but doesn't export suitesparse lib dependencies in CeresConfig.cmake\n\n# So here is a workaround:\n",
        "Line" : 347,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# avoid 'ERROR' macro clashing on Windows \n",
        "Line" : 358,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# ==============================================================================\n\n# Flann\n\n# ==============================================================================\n\n# - internal by default (flann),\n\n# - external if FLANN_INCLUDE_DIR_HINTS and a valid Flann setup is found\n\n# ==============================================================================\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# ==============================================================================\n\n# CoinUtils\n\n# ==============================================================================\n\n# - internal by default (CoinUtils),\n\n# - external if COINUTILS_INCLUDE_DIR_HINTS and a valid CoinUtils setup is found\n\n# ==============================================================================\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "## ==============================================================================\n\n## Clp\n\n## ==============================================================================\n\n## - internal by default (Clp),\n\n## - external if CLP_INCLUDE_DIR_HINTS and a valid Clp setup is found\n\n## ==============================================================================\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# ==============================================================================\n\n# Osi\n\n# ==============================================================================\n\n# - internal by default (Osi),\n\n# - external if OSI_INCLUDE_DIR_HINTS and a valid Osi setup is found\n\n# ==============================================================================\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# ==============================================================================\n\n# Internal CLP/OSI/COINUTILS libraries\n\n# ==============================================================================\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# ==============================================================================\n\n# Lemon\n\n# ==============================================================================\n\n# - internal by default (Lemon),\n\n# - external if LEMON_INCLUDE_DIR_HINTS and a valid Lemon setup is found\n\n# ==============================================================================\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# ==============================================================================\n\n# OpenCV\n\n# ==============================================================================\n\n# - optional, only external and enabled only if ALICEVISION_USE_OPENCV is ON\n\n# ==============================================================================\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# add a definition that allows the conditional compiling\n",
        "Line" : 496,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# ==============================================================================\n\n# Alembic\n\n# ==============================================================================\n\n# - optional, it allows to use the classes to export data in alembic format\n\n# ==============================================================================\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# or ALICEVISION_BUILD_MVS\n",
        "Line" : 510,
        "CharPositionInLine" : 26
      },
      "48" : {
        "Text" : "# There is a missing include dependency in Alembic cmake export.\n",
        "Line" : 517,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# ==============================================================================\n\n# CCTag\n\n# ==============================================================================\n\n# - optional, only external and enabled only if ALICEVISION_USE_CCTAG is ON\n\n# ==============================================================================\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# ==============================================================================\n\n# PopSift\n\n# ==============================================================================\n\n# - optional, only external and enabled only if ALICEVISION_USE_POPSIFT is ON\n\n# ==============================================================================\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# ==============================================================================\n\n# OpenGV\n\n# ==============================================================================\n\n# - optional, it allows to use the generic camera PnP algorithms for rig localization\n\n# ==============================================================================\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# ==============================================================================\n\n# UncertaintyTE\n\n# ==============================================================================\n\n# - optional, only external and enabled only if ALICEVISION_USE_UNCERTAINTYTE is ON\n\n# ==============================================================================\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# ==============================================================================\n\n# ZLIB\n\n# ==============================================================================\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# ==============================================================================\n\n# GEOGRAM\n\n# ==============================================================================\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# ==============================================================================\n\n# MeshSDFilter\n\n# ==============================================================================\n\n# - optional, only internal and enabled only if ALICEVISION_USE_MESHSDFILTER is ON\n\n# ==============================================================================\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# ==============================================================================\n\n# CUDA\n\n# ==============================================================================\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Need to declare CUDA_USE_STATIC_CUDA_RUNTIME as an option to ensure that it is not overwritten in FindCUDA.\n",
        "Line" : 662,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Workaround to force deactivation of cuda static runtime for cmake < 3.10\n",
        "Line" : 665,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Add all requested CUDA CCs to the command line for offline compilation\n",
        "Line" : 708,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Use the highest request CUDA CC for CUDA JIT compilation\n",
        "Line" : 714,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# cuda >= 7.0\n",
        "Line" : 721,
        "CharPositionInLine" : 40
      },
      "62" : {
        "Text" : "# default stream legacy implies that the 0 stream synchronizes all streams\n",
        "Line" : 725,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# default stream per-thread implies that each host thread has one non-synchronizing 0-stream\n\n# set(CUDA_NVCC_FLAGS         \"${CUDA_NVCC_FLAGS};--default-stream;per-thread\")\n\n# print local memory usage per kernel: -Xptxas;-v\n\n# CUDA >= 7.5: -Xptxas;--warn-on-local-memory-usage;-Xptxas;--warn-on-spills\n",
        "Line" : 727,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# cuda >= 7.5\n",
        "Line" : 732,
        "CharPositionInLine" : 40
      },
      "65" : {
        "Text" : "# library required for CUDA dynamic parallelism, forgotten by CMake 3.4\n",
        "Line" : 744,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# If user activates NVTX profiling, add library and flags\n",
        "Line" : 747,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# ==============================================================================\n\n# Documentation\n\n# --------------------------\n\n# Sphinx detection\n\n# ==============================================================================\n",
        "Line" : 757,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# ==============================================================================\n\n# Include directories\n\n# ==============================================================================\n\n# set the directory where all the generated files (config etc) will be placed\n\n# ==============================================================================\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# contains the \"root\" directory from which including all headers\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# ==============================================================================\n\n# AliceVision version\n\n# ==============================================================================\n",
        "Line" : 825,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# ==============================================================================\n\n# Information print\n\n# ==============================================================================\n",
        "Line" : 838,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# ==============================================================================\n\n# AliceVision CMake Helpers\n\n# ==============================================================================\n",
        "Line" : 900,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# ==============================================================================\n\n# Internal libraries dependencies\n\n# ==============================================================================\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# ==============================================================================\n\n# AliceVision modules\n\n# ==============================================================================\n",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# software(s) under patent or commercial licence\n\n# Included for research purpose only\n",
        "Line" : 914,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# The aliceVision library itself\n",
        "Line" : 920,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# aliceVision tutorial examples\n",
        "Line" : 923,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Complete software(s) build on aliceVision libraries\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# ==============================================================================\n\n# Install rules\n\n# ==============================================================================\n",
        "Line" : 932,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "#Adapt build include paths to install path\n",
        "Line" : 939,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Create a AliceVisionConfig.cmake file. <name>Config.cmake files are searched by\n\n# find_package() automatically. We configure that file so that we can put any\n\n# information we want in it, e.g. version numbers, include directories, etc.\n",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# create the config.hpp file containing all the preprocessor definitions\n",
        "Line" : 968,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Add uninstall target\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 84
    },
    "src/aliceVision/CMakeLists.txt" : {
      "ObjectId" : "59a4b2d9e8bdaf986c3dda810b9dede9e93f2569",
      "LastModified" : "2019-01-17T14:39:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common modules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SfM modules\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MVS modules\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install rules\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add files to an empty target to get them in IDE\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/aliceVision/calibration/CMakeLists.txt" : {
      "ObjectId" : "032b61bd9b31e25702b5cd13b0e6601fc309bab8",
      "LastModified" : "2018-07-10T09:34:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/camera/CMakeLists.txt" : {
      "ObjectId" : "fea13302130d1ffda234e94f6737bb117ca40351",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit tests\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/colorHarmonization/CMakeLists.txt" : {
      "ObjectId" : "c1cbe6cd4f04e753884123e37f772da4038c8143",
      "LastModified" : "2018-07-10T13:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/dataio/CMakeLists.txt" : {
      "ObjectId" : "86e7255c8968a51c8f4d240237f1e77fe037da3c",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/depthMap/CMakeLists.txt" : {
      "ObjectId" : "7a7aebb9c8c005e79c9ef2135e6b8794461697ea",
      "LastModified" : "2019-03-28T14:04:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cuda Headers\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Headers\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# deviceCommon\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# planeSweeping\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Cuda Sources\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#TODO shouldn't be here, but required to build on some machines\n",
        "Line" : 74,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 8
    },
    "src/aliceVision/feature/CMakeLists.txt" : {
      "ObjectId" : "45a61a0ebbfeb4442fe823142be646506f745982",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CCTAG ImageDescriber\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# PopSIFT ImageDescriber\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# OpenCV ImageDescriber\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Link CCTAG library\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link PopSIFT library\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link OpenCV library\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Unit tests\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/aliceVision/fuseCut/CMakeLists.txt" : {
      "ObjectId" : "38e5b6798174c32c242e7b63ad0092277370303c",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/geometry/CMakeLists.txt" : {
      "ObjectId" : "762a3de543c9aed2b505e9bb28b6183c51271034",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PRIVATE_LINKS\n\n# TODO: fix cross-dependency\n\n# aliceVision_robustEstimation\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Unit tests\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/aliceVision/gpu/CMakeLists.txt" : {
      "ObjectId" : "5f83bb8a953a6889bedf052da15a5dcd794e7932",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/graph/CMakeLists.txt" : {
      "ObjectId" : "01b555afc4db08d7a176a4b460c2f75c9ee1d40e",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/image/CMakeLists.txt" : {
      "ObjectId" : "6f0c6062d6124b61b922277c1fcc71476c3ce173",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/imageIO/CMakeLists.txt" : {
      "ObjectId" : "d74885a72933d54ceea7f1445630c718e5a274e4",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/keyframe/CMakeLists.txt" : {
      "ObjectId" : "998ea99aca51f6a188e60a9f7427eb73277b194b",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/lightingEstimation/CMakeLists.txt" : {
      "ObjectId" : "1b48a00de6c61012e04585010b9f18d4c4497c3c",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/linearProgramming/CMakeLists.txt" : {
      "ObjectId" : "9496d9fd408e531e3ee26e9966980696dbf5a18b",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clp + solver wrapper\n\n# container tools\n\n# generic LP\n",
        "Line" : 13,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# Add MOSEK related sources\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# OSI solver wrapper for the Mosek backend\n\n# Mosek lib\n",
        "Line" : 31,
        "CharPositionInLine" : 20
      },
      "5" : {
        "Text" : "# Unit tests\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# lInfinityCV library\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/aliceVision/linearProgramming/lInfinityCV/CMakeLists.txt" : {
      "ObjectId" : "4ecf49369b6167126e59e92ad3c66fe8ed4722d0",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disable some warnings on MSVC.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disable Warning\tC4267: conversion from 'size_t' to 'int', possible loss of data\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Unit tests\n\n# Linfinity Triangulation\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Linfinity Pose/Resection estimation\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Linfinity Global translations from triplets of heading directions\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Linfinity Global translations from heading directions\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Linfinity Translation and Structure \n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Linfinity Translation and Structure with noise handling\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/aliceVision/localization/CMakeLists.txt" : {
      "ObjectId" : "c5685819a20f39308e5d2d146e4c7b963e141ca2",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/matching/CMakeLists.txt" : {
      "ObjectId" : "33b4dd2e3bf4c438eedee3e637a7a30406f53aac",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/matching/kvld/CMakeLists.txt" : {
      "ObjectId" : "bd362a5b7665684d9cb87a8bdabf29ab49b016f2",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/matchingImageCollection/CMakeLists.txt" : {
      "ObjectId" : "bf93cd0cb9636df67f40e20ed9ab178b71a0e0b8",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/mesh/CMakeLists.txt" : {
      "ObjectId" : "2697ea9b6caf3b87251d543e7912f5065b1efbbc",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/multiview/CMakeLists.txt" : {
      "ObjectId" : "a1e340401f6eb0ea1d6840440adfed0ba8760dac",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test Data Sources\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Unit tests\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/aliceVision/multiview/resection/CMakeLists.txt" : {
      "ObjectId" : "cbed2d947ab34f1788c9406354feca944ac50d7d",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/aliceVision/multiview/rotationAveraging/CMakeLists.txt" : {
      "ObjectId" : "ea1a82fc6d7b801845cc96bf4a8ebb7a5a107ee8",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/aliceVision/multiview/translationAveraging/CMakeLists.txt" : {
      "ObjectId" : "d3d1e2549f927259df28b6dac6db4615414498ba",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/aliceVision/multiview/triangulation/CMakeLists.txt" : {
      "ObjectId" : "6f0fd5fe3e628b9485e004855a5b72483a8bab0c",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/aliceVision/mvsData/CMakeLists.txt" : {
      "ObjectId" : "441fbc77683a0fbf172c03b8df651a3f08a3b163",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/mvsUtils/CMakeLists.txt" : {
      "ObjectId" : "9ad0c58eca2fc356e6577619b3078881ff24c1f3",
      "LastModified" : "2019-03-28T14:04:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/numeric/CMakeLists.txt" : {
      "ObjectId" : "2b83c4f93e944dc142780ff9d6a5e93ac4044142",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/rig/CMakeLists.txt" : {
      "ObjectId" : "fa57387801af5136135a5410aad1c818fcac36ae",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/robustEstimation/CMakeLists.txt" : {
      "ObjectId" : "1104c431fe5fa389d131244c18198bfa5b2a5dfe",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit tests\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# alicevision_add_test(leastMedianOfSquares_test.cpp NAME \"robustEstimation_leastMedianOfSquares\" LINKS aliceVision_robustEstimation)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/sensorDB/CMakeLists.txt" : {
      "ObjectId" : "ea44c1e209b13dc6f5471e5dad696ee6631b0c3a",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install DB\r\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Unit tests\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/aliceVision/sfm/CMakeLists.txt" : {
      "ObjectId" : "5edb444e4955a9e4b89141712ce989137261a9ba",
      "LastModified" : "2019-03-28T14:04:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/sfm/pipeline/CMakeLists.txt" : {
      "ObjectId" : "c16e3d9c97c691ac3cb6c9d806c3f3d446b589a5",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/aliceVision/sfm/pipeline/global/CMakeLists.txt" : {
      "ObjectId" : "318a284d6d756fc7bbe158ffd91e7a31a260c500",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/aliceVision/sfm/pipeline/sequential/CMakeLists.txt" : {
      "ObjectId" : "85d7c17fd1ca674c351f95dc932d893f1c85351b",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/aliceVision/sfmData/CMakeLists.txt" : {
      "ObjectId" : "1c2f45d8c3a0a5f000a0502688df7ec7127fbe57",
      "LastModified" : "2019-03-28T14:04:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/sfmDataIO/CMakeLists.txt" : {
      "ObjectId" : "064b11b4608713c11ff39c3ffb23f95cbfe87323",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# There is a missing include dependency in Alembic cmake export.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Unit tests\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/aliceVision/stl/CMakeLists.txt" : {
      "ObjectId" : "66db9f4aa1f7e745d2de4f2cbba9b0d36b155072",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# target_sources(aliceVision_stl INTERFACE ${stl_files_headers}) # TODO\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/system/CMakeLists.txt" : {
      "ObjectId" : "9a80eed016374d5478d6f2c58bacd751cf35370f",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/aliceVision/track/CMakeLists.txt" : {
      "ObjectId" : "82f95acbd47a24a258ee14d7db0fa0604aa68777",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/aliceVision/voctree/CMakeLists.txt" : {
      "ObjectId" : "31d49797336b734e49b7032fb0df9326e1002122",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unit tests\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cmake/AddCompilerFlag.cmake" : {
      "ObjectId" : "f1e2ebec36c2d673ae924c29be3ea496c8698142",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#overload the ARGC configuration of _c_flags and _cxx_flags variables\n",
        "Line" : 40,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 1
    },
    "src/cmake/CXX11.cmake" : {
      "ObjectId" : "dbdbed067d4f49a9529c91e74ea9c017329b9ad6",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# note: CMAKE_CXX_COMPILER_ID could be \"Clang\" or \"AppleClang\"\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determines whether or not the compiler supports C++11\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC 1800: VS 12\n",
        "Line" : 11,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : "# Sets the appropriate flag to enable C++11 support\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake/CheckCCompilerFlag.cmake" : {
      "ObjectId" : "1df1418222b7956c9463dd92d6f418766a50afd9",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the C compiler supports a given flag.\n\n# CHECK_C_COMPILER_FLAG(<flag> <var>)\n\n#  <flag> - the compiler flag\n\n#  <var>  - variable to store the result\n\n# This internally calls the check_c_source_compiles macro.\n\n# See help for CheckCSourceCompiles for a listing of variables\n\n# that can modify the build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some compilers do not fail with a bad flag\n",
        "Line" : 30,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# GNU\n\n# clang\n\n# GNU\n\n# GNU\n\n# MSVC\n\n# HP\n\n# SunPro\n\n# XL\n\n# Open64\n\n# ICC\n",
        "Line" : 31,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 4
    },
    "src/cmake/CheckCXXCompilerFlag.cmake" : {
      "ObjectId" : "23e905f844f1c1a87de0d2181c3a31bacab9b65a",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the CXX compiler supports a given flag.\n\n# CHECK_CXX_COMPILER_FLAG(<flag> <var>)\n\n#  <flag> - the compiler flag\n\n#  <var>  - variable to store the result\n\n# This internally calls the check_cxx_source_compiles macro.  See help\n\n# for CheckCXXSourceCompiles for a listing of variables that can\n\n# modify the build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\n\n# Copyright 2011 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some compilers do not fail with a bad flag\n",
        "Line" : 30,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# GNU\n\n# clang\n\n# GNU\n\n# GNU\n\n# MSVC\n\n# HP\n\n# SunPro\n\n# XL\n\n# Open64\n\n# ICC\n",
        "Line" : 31,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 4
    },
    "src/cmake/FindClp.cmake" : {
      "ObjectId" : "91707625e5e34e0bb4aa56c5458eb8350ca6f745",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n#                  Find Clp Library\n\n#----------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##====================================================\n\n## Include CLP library\n\n##----------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Extract Clp version from ClpConfig.h\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Extract Clp version from alternative config_clp_default.h\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# locate Clp libraries\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "##====================================================\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/cmake/FindCoinUtils.cmake" : {
      "ObjectId" : "6792a45844ac625284dd28efe2948e6347a71ea2",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n#                  Find CoinUtils Library\n\n#----------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##====================================================\n\n## Include COINUTILS library\n\n##----------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Extract CoinUtils version from CoinUtilsConfig.h\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Extract CoinUtils version from alternative config_coinutils_default.h\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# locate CoinUtils libraries\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "##====================================================\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/cmake/FindFlann.cmake" : {
      "ObjectId" : "91f1fea92fca4ecefc769c74437d9ef2ffeefdc0",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n#                  Find Flann Library\n\n#----------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##====================================================\n\n## Include FLANN library\n\n##----------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Extract Flann version from config.h\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# locate Flann libraries\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "##====================================================\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/cmake/FindGeogram.cmake" : {
      "ObjectId" : "e265570659474417cdc12366952eae64d2f19b2e",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Geogram\n\n# ------------\n\n#\n\n# Find Geogram include dirs and libraries\n\n#\n\n# This module defines the following variables:\n\n#\n\n#   Geogram_FOUND        - True if geogram has been found.\n\n#   Geogram::geogram     - Imported target for the main Geogram library.\n\n#   Geogram::geogram_gfx - Imported target for Geogram graphics library.\n\n#\n\n# This module reads hints about the Geogram location from the following\n\n# environment variables:\n\n#\n\n#   GEOGRAM_INSTALL_PREFIX - Directory where Geogram is installed.\n\n#\n\n# Authors: Jeremie Dumas\n\n#          Pierre Moulon\n\n#          Bruno Levy\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This one we search in both Geogram search path and\n\n# system search path since it may be already installed\n\n# in the system\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create an imported target for Geogram \n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Interface include directory\n",
        "Line" : 74,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# Link to library file\n",
        "Line" : 79,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# Interface include directory\n",
        "Line" : 93,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# Link to library file\n",
        "Line" : 98,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# Hide variables from the default CMake-Gui options\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/cmake/FindLemon.cmake" : {
      "ObjectId" : "c58723c9269e0609d7900872e40a6f27a60032b9",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n#                  Find Lemon Library\n\n#----------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##====================================================\n\n## Include LEMON library\n\n##----------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove /lemon from path (math.h cannot be exposed all time)\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Extract Lemon version from config.h\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# locate Lemon libraries\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "##====================================================\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/cmake/FindMAGMA.cmake" : {
      "ObjectId" : "3f5fc72d04cc9767dd928cc2f322c7ffd47791dc",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the MAGMA library\n\n#\n\n# Usage:\n\n#   find_package(MAGMA [REQUIRED] [QUIET] )\n\n#\n\n# It sets the following variables:\n\n#   MAGMA_FOUND               ... true if magma is found on the system\n\n#   MAGMA_LIBRARY_DIRS        ... full path to magma library\n\n#   MAGMA_INCLUDE_DIRS        ... magma include directory\n\n#   MAGMA_LIBRARIES           ... magma libraries\n\n#\n\n# The following variables will be checked by the function\n\n#   MAGMA_USE_STATIC_LIBS     ... if true, only static libraries are found\n\n#   MAGMA_ROOT                ... if set, the libraries are exclusively searched\n\n#                                 under this path\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#If environment variable MAGMA_ROOT is specified, it has same effect as MAGMA_ROOT\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set library directories\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# set include directories\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# set libraries\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "src/cmake/FindMosek.cmake" : {
      "ObjectId" : "efcb095c55ee218dd26bf908e477a4a6ccd811b2",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MOSEK library detection\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  INCLUDE_DIRECTORIES( ${MOSEK_INCLUDE} )\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  ADD_DEFINITIONS(-DALICEVISION_HAVE_MOSEK)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cmake/FindOpenEXR.cmake" : {
      "ObjectId" : "9a49580206d9c1ad911739f021abec73414990c1",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module to find OpenEXR.\n\n#\n\n# This module will set\n\n#   OPENEXR_FOUND          true, if found\n\n#   OPENEXR_INCLUDE_DIR    directory where headers are found\n\n#   OPENEXR_LIBRARIES      libraries for OpenEXR + IlmBase\n\n#   ILMBASE_LIBRARIES      libraries just IlmBase\n\n#   OPENEXR_VERSION        OpenEXR version (accurate for >= 2.0.0,\n\n#                              otherwise will just guess 1.6.1)\n\n#\n\n# Special inputs:\n\n#   OPENEXR_CUSTOM_INCLUDE_DIR - custom location of headers\n\n#   OPENEXR_CUSTOM_LIB_DIR - custom location of libraries\n\n#   OPENEXR_CUSTOM_LIB_PREFIX - special snowflake library prefix\n\n#   OPENEXR_CUSTOM_LIB_SUFFIX - special snowflake library suffix\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Other standard issue macros\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link with pthreads if required\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List of likely places to find the headers -- note priority override of\n\n# OPENEXR_CUSTOM_INCLUDE_DIR and ${OPENEXR_HOME}/include.\n\n# ILMBASE is needed in case ilmbase an openexr are installed in separate\n\n# directories, like NixOS does\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    /usr/local/include\n\n#    /usr/include\n\n#    /usr/include/${CMAKE_LIBRARY_ARCHITECTURE}\n\n#    /sw/include\n\n#    /opt/local/include\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the include file locations. We call find_path twice -- first using\n\n# only the custom paths, then if that fails, try the default paths only.\n\n# This seems to be the most robust way I can find to not get confused when\n\n# both system and custom libraries are present.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#find_path (ILMBASE_INCLUDE_PATH OpenEXR/IlmBaseConfig.h)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#find_path (OPENEXR_INCLUDE_PATH OpenEXR/OpenEXRConfig.h)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# message(WARNING \"GENERIC_INCLUDE_PATHS: ${GENERIC_INCLUDE_PATHS}\")\n\n# message(WARNING \"Test if file exist: ${OPENEXR_INCLUDE_PATH}/OpenEXR/ImfMultiPartInputFile.h\")\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Try to figure out version number\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# message(WARNING \"Yes, file exist\")\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Must be at least 2.0\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Assume an old one, predates 2.x that had versions\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# List of likely places to find the libraries -- note priority override of\n\n# OPENEXR_CUSTOM_LIB_DIR and ${OPENEXR_HOME}/lib.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If there's no OPENEXR_HOME or ILMBASE_HOME, then the path will point to\n\n# \"/lib\", which may not always be wanted/expected.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Handle request for static libs by altering CMAKE_FIND_LIBRARY_SUFFIXES.\n\n# We will restore it at the end of this file.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Look for the libraries themselves, for all the components. Like with the\n\n# headers, we do two finds -- first for custom locations, then for default.\n\n# This is complicated because the OpenEXR libraries may or may not be\n\n# built with version numbers embedded.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# First try with the version embedded\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Again, with no directory restrictions\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Try again without the version\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# One more time, with no restrictions\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#Half usually has no suffix\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Set the FOUND, INCLUDE_DIR, and LIBRARIES variables.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Restore the original CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "src/cmake/FindOpenGV.cmake" : {
      "ObjectId" : "29e8e7006b02df509ac07593152912586fc73c37",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the openGV libraries.\n\n#\n\n# Defines the following variables:\n\n#\n\n#   OPENGV_FOUND        - TRUE if the openGV headers and libs are found\n\n#   OPENGV_INCLUDE_DIRS - The path to openGV headers\n\n#\n\n#   OPENGV_LIBRARY      - The opengv library\n\n#   OPENGV_LIBRARY_DIR  - The directory where the libraries are located\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   OPENGV_DIR - (as a CMake or environment variable)\n\n#                The root directory of the openGV install prefix\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this is to make the find_package_handle_standard_args  fail\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENGV_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cmake/FindOpenImageIO.cmake" : {
      "ObjectId" : "0dd3ca775fef527f24a6feaccdb710f48666ca48",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Called if we failed to find OpenImageIO or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make results of search visible in the CMake GUI if OpenImageIO has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Handle possible presence of lib prefix for libraries on MSVC, see\n\n# also OPENIMAGEIO_RESET_FIND_LIBRARY_PREFIX().\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Preserve the caller's original values for CMAKE_FIND_LIBRARY_PREFIXES\n\n# s/t we can set it back before returning.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# The empty string in this list is important, it represents the case when\n\n# the libraries have no prefix (shared libraries / DLLs).\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Mac OS X\n",
        "Line" : 51,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 52,
        "CharPositionInLine" : 35
      },
      "10" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 66,
        "CharPositionInLine" : 26
      },
      "12" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#${OPENIMAGEIO_CHECK_INCLUDE_DIRS}\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# ${OPENIMAGEIO_CHECK_LIBRARY_DIRS}\n",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Mark internally as found, then verify. OPENIMAGEIO_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# OpenImageIO does not seem to provide any record of the version in its\n\n# source tree, thus cannot extract version.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Catch case when caller has set OPENIMAGEIO_INCLUDE_DIR in the cache / GUI and\n\n# thus FIND_[PATH/LIBRARY] are not called, but specified locations are\n\n# invalid, otherwise we would report the library as found.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Only mark internal variables as advanced if we found OpenImageIO, otherwise\n\n# leave them visible in the standard GUI for the user to set manually.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "src/cmake/FindOsi.cmake" : {
      "ObjectId" : "318f917d7d3c4303eb2283712146eeaf42460881",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n#                  Find Osi Library\n\n#----------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##====================================================\n\n## Include OSI library\n\n##----------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Extract Osi version from OsiConfig.h\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Extract Osi version from alternative config_osi_default.h\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# locate Osi libraries\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "##====================================================\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/cmake/FindSSE.cmake" : {
      "ObjectId" : "6ece876896810dd6823f40c84cfdf8ebe1206466",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if SSE instructions are available on the machine where \n\n# the project is compiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# /proc/cpuinfo apparently omits sse3 :(\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# TODO\n",
        "Line" : 79,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "src/cmake/FindSphinx.cmake" : {
      "ObjectId" : "c015a4e25ebb022df3b198b4358810b3c52c5783",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/FindSuiteSparse.cmake" : {
      "ObjectId" : "ede687ab10f7b7ca55a06e9e41e97202f52ded82",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2015 Google Inc. All rights reserved.\n\n# http://ceres-solver.org/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindSuiteSparse.cmake - Find SuiteSparse libraries & dependencies.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# SUITESPARSE_FOUND: TRUE iff SuiteSparse and all dependencies have been found.\n\n# SUITESPARSE_INCLUDE_DIRS: Include directories for all SuiteSparse components.\n\n# SUITESPARSE_LIBRARIES: Libraries for all SuiteSparse component libraries and\n\n#                        dependencies.\n\n# SUITESPARSE_VERSION: Extracted from UFconfig.h (<= v3) or\n\n#                      SuiteSparse_config.h (>= v4).\n\n# SUITESPARSE_MAIN_VERSION: Equal to 4 if SUITESPARSE_VERSION = 4.2.1\n\n# SUITESPARSE_SUB_VERSION: Equal to 2 if SUITESPARSE_VERSION = 4.2.1\n\n# SUITESPARSE_SUBSUB_VERSION: Equal to 1 if SUITESPARSE_VERSION = 4.2.1\n\n#\n\n# SUITESPARSE_IS_BROKEN_SHARED_LINKING_UBUNTU_SYSTEM_VERSION: TRUE iff running\n\n#     on Ubuntu, SUITESPARSE_VERSION is 3.4.0 and found SuiteSparse is a system\n\n#     install, in which case found version of SuiteSparse cannot be used to link\n\n#     a shared library due to a bug (static linking is unaffected).\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# SUITESPARSE_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                                search for SuiteSparse includes,\n\n#                                e.g: /timbuktu/include.\n\n# SUITESPARSE_LIBRARY_DIR_HINTS: List of additional directories in which to\n\n#                                search for SuiteSparse libraries,\n\n#                                e.g: /timbuktu/lib.\n\n#\n\n# The following variables define the presence / includes & libraries for the\n\n# SuiteSparse components searched for, the SUITESPARSE_XX variables are the\n\n# union of the variables for all components.\n\n#\n\n# == Symmetric Approximate Minimum Degree (AMD)\n\n# AMD_FOUND\n\n# AMD_INCLUDE_DIR\n\n# AMD_LIBRARY\n\n#\n\n# == Constrained Approximate Minimum Degree (CAMD)\n\n# CAMD_FOUND\n\n# CAMD_INCLUDE_DIR\n\n# CAMD_LIBRARY\n\n#\n\n# == Column Approximate Minimum Degree (COLAMD)\n\n# COLAMD_FOUND\n\n# COLAMD_INCLUDE_DIR\n\n# COLAMD_LIBRARY\n\n#\n\n# Constrained Column Approximate Minimum Degree (CCOLAMD)\n\n# CCOLAMD_FOUND\n\n# CCOLAMD_INCLUDE_DIR\n\n# CCOLAMD_LIBRARY\n\n#\n\n# == Sparse Supernodal Cholesky Factorization and Update/Downdate (CHOLMOD)\n\n# CHOLMOD_FOUND\n\n# CHOLMOD_INCLUDE_DIR\n\n# CHOLMOD_LIBRARY\n\n#\n\n# == Multifrontal Sparse QR (SuiteSparseQR)\n\n# SUITESPARSEQR_FOUND\n\n# SUITESPARSEQR_INCLUDE_DIR\n\n# SUITESPARSEQR_LIBRARY\n\n#\n\n# == Common configuration for all but CSparse (SuiteSparse version >= 4).\n\n# SUITESPARSE_CONFIG_FOUND\n\n# SUITESPARSE_CONFIG_INCLUDE_DIR\n\n# SUITESPARSE_CONFIG_LIBRARY\n\n#\n\n# == Common configuration for all but CSparse (SuiteSparse version < 4).\n\n# UFCONFIG_FOUND\n\n# UFCONFIG_INCLUDE_DIR\n\n#\n\n# Optional SuiteSparse Dependencies:\n\n#\n\n# == Serial Graph Partitioning and Fill-reducing Matrix Ordering (METIS)\n\n# METIS_FOUND\n\n# METIS_LIBRARY\n\n#\n\n# == Intel Thread Building Blocks (TBB)\n\n# TBB_FOUND\n\n# TBB_LIBRARY\n\n# TBB_MALLOC_FOUND\n\n# TBB_MALLOC_LIBRARY\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reset CALLERS_CMAKE_FIND_LIBRARY_PREFIXES to its value when\n\n# FindSuiteSparse was invoked.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Called if we failed to find SuiteSparse or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Do NOT unset SUITESPARSE_FOUND_REQUIRED_VARS here, as it is used by\n\n# FindPackageHandleStandardArgs() to generate the automatic error message on\n\n# failure which highlights which components are missing.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Do not call return(), s/t we keep processing if not called with REQUIRED\n\n# and report all missing components, rather than bailing after failing to find\n\n# the first.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Protect against any alternative find_package scripts for this library having\n\n# been called previously (in a client project) which set SUITESPARSE_FOUND, but\n\n# not the other variables we require / set here which could cause the search\n\n# logic here to fail.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Handle possible presence of lib prefix for libraries on MSVC, see\n\n# also SUITESPARSE_RESET_FIND_LIBRARY_PREFIX().\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Preserve the caller's original values for CMAKE_FIND_LIBRARY_PREFIXES\n\n# s/t we can set it back before returning.\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# The empty string in this list is important, it represents the case when\n\n# the libraries have no prefix (shared libraries / DLLs).\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Specify search directories for include files and libraries (this is the union\n\n# of the search directories for all OSs).  Search user-specified hint\n\n# directories first if supplied, and search user-installed locations first\n\n# so that we prefer user installs to system installs where both exist.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Mac OS X\n\n# Mac OS X\n",
        "Line" : 180,
        "CharPositionInLine" : 30
      },
      "14" : {
        "Text" : "# Mac OS X\n\n# Mac OS X\n",
        "Line" : 186,
        "CharPositionInLine" : 26
      },
      "15" : {
        "Text" : "# Additional suffixes to try appending to each search path.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Windows/Ubuntu\n",
        "Line" : 192,
        "CharPositionInLine" : 15
      },
      "17" : {
        "Text" : "# Wrappers to find_path/library that pass the SuiteSparse search hints/paths.\n\n#\n\n# suitesparse_find_component(<component> [FILES name1 [name2 ...]]\n\n#                                        [LIBRARIES name1 [name2 ...]]\n\n#                                        [REQUIRED])\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Specified headers not found.\n",
        "Line" : 222,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Specified libraries not found.\n",
        "Line" : 244,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Given the number of components of SuiteSparse, and to ensure that the\n\n# automatic failure message generated by FindPackageHandleStandardArgs()\n\n# when not all required components are found is helpful, we maintain a list\n\n# of all variables that must be defined for SuiteSparse to be considered found.\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# BLAS.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# LAPACK.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# SuiteSparseQR may be compiled with Intel Threading Building Blocks,\n\n# we assume that if TBB is installed, SuiteSparseQR was compiled with\n\n# support for it, this will do no harm if it wasn't.\n",
        "Line" : 287,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Add the TBB libraries to the SuiteSparseQR libraries (the only\n\n# libraries to optionally depend on TBB).\n",
        "Line" : 298,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# UFconfig / SuiteSparse_config.\n\n#\n\n# If SuiteSparse version is >= 4 then SuiteSparse_config is required.\n\n# For SuiteSparse 3, UFconfig.h is required.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# SuiteSparse_config (SuiteSparse version >= 4) requires librt library for\n\n# timing by default when compiled on Linux or Unix, but not on OSX (which\n\n# does not have librt).\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Failed to find SuiteSparse_config (>= v4 installs), instead look for\n\n# UFconfig header which should be present in < v4 installs.\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Extract the SuiteSparse version from the appropriate header (UFconfig.h for\n\n# <= v3, SuiteSparse_config.h for >= v4).\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# SuiteSparse version <= 3.\n",
        "Line" : 353,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# This is on a single line s/t CMake does not interpret it as a list of\n\n# elements and insert ';' separators which would result in 4.;2.;1 nonsense.\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# SuiteSparse version >= 4.\n",
        "Line" : 386,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# This is on a single line s/t CMake does not interpret it as a list of\n\n# elements and insert ';' separators which would result in 4.;2.;1 nonsense.\n",
        "Line" : 412,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# METIS (Optional dependency).\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Only mark SuiteSparse as found if all required components and dependencies\n\n# have been found.\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Handle config separately, as otherwise at least one of them will be set\n\n# to NOTFOUND which would cause any check on SUITESPARSE_INCLUDE_DIRS to fail.\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# As SuiteSparse includes are often all in the same directory, remove any\n\n# repetitions.\n",
        "Line" : 449,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Important: The ordering of these libraries is *NOT* arbitrary, as these\n\n# could potentially be static libraries their link ordering is important.\n",
        "Line" : 453,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Determine if we are running on Ubuntu with the package install of SuiteSparse\n\n# which is broken and does not support linking a shared library.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Any even moderately recent Ubuntu release (likely to be affected by\n\n# this bug) should have lsb_release, if it isn't present we are likely\n\n# on a different Linux distribution (should be fine).\n",
        "Line" : 481,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# We are on Ubuntu, and the SuiteSparse version matches the broken\n\n# system install version and is a system install.\n",
        "Line" : 490,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# Handle REQUIRED and QUIET arguments to FIND_PACKAGE\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Do not pass VERSION_VAR to FindPackageHandleStandardArgs() if we failed to\n\n# find SuiteSparse to avoid a confusing autogenerated failure message\n\n# that states 'not found (missing: FOO) (found version: x.y.z)'.\n",
        "Line" : 512,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 43
    },
    "src/cmake/FindUncertaintyTE.cmake" : {
      "ObjectId" : "bcd4d6bfe64efbf4d13f7315329554bf5f19ef08",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the UncertaintyTE libraries.\n\n#\n\n# Defines the following variables:\n\n#\n\n#   UNCERTAINTYTE_FOUND        - TRUE if the UncertaintyTE headers and libs are found\n\n#   UNCERTAINTYTE_INCLUDE_DIRS - The path to UncertaintyTE headers\n\n#\n\n#   UNCERTAINTYTE_LIBRARY      - The opengv library\n\n#   UNCERTAINTYTE_LIBRARY_DIR  - The directory where the libraries are located\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   UNCERTAINTYTE_DIR - (as a CMake or environment variable)\n\n#                The root directory of the UncertaintyTE install prefix\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this is to make the find_package_handle_standard_args  fail\n",
        "Line" : 44,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set UNCERTAINTYTE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MARK_AS_ADVANCED(UNCERTAINTYTE_INCLUDE_DIR UNCERTAINTYTE_LIBRARY)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake/Helpers.cmake" : {
      "ObjectId" : "e1237a6149444a21bc4dfbf404cc74da34477f1c",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision\n\n## CMake Helpers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add library function\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate Windows versioning information\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# FindCUDA.cmake implicit\ttarget_link_libraries() can not be mixed with new signature (CMake < 3.9.0)\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add interface function\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add software function\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate Windows versioning information\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# software\n",
        "Line" : 156,
        "CharPositionInLine" : 39
      },
      "8" : {
        "Text" : "# Add test function\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/cmake/MakeBundle.cmake" : {
      "ObjectId" : "a64160ad42ee42bb652fa122236372790a4c28aa",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Perform bundle fixup on all executables of an install directory\n\n# and generates a standalone bundle with all required runtime dependencies.\n\n#\n\n# This scripts accepts the following parameters:\n\n#   - CMAKE_INSTALL_PREFIX: install target path\n\n#   - BUNDLE_INSTALL_PREFIX: bundle installation path\n\n#   - BUNDLE_LIBS_PATHS: additional paths (colon separated) to look for runtime dependencies\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Blacklist from AppImage: https://github.com/AppImage/AppImages/blob/master/excludelist\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# avoid log flood for those system libraries with non-absolute path\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# resolve item with fake absolute system path to keep them identified as system libs\n\n# By doing this, fixup_bundle:\n\n#   - won't complain about those libraries\n\n#   - won't embed them in the bundle\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# We would like to embed all non-blacklisted \"system\" libs,\n\n# based on the AppImage blacklist.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# message(STATUS \"SYSTEM LIB: ${resolved_file} [${basename}]\")\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# message(STATUS \"${resolved_file} [${basename}]: SYSTEM => EMBEDDED\")\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Add installed runtime library folder to dependencies lookup path\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# installed next to binaries on Windows\n",
        "Line" : 106,
        "CharPositionInLine" : 11
      },
      "9" : {
        "Text" : "# installed in library dir everywhere else\n",
        "Line" : 108,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# GNUInstallDirs is not able to resolve between lib and lib64 hen cmake is called as a sub-command line.\n\n# As a workaround we always add a second path with \"64\" suffix, so it works in all cases.\n\n# In some cases, that will be useless and point to a non-existing directory.\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Get first bundled executable as reference app\n\n# fixup_bundle will automatically fixup all the others executable in the bundle\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/cmake/OptimizeForArchitecture.cmake" : {
      "ObjectId" : "e8ea8f32f41b33d5494a4e1764f21395a1947e1b",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine the host CPU feature set and determine the best set of compiler\n\n# flags to enable all supported SIMD relevant features. Alternatively, the\n\n# target CPU can be explicitly selected (for generating more generic binaries\n\n# or for targeting a different system).\n\n# Compilers provide e.g. the -march=native flag to achieve a similar result.\n\n# This fails to address the need for building for a different microarchitecture\n\n# than the current host.\n\n# The script tries to deduce all settings from the model and family numbers of\n\n# the CPU instead of reading the CPUID flags from e.g. /proc/cpuinfo. This makes\n\n# the detection more independent from the CPUID code in the kernel (e.g. avx2 is\n\n# not listed on older kernels).\n\n#\n\n# Usage:\n\n# OptimizeForArchitecture()\n\n# If either of Vc_SSE_INTRINSICS_BROKEN, Vc_AVX_INTRINSICS_BROKEN,\n\n# Vc_AVX2_INTRINSICS_BROKEN is defined and set, the OptimizeForArchitecture\n\n# macro will consequently disable the relevant features via compiler flags.\n\n# See https://github.com/VcDevel/Vc/blob/master/cmake/OptimizeForArchitecture.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2016 Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#  * Neither the names of contributing organizations nor the\n\n#    names of its contributors may be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# taken from the Intel ORM\n\n# http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\n\n# CPUID Signature Values of Of Recent Intel Microarchitectures\n\n# 4E 5E       | Skylake microarchitecture\n\n# 3D 47 56    | Broadwell microarchitecture\n\n# 3C 45 46 3F | Haswell microarchitecture\n\n# 3A 3E       | Ivy Bridge microarchitecture\n\n# 2A 2D       | Sandy Bridge microarchitecture\n\n# 25 2C 2F    | Intel microarchitecture Westmere\n\n# 1A 1E 1F 2E | Intel microarchitecture Nehalem\n\n# 17 1D       | Enhanced Intel Core microarchitecture\n\n# 0F          | Intel Core microarchitecture\n\n#\n\n# Intel SDM Vol. 3C 35-1 / December 2016:\n\n# 57          | Xeon Phi 3200, 5200, 7200  [Knights Landing]\n\n# 85          | Future Xeon Phi\n\n# 8E 9E       | 7th gen. Core              [Kaby Lake]\n\n# 55          | Future Xeon                [Skylake w/ AVX512]\n\n# 4E 5E       | 6th gen. Core / E3 v5      [Skylake w/o AVX512]\n\n# 56          | Xeon D-1500                [Broadwell]\n\n# 4F          | Xeon E5 v4, E7 v4, i7-69xx [Broadwell]\n\n# 47          | 5th gen. Core / Xeon E3 v4 [Broadwell]\n\n# 3D          | M-5xxx / 5th gen.          [Broadwell]\n\n# 3F          | Xeon E5 v3, E7 v3, i7-59xx [Haswell-E]\n\n# 3C 45 46    | 4th gen. Core, Xeon E3 v3  [Haswell]\n\n# 3E          | Xeon E5 v2, E7 v2, i7-49xx [Ivy Bridge-E]\n\n# 3A          | 3rd gen. Core, Xeon E3 v2  [Ivy Bridge]\n\n# 2D          | Xeon E5, i7-39xx           [Sandy Bridge]\n\n# 2F          | Xeon E7\n\n# 2A          | Xeon E3, 2nd gen. Core     [Sandy Bridge]\n\n# 2E          | Xeon 7500, 6500 series\n\n# 25 2C       | Xeon 3600, 5600 series, Core i7, i5 and i3\n\n#\n\n# Values from the Intel SDE:\n\n# 5C | Goldmont\n\n# 5A | Silvermont\n\n# 57 | Knights Landing\n\n# 66 | Cannonlake\n\n# 55 | Skylake Server\n\n# 4E | Skylake Client\n\n# 3C | Broadwell (likely a bug in the SDE)\n\n# 3C | Haswell\n",
        "Line" : 90,
        "CharPositionInLine" : 9
      },
      "3" : {
        "Text" : "# 57\n",
        "Line" : 132,
        "CharPositionInLine" : 33
      },
      "4" : {
        "Text" : "# Knights Landing\n",
        "Line" : 133,
        "CharPositionInLine" : 44
      },
      "5" : {
        "Text" : "# 8E, 9E\n",
        "Line" : 140,
        "CharPositionInLine" : 62
      },
      "6" : {
        "Text" : "# 55\n",
        "Line" : 142,
        "CharPositionInLine" : 37
      },
      "7" : {
        "Text" : "# 4E, 5E\n",
        "Line" : 144,
        "CharPositionInLine" : 60
      },
      "8" : {
        "Text" : "# 3D, 47, 4F, 56\n",
        "Line" : 146,
        "CharPositionInLine" : 106
      },
      "9" : {
        "Text" : "# Itanium (not supported)\n",
        "Line" : 173,
        "CharPositionInLine" : 34
      },
      "10" : {
        "Text" : "# NetBurst\n",
        "Line" : 175,
        "CharPositionInLine" : 35
      },
      "11" : {
        "Text" : "# Not sure whether this must be 3 or even 4 instead\n",
        "Line" : 177,
        "CharPositionInLine" : 34
      },
      "12" : {
        "Text" : "# 16h\n",
        "Line" : 184,
        "CharPositionInLine" : 35
      },
      "13" : {
        "Text" : "# 15h\n",
        "Line" : 186,
        "CharPositionInLine" : 35
      },
      "14" : {
        "Text" : "# 14h\n",
        "Line" : 192,
        "CharPositionInLine" : 35
      },
      "15" : {
        "Text" : "# 12h\n\n# 10h\n",
        "Line" : 194,
        "CharPositionInLine" : 35
      },
      "16" : {
        "Text" : "# I don't know the right number to put here. This is just a guess from the hardware I have access to\n",
        "Line" : 199,
        "CharPositionInLine" : 35
      },
      "17" : {
        "Text" : "# add this clause to remove it from the else clause\n",
        "Line" : 386,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# MSVC on 32 bit can select /arch:SSE2 (since 2010 also /arch:AVX)\n\n# MSVC on 64 bit cannot select anything (should have changed with MSVC 2010)\n",
        "Line" : 459,
        "CharPositionInLine" : 9
      },
      "19" : {
        "Text" : "# ICC (on Linux)\n",
        "Line" : 482,
        "CharPositionInLine" : 56
      },
      "20" : {
        "Text" : "# This is the Intel compiler, so SSE2 is a very reasonable baseline.\n",
        "Line" : 506,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# not MSVC and not ICC => GCC, Clang, Open64\n",
        "Line" : 510,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 22
    },
    "src/cmake/compatibilityCUDA/FindCUDA.cmake" : {
      "ObjectId" : "1540b576a3271658c026eb94574255175683fb9d",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# .. note::\n\n#\n\n#   The FindCUDA module has been superseded by first-class support\n\n#   for the CUDA language in CMake.  It is no longer necessary to\n\n#   use this module or call ``find_package(CUDA)``.  This module\n\n#   now exists only for compatibility with projects that have not\n\n#   been ported.\n\n#\n\n#   Instead, list ``CUDA`` among the languages named in the top-level\n\n#   call to the :command:`project` command, or call the\n\n#   :command:`enable_language` command with ``CUDA``.\n\n#   Then one can add CUDA (``.cu``) sources to programs directly\n\n#   in calls to :command:`add_library` and :command:`add_executable`.\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\n\n# windows, and mac and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard find_package arguments of\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_LINK_LIBRARIES_KEYWORD (Default \"\")\n\n#    -- The <PRIVATE|PUBLIC|INTERFACE> keyword to use for internal\n\n#       target_link_libraries calls. The default is to use no keyword which\n\n#       uses the old \"plain\" form of target_link_libraries. Note that is matters\n\n#       because whatever is used inside the FindCUDA module must also be used\n\n#       outside - the two forms of target_link_libraries cannot be mixed.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\n\n#      the command is run from within VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#      Note that this is a function instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cudadevrt_LIBRARY -- Device runtime library.\n\n#                             Required for separable compilation.\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5 - 8.0.\n\n#   CUDA_nppial_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicom_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppidei_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppif_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppig_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppim_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppist_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppisu_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppitc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 412,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 449,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 456,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 461,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 470,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 472,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 474,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 479,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 534,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 543,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 604,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 606,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n#  End of unset()\n\n#\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n#  Start looking for things\n\n#\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 652,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Now search default paths\n",
        "Line" : 664,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 675,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Support for NVPACK\n",
        "Line" : 692,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Support for arm cross compilation\n",
        "Line" : 695,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Support for aarch64 cross compilation\n",
        "Line" : 698,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\n",
        "Line" : 712,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\n",
        "Line" : 722,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compute the version.\n",
        "Line" : 744,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 751,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 757,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 762,
        "CharPositionInLine" : 21
      },
      "56" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 785,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 789,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 801,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 822,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\n",
        "Line" : 836,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# If not available, silently disable the option.\n",
        "Line" : 839,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 856,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 862,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\n",
        "Line" : 879,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 888,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 901,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 911,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 919,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 935,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 943,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 945,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 952,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# In CUDA 9.0 NPP was nppi was removed\n",
        "Line" : 965,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\n",
        "Line" : 980,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 989,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 1001,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 1013,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1025,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 1027,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 1037,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 1042,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 1046,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 1067,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 1078,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1092,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "##############################################################################\n",
        "Line" : 1107,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 1113,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1137,
        "CharPositionInLine" : 8
      },
      "97" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1144,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1150,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1155,
        "CharPositionInLine" : 8
      },
      "100" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1166,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1185,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1204,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1211,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1215,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1226,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1229,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1231,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1233,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1235,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1238,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1244,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1247,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# Put optional arguments in list.\n",
        "Line" : 1265,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\n\n# remove it from the list.\n",
        "Line" : 1267,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1277,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1282,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1286,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Emulation.\n",
        "Line" : 1288,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1291,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# $(VCInstallDir)/bin.\n",
        "Line" : 1317,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1327,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1337,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\n\n# cuda_compile_* functions), need to query directory properties to get include directories\n\n# and compile definitions.\n",
        "Line" : 1340,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\n\n# include dirs set by the user, whether via directory properties or target properties\n",
        "Line" : 1349,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# Do the same thing with compile definitions\n",
        "Line" : 1354,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1359,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1369,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1372,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# STATIC\n",
        "Line" : 1378,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1384,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1386,
        "CharPositionInLine" : 4
      },
      "132" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1392,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1401,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1404,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1408,
        "CharPositionInLine" : 6
      },
      "136" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1428,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1434,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1439,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1451,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1454,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1457,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1459,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1466,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1489,
        "CharPositionInLine" : 8
      },
      "145" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1497,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1510,
        "CharPositionInLine" : 6
      },
      "147" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1528,
        "CharPositionInLine" : 6
      },
      "148" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1539,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1543,
        "CharPositionInLine" : 31
      },
      "150" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1547,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1559,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1562,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1569,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1577,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1584,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1601,
        "CharPositionInLine" : 6
      },
      "157" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1614,
        "CharPositionInLine" : 6
      },
      "158" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1617,
        "CharPositionInLine" : 8
      },
      "159" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1621,
        "CharPositionInLine" : 8
      },
      "160" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1635,
        "CharPositionInLine" : 6
      },
      "161" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1640,
        "CharPositionInLine" : 6
      },
      "162" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1648,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1663,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1669,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1681,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1687,
        "CharPositionInLine" : 27
      },
      "167" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1692,
        "CharPositionInLine" : 4
      },
      "168" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1700,
        "CharPositionInLine" : 4
      },
      "169" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1704,
        "CharPositionInLine" : 6
      },
      "170" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1712,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1717,
        "CharPositionInLine" : 6
      },
      "172" : {
        "Text" : "# HACK from https://gitlab.kitware.com/cmake/cmake/issues/16411\n\n#      foreach(f ${CUDA_NVCC_FLAGS_${config_upper}})\n\n#        list(APPEND config_specific_flags $<$<CONFIG:${config}>:${f}>)\n\n#      endforeach()\n",
        "Line" : 1718,
        "CharPositionInLine" : 0
      },
      "173" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1732,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1739,
        "CharPositionInLine" : 4
      },
      "175" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1744,
        "CharPositionInLine" : 4
      },
      "176" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1750,
        "CharPositionInLine" : 6
      },
      "177" : {
        "Text" : "#        COMMAND_EXPAND_LISTS\n",
        "Line" : 1766,
        "CharPositionInLine" : 0
      },
      "178" : {
        "Text" : "#        COMMAND_EXPAND_LISTS\n",
        "Line" : 1777,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1784,
        "CharPositionInLine" : 0
      },
      "180" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1793,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1796,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1801,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# Add the library.\n",
        "Line" : 1805,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1812,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1827,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1837,
        "CharPositionInLine" : 0
      },
      "187" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1846,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1848,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1851,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# Add the library.\n",
        "Line" : 1855,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1862,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1871,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1881,
        "CharPositionInLine" : 0
      },
      "194" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\n",
        "Line" : 1887,
        "CharPositionInLine" : 2
      },
      "195" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1898,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1901,
        "CharPositionInLine" : 2
      },
      "197" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1909,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1918,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1927,
        "CharPositionInLine" : 0
      },
      "200" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1936,
        "CharPositionInLine" : 0
      },
      "201" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1946,
        "CharPositionInLine" : 0
      },
      "202" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1959,
        "CharPositionInLine" : 0
      },
      "203" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1972,
        "CharPositionInLine" : 0
      },
      "204" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1978,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1989,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 206
    },
    "src/cmake/compatibilityCUDA/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "7b5389ec51fdad7df760df0666809105e3239c09",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Extra output\n\n#\n\n# input_file:FILEPATH=<>   Path to dependecy file in makefile format\n\n#\n\n# output_file:FILEPATH=<>  Path to file with dependencies in CMake readable variable\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we check to see if we have a file, before asking if it is not a directory.\n\n# if(NOT IS_DIRECTORY \"\") will return TRUE.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/cmake/compatibilityCUDA/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "src/cmake/compatibilityCUDA/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "f78119d3404d27392bd80154382bc6741b296ba1",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 64,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 66,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 67,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 71,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 74,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 77,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 78,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in lua quotes see #16510 ).\n",
        "Line" : 79,
        "CharPositionInLine" : 75
      },
      "22" : {
        "Text" : "# string\n",
        "Line" : 80,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\n",
        "Line" : 81,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 159,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Note that this will remove all occurances of -G.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Generate the code\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 53
    },
    "src/cmake/compatibilityCUDA/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "b604a179043d992717adb6ceeff60a4a14d327b7",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 187,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 191,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "src/dependencies/CMakeLists.txt" : {
      "ObjectId" : "24f3a46ec1f91fc2b2f78b018ccb64a1eae8fb9d",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add nanoflann (header-only)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libs should be static\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# use PIC code for link into shared lib\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add graph library\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add svg library\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add an Approximate Nearest Neighbor library\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/dependencies/cxsparse/CMakeLists.txt" : {
      "ObjectId" : "5d842f23224f753fa7a8e50f5d188b398cb1fc2e",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: TheFrenchLeaf https://github.com/TheFrenchLeaf\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dependencies/flann/CMakeLists.txt" : {
      "ObjectId" : "e221bf172256488bf71fef2b44788c460ea8f957",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE_C_COMPILER_ID and CMAKE_CXX_COMPILER_ID are documented as internal variables subject to\n\n# change at: http://www.cmake.org/cmake/help/v2.8.8/cmake.html#variable:CMAKE_LANG_COMPILER_ID\n\n# however currently this seems the most robust way to detect the presence of the Clang compiler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add an \"uninstall\" target\n\n#CONFIGURE_FILE (\"${PROJECT_SOURCE_DIR}/cmake/uninstall_target.cmake.in\"\n\n#    \"${PROJECT_BINARY_DIR}/uninstall_target.cmake\" IMMEDIATE @ONLY)\n\n#ADD_CUSTOM_TARGET (uninstall \"${CMAKE_COMMAND}\" -P\n\n#    \"${PROJECT_BINARY_DIR}/uninstall_target.cmake\")\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING \"Build type\" FORCE)\n\n#set(CMAKE_BUILD_TYPE Debug)\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#set the default path for built executables to the \"bin\" directory\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set the default path for built libraries to the \"lib\" directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set output path for tests\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#option(BUILD_PYTHON_BINDINGS \"Build Python bindings\" OFF)\n\n#option(BUILD_MATLAB_BINDINGS \"Build Matlab bindings\" OFF)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#option(USE_MPI \"Use MPI\" OFF)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#if (NOT BUILD_C_BINDINGS)\n\n#    set(BUILD_PYTHON_BINDINGS OFF)\n\n#    set(BUILD_MATLAB_BINDINGS OFF)\n\n#endif()\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#set the C/C++ include path to the \"include\" directory\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# require proper c++\n\n#add_definitions( \"-Wall -ansi -pedantic\" )\n\n# HDF5 uses long long which is not ansi\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# lots of warnings with cl.exe right now, use /W1\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "src/dependencies/flann/cmake/CMakeLists.txt" : {
      "ObjectId" : "fb70f4cc3e0a7e78a0cc99ff69f324ab39fb78ae",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dependencies/flann/cmake/FindFlann.cmake" : {
      "ObjectId" : "a6375c044842978ceb60dcc9faf02843dd760340",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Find Flann\n\n#\n\n# This sets the following variables:\n\n# FLANN_FOUND - True if FLANN was found.\n\n# FLANN_INCLUDE_DIRS - Directories containing the FLANN include files.\n\n# FLANN_LIBRARIES - Libraries needed to use FLANN.\n\n# FLANN_DEFINITIONS - Compiler flags for FLANN.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dependencies/flann/cmake/UseLATEX.cmake" : {
      "ObjectId" : "77bd7096b0a5b5cef4431d2836f8db85db015277",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# File: UseLATEX.cmake\n\n# CMAKE commands to actually use the LaTeX compiler\n\n# Version: 1.7.3\n\n# Author: Kenneth Moreland (kmorel at sandia dot gov)\n\n#\n\n# Copyright 2004 Sandia Corporation.\n\n# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive\n\n# license for use of this work by or on behalf of the\n\n# U.S. Government. Redistribution and use in source and binary forms, with\n\n# or without modification, are permitted provided that this Notice and any\n\n# statement of authorship are reproduced on all copies.\n\n#\n\n# The following MACROS are defined:\n\n#\n\n# ADD_LATEX_DOCUMENT(<tex_file>\n\n#                       [BIBFILES <bib_files>]\n\n#                       [INPUTS <input_tex_files>]\n\n#                       [IMAGE_DIRS] <image_directories>\n\n#                       [IMAGES] <image_files>\n\n#                       [CONFIGURE] <tex_files>\n\n#                       [DEPENDS] <tex_files>\n\n#                       [USE_INDEX] [USE_GLOSSARY]\n\n#                       [DEFAULT_PDF] [MANGLE_TARGET_NAMES])\n\n#       Adds targets that compile <tex_file>.  The latex output is placed\n\n#       in LATEX_OUTPUT_PATH or CMAKE_CURRENT_BINARY_DIR if the former is\n\n#       not set.  The latex program is picky about where files are located,\n\n#       so all input files are copied from the source directory to the\n\n#       output directory.  This includes the target tex file, any tex file\n\n#       listed with the INPUTS option, the bibliography files listed with\n\n#       the BIBFILES option, and any .cls, .bst, and .clo files found in\n\n#       the current source directory.  Images found in the IMAGE_DIRS\n\n#       directories or listed by IMAGES are also copied to the output\n\n#       directory and coverted to an appropriate format if necessary.  Any\n\n#       tex files also listed with the CONFIGURE option are also processed\n\n#       with the CMake CONFIGURE_FILE command (with the @ONLY flag.  Any\n\n#       file listed in CONFIGURE but not the target tex file or listed with\n\n#       INPUTS has no effect. DEPENDS can be used to specify generated files\n\n#       that are needed to compile the latex target.\n\n#\n\n#       The following targets are made:\n\n#               dvi: Makes <name>.dvi\n\n#               pdf: Makes <name>.pdf using pdflatex.\n\n#               safepdf: Makes <name>.pdf using ps2pdf.  If using the default\n\n#                       program arguments, this will ensure all fonts are\n\n#                       embedded and no lossy compression has been performed\n\n#                       on images.\n\n#               ps: Makes <name>.ps\n\n#               html: Makes <name>.html\n\n#               auxclean: Deletes <name>.aux.  This is sometimes necessary\n\n#                       if a LaTeX error occurs and writes a bad aux file.\n\n#\n\n#       The dvi target is added to the ALL.  That is, it will be the target\n\n#       built by default.  If the DEFAULT_PDF argument is given, then the\n\n#       pdf target will be the default instead of dvi.\n\n#\n\n#       If the argument MANGLE_TARGET_NAMES is given, then each of the\n\n#       target names above will be mangled with the <tex_file> name.  This\n\n#       is to make the targets unique if ADD_LATEX_DOCUMENT is called for\n\n#       multiple documents.  If the argument USE_INDEX is given, then\n\n#       commands to build an index are made.  If the argument USE_GLOSSARY\n\n#       is given, then commands to build a glossary are made.\n\n#\n\n# History:\n\n#\n\n# 1.7.3 Fix some issues with interactions between makeglossaries and bibtex\n\n#       (thanks to Mark de Wever).\n\n#\n\n# 1.7.2 Use ps2pdf to convert eps to pdf to get around the problem with\n\n#       ImageMagick dropping the bounding box (thanks to Lukasz Lis).\n\n#\n\n# 1.7.1 Fixed some dependency issues.\n\n#\n\n# 1.7.0 Added DEPENDS options (thanks to Theodore Papadopoulo).\n\n#\n\n# 1.6.1 Ported the makeglossaries command to CMake and embedded the port\n\n#       into UseLATEX.cmake.\n\n#\n\n# 1.6.0 Allow the use of the makeglossaries command.  Thanks to Oystein\n\n#       S. Haaland for the patch.\n\n#\n\n# 1.5.0 Allow any type of file in the INPUTS lists, not just tex file\n\n#       (suggested by Eric Noulard).  As a consequence, the ability to\n\n#       specify tex files without the .tex extension is removed.  The removed\n\n#       function is of dubious value anyway.\n\n#\n\n#       When copying input files, skip over any file that exists in the\n\n#       binary directory but does not exist in the source directory with the\n\n#       assumption that these files were added by some other mechanism.  I\n\n#       find this useful when creating large documents with multiple\n\n#       chapters that I want to build separately (for speed) as I work on\n\n#       them.  I use the same boilerplate as the starting point for all\n\n#       and just copy it with different configurations.  This was what the\n\n#       separate ADD_LATEX_DOCUMENT method was supposed to originally be for.\n\n#       Since its external use is pretty much deprecated, I removed that\n\n#       documentation.\n\n#\n\n# 1.4.1 Copy .sty files along with the other class and package files.\n\n#\n\n# 1.4.0 Added a MANGLE_TARGET_NAMES option that will mangle the target names.\n\n#\n\n#       Fixed problem with copying bib files that became apparent with\n\n#       CMake 2.4.\n\n#\n\n# 1.3.0 Added a LATEX_OUTPUT_PATH variable that allows you or the user to\n\n#       specify where the built latex documents to go.  This is especially\n\n#       handy if you want to do in-source builds.\n\n#\n\n#       Removed the ADD_LATEX_IMAGES macro and absorbed the functionality\n\n#       into ADD_LATEX_DOCUMENT.  The old interface was always kind of\n\n#       clunky anyway since you had to specify the image directory in both\n\n#       places.  It also made supporting LATEX_OUTPUT_PATH problematic.\n\n#\n\n#       Added support for jpeg files.\n\n#\n\n# 1.2.0 Changed the configuration options yet again.  Removed the NO_CONFIGURE\n\n#       Replaced it with a CONFIGURE option that lists input files for which\n\n#       configure should be run.\n\n#\n\n#       The pdf target no longer depends on the dvi target.  This allows you\n\n#       to build latex documents that require pdflatex.  Also added an option\n\n#       to make the pdf target the default one.\n\n#\n\n# 1.1.1 Added the NO_CONFIGURE option.  The @ character can be used when\n\n#       specifying table column separators.  If two or more are used, then\n\n#       will incorrectly substitute them.\n\n#\n\n# 1.1.0 Added ability include multiple bib files.  Added ability to do copy\n\n#       sub-tex files for multipart tex files.\n\n#\n\n# 1.0.0 If both ps and pdf type images exist, just copy the one that\n\n#       matches the current render mode.  Replaced a bunch of STRING\n\n#       commands with GET_FILENAME_COMPONENT commands that were made to do\n\n#       the desired function.\n\n#\n\n# 0.4.0 First version posted to CMake Wiki.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n\n# Find the location of myself while originally executing.  If you do this\n\n# inside of a macro, it will recode where the macro was invoked.\n\n#############################################################################\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n\n# Generic helper macros\n\n#############################################################################\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Helpful list macros.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Parse macro arguments.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Match the contents of a file to a regular expression.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The FILE STRINGS command would be a bit better, but it's not supported on\n\n# older versions of CMake.\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#############################################################################\n\n# Macros that perform processing during a LaTeX build.\n\n#############################################################################\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#############################################################################\n\n# Helper macros for establishing LaTeX build.\n\n#############################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Just holds extensions for known image types.  They should all be lower case.\n",
        "Line" : 357,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# ImageMagick has broken eps to pdf conversion\n\n# use ps2pdf instead\n",
        "Line" : 391,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Makes custom commands to convert a file to a particular type.\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# As a shortcut, we can just copy the file.\n",
        "Line" : 430,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Check to see if there is another input file of the appropriate type.\n",
        "Line" : 440,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If we still need to convert, do it.\n",
        "Line" : 450,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Adds custom commands to process the given files for dvi and pdf builds.\n\n# Adds the output files to the given variables (does not replace).\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check to see if we need to downsample the image.\n",
        "Line" : 469,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Make sure the output directory exists.\n",
        "Line" : 479,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Do conversions for dvi.\n",
        "Line" : 483,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Do conversions for pdf.\n",
        "Line" : 487,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Special case: output exists but input does not.  Assume that it was\n\n# created elsewhere and skip the input file copy.\n",
        "Line" : 540,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "#############################################################################\n\n# Commands provided by the UseLATEX.cmake \"package\"\n\n#############################################################################\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Parses arguments to ADD_LATEX_DOCUMENT and ADD_LATEX_TARGETS and sets the\n\n# variables LATEX_TARGET, LATEX_IMAGE_DIR, LATEX_BIBFILES, LATEX_DEPENDS, and\n\n# LATEX_INPUTS.\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The first argument is the target latex file.\n",
        "Line" : 569,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Backward compatibility between 1.6.0 and 1.6.1.\n",
        "Line" : 582,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Set up target names.\n",
        "Line" : 592,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# For each directory in LATEX_IMAGE_DIRS, glob all the image files and\n\n# place them in LATEX_IMAGES.\n",
        "Line" : 609,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Repeat these commands twice.\n",
        "Line" : 640,
        "CharPositionInLine" : 25
      },
      "28" : {
        "Text" : "# Add commands and targets for building dvi outputs.\n",
        "Line" : 703,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Add commands and targets for building pdf outputs (with pdflatex).\n",
        "Line" : 716,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Since both the pdf and safepdf targets have the same output, we\n\n# cannot properly do the dependencies for both.  When selecting safepdf,\n\n# simply force a recompile every time.\n",
        "Line" : 739,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "#############################################################################\n\n# Actually do stuff\n\n#############################################################################\n",
        "Line" : 794,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Must be part of the actual configure (included from CMakeLists.txt).\n",
        "Line" : 811,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 33
    },
    "src/dependencies/flann/cmake/flann_utils.cmake" : {
      "ObjectId" : "531b18dbce0f97b240cf3c3994ebfca8c0ff2480",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find version components\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# workaround a FindHDF5 bug\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add build target\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add dependency to 'tests' target\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# add target for running test\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# add dependency to 'test' target\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# add build target\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# add dependency to 'tests' target\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# add target for running test\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# add dependency to 'test' target\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# find test file\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# add target for running test\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# add dependency to 'test' target\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Also make sure that downloads are done before we run any tests\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "src/dependencies/flann/src/CMakeLists.txt" : {
      "ObjectId" : "242b5477f338d60643addf7be31366851932f964",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dependencies/flann/src/cpp/CMakeLists.txt" : {
      "ObjectId" : "238fd913ee80e37fc169d6387cf086785da73082",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(${CMAKE_SOURCE_DIR}/include algorithms util nn .)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND CMAKE_COMPILER_IS_GNUCC)\n\n#    add_library(flann_cpp SHARED \"\")\n\n#    set_target_properties(flann_cpp PROPERTIES LINKER_LANGUAGE CXX)\n\n#    target_link_libraries(flann_cpp -Wl,-whole-archive flann_cpp_s -Wl,-no-whole-archive)\n\n#else()\n\n#    add_library(flann_cpp SHARED ${CPP_SOURCES})\n\n#endif()\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set_target_properties(flann_cpp PROPERTIES\n\n#   VERSION ${FLANN_VERSION}\n\n#   SOVERSION ${FLANN_SOVERSION}\n\n#   DEFINE_SYMBOL FLANN_EXPORTS\n\n#) \n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/dependencies/lemon/CMakeLists.txt" : {
      "ObjectId" : "b8a47276c29d4d27f655e465521c59f3f75a37ae",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This part is unnecessary 'casue the same is set by the lemon/core.h.\n\n# Still keep it as an example.\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Suppressed warnings:\n\n# C4250: 'class1' : inherits 'class2::member' via dominance\n\n# C4355: 'this' : used in base member initializer list\n\n# C4503: 'function' : decorated name length exceeded, name was truncated\n\n# C4800: 'type' : forcing value to bool 'true' or 'false'\n\n#        (performance warning)\n\n# C4996: 'function': was declared deprecated\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/dependencies/lemon/cmake/FindCOIN.cmake" : {
      "ObjectId" : "d4ed735df943988ef2cba900456ae49b08591f47",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# COIN_OSI_VOL_LIBRARY\n\n# COIN_VOL_LIBRARY\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/dependencies/lemon/cmake/FindGLPK.cmake" : {
      "ObjectId" : "55e5e3ee056eb9fc114e6b3cbf2cc0117027422f",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dependencies/lemon/cmake/FindGhostscript.cmake" : {
      "ObjectId" : "3366a000e1bd74315ddf01359a783094123632f4",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dependencies/lemon/cmake/FindILOG.cmake" : {
      "ObjectId" : "a09fc9a2753b628353ba6fa205832cfb7922c577",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SET(CPLEX_LIBRARIES \"${CPLEX_LIBRARIES};m;pthread\")\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/dependencies/lemon/cmake/FindSOPLEX.cmake" : {
      "ObjectId" : "d27cff0f3e17745b3723705fd7605f04c3209c03",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dependencies/lemon/cmake/version.cmake" : {
      "ObjectId" : "39b7f8fb217355015df7d4b7217f7d95141a156f",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dependencies/lemon/lemon/CMakeLists.txt" : {
      "ObjectId" : "a840e5c31c04161670846908d0b733a95ff20262",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL(\n\n#  DIRECTORY . bits concepts\n\n#  DESTINATION include/lemon\n\n#  COMPONENT headers\n\n#  FILES_MATCHING PATTERN \"*.h\"\n\n#)\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INSTALL(\n\n#  FILES ${CMAKE_CURRENT_BINARY_DIR}/lemon.pc\n\n#  DESTINATION lib/pkgconfig\n\n#)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/dependencies/vectorGraphics/CMakeLists.txt" : {
      "ObjectId" : "2d310953b629d26821e09455693058351a7bc0a7",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/nonFree/CMakeLists.txt" : {
      "ObjectId" : "2627e110c65cb93e35cc48161208aaabe924125b",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/nonFree/sift/CMakeLists.txt" : {
      "ObjectId" : "3c788ba5adb650b2c2accbd599ea8ea2a663630f",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libs should be static\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use PIC code for link into shared lib\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/samples/CMakeLists.txt" : {
      "ObjectId" : "f1b03d69c6cb4ba94cabc0cb8f30d96c26f1275c",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision\n\n## Samples\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Samples PROPERTY FOLDER\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_subdirectory(accv12Demo)\n\n# add_subdirectory(featuresAKAZEDemo)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_subdirectory(imageData)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/samples/accv12Demo/CMakeLists.txt" : {
      "ObjectId" : "2719060127dcb05ce975d663a6fbfc1ed65686d3",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/featuresAKAZEDemo/CMakeLists.txt" : {
      "ObjectId" : "da656278938cbd9e67dc4284f60743a3a03458a7",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/featuresRepeatability/CMakeLists.txt" : {
      "ObjectId" : "47e77cec6b33d022edcba91adbc8cf1e7e6354bb",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/imageDescriberMatches/CMakeLists.txt" : {
      "ObjectId" : "b40ccc7c66078fdcab0145c90e1066a3422b4e67",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/kvldFilter/CMakeLists.txt" : {
      "ObjectId" : "2800a4aca4085c67c5db5ace906a8e49a6349493",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustEssential/CMakeLists.txt" : {
      "ObjectId" : "e5821a7de9befc96350a3518f3e30850b55a7b17",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustEssentialBA/CMakeLists.txt" : {
      "ObjectId" : "684e9b366520aa15157cd3d3ce78c841b2cb9361",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustEssentialSpherical/CMakeLists.txt" : {
      "ObjectId" : "f0bbc9884020761e8108eee8396ae6815695f848",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustFundamental/CMakeLists.txt" : {
      "ObjectId" : "5b7a768b3aa362dcda1e3ed0b578774b3092cdb3",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustFundamentalGuided/CMakeLists.txt" : {
      "ObjectId" : "d7b5814a86ab00767d880204bb7a543df3eb1a20",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustHomography/CMakeLists.txt" : {
      "ObjectId" : "b17690930db06ffa6f4c447a14c594f8cd12f20a",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustHomographyGrowing/CMakeLists.txt" : {
      "ObjectId" : "ca5437eb714153f916b7bd910d0bdcaca0449159",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/robustHomographyGuided/CMakeLists.txt" : {
      "ObjectId" : "357dd790b31931bd069662fa57d3a60b63261fcc",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/sensorWidthDatabase/CMakeLists.txt" : {
      "ObjectId" : "006fd8c60d8acbb051a555904d0210627c9b6299",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/siftPutativeMatches/CMakeLists.txt" : {
      "ObjectId" : "44c76e7d56feb40782488704415fe3605a6dbebf",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/samples/undistoBrown/CMakeLists.txt" : {
      "ObjectId" : "bc915878650cd888cb40539695732e7e49d6b32e",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/software/CMakeLists.txt" : {
      "ObjectId" : "e3de2acbdf11a1dabb83b65374fb3544dec8e519",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision\n\n## Software\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ALICEVISION_BUILD_SFM\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "src/software/convert/CMakeLists.txt" : {
      "ObjectId" : "74427db1c510a5e8bb2ce8d7198f3998a37cc996",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision\n\n## Convertion software\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Software PROPERTY FOLDER is 'Software/Convert'\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Convert SfMData format (from one to another)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert float descriptors to unsigned char\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Convert image to EXR\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/software/export/CMakeLists.txt" : {
      "ObjectId" : "bb8645afe37b119d0d1fa37b4971494d219f238a",
      "LastModified" : "2019-03-28T14:04:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision\n\n## Exportation software\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Software PROPERTY FOLDER is 'Software/Export'\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Export an alembic animated camera from a SfMData file\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Export view extracted keypoints\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Export view computed matches (putatives, geometrics) per image pair\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Export view tracks per image pair\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Export a SfM aliceVision scene to PMVS format\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Export point cloud\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Export a SfM aliceVision scene to MayaMVG\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# maya can read alembic file\n",
        "Line" : 81,
        "CharPositionInLine" : 29
      },
      "10" : {
        "Text" : "# Export a SfM aliceVision scene to MVE(v2) format\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Export a SfM aliceVision scene to meshlab scene with rasters\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Export a SfM aliceVision scene to mvs-texturing scene folder\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Export a SfM aliceVision scene to Matlab\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Export SfM aliceVision camera scene as triangle meshes\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/software/pipeline/CMakeLists.txt" : {
      "ObjectId" : "d916cffb039bf7513e5684c52784e080d60ec776",
      "LastModified" : "2019-03-28T14:04:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision\n\n## Pipeline softwares\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Software PROPERTY FOLDER is 'Software/Pipeline'\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### SfM software\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Intrinsic image analysis and SfMData container initialization\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Feature extraction\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Image matching\n\n# - generate the image pair lists\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Feature matching\n\n# - putative matches and geometric filtered matches\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Incremental / Sequential SfM\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Global SfM\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Compute structure from known camera poses\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Calibrate a camera\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Calibrate a rig\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# TODO: delete vlsift\n",
        "Line" : 126,
        "CharPositionInLine" : 17
      },
      "13" : {
        "Text" : "# Localize a camera\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Localize a rig\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Prepare dense scene for MVS\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# if(ALICEVISION_BUILD_SFM)\n",
        "Line" : 178,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "### MVS software\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Depth map computation need CUDA\n",
        "Line" : 183,
        "CharPositionInLine" : 28
      },
      "19" : {
        "Text" : "# Depth Map Estimation\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Depth Map Filtering\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Meshing\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Mesh Denoising\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Mesh Decimate\n",
        "Line" : 240,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Mesh Filtering\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Mesh Resampling\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Texturing\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# if(ALICEVISION_BUILD_MVS)\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 28
    },
    "src/software/utils/CMakeLists.txt" : {
      "ObjectId" : "4abc0740c4f5ca622ce77eaae6d8abb4b0eb4512",
      "LastModified" : "2019-01-18T22:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## AliceVision\n\n## Utilities software\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Software PROPERTY FOLDER is 'Software/Utils'\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Uncertainty\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(warning \"UNCERTAINTYTE_LIBRARY: ${UNCERTAINTYTE_LIBRARY}\")\n\n# message(warning \"CUDA_LIBRARIES: ${CUDA_LIBRARIES}\")\n\n# message(warning \"CUDA_CUBLAS_LIBRARIES: ${CUDA_CUBLAS_LIBRARIES}\")\n\n# message(warning \"CUDA_cusparse_LIBRARY: ${CUDA_cusparse_LIBRARY}\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Voctree creation\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Voctree query utility\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Voctree statistics\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Frustrum filtering\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Transform rig\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# SfM quality evaluation\n\n# - quality comparison against a GT camera path (MultiView Evaluation dataset)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SfM alignment\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# SfM transform\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SfM color harmonize\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TODO\n",
        "Line" : 124,
        "CharPositionInLine" : 58
      },
      "14" : {
        "Text" : "# SfM localization\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Keyframe selection\n\n# - export keyframes from video files / image sequence directories\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Split 360 images in input in order to export square images\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    }
  },
  "FileTypes" : {
    "CMAKE" : 114
  },
  "ElapsedTime" : 7324
}