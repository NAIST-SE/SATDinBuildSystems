{
  "Repository" : "70506888",
  "Revision" : "HEAD",
  "ObjectId" : "760f7c88e283a9fe191721251cd4aea443561b94",
  "CommitTime" : "2019-04-16T19:03:16Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "bc5b2b9a7ac3e5592c54572dd8b705a430f1fe2a",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include(cmake/find_core_dependencies.cmake)\n\n# sets: CORE_INCLUDE_DIRS, CORE_LIBRARIES, CORE_LIBRARY_DIRS\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sets: ADDITIONAL_INCLUDE_DIRS, ADDITIONAL_LIBRARIES, ADDITIONAL_HEADERS,\n\n#       ADDITIONAL_SOURCES, ADDITIONAL_DEFINITIONS\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# sets: EXTERNAL_INCLUDE_DIRS, EXTERNAL_SRC, EXTERNAL_DEFINITIONS\n\n#       EXTERNAL_LIBRARIES, EXTERNAL_DEBUG_LIBRARIES EXTERNAL_RELEASE_LIBRARIES\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# sets: al_headers, al_sources\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sets: EXTENSIONS_LIBRARIES, EXTENSIONS_INCLUDE_DIRS\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# multi configuration generators\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# --- NOW WE ARE READY TO SETUP THE LIBRARY TARGET ---------------------\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# then allolib library\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#paths\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#flags\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# c++14\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# definitions\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# include dirs\n\n# target_include_directories(al PUBLIC\n\n#   ${al_path}/include\n\n#   ${dirs_to_include}\n\n# )\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#  \"$<INSTALL_INTERFACE:include>\"\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# use external include dirs when building,\n\n# when installed, external headers will be in `include`\n\n# so only `include` needs to be specified as include directory\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# libs\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --- Testing -----------------------------------------\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ----- Examples -------------------------------------\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ----- INSTALL ----------------------------------------------------------------\n\n#\n\n# [!] dependent targets (glew_s, glfw, and Gamma) shoud have install target also\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# For some reason this line causes an error when including depencies that are inside the source\n\n# tree on windows.... What does it do anyway...?\n\n#install(EXPORT al-targets DESTINATION lib/cmake/al)\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/al_files.cmake" : {
      "ObjectId" : "4361e82e5dfaa0527072b099578bb09aee1c1e24",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main Library\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header only files produce a lot of warnings from unused functions,\n\n# So disable these warnings for modules\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SET_SOURCE_FILES_PROPERTIES(${src_file} PROPERTIES COMPILE_FLAGS \"-Wunused-function -Wunused-variable\")\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OPTIONAL ---------------------------------------------------------------------\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/app.cmake" : {
      "ObjectId" : "b747d6a92597e1afe1e2ba40daad49689a3f69da",
      "LastModified" : "2018-03-28T21:44:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# project's CMakeLists.txt file includes this script\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this script needs following to be predefined:\n\n#         app_name\n\n#         app_path\n\n#         app_files_list\n\n#         app_include_dirs (can be skipped)\n\n#         app_link_libs (can be skipped)\n\n#         al_path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# sets: CORE_INCLUDE_DIRS, CORE_LIBRARIES, CORE_LIBRARY_DIRS\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# sets: ADDITIONAL_INCLUDE_DIRS, ADDITIONAL_LIBRARIES, ADDITIONAL_HEADERS,\n\n#       ADDITIONAL_SOURCES, ADDITIONAL_DEFINITIONS\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sets: EXTERNAL_INCLUDE_DIRS, EXTERNAL_DEFINITIONS\n\n#       EXTERNAL_LIBRARIES, EXTERNAL_DEBUG_LIBRARIES EXTERNAL_RELEASE_LIBRARIES\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# --- setup app target ------------------------------------\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# multi configuration generators\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#paths\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# flags\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# c++14\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# definitions\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include dirs\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# libs\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# target_link_libraries(\n\n#   ${app_name}\n\n#   debug ${debug_libs_to_link}\n\n#   optimized ${release_libs_to_link}\n\n# )\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# when run from Visual Studio, working directory is where the solution is by default\n\n# set it to app output directory\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# startup project is `ALL_BUILD` by default so we change it to app project\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# post build events for copying dlls\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cmake/example_targets.cmake" : {
      "ObjectId" : "71e5afa0b1ba222b284ba5eee0cb08b717d9efcb",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# macro to get subdirectories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ignore examples that wont work in CI\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't build files with dynamic dependencies on Appveyor CI build\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include root projects directory too\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/examples/${dir}/flags.txt)\n\n#      file(READ ${CMAKE_CURRENT_SOURCE_DIR}/examples/${dir}/flags.txt EXTRA_COMPILER_FLAGS)\n\n#      #message(\"NOTE: Using additional flags from examples/${dir}/flags.txt: \" ${EXTRA_COMPILER_FLAGS})\n\n#      STRING(REGEX REPLACE \"[\\r\\n]\" \" \" EXTRA_COMPILER_FLAGS \"${EXTRA_COMPILER_FLAGS}\")\n\n#    else()\n\n#      set(EXTRA_COMPILER_FLAGS \"\")\n\n#    endif()\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Get name w/o extension\n",
        "Line" : 51,
        "CharPositionInLine" : 66
      },
      "6" : {
        "Text" : "#     message(\"Adding target for example: ${example_src}\")\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#    message(\"Gamma : ${GAMMA_INCLUDE_DIRs}\")\n",
        "Line" : 68,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "#      add_custom_target(\"${EXAMPLE_TARGET}_run\"\n\n#\tCOMMAND \"${EXAMPLE_TARGET}\"\n\n#\tDEPENDS \"${EXAMPLE_TARGET}\"\n\n#\tWORKING_DIRECTORY \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\"\n\n#\tSOURCES ${example_src}\n\n#\tCOMMENT \"Running: ${EXAMPLE_TARGET}\")\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cmake/extensions.cmake" : {
      "ObjectId" : "a4641fa0d1339519082b5ba3287bd2b7506a3140",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    message(\"Building extension: ${subdir}\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    message(\"--**-- ${subdir} : ${CURRENT_EXTENSION_LIBRARIES}\")\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"---- ${EXTENSION_LIBRARIES}\")\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/external.cmake" : {
      "ObjectId" : "1c2816a727778fcb65c6286a7e00ce2cc4e6d505",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sets:\n\n#   EXTERNAL_INCLUDE_DIR\n\n#   EXTERNAL_SRC\n\n#   EXTERNAL_LIBRARIES EXTERNAL_DEBUG_LIBRARIES EXTERNAL_RELEASE_LIBRARIES\n\n#   EXTERNAL_DEFINITIONS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# al_path needs to be set prior to calling this script\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for glew\n",
        "Line" : 15,
        "CharPositionInLine" : 41
      },
      "3" : {
        "Text" : "# ---------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Real time audio\n\n# Use rtaudio by default\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Dummy audio backend\n",
        "Line" : 108,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 6
    },
    "cmake/external/cpptoml.cmake" : {
      "ObjectId" : "faf4df8dd7076cc4606d6998d919bdba985815d1",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sets:\n\n#   CPPTOML_INCLUDE_DIR\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/external/imgui.cmake" : {
      "ObjectId" : "19ffd9d6899f6a9b8e81e8d54d9f795c1e748b13",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sets:\n\n#   IMGUI_INCLUDE_DIR\n\n#   IMGUI_SRC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/external/oscpack.cmake" : {
      "ObjectId" : "e116c0fd1d03eee134caaed37e1bb62190eea6fb",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sets:\n\n#   OSCPACK_INCLUDE_DIR\n\n#   OSCPACK_SRC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/external/rtaudio.cmake" : {
      "ObjectId" : "5724740396f2b6f6d55942b33bac730d1d138165",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sets:\n\n#   RTAUDIO_INCLUDE_DIR\n\n#   RTAUDIO_SRC\n\n#   RTAUDIO_LIBRARIES\n\n#   RTAUDIO_DEFINITIONS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  g++ -Wall -D__UNIX_JACK__ -o audioprobe audioprobe.cpp RtAudio.cpp $(pkg-config –cflags –libs jack) -lpthread\n",
        "Line" : 43,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# add_definitions(-D__MACOSX_CORE__)\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#  g++ -Wall -D__MACOSX_CORE__ -o audioprobe audioprobe.cpp RtAudio.cpp -framework CoreAudio -lpthread\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# add_definitions(-D__WINDOWS_WASAPI__)\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#  g++ -Wall -D__WINDOWS_DS__ -o audioprobe audioprobe.cpp RtAudio.cpp -lole32 -lwinmm -ldsound\n\n#  g++ -Wall -D__WINDOWS_ASIO__ -Iinclude -o audioprobe audioprobe.cpp RtAudio.cpp asio.cpp asiolist.cpp asiodrivers.cpp iasiothiscallresolver.cpp -lole32\n\n#  g++ -Wall -D__WINDOWS_WASAPI__ -Iinclude -o audioprobe audioprobe.cpp RtAudio.cpp -lole32 -lwinmm -lksuser -luuid\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# RTAUDIO\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "cmake/external/rtmidi.cmake" : {
      "ObjectId" : "67c2a200c9f8a8a931b26063e55a5ee510c1831a",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sets:\n\n#   RTMIDI_INCLUDE_DIR\n\n#   RTMIDI_SRC\n\n#   RTMIDI_LIBRARIES\n\n#   RTMIDI_DEFINITIONS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use settings from RtAudio as they might conflict if different\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# add_definitions(-D__MACOSX_CORE__)\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# RTMIDI\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/find_additional_dependencies.cmake" : {
      "ObjectId" : "2dcae793a6c7ed476a9f4611c281349d527776fc",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sets:\n\n#   ADDITIONAL_INCLUDE_DIRS\n\n#   ADDITIONAL_LIBRARIES\n\n# \tADDITIONAL_HEADERS\n\n# \tADDITIONAL_SOURCES\n\n# \tADDITIONAL_DEFINITIONS\n\n# \tADDITIONAL_COMPILE_FLAGS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#option(USE_APR \"\" OFF)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenGL is the minimum required dependency\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# al_path needs to be set prior to calling this script\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if (USE_APR)\n\n#   find_package(PkgConfig REQUIRED)\n\n#   pkg_search_module(APR REQUIRED apr-1)\n\n# endif (USE_APR)\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# for freeimage, assimp, freetype\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Cuttlebone\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOW ADD OPTIONAL FILES -------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if (USE_APR)\n\n#   list(APPEND ADDITIONAL_INCLUDE_DIRS ${APR_INCLUDE_DIRS})\n\n#   list(APPEND ADDITIONAL_LIBRARIES ${APR_LIBRARIES})\n\n#   list(APPEND ADDITIONAL_HEADERS ${al_path}/include/al/util/al_Socket.hpp)\n\n#   list(APPEND ADDITIONAL_SOURCES ${al_path}/src/util/al_SocketAPR.cpp)\n\n# endif(USE_APR)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This should be moved to the find script\n\n# if (USE_APR)\n\n#   set(APR_INCLUDE_DIRS ${al_path}/dependencies/apr/include)\n\n#   set(APR_LIBRARIES ${al_path}/dependencies/apr/libapr-1.lib)\n\n# endif (USE_APR)\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(\"Looking for freetype!!!! ${FREETYPE_INCLUDE_DIR}\")\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  list(APPEND ADDITIONAL_HEADERS ${al_path}/include/al/util/al_Font.hpp)\n\n#  list(APPEND ADDITIONAL_SOURCES ${al_path}/src/util/al_Font.cpp)\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/find_scripts/FindAssimp.cmake" : {
      "ObjectId" : "8634c58a5186d61a0e11afd8aeaf7e48cb7e6909",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Assimp\n\n# Once done this will define\n\n#\n\n#  ASSIMP_FOUND - system has Assimp\n\n#  ASSIMP_INCLUDE_DIR - the Assimp include directory\n\n#  ASSIMP_LIBRARIES - Link these to use Assimp\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n\n#libfind_package(LO Magick)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#/usr/include/assimp\n\n#/usr/local/include\n\n#/opt/local/include/assimp\n\n#/usr/local/Cellar/assimp/2.0.863/include/assimp\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/find_scripts/FindFreeImage.cmake" : {
      "ObjectId" : "3060ab2381fd9da209fc55fbe7be46facc1ce984",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the FreeImage library and include path.\n\n# Once done this will define\n\n#\n\n# FREEIMAGE_FOUND\n\n# FREEIMAGE_INCLUDE_PATH\n\n# FREEIMAGE_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/find_scripts/FindFreetype.cmake" : {
      "ObjectId" : "cc5c935dd3ed58da853a56cd2cc09d92dae1242d",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate FreeType library\n\n# This module defines\n\n#  FREETYPE_LIBRARIES, the library to link against\n\n#  FREETYPE_FOUND, if false, do not try to link to FREETYPE\n\n#  FREETYPE_INCLUDE_DIRS, where to find headers.\n\n#  This is the concatenation of the paths:\n\n#  FREETYPE_INCLUDE_DIR_ft2build\n\n#  FREETYPE_INCLUDE_DIR_freetype2\n\n#\n\n# $FREETYPE_DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$FREETYPE_DIR\n\n# used in building FREETYPE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by Eric Wing.\n\n# Modifications by Alexander Neundorf.\n\n# This file has been renamed to \"FindFreetype.cmake\" instead of the correct\n\n# \"FindFreeType.cmake\" in order to be compatible with the one from KDE4, Alex.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ugh, FreeType seems to use some #include trickery which\n\n# makes this harder than it should be. It looks like they\n\n# put ft2build.h in a common/easier-to-find location which\n\n# then contains a #include to a more specific header in a\n\n# more specific location (#include <freetype/config/ftheader.h>).\n\n# Then from there, they need to set a bunch of #define's\n\n# so you can do something like:\n\n# #include FT_FREETYPE_H\n\n# Unfortunately, using CMake's mechanisms like INCLUDE_DIRECTORIES()\n\n# wants explicit full paths and this trickery doesn't work too well.\n\n# I'm going to attempt to cut out the middleman and hope\n\n# everything still works.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set the user variables\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FREETYPE_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/find_scripts/LibFindMacros.cmake" : {
      "ObjectId" : "69975c51be3f9c5e0ff372a4424f8de3b580ee88",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "cmake/single_file/CMakeLists.txt" : {
      "ObjectId" : "b140d185d86d70428d2a253c90bc18bbf34dd054",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This cmake file is for single cpp file projects that does not have\n\n# CMakeLists.txt file in the project folder.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# user needs to pass definition `AL_APP_FILE` to this script\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# example:\n\n# at/proj/folder > mkdir build\n\n# at/proj/folder > cd build\n\n# at/proj/folder/build > cmake -DAL_APP_FILE=../my_app.cpp path/to/allolib/cmake/single_file\n\n# at/proj/folder/build > make\n\n# at/proj/folder/build > cd ../bin\n\n# at/proj/folder/build > ./my_app\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# allolib's run.sh script will do above process too\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# inlcude allolib target and Gamma target\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# flags\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Item names starting with -, but not -l or -framework, are treated as linker flags.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# when run from Visual Studio, working directory is where the solution is by default\n\n# set it to app output directory\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# startup project is `ALL_BUILD` by default so we change it to app project\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#This is brought in from Gamma external library, but we might need to copy it to bin\n",
        "Line" : 161,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 10
    },
    "empty_project/CMakeLists.txt" : {
      "ObjectId" : "9bdce8d96f813cfc6781004b9a1f4c8b4592e73b",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# app config user specified\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include allolib target\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# flags\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Item names starting with -, but not -l or -framework, are treated as linker flags.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# when run from Visual Studio, working directory is where the solution is by default\n\n# set it to app output directory\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# startup project is `ALL_BUILD` by default so we change it to app project\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "empty_project/app_config.cmake" : {
      "ObjectId" : "3794065a5ba31320b2f13e232da4a533cca83901",
      "LastModified" : "2018-06-29T07:26:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# allolib location\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# list your app files here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# other directories to include\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# other libraries to link\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# definitions\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compile flags\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# linker flags, with `-` in the beginning\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/user_flags/flags.cmake" : {
      "ObjectId" : "77ce48329afcc5b18837d4dd82c31b72159bf5d5",
      "LastModified" : "2019-03-08T22:49:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Other useful variable available are:\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set verbose cmake messages:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# other directories to include. You can use relative paths to the\n\n# source file being built.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# other libraries to link\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# definitions. Prepend -D to any defines\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compile flags\n\n# This flag ignores unused variable warning. You probably don't want to do this...\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# linker flags, with `-` in the beginning\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "extensions/al_ext/openvr/extension.cmake" : {
      "ObjectId" : "da88195fb92362e3af9b1ee23265a3f2dc64d3ea",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# c++14 It's very important to set this for the extension as not\n\n# setting it will cause targets upstream to not use c++14\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Connections to outside\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  # unit tests\n\n#  add_executable(soundfileBufferedRecordTests ${CMAKE_CURRENT_LIST_DIR}/unitTests/utSoundfileBufferedRecord.cpp)\n\n#  target_link_libraries(soundfileBufferedRecordTests al ${SPATIALAUDIO_LINK_LIBRARIES} )\n\n#  target_include_directories(soundfileBufferedRecordTests PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/external/catch\")\n\n#  set_target_properties(soundfileBufferedRecordTests PROPERTIES\n\n#    CXX_STANDARD 14\n\n#    CXX_STANDARD_REQUIRED ON\n\n#    )\n\n#  add_test(NAME soundfileBufferedRecordTests\n\n#    COMMAND $<TARGET_FILE:soundfileBufferedRecordTests> ${TEST_ARGS})\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "extensions/al_ext/soundfile/extension.cmake" : {
      "ObjectId" : "91939c11dc9ad144993e2badb3b964df76240c97",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_library(SNDFILE_LIBRARY\n\n#  NAMES sndfile)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  ${CMAKE_CURRENT_LIST_DIR}/src/al_AmbiFilePlayer.cpp\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  ${CMAKE_CURRENT_LIST_DIR}/al_AmbiFilePlayer.hpp\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# c++14 It's very important to set this for the extension as not\n\n# setting it will cause targets upstream to not use c++14\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Connections to outside\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# unit tests\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "extensions/al_ext/spatialaudio/extension.cmake" : {
      "ObjectId" : "88607e7c44a38014656f84d80a2b7557f3e743e2",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  src/al_OutputMaster.cpp\n\n#  src/al_SoundfileBuffered.cpp\n\n#  src/al_AmbiFilePlayer.cpp\n\n#  src/al_AmbiTunedDecoder.cpp\n\n#  src/al_AmbisonicsConfig.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#  ${CMAKE_CURRENT_LIST_DIR}/src/butter.cpp\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#  alloaudio/al_OutputMaster.hpp\n\n#  alloaudio/al_SoundfileBuffered.hpp\n\n#  alloaudio/al_AmbiFilePlayer.hpp\n\n#  alloaudio/al_AmbiTunedDecoder.hpp\n\n#  alloaudio/al_AmbisonicsConfig.hpp\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# c++14 It's very important to set this for the extension as not\n\n# setting it will cause targets upstream to not use c++14\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# unit tests\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#  add_memcheck_test(convolverTests)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  add_memcheck_test(decorrelationTests)\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "external/glew/build/cmake/CMakeLists.txt" : {
      "ObjectId" : "5d88c276933026bc5dbfc9ea3bd1898c6432bf08",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get version from config/version\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# [ALLOLIB] original glew repo:\r\n\n# set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\r\n\n# set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\r\n\n# set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# [ALLOLIB] allolib output directory:\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# X11 required when builing visualinfo and glewinfo,\r\n\n# but not for Windows or Apple OSX platforms\r\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#### Regal mode ####\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#### OSMesa mode ####\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#### GLEW ####\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# add_library (glew SHARED ${GLEW_PUBLIC_HEADERS_FILES} ${GLEW_SRC_FILES})\r\n\n# set_target_properties (glew PROPERTIES COMPILE_DEFINITIONS \"GLEW_BUILD\" OUTPUT_NAME \"${GLEW_LIB_NAME}\" PREFIX \"${DLL_PREFIX}\"\r\n\n#                                        VERSION ${GLEW_VERSION}\r\n\n#                                        SOVERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR})\r\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add options from visual studio project\r\n\n# [ALLOLIB] removing shared target\r\n\n# target_compile_definitions (glew PRIVATE \"GLEW_BUILD;VC_EXTRALEAN\")\r\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# target_link_libraries (glew LINK_PRIVATE -BASE:0x62AA0000)\r\n\n# kill security checks which are dependent on stdlib\r\n\n# [ALLOLIB] removing shared target\r\n\n# target_compile_options (glew PRIVATE -GS-)\r\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# remove stdlib dependency\r\n\n# [ALLOLIB] removing shared target\r\n\n# target_link_libraries (glew LINK_PRIVATE -nodefaultlib -noentry)\r\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# remove stdlib dependency on windows with GCC and Clang (for similar reasons\r\n\n# as to MSVC - to allow it to be used with any Windows compiler)\r\n\n# [ALLOLIB] removing shared target\r\n\n# target_compile_options (glew PRIVATE -fno-builtin -fno-stack-protector)\r\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# target_link_libraries (glew LINK_PRIVATE -nostdlib)\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# if (BUILD_FRAMEWORK)\r\n\n#   set_target_properties(glew PROPERTIES\r\n\n#     FRAMEWORK TRUE\r\n\n#     FRAMEWORK_VERSION ${GLEW_VERSION}\r\n\n#     MACOSX_FRAMEWORK_IDENTIFIER net.sourceforge.glew\r\n\n#     MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${GLEW_VERSION}\r\n\n#     MACOSX_FRAMEWORK_BUNDLE_VERSION ${GLEW_VERSION}\r\n\n#     XCODE_ATTRIBUTE_INSTALL_PATH \"@rpath\"\r\n\n#     PUBLIC_HEADER \"${GLEW_PUBLIC_HEADERS_FILES}\"\r\n\n#     OUTPUT_NAME GLEW\r\n\n#   )\r\n\n# endif()\r\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# target_link_libraries (glew LINK_PUBLIC ${GLEW_LIBRARIES})\r\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# foreach(t glew glew_s)\r\n\n#   target_include_directories(${t} PUBLIC $<INSTALL_INTERFACE:include>)\r\n\n# endforeach()\r\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# [ALLOLIB] add build interface include directory\r\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# if(NOT DEFINED BUILD_SHARED_LIBS OR BUILD_SHARED_LIBS)\r\n\n#   list(APPEND targets_to_install glew)\r\n\n# endif()\r\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# [ALLOLIB] removing shared target, utils target\r\n\n# if (BUILD_UTILS)\r\n\n#   set (GLEWINFO_SRC_FILES ${GLEW_DIR}/src/glewinfo.c)\r\n\n#   if (WIN32)\r\n\n#     list (APPEND GLEWINFO_SRC_FILES ${GLEW_DIR}/build/glewinfo.rc)\r\n\n#   endif ()\r\n\n#   add_executable (glewinfo ${GLEWINFO_SRC_FILES})\r\n\n#   target_link_libraries (glewinfo glew)\r\n\n#   if (NOT WIN32)\r\n\n#     target_link_libraries(glewinfo ${X11_LIBRARIES})\r\n\n#   endif ()\r\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#   set (VISUALINFO_SRC_FILES ${GLEW_DIR}/src/visualinfo.c)\r\n\n#   if (WIN32)\r\n\n#     list (APPEND VISUALINFO_SRC_FILES ${GLEW_DIR}/build/visualinfo.rc)\r\n\n#   endif ()\r\n\n#   add_executable (visualinfo ${VISUALINFO_SRC_FILES})\r\n\n#   target_link_libraries (visualinfo glew)\r\n\n#   if (NOT WIN32)\r\n\n#     target_link_libraries(visualinfo ${X11_LIBRARIES})\r\n\n#   endif ()\r\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#   install ( TARGETS glewinfo visualinfo\r\n\n#             DESTINATION ${CMAKE_INSTALL_BINDIR})\r\n\n# endif ()\r\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#  Mac OSX has no glu.pc unless optional X11/GLX is installed\r\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# [ALLOLIB] removing shared target\r\n\n# if(WIN32 AND MSVC AND (NOT MSVC_VERSION LESS 1600) AND (NOT CMAKE_VERSION VERSION_LESS \"3.1\"))\r\n\n#     install(\r\n\n#         FILES $<TARGET_PDB_FILE:glew>\r\n\n#         DESTINATION ${CMAKE_INSTALL_LIBDIR}\r\n\n#         CONFIGURATIONS Debug RelWithDebInfo\r\n\n#     )\r\n\n# endif()\r\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "external/glew/build/cmake/CopyImportedTargetProperties.cmake" : {
      "ObjectId" : "a7ade9842ea7bf1b2296eafb6653046243272a59",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CopyImportedTargetProperties\n\n# --------------------------\n\n#\n\n# Copies the `INTERFACE*` and `IMPORTED*` properties from a target\n\n# to another one.\n\n# This function can be used to duplicate an `IMPORTED` or an `ALIAS` library\n\n# with a different name since ``add_library(... ALIAS ...)`` does not work\n\n# for those targets.\n\n#\n\n# ::\n\n#\n\n#   copy_imported_target_properties(<source-target> <destination-target>)\n\n#\n\n# The function copies all the `INTERFACE*` and `IMPORTED*` target\n\n# properties from `<source-target>` to `<destination-target>`.\n\n#\n\n# The function uses the `IMPORTED_CONFIGURATIONS` property to determine\n\n# which configuration-dependent properties should be copied\n\n# (`IMPORTED_LOCATION_<CONFIG>`, etc...)\n\n#\n\n# Example:\n\n#\n\n# Internally the CMake project of ZLIB builds the ``zlib`` and\n\n# ``zlibstatic`` targets which can be exported in the ``ZLIB::`` namespace\n\n# with the ``install(EXPORT ...)`` command.\n\n#\n\n# The config-module will then create the import libraries ``ZLIB::zlib`` and\n\n# ``ZLIB::zlibstatic``. To use ``ZLIB::zlibstatic`` under the standard\n\n# ``ZLIB::ZLIB`` name we need to create the ``ZLIB::ZLIB`` imported library\n\n# and copy the appropriate properties:\n\n#\n\n#   add_library(ZLIB::ZLIB STATIC IMPORTED)\n\n#   copy_imported_target_properties(ZLIB::zlibstatic ZLIB::ZLIB)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# copy configuration-independent properties\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# message(STATUS \"set_target_properties(${dest_target} PROPERTIES ${prop} ${v})\")\n",
        "Line" : 68,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# copy configuration-dependent properties\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# message(STATUS \"set_target_properties(${dest_target} PROPERTIES ${prop} ${v})\")\n",
        "Line" : 84,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 5
    },
    "external/glew/build/cmake/glew-config.cmake" : {
      "ObjectId" : "0b79c0b1455d56fe3dd4df03dc94461dc87c9269",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This config-module creates the following import libraries:\n\n#\n\n# - GLEW::glew shared lib\n\n# - GLEW::glew_s static lib\n\n#\n\n# Additionally GLEW::GLEW will be created as an\n\n# copy of either the shared (default) or the static libs.\n\n#\n\n# Dependending on the setting of BUILD_SHARED_LIBS at GLEW build time\n\n# either the static or shared versions may not be available.\n\n#\n\n# Set GLEW_USE_STATIC_LIBS to OFF or ON to force using the shared\n\n# or static lib for GLEW::GLEW \n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# decide which import library (glew/glew_s)\n\n# needs to be copied to GLEW::GLEW\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if defined, use only static or shared\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# else use static only if no shared\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# CMake doesn't allow creating ALIAS lib for an IMPORTED lib\n\n# so create imported ones and copy the properties\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# message(STATUS \"add_library(${_glew_dest_target} ${_glew_target_type} IMPORTED)\")\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "external/glew/build/cmake/testbuild/CMakeLists.txt" : {
      "ObjectId" : "c8326b49411c5a09bc3b8cb84a1edc1d4d1ae3c1",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# call twice to test multiple call\r\n",
        "Line" : 5,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 1
    },
    "external/glew/build/conan/FindGLEW.cmake" : {
      "ObjectId" : "b054daf0debc42e277ff058e57880b2d947bcec7",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/glew/build/conan/test_package/CMakeLists.txt" : {
      "ObjectId" : "8ec6ecff18c0fa5c65e109cf629f889c3da8af72",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "b283100a82d6c702e58f176e3bd4302a7fc960f6",
      "LastModified" : "2019-04-10T23:57:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#These should be provided by the CMakeFile for the library\n\n# include_directories(${CMAKE_SOURCE_DIR}/external/Gamma)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if (AL_WINDOWS)\n\n#  # CMAKE_BINARY_DIR: contains the driectory where cmake is run\n\n#  set(TEST_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin/)\n\n#  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${TEST_OUTPUT_PATH})\n\n#  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${TEST_OUTPUT_PATH})\n\n#endif (AL_WINDOWS)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if (AL_WINDOWS)\n\n# target_link_libraries(\n\n#   al_tests\n\n#   debug ${al_path}/external/Gamma/lib/Gamma_debug.lib\n\n#   optimized ${al_path}/external/Gamma/lib/Gamma.lib\n\n# )\n\n# else ()\n\n# target_link_libraries(\n\n#   al_tests\n\n#   debug ${al_path}/external/Gamma/lib/libGamma_debug.a\n\n#   optimized ${al_path}/external/Gamma/lib/libGamma.a\n\n# )   \n\n# endif ()\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if (WINDOWS)\n\n# \n\n#   set(post_build_command\n\n#     robocopy ${al_path}/dependencies/glew/bin/Release/x64 ${TEST_OUTPUT_PATH} glew32.dll &\n\n#     robocopy ${al_path}/dependencies/glfw/lib-vc2015 ${TEST_OUTPUT_PATH} glfw3.dll &\n\n#   )\n\n# \n\n#   if (USE_APR)\n\n#   \tlist(APPEND post_build_command\n\n#   \t  robocopy ${al_path}/dependencies/apr/ ${TEST_OUTPUT_PATH} libapr-1.dll &\n\n#   \t)\n\n#   endif (USE_APR)\n\n# \n\n#   if (USE_PORTAUDIO)\n\n#   \tlist(APPEND post_build_command\n\n#   \t  robocopy ${al_path}/dependencies/portaudio/ ${TEST_OUTPUT_PATH} portaudio_x64.dll &\n\n#   \t)\n\n#   endif (USE_PORTAUDIO)\n\n# \n\n#   list(APPEND post_build_command\n\n#   \tIF %ERRORLEVEL% LEQ 1 exit 0\n\n#   )\n\n# \n\n#   add_custom_command(\n\n#     TARGET al_tests\n\n#     POST_BUILD\n\n#     COMMAND ${post_build_command}\n\n#   )\n\n# endif (WINDOWS)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 30
  },
  "ElapsedTime" : 1662
}