{
  "Repository" : "10497735",
  "Revision" : "HEAD",
  "ObjectId" : "005db3528df041d1bbd69a07fa41ef7ea4404c19",
  "CommitTime" : "2019-04-04T08:31:59Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "7a9a7ce1bbf49a9fe85e87eab821207ec3efd9d9",
      "LastModified" : "2018-11-27T16:22:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Setup\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Internal cmake modules\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The RC version must always be four comma-separated numbers\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Installation paths\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default to optimised builds instead of debug ones. Our code has no bugs ;)\n\n# (CMake makes it fairly easy to toggle this back to Debug if needed)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We want to keep our asserts even in release builds so remove NDEBUG\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make sure we get a sane C version\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tell the compiler to be stringent\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make sure we catch these issues whilst developing\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Minimum version is Windows Vista/2008 (6.0)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Versions of CMake before 2.8.7 do not properly support resource compilation\n\n# with MinGW.  Boo!\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# MinGW64 has header support but no library support for IActiveDesktop, so we\n\n# need to check for both the header and library and use our own implementation\n\n# in common/os if either doesn't exist.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# X11 stuff. It's in a if() so that we can say REQUIRED\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check for zlib\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for gettext\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Tools\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Gettext needs iconv\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Headers and libraries (copied from licq)\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Check for libjpeg\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Warn if it doesn't seem to be the accelerated libjpeg that's found\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Check for FLTK\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# No proper handling for extra X11 libs that FLTK might need...\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Xft headers include references to fontconfig, so we need\n\n# to link to that as well\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Check for GNUTLS library\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Check for PAM library\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Generate config.h and make sure the source finds it\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# No interest in building x related parts on Apple\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# uninstall\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "cmake/BuildPackages.cmake" : {
      "ObjectId" : "ec96318d6acd3c351562de36e414a75550343b5b",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included from the top-level CMakeLists.txt.  We just store it\n\n# here to avoid cluttering up that file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Windows installer (Inno Setup)\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# WIN32\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#\n\n# Mac DMG\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# APPLE\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#\n\n# Binary tarball\n\n#\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#UNIX\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#\n\n# Common\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/CMakeMacroLibtoolFile.cmake" : {
      "ObjectId" : "9d04ef5631bc2c3c83095e10d1e8c70b49ac7a9b",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No support for shared libraries, as TigerVNC only needs libtool config\n\n# files for static libraries.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#\n\n# Parse the target_LIB_DEPENDS variable to determine which libraries to put\n\n# into libtool control file as library dependencies, and handle a few corner\n\n# cases.\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# First we need to split up any internal entries\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Assume all entries are shared libs if platform-specific static library\n\n# extension is not matched.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Shared library extension matched, so extract the path and library\n\n# name, then add the result to the libtool dependency libs.  This\n\n# will always be an absolute path, because that's what CMake uses\n\n# internally.\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# No shared library extension matched.  Check whether target is a CMake\n\n# target.\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Target is a CMake target, so ignore (CMake targets are static\n\n# libs in TigerVNC.)\n",
        "Line" : 47,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# All following libraries should be static\n",
        "Line" : 50,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# All following libraries should be dynamic\n",
        "Line" : 53,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Normal library, so use find_library() to attempt to locate the\n\n# library in a system directory.\n",
        "Line" : 56,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Need to remove -l prefix\n",
        "Line" : 59,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Found library. Depending on if it's static or not we might\n\n# extract the path and library name, then add the\n\n# result to the libtool dependency libs.\n",
        "Line" : 70,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# No library found, so ignore target.\n",
        "Line" : 82,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Need to clear FL to get new results next loop\n",
        "Line" : 84,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Detected a static library.  Check whether the library pathname is\n\n# absolute and, if not, use find_library() to get the absolute path.\n",
        "Line" : 89,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Pathname is absolute, so add it to the libtool library dependencies\n",
        "Line" : 94,
        "CharPositionInLine" : 7
      },
      "16" : {
        "Text" : "# as-is.\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Pathname is not absolute, so use find_library() to get the absolute\n\n# path.\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Absolute pathname found.  Add it.\n",
        "Line" : 102,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# No absolute pathname found.  Ignore it.\n",
        "Line" : 105,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# Need to clear FL to get new results next loop\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Write the libtool control file for the static library\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Make sure the timestamp is updated to trigger other make invocations\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Add custom command to symlink the static library so that autotools finds\n\n# the library in .libs.  These are executed after the specified target build.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "cmake/Modules/FindIconv.cmake" : {
      "ObjectId" : "cf268ea0214da6138afeb9d3225515ed8e0b2ecf",
      "LastModified" : "2011-04-28T14:38:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From: http://gitorious.org/gammu/mainline/blobs/master/cmake/FindIconv.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find Iconv \n\n# Once done this will define \n\n# \n\n#  ICONV_FOUND - system has Iconv \n\n#  ICONV_INCLUDE_DIR - the Iconv include directory \n\n#  ICONV_LIBRARIES - Link these to use Iconv \n\n#  ICONV_SECOND_ARGUMENT_IS_CONST - the second argument for iconv() is const\n\n# \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/StaticBuild.cmake" : {
      "ObjectId" : "38177a1c9ba60840851f51fad7865398fc014724",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Best-effort magic that tries to produce semi-static binaries\n\n# (i.e. only depends on \"safe\" libraries like libc and libX11)\n\n#\n\n# Note that this often fails as there is no way to automatically\n\n# determine the dependencies of the libraries we depend on, and\n\n# a lot of details change with each different build environment.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# gettext is included in libc on many unix systems\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# GnuTLS has historically had different crypto backends\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# GnuTLS uses various crypto-api stuff\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# And sockets\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# nanosleep() lives here on Solaris\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# and socket functions are hidden here\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# GnuTLS uses gettext and zlib, so make sure those are always\n\n# included and in the proper order\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# The last variables might introduce whitespace, which CMake\n\n# throws a hissy fit about\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# X11 libraries change constantly on Linux systems so we have to link\n\n# them statically, even libXext. libX11 is somewhat stable, although\n\n# even it has had an ABI change once or twice.\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# This ensures that we don't depend on libstdc++ or libgcc_s\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# libtsan redefines some C++ symbols which then conflict with a\n\n# statically linked libstdc++. Work around this by allowing multiple\n\n# definitions. The linker will pick the first one (i.e. the one\n\n# from libtsan).\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# mingw has some fun circular dependencies that requires us to link\n\n# these things again\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "common/CMakeLists.txt" : {
      "ObjectId" : "e4489f6f1d05d4275f07e4040a946ee5419652a8",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For any convenience libraries that are linked into libvnc.so, we need to\n\n# explicitly build their corresponding sources using PIC.  WIN32 is excluded\n\n# because PIC code does not exist on that platform and MinGW complains if -fPIC\n\n# is passed (additionally, libvnc is not used on Windows.)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "common/Xregion/CMakeLists.txt" : {
      "ObjectId" : "40ca97e464028d014f556052f80e5ffb5e54e551",
      "LastModified" : "2011-06-24T03:51:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "common/network/CMakeLists.txt" : {
      "ObjectId" : "d00ca452f4e1167cd3cd69142ec0a44c2fb7958c",
      "LastModified" : "2018-05-29T14:50:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "common/os/CMakeLists.txt" : {
      "ObjectId" : "7644341a1305501fac61665e84a07dc7abfab259",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "common/rdr/CMakeLists.txt" : {
      "ObjectId" : "989ba2f4bda57ab9a60952560a66e890f8e8f15d",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "common/rfb/CMakeLists.txt" : {
      "ObjectId" : "8e532a28c8bcf9dae177773b3313442e90319994",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "java/CMakeLists.txt" : {
      "ObjectId" : "da24dcfadc69a392b3a17698064124bce9816dbf",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "java/cmake/SignJar.cmake" : {
      "ObjectId" : "067116d44a0a4771ee17f46570a5800235bdfb8a",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/CMakeLists.txt" : {
      "ObjectId" : "256d435729a5ff9d5b750198125f478d5543d318",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "9c8ddef34b73157997b1d82be6161939e4102083",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Gettext support - mostly borrowed from the Licq project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get list of all source files\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Add command to build X.mo from X.po\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "7e0068152dffa4b30f9a09eac52892a97e666d3d",
      "LastModified" : "2018-01-31T14:23:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unix/CMakeLists.txt" : {
      "ObjectId" : "7a1457dfd8c0e2b79b49ff34392df5935770c6f8",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unix/common/CMakeLists.txt" : {
      "ObjectId" : "611e19563aa7f2d83eb7a540aeb618c5afdb3312",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unix/tx/CMakeLists.txt" : {
      "ObjectId" : "67976150f9b440361a50576bb7b31aa1bc98cc55",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unix/vncconfig/CMakeLists.txt" : {
      "ObjectId" : "959681f64684d076b4573922e28571b25b2df606",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unix/vncpasswd/CMakeLists.txt" : {
      "ObjectId" : "a04ed0b9c61e57c70476d0fcec20e28e4d0b4396",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unix/x0vncserver/CMakeLists.txt" : {
      "ObjectId" : "8beade7e4c11ddc76d022f4c8c9fd19996468acf",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unix/xserver/hw/vnc/Makefile.am" : {
      "ObjectId" : "ee18bf9908ad77aa85b3305625d711276ad5083b",
      "LastModified" : "2019-02-13T23:22:06Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Xvnc contains no C++ sources so automake doesn't understand that we\n\n# need to use the C++ compiler to link things. This is the upstream\n\n# recommendation for coaxing automake.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# See Xvnc magic above\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vncviewer/CMakeLists.txt" : {
      "ObjectId" : "3c18646327ed8dcde366ff2cd37e09c7ed4cca61",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Since vncviewer.rc is generated, local includes will be looking\n\n# in the wrong directory. We need to help it out.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "win/CMakeLists.txt" : {
      "ObjectId" : "cd6fc34f9542f2e68cd71235e2e9a68e901fdf3e",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "win/rfb_win32/CMakeLists.txt" : {
      "ObjectId" : "305247a8cb0e61d15e0a9d732c0e674c0cb03925",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "win/vncconfig/CMakeLists.txt" : {
      "ObjectId" : "6ed22c762405a5909c9f8ac94f24c9733dcb63d9",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "win/winvnc/CMakeLists.txt" : {
      "ObjectId" : "113796c89cc5c57c920f67307a999ef3f5a0bd80",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "win/wm_hooks/CMakeLists.txt" : {
      "ObjectId" : "02bdb1f0883ce4bbba8f7ef2747c4d41d816624a",
      "LastModified" : "2019-01-09T09:30:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We want the DLL to be named wm_hooks.dll rather than libwm_hooks.dll\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 28,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2015
}