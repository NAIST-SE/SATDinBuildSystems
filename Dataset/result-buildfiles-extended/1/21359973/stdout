{
  "Repository" : "21359973",
  "Revision" : "HEAD",
  "ObjectId" : "3ccae5b139ea31832e5848b67bbbcd4f22d96cc9",
  "CommitTime" : "2019-04-07T08:18:33Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "66c89ac1e4a8f0a01695a41aa7ef8e75b5a6443c",
      "LastModified" : "2018-05-27T11:06:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Lifish CMakeLists\n\n# by silverweed\n\n#\n\n# Command-line switches:\n\n# - RELEASE: compile in release mode (optimization, hardening and no debug)\n\n# - USE_STATIC_SFML: force to use static SFML libs and dependencies (default on windows)\n\n# - MULTITHREADED: use multithreaded rendering (unstable, do NOT use)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# detect architecture\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setup source files\n\n# main\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# core/ contains the \"game-independent\" source\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# core/collisions contains the classes handling collisions\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# core/components/ contains a collection of generic components\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# core/cutscenes/ contains the cutscene subsystem\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# core/entities/ contains a collection of generic entities\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# core/input/ contains classes handling events and player input\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# lifish/ contains Lifish-specific code\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# lifish/components/ contains all the Lifish-specific Component classes\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# lifish/conf/ contains the gameplay constants\n\n#include_directories(src/lifish/conf)\n\n# lifish/entities/ contains all the Lifish-specific Entity classes\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# lifish/level/ contains classes for managing game levels\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# third_party/ contains all external code\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ui/ contains the ui parts\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# core/debug/ contains debug utils\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# lifish/debug/ contains all the Lifish-specific debugging utilities\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Remove files which aren't being used for now\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\"${CMAKE_SOURCE_DIR}/src/core/cutscenes/Cutscene.cpp\"\n",
        "Line" : 86,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "#\"${CMAKE_SOURCE_DIR}/src/lifish/entities/Torch.cpp\"\n\n#\"${CMAKE_SOURCE_DIR}/src/lifish/entities/TimedLaser.cpp\"\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# Platform-specific source\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add git commit information (thanks, hamcha)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check for ccache\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# SFML\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Use separate threads for logic and rendering (experimental)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# OpenMP\n\n#include(FindOpenMP)\n\n#if(OPENMP_FOUND)\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "#endif()\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Check if we have support for PIE\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pie -fPIE -Wl,-pie\")\n",
        "Line" : 180,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# Debug / Release\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Disable assertions\n",
        "Line" : 192,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Hardening\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Profiling tools\n",
        "Line" : 222,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# Only CPU (tcmalloc can crash the program on some systems)\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Linker\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# No terminal on windows in release mode\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 37
    },
    "cmake/FindGTK3.cmake" : {
      "ObjectId" : "9017c0703c1bd37d424783ccb0251f53d42b23c8",
      "LastModified" : "2015-09-24T16:53:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - FindGTK3.cmake\n\n# This module can find the GTK3 widget libraries and several of its other\n\n# optional components like gtkmm, glade, and glademm.\n\n#\n\n# NOTE: If you intend to use version checking, CMake 2.6.2 or later is\n\n#       required.\n\n#\n\n# Specify one or more of the following components\n\n# as you call this find module. See example below.\n\n#\n\n#   gtk\n\n#   gtkmm\n\n#   glade\n\n#   glademm\n\n#\n\n# The following variables will be defined for your use\n\n#\n\n#   GTK3_FOUND - Were all of your specified components found?\n\n#   GTK3_INCLUDE_DIRS - All include directories\n\n#   GTK3_LIBRARIES - All libraries\n\n#\n\n#   GTK3_VERSION - The version of GTK3 found (x.y.z)\n\n#   GTK3_MAJOR_VERSION - The major version of GTK3\n\n#   GTK3_MINOR_VERSION - The minor version of GTK3\n\n#   GTK3_PATCH_VERSION - The patch version of GTK3\n\n#\n\n# Optional variables you can define prior to calling this module:\n\n#\n\n#   GTK3_DEBUG - Enables verbose debugging of the module\n\n#   GTK3_SKIP_MARK_AS_ADVANCED - Disable marking cache variables as advanced\n\n#   GTK3_ADDITIONAL_SUFFIXES - Allows defining additional directories to\n\n#                              search for include files\n\n#\n\n#=================\n\n# Example Usage:\n\n#\n\n#   Call find_package() once, here are some examples to pick from:\n\n#\n\n#   Require GTK 3.0 or later\n\n#       find_package(GTK3 3.0 REQUIRED gtk)\n\n#\n\n#   if(GTK3_FOUND)\n\n#      include_directories(${GTK3_INCLUDE_DIRS})\n\n#      add_executable(mygui mygui.cc)\n\n#      target_link_libraries(mygui ${GTK3_LIBRARIES})\n\n#   endif()\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2008-2009 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version 0.1 (5/13/2011)\n\n#   * First cut at a GTK3 version (Heavily derived from\n\n#     FindGTK2.cmake)\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================\n\n# _GTK3_GET_VERSION\n\n# Internal function to parse the version number in gtkversion.h\n\n#   _OUT_major = Major version number\n\n#   _OUT_minor = Minor version number\n\n#   _OUT_micro = Micro version number\n\n#   _gtkversion_hdr = Header file to parse\n\n#=============================================================\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================\n\n# _GTK3_FIND_INCLUDE_DIR\n\n# Internal function to find the GTK include directories\n\n#   _var = variable to set\n\n#   _hdr = header file to look for\n\n#=============================================================\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If these ever change, things will break.\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# for /usr/lib/gtk-2.0/include\n",
        "Line" : 140,
        "CharPositionInLine" : 45
      },
      "7" : {
        "Text" : "# fix for Ubuntu == 11.04 (Natty Narwhal)\n",
        "Line" : 152,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# end\n\n# fix for Ubuntu >= 11.10 (Oneiric Ocelot)\n",
        "Line" : 155,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# end\n",
        "Line" : 158,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "#=============================================================\n\n# _GTK3_FIND_LIBRARY\n\n# Internal function to find libraries packaged with GTK3\n\n#   _var = library variable to create\n\n#=============================================================\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Not GTK versions per se but the versions encoded into Windows\n\n# import libraries (GtkMM 2.14.1 has a gtkmm-vc80-2_4.lib for example)\n\n# Also the MSVC libraries use _ for . (this is handled below)\n\n# ********* SOMEONE WITH WINDOWS NEEDS TO CHECK THIS BIT FOR V3 *********\n\n# ********* the plain 3 is needed to get Debian Sid to find the libraries\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add vc80/vc90/vc100 midfixes\n",
        "Line" : 216,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# For some silly reason the MSVC libraries use _ instead of .\n\n# in the version fields\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# And for debug\n",
        "Line" : 258,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Copy list back to original names\n",
        "Line" : 265,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Set debug to release\n",
        "Line" : 315,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#=============================================================\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# main()\n\n#\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Assume they only want GTK\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#\n\n# If specified, enforce version number\n\n#\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# If we can't find the GTK include dir, we can't do version checking\n",
        "Line" : 365,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# If the version check fails, exit out of the module here\n",
        "Line" : 381,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "#\n\n# Find all components\n\n#\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ********* At least on Debian the gdk & gtk libraries\n\n# ********* don't have the -x11 suffix.\n",
        "Line" : 410,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "#\n\n# Solve for the GTK3 version if we haven't already\n\n#\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# Try to enforce components\n\n#\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This gets set to GTK3_FOUND\n",
        "Line" : 495,
        "CharPositionInLine" : 40
      },
      "28" : {
        "Text" : "#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Unset our variables.\n",
        "Line" : 551,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 30
    },
    "cmake/FindGperftools.cmake" : {
      "ObjectId" : "cd990662cf1b197890f1e0662a1cde08b6f03ca3",
      "LastModified" : "2016-07-22T09:36:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tries to find Gperftools.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Gperftools)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Gperftools_ROOT_DIR  Set this variable to the root installation of\n\n#                       Gperftools if the module has problems finding\n\n#                       the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  GPERFTOOLS_FOUND              System has Gperftools libs/headers\n\n#  GPERFTOOLS_LIBRARIES          The Gperftools libraries (tcmalloc & profiler)\n\n#  GPERFTOOLS_INCLUDE_DIR        The location of Gperftools headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindSFML.cmake" : {
      "ObjectId" : "fdea1eb2193e8d5921cbb8c9f5d2bf5362435aed",
      "LastModified" : "2016-08-17T12:23:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the SFML library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n\n# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n\n# example:\n\n#   find_package(SFML COMPONENTS graphics window system) # find the graphics, window and system modules\n\n#\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n\n# example:\n\n#   find_package(SFML COMPONENTS ...)     # no specific version required\n\n#   find_package(SFML 2 COMPONENTS ...)   # any 2.x version\n\n#   find_package(SFML 2.4 COMPONENTS ...) # version 2.4 or greater\n\n#\n\n# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\n\n# Since you have to link yourself all the SFML dependencies when you link it statically, the following\n\n# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed\n\n# description below).\n\n# In case of static linking, the SFML_STATIC macro will also be defined by this script.\n\n# example:\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(SFML 2 COMPONENTS network system)\n\n#\n\n# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n\n# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\n\n# are available for both release and debug modes.\n\n#\n\n# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\n\n# to tell CMake where SFML is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\n\n#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\n\n#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\n\n#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n\n#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n\n#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\n\n# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules\n\n# - SFML_FOUND:        true if all the required modules are found\n\n# - SFML_INCLUDE_DIR:  the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\n\n# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking\n\n#\n\n# example:\n\n#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\n\n#   include_directories(${SFML_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the SFML_STATIC macro if static build was chosen\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the list of search paths for headers and libraries\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the SFML include directory\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the version number\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract the major and minor version numbers from SFML/Config.hpp\n\n# we have to handle framework a little bit differently:\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if we could extract them, compare with the requested version number\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# compare them\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SFML version is < 2.0\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# find the requested modules\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# will be set to false if one of the required modules is not found\n",
        "Line" : 121,
        "CharPositionInLine" : 21
      },
      "12" : {
        "Text" : "# no suffix for sfml-main, it is always a static library\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# release library\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# debug library\n",
        "Line" : 135,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# static release library\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# static debug library\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dynamic release library\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# dynamic debug library\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# choose the entries that fit the requested link type\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# library found\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# if both are found, set SFML_XXX_LIBRARY to contain both\n",
        "Line" : 187,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# debug and not release\n",
        "Line" : 195,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# release and not debug\n",
        "Line" : 200,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# library not found\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# mark as advanced\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to the global list of libraries\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in case of static linking, we must also define the list of all the dependencies of SFML libraries\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# detect the OS\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# start with an empty list\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# macro that searches for a 3rd-party library\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# No lookup in environment variables (PATH on Windows), as they may contain wrong library versions\n",
        "Line" : 245,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# sfml-system\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 257,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# sfml-network\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 274,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# sfml-window\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# find libraries\n",
        "Line" : 285,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# update the list\n",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# sfml-graphics\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# find libraries\n",
        "Line" : 315,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# update the list\n",
        "Line" : 319,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# sfml-audio\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# find libraries\n",
        "Line" : 328,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# update the list\n",
        "Line" : 336,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# handle errors\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# SFML version not ok\n",
        "Line" : 345,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# fatal error\n",
        "Line" : 357,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# error but continue\n",
        "Line" : 360,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# handle success\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    }
  },
  "FileTypes" : {
    "CMAKE" : 4
  },
  "ElapsedTime" : 1057
}