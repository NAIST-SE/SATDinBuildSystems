{
  "Repository" : "6590621",
  "Revision" : "HEAD",
  "ObjectId" : "a926b75224783122db6f6a43988b4e292fcce67a",
  "CommitTime" : "2019-04-12T14:35:01Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1e13def5ede5e6154c3e1410a19fbf52d43a93d8",
      "LastModified" : "2019-03-08T04:18:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compile in release mode by default\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compilation flags.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't always use Wall, since VC's /Wall is ridiculously verbose.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Disable VC secure checks, since these are not really issues.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This is set to ON as of policy CMP0042\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Build output checks\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The version number.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Required Packages\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Allow disabling packet capture mechanism\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Look for libpcap\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Set some Windows specific flags\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We need to link against these libs\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add the NOMINMAX macro to avoid Windows' min and max macros.\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# MinWG need some extra definitions to compile properly (WIN32 for PCAP and WIN32_WINNT version for ws2tcpip.h)\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# *******************\n\n# Compilation options\n\n# *******************\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Always check for C++ features\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# C++11 support\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We only use declval and decltype on gcc/clang as VC fails to build that code,\n\n# at least on VC2013\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# IEEE 802.11 and WPA2 decryption support\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Default this to empty strings\n",
        "Line" : 138,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# Optionally enable TCPIP classes (on by default)\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Search for libboost\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Optionally enable the ACK tracker (on by default)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Optionally enable the TCP stream custom data (on by default)\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Use pcap_sendpacket to send l2 packets rather than raw sockets\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Add a target to generate API documentation using Doxygen\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Configuration file\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# The library output directory\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Support for pkg-config\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Confiugure the uninstall script\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Add uninstall target\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# ******************\n\n# Add subdirectories\n\n# ******************\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Only include googletest if the git submodule has been fetched\n",
        "Line" : 282,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Enable tests and add the test directory\n",
        "Line" : 284,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Make sure we build googletest before anything else\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# **********************************\n\n# CMake project configuration export\n\n# **********************************\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Add all targets to the build-tree export set\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Export the package for use from the build-tree\n\n# (this registers the build-tree with a global CMake-registry)\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Create the libtinsConfig.cmake and libtinsConfigVersion.cmake files\n\n# for the build tree\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Install the libtinsConfig.cmake and libtinsConfigVersion.cmake\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Install the export set for use with the install-tree\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "cmake/Modules/CheckCXXFeatures.cmake" : {
      "ObjectId" : "b7b7f143c10e4086bd7ac8b2556e22daa0673b37",
      "LastModified" : "2019-02-07T12:20:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check which parts of the C++11 standard the compiler supports\n\n#\n\n# When found it will set the following variables\n\n#\n\n#  CXX11_COMPILER_FLAGS         - the compiler flags needed to get C++11 features\n\n#\n\n#  HAS_CXX11_AUTO               - auto keyword\n\n#  HAS_CXX11_AUTO_RET_TYPE      - function declaration with deduced return types\n\n#  HAS_CXX11_CLASS_OVERRIDE     - override and final keywords for classes and methods\n\n#  HAS_CXX11_CONSTEXPR          - constexpr keyword\n\n#  HAS_CXX11_CSTDINT_H          - cstdint header\n\n#  HAS_CXX11_DECLTYPE           - decltype keyword\n\n#  HAS_CXX11_DECLVAL            - declval feature\n\n#  HAS_CXX11_FUNC               - __func__ preprocessor constant\n\n#  HAS_CXX11_INITIALIZER_LIST   - initializer list\n\n#  HAS_CXX11_LAMBDA             - lambdas\n\n#  HAS_CXX11_LIB_REGEX          - regex library\n\n#  HAS_CXX11_LONG_LONG          - long long signed & unsigned types\n\n#  HAS_CXX11_NULLPTR            - nullptr\n\n#  HAS_CXX11_RVALUE_REFERENCES  - rvalue references\n\n#  HAS_CXX11_SIZEOF_MEMBER      - sizeof() non-static members\n\n#  HAS_CXX11_STATIC_ASSERT      - static_assert()\n\n#  HAS_CXX11_VARIADIC_TEMPLATES - variadic templates\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011,2012 Rolf Eike Beer <eike@sf-mail.de>\n\n# Copyright 2012 Andreas Weis\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Each feature may have up to 3 checks, every one of them in it's own file\n\n# FEATURE.cpp              - example that must build and return 0 when run\n\n# FEATURE_fail.cpp         - example that must build, but may not return 0 when run\n\n# FEATURE_fail_compile.cpp - example that must fail compilation\n\n#\n\n# The first one is mandatory, the latter 2 are optional and do not depend on\n\n# each other (i.e. only one may be present).\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n### Check for needed compiler flags\n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindPCAP.cmake" : {
      "ObjectId" : "388b30b68452d684bff5f749ecb3394ab8ab3922",
      "LastModified" : "2016-06-17T16:20:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libpcap include dirs and libraries\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(PCAP)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  PCAP_ROOT_DIR             Set this variable to the root installation of\n\n#                            libpcap if the module has problems finding the\n\n#                            proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  PCAP_FOUND                System has libpcap, include and library dirs found\n\n#  PCAP_INCLUDE_DIR          The libpcap include directories.\n\n#  PCAP_LIBRARY              The libpcap library (possibly includes a thread\n\n#                            library e.g. required by pf_ring's libpcap)\n\n#  HAVE_PF_RING              If a found version of libpcap supports PF_RING\n\n#  HAVE_PCAP_IMMEDIATE_MODE  If the version of libpcap found supports immediate mode\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On x64 windows, we should look also for the .lib at /lib/x64/\n\n# as this is the default path for the WinPcap developer's pack\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check if linking against libpcap also needs to link against a thread library\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "c0357806a3e6f570b7be98e65d251d749e6301db",
      "LastModified" : "2016-06-17T16:20:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure we first build libtins\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e07772e6680d7a05f6a1cf324ca1fbd0734397c2",
      "LastModified" : "2019-02-07T12:20:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install instructions for this target\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extract directory name and remove leading '../'\n",
        "Line" : 230,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "a6e8a06fa8d428d1edc571e56891bba4799fc235",
      "LastModified" : "2019-02-07T12:20:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/active_tests/CMakeLists.txt" : {
      "ObjectId" : "130b119d8e153c82a544d90eaf9080af97a0506e",
      "LastModified" : "2016-06-17T16:20:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/active_tests/src/CMakeLists.txt" : {
      "ObjectId" : "a8e2044ced19224d06d80dceb0f8c0f05a934330",
      "LastModified" : "2016-06-17T16:20:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find pthread library\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link against GoogleTest, libtins and pthread.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/src/CMakeLists.txt" : {
      "ObjectId" : "01b2472299e1ac1f612148c11a98d76a89fa77d3",
      "LastModified" : "2019-02-07T12:20:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use libtins' include directories + test include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find pthread library\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link against GoogleTest, libtins and pthread.\n\n# Pthread is required by GoogleTest\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tests\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 9
  },
  "ElapsedTime" : 1498
}