{
  "Repository" : "3586063",
  "Revision" : "HEAD",
  "ObjectId" : "b0392bfa3c9542dcc5c402da917160ae97d79c59",
  "CommitTime" : "2019-03-11T20:09:13Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e9252dce5c12f6d3a7be5df600ba7a648bf5fc6c",
      "LastModified" : "2018-12-15T02:53:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake configuration for Nana\n\n# Contributors:\n\n#   Andrew Kornilov (ierofant) - original version\n\n#   Jinhao\n\n#   Ariel Vina-Rodriguez (qPCR4vir)\n\n#   (King_DuckZ)\n\n#   Robert Hauck - Enable support for PNG/Freetype\n\n#   Pavel O. - fix compilation with boost::filesystem (#281)\n\n#   Frostbane - Add option for compiling a shared library (#263,#265)\n\n#   Qiangqiang Wu - Add biicode support: todo migrate to https://conan.io/\n\n#\n\n# Nana uses some build systems: MS-VS solution, MAKE, bakefile, codeblock, etc. manually optimized.\n\n# Maybe CMake will be used in the future to generate some of them in the central nana repository.\n\n# But by now CMake is just one option and all the other build system\n\n# files/projects distributed are manually writen. This current CMakeList.txt reflect this fact and that is why we don't\n\n# generate here configurated *.h files or explicitly enumerate the sources files: anyway this CM-list\n\n# will be \"touched\" to force a re-run of cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# https://cliutils.gitlab.io/modern-cmake/\n\n# https://cmake.org/cmake-tutorial/\n\n# https://cmake.org/cmake/help/v3.12/module/CMakeDependentOption.html?highlight=cmakedependentoption\n\n# cmake 3.12 have more better modern c++ support\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################     Main setting of Nana targets, sources and installs    #####################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  need after cxx_std_14 or cxx_std_17 ??\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###    collect all source sub-directories in a list to avoid duplication    ###\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# By using CMAKE_CURRENT_LIST_DIR here you can compile and consume nana by just:\n\n# add_subdirectory(../nana ../cmake-nana-build-${CONFIG} ) or simmilar\n\n# in your own CMakeLists.txt, and them :\n\n# target_link_libraries(yourApp PRIVATE nana )\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# collect all source files in the source-sub-dir\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# todo: use GLOB to add headers too ??\n",
        "Line" : 82,
        "CharPositionInLine" : 62
      },
      "8" : {
        "Text" : "###    collect all headers sub-directories in a list to avoid duplication   ###\n\n# To show .h files in Visual Studio, add them to the list of sources in add_executable / add_library / target_sources\n\n# and Use SOURCE_GROUP if all your sources are in the same directory\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# todo: use GLOB to add headers too !!!!!!!\n",
        "Line" : 113,
        "CharPositionInLine" : 69
      },
      "10" : {
        "Text" : "###  Some nana compilation options   ###\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# deprecate?\n",
        "Line" : 118,
        "CharPositionInLine" : 117
      },
      "12" : {
        "Text" : "######## Nana options\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# really ?\n",
        "Line" : 122,
        "CharPositionInLine" : 61
      },
      "14" : {
        "Text" : "# todo: enable_testing()       #  ??\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# includes and libs, or just expose the nana target\n\n# windows, unix, linux, apple, ...\n\n# static vs shared\n\n# VC, gcc, clang\n",
        "Line" : 129,
        "CharPositionInLine" : 68
      },
      "16" : {
        "Text" : "############# Optional libraries    #####################\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Just for information\n",
        "Line" : 139,
        "CharPositionInLine" : 68
      },
      "CommentCount" : 18
    },
    "build/cmake/Modules/FindFontconfig.cmake" : {
      "ObjectId" : "e6fa81d8ef73601bc8171c2537efd022e02fd841",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the  Fontconfig\n\n# Once done this will define\n\n#\n\n#  FONTCONFIG_FOUND - system has Fontconfig\n\n#  FONTCONFIG_INCLUDE_DIR - The include directory to use for the fontconfig headers\n\n#  FONTCONFIG_LIBRARIES - Link these to use FONTCONFIG\n\n#  FONTCONFIG_DEFINITIONS - Compiler switches required for using FONTCONFIG\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products \n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "build/cmake/OS.cmake" : {
      "ObjectId" : "022e1e8338d28796d8f3c0e49f15e3d3a5b971a7",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### OS\n\n# https://blog.kowalczyk.info/article/j/guide-to-predefined-macros-in-c-compilers-gcc-clang-msvc-etc..html\n\n# http://nadeausoftware.com/articles/2012/01/c_c_tip_how_use_compiler_predefined_macros_detect_operating_system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# todo: why not simple test for _WIN32 in code??\n",
        "Line" : 6,
        "CharPositionInLine" : 53
      },
      "2" : {
        "Text" : "# ??\n",
        "Line" : 7,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "# Global MSVC definitions. You may prefer the hand-tuned sln and projects from the nana repository.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Change the MSVC Compiler flags\n",
        "Line" : 13,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# deprecated ?????\n",
        "Line" : 32,
        "CharPositionInLine" : 65
      },
      "6" : {
        "Text" : "# ??? not added by compilers? use  __APPLE__  ?\n",
        "Line" : 40,
        "CharPositionInLine" : 55
      },
      "7" : {
        "Text" : "# X11  - todo test PRIVATE\n",
        "Line" : 48,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "# Freetype - todo test PRIVATE\n",
        "Line" : 58,
        "CharPositionInLine" : 42
      },
      "CommentCount" : 9
    },
    "build/cmake/compilers.cmake" : {
      "ObjectId" : "8cc53765059c8ca9f8b93b067ada76f1f426e267",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### Compilers\n\n#\n\n# Using gcc: gcc 4.8 don't support C++14 and make_unique. You may want to update at least to 4.9.\n\n# gcc 5.3 and 5.4 include filesytem, but you need to add the link flag: -lstdc++fs\n\n#\n\n# In Windows, with CLion Allways check in File/Settings.../toolchains\n\n# You could install MinGW-w64 from the TDM-GCC Compiler Suite for Windows which will update you to gcc 5.1.\n\n# It is posible to follow https://computingabdn.com/softech/mingw-howto-install-gcc-for-windows/\n\n# and install MinGW with gcc 7.1 with has STD_THREADS and fs, from: https://sourceforge.net/projects/mingw-w64/files/\n\n#\n\n# see at end of:  https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dynamic_or_shared.html\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  AND NOT MINGW??\n",
        "Line" : 15,
        "CharPositionInLine" : 75
      },
      "2" : {
        "Text" : "#  todo - test this\n",
        "Line" : 20,
        "CharPositionInLine" : 54
      },
      "3" : {
        "Text" : "#    target_compile_options(nana PUBLIC -pthread)\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# target_link_libraries(nana PRIVATE stdc++fs)    # ??\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# APPLE Clang\n",
        "Line" : 39,
        "CharPositionInLine" : 77
      },
      "CommentCount" : 6
    },
    "build/cmake/enable_audio.cmake" : {
      "ObjectId" : "77ca7a4f89b349ced55e3fbe8cc6eb37151a54a6",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# todo: decide - PUBLIC vs PRIVATE\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ? https://github.com/hintjens/demidi/blob/master/Findasound.cmake\n",
        "Line" : 7,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 2
    },
    "build/cmake/enable_jpeg.cmake" : {
      "ObjectId" : "008df7dc007630b0b2e08d64076f59073bebacaa",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# todo: decide - PUBLIC vs PRIVATE\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ... Defining HAVE_BOOLEAN before including jpeglib.h should make it work...\n",
        "Line" : 20,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "build/cmake/enable_png.cmake" : {
      "ObjectId" : "7d3a51346694f9a0f3ecf19be55b7dd9dd1a0700",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# todo: decide - PUBLIC vs PRIVATE\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# target_include_directories  (nana SYSTEM   PUBLIC PNG::PNG)    # ??\n\n# target_compile_definitions  (nana          PUBLIC USE_LIBPNG_FROM_OS)\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# provided by nana?\n",
        "Line" : 18,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 3
    },
    "build/cmake/install_nana.cmake" : {
      "ObjectId" : "2b6851d664341b31070f21a5cdab4bc9db8be806",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install the include directories too.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this is the prefered method to consume nana directly with some specific bulid system\n\n# Is your responsability to ensure all compiler options are compatible with the compilation\n\n# of the project linking to the nana lib here generated\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Actually in DESTDIR/CMAKE_INSTALL_PREFIX/lib but in windows there is no DESTDIR/ part.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# in ${CMAKE_INSTALL_PREFIX}/include/nana\n",
        "Line" : 16,
        "CharPositionInLine" : 68
      },
      "4" : {
        "Text" : "# this is the prefered method to consume nana with cmake\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "build/cmake/select_filesystem.cmake" : {
      "ObjectId" : "10c9836f9f7f5264f1683eac74c0a8d63dfccc87",
      "LastModified" : "2018-10-06T18:31:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The ISO C++ File System Technical Specification (ISO-TS, or STD) is optional.\n\n#              http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\n\n# This is not a workaround, but an user option.\n\n# The library maybe available in the std library in use or from Boost (almost compatible)\n\n#              http://www.boost.org/doc/libs/1_60_0/libs/filesystem/doc/index.htm\n\n# or you can choose to use the (partial, but functional) implementation provided by nana.\n\n# If you include the file <nana/filesystem/filesystem.hpp> or <nana/filesystem/filesystem_ext.hpp>\n\n# the selected option will be set by nana into std::experimental::filesystem\n\n# By default Nana will try to use the STD. If STD is not available and NANA_CMAKE_FIND_BOOST_FILESYSTEM\n\n# is set to ON nana will try to use boost if available. Nana own implementation will be use if none of\n\n# the previus were selected or available.\n\n# You can change that default if you change one of the following\n\n# (please don't define more than one of the _XX_FORCE options):\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# https://cmake.org/cmake/help/git-master/module/FindBoost.html\n\n# Implicit dependencies such as Boost::filesystem requiring Boost::system will be automatically detected and satisfied,\n\n# even if system is not specified when using find_package and if Boost::system is not added to target_link_libraries.\n\n# If using Boost::thread, then Thread::Thread will also be added automatically.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# SYSTEM - ignore warnings from here\n",
        "Line" : 35,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# ?? SYSTEM\n",
        "Line" : 36,
        "CharPositionInLine" : 81
      },
      "4" : {
        "Text" : "# target_include_directories  (nana SYSTEM PUBLIC Boost::Boost)\n\n# message(\"boost found true\")\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# todo   test for std    (for now just force nana or boost if there no std)\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# todo if not test for boost\n\n# if not add nana filesystem\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "build/cmake/shared_libs.cmake" : {
      "ObjectId" : "0734b47a5f3a2ced7a120b334bb5b246d64fd2e6",
      "LastModified" : "2018-10-02T16:50:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# todo test\n",
        "Line" : 4,
        "CharPositionInLine" : 24
      },
      "1" : {
        "Text" : "# mingw: If dlltool is found the def and lib file will be created\n",
        "Line" : 11,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "#generate the lib and def files needed by msvc\n",
        "Line" : 18,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "#  AND NOT MINGW??\n",
        "Line" : 38,
        "CharPositionInLine" : 75
      },
      "4" : {
        "Text" : "#  -static ?? cmake knows BUILD_SHARED_LIBS\n",
        "Line" : 45,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 5
    },
    "build/cmake/verbose.cmake" : {
      "ObjectId" : "6d95eb9eb86831d01dd05334311a7d2d0363f550",
      "LastModified" : "2018-10-06T18:31:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###  Just for information:    ########################################\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# see: https://cmake.org/cmake/help/v3.12/manual/cmake-properties.7.html#properties-on-targets\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#message (\"\")\n\n# cmake_print_variables(SOURCES)\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 11
  },
  "ElapsedTime" : 1246
}