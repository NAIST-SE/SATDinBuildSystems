{
  "Repository" : "29263528",
  "Revision" : "HEAD",
  "ObjectId" : "ec16f6bda3d293f6af9c6fa1d2ef787cbbca7ecc",
  "CommitTime" : "2019-04-17T03:51:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0c30c55c045b6b46ddf3a16c913c78b5f716fd8d",
      "LastModified" : "2019-04-17T03:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default to building the Debug configuration.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the default set of bindings to build.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include standard CMake modules.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get the SDK path for OSX.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compute the number of processors.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include custom modules.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Sanity check our source directory to make sure that we are not trying to\n\n# generate an in-tree build (it pollutes the source tree with a lot of CMake\n\n# related files).\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###\n\n# Build Parameters\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user to\n\n# override.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###\n\n# Common Macros\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Shared output directories for executables and libraries.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###\n\n# Support Tools\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check if we should build the Swift bindings.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Find swiftc on OSX using `xcrun --find swiftc` and `find_package` on Linux.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "###\n\n# Setup compiler and project build settings\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find includes in the source directory.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# On FreeBSD, /usr/local/* is not used by default. In order to build LLVM\n\n# with sqlite3, etc., we must add /usr/local paths.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Xcode: Use libc++ and c++14 using proper build settings.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Force usage of Clang.\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Use C++'11.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Use libc++.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Enable some warnings not enabled by default.  These\n\n# mostly reset clang back to its default settings, since\n\n# Xcode passes -Wno... for many warnings that are not enabled\n\n# by default.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Disable RTTI.\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Disable exceptions.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Disable headermaps.\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Disable unknown pragma warnings (e.g. for #pragma mark).\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# TODO: these warnings come from llvmSupport. Since we don't want to diverge from llvmSupport by\n\n# addressing these warnings , disable these for now to clean the build log.\n\n# If/when we move to use LLVM's own llvmSupport, we should reenable these warnings.\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# POSIX name for this item is deprecated.\n\n# Signed conversion.\n\n# Possible loss of data conversions.\n\n# Operator new with no matching delete found.\n\n# Forcing value to bool 'true' or 'false'.\n\n# Unary minus applied to unsigned type.\n\n# 'inline' used more than once.\n",
        "Line" : 173,
        "CharPositionInLine" : 52
      },
      "29" : {
        "Text" : "# Compile with C++14, without RTTI or exceptions.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Enable additional Clang warnings.\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# On BSD and Linux, always build with PIC.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# On Linux, we may need to include a workaround for legacy libstdc++.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Add additional warnings.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Check for -Wunreachable-code-aggressive instead of -Wunreachable-code, as that indicates\n\n# that we have the newer -Wunreachable-code implementation.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Release configuration has assertions disabled, enable them if asked to.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Add an always out-of-date target to get the Swift compiler version.\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "###\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Process CMakeLists files for our subdirectories.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "cmake/modules/FindFileCheck.cmake" : {
      "ObjectId" : "ce6d8f18c7e9e084200b46714e6621f7085ef941",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Usage: find_package(FileCheck)\n\n#\n\n# If successful the following variables will be defined\n\n# FILECHECK_FOUND\n\n# FILECHECK_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments, this will also set FILECHECK_FOUND to true\n\n# if FILECHECK_EXECUTABLE exists.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindLit.cmake" : {
      "ObjectId" : "49d2881ef6968e83666d90aa66b7ff67af6766d0",
      "LastModified" : "2015-11-02T22:42:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Usage: find_package(lit)\n\n#\n\n# If successful the following variables will be defined\n\n# LIT_FOUND\n\n# LIT_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments, this will also set LIT_FOUND to true\n\n# if LIT_EXECUTABLE exists.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindSwiftc.cmake" : {
      "ObjectId" : "4e75f06571b27eb10893607ed66d472da71efcda",
      "LastModified" : "2016-04-25T23:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Usage: find_package(Swiftc)\n\n#\n\n# If successful the following variables will be defined\n\n# SWIFTC_FOUND\n\n# SWIFTC_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments, this will also set SWIFTC_FOUND to true\n\n# if SWIFTC_EXECUTABLE exists.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/Utility.cmake" : {
      "ObjectId" : "b287975a6ce05db871ffac9c97d3d969242d64fb",
      "LastModified" : "2019-04-17T03:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set each output directory according to ${CMAKE_CONFIGURATION_TYPES}.\n\n# Note: Don't set variables CMAKE_*_OUTPUT_DIRECTORY any more,\n\n# or a certain builder, for eaxample, msbuild.exe, would be confused.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing if *_OUTPUT_INTDIR is empty.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# moddir -- corresponding to LIBRARY_OUTPUT_DIRECTORY.\n\n# It affects output of add_library(MODULE).\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# DLL platform\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add headers to generated project files.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add internal headers.\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add public headers.\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Find the library name by finding its relative path.\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Generic support for adding a unittest.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compile swift sources to a dynamic framework.\n\n# Usage:\n\n# target          # Target name\n\n# name            # Swift Module name\n\n# deps            # Target dependencies\n\n# sources         # List of sources\n\n# additional_args # List of additional args to pass\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Remove old file and start writing new one.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# FIXME: Find a better way to handle build types.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Enable autolinking so clients that import this library automatically get the\n\n# -l<library-name> flag.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Compile swiftmodule.\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Link and create dynamic framework.\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Add rpath to lookup the linked dylibs adjacent to itself.\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Runpath for finding Swift core libraries in the toolchain.\n\n# FIXME: Ideally, this should be passed from the swift-ci invocation.\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Add the target.    \n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "docs/Makefile" : {
      "ObjectId" : "95396c0e4b65578c07e93f175cfe3a56beafa9b4",
      "LastModified" : "2016-04-25T23:24:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "lib/Basic/CMakeLists.txt" : {
      "ObjectId" : "de3ad0151795334a50a7cc6fc69d99b0c99a9d03",
      "LastModified" : "2019-01-03T22:26:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/BuildSystem/CMakeLists.txt" : {
      "ObjectId" : "e73116eaee17769d7a5de2967d42cf724ea1f273",
      "LastModified" : "2019-03-13T17:05:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "72ead9ff15b2ab037c8f24be32ef958bc01962b3",
      "LastModified" : "2016-04-25T23:24:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Commands/CMakeLists.txt" : {
      "ObjectId" : "838968a95aa998026a96adafa73f3988dbec861d",
      "LastModified" : "2016-04-25T23:24:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Core/CMakeLists.txt" : {
      "ObjectId" : "8c5c0cd354dedfe454b4e7468bec4f6830f92531",
      "LastModified" : "2016-04-25T23:24:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Ninja/CMakeLists.txt" : {
      "ObjectId" : "0c17f4bf7e6f2edf7370fed1b0ecc70fee0ec7dc",
      "LastModified" : "2016-11-17T16:04:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/llvm/CMakeLists.txt" : {
      "ObjectId" : "fe4908847a5273084b69f1a1a511cf22219b4e2b",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/llvm/Demangle/CMakeLists.txt" : {
      "ObjectId" : "f9d2a455f81bc3121083d6dffd7f7388d0f1a5eb",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/llvm/Support/CMakeLists.txt" : {
      "ObjectId" : "56db37c603e9dc3bfb65a58f75d06a51f06e096b",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable implicit-fallthrough, if used.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "perftests/CMakeLists.txt" : {
      "ObjectId" : "cb056511429a9d1ff9fab8877270cf011bd2a653",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "perftests/Xcode/PerfTests/CMakeLists.txt" : {
      "ObjectId" : "102823366ba2d61a8f4f6f4f48d854130b2c4f4a",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Mac OS X platform path.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the Mac OS X SDK path.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Run a custom command to fixup CMake's broken bundle CFBundleExecutable.\n\n#\n\n# http://www.cmake.org/Bug/view.php?id=15485\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "products/CMakeLists.txt" : {
      "ObjectId" : "d15a02ad1180ea58368d973fe9cef95a18a887f9",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Command line tools.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Public API products.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "products/libllbuild/CMakeLists.txt" : {
      "ObjectId" : "28d13f2774459fcd8dc8f09b23e7c235b5268f53",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On OS X, add a target to create the llbuild.framework product.\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Manually set up the remaining framework structure.\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Copy the public headers.\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Copy the framework module map.\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Create the appropriate symlinks.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add a custom target for the setup tasks.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "products/llbuild/CMakeLists.txt" : {
      "ObjectId" : "6ec9d16371027c2dd736176f84e4ac1df169fd73",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "products/llbuildSwift/CMakeLists.txt" : {
      "ObjectId" : "369d26941876b2ea5968b5a17df5fcf45818af57",
      "LastModified" : "2019-04-17T03:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set sources.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link C API.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On Linux, use Foundation and Dispatch libraries built and provided by swift's build-script.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add swift bindings target if swift compiler is present.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install the library.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install both libllbuild and libllbuildSwift.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add install target.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "products/swift-build-tool/CMakeLists.txt" : {
      "ObjectId" : "eeabe85262639de48008a510d276a1f05d2492a1",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "3f89456919879a7fa7f7bd9ed824c796ba06db70",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set up some build variables used to configure the output directories (which\n\n# may be dynamic in some generators, like Xcode).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up local 'lit' configuration\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add a target for running all tests.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "unittests/Basic/CMakeLists.txt" : {
      "ObjectId" : "42797547ed2dda2cdd03e04cafbcc1b28549c261",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/BuildSystem/CMakeLists.txt" : {
      "ObjectId" : "9d470a5fcdda02742e3c6ba3f806875b9361a59e",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CAPI/CMakeLists.txt" : {
      "ObjectId" : "8a39dd0c5720e7daf375cc5f9c7d85bf42bce0da",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CMakeLists.txt" : {
      "ObjectId" : "5b75ae4da57561e21bb7d8a20e77c2972822350e",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Core/CMakeLists.txt" : {
      "ObjectId" : "458fbd63f43ad0b70dce41802c7af3b3eeeb2ded",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Ninja/CMakeLists.txt" : {
      "ObjectId" : "109528b07a675784a5f76448c356ee1034c3ae7f",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/ptreetime/libptreetime/Makefile" : {
      "ObjectId" : "de3b4b0f39007b32d4f41dd72a45e16d858717e8",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#===- Makefile -------------------------------------------------------------===#\n\n#\n\n# This source file is part of the Swift.org open source project\n\n#\n\n# Copyright (c) 2017 Apple Inc. and the Swift project authors\n\n# Licensed under Apache License v2.0 with Runtime Library Exception\n\n#\n\n# See http://swift.org/LICENSE.txt for license information\n\n# See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors\n\n#\n\n#===------------------------------------------------------------------------===#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/unittest/CMakeLists.txt" : {
      "ObjectId" : "79e767a301880e8b52b6fc4bd704a6ecdbe41e81",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# Experimental CMake build script for Google Test.\n\n#\n\n# Consider this a prototype.  It will change drastically.  For now,\n\n# this is only for people on the cutting edge.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n\n########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where gtest's .h files can be found.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Visual Studio 2012 only supports up to 8 template parameters in\n\n# std::tr1::tuple by default, but gtest requires 10\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "utils/unittest/UnitTestMain/CMakeLists.txt" : {
      "ObjectId" : "73b2ebdcb7675b703a6f7ac3d66edf4c15389329",
      "LastModified" : "2019-02-14T08:04:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 30,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1888
}