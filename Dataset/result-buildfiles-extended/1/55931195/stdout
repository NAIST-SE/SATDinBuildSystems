{
  "Repository" : "55931195",
  "Revision" : "HEAD",
  "ObjectId" : "7f41ac86920ebfb156c9b64301b6acf0163cd9fd",
  "CommitTime" : "2019-04-18T14:04:46Z",
  "Files" : {
    "3rdParty/isl/Makefile.am" : {
      "ObjectId" : "4852c7e9182d65b7ab3e07606ea06d3b6f1d7dd8",
      "LastModified" : "2018-06-13T22:16:48Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0,
      "Errorlog" : "line 423:23 token recognition error at: '\"; then \\\\n\\t\\trm -f $(DESTDIR)$(libdir)/$$libisl-gdb.py; \\\\n\\tfi\\n\u0000'\n"
    },
    "3rdParty/isl/doc/Makefile.am" : {
      "ObjectId" : "1d61dd7775a487929a6b89cc888502c1bbad4f5d",
      "LastModified" : "2018-06-13T22:16:48Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdParty/isl/interface/Makefile.am" : {
      "ObjectId" : "b61709a4f509e2e72519842aa02b79d46da76cc0",
      "LastModified" : "2018-06-13T22:16:48Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# dummy library that captures the dependencies on all headers\n\n# that are relevant for the bindings\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "4ccd57954b2f2a71a4450e4290ca00c87f10e983",
      "LastModified" : "2019-04-15T23:38:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add CMake header files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add CMake cpp files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### CMAKE FILE INTERNALS ###\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check if it is a number\n",
        "Line" : 67,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "# transforms the list of the format (program_name/program_name[tag0,tag1,..,tagn]) into a list\n\n# containing a list of \"program_name property0 property1 property2 .. propertyn\"\n\n# the list can contain as many tags as necessary\n\n# the number of properties is fixed and is in the order given below\n\n# current tags are : gpu, mpi.\n\n# current properties are : is_gpu(boolean), is_mpi(boolean)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The list should always have four elements (name <USE_GPU> <USE_MPI> <NUM_MPI_RANKS>)\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check if we need to use the GPU\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Check if we need to use MPI\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Check that MPI variables are set correctly if we need it\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Require LLVM 5.0 or greater to keep in line with Halide\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is an MPI test (sanity check that we want to use MPI though)\n",
        "Line" : 282,
        "CharPositionInLine" : 24
      },
      "11" : {
        "Text" : "# configure the options so files are copied on the fly as necessary.\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# configure the options so files are copied on the fly as necessary.\n",
        "Line" : 313,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# configure the options so files are copied on the fly as necessary.\n",
        "Line" : 340,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# This is an MPI test (sanity check that we want to use MPI though)\n",
        "Line" : 365,
        "CharPositionInLine" : 24
      },
      "15" : {
        "Text" : "# configure the options so files are copied on the fly as necessary.\n",
        "Line" : 366,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# This is an MPI test (sanity check that we want to use MPI though)\n",
        "Line" : 382,
        "CharPositionInLine" : 24
      },
      "17" : {
        "Text" : "# configure the options so files are copied on the fly as necessary.\n",
        "Line" : 383,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Individual benchmarks are moved to benchmarks/CMakeLists.txt to reduce clutter\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "e2a13562e4dc959858c83fcea5feca0d0fff4036",
      "LastModified" : "2019-04-15T23:38:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/blocks/LSTM/cpu/CMakeLists.txt" : {
      "ObjectId" : "dabc889905da93aa71b58e1f83dc1f536d030c82",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/blocks/LSTM/gpu/CMakeLists.txt" : {
      "ObjectId" : "f8fa051e67e18f2e7fce15eb6d4a04be74e58460",
      "LastModified" : "2019-04-17T17:42:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(gemm_generator_name ${benchmark_name}_gemm_generator)\n\n#set(gemm_object_files gemm.o gemm.o_gpu.o gemm.o_cpu.o)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_executable(${gemm_generator_name} gemm_generator.cpp)\n\n#target_link_libraries(${gemm_generator_name} tiramisu ${HalideLib} ${ISLLib} ${LINK_FLAGS} cuda_wrapper ${CUDA_LIBRARIES} ${CUDA_CUBLAS_LIBRARIES})\n\n#add_custom_command(OUTPUT ${gemm_object_files} COMMAND ${gemm_generator_name} DEPENDS ${gemm_generator_name})\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "benchmarks/DNN/blocks/LSTM/gpu_lib/CMakeLists.txt" : {
      "ObjectId" : "6960acc220021204f789903b959f60d8bbe27b78",
      "LastModified" : "2019-04-15T23:38:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/blocks/conv2/CMakeLists.txt" : {
      "ObjectId" : "690c4f5d59e3fc64d2f02fec06da52f344abeffe",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/blocks/fusedresNet/CMakeLists.txt" : {
      "ObjectId" : "9c98a7e46baa25cb5b86c1728355276adf5b9c82",
      "LastModified" : "2019-01-28T20:14:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/blocks/vggBlock/CMakeLists.txt" : {
      "ObjectId" : "d1871f127c1b95f4d585e42e892e0a4ba8602978",
      "LastModified" : "2019-01-28T20:14:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/layers/bn/cpu/CMakeLists.txt" : {
      "ObjectId" : "f491ebe7816aeb48178f1d0321a3af1dba1c2715",
      "LastModified" : "2019-03-11T14:06:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/layers/convolution/direct/cpu/CMakeLists.txt" : {
      "ObjectId" : "b8512cf6ca03f8147fd20ce0e43728f9ea4fa13c",
      "LastModified" : "2019-03-11T14:06:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/DNN/layers/maxpool/cpu/CMakeLists.txt" : {
      "ObjectId" : "0fde8ffbb93f9d2770bde121b54a7f33506a14d3",
      "LastModified" : "2019-03-11T14:06:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ldl -g -lz -lpthread -std=c++11 -O3 -fno-rtti\")\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "benchmarks/DNN/layers/relu/cpu/CMakeLists.txt" : {
      "ObjectId" : "65de773249556c27f6b0e6637db5ccd4970ed276",
      "LastModified" : "2019-03-11T14:06:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/framework_benchmarking/linear_algebra/AlphaZ-gemm/tiled-ikj/openmp/Makefile" : {
      "ObjectId" : "1c0b8751b0a868304821c3792a4b373eed12cf8b",
      "LastModified" : "2019-03-11T14:06:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "benchmarks/linear_algebra/blas/level3/sgemm/gpu/CMakeLists.txt" : {
      "ObjectId" : "b938c05b6e1f34d3c497fba6641b74fffbb03a48",
      "LastModified" : "2019-04-17T19:57:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/linear_algebra/cg/Makefile" : {
      "ObjectId" : "845073e5ee6648442a263df38e017f790c8ad586",
      "LastModified" : "2019-03-11T14:06:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# @HEADER\n\n# ***********************************************************************\n\n#  \n\n#                HPCCG: Simple Conjugate Gradient Benchmark Code\n\n#                  Copyright (2006) Sandia Corporation\n\n#  \n\n#  Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive\n\n#  license for use of this work by or on behalf of the U.S. Government.\n\n#  \n\n#  BSD 3-Clause License\n\n#  \n\n#  Redistribution and use in source and binary forms, with or without\n\n#  modification, are permitted provided that the following conditions are met:\n\n#  \n\n#  * Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#  \n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#  \n\n#  * Neither the name of the copyright holder nor the names of its\n\n#    contributors may be used to endorse or promote products derived from\n\n#    this software without specific prior written permission.\n\n#  \n\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n\n#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#  \n\n#  Questions? Contact Michael A. Heroux (maherou@sandia.gov) \n\n#  \n\n#  ************************************************************************\n\n# @HEADER\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Simple hand-tuned makefile.  Modify as necessary for your environment.\n\n# Questions? Contact Mike Heroux (maherou@sandia.gov).\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# 0) Specify compiler and linker:\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CXX=mpicxx\n\n#LINKER=mpicxx\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 1) Build with MPI or not?\n\n#    If you want to run the program with MPI, make sure USE_MPI is set \n\n#    to -DUSING_MPI\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#USE_MPI = -DUSING_MPI\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 2) MPI headers:  \n\n#    If you:\n\n#    - Are building MPI mode (-DUSING_MPI is set above).\n\n#    - Do not have the MPI headers installed in a default search directory and\n\n#    - Are not using MPI compiler wrappers\n\n#    Then specify the path to your MPI header file (include a -I)\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#MPI_INC = -I/usr/MPICH/SDK.gcc/include\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# 3) Specify C++ compiler optimization flags (if any)\n\n#    Typically some reasonably high level of optimization should be used to \n\n#    enhance performance.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#IA32 with GCC: \n\n#CPP_OPT_FLAGS = -O3 -funroll-all-loops -malign-double -ftree-vectorizer-verbose=2\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# 4) MPI library:\n\n#    If you:\n\n#    - Are building MPI mode (-DUSING_MPI is set above).\n\n#    - Do not have the MPI library installed a default search directory and\n\n#    - Are not using MPI compiler wrappers for linking\n\n#    Then specify the path to your MPI library (include -L and -l directives)\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#MPI_LIB = -L/usr/MPICH/SDK.gcc/lib -lmpich\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# 5) Build with OpenMP or not?\n\n#    If you want to run the program with OpenMP, make sure USING_OMP is set\n\n#    to -DUSING_OMP\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#USE_OMP = \n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# 6) OpenMP Compiler argument\n\n#    GCC and Intel compilers require -fopenmp and -openmp, resp.  Other compilers may differ.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#OMP_FLAGS = -openmp\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# 7) System libraries: (May need to add -lg2c before -lm)\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# 6) Specify name if executable (optional):\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "################### Derived Quantities (no modification required) ##############\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#read_HPC_row.cpp\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "benchmarks/linear_algebra/chain_mm/gpu/CMakeLists.txt" : {
      "ObjectId" : "9a182954fef19d4497ee262c21c26b0f798af717",
      "LastModified" : "2019-03-11T14:06:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Override optimization flag to make correctness fast:\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "configure.cmake" : {
      "ObjectId" : "a1cb2a0efeecf157202022db3d13bd64a247a568",
      "LastModified" : "2019-04-15T23:38:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set to TRUE if you wish to use GPU\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set to TRUE if you wish to use MPI\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set to TRUE if you wish to use libpng which is needed only by the Halide benchmarks\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set to TRUE if you wish to use libjpeg which is needed only by the Halide benchmarks\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set to TRUE if you wish to use cuDNN for benchmark comparisons\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Change with the cudnn library location\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If USE_MPI is true, you need to the MPI_BUILD_DIR and MPI_NODES path\n\n# Note: This assumes you are using your own installed version of MPI. If your system already\n\n# has a version of openmpi installed, you will have to read the docs to see what the appropriate\n\n# way of launching mpi jobs is. For our testing, we use mpirun.\n\n# Examples:\n\n#set(MPI_BUILD_DIR \"/data/scratch/jray/Repositories/tiramisu/3rdParty/openmpi-3.1.2/build/\")\n\n#set(MPI_NODES \"lanka01,lanka02,lanka03,lanka04,lanka05,lanka06,lanka12,lanka13,lanka14,lanka15\")\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Intel MKL library path. The specified folder should contain the folders\n\n# include and lib.\n\n# Example:\n\n# set(MKL_PREFIX \"/data/scratch/baghdadi/libs/intel/mkl/\")\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# LLVM_CONFIG_BIN: Directory containing llvm-config executable.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ISL paths\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Halide Paths\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 3
  },
  "ElapsedTime" : 2468
}