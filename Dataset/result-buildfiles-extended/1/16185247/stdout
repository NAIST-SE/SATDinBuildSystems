{
  "Repository" : "16185247",
  "Revision" : "HEAD",
  "ObjectId" : "7a8b832a690406ac5a1c3eaca00cef71f0a2b4fe",
  "CommitTime" : "2019-02-05T21:12:24Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "188916bd836eac94138f193d6338ab62565165f4",
      "LastModified" : "2018-03-23T17:50:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The minimum CMake version required to build this project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set a new CMake project\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# option(IM_LLVM_DIR          \"Path to LLVM config files\"                         \"/usr/local/opt/llvm/lib/cmake/llvm\")\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# hardcode homebrew path for now -- NOTE THAT THIS SHIT IS WAY OLD:\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# C++ standard\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Go through some stuff\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If the build script is called from a parent project,\n\n# use the configuration from there.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set the CMake module path to the project cmake directory. This location will\n\n# first be searched for external CMake packages.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include the library build configuration. This will also include the custom\n\n# macro defined for the project.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# deal with LLVM:\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Include the HalideGenerator.cmake library -- exposing the cmake function\n\n# halide_add_generator_dependency() allowing Halide generator use in-project.\n\n# include(HalideProject)\n\n# include(HalideGenerator)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Include the ansi_message(…) function, for color terminal output.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Include IodSymbolize.cmake from the iod-symbolizer Python tool,\n\n# exposing the cmake function IOD_SYMBOLIZE()\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Include ECMGeneratePkgConfigFile.cmake, in order to generate a pkg-config file.\n\n# include(GetCompilerFlags)\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set the location of the library configuration file if it has not already been\n\n# set. This allow the library to be used by an external project without\n\n# overwriting the variable.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Set up the directories to feed to the IOD symbolizer,\n\n# and the target output header file to generate\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set variables for the deps and apps directories:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set variables for the individual deps directories:\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set variables for directories for the individual apps:\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Add DEPS_DIR as a subdirectory ...\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ... but exclude the IOD test directory from being built:\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Add HALOGEN_DIR -- set up Halide generators:\n\n# add_subdirectory(${HALOGEN_DIR})\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Load the project configuration file. CMake will search in the directory setted\n\n# above for a module file named libimreadConfig.cmake. The configuration\n\n# file will set the different directories and libraries required by the library:\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Find the required dependency libraries:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# include(FindHDF5)\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# find_package(RocksDB REQUIRED)\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Include the project-specific `include` directories:\n\n# set(${PROJECT_NAME}_include_dir ${CMAKE_SOURCE_DIR}/include)\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# libimread/include/ (from a find_path() in libimreadConfig.cmake)\n\n# parent directory of libimread/include/\n\n# generated headers e.g. “libimread.hpp” wind up here\n",
        "Line" : 185,
        "CharPositionInLine" : 56
      },
      "29" : {
        "Text" : "# include_directories(\"${IM_CLANG_RUNTIME_HEADERS}\")      # clang headers\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Include the `deps` library `include` directories:\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# include_directories(\"${DEPIXELATE_DIR}\")\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# include_directories(\"${LMDBXX_DIR}\")\n\n# include_directories(\"${LRUCACHE11_DIR}\")\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Ugh\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Include the required dependency `include` directories:\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Set the source files and source-file-specific options\n\n# required to build the library:\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Actually build the library: set up an `OBJECT` target ...\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# command-execution deps:\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# “INTERFACE” (header-only) library deps:\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# standard-issue C/C++/ObjectiveC/ObjectiveC++ libraries --\n\n# may be linked as such or, alternatively, merged directly\n\n# with the libraries’ “TARGET_OBJECT” files:\n\n# add_dependencies(imread \"depixelate\")\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ... and build shared and static target libraries,\n\n# based on the `OBJECT` target:\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Actually build the library II: electric boogaloo\n\n# ... these two target_link_libraries() calls set up the actual\n\n# for-reals building up in all this:\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# imread library (shared)\n\n# shared libraries (dylib) linked normally\n\n# “INTERFACE” (header-only) libraries\n",
        "Line" : 262,
        "CharPositionInLine" : 44
      },
      "43" : {
        "Text" : "# $<TARGET_OBJECTS:depixelate_hqx>        # merges objects from depixelate “hqx” sub-library\n\n# $<TARGET_OBJECTS:depixelate_scale2x>    # merges objects from depixelate “scale2x” sub-library\n\n# $<TARGET_OBJECTS:depixelate_xbrz>       # merges objects from depixelate “xbrz” sub-library\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# merge objects from ‘guid’ library\n\n# merge objects from ‘iccjpeg’ library\n\n# merge objects from ‘inicpp’ library\n\n# merges objects from ‘image-compression’ sub-library\n",
        "Line" : 268,
        "CharPositionInLine" : 44
      },
      "45" : {
        "Text" : "# imread library (static)\n\n# static libraries (“.a” archive files) linked normally\n\n# “INTERFACE” (header-only) libraries\n",
        "Line" : 286,
        "CharPositionInLine" : 44
      },
      "46" : {
        "Text" : "# $<TARGET_OBJECTS:depixelate_hqx>        # merges objects from depixelate “hqx” sub-library\n\n# $<TARGET_OBJECTS:depixelate_scale2x>    # merges objects from depixelate “scale2x” sub-library\n\n# $<TARGET_OBJECTS:depixelate_xbrz>       # merges objects from depixelate “xbrz” sub-library\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# merge objects from ‘guid’ library\n\n# merge objects from ‘iccjpeg’ library\n\n# merge objects from ‘inicpp’ library\n\n# merges objects from ‘image-compression’ sub-library\n",
        "Line" : 292,
        "CharPositionInLine" : 44
      },
      "48" : {
        "Text" : "# Set and pass on compile-time config variable values:\n\n# get_property(IM_COMPILE_OPTIONS GLOBAL PROPERTY ${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS})\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# set(IM_COMPILE_OPTIONS          ${CMAKE_CXX_FLAGS}\n\n#                                 ${CMAKE_C_FLAGS}\n\n#                                 ${IM_COMPILE_FLAGS}\n\n#                                 CACHE STRING \"Compile options\")\n\n# set(IM_LINK_FLAGS               ${CMAKE_SHARED_LINKER_FLAGS}\n\n#                                 CACHE STRING \"Linker options\")\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# set stuff from cache\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# set(IMREAD_FLAGS \"\")\n\n# GET_COMPILER_FLAGS(imread_shared IMREAD_FLAGS)\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# message(STATUS \"\")\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# ansi_message(STATUS \"INTRINSICS_HEADERS = ${INTRINSICS_HEADERS}\")\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# message(STATUS \"\")\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# ansi_message(STATUS \"IMREAD_FLAGS = ${IMREAD_FLAGS}\")\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Configure and generate the compile-time project header file:\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Configure and generate the pkg-config file:\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Add the apps subdirectory, if we're building apps:\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Build the tests, if we're building tests:\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Bring in the tests subdirectory --\n\n# ... this defines add_imread_test(), see below:\n",
        "Line" : 425,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Generate the test data header, if necessary:\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# Set up the `imread_tests` dependencies\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Link the `imread_tests` executable\n",
        "Line" : 446,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# Set up ctest and cdash:\n",
        "Line" : 449,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Set up individual test suites --\n\n# … the add_imread_test() macro is defined in tests/CMakeLists.txt:\n",
        "Line" : 459,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# filesystem-attributes\n",
        "Line" : 469,
        "CharPositionInLine" : 34
      },
      "67" : {
        "Text" : "# filesystem-execute\n",
        "Line" : 470,
        "CharPositionInLine" : 31
      },
      "68" : {
        "Text" : "# im-options (née opions_map)\n",
        "Line" : 478,
        "CharPositionInLine" : 41
      },
      "69" : {
        "Text" : "# add_imread_test(\"pvrtc-io\")\n",
        "Line" : 479,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# add_imread_test(\"interleaved-io\")\n",
        "Line" : 487,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Install the built libraries and header files, as appropriate:\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 72
    },
    "CMakeProjectFiles.cmake" : {
      "ObjectId" : "3a9a52d25b09a3811e65f924313a4c2dfa201b44",
      "LastModified" : "2018-04-04T07:15:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To keep the file list clean\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# language-specific compile options\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Extra options for Image IO code\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ${srcs_dir}/plat/mac/coregraphics.mm\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Project header files\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ${hdrs_dir}/process/jitresize.hh\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Project source files\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ${srcs_dir}/IO/ansi.cpp\n",
        "Line" : 197,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# ${srcs_dir}/process/jitresize.cpp\n\n# ${srcs_dir}/process/neuquant.cpp\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# ${srcs_dir}/base.cpp\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# ${srcs_dir}/color.cpp\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# set source properties\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Extra source file props specific to Image IO code compilation\n",
        "Line" : 251,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 14
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "98ea030b85c9a4eb5160f31e4bcdf75be45ac18b",
      "LastModified" : "2016-01-21T03:15:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Makefile" : {
      "ObjectId" : "e5ef7a165d5f26c604bc69376c7654deb773e5a8",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "b0ac4aa0503385624b11a4088b1a06ba037fd947",
      "LastModified" : "2016-07-20T20:42:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/libimread-config/CMakeLists.txt" : {
      "ObjectId" : "0644cef81dcc24dd81709a0f67f9986629571cba",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/ANSIMessage.cmake" : {
      "ObjectId" : "bfb90207294a2c1489e60c2cc5c199b8cc799887",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# based on this: https://stackoverflow.com/a/19578320/298171\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CheckDevEntry.cmake" : {
      "ObjectId" : "c2d388edccdbfa7cea3be6e63d6a549b15f26f4c",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CodeCoverage.cmake" : {
      "ObjectId" : "aaf491152e70439eaefa6511758b895fcee2360a",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2017, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# CHANGES:\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# 2016-02-03, Lars Bilke\n\n# - Refactored functions to use named parameters\n\n#\n\n# 2017-06-02, Lars Bilke\n\n# - Merged with modified version from github.com/ufz/ogs\n\n#\n\n#\n\n# USAGE:\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      include(CodeCoverage)\n\n#\n\n# 3. Append necessary compiler flags:\n\n#      APPEND_COVERAGE_COMPILER_FLAGS()\n\n#\n\n# 4. If you need to exclude additional directories from the report, specify them\n\n#    using the COVERAGE_EXCLUDES variable before calling SETUP_TARGET_FOR_COVERAGE.\n\n#    Example:\n\n#      set(COVERAGE_EXCLUDES 'dir1/*' 'dir2/*')\n\n#\n\n# 5. Use the functions described below to create a custom make target which\n\n#    runs your test executable and produces a code coverage report.\n\n#\n\n# 6. Build a Debug build:\n\n#      cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#      make\n\n#      make my_coverage_target\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check prereqs\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --coverage\")\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Defines a target for running and collection code coverage information\n\n# Builds dependencies, runs the given executable and outputs reports.\n\n# NOTE! The executable should always have a ZERO as exit code otherwise\n\n# the coverage generation will not complete.\n\n#\n\n# SETUP_TARGET_FOR_COVERAGE(\n\n#     NAME testrunner_coverage                    # New target name\n\n#     EXECUTABLE testrunner -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR\n\n#     DEPENDENCIES testrunner                     # Dependencies to build first\n\n# )\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 145,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 149,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Setup target\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 154,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Run tests\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 177,
        "CharPositionInLine" : 14
      },
      "14" : {
        "Text" : "# Defines a target for running and collection code coverage information\n\n# Builds dependencies, runs the given executable and outputs reports.\n\n# NOTE! The executable should always have a ZERO as exit code otherwise\n\n# the coverage generation will not complete.\n\n#\n\n# SETUP_TARGET_FOR_COVERAGE_COBERTURA(\n\n#     NAME ctest_coverage                    # New target name\n\n#     EXECUTABLE ctest -j ${PROCESSOR_COUNT} # Executable in PROJECT_BINARY_DIR\n\n#     DEPENDENCIES executable_target         # Dependencies to build first\n\n# )\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# NOT SIMPLE_PYTHON_EXECUTABLE\n",
        "Line" : 198,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 202,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Combine excludes to several -e arguments\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Run tests\n",
        "Line" : 212,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Running gcovr\n",
        "Line" : 215,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 229,
        "CharPositionInLine" : 14
      },
      "22" : {
        "Text" : "# APPEND_COVERAGE_COMPILER_FLAGS",
        "Line" : 235,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 23
    },
    "cmake/ECMGeneratePkgConfigFile.cmake" : {
      "ObjectId" : "21ba44bc7b0d6901756df5955ef8f17f8786ecd0",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# ECMGeneratePkgConfigFile\n\n# ------------------------\n\n#\n\n# Generate a `pkg-config <http://www.freedesktop.org/wiki/Software/pkg-config/>`_\n\n# file for the benefit of\n\n# `autotools <http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html>`_-based\n\n# projects.\n\n#\n\n# ::\n\n#\n\n#   ecm_generate_pkgconfig_file(BASE_NAME <baseName>\n\n#                         [LIB_NAME <libName>]\n\n#                         [DEPS \"<dep> [<dep> [...]]\"]\n\n#                         [FILENAME_VAR <filename_variable>]\n\n#                         [INCLUDE_INSTALL_DIR <dir>]\n\n#                         [LIB_INSTALL_DIR <dir>]\n\n#                         [DEFINES -D<variable=value>...]\n\n#                         [INSTALL])\n\n#\n\n# ``BASE_NAME`` is the name of the module. It's the name projects will use to\n\n# find the module.\n\n#\n\n# ``LIB_NAME`` is the name of the library that is being exported. If undefined,\n\n# it will default to the ``BASE_NAME``. That means the ``LIB_NAME`` will be set\n\n# as the name field as well as the library to link to.\n\n#\n\n# ``FILENAME_VAR`` is specified with a variable name. This variable will\n\n# receive the location of the generated file will be set, within the build\n\n# directory. This way it can be used in case some processing is required. See\n\n# also ``INSTALL``.\n\n#\n\n# ``INCLUDE_INSTALL_DIR`` specifies where the includes will be installed. If\n\n# it's not specified, it will default to ``INSTALL_INCLUDEDIR``,\n\n# ``CMAKE_INSTALL_INCLUDEDIR`` or just \"include/\" in case they are specified,\n\n# with the BASE_NAME postfixed.\n\n#\n\n# ``LIB_INSTALL_DIR`` specifies where the library is being installed. If it's\n\n# not specified, it will default to ``LIB_INSTALL_DIR``,\n\n# ``CMAKE_INSTALL_LIBDIR`` or just \"lib/\" in case they are specified.\n\n#\n\n# ``DEFINES`` is a list of preprocessor defines that it is recommended users of\n\n# the library pass to the compiler when using it.\n\n#\n\n# ``INSTALL`` will cause the module to be installed to the ``pkgconfig``\n\n# subdirectory of ``LIB_INSTALL_DIR``, unless the ``ECM_PKGCONFIG_INSTALL_DIR``\n\n# cache variable is set to something different. Note that the first call to\n\n# ecm_generate_pkgconfig_file with the ``INSTALL`` argument will cause\n\n# ``ECM_PKGCONFIG_INSTALL_DIR`` to be set to the cache, and will be used in any\n\n# subsequent calls.\n\n#\n\n# To properly use this macro a version needs to be set. To retrieve it,\n\n# ``ECM_PKGCONFIG_INSTALL_DIR`` uses ``PROJECT_VERSION``. To set it, use the\n\n# project() command (only available since CMake 3.0) or the ecm_setup_version()\n\n# macro.\n\n#\n\n# Example usage:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   ecm_generate_pkgconfig_file(\n\n#       BASE_NAME KF5Archive\n\n#       DEPS Qt5Core\n\n#       FILENAME_VAR pkgconfig_filename\n\n#       INSTALL\n\n#   )\n\n#\n\n# Since 1.3.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2014 Aleix Pol Gonzalez <aleixpol@kde.org>\n\n# Copyright 2014 David Faure <faure@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FetchCatchTestSource.cmake" : {
      "ObjectId" : "98a3f3f319bcf0f7211ceddb134c57fdc33b7546",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn\n\n# © 2011.10 -- GPL, Motherfuckers\n\n# Fetch the Catch source. Taken from:\n\n#   https://github.com/philsquared/Catch/blob/master/docs/build-systems.md\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose required variable (CATCH_INCLUDE_DIR) to parent scope\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindCapnProto.cmake" : {
      "ObjectId" : "bf07732c37e0595d9b9ec6077afc798f0dfaa2ec",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Finds the Cap'n Proto libraries, and compiles schema files.\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: the same directory as the schema file).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CMAKE_CURRENT_SOURCE_DIR and CAPNP_INCLUDE_DIRS are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# Variables that are discovered:\n\n#   CAPNP_EXECUTABLE\n\n#       Path to the `capnp` tool (can be set to override).\n\n#   CAPNPC_CXX_EXECUTABLE\n\n#       Path to the `capnpc-c++` tool (can be set to override).\n\n#   CAPNP_INCLUDE_DIRS\n\n#       Include directories for the library's headers (can be set to override).\n\n#   CANP_LIBRARIES\n\n#       The Cap'n Proto library paths.\n\n#   CAPNP_LIBRARIES_LITE\n\n#       Paths to only the 'lite' libraries.\n\n#   CAPNP_DEFINITIONS\n\n#       Compiler definitions required for building with the library.\n\n#   CAPNP_FOUND\n\n#       Set if the libraries have been located.\n\n#\n\n# Example usage:\n\n#\n\n#   find_package(CapnProto REQUIRED)\n\n#   include_directories(${CAPNP_INCLUDE_DIRS})\n\n#   add_definitions(${CAPNP_DEFINITIONS})\n\n#\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(a a.cc ${CAPNP_SRCS} ${CAPNP_HDRS})\n\n#   target_link_library(a ${CAPNP_LIBRARIES})\n\n#\n\n# For out-of-source builds:\n\n#\n\n#   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\n#   include_directories(${CAPNPC_OUTPUT_DIR})\n\n#   capnp_generate_cpp(...)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default compiler includes\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Find Libraries/Paths =========================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use pkg-config to get path hints and definitions\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Was only the 'lite' library found?\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Only *require* the include directory, libkj, and libcapnp. If compiling with\n\n# CAPNP_LITE, nothing else will be found.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/FindEigen3.cmake" : {
      "ObjectId" : "9c546a05d859b18c49554d7ee7221cc486b7760e",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/FindHDF5.cmake" : {
      "ObjectId" : "5d911b78afc3d280a04deb90182f9cf1eb143f39",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindHDF5\n\n# --------\n\n#\n\n# Find HDF5, a library for reading and writing self describing array data.\n\n#\n\n#\n\n#\n\n# This module invokes the HDF5 wrapper compiler that should be installed\n\n# alongside HDF5.  Depending upon the HDF5 Configuration, the wrapper\n\n# compiler is called either h5cc or h5pcc.  If this succeeds, the module\n\n# will then call the compiler with the -show argument to see what flags\n\n# are used when compiling an HDF5 client application.\n\n#\n\n# The module will optionally accept the COMPONENTS argument.  If no\n\n# COMPONENTS are specified, then the find module will default to finding\n\n# only the HDF5 C library.  If one or more COMPONENTS are specified, the\n\n# module will attempt to find the language bindings for the specified\n\n# components.  The only valid components are C, CXX, Fortran, HL, and\n\n# Fortran_HL.  If the COMPONENTS argument is not given, the module will\n\n# attempt to find only the C bindings.\n\n#\n\n# On UNIX systems, this module will read the variable\n\n# HDF5_USE_STATIC_LIBRARIES to determine whether or not to prefer a\n\n# static link to a dynamic link for HDF5 and all of it's dependencies.\n\n# To use this feature, make sure that the HDF5_USE_STATIC_LIBRARIES\n\n# variable is set before the call to find_package.\n\n#\n\n# To provide the module with a hint about where to find your HDF5\n\n# installation, you can set the environment variable HDF5_ROOT.  The\n\n# Find module will then look in this path when searching for HDF5\n\n# executables, paths, and libraries.\n\n#\n\n# Both the serial and parallel HDF5 wrappers are considered and the first\n\n# directory to contain either one will be used.  In the event that both appear\n\n# in the same directory the serial version is preferentially selected. This\n\n# behavior can be reversed by setting the variable HDF5_PREFER_PARALLEL to\n\n# true.\n\n#\n\n# In addition to finding the includes and libraries required to compile\n\n# an HDF5 client application, this module also makes an effort to find\n\n# tools that come with the HDF5 distribution that may be useful for\n\n# regression testing.\n\n#\n\n# This module will define the following variables:\n\n#\n\n# ::\n\n#\n\n#   HDF5_FOUND - true if HDF5 was found on the system\n\n#   HDF5_VERSION - HDF5 version in format Major.Minor.Release\n\n#   HDF5_INCLUDE_DIRS - Location of the hdf5 includes\n\n#   HDF5_INCLUDE_DIR - Location of the hdf5 includes (deprecated)\n\n#   HDF5_DEFINITIONS - Required compiler definitions for HDF5\n\n#   HDF5_LIBRARIES - Required libraries for all requested bindings\n\n#   HDF5_HL_LIBRARIES - Required libraries for the HDF5 high level API for all\n\n#                       bindings, if the HL component is enabled\n\n#\n\n# Available components are: C CXX Fortran and HL.  For each enabled language\n\n# binding, a corresponding HDF5_${LANG}_LIBRARIES variable, and potentially\n\n# HDF5_${LANG}_DEFINITIONS, will be defined.\n\n# If the HL component is enabled, then an HDF5_${LANG}_HL_LIBRARIES will\n\n# also be defined.  With all components enabled, the following variables will be defined:\n\n#\n\n# ::\n\n#\n\n#   HDF5_C_DEFINITIONS -- Required compiler definitions for HDF5 C bindings\n\n#   HDF5_CXX_DEFINITIONS -- Required compiler definitions for HDF5 C++ bindings\n\n#   HDF5_Fortran_DEFINITIONS -- Required compiler definitions for HDF5 Fortran bindings\n\n#   HDF5_C_INCLUDE_DIRS -- Required include directories for HDF5 C bindings\n\n#   HDF5_CXX_INCLUDE_DIRS -- Required include directories for HDF5 C++ bindings\n\n#   HDF5_Fortran_INCLUDE_DIRS -- Required include directories for HDF5 Fortran bindings\n\n#   HDF5_C_LIBRARIES - Required libraries for the HDF5 C bindings\n\n#   HDF5_CXX_LIBRARIES - Required libraries for the HDF5 C++ bindings\n\n#   HDF5_Fortran_LIBRARIES - Required libraries for the HDF5 Fortran bindings\n\n#   HDF5_C_HL_LIBRARIES - Required libraries for the high level C bindings\n\n#   HDF5_CXX_HL_LIBRARIES - Required libraries for the high level C++ bindings\n\n#   HDF5_Fortran_HL_LIBRARIES - Required libraries for the high level Fortran\n\n#                               bindings.\n\n#\n\n#   HDF5_IS_PARALLEL - Whether or not HDF5 was found with parallel IO support\n\n#   HDF5_C_COMPILER_EXECUTABLE - the path to the HDF5 C wrapper compiler\n\n#   HDF5_CXX_COMPILER_EXECUTABLE - the path to the HDF5 C++ wrapper compiler\n\n#   HDF5_Fortran_COMPILER_EXECUTABLE - the path to the HDF5 Fortran wrapper compiler\n\n#   HDF5_C_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary C compiler\n\n#                                               which is also the HDF5 wrapper\n\n#   HDF5_CXX_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary C++\n\n#                                                 compiler which is also\n\n#                                                 the HDF5 wrapper\n\n#   HDF5_Fortran_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary\n\n#                                                     Fortran compiler which\n\n#                                                     is also the HDF5 wrapper\n\n#   HDF5_DIFF_EXECUTABLE - the path to the HDF5 dataset comparison tool\n\n#\n\n# The following variable can be set to guide the search for HDF5 libraries and includes:\n\n#\n\n# ``HDF5_ROOT``\n\n#   Specify the path to the HDF5 installation to use.\n\n#\n\n# ``HDF5_FIND_DEBUG``\n\n#   Set to a true value to get some extra debugging output.\n\n#\n\n# ``HDF5_NO_FIND_PACKAGE_CONFIG_FILE``\n\n#   Set to a true value to skip trying to find ``hdf5-config.cmake``.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This module is maintained by Will Dicharry <wdicharry@stellarscience.com>.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List of the valid HDF5 components\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Validate the list of find components.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the extra specified components, ensuring that they are valid.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# only for compatibility\n",
        "Line" : 129,
        "CharPositionInLine" : 44
      },
      "7" : {
        "Text" : "# replaced by Fortran and HL\n",
        "Line" : 147,
        "CharPositionInLine" : 52
      },
      "8" : {
        "Text" : "# Determine whether to search for serial or parallel executable first\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We may have picked up some duplicates in various lists during the above\n\n# process for the language bindings (both the C and C++ bindings depend on\n\n# libz for example).  Remove the duplicates. It appears that the default\n\n# CMake behavior is to remove duplicates from the end of a list. However,\n\n# for link lines, this is incorrect since unresolved symbols are searched\n\n# for down the link line. Therefore, we reverse the list, remove the\n\n# duplicates, and then reverse it again to get the duplicates removed from\n\n# the beginning.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Test first if the current compilers automatically wrap HDF5\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Invoke the HDF5 wrapper compiler.  The compiler return value is stored to the\n\n# return_value argument, the text output is stored to the output variable.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Parse a compile line for definitions, includes, library paths, and libraries.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# include directory\n",
        "Line" : 365,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# compile definition\n",
        "Line" : 368,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# library search path\n",
        "Line" : 371,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# library name (hl)\n",
        "Line" : 374,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# library name\n",
        "Line" : 377,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# library file\n",
        "Line" : 380,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Try to find HDF5 using an installed hdf5-config.cmake\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Some HDF5 versions (e.g. 1.8.18) used hdf5::hdf5 etc\n",
        "Line" : 420,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "#Older versions of hdf5 don't have a static/shared suffix so\n\n#if we detect that occurrence clear the suffix\n",
        "Line" : 437,
        "CharPositionInLine" : 12
      },
      "22" : {
        "Text" : "#cant find this component with or without the suffix\n\n#so bail out, and let the following locate HDF5\n",
        "Line" : 441,
        "CharPositionInLine" : 16
      },
      "23" : {
        "Text" : "# Find library for this target. Complicated as on Windows with a DLL, we need to search for the import-lib.\n",
        "Line" : 452,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# no import lib, just try LOCATION\n",
        "Line" : 456,
        "CharPositionInLine" : 16
      },
      "25" : {
        "Text" : "# Only search for languages we've enabled\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# First check to see if our regular compiler is one of wrappers\n",
        "Line" : 486,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# If this language isn't using the wrapper, then try to seed the\n\n# search options with the wrapper\n",
        "Line" : 521,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# hdf5 library\n",
        "Line" : 550,
        "CharPositionInLine" : 14
      },
      "29" : {
        "Text" : "# external library\n",
        "Line" : 556,
        "CharPositionInLine" : 14
      },
      "30" : {
        "Text" : "# hdf5 library\n",
        "Line" : 578,
        "CharPositionInLine" : 16
      },
      "31" : {
        "Text" : "# external library\n",
        "Line" : 584,
        "CharPositionInLine" : 16
      },
      "32" : {
        "Text" : "# No arguments necessary, all languages can use the compiler wrappers\n",
        "Line" : 638,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Compiler wrappers aren't being used by the build but were found and used\n\n# to determine necessary include and library flags\n",
        "Line" : 643,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# seed the initial lists of libraries to find with items we know we need\n",
        "Line" : 680,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# find the HDF5 include directories\n",
        "Line" : 691,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# set the _DIRS variable as this is what the user will normally use\n",
        "Line" : 707,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# find the HDF5 libraries\n",
        "Line" : 711,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# According to bug 1643 on the CMake bug tracker, this is the\n\n# preferred method for searching for a static library.\n\n# See https://gitlab.kitware.com/cmake/cmake/issues/1643.  We search\n\n# first for the full static library name, but fall back to a\n\n# generic search on the name if the static search fails.\n",
        "Line" : 714,
        "CharPositionInLine" : 16
      },
      "39" : {
        "Text" : "# Append the libraries for this language binding to the list of all\n\n# required libraries.\n",
        "Line" : 744,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# According to bug 1643 on the CMake bug tracker, this is the\n\n# preferred method for searching for a static library.\n\n# See https://gitlab.kitware.com/cmake/cmake/issues/1643.  We search\n\n# first for the full static library name, but fall back to a\n\n# generic search on the name if the static search fails.\n",
        "Line" : 751,
        "CharPositionInLine" : 20
      },
      "41" : {
        "Text" : "# Append the libraries for this language binding to the list of all\n\n# required libraries.\n",
        "Line" : 778,
        "CharPositionInLine" : 12
      },
      "42" : {
        "Text" : "# If the HDF5 include directory was found, open H5pubconf.h to determine if\n\n# HDF5 was compiled with parallel IO support\n",
        "Line" : 791,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# For backwards compatibility we set HDF5_INCLUDE_DIR to the value of\n\n# HDF5_INCLUDE_DIRS\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# If HDF5_REQUIRED_VARS is empty at this point, then it's likely that\n\n# something external is trying to explicitly pass already found\n\n# locations\n",
        "Line" : 836,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# hide HDF5_DIR for the non-advanced user to avoid confusion with\n\n# HDF5_DIR-NOT_FOUND while HDF5 was found.\n",
        "Line" : 852,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 46
    },
    "cmake/FindHalide.cmake" : {
      "ObjectId" : "33ff2508b15ac675c379ae1f3c3c40e4eaf6592c",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn\n\n# © 2015.10 -- GPL, Motherfuckers\n\n# FindHalide.cmake\n\n#  -- shamelessly based on FindJeMalloc.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindJeMalloc.cmake" : {
      "ObjectId" : "a3f33a75512e500ffd077f0778e9aed6aef4b840",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn\n\n# © 2011.10 -- GPL, Motherfuckers\n\n# - Try to find jemalloc headers and libraries.\n\n# \n\n# THIS PACKAGE-FINDER COURTESY OF BRO:\n\n#   https://github.com/bro/cmake/blob/master/FindJeMalloc.cmake\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(JeMalloc)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  JEMALLOC_ROOT_DIR Set this variable to the root installation of\n\n#                    jemalloc if the module has problems finding\n\n#                    the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  JEMALLOC_FOUND             System has jemalloc libs/headers\n\n#  JEMALLOC_LIBRARIES         The jemalloc library/libraries\n\n#  JEMALLOC_INCLUDE_DIR       The location of jemalloc headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindLMDB.cmake" : {
      "ObjectId" : "e615f5423350e73491fcd1928768b743fc00db4c",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the LMBD libraries and headers\n\n#  LMDB_FOUND - system has LMDB lib\n\n#  LMDB_INCLUDE_DIR - the LMDB include directory\n\n#  LMDB_LIBRARIES - Libraries needed to use LMDB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCWD based on FindGMP by:\n\n# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adapted from FindCWD by:\n\n# Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>\n\n# Aug 31, 2013\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/FindLibUnwind.cmake" : {
      "ObjectId" : "213e2b4c7b454b7a181fc8a888584a7399a0d6a7",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLibUnwind\n\n# -----------\n\n#\n\n# Find LibUnwind\n\n#\n\n# Find LibUnwind headers and library\n\n#\n\n# ::\n\n#\n\n#   LIBUNWIND_FOUND                     - True if libunwind is found.\n\n#   LIBUNWIND_INCLUDE_DIRS              - Directory where libunwind headers are located.\n\n#   LIBUNWIND_LIBRARIES                 - Unwind libraries to link against.\n\n#   LIBUNWIND_HAS_UNW_GETCONTEXT        - True if unw_getcontext() is found (required).\n\n#   LIBUNWIND_HAS_UNW_INIT_LOCAL        - True if unw_init_local() is found (required).\n\n#   LIBUNWIND_VERSION_STRING            - version number as a string (ex: \"5.0.3\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2014 ZBackup contributors\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# VERSION_VAR\n\n# LIBUNWIND_VERSION_STRING\n",
        "Line" : 69,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 3
    },
    "cmake/FindRocksDB.cmake" : {
      "ObjectId" : "339f828eb426c458b62316b8199292cc5f510839",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Try to find rocksdb include dirs and libraries\n\n# Usage of this module as follows:\n\n# This file defines:\n\n# * ROCKSDB_FOUND if protoc was found\n\n# * ROCKSDB_LIBRARY The lib to link to (currently only a static unix lib, not\n\n# portable)\n\n# * ROCKSDB_INCLUDE The include directories for rocksdb.\n\n#\n\n# Original source from the osquery codebase:\n\n#   https://github.com/deniszh/osquery/blob/69ed44459453d0599774aea8f359feb9a50cfa05/CMake/FindRocksDB.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set defaults\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find the include files\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On MacOS\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# On Linux\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#  list(APPEND ROCKSDB_LIBRARY \"-lrt\")\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindUnwind.cmake" : {
      "ObjectId" : "0c484e0c681e8feb0b3ec46383eb143f308846a8",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the libunwind library\n\n#\n\n#  LIBUNWIND_FOUND       - True if libunwind was found.\n\n#  LIBUNWIND_LIBRARIES   - The libraries needed to use libunwind\n\n#  LIBUNWIND_INCLUDE_DIR - Location of unwind.h and libunwind.h\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For some reason, we have to link to two libunwind shared object files:\n\n# one arch-specific and one not.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindWEBP.cmake" : {
      "ObjectId" : "dbb8781771a3be4e1db96305d75fd5737cfc6f64",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find WebP.\n\n# Once done, this will define\n\n#\n\n#  WEBP_FOUND - system has WebP.\n\n#  WEBP_INCLUDE_DIRS - the WebP. include directories\n\n#  WEBP_LIBRARIES - link these to use WebP.\n\n#\n\n# Copyright (C) 2012 Raphael Kubo da Costa <rakuco@webkit.org>\n\n# Copyright (C) 2013 Igalia S.L.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1.  Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n# 2.  Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS\n\n# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Older installations of libwebp do not install a pkgconfig file, so we fall\n\n# back to a manual search for a libwebp header file.\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# WEBP_INCLUDE_DIRS is often empty, so we rely only on WEBP_LIBRARIES.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/GetCompilerFlags.cmake" : {
      "ObjectId" : "c8680c81fd2edf728cfca90f6c32183557d6bbc7",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get flags from “add_definitions()”, re-escape quotes\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Get flags from “include_directories()”\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Get build-type-specific flags\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Add -std= flag if appropriate -- WOW HOW HACKY IS THIS SHIT\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/HalideGenerator.cmake" : {
      "ObjectId" : "3a7e8749267e40e9274bf41538c657c67036f112",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This function returns the intermediate output directory where the Halide\n\n# generator output will be placed. This path is automatically added to the\n\n# library path and include path of the specified target. This function can be\n\n# used to determine the location of the other output files like the bit code and\n\n# html.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convert the binary dir to a native path\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Create a directory to contain generator specific intermediate files\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set the output variable\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This function adds custom build steps to invoke a Halide generator exectuable,\n\n# produce a static library containing the generated code, and then link that\n\n# static library to the specified target.\n\n# The generator executable must be produced separately, e.g. using a call to the\n\n# function halide_project(...) or add_executable(...) and passed to this\n\n# function in the GENERATOR_TARGET parameter.\n\n#\n\n# Usage:\n\n#   halide_add_generator_dependency(TARGET <app name>\n\n#                                   GENERATOR_TARGET <new target>\n\n#                                   GENERATOR_NAME <string>\n\n#                                   GENERATED_FUNCTION <string>\n\n#                                   GENERATED_FUNCTION_NAMESPACE <string>\n\n#                                   GENERATOR_ARGS <arg> <arg> ...\n\n#                                   [TARGET_SUFFIX <string>]\n\n#                                   [OUTPUT_LIB_VAR <var>]\n\n#                                   [OUTPUT_TARGET_VAR <var>])\n\n#\n\n#   TARGET is the name of the app or test target that the generator\n\n#     invocation target should be added to. Can either be a ordinary or Utility\n\n#     cmake target created by halide_project(), add_executable(), etc.\n\n#   GENERATOR_TARGET is the name of the generator executable target.\n\n#   TARGET_SUFFIX is an optional string to make this target unique.\n\n#   GENERATOR_NAME is the C++ class name of the Halide::Generator derived object\n\n#   GENERATED_FUNCTION is the name of the C function to be generated by Halide\n\n#   GENERATED_FUNCTION_NAMESPACE is the C++ namespace to generate the function in. Should end in \"::\"\n\n#   GENERATOR_ARGS are extra arguments passed to the generator executable during\n\n#     build for example, \"-e html target=host-opengl\"\n\n#   OUTPUT_LIB_VAR is the output variable that will be set to the path of the\n\n#     halide generated library. Use this to add the output to Utility targets.\n\n#   OUTPUT_TARGET_VAR is the output variable that will be set to the name of the\n\n#     target created by this function to invoke the generator. It is\n\n#     automatically added as a dependency to ordinary non-Utility cmake targets.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Parse arguments\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Determine a scratch directory to build and execute the generator. ${args_TARGET}\n\n# will include the generated header from this directory.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Determine the name of the output files\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# if(NOT ${args_GENERATOR_POSTPROCESS_COMMAND})\n\n#   set(generator_postprocess_command \"${CMAKE_CXX_COMPILER} -shared -o ${FILTER_DYN} ${FILTER_LIB} -L.\")\n\n# else()\n\n#   set(generator_postprocess_command \"${args_GENERATOR_POSTPROCESS_COMMAND}\")\n\n# endif()\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# In MSVC, the generator executable will be placed in a configuration specific\n\n# directory specified by ${CMAKE_CFG_INTDIR}.\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# In Xcode, the generator executable will be placed in a configuration specific\n\n# directory, so the Xcode variable $(CONFIGURATION) is passed in the custom build script.\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Add a custom target to invoke the GENERATOR_TARGET and output the Halide\n\n# generated library.\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Use a custom target to force it to run the generator before the\n\n# object file for the runner. The target name will start with the prefix\n\n#  \"exec_generator_\"\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Place the target in a special folder in IDEs\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Set the output vars\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Associate the generator invocation target with the main app target\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Post-process library, if called for\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Make the generator invocation target run before the app target is built\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Check if it is safe to call target_link_libraries on the target\n",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Add the scratch directory to the include path for ${args_TARGET}. The generated\n\n# header may be included via #include \"${args_GENERATOR_NAME}.h\"\n",
        "Line" : 186,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 20
    },
    "cmake/HalideProject.cmake" : {
      "ObjectId" : "e8bcf768f66991bda672001bd027da96815d48c6",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/IodSymbolize.cmake" : {
      "ObjectId" : "bb692e728aaefc7985b15dba7a693b6720f5ed85",
      "LastModified" : "2017-11-08T10:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# function(JOIN VALUES GLUE OUTPUT)\n\n#   string(REPLACE \";\" \"${GLUE}\" _TMP_STR \"${VALUES}\")\n\n#   set(${OUTPUT} \"${_TMP_STR}\" PARENT_SCOPE)\n\n# endfunction()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/LLVMConfiguration.cmake" : {
      "ObjectId" : "af37b5de19d8fa242c7378a9431878149f251666",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find any version present.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Find a specific version.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# string(SUBSTRING \"${IM_REQUIRE_LLVM_VERSION}\" 2 1 PATCH)\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Notify the user what paths and LLVM version we are using\n\n# message(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check reported LLVM version\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# strip whitespace from start & end\n",
        "Line" : 38,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# convert into a list\n",
        "Line" : 39,
        "CharPositionInLine" : 68
      },
      "CommentCount" : 7
    },
    "cmake/build_config.cmake" : {
      "ObjectId" : "1fe55ba3bc2288a000a5935d6f464c8c45390ebc",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Path to the include directory\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the library name and include directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Indicate that we have 'found' the library as a package\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Mark variables 'advanced'\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include custom CMake macro\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include `check_include_file()` macro/function and friends\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check for architecture-dependent headers:\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for (processor-dependant) intrinsics headers:\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check for (possibly non-standard) C++ headers:\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check for operating-system-dependent headers:\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Check for headers known to be non-standard:\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# check_include_file(config.h                             HAVE_CONFIG_H)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check for headers specific to Darwin and OS X:\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Check for /dev entries (only on OS X for now):\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Set all results to false for checks related to OS X:\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Check for a few (possibly non-standard) POSIX-ish functions:\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Figure out the deal with 128-bit integer types:\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/libimreadConfig.cmake" : {
      "ObjectId" : "5c6baff1a1a7f3f9826d29e136a0494ed2512122",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the following variable\n\n#   libimread_FOUND: True if the library has been found\n\n#   libimread_include_dir: Path to header files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assure that the library has not already been found\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the include directory\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Standard work to make sure the different variables have been set. This\n\n# command will set the libimread_FOUND variable.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If the target have not already been added and if the project calling this\n\n# file is not the libimread CMakeLists.txt, add the library to the\n\n# build chain.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/macro.cmake" : {
      "ObjectId" : "b60798aeb17431f850defaff5cf68c636565e74c",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This macro will set the variable if it has not already been set.\n\n#   @param var The variable to set\n\n#   @param value The value to assign to the variable\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/CMakeLists.txt" : {
      "ObjectId" : "15d30b871433a4e485846bed2ae942511b9addc3",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(depixelate)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(interpol)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_subdirectory(libbf)\n\n# add_subdirectory(lmdbxx)\n\n# add_subdirectory(lrucache11)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_subdirectory(vdb)",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "deps/GSL/CMakeLists.txt" : {
      "ObjectId" : "b2991eeac024544ee9a41a56fe96c6ae274d7d67",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include(ExternalProject)\n\n# find_package(Git)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# creates a library GSL which is an interface (header files only)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# determine whether this is a standalone project or included by other projects\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# when minimum version required is 3.8.0 remove if below\n\n# both branches do exactly the same thing\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set the GSL library to be compiled only with c++14\n\n# target_compile_features(GSL INTERFACE cxx_std_14)\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# on *nix systems force the use of -std=c++XX instead of -std=gnu++XX (default)\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# add definitions to the library and targets that consume it\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# remove unnecessary warnings about unchecked iterators\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# add include folders to the library and targets that consume it\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add natvis file to the library so it will automatically be loaded into Visual Studio\n\n# target_sources(GSL INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/GSL.natvis)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# option(GSL_TEST \"Generate tests.\" ${GSL_STANDALONE_PROJECT})\n\n# if(GSL_TEST)\n\n#     enable_testing()\n\n#     add_subdirectory(tests)\n\n# endif()\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "deps/GSL/tests/CMakeLists.txt" : {
      "ObjectId" : "ea456c79fc251517a63b32703a2bdbde907ef5f2",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# will make visual studio generated project group files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add catch\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# assume catch is installed in a system directory\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# this interface adds compile options to how the tests are run\n\n# please try to keep entries ordered =)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for tests to find the catch header\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set definitions for tests\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# create the main executable for each test. this reduces the compile time\n\n# of each test by pre-compiling catch.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# group all tests under GSL_tests\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "deps/SG14/CMakeLists.txt" : {
      "ObjectId" : "4dff11017f488b62150f1c43ff83129dade269db",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# determine whether this is a standalone project or included by other projects\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the GSL library to be compiled only with c++14\n\n# target_compile_features(SG14 INTERFACE cxx_std_14)\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# on *nix systems force the use of -std=c++XX instead of -std=gnu++XX (default)\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add definitions to the library and targets that consume it\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# remove unnecessary warnings about unchecked iterators\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# add include folders to the library and targets that consume it\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "deps/crossguid/CMakeLists.txt" : {
      "ObjectId" : "5ca4e3d5aedaa3a83169fef87dc9d2500f764856",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: compile examples and tests (why not??)\n\n# \"testmain.cpp\"\n\n# \"test.cpp\"\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add an “OBJECT” library target called “guid”:\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively  called “guid_shared” and “guid_static”:\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install the shared and static library target outputs:\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install the header files:\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "deps/depixelate/CMakeLists.txt" : {
      "ObjectId" : "f29ff7ceccb48f63ef92b174b70159f39c0f8d07",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find_package(PkgConfig REQUIRED)\n\n# pkg_search_module(IL REQUIRED IL)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add an “OBJECT” library target called “depixelate”:\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively called “depixelate_shared” and “depixelate_static”:\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# N.B. forgoing ${IL_LIBRARIES} for now\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install the shared and static library target outputs:\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install the header files:\n\n# install(DIRECTORY ./ DESTINATION include/depixelate\n\n#     FILES_MATCHING PATTERN \"*.h\")\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "deps/depixelate/hqx/CMakeLists.txt" : {
      "ObjectId" : "48f34a740709babe3b922943ab780efa6a0fce8c",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find_package(PkgConfig REQUIRED)\n\n# pkg_search_module(IL REQUIRED IL)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include_directories(${IL_INCLUDE_DIRS})\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  N.B. forgoing \"hqx.c\" for now\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively called “depixelate_hqx_shared” and “depixelate_hqx_static”:\n\n# add_library(\n\n#     depixelate_hqx_shared\n\n#     SHARED $<TARGET_OBJECTS:depixelate_hqx>)\n\n# add_library(\n\n#     depixelate_hqx_static\n\n#     STATIC $<TARGET_OBJECTS:depixelate_hqx>)\n\n# set_target_properties(\n\n#     depixelate_hqx_shared\n\n#     PROPERTIES LIBRARY_OUTPUT_NAME \"depixelate_hqx\")\n\n# set_target_properties(\n\n#     depixelate_hqx_static\n\n#     PROPERTIES ARCHIVE_OUTPUT_NAME \"depixelate_hqx\")\n\n# target_link_libraries(depixelate_hqx_shared ${IL_LIBRARIES})\n\n# target_link_libraries(depixelate_hqx_static ${IL_LIBRARIES})\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install the shared and static library target outputs:\n\n# install(TARGETS depixelate_hqx_shared\n\n#         DESTINATION lib)\n\n# install(TARGETS depixelate_hqx_static\n\n#         DESTINATION lib)",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "deps/depixelate/scale2x/CMakeLists.txt" : {
      "ObjectId" : "d9b7e05ec668533100812de47ec5fbb29973331a",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively called “depixelate_scale2x_shared” and “depixelate_scale2x_static”:\n\n# add_library(\n\n#     depixelate_scale2x_shared\n\n#     SHARED $<TARGET_OBJECTS:depixelate_scale2x>)\n\n# add_library(\n\n#     depixelate_scale2x_static\n\n#     STATIC $<TARGET_OBJECTS:depixelate_scale2x>)\n\n# set_target_properties(\n\n#     depixelate_scale2x_shared\n\n#     PROPERTIES LIBRARY_OUTPUT_NAME \"depixelate_scale2x\")\n\n# set_target_properties(\n\n#     depixelate_scale2x_static\n\n#     PROPERTIES ARCHIVE_OUTPUT_NAME \"depixelate_scale2x\")\n\n# target_link_libraries(depixelate_scale2x_shared)\n\n# target_link_libraries(depixelate_scale2x_static)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install the shared and static library target outputs:\n\n# install(TARGETS depixelate_scale2x_shared\n\n#         DESTINATION lib)\n\n# install(TARGETS depixelate_scale2x_static\n\n#         DESTINATION lib)",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/depixelate/xbrz/CMakeLists.txt" : {
      "ObjectId" : "54b7af09c6941b75f4f00cf94d7ba2bc9d3d8c4d",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively called “depixelate_xbrz_shared” and “depixelate_xbrz_static”:\n\n# add_library(\n\n#     depixelate_xbrz_shared\n\n#     SHARED $<TARGET_OBJECTS:depixelate_xbrz>)\n\n# add_library(\n\n#     depixelate_xbrz_static\n\n#     STATIC $<TARGET_OBJECTS:depixelate_xbrz>)\n\n# set_target_properties(\n\n#     depixelate_xbrz_shared\n\n#     PROPERTIES LIBRARY_OUTPUT_NAME \"depixelate_xbrz\")\n\n# set_target_properties(\n\n#     depixelate_xbrz_static\n\n#     PROPERTIES ARCHIVE_OUTPUT_NAME \"depixelate_xbrz\")\n\n# target_link_libraries(depixelate_xbrz_shared)\n\n# target_link_libraries(depixelate_xbrz_static)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install the shared and static library target outputs:\n\n# install(TARGETS depixelate_xbrz_shared\n\n#         DESTINATION lib)\n\n# install(TARGETS depixelate_xbrz_static\n\n#         DESTINATION lib)",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/docopt/CMakeLists.txt" : {
      "ObjectId" : "275c0ff72bbac229fb9791df17a7effe3e9ce435",
      "LastModified" : "2017-11-30T19:07:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: compile examples and tests (why not??)\n\n# \"main.cpp\"\n\n# \"run_testcase.cpp\"\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add an “OBJECT” library target called “docopt”:\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively  called “docopt_shared” and “docopt_static”:\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install the shared and static library target outputs:\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install the header files:\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "deps/iccjpeg/CMakeLists.txt" : {
      "ObjectId" : "e51ff1ee24b521189c18b4481d6ba0546104ccf0",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compilation options:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Require jpeglib:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include and link directories:\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Project header file:\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Project source file:\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add an “OBJECT” library target called “iccjpeg”:\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively called “iccjpeg_shared” and “iccjpeg_static”:\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install the shared and static library target outputs:\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Install the header files:\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "deps/imagecompression/CMakeLists.txt" : {
      "ObjectId" : "c651d973dff0bc29e33efbfba88c0f7d93b8f86f",
      "LastModified" : "2017-12-29T18:15:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compilation options:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Linker options:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include directories:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Project header files:\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Project C++ source files:\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Distribute linker options on a per-file basis:\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add an “OBJECT” library target called “imagecompression”:\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively  called “imagecompression_shared” and “imagecompression_static”:\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Install the shared and static library target outputs:\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Install the header files:\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "deps/inicpp/CMakeLists.txt" : {
      "ObjectId" : "a5308db09b750f7ceaacb6266c9d2292a2a49ac8",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compilation options:\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find header files in include directory\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add an “OBJECT” library target called “inicpp”:\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add shared and static library targets, based on the “OBJECT” library,\n\n# respectively called “inicpp_shared” and “inicpp_static”:\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install the header files:\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install the shared and static library target outputs:\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "deps/inicpp/examples/CMakeLists.txt" : {
      "ObjectId" : "ee2331d4122291757e77bc95171c95e5b99404cf",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Basic example\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Schema validation example\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/inicpp/examples/basic/CMakeLists.txt" : {
      "ObjectId" : "1796ecce811c6f034e1aa1d4098ffd11eb1383c4",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(${INCLUDE_DIR})  # this is set from parent project\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/inicpp/examples/schema_validation/CMakeLists.txt" : {
      "ObjectId" : "78e82d5b3b9348f77da1acd919613e23a9301c5b",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(${INCLUDE_DIR})  # this is set from parent project\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/inicpp/tests/CMakeLists.txt" : {
      "ObjectId" : "d418c724ebdd589bf04ecb8d60987605252c2c96",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Google Test and Google Mock headers\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link with Google libraries\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/interpol/CMakeLists.txt" : {
      "ObjectId" : "52c5dd251d5c235f32b5f929afd2d22c76121bb6",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"demo.c\"\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/iod/CMakeLists.txt" : {
      "ObjectId" : "1f743989fef5ddfbaef28abc9eb7c4b94920e36e",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For lexical_cast\n",
        "Line" : 4,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "# For old cmake versions\n",
        "Line" : 7,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 2
    },
    "deps/iod/tests/CMakeLists.txt" : {
      "ObjectId" : "aca40fc58f4b4bd35072790af9c687da3fa0d8b0",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# enable_testing()\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include_directories(${CMAKE_CURRENT_SOURCE_DIR}/.. ${Boost_INCLUDE_DIRS})\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set(CMAKE_CXX_STANDARD 17)\n\n# add_definitions(-std=c++17) # For old cmake versions\n\n# add_definitions(-Wall)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_executable(iod_query_stl iod_query_stl.cc)\n\n#add_test(iod_query_stl iod_query_stl)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_executable(iod_query_sql iod_query_sql.cc)\n\n#add_test(iod_query_sql iod_query_sql)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add_executable(json json.cc)\n\n# add_test(json json)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add_executable(core core.cc)\n\n# add_test(core core)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add_executable(options options.cc)\n\n# add_test(options options)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#add_executable(linq linq.cc)\n\n#add_test(linq linq)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add_executable(callable_traits callable_traits.cc)\n\n# add_test(callable_traits callable_traits)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add_executable(apply apply.cc)\n\n# add_test(apply apply)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# add_executable(foreach foreach.cc)\n\n# add_test(foreach foreach)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add_executable(readme readme.cc)\n\n# add_test(readme readme)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add_executable(di di.cc)\n\n# add_test(di di)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# add_executable(bind_method bind_method.cc)\n\n# add_test(bind_method bind_method)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# add_executable(tuple tuple.cc)\n\n# add_test(tuple tuple)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add_executable(parse_command_line parse_command_line.cc)\n\n# add_test(parse_command_line parse_command_line)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add_executable(deep_merge deep_merge.cc)\n\n# add_test(deep_merge deep_merge)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# add_executable(array_view array_view.cc)\n\n# add_test(array_view array_view)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# add_executable(aos_view aos_view.cc)\n\n# add_test(aos_view aos_view)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# add_executable(variable variable.cc)\n\n# add_test(variable variable)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "deps/iod/tools/CMakeLists.txt" : {
      "ObjectId" : "5173f52a0c40297539d2e74e8b2a77cd1c789de7",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_executable(iod_generate_symbols iod_generate_symbols.cc)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install(TARGETS iod_generate_symbols\n\n#         DESTINATION bin)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/libbf/CMakeLists.txt" : {
      "ObjectId" : "5aa83e12e53e6ab1d324e5d1a95acc85f27c192a",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Silence warning CMP0042\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prohibit in-source builds.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support 'make uninstall'.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_subdirectory(test)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "deps/libbf/src/CMakeLists.txt" : {
      "ObjectId" : "16440aa87b5fd83c78dcda7ce2606f4ba3db19db",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/libbf/src/bf/CMakeLists.txt" : {
      "ObjectId" : "74aeb94640299df8de77b1548e313bedbc158e66",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/libbf/test/CMakeLists.txt" : {
      "ObjectId" : "b84f7c75d1fcf8319b1e306505a883c3a0e5af48",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/libbf/test/bf/CMakeLists.txt" : {
      "ObjectId" : "4ac31c7c25d4e56ae7187bad1c1a9a9a0695c985",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/lmdbxx/CMakeLists.txt" : {
      "ObjectId" : "ac23398ca78df5a61e5b28fd275c3ca5b92d74e7",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(CMAKE_CXX_STANDARD 17)\n\n# add_definitions(-std=c++17)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/lmdbxx/Makefile" : {
      "ObjectId" : "a5484111010be1c98a445492c0c26c7c3354a7af",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for lmdb++ <http://lmdbxx.sourceforge.net/>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/lrucache11/CMakeLists.txt" : {
      "ObjectId" : "3d7091d529c432b3fb9261aa524fadeb40b87e94",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(CMAKE_CXX_STANDARD 17)\n\n# add_definitions(-std=c++17)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/vdb/CMakeLists.txt" : {
      "ObjectId" : "a5f29a8a816f67badc800d2f5cdd592750ebe7d5",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/vdb/Makefile" : {
      "ObjectId" : "ea104c33041bc6885a3e4cdd109d6af553da5ad0",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# FLTK_CONFIG = local/bin/fltk-config\n\n# FLTK_TAR = fltk-1.3.3-source.tar.gz\n\n# FLTK_URL = http://fltk.org/pub/fltk/1.3.3/$(FLTK_TAR)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build/$(FLTK_TAR):\n\n# ifeq ($(UNAME), Darwin)\n\n#     curl $(FLTK_URL) -o build/$(FLTK_TAR)\n\n# else\n\n#     wget $(FLTK_URL) -O build/$(FLTK_TAR)\n\n# endif\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $(FLTK_DIR):    build/$(FLTK_TAR)\n\n#     (cd build; tar -xf $(FLTK_TAR))\n\n#\n\n# $(FLTK_CONFIG):    $(FLTK_DIR)\n\n#     (cd $(FLTK_DIR); ./configure --prefix=$(shell pwd)/local; make install)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# dependency rules\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "deps/vdb/examples/Makefile" : {
      "ObjectId" : "c487a94ef06e74a321529a18994c909e09f99f39",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "deps/vdb/lib/CMakeLists.txt" : {
      "ObjectId" : "6cd5ac97ec34d5fda04b40ec65414eb336de3e61",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(PUBLIC_HEADER_DST_LOCATION \"${OF_INST_INC_PATH}/${LIB_NAME}\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/vdb/src/CMakeLists.txt" : {
      "ObjectId" : "5a0994dd6e1dbf990e620c6e7cec20178a30bacc",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn (with Félix C. Morency)\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install(DIRECTORY ./base/ DESTINATION include/imagecompression/base\n\n#     FILES_MATCHING PATTERN \"*.h\")\n\n# install(DIRECTORY ./image_compression/internal/ DESTINATION include/imagecompression/internal\n\n#     FILES_MATCHING PATTERN \"*.h\")\n\n# install(DIRECTORY ./image_compression/public/ DESTINATION include/imagecompression/public\n\n#     FILES_MATCHING PATTERN \"*.h\")\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "halogen/CMakeLists.txt" : {
      "ObjectId" : "91688b69a4ce84dced13a6835284eae4f3d5c38b",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# src/CMakeLists.txt always enables C++11 for non-Windows,\n\n# so we'll give the same courtesy to tests\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# GENERATOR_ARGS \"target=x86-64-osx-sse41-avx,x86-64-osx-sse41,x86-64-osx\"\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# x86-64-osx\n",
        "Line" : 30,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 3
    },
    "python/Makefile" : {
      "ObjectId" : "a461cf7d75c378159635c27de74ab9c70e9953e2",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# TESTS = batch compat jupyter_repr planar_ops read readwrite structcode\n\n# TESTS = batch compat planar_ops read readwrite structcode\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/plat/mac/CMakeLists.txt" : {
      "ObjectId" : "9c94e9757101b3a432bb73e01c76eb0b7b4e58b2",
      "LastModified" : "2017-12-28T19:30:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "8c1e7cd4e2cb0f33c55f88982050df682814816f",
      "LastModified" : "2018-01-04T15:13:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Alexander Böhn\n\n# © 2011.10 -- GPL, Motherfuckers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ${CMAKE_CURRENT_LIST_DIR}/test_cvpixelformat.cpp\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ${CMAKE_CURRENT_LIST_DIR}/test_Zinterleaved_io.cpp\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 62,
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 2974
}