{
  "Repository" : "63258944",
  "Revision" : "HEAD",
  "ObjectId" : "af0536c05f80b44af99b0284c49ea2c37c883176",
  "CommitTime" : "2019-04-18T14:11:04Z",
  "Files" : {
    "patches/clutter/build/win32/vs12/Makefile.am" : {
      "ObjectId" : "aa181f22d887458d75e98bf5f40d2504a016d56e",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/clutter/build/win32/vs14/Makefile.am" : {
      "ObjectId" : "aa181f22d887458d75e98bf5f40d2504a016d56e",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/clutter/build/win32/vs15/Makefile.am" : {
      "ObjectId" : "aa181f22d887458d75e98bf5f40d2504a016d56e",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/cogl/build/win32/vs12/Makefile.am" : {
      "ObjectId" : "74189dcea59d5b9cacdcf1b497f4e902ce7ce1b0",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/cogl/build/win32/vs14/Makefile.am" : {
      "ObjectId" : "74189dcea59d5b9cacdcf1b497f4e902ce7ce1b0",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/cogl/build/win32/vs15/Makefile.am" : {
      "ObjectId" : "74189dcea59d5b9cacdcf1b497f4e902ce7ce1b0",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/glib-networking/build/win32/vs15/Makefile.am" : {
      "ObjectId" : "6839123404c7f351b93eb1d2e165c674dc737ba2",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/grpc/third_party/boringssl/CMakeLists.txt" : {
      "ObjectId" : "9c281501ff22167c9e79540f16670e7a12194089",
      "LastModified" : "2018-08-18T14:31:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defer enabling C and CXX languages.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Windows, prefer cl over gcc if both are available. By default most of\n\n# the CMake generators prefer gcc, even on Windows.\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Android-NDK CMake files reconfigure the path and so Go and Perl won't be\n\n# found. However, ninja will still find them in $PATH if we just name them.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Note clang-cl is odd and sets both CLANG and MSVC. We base our configuration\n\n# primarily on our normal Clang one because the MSVC one is mostly\n\n# suppressions for an overaggressive -Wall.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# clang-cl sets different default warnings than clang.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# googletest suppresses warning C4996 via a pragma, but clang-cl does not\n\n# honor it. Suppress it here to compensate. See https://crbug.com/772117.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# GCC (at least 4.8.4) has a bug where it'll find unreachable free() calls\n\n# and declare that the code is trying to free a stack pointer.\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# In GCC, -Wmissing-declarations is the C++ spelling of -Wmissing-prototypes\n\n# and using the wrong one is an error. In Clang, -Wmissing-prototypes is the\n\n# spelling for both and -Wmissing-declarations is some other warning.\n\n#\n\n# https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Warning-Options.html#Warning-Options\n\n# https://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-prototypes\n\n# https://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-declarations\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# enumerator 'identifier' in switch of enum 'enumeration' is not\n\n# explicitly handled by a case label\n\n# Disable this because it flags even when there is a default.\n\n# 'exarg' : unreferenced formal parameter\n\n# conditional expression is constant\n\n# nonstandard extension used : zero-sized array in\n\n# struct/union.\n\n# nonstandard extension used: non-constant aggregate initializer\n\n# nonstandard extension used : 'identifier' : cannot be\n\n# initialized using address of automatic variable\n\n# 'function' : conversion from 'int' to 'uint8_t',\n\n# possible loss of data\n\n# 'function' : conversion from 'int' to 'uint8_t',\n\n# possible loss of data\n\n# conversion from 'size_t' to 'int', possible loss of data\n\n# layout of class may have changed from a previous version of the\n\n# compiler due to better packing of member '...'\n\n# signed/unsigned mismatch\n\n# '>=' : expression is always true\n\n# behavior change: 'std::_Wrap_alloc...'\n\n# '=' : conversion from 'size_t' to 'int',\n\n# signed/unsigned mismatch\n\n# '!=' : signed/unsigned mismatch\n\n# relative include path contains '..'\n\n# 'argument' : default constructor could not be generated\n\n# 'argument' : assignment operator could not be generated\n\n# 'function': unreferenced inline function has been removed\n\n# expression before comma has no effect; expected expression with\n\n# side-effect\" caused by FD_* macros.\n\n# struct 'argument' can never be instantiated - user defined\n\n# constructor required.\n\n# default constructor was implicitly defined as deleted\n\n# copy constructor could not be generated because a base class\n\n# copy constructor is inaccessible or deleted\n\n# assignment operator could not be generated because a base class\n\n# assignment operator is inaccessible or deleted\n\n# 'symbol' is not defined as a preprocessor macro, replacing with\n\n# '0' for 'directives'\n\n# Disable this because GTest uses it everywhere.\n\n# assignment within conditional expression\n\n# 'function': function not inlined\n\n# function 'function' selected for inline expansion\n\n# 'int' : forcing value to bool 'true' or 'false'\n\n# (performance warning)\n\n# 'bytes' bytes padding added after construct 'member_name'\n\n# move constructor was implicitly defined as deleted\n\n# move assignment operator was implicitly defined as deleted\n",
        "Line" : 100,
        "CharPositionInLine" : 14
      },
      "9" : {
        "Text" : "# See https://connect.microsoft.com/VisualStudio/feedback/details/1217660/warning-c4265-when-using-functional-header\n",
        "Line" : 149,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# class has virtual functions, but destructor is not virtual\n",
        "Line" : 150,
        "CharPositionInLine" : 14
      },
      "11" : {
        "Text" : "# Allow use of fopen.\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# VS 2017 and higher supports STL-only warning suppressions.\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# pthread_rwlock_t requires a feature flag.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Enable position-independent code globally. This is needed because\n\n# some library targets are OBJECT libraries.\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# TODO(crbug.com/785442): Remove -fsanitize-cfi-icall-generalize-pointers.\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# We use Chromium's copy of clang, which requires -fuse-ld=lld if building\n\n# with -flto. That, in turn, can't handle -ggdb.\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# -flto causes object files to contain LLVM bitcode. Mixing those with\n\n# assembly output in the same static library breaks the linker.\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Delocate does not work for ASan and MSan builds.\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# CMake's iOS support uses Apple's multiple-architecture toolchain. It takes an\n\n# architecture list from CMAKE_OSX_ARCHITECTURES, leaves CMAKE_SYSTEM_PROCESSOR\n\n# alone, and expects all architecture-specific logic to be conditioned within\n\n# the source files rather than the build. This does not work for our assembly\n\n# files, so we fix CMAKE_SYSTEM_PROCESSOR and only support single-architecture\n\n# builds.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# cmake reports AMD64 on Windows, but we might be building for 32-bit.\n",
        "Line" : 297,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Just to avoid the “unknown processor” error.\n",
        "Line" : 316,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# The Android-NDK CMake files somehow fail to set the -march flag for\n\n# assembly files. Without this flag, the compiler believes that it's\n\n# building for ARMv5.\n",
        "Line" : 325,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# With CMake 2.8.x, ${CMAKE_SYSTEM_PROCESSOR} evalutes to i386 on OS X,\n\n# but clang defaults to 64-bit builds on OS X unless otherwise told.\n\n# Set ARCH to x86_64 so clang and CMake agree. This is fixed in CMake 3.\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Add minimal googletest targets. The provided one has many side-effects, and\n\n# googletest has a very straightforward build.\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Declare a dummy target to build all unit tests. Test targets should inject\n\n# themselves as dependencies next to the target definition.\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# libFuzzer does not pass our aggressive warnings. It also must be built\n\n# without -fsanitize-coverage options or clang crashes.\n",
        "Line" : 370,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# USES_TERMINAL is only available in CMake 3.2 or later.\n",
        "Line" : 379,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 28
    },
    "patches/gtk3-20/build/win32/vs15/Makefile.am" : {
      "ObjectId" : "0192eb4fac828c994b04f172870103bb554ae826",
      "LastModified" : "2018-09-15T12:15:07Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/gtksourceview3/build/win32/vs15/Makefile.am" : {
      "ObjectId" : "b692e604a567c73d71a6c82ff5364ddc33d425be",
      "LastModified" : "2018-09-15T12:15:07Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "patches/libcroco/build/win32/vs15/Makefile.am" : {
      "ObjectId" : "bc1d3194f8a2fb3dce6409bcd67d0e800a919aca",
      "LastModified" : "2018-09-15T12:15:07Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This file is part of The Croco Library\n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of version 2.1 of the GNU Lesser General Public\n\n# License as published by the Free Software Foundation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# You should have received a copy of the GNU Lesser General Public License\n\n# along with this program; if not, write to the Free Software\n\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307\n\n# USA\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Author: Fan, Chun-wei\n\n# See COPYRIGHTS file for copyright information.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "patches/libpng/CMakeLists.txt" : {
      "ObjectId" : "13b725618a1071f090c32cba653aedc9782915b4",
      "LastModified" : "2018-09-15T12:15:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2007,2009-2016 Glenn Randers-Pehrson\n\n# Written by Christian Ehrlicher, 2007\n\n# Revised by Roger Lowman, 2009-2010\n\n# Revised by Clifford Yapp, 2011-2012\n\n# Revised by Roger Leigh, 2016\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This code is released under the libpng license.\n\n# For conditions of distribution and use, see the disclaimer\n\n# and license in png.h\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set MacOSX @rpath usage globally.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use new variable expansion policy.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# needed packages\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# not needed on windows\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# COMMAND LINE OPTIONS\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Many more configuration options could be added here\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# SET LIBNAME\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check if LD supports linker scripts.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Find symbol prefix.  Likely obsolete and unnecessary with recent\n\n# toolchains (it's not done in many other projects).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# No awk available to generate sources; use pre-built pnglibconf.h\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Dummy\n",
        "Line" : 149,
        "CharPositionInLine" : 30
      },
      "14" : {
        "Text" : "# Generate .chk from .out with awk\n\n# generate_chk(INPUT inputfile OUTPUT outputfile [DEPENDS dep1 [dep2...]])\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Generate .out from .c with awk\n\n# generate_out(INPUT inputfile OUTPUT outputfile [DEPENDS dep1 [dep2...]])\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Generate specific source file with awk\n\n# generate_source(OUTPUT outputfile [DEPENDS dep1 [dep2...]])\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Copy file\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Generate scripts/pnglibconf.h\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Generate pnglibconf.c\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Generate pnglibconf.h\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Generate pngprefix.h\n",
        "Line" : 264,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# A single target handles generation of all generated files.  If\n\n# they are dependend upon separately by multiple targets, this\n\n# confuses parallel make (it would require a separate top-level\n\n# target for each file to track the dependencies properly).\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# OUR SOURCES\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOW BUILD OUR TARGET\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# msvc does not append 'lib' - do it here to have consistent name\n",
        "Line" : 402,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# does not work without changing name\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# MSVC doesn't use a different file extension for shared vs. static\n\n# libs.  We are able to change OUTPUT_NAME to remove the _static\n\n# for all other platforms.\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# msvc does not append 'lib' - do it here to have consistent name\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# have generator expressions\n",
        "Line" : 490,
        "CharPositionInLine" : 36
      },
      "30" : {
        "Text" : "# old 2.x add_test; limited and won't work well on Windows\n",
        "Line" : 496,
        "CharPositionInLine" : 9
      },
      "31" : {
        "Text" : "# Note LIBPNG is a dummy value as there are no generator expressions\n",
        "Line" : 497,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Find test PNG files by globbing, but sort lists to ensure\n\n# consistency between different filesystems.\n",
        "Line" : 506,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Should already be sorted, but sort anyway to be certain.\n",
        "Line" : 598,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Ensure the CMAKE_LIBRARY_OUTPUT_DIRECTORY is set\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Set a variable with CMake code which:\n\n# Creates a symlink from src to dest (if possible) or alternatively\n\n# copies if different.\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Create source generation scripts.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# libpng is a library so default to 'lib'\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# CREATE PKGCONFIG FILES\n\n# we use the same files like ./configure, so we have to set its vars\n\n# Only do this on Windows for Cygwin - the files don't make much sense outside\n\n# a UNIX look alike\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# SET UP LINKS\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#   VERSION 16.${PNGLIB_RELEASE}.1.6.24beta02\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# If CMake > 2.4.x, we set a variable used below to export\n\n# targets to an export file.\n\n# TODO: Use VERSION_GREATER after our cmake_minimum_required >= 2.6.2\n",
        "Line" : 703,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# future proof\n",
        "Line" : 708,
        "CharPositionInLine" : 38
      },
      "43" : {
        "Text" : "# INSTALL\n",
        "Line" : 712,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Create a symlink for libpng.dll.a => libpng16.dll.a on Cygwin\n",
        "Line" : 722,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Install man pages\n",
        "Line" : 766,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Install pkg-config files\n",
        "Line" : 772,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# On versions of CMake that support it, create an export file CMake\n\n# users can include() to import our targets\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# what's with libpng-manual.txt and all the extra files?\n",
        "Line" : 791,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# UNINSTALL\n\n# do we need this?\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# DIST\n\n# do we need this?\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# to create msvc import lib for mingw compiled shared lib\n\n# pexports libpng.dll > libpng.def\n\n# lib /def:libpng.def /machine:x86\n",
        "Line" : 799,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    },
    "patches/librsvg/build/win32/vs15/Makefile.am" : {
      "ObjectId" : "a3fdc209245e2343c6eb150c314224f0b82696c2",
      "LastModified" : "2018-09-15T12:15:07Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 2,
    "AUTOMAKE" : 11
  },
  "ElapsedTime" : 1298
}