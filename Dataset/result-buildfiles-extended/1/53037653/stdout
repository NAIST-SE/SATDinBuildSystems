{
  "Repository" : "53037653",
  "Revision" : "HEAD",
  "ObjectId" : "cd50afddebe0e67229298707b7883dcf236d288f",
  "CommitTime" : "2019-04-09T13:28:17Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "16b633087b747a5ec649dbdde7cd35a64e96be31",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# print initial information about the project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cmake requirements and policies\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid a warning because \"hth\" links to\n\n# the in-tree libhawkey, but uses pkg-config to find\n\n# GLib.  There may be a better way to do this...\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# use project specific cmake modules\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# print exact name and version of the compiled project\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# build options\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# load pkg-config first; it's required by other modules\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# build dependencies\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# build dependencies via pkg-config\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# always enable linking with libdnf utils\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# glibc: check if fnmatch.h has FNM_CASEFOLD symbol\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# python\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# valgrind path\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# compiler options\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# apple: turn rpath off\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# package/project version\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The libdnf API is under development now. This enables it for internal usage.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# gettext\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# gpgme: LargeFile Support is required on 32bit architectures\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# tests\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# librhsm\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# libsolv\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# build binaries\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# add_subdirectory(bindings/perl)\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# build translations\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# build docs\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# build tests\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "VERSION.cmake" : {
      "ObjectId" : "db84f79379d69736f523da647ce730400d2c7888",
      "LastModified" : "2019-03-27T11:27:20Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/perl/CMakeLists.txt" : {
      "ObjectId" : "6bebd1e10bba67eb0f66425450c5d665bb2905e4",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/python/CMakeLists.txt" : {
      "ObjectId" : "9e3abfec87189ac3861601afa1e99622231f07bc",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# using 64bit architecture\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The libdnf API is under development now. This enables it for internal usage.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules-cmake-2/UseSWIG.cmake" : {
      "ObjectId" : "81829d77c29d9cb922f40be9ef4559ac7e5da02e",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - SWIG module for CMake\n\n# Defines the following macros:\n\n#   SWIG_ADD_MODULE(name language [ files ])\n\n#     - Define swig module with given name and specified language\n\n#   SWIG_LINK_LIBRARIES(name [ libraries ])\n\n#     - Link libraries to swig module\n\n# All other macros are for internal use only.\n\n# To get the actual name of the swig module,\n\n# use: ${SWIG_MODULE_${name}_REAL_NAME}.\n\n# Set Source files properties such as CPLUSPLUS and SWIG_FLAGS to specify\n\n# special behavior of SWIG. Also global CMAKE_SWIG_FLAGS can be used to add\n\n# special flags to all swig calls.\n\n# Another special variable is CMAKE_SWIG_OUTDIR, it allows one to specify\n\n# where to write all the swig generated module (swig -outdir option)\n\n# The name-specific variable SWIG_MODULE_<name>_EXTRA_DEPS may be used\n\n# to specify extra dependencies for the generated modules.\n\n# If the source file generated by swig need some special flag you can use\n\n# set_source_files_properties( ${swig_generated_file_fullname}\n\n#        PROPERTIES COMPILE_FLAGS \"-bla\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n# Copyright 2009 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# For given swig module initialize variables associated with it\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# when swig is used without the -interface it will produce in the module.py\n\n# a 'import _modulename' statement, which implies having a corresponding\n\n# _modulename.so (*NIX), _modulename.pyd (Win32).\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# For a given language, input file, and output file, determine extra files that\n\n# will be generated. This is internal swig macro.\n\n#\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Take swig (*.i) file and add proper custom commands for it\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Avoid having a really deep path.\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Source file is relative to the cmake current source dir.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If CMAKE_SWIG_OUTDIR was specified then pass it to -outdir\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# add the language into the name of the file (i.e. TCL_wrap)\n\n# this allows for the same .i file to be wrapped into different languages\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#message(\"Full path to source file: ${swig_source_file_fullname}\")\n\n#message(\"Full path to the output file: ${swig_generated_file_fullname}\")\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# default is c, so add c++ flag if it is c++\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Let's create the ${swig_outdir} at execution time, in case dir contains $(OutDir)\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#\n\n# Create Swig module\n\n#\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# In java you want:\n\n#      System.loadLibrary(\"LIBRARY\");\n\n# then JNI will look for a library whose name is platform dependent, namely\n\n#   MacOS  : libLIBRARY.jnilib\n\n#   Windows: LIBRARY.dll\n\n#   Linux  : libLIBRARY.so\n",
        "Line" : 208,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# this is only needed for the python case where a _modulename.so is generated\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Python extension modules on Windows must have the extension \".pyd\"\n\n# instead of \".dll\" as of Python 2.5.  Older python versions do support\n\n# this suffix.\n\n# http://docs.python.org/whatsnew/ports.html#SECTION0001510000000000000000\n\n# <quote>\n\n# Windows: .dll is no longer supported as a filename extension for extension modules.\n\n# .pyd is now the only filename extension that will be searched for.\n\n# </quote>\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#\n\n# Like TARGET_LINK_LIBRARIES but for swig modules\n\n#\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/modules/FindGLIB.cmake" : {
      "ObjectId" : "abe3a886c22430dadde0b685f3b134e062801eac",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glib and its components (gio, gobject etc)\n\n# Once done, this will define\n\n#\n\n#  GLIB_FOUND - system has Glib\n\n#  GLIB_INCLUDE_DIRS - the Glib include directories\n\n#  GLIB_LIBRARIES - link these to use Glib\n\n#\n\n# Optionally, the COMPONENTS keyword can be passed to find_package()\n\n# and Glib components can be looked for.  Currently, the following\n\n# components can be used, and they define the following variables if\n\n# found:\n\n#\n\n#  gio:             GLIB_GIO_LIBRARIES\n\n#  gobject:         GLIB_GOBJECT_LIBRARIES\n\n#  gmodule:         GLIB_GMODULE_LIBRARIES\n\n#  gthread:         GLIB_GTHREAD_LIBRARIES\n\n#\n\n# Note that the respective _INCLUDE_DIR variables are not set, since\n\n# all headers are in the same directory as GLIB_INCLUDE_DIRS.\n\n#\n\n# Copyright (C) 2012 Raphael Kubo da Costa <rakuco@webkit.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1.  Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n# 2.  Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS\n\n# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Files in glib's main include path may include glibconfig.h, which,\n\n# for some odd reason, is normally in $LIBDIR/glib-2.0/include.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version detection\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Additional Glib components.  We only look for libraries, as not all of them\n\n# have corresponding headers and all headers are installed alongside the main\n\n# glib ones.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# gio-unix is compiled as part of the gio library, but the include paths\n\n# are separate from the shared glib ones. Since this is currently only used\n\n# by WebKitGTK+ we don't go to extraordinary measures beyond pkg-config.\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindGpgme.cmake" : {
      "ObjectId" : "a563c5689f9ebd060e94543aa276af70e750d475",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Code is taken from KDE project:\n\n# http://code.metager.de/source/xref/kde/kdepimlibs/cmake/modules/FindGpgme.cmake\n\n#\n\n# - Try to find the gpgme library\n\n#\n\n# Algorithm:\n\n#  - Windows:\n\n#    On Windows, there's three gpgme variants: gpgme{,-glib,-qt}.\n\n#    - The variant used determines the event loop integration possible:\n\n#      - gpgme:      no event loop integration possible, only synchronous operations supported\n\n#      - gpgme-glib: glib event loop integration possible, only asynchronous operations supported\n\n#      - gpgme-qt:   qt event loop integration possible, only asynchronous operations supported\n\n#    - GPGME_{VANILLA,GLIB,QT}_{FOUND,LIBRARIES} will be set for each of the above\n\n#    - GPGME_INCLUDES is the same for all of the above\n\n#    - GPGME_FOUND is set if any of the above was found\n\n#  - *nix:\n\n#    There's also three variants: gpgme{,-pthread,-pth}.\n\n#    - The variant used determines the multithreaded use possible:\n\n#      - gpgme:         no multithreading support available\n\n#      - gpgme-pthread: multithreading available using POSIX threads\n\n#      - gpgme-pth:     multithreading available using GNU PTH (cooperative multithreading)\n\n#    - GPGME_{VANILLA,PTH,PTHREAD}_{FOUND,LIBRARIES} will be set for each of the above\n\n#    - GPGME_INCLUDES is the same for all of the above\n\n#    - GPGME_FOUND is set if any of the above was found\n\n#\n\n#  GPGME_LIBRARY_DIR - the directory where the libraries are located\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# THIS IS ALMOST A 1:1 COPY OF FindAssuan.cmake in kdepim.\n\n# Any changes here likely apply there, too.\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# do away with crappy condition repetition on else/endfoo\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if this is built-in, please replace, if it isn't, export into a MacroToBool.cmake of it's own\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#include (MacroEnsureVersion)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On Windows, we don't have a gpgme-config script, so we need to\n\n# look for the stuff ourselves:\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# in cmake, AND and OR have the same precedence, there's no\n\n# subexpressions, and expressions are evaluated short-circuit'ed\n\n# IOW: CMake if() suxx.\n\n# Starting with CMake 2.6.3 you can group if expressions with (), but we \n\n# don't require 2.6.3 but 2.6.2, we can't use it. Alex\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# this would have been preferred:\n\n#set( GPGME_*_FOUND macro_bool_to_bool(GPGME_*_LIBRARIES) )\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# is this needed, of just unreflected cut'n'paste?\n\n# this isn't a KDE library, after all!\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# these are Unix-only:\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# not WIN32\n",
        "Line" : 170,
        "CharPositionInLine" : 7
      },
      "11" : {
        "Text" : "# On *nix, we have the gpgme-config script which can tell us all we\n\n# need to know:\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# see WIN32 case for an explanation of what this does:\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# if gpgme-config has been found\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#      set( _GPGME_MIN_VERSION \"1.1.7\" )\n\n#      macro_ensure_version( ${_GPGME_MIN_VERSION} ${GPGME_VERSION} _GPGME_INSTALLED_VERSION_OK )\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#      if ( NOT _GPGME_INSTALLED_VERSION_OK )\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#        message( STATUS \"The installed version of gpgme is too old: ${GPGME_VERSION} (required: >= ${_GPGME_MIN_VERSION})\" )\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#      else()\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# append -lgpg-error to the list of libraries, if necessary\n",
        "Line" : 237,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# if -L options were given, look only there\n",
        "Line" : 278,
        "CharPositionInLine" : 16
      },
      "20" : {
        "Text" : "# if not found there, look in system directories\n",
        "Line" : 283,
        "CharPositionInLine" : 16
      },
      "21" : {
        "Text" : "# if still not found, then the whole flavour isn't found\n",
        "Line" : 288,
        "CharPositionInLine" : 16
      },
      "22" : {
        "Text" : "#check_c_library_exists_explicit( gpgme         gpgme_check_version \"${_GPGME_CFLAGS}\" \"${GPGME_LIBRARIES}\"         GPGME_FOUND         )\n",
        "Line" : 299,
        "CharPositionInLine" : 14
      },
      "23" : {
        "Text" : "# ensure that they are cached\n\n# This comment above doesn't make sense, the four following lines seem to do nothing. Alex\n",
        "Line" : 310,
        "CharPositionInLine" : 10
      },
      "24" : {
        "Text" : "#        endif()\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# these are Windows-only:\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#  macro_bool_to_01( GPGME_FOUND         HAVE_GPGME         )\n\n#  macro_bool_to_01( GPGME_VANILLA_FOUND HAVE_GPGME_VANILLA )\n\n#  macro_bool_to_01( GPGME_PTHREAD_FOUND HAVE_GPGME_PTHREAD )\n\n#  macro_bool_to_01( GPGME_PTH_FOUND     HAVE_GPGME_PTH     )\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# WIN32 | Unix\n",
        "Line" : 342,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# determine the library in one of the found flavours, can be reused e.g. by FindQgpgme.cmake, Alex\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#  macro_log_feature(\n\n#   GPGME_FOUND\n\n#  \"gpgme\"\n\n#  \"GNU Privacy Guard (GPG/PGP) support\"\n\n#  ${_gpgme_homepage}\n\n#  ${_req}\n\n#  \"${_GPGME_MIN_VERSION} or greater\"\n\n#  \"Necessary to compile many PIM applications, including KMail\"\n\n#)\n",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 30
    },
    "cmake/modules/FindGtkDoc.cmake" : {
      "ObjectId" : "92b2cc7e7ad5745e5e3b77c0bdd68c149b4ebef6",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGtkDoc\n\n# ----------\n\n#\n\n# CMake macros to find and use the GtkDoc documentation system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Output variables:\n\n#\n\n#   GTKDOC_FOUND            ... set to 1 if GtkDoc was foung\n\n#\n\n# If GTKDOC_FOUND == 1:\n\n#\n\n#   GTKDOC_SCAN_EXE         ... the location of the gtkdoc-scan executable\n\n#   GTKDOC_SCANGOBJ_EXE     ... the location of the gtkdoc-scangobj executable\n\n#   GTKDOC_MKDB_EXE         ... the location of the gtkdoc-mkdb executable\n\n#   GTKDOC_MKHTML_EXE       ... the location of the gtkdoc-mkhtml executable\n\n#   GTKDOC_FIXXREF_EXE      ... the location of the gtkdoc-fixxref executable\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Rich Wareham\n\n# Copyright 2015 Lautsprecher Teufel GmbH\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The UseGtkDoc.cmake module requires at least 1.9, because it doesn't use\n\n# the deprecated `gtkdoc-mktmpl` tool. We will check if the version satisfies\n\n# the user's specified dependencies later (with the\n\n# find_package_handle_standard_args() command).\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ::\n\n#\n\n# gtk_doc_add_module(doc_prefix sourcedir\n\n#                    [XML xmlfile]\n\n#                    [FIXXREFOPTS fixxrefoption1...]\n\n#                    [IGNOREHEADERS header1...]\n\n#                    [DEPENDS depend1...] )\n\n#\n\n# sourcedir must be the *full* path to the source directory.\n\n#\n\n# If omitted, sgmlfile defaults to the auto generated ${doc_prefix}/${doc_prefix}-docs.xml.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set(_do_all ALL)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# a directory to store output.\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# set default sgml file if not specified\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# a directory to store html output.\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# The output files\n",
        "Line" : 120,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# add a command to create output directory\n",
        "Line" : 138,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# add a command to scan the input\n",
        "Line" : 153,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# add a command to scan the input via gtkdoc-scangobj\n\n# This is such a disgusting hack!\n",
        "Line" : 175,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# add a command to make the database\n",
        "Line" : 207,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# add a command to create html directory\n",
        "Line" : 230,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# add a command to output HTML\n",
        "Line" : 237,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 16
    },
    "cmake/modules/FindPythonInstDir.cmake" : {
      "ObjectId" : "08d926c093b153e35cfab4c8c7d248145eab5316",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/GtkDocScanGObjWrapper.cmake" : {
      "ObjectId" : "279232676dcded02a6c68d9fd4f7b0acf219da01",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We use pkg-config to fing glib et al\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Find glib et al\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "docs/hawkey/CMakeLists.txt" : {
      "ObjectId" : "47824fe15097c92c2feddf71f46cb15ed85b96ca",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# html and man documentation are separate targets, apparently there's no way to\n\n# tell sphinx-build to do them both in one go:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/libdnf/CMakeLists.txt" : {
      "ObjectId" : "9fcf8a8d12fcebbfe2a23c45f8a20dc737078a61",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/CMakeLists.txt" : {
      "ObjectId" : "b34d0a2771152daf548123207bb67a41b13a731e",
      "LastModified" : "2019-03-27T14:43:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/conf/CMakeLists.txt" : {
      "ObjectId" : "049954ab37cdee2953730e5eeb37e1bbcf57cd92",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/goal/CMakeLists.txt" : {
      "ObjectId" : "31a4158ef9dc427b547e79856270bbc80655c728",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/module/CMakeLists.txt" : {
      "ObjectId" : "b57354ae841a7d971b61566ed3e4775b829eb804",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/module/modulemd/CMakeLists.txt" : {
      "ObjectId" : "2c0683333913ad48f7d87a4e0c52c1102bb05250",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/plugin/CMakeLists.txt" : {
      "ObjectId" : "05d00ec21346e0bd2e61245df9a86476ecd8e1f5",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/repo/CMakeLists.txt" : {
      "ObjectId" : "7991cf93f0a8d6472f362a3890cce3dc78af8603",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/repo/solvable/CMakeLists.txt" : {
      "ObjectId" : "2495f42be9e4fc69078c8064f1aa4f220007c724",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/sack/CMakeLists.txt" : {
      "ObjectId" : "40d3373c8e07aeaaa88720ef6e99a9a2138ec6f0",
      "LastModified" : "2019-04-08T07:32:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/transaction/CMakeLists.txt" : {
      "ObjectId" : "143df57e378fa5a281fc047aa11462625652aced",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/transaction/private/CMakeLists.txt" : {
      "ObjectId" : "cb2f96386fede23536628e85371298583d5a6c3c",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/utils/CMakeLists.txt" : {
      "ObjectId" : "cd788d45534aa1e564d2660c45c13a625fc8a515",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/utils/bgettext/CMakeLists.txt" : {
      "ObjectId" : "a855cfe78e72603e76811464fa2402a5aa154801",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/utils/crypto/CMakeLists.txt" : {
      "ObjectId" : "149d100cc3b7c7783ac16be2870ae7d2e5fbb5b9",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/utils/iniparser/CMakeLists.txt" : {
      "ObjectId" : "75f909ef95a9c436c7a580d3460abbdc0c7d6d83",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/utils/regex/CMakeLists.txt" : {
      "ObjectId" : "5165f75799f822cbde06387741d420c3d7c35c62",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/utils/smartcols/CMakeLists.txt" : {
      "ObjectId" : "55702ad4d2f2e77ca914b3d9aea8d65271dfa7ac",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libdnf/utils/sqlite3/CMakeLists.txt" : {
      "ObjectId" : "7f5e8f3471c0a910fc6fe9d3809423ee5793cc73",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/Makefile" : {
      "ObjectId" : "5ca9b7f3b39e5cee6c8828f56964d8feed18ae6b",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "7d4c736a683ec6d8f413092d5a5be79c300b85f4",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# pushing/pulling translations to zanata\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this process unfortunately reformats .po files so copy them\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "python/hawkey/CMakeLists.txt" : {
      "ObjectId" : "96e9d437a198e78e9cdaad698b8675be82bf69ab",
      "LastModified" : "2019-04-08T07:32:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/hawkey/tests/CMakeLists.txt" : {
      "ObjectId" : "f695585fc0d119e01f0e496971410074a6d0a651",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/hawkey/tests/module/CMakeLists.txt" : {
      "ObjectId" : "6446afe23fc2e23e521c374f24d4c4458d70414e",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# copy the whole package under hawkey/test so 'import hawkey.test' works as expected:\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "python/hawkey/tests/tests/CMakeLists.txt" : {
      "ObjectId" : "3c2d0b29309fcf6d5280cf1526e848ca912a752f",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "2dcfca22121dd0237780fb4087598fc00530b57c",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/hawkey/CMakeLists.txt" : {
      "ObjectId" : "4ebf2ad80296f93d784caf65a6861c5ca83ff86a",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The binary links in testshared which was built with -fPIC\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/libdnf/CMakeLists.txt" : {
      "ObjectId" : "a4b3d4bf21d8eab36eae71a154783500fa871672",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/libdnf/module/CMakeLists.txt" : {
      "ObjectId" : "f45df0922f469b1e05fe3855154793de1ecbe689",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/libdnf/repo/CMakeLists.txt" : {
      "ObjectId" : "e0085df4ee1c851afdce4a6ce10fba1a20123c14",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/libdnf/transaction/CMakeLists.txt" : {
      "ObjectId" : "3422ef9250dc97ade3ddabb48482744ba6d86c76",
      "LastModified" : "2019-02-20T08:38:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 41,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2782
}