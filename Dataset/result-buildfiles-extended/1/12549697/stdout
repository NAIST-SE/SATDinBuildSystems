{
  "Repository" : "12549697",
  "Revision" : "HEAD",
  "ObjectId" : "c323375f6249a655ddb3684d5f09770a1f58aeee",
  "CommitTime" : "2019-04-12T19:59:23Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "af1b37ed916fcc1df463346a536e932b2db2199a",
      "LastModified" : "2018-12-06T23:43:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Options\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check that submodules are present.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If target platform isn't specified, use the local platform.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure platform target.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cache platform target.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include the platform config file.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Choose JavaScript implementation.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add core library.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Makefile" : {
      "ObjectId" : "91463097b4a507f096c9bf12b6cc7b874fdeaf9c",
      "LastModified" : "2018-11-28T23:04:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Default build type is Release\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This rule includes steps to copy necessary workspace settings into a user-specific location in the iOS workspace.\n\n# See platforms/ios/DEVELOPING.md for details.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Android Helpers\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "bench/CMakeLists.txt" : {
      "ObjectId" : "c6bdd56b3c68f8102562000e5a08da1e8d183fa8",
      "LastModified" : "2018-12-18T18:19:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build Google Benchmark library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create an executable per bench\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use all include directories from tangram-core because tests interact with internal classes.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/glfw.cmake" : {
      "ObjectId" : "2e014bbf4c30b2712dfec29207a785a7bd0d0e85",
      "LastModified" : "2018-06-28T17:17:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build GLFW.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configure GLFW to build only the library\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Turn off noisy warnings from clang on macOS.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/tizen.toolchain.cmake" : {
      "ObjectId" : "7a0d9a456f0c25f1a78c79802c8befdcabb72282",
      "LastModified" : "2018-06-28T17:17:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Emulator\n",
        "Line" : 12,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 1
    },
    "cmake/utils.cmake" : {
      "ObjectId" : "74219ec35f43b18d8ce08c6062c54b89a3903a23",
      "LastModified" : "2019-01-17T20:15:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# message(STATUS \"resource at: ${_full_resource_path}\\n   remapped to: ${RESOURCE_BASE}/${REL_RESOURCE_DIR}\")\n",
        "Line" : 91,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# This little macro lets you set any XCode specific property\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "core/CMakeLists.txt" : {
      "ObjectId" : "44b385f16b88536da65178a03891655a24380293",
      "LastModified" : "2019-04-12T19:59:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build core library dependencies.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include headers from core library and dependencies.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: These headers shouldn't be public, but Platform classes use them.\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# TODO: This header shouldn't be public, but we use it in propertyItem.h\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Link core library dependencies.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add JavaScript implementation.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add MBTiles implementation.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# SQLite needs dl dynamic library loader when Linux\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# using regular Clang or AppleClang\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# C++14 is required for compiling tangram-core and for using the interface headers.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We include GLSL shader sources into the library by generating header files with the source text\n\n# printed into a string constant. A CMake script generates one of these headers for each shader source\n\n# file and they each become a custom target that the core library depends on.\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create source groups for Xcode - this source_group syntax requires version >=3.8\n",
        "Line" : 328,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "core/deps/CMakeLists.txt" : {
      "ObjectId" : "a9fffb520db458fc4c5aeb38c85aac07a2c4336b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Recent versions of Clang are extremely verbose about implicit long-to-int\n\n# conversions. While this *can* be an actual error, it's not practical to\n\n# address every instance of it in all dependencies, so we'll silence it here.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "## yaml-cpp ##\n\n##############\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## css-color-parser-cpp ##\n\n##########################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## duktape ##\n\n#############\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## miniz ##\n\n###########\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Harfbuzz - ICU-Common - UCDN - Freetype2 ##\n\n##############################################\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "## alfons ##\n\n############\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## SQLiteCpp ##\n\n###############\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Extensions aren't needed for MBTiles and aren't available in older versions of sqlite3.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# needed for sqlite3 to work for ndk15c+ and android api level < 21\n\n# refer:\n\n# https://github.com/android-ndk/ndk/issues/477 and\n\n# https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## double-conversion ##\n\n#######################\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Prebuild JavascriptCore ##\n\n#############################\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "core/deps/double-conversion/CMakeLists.txt" : {
      "ObjectId" : "eb48f4d053e7615fe982c3de4bc0e6cf5ef22533",
      "LastModified" : "2018-06-28T17:17:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/deps/duktape/CMakeLists.txt" : {
      "ObjectId" : "fa4abdb77b178ff1f3f90a9eb9a12e2c6406530e",
      "LastModified" : "2018-11-28T23:04:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/deps/glm/glm/CMakeLists.txt" : {
      "ObjectId" : "d60a887712d6b0346b52b4748c3d87f00340b931",
      "LastModified" : "2018-11-28T23:04:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "core/shaders.cmake" : {
      "ObjectId" : "b84ce144583209f8c07041f4c788d94e48079373",
      "LastModified" : "2018-11-28T23:04:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# drop single line comments\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# drop empty lines\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "platforms/android/config.cmake" : {
      "ObjectId" : "be38d92246b7e0cd95a3958d361038f4f4b21485",
      "LastModified" : "2019-01-17T20:15:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Force Ninja on CircleCI to use a specific number of concurrent jobs.\n\n# Otherwise it guesses concurrency based on the physical CPU (which has a lot of cores!) and runs out of memory.\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# sqlite3ndk.cpp needs sqlite3.h\n",
        "Line" : 20,
        "CharPositionInLine" : 74
      },
      "2" : {
        "Text" : "# android libraries\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "platforms/common/imgui/CMakeLists.txt" : {
      "ObjectId" : "da1d77784b9df7911e6e7ad42a2f53cdb90ae04f",
      "LastModified" : "2019-01-17T20:15:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/ios/config.cmake" : {
      "ObjectId" : "65e47f0d01df80f0afb48d1ceb856691bf412494",
      "LastModified" : "2019-03-06T01:17:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Configure iOS toolchain.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the API key in the Info.plist for the demo app.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tell SQLiteCpp to not build its own copy of SQLite, we will use the system library instead.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Headers must be absolute paths for the copy_if_different command on the\n\n# static library target, relative paths cause it to fail with an error.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Configure dynamic framework build target. \n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Frameworks: use quotes so \"-framework X\" is treated as a single linker flag.\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "### Configure static library build target.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Frameworks: use quotes so \"-framework X\" is treated as a single linker flag.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# To produce a distributable version of our iOS SDK as a static library, we\n\n# need to collect all the symbols that will be needed in a final, linked\n\n# executable. CMake normally makes these symbols available by propagating link\n\n# flags from dependencies, but users who aren't building the SDK from source\n\n# won't have the dependency libraries in a build tree. We solve this by pre-\n\n# linking all of the dependency libraries that we would normally pass as flags.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Here we manually list the library files for all of our compiled dependencies.\n\n# I haven't found a way to get a full, recursive library list from CMake\n\n# so this list will need to be updated when any new library dependencies are\n\n# added. Note the quotes: this is needed to not make it a \"list\", which CMake\n\n# delimits with semicolons. Xcode expects a space-delimited list.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The Xcode settings below are to pre-link our static libraries into a single\n\n# archive. Xcode will take the objects from this target and from all of the\n\n# pre-link libraries, combine them, and resolve the symbols into one \"master\"\n\n# object file before outputting an archive.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Copy the framework headers into a directory in the build folder, for use by\n\n# the static demo app build and for distribution.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "platforms/linux/config.cmake" : {
      "ObjectId" : "63f02a25c2d3eba178e025ef27fdba91e2e5589d",
      "LastModified" : "2019-01-17T20:15:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# System font config\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only used when not using external lib\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "platforms/osx/config.cmake" : {
      "ObjectId" : "f302ff09bcbd8197e9ed33ca92da8b5168f0c279",
      "LastModified" : "2018-11-28T23:04:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add resource files and property list\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "platforms/rpi/config.cmake" : {
      "ObjectId" : "b94dbcaf83e3adaceea856e7648fdb9d72aca0b1",
      "LastModified" : "2019-01-17T20:15:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# System font config\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "platforms/tizen/config.cmake" : {
      "ObjectId" : "b69eb460123dadba1ce4afada09ecf7b66c9dbb0",
      "LastModified" : "2018-11-28T23:04:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include(${CMAKE_SOURCE_DIR}/toolchains/tizen.toolchain.cmake)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# global compile options\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# load core library\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# in order to have libtangram.so\n",
        "Line" : 45,
        "CharPositionInLine" : 22
      },
      "4" : {
        "Text" : "# link to the core library, forcing all symbols to be added\n\n# (whole-archive must be turned off after core so that lc++ symbols aren't duplicated)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "c8b89b9b0bd20102690ad0e15d3961ee92961037",
      "LastModified" : "2019-01-17T20:15:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy resources into output directory (only needs to be performed for one target)\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# create an executable per test\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use all include directories from tangram-core because tests interact with internal classes.\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Copy resources into output directory (only needs to be performed for one target)\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 19,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1946
}