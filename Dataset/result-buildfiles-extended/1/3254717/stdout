{
  "Repository" : "3254717",
  "Revision" : "HEAD",
  "ObjectId" : "ce61b83d8551bee46418156a6f197c3ee41f7e13",
  "CommitTime" : "2019-04-06T03:57:07Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "219f4b75e51798ba4db2d2e2062f893eaa956d27",
      "LastModified" : "2018-08-23T10:46:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# enable testing globally\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# support for ccache\n\n# call CMake with -DUSE_CCACHE=ON to make use of it\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####################\n\n# build information #\n\n#####################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# determine Git commit ID\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set version and build number\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get current date\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# C and C++ versions\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########################\n\n# configure dependencies #\n\n##########################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# configure dependencies\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################\n\n# Source files #\n\n################\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# sanitizer support\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################\n\n#           packaging          #\n\n################################\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/cpack_debs.cmake" : {
      "ObjectId" : "7510862e474dca893791c03cb98c4da8719cfa22",
      "LastModified" : "2018-05-14T17:23:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# required for DEB-DEFAULT to work as intended\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# versioning\n\n# it appears setting CPACK_DEBIAN_PACKAGE_VERSION doesn't work, hence setting CPACK_PACKAGE_VERSION\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use git hash as package release\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# append build ID, similar to AppImage naming\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/dependencies.cmake" : {
      "ObjectId" : "9f7901f00ef2e943c7fa3a3e412e84cac98cc1a2",
      "LastModified" : "2018-12-05T20:47:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# >= 3.2 required for ExternalProject_Add_StepDependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the names of the targets need to differ from the library filenames\n\n# this is especially an issue with libcairo, where the library is called libcairo\n\n# therefore, all libs imported this way have been prefixed with lib\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# openssl is required for optional tools only, and doesn't need to be enforced\n\n# FIXME: remove dependency to openssl by implementing own SHA hashes in libappimage_hashlib\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: find way to use find_program with all possible paths\n\n# (might differ from distro to distro)\n\n# these work on Debian and Ubuntu:\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# TODO: allow using system wide mksquashfs\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ${MAKE} sure CMake won't try to fetch updates unnecessarily and hence rebuild the dependency every time\n",
        "Line" : 55,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "# ${MAKE} install unfortunately expects unsquashfs to be built as well, hence can't install the binary\n\n# therefore using built file in SOURCE_DIR\n\n# TODO: implement building out of source\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# for later use when packaging as an AppImage\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#### build dependency configuration ####\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# only have to build custom xz when not using system libxz\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/toolchains/aarch64-linux-gnu.cmake" : {
      "ObjectId" : "4b35337c3cf12cfb5991393bf2f0eb964b3ffcd2",
      "LastModified" : "2018-12-05T20:47:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# toolchain file that can be used for cross-compiling AppImageKit using the respective AppImageBuild container\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# host = target system\n\n# build = build system\n\n# both must be specified\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/toolchains/arm-linux-gnueabihf.cmake" : {
      "ObjectId" : "6c755e66e9c9f7c6e79b5a2ca5cd5b387b196197",
      "LastModified" : "2018-12-05T20:47:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# toolchain file that can be used for cross-compiling AppImageKit using the respective AppImageBuild container\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# host = target system\n\n# build = build system\n\n# both must be specified\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/toolchains/i386-linux-gnu.cmake" : {
      "ObjectId" : "dc6c2801139fbd436920ae46385081e5b46d4b51",
      "LastModified" : "2018-12-05T20:47:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this toolchain file works for cross compiling on Ubuntu when the following prerequisites are given:\n\n# - all dependencies that would be needed for a normal build must be installed as i386 versions\n\n# - building XZ/liblzma doesn't work yet, so one has to install liblzma-dev:i386 and set -DUSE_SYSTEM_XZ=ON\n\n# - building GTest doesn't work yet, so one has to install libgtest-dev:i386 and set -DUSE_SYSTEM_GTEST=ON\n\n# - building libarchive doesn't work yet, so one has to install liblzma-dev:i386 and set -DUSE_SYSTEM_LIBARCHIVE=ON (TODO: link system libarchive statically like liblzma)\n\n# some of the packets interfere with their x86_64 version (e.g., libfuse-dev:i386, libglib2-dev:i386), so building on a\n\n# normal system will most likely not work, but on systems like Travis it should work fine\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_SHARED_LINKER_FLAGS, CMAKE_STATIC_LINKER_FLAGS etc. must not be set, but CMAKE_EXE_LINKER_FLAGS is necessary\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# host = target system\n\n# build = build system\n\n# both must be specified\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# may help with some rare issues\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# makes sure that at least on Ubuntu pkg-config will search for the :i386 packages\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "9ca1144be401371fe965173b8bfd7dba4a3a7eae",
      "LastModified" : "2018-12-05T20:47:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "85a9c0b39cc312d41c23daccfbfef15cb3970055",
      "LastModified" : "2018-12-05T20:47:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# defining a no-op function to avoid CMake errors\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# allow setting different path for mksquashfs after installation\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the runtime build configuration is quite long, therefore it's managed in a separate CMake script\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# trick: list libraries on which imported static ones depend on in the PUBLIC section\n\n# CMake then adds them after the PRIVATE ones in the linker command\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# digest_md5 demo application\n\n# can be used to verify AppImages' MD5 digest\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install binaries\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Configure appimagetool component\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/build-runtime.cmake" : {
      "ObjectId" : "1b59dd875623c6e1517c264192f9350c59654c97",
      "LastModified" : "2019-02-02T20:14:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if set to anything but ON, the magic bytes won't be embedded\n\n# CAUTION: the magic bytes are a hard requirement for type 2 AppImages! This option should NEVER be used unless you are\n\n# 100% sure what you are doing here!\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# mark as advanced so it won't show up in CMake GUIs etc., to prevent users from accidentally using this option\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check type of current build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# must not include -flto in the following flags, otherwise the data sections will be stripped out\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# must not include -Wl,--gc-sections in the following flags, otherwise the data sections will be stripped out\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# objcopy requires actual files for creating new sections to populate the new section\n\n# therefore, we generate 3 suitable files containing blank bytes in the right sizes\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# compile first raw object (not linked yet) into which the sections will be embedded\n\n# TODO: find out how this .o object can be generated using a normal add_executable call\n\n# that'd allow us to get rid of the -I parameters in runtime_cflags\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# embed the sections, one by one\n\n# TODO: find out whether all the sections can be embedded in a single objcopy call\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add the runtime as a normal executable\n\n# CLion will recognize it as a normal executable, one can simply step into the code\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CMake gets confused by the .o object, therefore we need to tell it that it shall link everything using the C compiler\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# embed the magic bytes after the runtime's build has finished\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# required for embedding in appimagetool\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    }
  },
  "FileTypes" : {
    "CMAKE" : 9
  },
  "ElapsedTime" : 968
}