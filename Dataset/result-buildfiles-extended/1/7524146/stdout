{
  "Repository" : "7524146",
  "Revision" : "HEAD",
  "ObjectId" : "8f39375f4c29e7f7590efaeb6ce8c56490560c1f",
  "CommitTime" : "2018-07-25T03:08:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d2a50996b4469a65b856b25111e158ad76a2110b",
      "LastModified" : "2018-07-16T07:41:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This indicates to CMakeLists in subdirectories that they are part of a larger project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library type\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# c++ language standard to use\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# enumerate allowed values for cmake gui\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# validate value is in XLNT_VALID_LANGS\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Optional components\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Platform specific options\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add components according to selected options\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "4ab9393511836bb1509db2ad189b00270dc0d4ca",
      "LastModified" : "2017-09-13T14:20:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Require C++11 compiler\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include xlnt library\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Convert <name>.cpp to benchmark-<name>\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Need to use some test helpers\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Copy xlnt DLL into benchmarks directory\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/FindArrow.cmake" : {
      "ObjectId" : "c893a1aadb0e2495ee40fbda7a3afc38b669693c",
      "LastModified" : "2017-07-30T16:48:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Licensed to the Apache Software Foundation (ASF) under one\n\n# or more contributor license agreements.  See the NOTICE file\n\n# distributed with this work for additional information\n\n# regarding copyright ownership.  The ASF licenses this file\n\n# to you under the Apache License, Version 2.0 (the\n\n# \"License\"); you may not use this file except in compliance\n\n# with the License.  You may obtain a copy of the License at\n\n#\n\n#   http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing,\n\n# software distributed under the License is distributed on an\n\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\n# KIND, either express or implied.  See the License for the\n\n# specific language governing permissions and limitations\n\n# under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find ARROW (arrow/api.h, libarrow.a, libarrow.so)\n\n# This module defines\n\n#  ARROW_INCLUDE_DIR, directory containing headers\n\n#  ARROW_LIBS, directory containing arrow libraries\n\n#  ARROW_STATIC_LIB, path to libarrow.a\n\n#  ARROW_SHARED_LIB, path to libarrow's shared library\n\n#  ARROW_SHARED_IMP_LIB, path to libarrow's import library (MSVC only)\n\n#  ARROW_FOUND, whether arrow has been found\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure we don't accidentally pick up a different version\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/pkg-config.pc.cmake" : {
      "ObjectId" : "207cb951aa0d13bd4fee0f9e1d4343a74cd3e338",
      "LastModified" : "2017-07-30T16:48:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ucm.cmake" : {
      "ObjectId" : "5dc8e4e2570ef0f88bf4f2ee7ea1bb4f828ca498",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# ucm.cmake - useful cmake macros\n\n#\n\n# Copyright (c) 2016 Viktor Kirilov\n\n#\n\n# Distributed under the MIT Software License\n\n# See accompanying file LICENSE.txt or copy at\n\n# https://opensource.org/licenses/MIT\n\n#\n\n# The documentation can be found at the library's page:\n\n# https://github.com/onqtam/ucm\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# optionally include cotire - the git submodule might not be inited (or the user might have already included it)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ucm_add_flags\n\n# Adds compiler flags to CMAKE_<LANG>_FLAGS or to a specific config\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# determine to which flags to add\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# clear the old flags\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# add all the passed flags\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# ucm_set_flags\n\n# Sets the CMAKE_<LANG>_FLAGS compiler flags or for a specific config\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ucm_add_linker_flags\n\n# Adds linker flags to CMAKE_<TYPE>_LINKER_FLAGS or to a specific config\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clear the old flags\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# add all the passed flags\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# ucm_set_linker_flags\n\n# Sets the CMAKE_<TYPE>_LINKER_FLAGS linker flags or for a specific config\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ucm_gather_flags\n\n# Gathers all lists of flags for printing or manipulation\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add the main flags without a config\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# handle single config generators - like makefiles/ninja - when CMAKE_BUILD_TYPE is set\n",
        "Line" : 166,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# handle multi config generators (like msvc, xcode)\n",
        "Line" : 177,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# ucm_set_runtime\n\n# Sets the runtime (static/dynamic) for msvc/gcc\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add/replace the flags\n\n# note that if the user has messed with the flags directly this function might fail\n\n# - for example if with MSVC and the user has removed the flags - here we just switch/replace them\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# ucm_print_flags\n\n# Prints all compiler flags for all configurations\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ucm_count_sources\n\n# Counts the number of source files\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ucm_include_file_in_sources\n\n# Includes the file to the source with compiler flags\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# get old flags\n",
        "Line" : 281,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# update flags\n",
        "Line" : 287,
        "CharPositionInLine" : 12
      },
      "22" : {
        "Text" : "# ucm_dir_list\n\n# Returns a list of subdirectories for a given directory\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ucm_trim_front_words\n\n# Trims X times the front word from a string separated with \"/\" and removes\n\n# the front \"/\" characters after that (used for filters for visual studio)\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# removes everything at the front up to a \"/\" character\n",
        "Line" : 321,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# removes all consecutive \"/\" characters from the front\n",
        "Line" : 323,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# ucm_remove_files\n\n# Removes source files from a list of sources (path is the relative path for it to be found)\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# ucm_remove_directories\n\n# Removes all source files from the given directories from the sources list\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ucm_add_files_impl\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# replacing forward slashes with back slashes so filters can be generated (back slash used in parsing...)\n",
        "Line" : 384,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# ucm_add_files\n\n# Adds files to a list of sources\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# ucm_add_dir_impl\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# handle the \"\" and \".\" cases\n",
        "Line" : 413,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# to circumvent some linux/cmake/path issues - barely made it work...\n",
        "Line" : 419,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# since unix is case sensitive - add these valid extensions too\n\n# we don't use \"UNIX\" but instead \"CMAKE_HOST_UNIX\" because we might be cross\n\n# compiling (for example emscripten) under windows and UNIX may be set to 1\n\n# Also OSX is case insensitive like windows...\n",
        "Line" : 426,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# find all sources and set them as result\n",
        "Line" : 444,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# https://gcc.gnu.org/onlinedocs/gcc-4.4.1/gcc/Overall-Options.html#index-file-name-suffix-71\n\n# sources\n",
        "Line" : 446,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# headers\n",
        "Line" : 456,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# set the proper filters\n",
        "Line" : 473,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# replacing forward slashes with back slashes so filters can be generated (back slash used in parsing...)\n",
        "Line" : 475,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# ucm_add_dirs\n\n# Adds all files from directories traversing them recursively to a list of sources\n\n# and generates filters according to their location (accepts relative paths only).\n\n# Also this macro trims X times the front word from the filter string for visual studio filters.\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# ucm_add_target\n\n# Adds a target eligible for cotiring - unity build and/or precompiled header\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# init with the global unity flag\n",
        "Line" : 528,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# check the UNITY argument\n",
        "Line" : 531,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# if target is excluded through the exclusion list\n",
        "Line" : 536,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# unity build only for targets with > 1 source file (otherwise there will be an additional unnecessary target)\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# optimization\n",
        "Line" : 543,
        "CharPositionInLine" : 17
      },
      "47" : {
        "Text" : "# if cotire cannot be used\n",
        "Line" : 552,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# inform the developer that the current target might benefit from a unity build\n",
        "Line" : 557,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# prepare for the unity build\n",
        "Line" : 565,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# the original target will be added with a different name than the requested\n",
        "Line" : 568,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# exclude requested files from unity build of the current target\n",
        "Line" : 571,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# add the original target\n",
        "Line" : 577,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# set the number of unity cpp files to be used for the unity target\n",
        "Line" : 585,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# add a unity target for the original one with the name intended for the original\n",
        "Line" : 597,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# this is the library call that does the magic\n",
        "Line" : 600,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# disable the original target and enable the unity one\n",
        "Line" : 604,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "# also set the name of the target output as the original one\n",
        "Line" : 609,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# reset the folder property so all unity targets dont end up in a single folder in the solution explorer of VS\n",
        "Line" : 612,
        "CharPositionInLine" : 12
      },
      "59" : {
        "Text" : "# print a message if the target was requested to be cotired but it couldn't\n",
        "Line" : 626,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 60
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "263c5b88a51bdbf100308938027dd483e846e2fc",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/CMakeLists.txt" : {
      "ObjectId" : "f8ad70da8d2d542dae2e1b715255c8ba43f2163e",
      "LastModified" : "2017-09-13T14:20:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Require C++11 compiler\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include xlnt library\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Convert <name>.cpp to sample-<name>\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Need to use some test helpers\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Copy xlnt DLL into samples directory\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "5c924e844bbf68e627bb09a4a61ce3ce6dbaf5b8",
      "LastModified" : "2018-07-21T01:41:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Project metadata\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Commonly used project directories\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include libstudxml library\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Non-target-specific compiler settings\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# level 4 warnings\n\n# multi-processor compilation\n",
        "Line" : 30,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : "# all warnings\n",
        "Line" : 33,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : "# extra warnings\n",
        "Line" : 34,
        "CharPositionInLine" : 52
      },
      "7" : {
        "Text" : "# ignore MSVC and Clang pragmas\n",
        "Line" : 35,
        "CharPositionInLine" : 65
      },
      "8" : {
        "Text" : "# all warnings\n",
        "Line" : 37,
        "CharPositionInLine" : 57
      },
      "9" : {
        "Text" : "# blacklist warnings that are not relevant\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# ignore warnings about C++98 compatibility\n",
        "Line" : 39,
        "CharPositionInLine" : 62
      },
      "11" : {
        "Text" : "# ignore pedantic warnings about C++98 compatibility\n",
        "Line" : 40,
        "CharPositionInLine" : 71
      },
      "12" : {
        "Text" : "# ignore padding warnings\n",
        "Line" : 41,
        "CharPositionInLine" : 56
      },
      "13" : {
        "Text" : "# ignore unknown commands in Javadoc-style comments\n",
        "Line" : 42,
        "CharPositionInLine" : 79
      },
      "14" : {
        "Text" : "# ignore Windows and GCC pragmas\n",
        "Line" : 43,
        "CharPositionInLine" : 65
      },
      "15" : {
        "Text" : "# ignore Windows and GCC pragmas\n",
        "Line" : 44,
        "CharPositionInLine" : 72
      },
      "16" : {
        "Text" : "# don't warn on uses of == for fp types\n\n# no longer an issue with post-c++11 standards which mandate include add a newline if neccesary\n",
        "Line" : 45,
        "CharPositionInLine" : 61
      },
      "17" : {
        "Text" : "# default is often added to switches for completeness or to cover future alternatives\n",
        "Line" : 47,
        "CharPositionInLine" : 72
      },
      "18" : {
        "Text" : "# this is just a warning to notify that the destructor will run during exit\n",
        "Line" : 48,
        "CharPositionInLine" : 71
      },
      "19" : {
        "Text" : "# Wmissing-field-initializers has less false positives\n",
        "Line" : 49,
        "CharPositionInLine" : 64
      },
      "20" : {
        "Text" : "# Prevent a warning about deployment target not being set by setting it to current OSX version\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Set a default CMAKE_INSTALL_PREFIX if one wasn't specified\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# No good place to install on Windows so just install to cmake build directory in /installed\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Install to /usr/local on other platforms\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Apply the variable and save to cache\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Append \"d\" to the name of the compiled library\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Compile shared library\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Set SO version (for symbolic links like libxlnt.so.1.2 and libxlnt.so.1)\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Compile static library\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# requires cmake 3.8+\n\n#target_compile_features(xlnt PUBLIC cxx_std_${XLNT_CXX_LANG})\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Includes\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Platform- and file-specific settings, MSVC\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Platform- and file-specific settings, Clang\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Platform- and file-specific settings, GCC\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Group files into pseudo-folders in IDEs\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Default location to install include files\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Default location to install library files\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Default location to install runtime files\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Default location to install runtime files\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Install library\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Install include directory\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Install LICENSE.md\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Configure uninstall\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Add uninstall target\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Set pkg-config variables\n",
        "Line" : 264,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Replace variables in pkg-config template\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# pkg-config install\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 47
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "74c24352a1c43b007fff69ef3bdc9d0326d03718",
      "LastModified" : "2018-07-16T07:41:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# requires cmake 3.8+\n\n#target_compile_features(xlnt.test PRIVATE cxx_std_${XLNT_CXX_LANG})\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# bigobj because there are so many headers in one source file\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# copy xlnt DLL into xlnt.test directory\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "third-party/libstudxml/CMakeLists.txt" : {
      "ObjectId" : "b6529c9e3fe79f0d389e20dfeb630869abae6b8f",
      "LastModified" : "2017-09-13T14:30:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Require C++11 compiler\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent warning C4996 caused by strcpy, strncpy, sprintf in genx\n\n# TODO: would it be better to define this only in genx.c?\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build with -fPIC when xlnt is a shared library\n\n# TODO: is this still necessary? try removing\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# When xlnt is a static library, assume expat will be linked statically too\n\n# TODO: is this a valid assumption?\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "third-party/libstudxml/xml/Makefile.am" : {
      "ObjectId" : "531d4561426075d201d7fe705066292911027470",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# file      : xml/Makefile.am\n\n# copyright : Copyright (c) 2013-2017 Code Synthesis Tools CC\n\n# license   : MIT; see accompanying LICENSE file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure make doesn't try to build the no-extension headers\n\n# thinking that they are executable.\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "third-party/pybind11/CMakeLists.txt" : {
      "ObjectId" : "2179e3aa962711622681a4837ffa97ba1121fa27",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt -- Build system for the pybind11 modules\n\n#\n\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n\n#\n\n# All rights reserved. Use of this source code is governed by a\n\n# BSD-style license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cmake warns if loaded from a min-3.0-required parent dir, so silence the warning:\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Check if pybind11 is being used directly or via add_subdirectory\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Cache variables so pybind11_add_module can be used in parent projects\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NB: when adding a header don't forget to also add it to setup.py\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract project version from source\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake >= 3.0\n",
        "Line" : 86,
        "CharPositionInLine" : 42
      },
      "7" : {
        "Text" : "# Build an interface library target:\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# to match exported target\n",
        "Line" : 89,
        "CharPositionInLine" : 50
      },
      "9" : {
        "Text" : "# GNUInstallDirs \"DATADIR\" wrong here; CMake search path wants \"share\".\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove CMAKE_SIZEOF_VOID_P from ConfigVersion.cmake since the library does\n\n# not depend on architecture specific settings or libraries.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "third-party/pybind11/tools/FindCatch.cmake" : {
      "ObjectId" : "9d490c5aade2151ebdd8cc84509361ba1c061f84",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Catch test framework or download it (single header)\n\n#\n\n# This is a quick module for internal use. It assumes that Catch is\n\n# REQUIRED and that a minimum version is provided (not EXACT). If\n\n# a suitable version isn't found locally, the single header file\n\n# will be downloaded and placed in the build dir: PROJECT_BINARY_DIR.\n\n#\n\n# This code sets the following variables:\n\n#  CATCH_INCLUDE_DIR      - path to catch.hpp\n\n#  CATCH_VERSION          - version number\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extract the version number from catch.hpp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Download the single-header version of Catch\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for catch locally\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Download the header if it wasn't found or if it's outdated\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "third-party/pybind11/tools/FindEigen3.cmake" : {
      "ObjectId" : "9c546a05d859b18c49554d7ee7221cc486b7760e",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "third-party/pybind11/tools/FindPythonLibsNew.cmake" : {
      "ObjectId" : "dc44a9df5486d7f5c4d9d0cd56972fc5e7460cbf",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find python libraries\n\n# This module finds the libraries corresponding to the Python interpeter\n\n# FindPythonInterp provides.\n\n# This code sets the following variables:\n\n#\n\n#  PYTHONLIBS_FOUND           - have the Python libs been found\n\n#  PYTHON_PREFIX              - path to the Python installation\n\n#  PYTHON_LIBRARIES           - path to the python library\n\n#  PYTHON_INCLUDE_DIRS        - path to where Python.h is found\n\n#  PYTHON_MODULE_EXTENSION    - lib extension, e.g. '.so' or '.pyd'\n\n#  PYTHON_MODULE_PREFIX       - lib name prefix: usually an empty string\n\n#  PYTHON_SITE_PACKAGES       - path to installation site-packages\n\n#  PYTHON_IS_DEBUG            - whether the Python interpreter is a debug build\n\n#\n\n# Thanks to talljimbo for the patch adding the 'LDVERSION' config\n\n# variable usage.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n# Copyright 2012 Continuum Analytics, Inc.\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use the Python interpreter to find the libs.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# According to http://stackoverflow.com/questions/646518/python-how-to-detect-debug-interpreter\n\n# testing whether sys has the gettotalrefcount function is a reliable, cross-platform\n\n# way to detect a CPython debug interpreter.\n\n#\n\n# The library suffix is from the config var LDVERSION sometimes, otherwise\n\n# VERSION. VERSION will typically be like \"2.7\" on unix, and \"27\" on windows.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Convert the process output into a list\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure the Python has the same pointer-size as the chosen compiler\n\n# Skip if CMAKE_SIZEOF_VOID_P is not defined\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The built-in FindPython didn't always give the version numbers\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure all directory separators are '/'\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# when run in a venv, PYTHON_PREFIX points to it. But the libraries remain in the\n\n# original python installation. They may be found relative to PYTHON_INCLUDE_DIR.\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# raise an error if the python libs are still not found.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#message(STATUS \"Searching for Python libs in ${_PYTHON_LIBS_SEARCH}\")\n\n# Probably this needs to be more involved. It would be nice if the config\n\n# information the python interpreter itself gave us were more complete.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# If all else fails, just set the name/version and let the linker figure out the path.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# We use PYTHON_INCLUDE_DIR, PYTHON_LIBRARY and PYTHON_DEBUG_LIBRARY for the\n\n# cache entries because they are meant to specify the location of a single\n\n# library. We now set the variables listed by the documentation for this\n\n# module.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "third-party/pybind11/tools/pybind11Tools.cmake" : {
      "ObjectId" : "86ccd58d3bfd1b38d70864f6b46aae7a44d8a258",
      "LastModified" : "2017-09-08T18:33:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tools/pybind11Tools.cmake -- Build system for the pybind11 modules\n\n#\n\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n\n#\n\n# All rights reserved. Use of this source code is governed by a\n\n# BSD-style license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add a CMake parameter for choosing a desired Python version\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Checks whether the given CXX/linker flags can compile and link a cxx file.  cxxflags and\n\n# linkerflags are lists of flags to use.  The result variable is a unique variable name for each set\n\n# of flags: the compilation result will be cached base on the result variable.  If the flags work,\n\n# sets them in cxxflags_out/linkerflags_out internal cache variables (in addition to ${result}).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal: find the appropriate link time optimization flags for this compiler\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Clang Gold plugin does not support -Os; append -O3 to MinSizeRel builds to override it\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Intel equivalent to LTO is called IPO\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# cmake only interprets libraries as linker flags when they start with a - (otherwise it\n\n# converts /LTCG to \\LTCG as if it was a Windows path).  Luckily MSVC supports passing flags\n\n# with - instead of /, even if it is a bit non-standard:\n",
        "Line" : 88,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Enable LTO flags if found, except for Debug builds\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Build a Python extension module:\n\n# pybind11_add_module(<name> [MODULE | SHARED] [EXCLUDE_FROM_ALL]\n\n#                     [NO_EXTRAS] [THIN_LTO] source1 [source2 ...])\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from project CMakeLists.txt\n\n# from pybind11Config\n",
        "Line" : 134,
        "CharPositionInLine" : 37
      },
      "10" : {
        "Text" : "# The prefix and extension are provided by FindPythonLibsNew.cmake\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Link against the Python shared library on Windows\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# It's quite common to have multiple copies of the same Python version\n\n# installed on one's system. E.g.: one copy from the OS and another copy\n\n# that's statically linked into an application like Blender or Maya.\n\n# If we link our plugin library against the OS Python here and import it\n\n# into Blender or Maya later on, this will cause segfaults when multiple\n\n# conflicting Python instances are active at the same time (even when they\n\n# are of the same version).\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Windows is not affected by this issue since it handles DLL imports\n\n# differently. The solution for Linux and Mac OS is simple: we just don't\n\n# link against the Python library. The resulting shared library will have\n\n# missing symbols, but that's perfectly fine -- they will be resolved at\n\n# import time.\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Suppress CMake >= 3.0 warning for shared libraries\n",
        "Line" : 163,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Make sure C++11/14 are enabled\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Set the default symbol visibility to hidden (very important to obtain small binaries)\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Strip unnecessary sections of the binary on Linux/Mac OS\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# /MP enables multithreaded builds (relevant when there are many files), /bigobj is\n\n# needed for bigger binding projects due to the limit to 64k addressable sections\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 19
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2023
}