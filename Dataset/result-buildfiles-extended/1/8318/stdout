{
  "Repository" : "8318",
  "Revision" : "HEAD",
  "ObjectId" : "35e1b04834159fc49301c3d973ca28f0ee37945d",
  "CommitTime" : "2019-04-19T06:22:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "790a7481feb09b6c6a325b7c3845c258656b30bd",
      "LastModified" : "2019-04-19T06:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow VERSION specifier in project()\n",
        "Line" : 2,
        "CharPositionInLine" : 32
      },
      "1" : {
        "Text" : "# short name\n",
        "Line" : 6,
        "CharPositionInLine" : 35
      },
      "2" : {
        "Text" : "# short name lower case\n",
        "Line" : 7,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : "# \"dev\", \"betaX\", \"RCY\", \"\"\n",
        "Line" : 8,
        "CharPositionInLine" : 43
      },
      "4" : {
        "Text" : "# Prefer files from the CMake module directory when including from there.\n\n# Detect AppleClang for new CMake\n\n# Don't error on non-existent dependency in add_dependencies.\n",
        "Line" : 18,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# Deprecated names\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Version of the OSO file format and instruction set\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All the C++ and compiler related options live here\n",
        "Line" : 63,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "## enable RTTI\n\n##   NOTE: LLVM builds without RTTI by default so beware\n\n##   if you find the need to turn this on, to use OSL in a\n\n##   project that requires RTTI for example, you need to build\n\n##   LLVM with RRTI, otherwise OSL classes extending LLVM ones\n\n##   will cause linker errors.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# set (USE_OIIO_STATIC ON CACHE BOOL \"If OIIO is built static\")\n\n# if (USE_OIIO_STATIC)\n\n#     add_definitions (\"-DOIIO_STATIC_BUILD=1\")\n\n# endif ()\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Set the default namespace. For symbol hiding reasons, it's important that\n\n# the project name is a subset of the namespace name.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# installation options all implemented here\n",
        "Line" : 145,
        "CharPositionInLine" : 27
      },
      "12" : {
        "Text" : "###########################################################################\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We want CTest for testing\n\n# N.B. This needs to be added before any of the subdirectories, or\n\n# their add_test commands will not register.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Tell CMake to process the sub-directories\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Oddball: install the FindOSL.cmake file\n\n# install (FILES src/cmake/modules/FindOSL.cmake\n\n#          DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/cmake/Modules\n\n#          COMPONENT cmake)\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#########################################################################\n\n# Testing\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Make a build/platform/testsuite directory, and copy the master runtest.py\n\n# there. The rest is up to the tests themselves.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If there was a FOUNDVAR param specified and that variable name is\n\n# not defined, mark the test as broken.\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Add the tests if all is well.\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Run the test unoptimized, unless it's a \"render_*\" or \"oslinfo_*\"\n\n# test, which we don't bother testing unoptimized.\n",
        "Line" : 244,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Run the same test again with aggressive -O2 runtime\n\n# optimization, triggered by setting TESTSHADE_OPT env variable\n",
        "Line" : 254,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# List all the individual testsuite tests here, except those that need\n\n# special installed tests.\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Only run field3d-related tests if the local OIIO was built with f3d support.\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Only run pointcloud tests if Partio is found\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Only run the OptiX tests if OptiX and CUDA are found\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# FIXME: still working on MaterialX testsuite\n\n# add_subdirectory(testsuite/MaterialX)\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#########################################################################\n\n# Packaging\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# \"Vendor\" is only used in copyright notices, so we use the same thing that\n\n# the rest of the copyright notices say.\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#set (CPACK_PACKAGE_EXECUTABLES I'm not sure what this is for)\n\n#set (CPACK_STRIP_FILES Do we need this?)\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#set (CPACK_SOURCE_STRIP_FILES ...FIXME...)\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "Makefile" : {
      "ObjectId" : "8d0d8fd05166345c9fc43fd26d73ae5cffa31afd",
      "LastModified" : "2019-04-16T06:00:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#########################################################################\n\n#\n\n# This is the master makefile.\n\n# Here we put all the top-level make targets, platform-independent\n\n# rules, etc.\n\n#\n\n# Run 'make help' to list helpful targets.\n\n#\n\n#########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Figure out which architecture we're on\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Presence of make variables DEBUG and PROFILE cause us to make special\n\n# builds, which we put in their own areas.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-g3 \n\n#-DSELF_CONTAINED_INSTALL_TREE:BOOL=TRUE\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Site-specific build instructions\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set up variables holding the names of platform-dependent directories --\n\n# set these after evaluating site-specific instructions\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Old names -- DEPRECATED (1.9)\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# N.B. when fixing, you don't want parallel jobs!\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#$(info MY_CMAKE_FLAGS = ${MY_CMAKE_FLAGS})\n\n#$(info MY_MAKE_FLAGS = ${MY_MAKE_FLAGS})\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#########################################################################\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#########################################################################\n\n# Top-level documented targets\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# 'make debug' is implemented via recursive make setting DEBUG\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# 'make profile' is implemented via recursive make setting PROFILE\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# 'make cmakesetup' constructs the build directory and runs 'cmake' there,\n\n# generating makefiles to build the project.  For speed, it only does this when\n\n# ${build_dir}/Makefile doesn't already exist, in which case we rely on the\n\n# cmake generated makefiles to regenerate themselves when necessary.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# 'make cmake' does a basic build (after first setting it up)\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# 'make cmakeinstall' builds everthing and installs it in 'dist'.\n\n# Suppress pointless output from docs installation.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# 'make package' builds everything and then makes an installable package\n\n# (platform dependent -- may be .tar.gz, .sh, .dmg, .rpm, .deb. .exe)\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# 'make package_source' makes an installable source package\n\n# (platform dependent -- may be .tar.gz, .sh, .dmg, .rpm, .deb. .exe)\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# 'make cmake' does a basic build (after first setting it up)\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# 'make cmakeinstall' builds everthing and installs it in 'dist'.\n\n# Suppress pointless output from docs installation.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# 'make package' builds everything and then makes an installable package\n\n# (platform dependent -- may be .tar.gz, .sh, .dmg, .rpm, .deb. .exe)\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# 'make package_source' makes an installable source package\n\n# (platform dependent -- may be .tar.gz, .sh, .dmg, .rpm, .deb. .exe)\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# 'make dist' is just a synonym for 'make cmakeinstall'\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# 'make test' does a full build and then runs all tests\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# if [ \"${CODECOV}\" == \"1\" ] ; then lcov -b ${build_dir} -d ${build_dir} -z ; rm -rf ${build_dir}/cov ; fi\n",
        "Line" : 336,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# 'make clean' clears out the build directory for this platform\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# 'make realclean' clears out both build and dist directories for this platform\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# 'make nuke' blows away the build and dist areas for all platforms\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#########################################################################\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# 'make help' prints important make targets\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "src/cmake/compiler.cmake" : {
      "ObjectId" : "15fecf729058e14375ed22c6edd69691d13c8149",
      "LastModified" : "2019-04-16T06:00:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# Compiler-related detection, options, and actions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Figure out which compiler we're using\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Figure out which compiler we're using, for tricky cases\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If using any flavor of clang, set CMAKE_COMPILER_IS_CLANG. If it's\n\n# Apple's variety, set CMAKE_COMPILER_IS_APPLECLANG and\n\n# APPLECLANG_VERSION_STRING, otherwise for generic clang set\n\n# CLANG_VERSION_STRING.\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# turn on more detailed warnings and consider warnings as errors\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# N.B. Force CI builds (Travis defines $CI) to use -Werror, even if\n\n# STOP_ON_WARNING has been switched off by default, which we may do\n\n# in release branches.\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# cmake bug workaround -- on some platforms, cmake doesn't set\n\n# NDEBUG for RelWithDebInfo mode\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Options common to gcc and clang\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CMake doesn't automatically know what do do with\n\n# include_directories(SYSTEM...) when using clang or gcc.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Ensure this macro is set for stdint.h\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# this allows native instructions to be used for sqrtf instead of a function call\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Turn default symbol visibility to hidden\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Linux/FreeBSD/Hurd: also hide all the symbols of dependent\n\n# libraries to prevent clashes if an app using OIIO is linked\n\n# against other verions of our dependencies.\n",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Clang-specific options\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Disable some warnings for Clang, for some things that are too awkward\n\n# to change just for the sake of having no warnings.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# disable warning about unused command line arguments\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Don't warn if we ask it not to warn about warnings it doesn't know\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Don't warn about using unknown preprocessor symbols in #if'set\n",
        "Line" : 131,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# disable warning in flex-generated code\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# gcc specific options\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# suppress a warning that Boost::Python hits in g++ 4.8\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Microsoft specific options\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Use ccache if found\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# C++ >= 11 doesn't like 'register' keyword, which is in Qt headers\n",
        "Line" : 190,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# GCC 5+: honor build-time option for whether or not to use new string ABI.\n\n# FIXME: In theory, this should also be needed for clang, if compiling with\n\n# the gcc libstdc++ toolchain. In practice, I could not get things to build\n\n# with clang properly when using this option, and I haven't yet seen a case\n\n# where it's needed. We can return to this and fix for clang if it becomes a\n\n# legit problem later.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# SIMD and machine architecture options\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# If fma is requested, for numerical accuracy sake, turn it\n\n# off by default except when we explicitly use madd. At some\n\n# future time, we should look at this again carefully and\n\n# see if we want to use it more widely by ffp-contract=fast.\n",
        "Line" : 231,
        "CharPositionInLine" : 16
      },
      "27" : {
        "Text" : "# Test for features\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Code coverage options\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Sanitizer options\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# set (SANITIZE_LIBRARIES \"asan\" \"ubsan\")\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# clang-tidy options\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# On Linux, the lack of -fPIC when building static libraries seems\n\n# incompatible with the dynamic library needed for the Python bindings.\n",
        "Line" : 330,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Use .a files if LINKSTATIC is enabled\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "src/cmake/cuda_macros.cmake" : {
      "ObjectId" : "faed7007f336c75623032cf0ce5c7fbecac5ed52",
      "LastModified" : "2019-04-19T06:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compile a CUDA file to PTX using NVCC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Function to compile a C++ source file to CUDA-compatible LLVM bitcode\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setup the compile flags\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Setup the bitcode generator\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If that didn't work, look anywhere\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Wasn't in their build, look anywhere\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Compile a CUDA source file to LLVM bitcode, and then serialize the bitcode to\n\n# a C++ file to be compiled into the target executable.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/cmake/externalpackages.cmake" : {
      "ObjectId" : "ceb8103e1d50481af7714add7d17418ce649c4b9",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# Find libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When not in VERBOSE mode, try to make things as quiet as possible\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########################################################################\n\n# IlmBase setup\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#OpenEXR 2.2 still has problems with importing ImathInt64.h unqualified\n\n#thus need for ilmbase/OpenEXR\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# end IlmBase setup\n\n###########################################################################\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########################################################################\n\n# OpenImageIO\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# end OpenImageIO setup\n\n###########################################################################\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###########################################################################\n\n# LLVM library setup\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ensure include directory is added (in case of non-standard locations\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Extract and concatenate major & minor, remove wayward patches,\n\n# dots, and \"svn\" or other suffixes.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# end LLVM library setup\n\n###########################################################################\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###########################################################################\n\n# Boost setup\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# N.B. Using clang for preprocessing seems to work when using clang,\n\n# or gcc 4.8.x, or LLVM <= 3.5. When those conditions aren't met,\n\n# fall back on Boost Wave. We'll lift this restriction as soon as we\n\n# fix whatever is broken.\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Needed for static boost libraries on Windows\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# On Linux, Boost 1.55 and higher seems to need to link against -lrt\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# end Boost setup\n\n###########################################################################\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "###########################################################################\n\n# Partio\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# end Partio setup\n\n###########################################################################\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###########################################################################\n\n# Pugixml setup.  Prefer a system install, but note that FindPugiXML.cmake\n\n# will look in the OIIO distribution if it's not found on the system.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# end Pugixml setup\n\n###########################################################################\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "###########################################################################\n\n# Qt setup\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if (USE_OPENGL)\n\n#     list (APPEND qt5_modules OpenGL)\n\n# endif ()\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# end Qt setup\n\n###########################################################################\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "###########################################################################\n\n# CUDA setup\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# end CUDA setup\n\n###########################################################################\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###########################################################################\n\n# OptiX setup\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# end OptiX setup\n\n###########################################################################\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "src/cmake/flexbison.cmake" : {
      "ObjectId" : "c9f9848435eec6b6b8dfc46f92ad5054b9213cae",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LG's macros for using flex and bison.\n\n# Merely including this file will require flex and bison to be found.\n\n#\n\n# The main purpose is to define the macro FLEX_BISON:\n\n#   FLEX_BISON ( flexsrc bisonsrc srclist compiler_headers )\n\n# where\n\n#   flexsrc = the name of the .l file\n\n#   bisonsrc = the name of the .y file\n\n#   prefix = the language prefix\n\n#   srclist = the name of the list of source files to which the macro will\n\n#             add the flex- and bison-generated .cpp files\n\n#   compiler_headers = the name of the list of headers that are dependencies\n\n#             for the .y and .l files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Be really sure that we prefer the FlexLexer.h that comes with\n\n# the flex binary we're using, not some other one in the system.\n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# include_directories ( ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "src/cmake/install.cmake" : {
      "ObjectId" : "5aacaf172d6226770f6c8502a0de6aed6dfb6e78",
      "LastModified" : "2017-09-24T01:47:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# Fonts are not available yet.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###########################################################################\n\n# Rpath handling at the install step\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need to disallow the user from truly setting CMAKE_SKIP_RPATH, since\n\n# we want to run the generated executables from the build tree in order to\n\n# generate the manual page documentation.  However, we make sure the\n\n# install rpath is unset so that the install tree is still free of rpaths\n\n# for linux packaging purposes.\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# the RPATH to be used when installing\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# add the automatically determined parts of the RPATH that\n\n# point to directories outside the build tree to the install RPATH\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# OSL considerations because we run oslc in the course of building:\n\n# Use (i.e. don't skip) the full RPATH for the build tree\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# When building, don't use the install RPATH already (but later on when installing)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/cmake/modules/FindLLVM.cmake" : {
      "ObjectId" : "02449f09012212f4d0e0678ac4823bbfc5c47106",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module to find LLVM\n\n#\n\n# This module defines the following variables:\n\n#  LLVM_FOUND       - True if llvm found.\n\n#  LLVM_VERSION     - Full LLVM version\n\n#  LLVM_INCLUDES    - where to find llvm headers\n\n#  LLVM_LIBRARIES   - List of LLVM libraries to link against\n\n#  LLVM_SYSTEM_LIBRARIES - additional libraries needed by LLVM\n\n#  LLVM_DIRECTORY   - If not already set, the root of the LLVM install\n\n#  LLVM_LIB_DIR     - where to find llvm libs\n\n#  LLVM_TARGETS     - List of available LLVM targets\n\n#  CLANG_LIBRARIES  - list of libraries for clang components (optional,\n\n#                        those may not be found)\n\n#\n\n# The following input symbols may be used to help guide the search:\n\n#  LLVM_DIRECTORY   - the root of the LLVM installation (if custom)\n\n#  LLVM_FIND_QUIETLY - if true, will suppress most console output\n\n#  LLVM_STATIC      - if true, will prefer static LLVM libs to dynamic\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try to find llvm-config, with a specific version if specified\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# shared llvm library may not be available, this is not an error if we use LLVM_STATIC.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if static LLVM libraries were requested, use llvm-config to generate\n\n# the list of what libraries we need, and substitute that in the right\n\n# way for LLVM_LIBRARY.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "src/cmake/modules/FindOpenEXR.cmake" : {
      "ObjectId" : "6c6b39c8147e5a15740b7a60d3320ebf18977283",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module to find OpenEXR.\n\n#\n\n# This module will set\n\n#   OPENEXR_FOUND          true, if found\n\n#   OPENEXR_INCLUDE_DIR    directory where headers are found\n\n#   OPENEXR_LIBRARIES      libraries for OpenEXR + IlmBase\n\n#   ILMBASE_LIBRARIES      libraries just IlmBase\n\n#   OPENEXR_VERSION        OpenEXR version (accurate for >= 2.0.0,\n\n#                              otherwise will just guess 1.6.1)\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Other standard issue macros\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link with pthreads if required\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Attempt to find OpenEXR with pkgconfig\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# List of likely places to find the headers -- note priority override of\n\n# ${OPENEXR_ROOT_DIR}/include.\n\n# ILMBASE is needed in case ilmbase an openexr are installed in separate\n\n# directories, like NixOS does\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the include file locations. We call find_path twice -- first using\n\n# only the custom paths, then if that fails, try the default paths only.\n\n# This seems to be the most robust way I can find to not get confused when\n\n# both system and custom libraries are present.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Try to figure out version number\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Must be at least 2.0\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Assume an old one, predates 2.x that had versions\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# List of likely places to find the libraries -- note priority override of\n\n# ${OPENEXR_ROOT_DIR}/lib.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Handle request for static libs by altering CMAKE_FIND_LIBRARY_SUFFIXES.\n\n# We will restore it at the end of this file.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Look for the libraries themselves, for all the components. Like with the\n\n# headers, we do two finds -- first for custom locations, then for default.\n\n# This is complicated because the OpenEXR libraries may or may not be\n\n# built with version numbers embedded.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# First try with the version embedded\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Again, with no directory restrictions\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Try again without the version\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# One more time, with no restrictions\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set the FOUND, INCLUDE_DIR, and LIBRARIES variables.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Restore the original CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "src/cmake/modules/FindOpenImageIO.cmake" : {
      "ObjectId" : "d3d7570a7beac7db47c8ec40c05a272d1f95d690",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# OpenImageIO   https://www.openimageio.org\n\n# Copyright 2008-2018 Larry Gritz et al. All rights reserved.\n\n# BSD 3-clause license:\n\n#   https://github.com/OpenImageIO/oiio/blob/master/LICENSE\n\n# For an up-to-date version of this file, see:\n\n#   https://github.com/OpenImageIO/oiio/blob/master/src/cmake/Modules/FindOpenImageIO.cmake\n\n#\n\n###########################################################################\n\n#\n\n# CMake module to find OpenImageIO\n\n#\n\n# This module will set\n\n#   OPENIMAGEIO_FOUND          True, if found\n\n#   OPENIMAGEIO_INCLUDE_DIR    directory where headers are found\n\n#   OPENIMAGEIO_LIBRARIES      libraries for OIIO\n\n#   OPENIMAGEIO_LIBRARY_DIRS   library dirs for OIIO\n\n#   OPENIMAGEIO_VERSION        Version (\"major.minor.patch\")\n\n#   OPENIMAGEIO_VERSION_MAJOR  Version major number\n\n#   OPENIMAGEIO_VERSION_MINOR  Version minor number\n\n#   OPENIMAGEIO_VERSION_PATCH  Version minor patch\n\n#   OIIOTOOL_BIN               Path to oiiotool executable\n\n#\n\n# Special inputs:\n\n#   OPENIMAGEIO_ROOT_DIR - custom \"prefix\" location of OIIO installation\n\n#                          (expecting bin, lib, include subdirectories)\n\n#   OpenImageIO_FIND_QUIETLY - if set, print minimal console output\n\n#   OIIO_LIBNAME_SUFFIX - if set, optional nonstandard library suffix\n\n#\n\n###########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If 'OPENIMAGE_HOME' not set, use the env variable of that name if available\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to figure out version number\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cmake/modules/FindOptiX.cmake" : {
      "ObjectId" : "6e26d26108e6b3c422ea3affc1971d93befc3eee",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# CMake module to find OptiX\n\n#\n\n# This module will set\n\n#   OPTIX_FOUND          True, if OptiX is found\n\n#   OPTIX_INCLUDE_DIR    directory where OptiX headers are found\n\n#   OPTIX_LIBRARIES      libraries for OptiX\n\n#\n\n# Special inputs:\n\n#   OPTIXHOME - custom \"prefix\" location of OptiX installation\n\n#                       (expecting bin, lib, include subdirectories)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If 'OPTIXHOME' not set, use the env variable of that name if available\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Macro adapted from https://github.com/nvpro-samples/optix_advanced_samples\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Pull out the API version from optix.h\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake/modules/FindPartio.cmake" : {
      "ObjectId" : "8e99c4f93b155d4ee665ce01da7750bebbdbd1be",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Partio library.\n\n#\n\n# Sets the usual variables expected for find_package scripts:\n\n#\n\n# PARTIO_INCLUDE_DIR - header location\n\n# PARTIO_LIBRARIES - library to link against\n\n# PARTIO_FOUND - true if Partio was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Support the REQUIRED and QUIET arguments, and set PARTIO_FOUND if found.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/modules/FindPugiXML.cmake" : {
      "ObjectId" : "392143639b6b39d06b4b82011d49eb20d3f11761",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the pugixml XML parsing library.\n\n#\n\n# Sets the usual variables expected for find_package scripts:\n\n#\n\n# PUGIXML_INCLUDE_DIR - header location\n\n# PUGIXML_LIBRARIES - library to link against\n\n# PUGIXML_FOUND - true if pugixml was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Second chance -- if not found, look in the OIIO distro\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support the REQUIRED and QUIET arguments, and set PUGIXML_FOUND if found.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cmake/platform.cmake" : {
      "ObjectId" : "060fc131275d46f54d537aba857761a211fea94a",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################################\n\n# Figure out what platform we're on, and set some variables appropriately\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_SYSTEM_PROCESSOR should not be used because it indicates the platform\n\n# we are building on, but when cross compiling or using a chroot this is not\n\n# what we want to use\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# minimum arch of i586 is needed for atomic cpu instructions\n",
        "Line" : 36,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 3
    },
    "src/cmake/util_macros.cmake" : {
      "ObjectId" : "869972f6dde393b07f8100324185445518f6595a",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro to set a variable with our funny overrides:\n\n# If the variable is already set (by -D on the command line), leave it alone.\n\n# If an environment variable of the same name is set, use that value\n\n# (making it super easy for sites to override external tool locations).\n\n# If neither of those, then use the default passed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the named variable already has a value (was set by -D...), leave\n\n# it alone.  But if it's not yet set...\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# If there's an environment variable of the same name that's\n\n# nonempty, use the env variable.  Otherwise, use the default.\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# CACHE STRING ${explanation})\n",
        "Line" : 14,
        "CharPositionInLine" : 18
      },
      "4" : {
        "Text" : "# CACHE STRING ${explanation})\n",
        "Line" : 17,
        "CharPositionInLine" : 18
      },
      "5" : {
        "Text" : "# If the named variable already has a value (was set by -D...), leave\n\n# it alone.  But if it's not yet set...\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# If there's an environment variable of the same name that's\n\n# nonempty, use the env variable.  Otherwise, use the default.\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# CACHE PATH ${explanation})\n",
        "Line" : 33,
        "CharPositionInLine" : 18
      },
      "8" : {
        "Text" : "# CACHE PATH ${explanation})\n",
        "Line" : 36,
        "CharPositionInLine" : 18
      },
      "9" : {
        "Text" : "# Macro to install targets to the appropriate locations.  Use this instead of\n\n# the install(TARGETS ...) signature.\n\n#\n\n# Usage:\n\n#\n\n#    install_targets (target1 [target2 ...])\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/doc/CMakeLists.txt" : {
      "ObjectId" : "230958ba82d3dd97e50ec4f0d49ba93a2ea9113c",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro to compile a shader with oslc. Syntax is:\n\n#   docdeep_generate (SOURCE osl_source_file\n\n#                 [ NAME doc_name ]\n\n#                 [ DOC_LIST list_to_append_doc_filename ] )\n\n#                 [ SRC_LIST list_to_append_src_filename ] )\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ^^ syntax: prefix options one-arg-keywords multi-arg-keywords args\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/doc/Makefile" : {
      "ObjectId" : "f4f31998b69ee611daf84cc58f35534b71652985",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###  \"--shell-escape\"\n",
        "Line" : 1,
        "CharPositionInLine" : 46
      },
      "1" : {
        "Text" : "# by default, just make the document\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# document making rule: use pdflatex\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# special command 'make index' to regenerate the index\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/include/CMakeLists.txt" : {
      "ObjectId" : "3ecfe7ca1cb6d84a35b1e256138a08fc7451be33",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/liboslcomp/CMakeLists.txt" : {
      "ObjectId" : "74a53cbaa44019eb203e6c33e71beec0d28ca7f9",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# oslexec symbols used in oslcomp\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/liboslexec/CMakeLists.txt" : {
      "ObjectId" : "e56ac25b7ed65828ae10b6d5f579cb203901685a",
      "LastModified" : "2019-04-19T06:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# oslcomp symbols used in oslexec\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# oslnoise symbols used in oslexec\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# oslquery symbols used in oslexec\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Figure out what program we will use to make the bitcode.\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If that didn't work, look anywhere\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Wasn't in their build, look anywhere\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Fix specific problem I had on new Apple systems (e.g. Mavericks) with\n\n# LLVM/libc++ installed -- for some reason, LLVM 3.4 wasn't finding it,\n\n# so in that specific case, append another -I to point it in the right\n\n# direction.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Command to turn the .cpp file into LLVM assembly language .s, into\n\n# LLVM bitcode .bc, then back into a C++ file with the bc embedded!\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add all of the \"shadeops\" sources that need to be compiled to LLVM bitcode for CUDA\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Link all of the individual LLVM bitcode files\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Serialze the linked bitcode into a CPP file and add it to the list of liboslexec soures\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Optionally repeat the bitcode compilation with CUDA-specific options\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# With MSVC/Mingw, we don't compile llvm_ops.cpp to LLVM bitcode, due\n\n# to clang being unable to compile MSVC C++ header files at this time.\n\n# Instead it is part of the regular build process.\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Unit tests\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/liboslnoise/CMakeLists.txt" : {
      "ObjectId" : "9023da3f7a54cb6bdd01487bcfaf4be6d43250b2",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILE ( GLOB compiler_headers \"../liboslexec/*.h\" )\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/liboslquery/CMakeLists.txt" : {
      "ObjectId" : "526319d3ad3fdb742114746d9f461e707513cf98",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/osl.imageio/CMakeLists.txt" : {
      "ObjectId" : "503791a7cee5ab47e11a796bd2f9c0df86b5864f",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro to add a build target for an IO plugin.\n\n#\n\n# Note: the original is in OIIO's src/cmake/oiio_macros.cmake\n\n#\n\n# Usage:\n\n#\n\n# add_oiio_plugin ( source1 [source2 ...]\n\n#                   [LINK_LIBRARIES external_lib1 ...] )\n\n#\n\n# The plugin name is deduced from the name of the current directory and the\n\n# source is automatically linked against OpenImageIO.  Additional libraries\n\n# (for example, libpng) may be specified after the optionl LINK_LIBRARIES\n\n# keyword.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get the name of the current directory and use it as the target name.\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/oslc/CMakeLists.txt" : {
      "ObjectId" : "75516d0e791f779aba03c742d8072c43b29e7a34",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# don't want to link oslexec but oslcomp uses these symbols\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/oslinfo/CMakeLists.txt" : {
      "ObjectId" : "4df8ea9fb6a5531e2a54c51a1011240dd4c2e583",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/osltoy/CMakeLists.txt" : {
      "ObjectId" : "94c58567c05e7660a32afe7a7eddce7cb866d70c",
      "LastModified" : "2019-03-13T17:07:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/shaders/CMakeLists.txt" : {
      "ObjectId" : "1ea7beed5003805dfb0ca3cae546baf642e56247",
      "LastModified" : "2019-04-12T18:23:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME -- is this really necessary?\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work around visual studio outputting oslc.exe in a subfolder\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Macro to compile a shader with oslc. Syntax is:\n\n#   oslc_compile (OSL osl_source_file\n\n#                 [ DEPENDS list_of_dependencies ]\n\n#                 [ INCLUDE_DIRS list_of_include_dirs_for_oslc ]\n\n#                 [ DEFINES list_of_extra_definitions_for_oslc ]\n\n#                 [ OSO_FILE optional_oso_filename_override ]\n\n#                 [ OSO_LIST list_to_append_oso_filename ] )\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ^^ syntax: prefix options one-arg-keywords multi-arg-keywords args\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#message (STATUS \"all shader objs = ${shader_objs}\")\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/shaders/MaterialX/CMakeLists.txt" : {
      "ObjectId" : "d044626837f894009bafdfe7b42529f21bee3d1e",
      "LastModified" : "2019-04-12T18:23:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME -- is this really necessary?\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work around visual studio outputting oslc.exe in a subfolder\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Macro to compile a shader with oslc, with MX type substitution. Syntax is:\n\n#   mx_oslc_compile (MXTEMPLATE mx_template_file\n\n#                    SHADERNAME shader_name_no_extension_or_type\n\n#                    TYPE substitition_type\n\n#                 [ OTHERTYPE substitition_type ]\n\n#                 [ DEPENDS list_of_dependencies ]\n\n#                 [ INCLUDE_DIRS list_of_include_dirs_for_oslc ]\n\n#                 [ DEFINES list_of_extra_definitions_for_oslc ]\n\n#                 [ OSL_FILE optional_osl_filename_override ]\n\n#                 [ OSO_FILE optional_oso_filename_override ]\n\n#                 [ OSO_LIST list_to_append_oso_filename ]\n\n#                 [ GEN_OSL_LIST list_to_append_generated_osl_filename ]\n\n#                 )\n\n# This is based on the oslc_compile macro found in src/shaders, but we've\n\n# modified it to do the type substitution that MaterialX needs.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ^^ syntax: prefix options one-arg-keywords multi-arg-keywords args\n\n# set (mxfile \"${CMAKE_SOURCE_DIR}/src/shaders/MaterialX/${_shader_MXTEMPLATE}\")\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# message (STATUS \"oslc will make ${mxfile_justname} -> ${oslfile_justname} -> ${osofile_justname}\")\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Macro to compile a bunch of mx templates, each in several type flavors.\n\n# Syntax is:\n\n#   make_mx_flavors (mx_template_source_list\n\n#                    TYPES type_list\n\n#                    [ OTHERTYPES other_type_list ] )\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ^^ syntax: prefix options one-arg-keywords multi-arg-keywords args\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Find out if \"same\" is in the list. FIXME: When cmake minimum >= 3.3,\n\n# we can just use (\"same\" IN_LIST mxflav_OTHERTYPES) in the test before\n\n# the 'continue' statement.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Trick to make sure that we don't doubly-count 'same'\n\n# and the first type. As an example of when this comes\n\n# up, when OTHERTYPES is 'same float' and TYPES also\n\n# contains 'float'.\n",
        "Line" : 108,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "#OR ${oslothertype} STREQUAL ${osltype}\n",
        "Line" : 118,
        "CharPositionInLine" : 20
      },
      "10" : {
        "Text" : "# The MaterialX shader zoo is very complicated, many of our shader templates\n\n# need to be compiled separately for each of many types. But not all the\n\n# same types for all shaders. Try to organize this as cleanly as possible\n\n# below.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# MX shaders that come in flavors for all color/vector types and float.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# MX shaders that are templated on two types: colorN/vectorN/float,\n\n# versus themselves and float.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# MX basic math operate on two elements of the same type, or type and float\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# MX shaders that come in flavors for all color/vector types.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# MX shaders that come in flavors for all color types, and float\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# All the rest of the odds and ends follow:\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# DEPRECATED in MX 1.36\n",
        "Line" : 214,
        "CharPositionInLine" : 61
      },
      "18" : {
        "Text" : "# DEPRECATED in MX 1.36\n",
        "Line" : 233,
        "CharPositionInLine" : 59
      },
      "CommentCount" : 19
    },
    "src/testrender/CMakeLists.txt" : {
      "ObjectId" : "d7cc315420733fab1a4729f00ca41ada8d18631f",
      "LastModified" : "2019-04-19T06:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The 'testrender' executable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate PTX for all of the CUDA files\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Install the PTX files in a fixed location so that they can be\n\n# loaded at run time\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/testshade/CMakeLists.txt" : {
      "ObjectId" : "26c5e7df94dfc022b1b63adb8b3ea7dc265cafc3",
      "LastModified" : "2019-04-19T06:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The 'testshade' executable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate PTX for all of the CUDA files\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Install the PTX files in a fixed location so that they can be\n\n# loaded at run time\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The 'libtestshade' library\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The 'testshade_dso' executable\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 28,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 4862
}