{
  "Repository" : "22407869",
  "Revision" : "HEAD",
  "ObjectId" : "d85f7d4a0b244c6c5815baa98846a1bb972f8572",
  "CommitTime" : "2018-10-12T12:55:52Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "43198e8b218938316b3c1767aadf45b7092f6c88",
      "LastModified" : "2018-06-16T08:04:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: to use libc++, pass -DCMAKE_CXX_FLAGS=\"-stdlib=libc++\" to cmake\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the default GSL library to be static, If on Linux, get the release codename\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# It'd be good to be able to tell FindGSL.cmake that we want static libraries (on all except Ubuntu 16.10 (yakkety))\n\n# and then use the target GSL::gsl but FindGSL.cmake doesn't appear to support that at present.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For useful information on getting CMake to work with Boost, type the following command: `cmake --help-module FindBoost`\n\n# or add `SET( Boost_DEBUG \"ON\" )` to this file to get helpful debug information when running CMake\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compiler options\n\n#\n\n# Not using the following due to excessive false-positives\n\n#  * -Wdouble-promotion\n\n#  * -Wold-style-cast   (fires in common/third_party_code/gnuplot-iostream.h)\n\n#  * -Wuseless-cast\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# $<$<AND:$<CXX_COMPILER_ID:GNU>,$<VERSION_GREATER:$<CXX_COMPILER_VERSION>,6.0.0>>:-Wnull-dereference> # Causes problems with superposition_context_from_ptree() - appears to be quite a hassle to resolve\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Append _GLIBCXX_DEBUG to GCC debug build to enable the debug mode of libstdc++\n\n#\n\n# (\"By default, error messages are formatted to fit on lines of about 78 characters.\n\n#   The environment variable GLIBCXX_DEBUG_MESSAGE_LENGTH can be used to request a different length.\"\n\n#  Could consider ~150)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# *** TEMPORARY *** Prevent clang v3.6.0 from failing on Boost Concept checks due to unused local typedefs\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add colour diagnostics when using Clang with Ninja\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add handling of includes and library links\n\n# 'SYSTEM' tells the compiler it's a system include directory so warnings should be suppressed\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Define GSL_RANGE_CHECK_OFF in non-debug builds\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/FindBoostModules_in_3.5/FindBoost.cmake" : {
      "ObjectId" : "88d14abd2fcb7bf18b819dcd6fe04248a672bdcc",
      "LastModified" : "2017-12-29T13:29:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindBoost\n\n# ---------\n\n#\n\n# Find Boost include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n\n#     [REQUIRED]             # Fail with error if Boost is not found\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\n\n#\n\n# This module finds headers and requested component libraries OR a CMake\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\n\n# case results are reported in variables::\n\n#\n\n#   Boost_FOUND            - True if headers and requested libraries were found\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n\n#                            target_link_libraries debug/optimized keywords)\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n\n#                          - Pass to add_definitions() to have diagnostic\n\n#                            information about Boost's automatic linking\n\n#                            displayed during compilation\n\n#\n\n# This module reads hints about search locations from variables::\n\n#\n\n#   BOOST_ROOT             - Preferred installation prefix\n\n#    (or BOOSTROOT)\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n\n#                            specified by these hint variables. Default is OFF.\n\n#   Boost_ADDITIONAL_VERSIONS\n\n#                          - List of Boost versions not known to this module\n\n#                            (Boost install locations may contain the version)\n\n#\n\n# and saves search results persistently in CMake cache entries::\n\n#\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\n\n#   Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\n\n#   Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   Boost::boost                  - Target for header-only dependencies\n\n#                                   (Boost include directory)\n\n#   Boost::<C>                    - Target for specific component dependency\n\n#                                   (shared or static library); <C> is lower-\n\n#                                   case\n\n#   Boost::diagnostic_definitions - interface target to enable diagnostic\n\n#                                   information about Boost's automatic linking\n\n#                                   during compilation (adds BOOST_LIB_DIAGNOSTIC)\n\n#   Boost::disable_autolinking    - interface target to disable automatic\n\n#                                   linking with MSVC (adds BOOST_ALL_NO_LIB)\n\n#   Boost::dynamic_linking        - interface target to enable dynamic linking\n\n#                                   linking with MSVC (adds BOOST_ALL_DYN_LINK)\n\n#\n\n# Implicit dependencies such as Boost::filesystem requiring\n\n# Boost::system will be automatically detected and satisfied, even\n\n# if system is not specified when using find_package and if\n\n# Boost::system is not added to target_link_libraries.  If using\n\n# Boost::thread, then Threads::Threads will also be added automatically.\n\n#\n\n# It is important to note that the imported targets behave differently\n\n# than variables created by this module: multiple calls to\n\n# find_package(Boost) in the same directory or sub-directories with\n\n# different options (e.g. static or shared) will not override the\n\n# values of the targets created by the first call.\n\n#\n\n# Users may set these hints or results as cache entries.  Projects\n\n# should not read these entries directly but instead use the above\n\n# result variables.  Note that some hint names start in upper-case\n\n# \"BOOST\".  One may specify these as environment variables if they are\n\n# not specified as CMake variables or cache entries.\n\n#\n\n# This module first searches for the Boost header files using the above\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\n\n# and the library name configuration settings below.  It saves the\n\n# library directories in Boost_LIBRARY_DIR_DEBUG and\n\n# Boost_LIBRARY_DIR_RELEASE and individual library\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\n\n# When one changes settings used by previous searches in the same build\n\n# tree (excluding environment variables) this module discards previous\n\n# search results affected by the changes and searches again.\n\n#\n\n# Boost libraries come in many variants encoded in their file name.\n\n# Users or projects may tell this module which variant to find by\n\n# setting variables::\n\n#\n\n#   Boost_USE_DEBUG_LIBS     - Set to ON or OFF to specify whether to search\n\n#                              and use the debug libraries.  Default is ON.\n\n#   Boost_USE_RELEASE_LIBS   - Set to ON or OFF to specify whether to search\n\n#                              and use the release libraries.  Default is ON.\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n\n#                              libraries ('mt' tag).  Default is ON.\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n\n#                              libraries.  Default is OFF.\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n\n#                              libraries linked statically to the C++ runtime\n\n#                              ('s' tag).  Default is platform dependent.\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n\n#                              libraries linked to the MS debug C++ runtime\n\n#                              ('g' tag).  Default is ON.\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n\n#                              debug Python build ('y' tag). Default is OFF.\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n\n#                              STLPort ('p' tag).  Default is OFF.\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                            - Set to ON to use libraries compiled with\n\n#                              STLPort deprecated \"native iostreams\"\n\n#                              ('n' tag).  Default is OFF.\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\n\n#                              for the C++ compiler in use.  A list may be\n\n#                              used if multiple compatible suffixes should\n\n#                              be tested for, in decreasing order of\n\n#                              preference.\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\n\n#                              such as \"pthread\" or \"win32\".  Names with\n\n#                              and without this suffix will both be tried.\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\n\n#                              e.g. if set to \"myboost\", will search for\n\n#                              myboost_thread instead of boost_thread.\n\n#\n\n# Other variables one may set to control this module are::\n\n#\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n\n#                              Please enable this before filing any bug report.\n\n#   Boost_DETAILED_FAILURE_MSG\n\n#                            - Set to ON to add detailed information to the\n\n#                              failure message even when the REQUIRED option\n\n#                              is not given to the find_package call.\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n\n#                              libraries to assist with packaging.  For example,\n\n#                              the \"system\" component library may be resolved to\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\n\n#                              affect linking and should not be enabled unless\n\n#                              the user needs this information.\n\n#   Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n\n#                              Boost_LIBRARY_DIR_DEBUG.\n\n#\n\n# On Visual Studio and Borland compilers Boost headers request automatic\n\n# linking to corresponding libraries.  This requires matching libraries\n\n# to be linked explicitly or available in the link library search path.\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\n\n# dynamic linking.  Boost automatic linking typically requests static\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\n\n#\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#\n\n# to ask Boost to report information about automatic linking requests.\n\n#\n\n# Example to find Boost headers only::\n\n#\n\n#   find_package(Boost 1.36.0)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n# Example to find Boost libraries and use imported targets::\n\n#\n\n#   find_package(Boost 1.56 REQUIRED COMPONENTS\n\n#                date_time filesystem iostreams)\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo Boost::date_time Boost::filesystem\n\n#                             Boost::iostreams)\n\n#\n\n# Example to find Boost headers and some *static* (release only) libraries::\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON)  # only find static libs\n\n#   set(Boost_USE_DEBUG_LIBS         OFF) # ignore debug libs and\n\n#   set(Boost_USE_RELEASE_LIBS       ON)  # only find release libs\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n# Boost CMake\n\n# ^^^^^^^^^^^\n\n#\n\n# If Boost was built using the boost-cmake project it provides a package\n\n# configuration file for use with find_package's Config mode.  This\n\n# module looks for the package configuration file called\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\n\n# and this module returns with no further action.  See documentation of\n\n# the Boost CMake package configuration for details on what it provides.\n\n#\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Save project's policies\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if IN_LIST\n",
        "Line" : 219,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is available, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Restore project's policies\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 278,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 287,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 298,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Make variables changeable to the advanced user\n",
        "Line" : 320,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Detect changes in used variables.\n\n# Compares the current variable value with the last one.\n\n# In short form:\n\n# v != v_LAST                      -> CHANGED = 1\n\n# v is defined, v_LAST not         -> CHANGED = 1\n\n# v is not defined, but v_LAST is  -> CHANGED = 1\n\n# otherwise                        -> CHANGED = 0\n\n# CHANGED is returned in variable named ${changed_var}\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# Find the given library (var).\n\n# Use 'build_type' to support different lib paths for RELEASE or DEBUG builds\n\n#\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 372,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is known then search only there.\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\n\n# Returns the guess by setting the variable pointed to by _ret\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Good luck!\n",
        "Line" : 464,
        "CharPositionInLine" : 59
      },
      "29" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 465,
        "CharPositionInLine" : 34
      },
      "30" : {
        "Text" : "# VS 6.0 Good luck!\n",
        "Line" : 466,
        "CharPositionInLine" : 11
      },
      "31" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 467,
        "CharPositionInLine" : 34
      },
      "32" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 477,
        "CharPositionInLine" : 36
      },
      "33" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 485,
        "CharPositionInLine" : 36
      },
      "34" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 488,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 492,
        "CharPositionInLine" : 14
      },
      "36" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 496,
        "CharPositionInLine" : 14
      },
      "37" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 501,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# TODO at least Boost_DEBUG here?\n",
        "Line" : 511,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "#\n\n# Get component dependencies.  Requires the dependencies to have been\n\n# defined for the Boost release version.\n\n#\n\n# component - the component to check\n\n# _ret - list of library dependencies\n\n#\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Note: to add a new Boost release, run\n\n#\n\n#   % cmake -DBOOST_DIR=/path/to/boost/source -P Utilities/Scripts/BoostScanDeps.cmake\n\n#\n\n# The output may be added in a new block below.  If it's the same as\n\n# the previous release, simply update the version range of the block\n\n# for the previous release.  Also check if any new components have\n\n# been added, and add any new components to\n\n# _Boost_COMPONENT_HEADERS.\n\n#\n\n# This information was originally generated by running\n\n# BoostScanDeps.cmake against every boost release to date supported\n\n# by FindBoost:\n\n#\n\n#   % for version in /path/to/boost/sources/*\n\n#     do\n\n#       cmake -DBOOST_DIR=$version -P Utilities/Scripts/BoostScanDeps.cmake\n\n#     done\n\n#\n\n# The output was then updated by search and replace with these regexes:\n\n#\n\n# - Strip message(STATUS) prefix dashes\n\n#   s;^-- ;;\n\n# - Indent\n\n#   s;^set(;    set(;;\n\n# - Add conditionals\n\n#   s;Scanning /path/to/boost/sources/boost_\\(.*\\)_\\(.*\\)_\\(.*);  elseif(NOT Boost_VERSION VERSION_LESS \\10\\20\\3 AND Boost_VERSION VERSION_LESS xxxx);\n\n#\n\n# This results in the logic seen below, but will require the xxxx\n\n# replacing with the following Boost release version (or the next\n\n# minor version to be released, e.g. 1.59 was the latest at the time\n\n# of writing, making 1.60 the next, so 106000 is the needed version\n\n# number).  Identical consecutive releases were then merged together\n\n# by updating the end range of the first block and removing the\n\n# following redundant blocks.\n\n#\n\n# Running the script against all historical releases should be\n\n# required only if the BoostScanDeps.cmake script logic is changed.\n\n# The addition of a new release should only require it to be run\n\n# against the new release.\n",
        "Line" : 525,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# message(STATUS \"Dependencies for Boost::${component}: ${_boost_DEPS_STRING}\")\n",
        "Line" : 814,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#\n\n# Get component headers.  This is the primary header (or headers) for\n\n# a given component, and is used to check that the headers are present\n\n# as well as the library itself as an extra sanity check of the build\n\n# environment.\n\n#\n\n# component - the component to check\n\n# _hdrs\n\n#\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Note: new boost components will require adding here.  The header\n\n# must be present in all versions of Boost providing a library.\n",
        "Line" : 827,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# message(STATUS \"Headers for Boost::${component}: ${_boost_HDRS_STRING}\")\n",
        "Line" : 881,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "#\n\n# Determine if any missing dependencies require adding to the component list.\n\n#\n\n# Sets _Boost_${COMPONENT}_DEPENDENCIES for each required component,\n\n# plus _Boost_IMPORTED_TARGETS (TRUE if imported targets should be\n\n# defined; FALSE if dependency information is unavailable).\n\n#\n\n# componentvar - the component list variable name\n\n# extravar - the indirect dependency list variable name\n\n#\n\n#\n",
        "Line" : 884,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# _boost_unprocessed_components - list of components requiring processing\n\n# _boost_processed_components - components already processed (or currently being processed)\n\n# _boost_new_components - new components discovered for future processing\n\n#\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "#\n\n# Some boost libraries may require particular set of compler features.\n\n# The very first one was `boost::fiber` introduced in Boost 1.62.\n\n# One can check required compiler features of it in\n\n# `${Boost_ROOT}/libs/fiber/build/Jamfile.v2`.\n\n#\n",
        "Line" : 927,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Boost >= 1.62 and < 1.65\n",
        "Line" : 934,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "#\n\n# Update library search directory hint variable with paths used by prebuilt boost binaries.\n\n#\n\n# Prebuilt windows binaries (https://sourceforge.net/projects/boost/files/boost-binaries/)\n\n# have library directories named using MSVC compiler version and architecture.\n\n# This function would append corresponding directories if MSVC is a current compiler,\n\n# so having `BOOST_ROOT` would be enough to specify to find everything.\n\n#\n",
        "Line" : 954,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 989,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 994,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# If the user sets Boost_LIBRARY_DIR, use it as the default for both\n\n# configurations.\n",
        "Line" : 999,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 1021,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 1027,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n\n#\n\n# Note: When adding a new Boost release, also update the dependency\n\n# information in _Boost_COMPONENT_DEPENDENCIES and\n\n# _Boost_COMPONENT_HEADERS.  See the instructions at the top of\n\n# _Boost_COMPONENT_DEPENDENCIES.\n",
        "Line" : 1033,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 1054,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 1057,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 1060,
        "CharPositionInLine" : 8
      },
      "59" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 1066,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 1071,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 1077,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Supply Boost_LIB_DIAGNOSTIC_DEFINITIONS as a convenience target. It\n\n# will only contain any interface definitions on WIN32, but is created\n\n# on all platforms to keep end user code free from platform dependent\n\n# code.  Also provide convenience targets to disable autolinking and\n\n# enable dynamic linking.\n",
        "Line" : 1092,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 1103,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 1112,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 1116,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\n",
        "Line" : 1133,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\n",
        "Line" : 1146,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1168,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1174,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n\n# Build a list of path suffixes for each version.\n",
        "Line" : 1210,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 1215,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 1220,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1247,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1255,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\n\n# It will be updated below for component libraries.\n",
        "Line" : 1259,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n",
        "Line" : 1267,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Set Boost_FOUND based on requested version.\n",
        "Line" : 1293,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 1306,
        "CharPositionInLine" : 6
      },
      "79" : {
        "Text" : "# Caller will accept any Boost version.\n",
        "Line" : 1319,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Prefix initialization\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1328,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1342,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 1359,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 1367,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\n",
        "Line" : 1387,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 1392,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 1399,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 1408,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 1412,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 1414,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n",
        "Line" : 1420,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1433,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Clear Boost_LIBRARY_DIR_${c} if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1442,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is set, prefer its value.\n",
        "Line" : 1448,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 1496,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 1506,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 1518,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 1532,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Additional components may be required via component dependencies.\n\n# Add any missing components to the list.\n",
        "Line" : 1540,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# If thread is required, get the thread libs as a dependency\n",
        "Line" : 1544,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\n",
        "Line" : 1555,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# Compute component-specific hints.\n",
        "Line" : 1574,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Consolidate and report component-specific hints.\n",
        "Line" : 1587,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 1597,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1601,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 1613,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# if Boost_LIBRARY_DIR_RELEASE is not defined,\n\n# but Boost_LIBRARY_DIR_DEBUG is, look there first for RELEASE libs\n",
        "Line" : 1645,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1651,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 1663,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# if Boost_LIBRARY_DIR_DEBUG is not defined,\n\n# but Boost_LIBRARY_DIR_RELEASE is, look there first for DEBUG libs\n",
        "Line" : 1696,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1702,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Check if component requires some compiler features\n",
        "Line" : 1721,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1726,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1731,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\n\n# Update it for the requested component libraries.\n",
        "Line" : 1747,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# The headers were found.  Check for requested component libs.\n",
        "Line" : 1750,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Optional indirect dependencies are not counted as missing.\n",
        "Line" : 1762,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1772,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1799,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\n",
        "Line" : 1802,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1812,
        "CharPositionInLine" : 6
      },
      "121" : {
        "Text" : "# Boost headers were not found so no components were found.\n",
        "Line" : 1830,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Add imported targets\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1837,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# For header-only libraries\n",
        "Line" : 1842,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# Even if Boost_USE_STATIC_LIBS is OFF, we might have static\n\n# libraries as a result.\n",
        "Line" : 1858,
        "CharPositionInLine" : 10
      },
      "125" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Notification to end user about what was found\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1905,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in its requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1931,
        "CharPositionInLine" : 6
      },
      "127" : {
        "Text" : "# Configure display of cache entries in GUI.\n",
        "Line" : 1944,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "# Record last used values of input variables so we can\n\n# detect on the next run if the user changed them.\n",
        "Line" : 1959,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\n\n# the last flush.\n",
        "Line" : 1972,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "# Restore project's policies\n",
        "Line" : 1981,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 131
    },
    "cmake/FindBoostModules_lt_3.3.0/FindBoost.cmake" : {
      "ObjectId" : "ed149c61849c6a45b6ee42fe701ae5ea52471afe",
      "LastModified" : "2017-12-29T13:29:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindBoost\n\n# ---------\n\n#\n\n# Find Boost include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n\n#     [REQUIRED]             # Fail with error if Boost is not found\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\n\n#\n\n# This module finds headers and requested component libraries OR a CMake\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\n\n# case results are reported in variables::\n\n#\n\n#   Boost_FOUND            - True if headers and requested libraries were found\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n\n#                            target_link_libraries debug/optimized keywords)\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n\n#                          - Pass to add_definitions() to have diagnostic\n\n#                            information about Boost's automatic linking\n\n#                            displayed during compilation\n\n#\n\n# This module reads hints about search locations from variables::\n\n#\n\n#   BOOST_ROOT             - Preferred installation prefix\n\n#    (or BOOSTROOT)\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n\n#                            specified by these hint variables. Default is OFF.\n\n#   Boost_ADDITIONAL_VERSIONS\n\n#                          - List of Boost versions not known to this module\n\n#                            (Boost install locations may contain the version)\n\n#\n\n# and saves search results persistently in CMake cache entries::\n\n#\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\n\n#   Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\n\n#   Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   Boost::boost                  - Target for header-only dependencies\n\n#                                   (Boost include directory)\n\n#   Boost::<C>                    - Target for specific component dependency\n\n#                                   (shared or static library); <C> is lower-\n\n#                                   case\n\n#   Boost::diagnostic_definitions - interface target to enable diagnostic\n\n#                                   information about Boost's automatic linking\n\n#                                   during compilation (adds BOOST_LIB_DIAGNOSTIC)\n\n#   Boost::disable_autolinking    - interface target to disable automatic\n\n#                                   linking with MSVC (adds BOOST_ALL_NO_LIB)\n\n#   Boost::dynamic_linking        - interface target to enable dynamic linking\n\n#                                   linking with MSVC (adds BOOST_ALL_DYN_LINK)\n\n#\n\n# Implicit dependencies such as Boost::filesystem requiring\n\n# Boost::system will be automatically detected and satisfied, even\n\n# if system is not specified when using find_package and if\n\n# Boost::system is not added to target_link_libraries.  If using\n\n# Boost::thread, then Thread::Thread will also be added automatically.\n\n#\n\n# It is important to note that the imported targets behave differently\n\n# than variables created by this module: multiple calls to\n\n# find_package(Boost) in the same directory or sub-directories with\n\n# different options (e.g. static or shared) will not override the\n\n# values of the targets created by the first call.\n\n#\n\n# Users may set these hints or results as cache entries.  Projects\n\n# should not read these entries directly but instead use the above\n\n# result variables.  Note that some hint names start in upper-case\n\n# \"BOOST\".  One may specify these as environment variables if they are\n\n# not specified as CMake variables or cache entries.\n\n#\n\n# This module first searches for the Boost header files using the above\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\n\n# and the library name configuration settings below.  It saves the\n\n# library directories in Boost_LIBRARY_DIR_DEBUG and\n\n# Boost_LIBRARY_DIR_RELEASE and individual library\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\n\n# When one changes settings used by previous searches in the same build\n\n# tree (excluding environment variables) this module discards previous\n\n# search results affected by the changes and searches again.\n\n#\n\n# Boost libraries come in many variants encoded in their file name.\n\n# Users or projects may tell this module which variant to find by\n\n# setting variables::\n\n#\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n\n#                              libraries ('mt' tag).  Default is ON.\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n\n#                              libraries.  Default is OFF.\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n\n#                              libraries linked statically to the C++ runtime\n\n#                              ('s' tag).  Default is platform dependent.\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n\n#                              libraries linked to the MS debug C++ runtime\n\n#                              ('g' tag).  Default is ON.\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n\n#                              debug Python build ('y' tag). Default is OFF.\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n\n#                              STLPort ('p' tag).  Default is OFF.\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                            - Set to ON to use libraries compiled with\n\n#                              STLPort deprecated \"native iostreams\"\n\n#                              ('n' tag).  Default is OFF.\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\n\n#                              for the C++ compiler in use.\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\n\n#                              such as \"pthread\" or \"win32\".  Names with\n\n#                              and without this suffix will both be tried.\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\n\n#                              e.g. if set to \"myboost\", will search for\n\n#                              myboost_thread instead of boost_thread.\n\n#\n\n# Other variables one may set to control this module are::\n\n#\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n\n#                              Please enable this before filing any bug report.\n\n#   Boost_DETAILED_FAILURE_MSG\n\n#                            - Set to ON to add detailed information to the\n\n#                              failure message even when the REQUIRED option\n\n#                              is not given to the find_package call.\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n\n#                              libraries to assist with packaging.  For example,\n\n#                              the \"system\" component library may be resolved to\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\n\n#                              affect linking and should not be enabled unless\n\n#                              the user needs this information.\n\n#   Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n\n#                              Boost_LIBRARY_DIR_DEBUG.\n\n#\n\n# On Visual Studio and Borland compilers Boost headers request automatic\n\n# linking to corresponding libraries.  This requires matching libraries\n\n# to be linked explicitly or available in the link library search path.\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\n\n# dynamic linking.  Boost automatic linking typically requests static\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\n\n#\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#\n\n# to ask Boost to report information about automatic linking requests.\n\n#\n\n# Example to find Boost headers only::\n\n#\n\n#   find_package(Boost 1.36.0)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n# Example to find Boost libraries and use imported targets::\n\n#\n\n#   find_package(Boost 1.56 REQUIRED COMPONENTS\n\n#                date_time filesystem iostreams)\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo Boost::date_time Boost::filesystem\n\n#                             Boost::iostreams)\n\n#\n\n# Example to find Boost headers and some *static* libraries::\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON) # only find static libs\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n# Boost CMake\n\n# ^^^^^^^^^^^\n\n#\n\n# If Boost was built using the boost-cmake project it provides a package\n\n# configuration file for use with find_package's Config mode.  This\n\n# module looks for the package configuration file called\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\n\n# and this module returns with no further action.  See documentation of\n\n# the Boost CMake package configuration for details on what it provides.\n\n#\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2012 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2012 Philip Lowman <philip@yhbt.com>\n\n# Copyright 2016      Alex Turbov <i.zaufi@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is available, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 281,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 286,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 290,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 301,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 308,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Make variables changeable to the advanced user\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Detect changes in used variables.\n\n# Compares the current variable value with the last one.\n\n# In short form:\n\n# v != v_LAST                      -> CHANGED = 1\n\n# v is defined, v_LAST not         -> CHANGED = 1\n\n# v is not defined, but v_LAST is  -> CHANGED = 1\n\n# otherwise                        -> CHANGED = 0\n\n# CHANGED is returned in variable named ${changed_var}\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Find the given library (var).\n\n# Use 'build_type' to support different lib paths for RELEASE or DEBUG builds\n\n#\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 371,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is known then search only there.\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\n\n# Returns the guess by setting the variable pointed to by _ret\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Good luck!\n",
        "Line" : 461,
        "CharPositionInLine" : 59
      },
      "26" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 462,
        "CharPositionInLine" : 34
      },
      "27" : {
        "Text" : "# MSVC60 Good luck!\n",
        "Line" : 463,
        "CharPositionInLine" : 11
      },
      "28" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 464,
        "CharPositionInLine" : 34
      },
      "29" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 474,
        "CharPositionInLine" : 36
      },
      "30" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 482,
        "CharPositionInLine" : 36
      },
      "31" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 485,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 489,
        "CharPositionInLine" : 14
      },
      "33" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 493,
        "CharPositionInLine" : 14
      },
      "34" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 498,
        "CharPositionInLine" : 12
      },
      "35" : {
        "Text" : "# TODO at least Boost_DEBUG here?\n",
        "Line" : 508,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#\n\n# Get component dependencies.  Requires the dependencies to have been\n\n# defined for the Boost release version.\n\n#\n\n# component - the component to check\n\n# _ret - list of library dependencies\n\n#\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Note: to add a new Boost release, run\n\n#\n\n#   % cmake -DBOOST_DIR=/path/to/boost/source -P Utilities/Scripts/BoostScanDeps.cmake\n\n#\n\n# The output may be added in a new block below.  If it's the same as\n\n# the previous release, simply update the version range of the block\n\n# for the previous release.  Also check if any new components have\n\n# been added, and add any new components to\n\n# _Boost_COMPONENT_HEADERS.\n\n#\n\n# This information was originally generated by running\n\n# BoostScanDeps.cmake against every boost release to date supported\n\n# by FindBoost:\n\n#\n\n#   % for version in /path/to/boost/sources/*\n\n#     do\n\n#       cmake -DBOOST_DIR=$version -P Utilities/Scripts/BoostScanDeps.cmake\n\n#     done\n\n#\n\n# The output was then updated by search and replace with these regexes:\n\n#\n\n# - Strip message(STATUS) prefix dashes\n\n#   s;^-- ;;\n\n# - Indent\n\n#   s;^set(;    set(;;\n\n# - Add conditionals\n\n#   s;Scanning /path/to/boost/sources/boost_\\(.*\\)_\\(.*\\)_\\(.*);  elseif(NOT Boost_VERSION VERSION_LESS \\10\\20\\3 AND Boost_VERSION VERSION_LESS xxxx);\n\n#\n\n# This results in the logic seen below, but will require the xxxx\n\n# replacing with the following Boost release version (or the next\n\n# minor version to be released, e.g. 1.59 was the latest at the time\n\n# of writing, making 1.60 the next, so 106000 is the needed version\n\n# number).  Identical consecutive releases were then merged together\n\n# by updating the end range of the first block and removing the\n\n# following redundant blocks.\n\n#\n\n# Running the script against all historical releases should be\n\n# required only if the BoostScanDeps.cmake script logic is changed.\n\n# The addition of a new release should only require it to be run\n\n# against the new release.\n",
        "Line" : 522,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# message(STATUS \"Dependencies for Boost::${component}: ${_boost_DEPS_STRING}\")\n",
        "Line" : 758,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#\n\n# Get component headers.  This is the primary header (or headers) for\n\n# a given component, and is used to check that the headers are present\n\n# as well as the library itself as an extra sanity check of the build\n\n# environment.\n\n#\n\n# component - the component to check\n\n# _hdrs\n\n#\n",
        "Line" : 761,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Note: new boost components will require adding here.  The header\n\n# must be present in all versions of Boost providing a library.\n",
        "Line" : 771,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# message(STATUS \"Headers for Boost::${component}: ${_boost_HDRS_STRING}\")\n",
        "Line" : 823,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#\n\n# Determine if any missing dependencies require adding to the component list.\n\n#\n\n# Sets _Boost_${COMPONENT}_DEPENDENCIES for each required component,\n\n# plus _Boost_IMPORTED_TARGETS (TRUE if imported targets should be\n\n# defined; FALSE if dependency information is unavailable).\n\n#\n\n# componentvar - the component list variable name\n\n# extravar - the indirect dependency list variable name\n\n#\n\n#\n",
        "Line" : 826,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# _boost_unprocessed_components - list of components requiring processing\n\n# _boost_processed_components - components already processed (or currently being processed)\n\n# _boost_new_components - new components discovered for future processing\n\n#\n",
        "Line" : 838,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "#\n\n# Update library search directory hint variable with paths used by prebuilt boost binaries.\n\n#\n\n# Prebuilt windows binaries (https://sourceforge.net/projects/boost/files/boost-binaries/)\n\n# have library directories named using MSVC compiler version and architecture.\n\n# This function would append corresponding directories if MSVC is a current compiler,\n\n# so having `BOOST_ROOT` would be enough to specify to find everything.\n\n#\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 902,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# If the user sets Boost_LIBRARY_DIR, use it as the default for both\n\n# configurations.\n",
        "Line" : 912,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 934,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n\n#\n\n# Note: When adding a new Boost release, also update the dependency\n\n# information in _Boost_COMPONENT_DEPENDENCIES and\n\n# _Boost_COMPONENT_HEADERS.  See the instructions at the top of\n\n# _Boost_COMPONENT_DEPENDENCIES.\n",
        "Line" : 940,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 960,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 963,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 966,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 972,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 983,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Supply Boost_LIB_DIAGNOSTIC_DEFINITIONS as a convenience target. It\n\n# will only contain any interface definitions on WIN32, but is created\n\n# on all platforms to keep end user code free from platform dependent\n\n# code.  Also provide convenience targets to disable autolinking and\n\n# enable dynamic linking.\n",
        "Line" : 998,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 1009,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 1018,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 1022,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\n",
        "Line" : 1039,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1074,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n\n# Build a list of path suffixes for each version.\n",
        "Line" : 1110,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 1115,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 1120,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1147,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1155,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\n\n# It will be updated below for component libraries.\n",
        "Line" : 1159,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n",
        "Line" : 1167,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# Set Boost_FOUND based on requested version.\n",
        "Line" : 1193,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 1206,
        "CharPositionInLine" : 6
      },
      "74" : {
        "Text" : "# Caller will accept any Boost version.\n",
        "Line" : 1219,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Prefix initialization\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1228,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1242,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 1259,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 1267,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\n",
        "Line" : 1287,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 1292,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 1299,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 1308,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 1312,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 1314,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n",
        "Line" : 1320,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1333,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Clear Boost_LIBRARY_DIR_${c} if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1342,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is set, prefer its value.\n",
        "Line" : 1348,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 1390,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 1400,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 1412,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 1426,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Additional components may be required via component dependencies.\n\n# Add any missing components to the list.\n",
        "Line" : 1434,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# If thread is required, get the thread libs as a dependency\n",
        "Line" : 1438,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\n",
        "Line" : 1445,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Compute component-specific hints.\n",
        "Line" : 1464,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Consolidate and report component-specific hints.\n",
        "Line" : 1477,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 1487,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1491,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 1503,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# if Boost_LIBRARY_DIR_RELEASE is not defined,\n\n# but Boost_LIBRARY_DIR_DEBUG is, look there first for RELEASE libs\n",
        "Line" : 1528,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1534,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 1544,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# if Boost_LIBRARY_DIR_DEBUG is not defined,\n\n# but Boost_LIBRARY_DIR_RELEASE is, look there first for DEBUG libs\n",
        "Line" : 1570,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1576,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1595,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1600,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\n\n# Update it for the requested component libraries.\n",
        "Line" : 1616,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# The headers were found.  Check for requested component libs.\n",
        "Line" : 1619,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Optional indirect dependencies are not counted as missing.\n",
        "Line" : 1631,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1641,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1667,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\n",
        "Line" : 1670,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1680,
        "CharPositionInLine" : 6
      },
      "115" : {
        "Text" : "# Boost headers were not found so no components were found.\n",
        "Line" : 1700,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Add imported targets\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1707,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# For header-only libraries\n",
        "Line" : 1712,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Even if Boost_USE_STATIC_LIBS is OFF, we might have static\n\n# libraries as a result.\n",
        "Line" : 1728,
        "CharPositionInLine" : 10
      },
      "119" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Notification to end user about what was found\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1771,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in its requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1797,
        "CharPositionInLine" : 6
      },
      "121" : {
        "Text" : "# Configure display of cache entries in GUI.\n",
        "Line" : 1810,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# Record last used values of input variables so we can\n\n# detect on the next run if the user changed them.\n",
        "Line" : 1825,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\n\n# the last flush.\n",
        "Line" : 1838,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 124
    },
    "cmake/Modules/CMakeParseArguments.cmake" : {
      "ObjectId" : "7ee2bbacef5d23c08523e0f974dac7f501dc8517",
      "LastModified" : "2017-12-29T13:29:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n# This module once implemented the :command:`cmake_parse_arguments` command\n\n# that is now implemented natively by CMake.  It is now an empty placeholder\n\n# for compatibility with projects that include it to get the command from\n\n# CMake 3.4 and lower.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGSL.cmake" : {
      "ObjectId" : "8d10b6ce5c5e53b1981b10cea5f9b76924ea5334",
      "LastModified" : "2017-12-29T13:29:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindGSL\n\n# --------\n\n#\n\n# Find the native GSL includes and libraries.\n\n#\n\n# The GNU Scientific Library (GSL) is a numerical library for C and C++\n\n# programmers. It is free software under the GNU General Public\n\n# License.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# If GSL is found, this module defines the following :prop_tgt:`IMPORTED`\n\n# targets::\n\n#\n\n#  GSL::gsl      - The main GSL library.\n\n#  GSL::gslcblas - The CBLAS support library used by GSL.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project::\n\n#\n\n#  GSL_FOUND          - True if GSL found on the local system\n\n#  GSL_INCLUDE_DIRS   - Location of GSL header files.\n\n#  GSL_LIBRARIES      - The GSL libraries.\n\n#  GSL_VERSION        - The version of the discovered GSL install.\n\n#\n\n# Hints\n\n# ^^^^^\n\n#\n\n# Set ``GSL_ROOT_DIR`` to a directory that contains a GSL installation.\n\n#\n\n# This script expects to find libraries at ``$GSL_ROOT_DIR/lib`` and the GSL\n\n# headers at ``$GSL_ROOT_DIR/include/gsl``.  The library directory may\n\n# optionally provide Release and Debug folders. If available, the libraries\n\n# named ``gsld``, ``gslblasd`` or ``cblasd`` are recognized as debug libraries.\n\n# For Unix-like systems, this script will use ``$GSL_ROOT_DIR/bin/gsl-config``\n\n# (if found) to aid in the discovery of GSL.\n\n#\n\n# Cache Variables\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# This module may set the following variables depending on platform and type\n\n# of GSL installation discovered.  These variables may optionally be set to\n\n# help this module find the correct files::\n\n#\n\n#  GSL_CBLAS_LIBRARY       - Location of the GSL CBLAS library.\n\n#  GSL_CBLAS_LIBRARY_DEBUG - Location of the debug GSL CBLAS library (if any).\n\n#  GSL_CONFIG_EXECUTABLE   - Location of the ``gsl-config`` script (if any).\n\n#  GSL_LIBRARY             - Location of the GSL library.\n\n#  GSL_LIBRARY_DEBUG       - Location of the debug GSL library (if any).\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# If the user has provided ``GSL_ROOT_DIR``, use it!  Choose items found\n\n# at this location over system locations.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\n\n# As a first try, use the PkgConfig module.  This will work on many\n\n# *NIX systems.  See :module:`findpkgconfig`\n\n# This will return ``GSL_INCLUDEDIR`` and ``GSL_LIBDIR`` used below.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================================\n\n# Set GSL_INCLUDE_DIRS and GSL_LIBRARIES. If we skipped the PkgConfig step, try\n\n# to find the libraries at $GSL_ROOT_DIR (if provided) or in standard system\n\n# locations.  These find_library and find_path calls will prefer custom\n\n# locations over standard locations (HINTS).  If the requested file is not found\n\n# at the HINTS location, standard system locations will be still be searched\n\n# (/usr/lib64 (Redhat), lib/i386-linux-gnu (Debian)).\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do we also have debug versions?\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we didn't use PkgConfig, try to find the version via gsl-config or by\n\n# reading gsl_version.h.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 1. If gsl-config exists, query for the version.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# 2. If gsl-config is not available, try looking in gsl/gsl_version.h\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# might also try scraping the directory name for a regex match \"gsl-X.X\"\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#=============================================================================\n\n# handle the QUIETLY and REQUIRED arguments and set GSL_FOUND to TRUE if all\n\n# listed variables are TRUE\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#=============================================================================\n\n# Register imported libraries:\n\n# 1. If we can find a Windows .dll file (or if we can find both Debug and\n\n#    Release libraries), we will set appropriate target properties for these.\n\n# 2. However, for most systems, we will only register the import location and\n\n#    include directory.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Look for dlls, or Release and Debug libraries.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Windows systems with dll libraries.\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Windows with dlls, but only Release libraries.\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# If we have both Debug and Release libraries\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# For all other environments (ones without dll libraries), create\n\n# the imported library targets.\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "67f6bd6f2bcd1a0313078a28a07cc584df7b885b",
      "LastModified" : "2017-12-29T13:29:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindPackageHandleStandardArgs\n-----------------------------\n\nThis module provides a function intended to be used in :ref:`Find Modules`\nimplementing :command:`find_package(<PackageName>)` calls.  It handles the\n``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.\nIt also sets the ``<PackageName>_FOUND`` variable.  The package is\nconsidered found if all variables listed contain valid results, e.g.\nvalid filepaths.\n\n.. command:: find_package_handle_standard_args\n\n  There are two signatures::\n\n    find_package_handle_standard_args(<PackageName>\n      (DEFAULT_MSG|<custom-failure-message>)\n      <required-var>...\n      )\n\n    find_package_handle_standard_args(<PackageName>\n      [FOUND_VAR <result-var>]\n      [REQUIRED_VARS <required-var>...]\n      [VERSION_VAR <version-var>]\n      [HANDLE_COMPONENTS]\n      [CONFIG_MODE]\n      [FAIL_MESSAGE <custom-failure-message>]\n      )\n\n  The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all\n  the variables ``<required-var>...`` are valid and any optional\n  constraints are satisfied, and ``FALSE`` otherwise.  A success or\n  failure message may be displayed based on the results and on\n  whether the ``REQUIRED`` and/or ``QUIET`` option was given to\n  the :command:`find_package` call.\n\n  The options are:\n\n  ``(DEFAULT_MSG|<custom-failure-message>)``\n    In the simple signature this specifies the failure message.\n    Use ``DEFAULT_MSG`` to ask for a default message to be computed\n    (recommended).  Not valid in the full signature.\n\n  ``FOUND_VAR <result-var>``\n    Obsolete.  Specifies either ``<PackageName>_FOUND`` or\n    ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only\n    for compatibility with older versions of CMake and is now ignored.\n    Result variables of both names are always set for compatibility.\n\n  ``REQUIRED_VARS <required-var>...``\n    Specify the variables which are required for this package.\n    These may be named in the generated failure message asking the\n    user to set the missing variable values.  Therefore these should\n    typically be cache entries such as ``FOO_LIBRARY`` and not output\n    variables like ``FOO_LIBRARIES``.\n\n  ``VERSION_VAR <version-var>``\n    Specify the name of a variable that holds the version of the package\n    that has been found.  This version will be checked against the\n    (potentially) specified required version given to the\n    :command:`find_package` call, including its ``EXACT`` option.\n    The default messages include information about the required\n    version and the version which has been actually found, both\n    if the version is ok or not.\n\n  ``HANDLE_COMPONENTS``\n    Enable handling of package components.  In this case, the command\n    will report which components have been found and which are missing,\n    and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``\n    if any of the required components (i.e. not the ones listed after\n    the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are\n    missing.\n\n  ``CONFIG_MODE``\n    Specify that the calling find module is a wrapper around a\n    call to ``find_package(<PackageName> NO_MODULE)``.  This implies\n    a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command\n    will automatically check whether the package configuration file\n    was found.\n\n  ``FAIL_MESSAGE <custom-failure-message>``\n    Specify a custom failure message instead of using the default\n    generated message.  Not recommended.\n\nExample for the simple signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibXml2 DEFAULT_MSG\n    LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\nThe ``LibXml2`` package is considered to be found if both\n``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.\nThen also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found\nand ``REQUIRED`` was used, it fails with a\n:command:`message(FATAL_ERROR)`, independent whether ``QUIET`` was\nused or not.  If it is found, success will be reported, including\nthe content of the first ``<required-var>``.  On repeated CMake runs,\nthe same message will not be printed again.\n\nExample for the full signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibArchive\n    REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\n    VERSION_VAR LibArchive_VERSION)\n\nIn this case, the ``LibArchive`` package is considered to be found if\nboth ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.\nAlso the version of ``LibArchive`` will be checked by using the version\ncontained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,\nthe default messages will be printed.\n\nAnother example for the full signature:\n\n.. code-block:: cmake\n\n  find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n  find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\nIn this case, a ``FindAutmoc4.cmake`` module wraps a call to\n``find_package(Automoc4 NO_MODULE)`` and adds an additional search\ndirectory for ``automoc4``.  Then the call to\n``find_package_handle_standard_args`` produces a proper success/failure\nmessage.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Set up the arguments for `cmake_parse_arguments`.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check whether we are in 'simple' or 'extended' mode:\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# component handling\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# version handling:\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# exact version required\n",
        "Line" : 298,
        "CharPositionInLine" : 44
      },
      "17" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 304,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 334,
        "CharPositionInLine" : 17
      },
      "21" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 345,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Check with DEFINED as the found version may be 0.\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# print the result:\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "cmake/Modules/FindPackageMessage.cmake" : {
      "ObjectId" : "6821cee4f77a9d84c74f2c140870a2163ae5a5f0",
      "LastModified" : "2017-12-29T13:29:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "05ba5d840fd08cebcb9e2b8092f0955497f4c9fb",
      "LastModified" : "2018-06-16T08:04:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#####################################################################\n\n#####################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Try to eradicate these...\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####################################################################\n\n#####################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: Have ALL_NORMSOURCES and ALL_TESTSOURCES get auto-generated in auto_generated_file_list.cmake\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These should really use target_link_libraries() to their corresponding library but CMake can't seem to do that\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: Try to eradicate these...\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#####################################################################\n\n#####################################################################\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#####################################################################\n\n#####################################################################\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#####################################################################\n\n#####################################################################\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#####################################################################\n\n#####################################################################\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#####################################################################\n\n#####################################################################\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "source/auto_generated_file_list.cmake" : {
      "ObjectId" : "e156ac0728ad17374f201e3b7c7c48db8e418ba0",
      "LastModified" : "2018-07-08T13:02:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##### DON'T EDIT THIS FILE - IT'S AUTO-GENERATED #####\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##### DON'T EDIT THIS FILE - IT'S AUTO-GENERATED #####\n",
        "Line" : 2528,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 9
  },
  "ElapsedTime" : 2599
}