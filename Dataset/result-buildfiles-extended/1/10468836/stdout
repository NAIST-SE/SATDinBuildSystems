{
  "Repository" : "10468836",
  "Revision" : "HEAD",
  "ObjectId" : "8d65c2c72b2e89302e4d61b02d225c83c3014354",
  "CommitTime" : "2019-03-28T20:16:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "36d7e92b5c3a3a53c50b185bab86598667fcd30f",
      "LastModified" : "2018-09-06T12:34:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Detect supported warning flags\n\n# Modified from work By Dan Liew (fpbench - MIT)\n\n# https://github.com/delcypher/fp-bench/blob/master/CMakeLists.txt\n\n###############################################################################\n\n# Warnings for both the C and C++ compiler\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Warning flags for the C compiler only\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Warning flags for the C++ compiler only\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Globally set C compiler warning flags that are supported and emit\n\n# a warning about unsupported flags\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Globally set C++ compiler warning flags that are supported and emit\n\n# a warning about unsupported flags\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This function adds the c++11 flag to a c++ target (if supported)\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set CMAKE_INSTALL_LIBDIR if not defined\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Older cmake might not pick CMAKE_INSTALL_LIBDIR right\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# By default, build shared object libraries on linux\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Appends the cmake/modules path to MAKE_MODULE_PATH variable.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make a version file containing the current version from git.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#parse the version information into pieces.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# this is the library version, independant of git revision\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "cmake/Toolchains/oe-sdk_cross.cmake" : {
      "ObjectId" : "8a82c296ca2195acd45d85b1dd01dfd2579d70ab",
      "LastModified" : "2015-06-11T10:44:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this toolchain file comes from gnuradio project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set( CMAKE_C_COMPILER  $ENV{CC} )\n\n#set( CMAKE_CXX_COMPILER  $ENV{CXX} )\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#same flags for C sources\n",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "3" : {
        "Text" : "#same flags for C sources\n",
        "Line" : 10,
        "CharPositionInLine" : 68
      },
      "4" : {
        "Text" : "# for java\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindFtd2xx.cmake" : {
      "ObjectId" : "073258910083ce6fe62b7ca576755fa68be2a3eb",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libftd2xx\n\n# Once done this will define\n\n#\n\n#  LIBFTD2XX_FOUND - system has libftd2xx\n\n#  LIBFTD2XX_INCLUDE_DIRS - the libftd2xx include directory\n\n#  LIBFTD2XX_LIBRARIES - Link these to use libftd2xx\n\n#  LIBFTD2XX_DEFINITIONS - Compiler switches required for using libftd2xx\n\n#\n\n#  Adapted from cmake-modules Google Code project\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  (Changes for libftd2xx) Copyright (c) 2008 Kyle Machulis <kyle@nonpolynomial.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the LIBFTD2XX_INCLUDE_DIRS and LIBFTD2XX_LIBRARIES variables only in the advanced view\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindFtd4222.cmake" : {
      "ObjectId" : "bd86fc192a6ca6c055f2f126c1df1ed747259889",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LIBFT4222\n\n# Once done this will define\n\n#\n\n#  LIBFT4222_FOUND - system has LIBFT4222\n\n#  LIBFT4222_INCLUDE_DIRS - the LIBFT4222 include directory\n\n#  LIBFT4222_LIBRARIES - Link these to use LIBFT4222\n\n#  LIBFT4222_DEFINITIONS - Compiler switches required for using LIBFT4222\n\n#\n\n#  Adapted from cmake-modules Google Code project\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  (Changes for LIBFTD2XX) Copyright (c) 2008 Kyle Machulis <kyle@nonpolynomial.com>\n\n#  (Changes for LIBFT4222) Henry Bruce <henry.bruce@intel.com> Copyright (c) 2015 Intel Corporation. \n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the LIBFT4222_INCLUDE_DIRS and LIBFT4222_LIBRARIES variables only in the advanced view\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindJSON-C.cmake" : {
      "ObjectId" : "f96701e67c67c153df10aa3c030f29a645491bb2",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# JSON-C_FOUND - true if library and headers were found\n\n# JSON-C_INCLUDE_DIRS - include directories\n\n# JSON-C_LIBRARIES - library directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindNodejs.cmake" : {
      "ObjectId" : "c7da092777666c78b2c06eea5f60c6eb872b1f85",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro to add directory to NODEJS_INCLUDE_DIRS if it exists and is not /usr/include\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If compat-libuv package exists, it must be at start of include path\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set (NODEJS_INCLUDE_DIRS ${UV_ROOT_DIR})\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Now look for node. Flag an error if not found\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check that v8.h is in NODEJS_INCLUDE_DIRS\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check that uv.h is in NODEJS_INCLUDE_DIRS\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we end up with a nasty newline so strip everything that isn't a number\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "528b107c085cc70afe2532b748fff04b10d41295",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get Sphinx Version\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindUDEV.cmake" : {
      "ObjectId" : "b1696715eca4564736c5ea4b2f22853f54eaac7c",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UDEV_FOUND - true if library and headers were found\n\n# UDEV_INCLUDE_DIRS - include directories\n\n# UDEV_LIBRARIES - library directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindYuidoc.cmake" : {
      "ObjectId" : "63c4937e76eef23acc8055b009e78b11036529e4",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get Yuidoc version\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "c8d27f2e8ce494c96404086ce58982239916a44c",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/modules/OpenCVDetectPython.cmake" : {
      "ObjectId" : "e3fc3a903c646146607b60953bcaf0713b393efd",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find specified Python version\n\n# Arguments:\n\n#   preferred_version (value): Version to check for first\n\n#   min_version (value): Minimum supported version\n\n#   library_env (value): Name of Python library ENV variable to check\n\n#   include_dir_env (value): Name of Python include directory ENV variable to check\n\n#   found (variable): Set if interpreter found\n\n#   executable (variable): Output of executable found\n\n#   version_string (variable): Output of found version\n\n#   version_major (variable): Output of found major version\n\n#   version_minor (variable): Output of found minor version\n\n#   libs_found (variable): Set if libs found\n\n#   libs_version_string (variable): Output of found libs version\n\n#   libraries (variable): Output of found Python libraries\n\n#   library (variable): Output of found Python library\n\n#   debug_libraries (variable): Output of found Python debug libraries\n\n#   debug_library (variable): Output of found Python debug library\n\n#   include_path (variable): Output of found Python include path\n\n#   include_dir (variable): Output of found Python include dir\n\n#   include_dir2 (variable): Output of found Python include dir2\n\n#   packages_path (variable): Output of found Python packages path\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy outputs\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Clear find_host_package side effects\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# not using _version_string here, because it might not conform to the CMake version format\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# builder version can differ from target, matching base version (e.g. 2.7)\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Copy outputs\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Clear find_package side effects\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#debian based assumed, install to the dist-packages.\n",
        "Line" : 106,
        "CharPositionInLine" : 11
      },
      "8" : {
        "Text" : "# Export return values\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Use Python 2 as default Python interpreter\n",
        "Line" : 154,
        "CharPositionInLine" : 28
      },
      "10" : {
        "Text" : "# Use Python 2 as fallback Python interpreter (if there is no Python 2)\n",
        "Line" : 157,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 11
    },
    "cmake/modules/TargetArch.cmake" : {
      "ObjectId" : "24bebd3c6c033ce6c11f0b1101fb799552267789",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is under the terms of the GNU Lesser General Public License version\n\n# 2.1 as published by the Free Software Foundation and appearing in the file\n\n# LICENSE.LGPL included in the packaging of this file. Please review the\n\n# following information to ensure the GNU Lesser General Public License version\n\n# 2.1 requirements will be met:\n\n# http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 132,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 135,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 138,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "0008345253dfea1eb7491f588c0452597a6d8718",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/c++/CMakeLists.txt" : {
      "ObjectId" : "10751aecb515293dd0911bb71cf9fd8e35adc8e3",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/c/CMakeLists.txt" : {
      "ObjectId" : "0821810edc49d571de3b95ff549c40e3730f39a0",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/platform/CMakeLists.txt" : {
      "ObjectId" : "08b7bb424bc1502b7d7b71df4dc5686221f52c1d",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "imraa/CMakeLists.txt" : {
      "ObjectId" : "de90e9838d2dc6aa2dcbdc581bb6ebf0222c1595",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "6f80eabd383b05bbe555fd6c65f7b113bd439c15",
      "LastModified" : "2019-03-28T20:09:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#keywords in if statements are case sensitive\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use the find_package provided by Android Things.  Make sure this is\n\n# available in CMAKE_MODULE_PATH.\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Add Android Things libraries\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add Android Things include directories\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add the peripheral manager source to the build\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# USBPLAT is used in mraa.c to decide whether to attempt to load sub-platforms\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Loading an FTDI platform extender library using dlopen requires\n\n# mraa to link against libdl.  Mraa does NOT link directly to the\n\n# FT4222 shim library.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# The FTDI4222 shim includes libft4222.h (which includes ftd2xx.h), make sure\n\n# both exist if building the FTDI4222 shim library\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# autogenerated version file\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CPP class headers\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# C header files\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# CPP common header\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Under MSYS we have to put our generated DLL into bin, otherwise it's not picked up\n",
        "Line" : 321,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "src/arm/CMakeLists.txt" : {
      "ObjectId" : "4d3c2476be1a0cef2a520c6b002a1b520a8317a7",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/firmata/CMakeLists.txt" : {
      "ObjectId" : "8ebc4330f6ef53e5d88d62060bbabc337780c855",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/grovepi/CMakeLists.txt" : {
      "ObjectId" : "80a9c8a3b902e74877e296b3bd6d095582459b35",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/java/CMakeLists.txt" : {
      "ObjectId" : "231c755fa1f9f120b5ccc052ff23707c7f5d9347",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Override the JNI include directory for Android Things since these\n\n# will require an Android-friendly jni.h\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# SWIG treats SWIG_FLAGS as a list and not a string so semicolon seperation is required\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/java/mraajava.pc.cmake" : {
      "ObjectId" : "e234153010ad149916295f460be6c83fb2f7e676",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/javascript/CMakeLists.txt" : {
      "ObjectId" : "25fd3627586059790cedaf7dc065294f7986423b",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SWIG treats SWIG_FLAGS as a list and not a string so semicolon seperation is\n\n# required. This hardcodes V8_VERSION to be <10 but I assume that's not going\n\n# to be a problem for a little while! SWIG uses a padded SWIG_V8 version which\n\n# we hack together from our findnode module.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Node 0.12.x V8 engine major version is '3'.\n\n# Node 2.1.0  V8 engine major version is '4'.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If a CMAKE_INSTALL_PREFIX has NOT been provided, set NODE_MODULE_INSTALL_PATH\n\n# base on the NODE_ROOT_DIR.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If a CMAKE_INSTALL_PREFIX has been provided, set NODE_MODULE_INSTALL_PATH\n\n# relative to the provide install directory.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/javascript/binding.gyp.cmake" : {
      "ObjectId" : "0e95cd925fb19b37d56cd114415f4ad252c5cb0f",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/javascript/package.json.cmake" : {
      "ObjectId" : "dd65a3dc9d89083bb64a8206e38b41cd240acd1d",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mips/CMakeLists.txt" : {
      "ObjectId" : "32c93af4f3c709e0d02f7ec429899f44836508fc",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mock/CMakeLists.txt" : {
      "ObjectId" : "eac1b5935e15749c740d2d94efcaebca2cfdb36c",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mraa.pc.cmake" : {
      "ObjectId" : "33de3af179e9c28d5d18ad0260cd390b6d7ed60e",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/peripheralman/CMakeLists.txt" : {
      "ObjectId" : "27b0599965b7e9cc830747e2e01f65af6e2d4971",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/python/CMakeLists.txt" : {
      "ObjectId" : "e4ed3ef60f2602ee36b7e39ad7b12334c75863aa",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/python/python2/CMakeLists.txt" : {
      "ObjectId" : "41d18b2a8710ac2490125257e53056605bede4be",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/python/python2/docs/CMakeLists.txt" : {
      "ObjectId" : "3dab7b85ec8d0867b0fb2d357720a99a4e3affd3",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configured documentation tools and intermediate build results\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Sphinx cache with pickled ReST documents\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# HTML output directory\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# doc .rst locations\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "src/python/python3/CMakeLists.txt" : {
      "ObjectId" : "5b69bb2d463bbecfa99adc9e5b4cee062a4c50a3",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/uart_ow/CMakeLists.txt" : {
      "ObjectId" : "8ea5bdb0c9673d5a810923f89b366522954f5061",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/usb/CMakeLists.txt" : {
      "ObjectId" : "b7a15ebd922073451c4ff7404acd11e7960754b4",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/usb/ft4222/CMakeLists.txt" : {
      "ObjectId" : "8f535128405bb919f1424b220057a58c5c02fbbe",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Under MSYS we have to put our generated DLL into bin, otherwise it's not picked up\n",
        "Line" : 14,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "src/x86/CMakeLists.txt" : {
      "ObjectId" : "89ccb386a703b75bc1f36aaa1ad1bea5b8f16774",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "a8444adaa00009ba90a11e6aa9d53daddf41e632",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add mraa unit tests\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/mock/CMakeLists.txt" : {
      "ObjectId" : "fa31064b134ae4c6ce847340cac99e7f47320f50",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mock platform tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/unit/CMakeLists.txt" : {
      "ObjectId" : "e6b1d90f8967dd6e3dcd67f9525d461341db9192",
      "LastModified" : "2018-07-30T04:26:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use the IN_LIST operator if available (for gtest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For now, Google Test is NOT required */\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If not found, print a status message and return\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Unit tests - C common header methods\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Unit tests - C++ common header methods\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Unit tests - Test platform extenders (as much as possible)\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Unit tests - test C initio header methods on MOCK platform only\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The initio C++ header requires c++11\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add a target for all unit tests\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "1a5f11d7950e992c239a5345232b5ded1ce951c7",
      "LastModified" : "2018-06-26T19:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME Hack to access mraa internal types used by mraa-i2c\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 42
  },
  "ElapsedTime" : 2459
}