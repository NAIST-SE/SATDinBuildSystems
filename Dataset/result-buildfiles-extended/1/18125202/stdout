{
  "Repository" : "18125202",
  "Revision" : "HEAD",
  "ObjectId" : "7e38821dbac265490f115e163c523a939acda759",
  "CommitTime" : "2018-07-07T10:50:00Z",
  "Files" : {
    "mini18n/CMakeLists.txt" : {
      "ObjectId" : "de932060a473f007ba3151fbbcb3ebfe50db8bca",
      "LastModified" : "2012-05-07T20:05:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mini18n/cmake/windows.cmake" : {
      "ObjectId" : "34b25d686d0d3051f6e57f00d489206e670741ce",
      "LastModified" : "2011-11-22T20:45:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mini18n/doc/CMakeLists.txt" : {
      "ObjectId" : "7ccdfd7896443af4349ef9c4be609f2780a0bae9",
      "LastModified" : "2011-11-22T20:45:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mini18n/example/CMakeLists.txt" : {
      "ObjectId" : "6a4ce44c43b4143bb68adc2f9b9e2b446588f0e2",
      "LastModified" : "2011-11-22T20:45:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mini18n/src/CMakeLists.txt" : {
      "ObjectId" : "3681a50ed9ff6c5a7dca64640782853e6bea100b",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/CMakeLists.txt" : {
      "ObjectId" : "eddc81be9bb92426b719ccb54bf1d027a67ded99",
      "LastModified" : "2016-07-13T15:03:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/CMakeTests/FindFFmpeg.cmake" : {
      "ObjectId" : "51d2eb7286d600529c7f859e8d211d4f99118d7c",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ffmpeg\n\n# Once done this will define\n\n#\n\n#  FFMPEG_FOUND - system has ffmpeg\n\n#  FFMPEG_INCLUDE_DIRS - the ffmpeg include directory\n\n#  FFMPEG_LIBRARIES - Link these to use ffmpeg\n\n#  FFMPEG_DEFINITIONS - Compiler switches required for using ffmpeg\n\n#\n\n#  Copyright (c) 2008 Andreas Schneider <mail@cynapses.org>\n\n#  Modified for other libraries by Lasse Kärkkäinen <tronic>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include this to handle the QUIETLY and REQUIRED arguments\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# show the FFMPEG_INCLUDE_DIRS and FFMPEG_LIBRARIES variables only in the advanced view\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "yabause/CMakeTests/FindGLEW.cmake" : {
      "ObjectId" : "c0bd42969eb0369898b0aa02a91b0c8d6e972709",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGLEW\n\n# --------\n\n#\n\n# Find the OpenGL Extension Wrangler Library (GLEW)\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the :prop_tgt:`IMPORTED` target ``GLEW::GLEW``,\n\n# if GLEW has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   GLEW_INCLUDE_DIRS - include directories for GLEW\n\n#   GLEW_LIBRARIES - libraries to link against GLEW\n\n#   GLEW_FOUND - true if GLEW has been found and can be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "yabause/CMakeTests/FindSDL2.cmake" : {
      "ObjectId" : "b412770f8d63a822c8340b494836781f8dda6912",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 83,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 84,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "yabause/doc/CMakeLists.txt" : {
      "ObjectId" : "ebd9fec1f3f9bf47de0aafaeec790faedab9e691",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/l10n/CMakeLists.txt" : {
      "ObjectId" : "c33f82f17d3ffcf403af56513b8114e86a35ef57",
      "LastModified" : "2016-08-12T22:27:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/CMakeLists.txt" : {
      "ObjectId" : "4bd7730d40aca8a562965e77e871824e477551eb",
      "LastModified" : "2018-05-05T22:42:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# new SCSP\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable SCSP MIDI hooks in sound interface\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# disable strdup warning in MSVC\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# math library\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Bigendian\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# variadic macros\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# gettimeofday\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# floorf\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# _wfopen\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# stricmp/strcasecmp\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# __builtin_bswap16\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# __builtin_bswap32\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# sys/time.h\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find stdint.h\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# 16BPP\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# OpenGL\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# glXGetProcAddress\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# SDL\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# OpenAL\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# OpenSL (Android)\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# mini18n\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# xrandr\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# APPLE // not necessary mac os x, but i don't care ;)\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Visual Studio\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Find DDK\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# Windows ddk\n",
        "Line" : 339,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Find ntddcdrm.h\n",
        "Line" : 344,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Direct X\n",
        "Line" : 362,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Add Winsock if necessary\n",
        "Line" : 425,
        "CharPositionInLine" : 5
      },
      "29" : {
        "Text" : "# SH2 dynamic recompiler\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# c68k\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#TODO cross compile builds m68kmake for the target platform instead\n\n#of the native one, making it impossible to generate the core\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# q68\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# gdb stub\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# *DEBUG\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Network\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Optimized DMA\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# SH2 Trace\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# SH2 UBC\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Yabause Arch\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Warnings defined to know when we're breaking compilation with MSVC\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Turn string format security warnings into errors. Some Linux distros enable this by default and travis-ci, etc. needs a way to catch them\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# this is stupid, but CMake automatic definitions are based on variables...\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 43
    },
    "yabause/src/android/CMakeLists.txt" : {
      "ObjectId" : "fc92f1e3f26bce48cc3eccd91f00ddffec00b873",
      "LastModified" : "2016-08-31T19:15:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/android/android-windows.cmake" : {
      "ObjectId" : "1b9e63defac613c74934331f836cec46503682c0",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/android/arm64-v8a.cmake" : {
      "ObjectId" : "37f3fd7b6819330326bd626af870cb5c450576fa",
      "LastModified" : "2016-09-10T10:41:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/android/armeabi.cmake" : {
      "ObjectId" : "3833a70400b778c4697b118644c3955582ddaf25",
      "LastModified" : "2016-09-10T10:41:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/android/x86.cmake" : {
      "ObjectId" : "da4e48996b8aee335da549c632a5fdea037a3932",
      "LastModified" : "2016-09-10T10:41:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/c68k/CMakeLists.txt" : {
      "ObjectId" : "5287a0fc92a70bad7e2c256fd6b26b61e61d2b7f",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# variadic macros\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "yabause/src/cocoa/CMakeLists.txt" : {
      "ObjectId" : "5fc1bca06353d3c318683174f9b418ccf4a9d1d1",
      "LastModified" : "2016-08-12T22:27:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/dreamcast/CMakeLists.txt" : {
      "ObjectId" : "e76d009e4c23d65fcbb9cd71d203cbad15439f77",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/dreamcast/dreamcast.cmake" : {
      "ObjectId" : "0c39a1b97f0926247184c8e1ed16e4a4443d7bae",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake toolchain file for building Yabause on the Dreamcast\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use the gnu_wrappers for the various GNU utilities\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# KOS Sets this nicely for us.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set some stuff so that it doesn't complain about the lack of a normal looking\n\n# pthreads flag/library for the compiler.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set a flag so we know we're trying to compile for Dreamcast\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "yabause/src/gtk/CMakeLists.txt" : {
      "ObjectId" : "c0d2e4354d85014c9d87732fd836e0c67722b881",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/musashi/CMakeLists.txt" : {
      "ObjectId" : "d1df1b2b92b0a32ef4b7ebdfc38209745ac123bc",
      "LastModified" : "2016-07-03T19:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/play/CMakeLists.txt" : {
      "ObjectId" : "493ecac7f1c8aa8f3eec4134e1cea9db57ec191c",
      "LastModified" : "2016-08-12T22:27:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/qt/CMakeLists.txt" : {
      "ObjectId" : "e299ec2d98c01230cc1ff37ac60ec48375b28675",
      "LastModified" : "2017-01-17T09:45:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Since Qt5's cmake script doesn't set it, we will have to\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# dunno what it does exactly ... but seem required\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# qt resources file\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Windows port libraries\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# resources\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# qt forms\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# pure C headers\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# C headers needing moc\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# C sources\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# APPLE // not necessary mac os x, but i don't care ;)\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "yabause/src/runner/CMakeLists.txt" : {
      "ObjectId" : "d534b819fc39bb449831a86c0ac74e737aa494c1",
      "LastModified" : "2016-08-12T22:27:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "yabause/src/tools/CMakeLists.txt" : {
      "ObjectId" : "a4f676b13b590527758b58dd709805a7005afeef",
      "LastModified" : "2016-08-12T22:27:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C sources\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "yabauseut/CMakeLists.txt" : {
      "ObjectId" : "f2f00ffec4e4ea61135446db4794b025ce968372",
      "LastModified" : "2016-08-12T22:27:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CONFIGURE_FILE(config.h.cmake config.h)\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_dependencies(${PROJECT_NAME} iapetus)\r\n",
        "Line" : 69,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "yabauseut/src/CMakeLists.txt" : {
      "ObjectId" : "c685d316384c8f874c20aedb8c471a47e27ae13e",
      "LastModified" : "2016-08-12T22:27:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 29
  },
  "ElapsedTime" : 1930
}