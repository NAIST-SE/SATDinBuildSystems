{
  "Repository" : "22043399",
  "Revision" : "HEAD",
  "ObjectId" : "bc22626deede683d11a2668121ebbd2d0389a7b8",
  "CommitTime" : "2019-03-18T15:48:01Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "04f6efbaa78e9408c8f335e316f5118b5a7b16aa",
      "LastModified" : "2019-03-02T00:32:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build file - use CMake 3.2 or later to build WDT and its dependencies.\n\n#\n\n# mkdir build; cd build; cmake .. -DBUILD_TESTING=on; make -j\n\n# omit -DBUILD_TESTING=on if you don't want the extra dependencies for\n\n# testing (but testing is good !)\n\n# (at fb:\n\n# cd local; mkdir wdt_build; cd wdt_build\n\n# cmake31 ~/fbcode/wdt -DFOLLY_SOURCE_DIR=$HOME/fbcode -DBUILD_TESTING=on\n\n# make -j\n\n# )\n\n#\n\n#  Copyright (c) 2014-present, Facebook, Inc.\n\n#  All rights reserved.\n\n#\n\n#  This source code is licensed under the BSD-style license found in the\n\n#  LICENSE file in the root directory of this source tree. An additional grant\n\n#  of patent rights can be found in the PATENTS file in the same directory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# There is no C per se in WDT but if you use CXX only here many checks fail\n\n# Version is Major.Minor.YYMMDDX for up to 10 releases per day (X from 0 to 9)\n\n# Minor currently is also the protocol version - has to match with Protocol.cpp\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On MacOS this requires the latest (master) CMake (and/or CMake 3.1.1/3.2)\n\n# WDT itself works fine with C++11 (gcc 4.8 for instance) but more recent folly\n\n# started to require C++14, so you can either get an older snapshot of folly\n\n# and set \"11\" below or use this:\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# somehow 'option' for this doesn't seeem to work/I don't know how to make it\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMake default behavior should be to set rpath when needed (non system install)\n\n# it's not so let's set this for now:\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Optimized by default\n\n# TODO: This doesn't seem to work / sets default to \"\" instead of Release...\n\n# set(CMAKE_BUILD_TYPE Release CACHE String \"build type\")\n\n# So hardcoding for now:\n\n#set(CMAKE_BUILD_TYPE Debug)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"-msse4.2 -mpclmul -Wextra -Wsign-compare -Wunused-variable\")\n\n#set(CMAKE_CXX_FLAGS \"-msse4.2 -mpclmul -Wextra -Wsign-compare -Wunused-variable -Wconversion -Wsign-conversion\")\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check that we have the Folly source tree\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for folly - TODO: this doesn't work well for relative paths\n\n# (because of relative to build dir vs relative to source tree for -I)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The part of folly that isn't pure .h and we use:\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# WDT's library proper - comes from: ls -1 *.cpp | grep -iv test\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Source files that depend on gflags and provide flags -> options init\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Folly uses boost system and filesystem\n\n#set(Boost_USE_STATIC_LIBS on)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We use std:: threads\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# this will set ${CMAKE_THREAD_LIBS_INIT} (ie pthreads)\n",
        "Line" : 128,
        "CharPositionInLine" : 22
      },
      "15" : {
        "Text" : "# double-conversion\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Glog\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Gflags\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# OpenSSL's crypto lib\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# You can also add jemalloc to the list if you have it/want it\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Must be last to avoid link errors\n",
        "Line" : 152,
        "CharPositionInLine" : 28
      },
      "21" : {
        "Text" : "# What we need to build the part of folly we use:\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# For WDT itself:\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# C based check (which fail with the c++ setting thereafter...)\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# was: check_library_exists(rt clock_gettime \"\" FOLLY_HAVE_CLOCK_GETTIME)\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#globals are evil/ugly\n",
        "Line" : 170,
        "CharPositionInLine" : 43
      },
      "26" : {
        "Text" : "#globals are evil/ugly\n",
        "Line" : 173,
        "CharPositionInLine" : 43
      },
      "27" : {
        "Text" : "# Needed until Cmake issue #15361 is addressed\n\n# All the check_function_exists should be before this line\n\n# or else they will not work'\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#check_function_exists(clock_gettime FOLLY_HAVE_CLOCK_GETTIME)\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Now record all this :\n\n# Folly's:\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Wdt's config/version\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Malloc stuff  tied to not supporting weaksympbols\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Order is important - inside fb we want the above\n\n# folly-config.h to be picked up instead of the fbcode one\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "### Install rules\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "### Install header files\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Find the . files in the root directory\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Install the .h files in the util with directory structure maintained\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# wcp script\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "### Everything below is about testing (and not required to create wdt/wdt)\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Extra code that we use in tests\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# GTest\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Disable install step\n",
        "Line" : 264,
        "CharPositionInLine" : 23
      },
      "42" : {
        "Text" : "# Doesn't change often\n",
        "Line" : 265,
        "CharPositionInLine" : 22
      },
      "43" : {
        "Text" : "#CONFIGURE_COMMAND \"\" # skip\n\n#BUILD_COMMAND \"\" # skip\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Specify include dir for gtest\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "#  add_library(gmock_all STATIC EXCLUDE_FROM_ALL\n\n#   ${GMOCK_PREFIX}/src/gmock/gtest/src/gtest-all.cc\n\n#   ${GMOCK_PREFIX}/src/gmock/gmock-all.cc\n\n#   ${GMOCK_PREFIX}/src/gmock/gmock_main.cc)\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# ${BINARY_DIR}/libgtest.a works everywhere except xcode...\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# so ugly weird hack generating warnings about unknown dir for now:\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#\"-L ${BINARY_DIR}/googlemock/gtest -L ${BINARY_DIR}/Debug -lgtest\"\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# TODO: make a macro/function to add tests in 1 line instead of 3\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# WDT testing/benchmarking code\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Must be last to avoid link errors\n",
        "Line" : 319,
        "CharPositionInLine" : 30
      },
      "52" : {
        "Text" : "# Must be last to avoid link errors\n",
        "Line" : 324,
        "CharPositionInLine" : 30
      },
      "53" : {
        "Text" : "# Regular tests\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Doesn't work on a mac:\n\n#  add_test(NAME WdtStdinManifestAndUrl COMMAND\n\n#    \"${CMAKE_CURRENT_SOURCE_DIR}/test/wdt_stdin_test.sh\")\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 55
    },
    "defs.bzl" : {
      "ObjectId" : "f3f6a97c75ccdb0c726454428492c8edbff477b5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 1,
    "BAZEL" : 1
  },
  "ElapsedTime" : 647
}