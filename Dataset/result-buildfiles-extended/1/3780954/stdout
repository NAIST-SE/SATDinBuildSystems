{
  "Repository" : "3780954",
  "Revision" : "HEAD",
  "ObjectId" : "ef149df1e201256c3b5e32fdd14761ef5681b11d",
  "CommitTime" : "2019-03-19T01:14:17Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "e8e1a93e3531f6833f766c00f789ea5245e6f0c1",
      "LastModified" : "2018-12-25T15:11:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Prevents Make from removing intermediary files on failure\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable built-in rules\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Userspace flags\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n\n# C library objects from libc/ C sources (and setjmp, which is assembly)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n\n#  APPS      = C sources from apps/\n\n#  APPS_X    = binaries\n\n#  APPS_Y    = generated makefiles for binaries (except init)\n\n#  APPS_SH   = shell scripts to copy to base/bin/ and mark executable\n\n#  APPS_SH_X = destinations for shell scripts\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##\n\n# LIBS   = C sources from lib/\n\n# LIBS_X = Shared libraries (.so)\n\n# LIBS_Y = Generated makefiles for libraries\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##\n\n# Files that must be present in the ramdisk (apps, libraries)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Kernel / module flags\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##\n\n# Kernel objects from kernel/ C sources\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##\n\n# Kernel objects from kernel/ assembly sources\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Kernel\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##\n\n# Symbol table for the kernel. Instead of relying on getting\n\n# the symbol table from our bootloader (eg. through ELF\n\n# headers provided via multiboot structure), we have a dedicated\n\n# object that build with all the symbols. This allows us to\n\n# build the kernel as a flat binary or load it with less-capable\n\n# multiboot loaders and still get symbols, which we need to\n\n# load kernel modules and link them properly.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##\n\n# version.o should be rebuilt whenever the kernel changes\n\n# in order to get fresh git commit hash information.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modules\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##\n\n# Modules need to be installed on the boot image\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Root Filesystem\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# C Library\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Userspace Linker/Loader\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Shared Libraries\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Init (static)\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Userspace applications\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Ramdisk\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# CD image\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Boot loader\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##\n\n# FAT EFI payload\n\n# This is the filesystem the EFI loaders see, so it must contain\n\n# the kernel, modules, and ramdisk, plus anything else we want\n\n# available to the bootloader (eg., netinit).\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##\n\n# For EFI, we build two laoders: ia32 and x64\n\n# We build them as ELF shared objects and the use objcopy to convert\n\n# them to PE executables / DLLs (as expected by EFI).\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ia32\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# x64\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# BIOS loader\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "##\n\n# Optional Extensions\n\n#\n\n# These optional extension libraries require third-party components to build,\n\n# but allow the native applications to make use of functionality such as\n\n# TrueType fonts or PNG images. You must have the necessary elements to build\n\n# these already installed into your sysroot for this to work.\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Freetype: Terminal text rendering backend\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Cairo: Compositor rendering backend\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Other extra stuff\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1033
}