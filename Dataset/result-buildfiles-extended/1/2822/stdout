{
  "Repository" : "2822",
  "Revision" : "HEAD",
  "ObjectId" : "05add5863ebc9719bac7e09b80d01ba0d412bfd2",
  "CommitTime" : "2019-04-17T22:07:27Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4bb704b16a67e65cd7305425b6419c42b85ee90c",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remove this to get package names that are formatted as\n\n# ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find any version present.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find a specific version.\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Notify the user what paths and LLVM version we are using\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# LLVM5.x on Windows can include \"$(Configuration)\" in the path;\n\n# fix this so we can use the paths right away.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Require C++11 for everything.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Export all symbols\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LLVM doesn't appear to expose --system-libs via its CMake interface,\n\n# so we must shell out to llvm-config to find this info\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# strip whitespace from start & end\n",
        "Line" : 77,
        "CharPositionInLine" : 66
      },
      "9" : {
        "Text" : "# convert into a list\n",
        "Line" : 78,
        "CharPositionInLine" : 72
      },
      "10" : {
        "Text" : "# It's theoretically possible that this could be legitimately empty,\n\n# but in practice that doesn't really happen, so we'll assume it means we\n\n# aren't configured correctly.\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Check LLVM\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Need to convert to CMake path so that backslashes don't get\n\n# interpreted as an escape.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# LLVM5.x on Windows can include \"$(Configuration)\" in the path;\n\n# fix this so we can use the paths right away.\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Check LLVM tools exist\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check reported LLVM version\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# AMDGPU target is WIP\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Needed for 'make distrib' to properly fill in the .tpl files\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set warnings globally\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# disable \"signed/unsigned mismatch\"\n\n# disable \"decorated name length exceeded, name was truncated\"\n\n# disable \"conversion from 'size_t' to 'int', possible loss of data\"\n\n# forcing value to bool 'true' or 'false' (performance warning)\n",
        "Line" : 233,
        "CharPositionInLine" : 32
      },
      "20" : {
        "Text" : "# These tools are needed by several subdirectories\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# disable irrelevant \"POSIX name\" warnings\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Look for OpenMP\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# For in-tree builds, we need to set the input variables for halide.cmake\n\n# to specific values, rather than relying on HALIDE_DISTRIB_DIR to be set correctly.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Option to enable/disable assertions\n\n# -----------------------------------------------------------------------------\n\n# Filter out definition of NDEBUG definition from the default build\n\n# configuration flags.  # We will add this ourselves if we want to disable\n\n# assertions.\n\n# FIXME: Perhaps our own default ``cxx_flags_overrides.cmake`` file would be better?\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#message(\"Original (${VAR_TO_MODIFY}) is ${${VAR_TO_MODIFY}} replacement is ${replacement}\")\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Make a target that aggregates a number of other targets;\n\n# this can be used to group builds (e.g. \"build_tests\")\n\n# or to execute targets (by adding executable custom-commands);\n\n# the latter is used to execute test targets.\n\n#\n\n# Note that the target will be excluded from the \"all\" target, so it won't\n\n# be built by \"make all\" by default.\n\n#\n\n# TODO: this is intended to eventually replicate all of the interesting test targets\n\n# from our Make build, but not all are implemented yet:\n\n# TODO(srj): add test_aotcpp_generators support\n\n# TODO(srj): add test_valgrind variant\n\n# TODO(srj): add test_avx512 variant\n\n# TODO(srj): add test_python variant\n\n# TODO(srj): add test_apps variant\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# add_custom_target(\"${BUILD_NAME}\" DEPENDS \"${TARGET}\")\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# It's probably a custom target or a group: just depend on it.\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Only groups that are defined in *this file* will have projects reliably\n\n# defined for them in MSVC builds; pre-define the targets we want to be available\n\n# here to ensure that happens.\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Note documentation is not built by default, the user needs to build the \"doc\" target\n",
        "Line" : 408,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# ------------------------------------------------\n\n# install\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# ---- Tools\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# ---- README\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ---- CMake\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ---- halide_config\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Extract filename\n",
        "Line" : 474,
        "CharPositionInLine" : 45
      },
      "37" : {
        "Text" : "# Strip .tpl extension\n",
        "Line" : 475,
        "CharPositionInLine" : 55
      },
      "CommentCount" : 38
    },
    "Makefile" : {
      "ObjectId" : "b34bcea985d034fcd1e49899895a3b973893f3cf",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# 'make' builds libHalide.a, the internal test suite, and runs the internal test suite\n\n# 'make run_tests' builds and runs all the end-to-end tests in the test subdirectory\n\n# 'make {error,performance}_foo' builds and runs test/{...}/foo.cpp for any\n\n#     cpp file in the corresponding subdirectory of the test folder\n\n# 'make correctness_foo' builds and runs test/correctness/foo.cpp for any\n\n#     cpp file in the correctness/ subdirectoy of the test folder\n\n# 'make test_apps' checks some of the apps build and run (but does not check their output)\n\n# 'make time_compilation_tests' records the compile time for each test module into a csv file.\n\n#     For correctness and performance tests this include halide build time and run time. For\n\n#     the tests in test/generator/ this times only the halide build time.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume we are building for the MinGW environment\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# let's assume \"normal\" UNIX such as linux\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Anything that we us install_name_tool on needs these linker flags\n\n# to ensure there is enough padding for install_name_tool to use\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO: this is suboptimal hackery; we should really add the relevant\n\n# support libs for the sanitizer(s) as weak symbols in Codegen_LLVM.\n\n# (Note also that, in general, most Sanitizers work most reliably with an all-Clang\n\n# build system.)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Note that attempting to use TSAN with the JIT can produce false positives\n\n# if libHalide is not also compiled with TSAN enabled; we tack the relevant\n\n# flag onto OPTIMIZE here, but that's really only effective if you ensure\n\n# to do a clean build before testing. (In general, most of the Sanitizers\n\n# only work well when used in a completely clean environment.)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All WITH_* flags are either empty or not-empty. They do not behave\n\n# like true/false values in most languages.  To turn one off, either\n\n# edit this file, add \"WITH_FOO=\" (no assigned value) to the make\n\n# line, or define an environment variable WITH_FOO that has an empty\n\n# value.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# AMDGPU target is WIP\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If HL_TARGET or HL_JIT_TARGET aren't set, use host\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO add bitcode files\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is required on some hosts like powerpc64le-linux-gnu because we may build\n\n# everything with -fno-exceptions.  Without -funwind-tables, libHalide.so fails\n\n# to propagate exceptions and causes a test failure.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add a rpath to the llvm used for linking, in case multiple llvms are\n\n# installed. Bakes a path on the build system into the .so, so don't\n\n# use this config for distributions.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The tutorials contain example code with warnings that we don't want\n\n# to be flagged as errors, so the test flags are the tutorial flags\n\n# plus our warning flags.\n\n# Also allow tests, via conditional compilation, to use the entire\n\n# capability of the CPU being compiled on via -march=native. This\n\n# presumes tests are run on the same machine they are compiled on.\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# gcc 4.8 fires a bogus warning on old versions of png.h\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Someone with an osx box with cuda installed please fix the line below\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Compiling the tutorials requires libpng\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Workaround for libpng-config pointing to 64-bit versions on linux even when we're building for 32-bit\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Workaround brew Cellar path for libpng-config output.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# There's no libjpeg-config, unfortunately. We should look for\n\n# jpeglib.h one directory level up from png.h . Also handle\n\n# Mac OS brew installs where libpng-config returns paths\n\n# into the PNG cellar.\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# We're building into the current directory $(CURDIR). Find the Halide\n\n# repo root directory (the location of the makefile)\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Allow the user to specify PYBIND11_PATH as a relative path,\n\n# but canonicalize it to an absolute path since the sub-makefile\n\n# we call may have a different working dir.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The following directories are all relative to the output directory (i.e. $(CURDIR), not $(SRC_DIR))\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Keep this list sorted in alphabetical order.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The externally-visible header files that go into making Halide.h.\n\n# Don't include anything here that includes llvm headers.\n\n# Keep this list sorted in alphabetical order.\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Add the Hexagon simulator to the rpath on Linux. (Not supported elsewhere, so no else cases.)\n",
        "Line" : 835,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Determine the relevant object files from llvm with a dummy\n\n# compilation. Passing -t to the linker gets it to list which\n\n# object files in which archives it uses to resolve\n\n# symbols. We only care about the libLLVM ones.\n",
        "Line" : 849,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# if the list has changed since the previous build, or there\n\n# is no list from a previous build, then delete any old object\n\n# files and re-extract the required object files\n",
        "Line" : 855,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "#@CMAKE_BINARY_DIR@#$(shell pwd)#g\" \\\n\t     -e \"s#@CMAKE_SOURCE_DIR@#$(shell pwd)#g\" \\\n\t    $< > $@\n",
        "Line" : 1920,
        "CharPositionInLine" : 11
      },
      "28" : {
        "Text" : "# This is a specialized 'install' for users who need Hexagon support libraries as well.\n",
        "Line" : 1949,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We need to capture the system libraries that we'll need to link\n\n# against, so that downstream consumers of our build rules don't\n\n# have to guess what's necessary on their system; call\n\n# llvm-config and capture the result in config files that\n\n# we include in our distribution.\n",
        "Line" : 1961,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30,
      "Errorlog" : "line 58:89 token recognition error at: '\\1'\nline 59:89 token recognition error at: '\\1'\nline 63:165 token recognition error at: '\\1'\nline 329:127 token recognition error at: '\\1'\nline 337:96 token recognition error at: '\\1'\nline 337:132 token recognition error at: '\\1'\nline 865:28 token recognition error at: '\"N;s/[()]/ /g;s/\\n /\\n/;s/\\([0-9]*\\)\\n\\([^ ]*\\) \\([^ ]*\\)/ar x \\2'\nline 865:94 token recognition error at: '\\3'\nline 865:101 token recognition error at: '\\3'\nline 865:109 token recognition error at: '\\1'\nline 865:112 token recognition error at: '\\3'\n"
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "3431c0d9ffeceaed68b5cf3cf2e26a6e5b88efc0",
      "LastModified" : "2018-04-09T18:09:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sample apps, so we can disable some of the more pedantic warnings\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# conversion from 'type1' to 'type2', possible loss of data.\n",
        "Line" : 7,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# Don't add this one; it's deliberately standalone\n\n# add_subdirectory(wavelet)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apps/HelloAndroid/build.xml" : {
      "ObjectId" : "52a06f18457053b320448ec45df8f48467e4b828",
      "LastModified" : "2016-11-16T23:33:12Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "apps/HelloAndroidCamera2/build.xml" : {
      "ObjectId" : "e5b2cc3c63fe7ca68836254998608d065579ab97",
      "LastModified" : "2016-11-18T20:07:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "apps/HelloAndroidGL/build.xml" : {
      "ObjectId" : "1e79c7ee52fa62cd59496b04a44ef2af7bb52d92",
      "LastModified" : "2016-11-16T23:33:12Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "apps/HelloMatlab/Makefile" : {
      "ObjectId" : "d58699c4b64bd79df63f91b7857edda9c0b9a8ad",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/auto_viz/Makefile" : {
      "ObjectId" : "162111339f17216f5cbffc8880301236251994e7",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# make viz_naive\n\n# make viz_lessnaive\n\n# make viz_complex\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/bilateral_grid/CMakeLists.txt" : {
      "ObjectId" : "e5a6cb07368112dfa4ead2056cc4a35925023bf5",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/bilateral_grid/Makefile" : {
      "ObjectId" : "0644ee3ddc3c1f7db240a21993cdaac7f49380cf",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/blur/CMakeLists.txt" : {
      "ObjectId" : "b95d61abb85ad1686fa9713e07b5c8fcf3eac8af",
      "LastModified" : "2018-01-03T18:48:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generator\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Final executable\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/blur/Makefile" : {
      "ObjectId" : "fa48d2c0e63ce030f6abb27e40e6667d2a7fce91",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# g++ on OS X might actually be system clang without openmp\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -O2 is faster than -O3 for this app (O3 unrolls too much)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/c_backend/CMakeLists.txt" : {
      "ObjectId" : "38258707b6d371e56c0ed5c57cbee8ef9e6145f6",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generator(s)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Final executable(s)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/c_backend/Makefile" : {
      "ObjectId" : "9cca6abb308ef77356ed0aa6cefa062bf4ab0631",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/camera_pipe/CMakeLists.txt" : {
      "ObjectId" : "1ccc6a86f213e910a643464328eba278e3cef510",
      "LastModified" : "2018-02-14T21:58:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Building this app for x86 in VS seems to have issues\n\n# https://github.com/halide/Halide/pull/2740\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "apps/camera_pipe/Makefile" : {
      "ObjectId" : "a7d53a1fb23c16deca33efbe33955d566f15bffd",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/conv_layer/CMakeLists.txt" : {
      "ObjectId" : "7f28d1dbdca4d2c8a9c4eeb54dd0e65347a48d52",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/conv_layer/Makefile" : {
      "ObjectId" : "dc3f42b2a56508daeabcdba671c61f8b15ed036d",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/cuda_mat_mul/Makefile" : {
      "ObjectId" : "b08a02e1c572c9f8d355363d4735c26b7dafb05e",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/fft/Makefile" : {
      "ObjectId" : "d11a56829c37ae755d50a5d38aae49c4dbd51cbe",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Use a small stack, to stress out the compiler and act as a canary\n\n# for stack bloat problems. This can be accomplished with a linker\n\n# flag on os x, and testing this on one platform is sufficient.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate four AOT compiled FFT variants. Forward versions have gain set to 1 / 256.0\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ensure these are run sequentially and not in parallel\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apps/glsl/CMakeLists.txt" : {
      "ObjectId" : "cb472aa5bdda9cb3bf3ed50f4b080100baa77687",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generators\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Provide a version of halide_opengl_create_context for Windows\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use vendor libraries even when legacy libs are also available\n\n# see: https://cmake.org/cmake/help/git-stage/policy/CMP0072.html\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generators\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Final executable\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "apps/glsl/Makefile" : {
      "ObjectId" : "2dd6b57c3fb45e67ed093491cbb81f1647fa67cb",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Note: using the -g flag in conjunction with the -debug Feature on OSX may\n\n# produce \"failed to insert symbol\" warnings at link time; this is annoying but harmless.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/hexagon_benchmarks/Makefile" : {
      "ObjectId" : "34a5370180fcb2075f87d45629a5f034b9ad2c18",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/hexagon_dma/Makefile" : {
      "ObjectId" : "32a8600862f21fc93d02344a4e20666f20ace1b4",
      "LastModified" : "2019-01-10T18:08:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Ensure that make with no arguments makes the right thing\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This app requires a separate toolchain to be built from the Android NDK,\n\n# using the make-standalone-toolchain.sh script:\n\n#$ build/tools/make-standalone-toolchain.sh --arch=arm64 --platform=android-21 --install-dir=$ANDROID_ARM64_TOOLCHAIN\n\n#$ build/tools/make-standalone-toolchain.sh --arch=arm --platform=android-21 --install-dir=$ANDROID_ARM_TOOLCHAIN\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#to run the specialized tests optional arguments are\n\n#$(BIN)/process_yuv_linear_basic-host  width height schedule {where pipeline schedule is: basic, fold, async, split, split_async} dma_direction {ro, rw}\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude RO tests by default, unless explicitly requested via commandline SCHEDULE_ALL=n, where n is number\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#################################)\n",
        "Line" : 25,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : "#################################)\n",
        "Line" : 27,
        "CharPositionInLine" : 7
      },
      "6" : {
        "Text" : "# un-comment to enable compiling with Address Sanitizer (ASAN)\n\n#CXXFLAGS += -fsanitize=address\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# default is no debug pipeline, for debugging must request via commandline DBG=n, where n is any number\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#################################)\n",
        "Line" : 39,
        "CharPositionInLine" : 7
      },
      "9" : {
        "Text" : "#################################)\n",
        "Line" : 41,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 10
    },
    "apps/interpolate/CMakeLists.txt" : {
      "ObjectId" : "de9e34cf600fc1ca5932c484e2b504a10974e388",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/interpolate/Makefile" : {
      "ObjectId" : "1548656cdbe3fc21a5dd2696514ea71f8e0989bb",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/lens_blur/CMakeLists.txt" : {
      "ObjectId" : "6b2353551d1cb1706a90a18610182df8d35c9089",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/lens_blur/Makefile" : {
      "ObjectId" : "f8c67334b7c84f3e58a55e807918f16664dd4049",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/linear_algebra/CMakeLists.txt" : {
      "ObjectId" : "132c80e6a1ba801ed78b2cf246b27ec8ca83b584",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This could be made to use any number of blas header files\n\n#  or we could supply our own cblas.h\n\n# Another option is to use a more robust FindBLAS.cmake than the one\n\n#  distributed with cmake\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# enables openblas-via-homebrew-on-mac\n",
        "Line" : 15,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "# XXX\n\n#  OpenBLAS seems to provide cblas symbols\n\n#  Atlas requires also linking against its provided libcblas for cblas symbols\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# XXX fragile\n",
        "Line" : 27,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "# TODO\n\n# there are more vendors we could add here that support the cblas interface\n\n# there seem to be better FindBLAS.cmake scripts floating around that also find\n\n#  *_INCLUDE_DIR\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "apps/linear_algebra/Makefile" : {
      "ObjectId" : "46fc20042d6776bab6dad6d7a031befcd5bac471",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ATLAS should be built and installed locally to get the best performance.\n\n# It is designed to automatically tune its performance to your machine during\n\n# the build. Get the source code here: http://math-atlas.sourceforge.net/,\n\n# then set the flags below to point to your local build of ATLAS.\n\n#\n\n# For example:\n\n# ATLAS_FLAGS ?= -DUSE_ATLAS -I/opt/ATLAS/include\n\n# ATLAS_LIBS ?= -L/opt/ATLAS/lib -lptcblas -latlas\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default use whatever ATLAS is installed, so that this at least builds.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that we deliberately build the generators with the no_runtime flag;\n\n# this provides a slight build speed increase (since we don't have to redundantly\n\n# include the runtime code in each generator) with the extra complication that we\n\n# must explicitly build and link the halide runtime separately.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Large powers of two are a pathological case for the cache, so avoid\n\n# them for the benchmarks.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This can use any of the generators; pick an arbitrary one\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "apps/linear_algebra/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "461232e6bf3b664b0c479eee2149ce51e0805834",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# XXX\n\n#  if we don't set these flags, we get a major slowdown due to denormal numbers.\n\n#  Even if the halide generators emit code that does this, we still want a fair\n\n#   comparison against the BLAS libraries with these flags set.\n\n#  If these flags are not set, due to randomly generated data between 0..1,\n\n#   some benchmarks will have inconsitent timings (sscal dscal)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# explicitly set Flush-To-Zero (FTZ) and Denormals-Are-Zero (DAZ) flags\n\n# this definition affects macros.h\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Due to slowdowns, this merits a warning rather than merely a status\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Large powers of two are a pathological case for the cache, so avoid\n\n# them for the benchmarks.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Creates high level targets\n\n#  ${BLAS_LEVEL}_benchmarks\n\n#  ${BLAS_LEVEL}_benchmarks\n\n#  ${BLAS_LEVEL}_benchmarks\n\n# as well as\n\n#  ${BLAS}_${BLAS_LEVEL}_benchmark\n\n#  ${BLAS}_${BLAS_LEVEL}_benchmark_${BENCHMARK}_${BENCHMARK_SIZE}\n\n#  ${BLAS_LEVEL}_benchmark_${BENCHMARK}\n\n#  ${BLAS_LEVEL}_benchmark_${BENCHMARK}_${BENCHMARK_SIZE}\n\n# e.g.\n\n#  halide_l1_benchmark_scopy_16\n\n# XXX unfortunately, the output is noisy. good solution?\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#message(STATUS \"adding target ${BLAS_LEVEL_TARGET}\")\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#message(STATUS \"adding target ${BENCHMARK_TARGET}\")\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#message(STATUS \"adding target ${BENCHMARK_SIZE_TARGET}\")\n",
        "Line" : 123,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#message(STATUS \"adding target ${BLAS_BENCHMARK_TARGET}\")\n",
        "Line" : 128,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "#message(STATUS \"adding target ${BLAS_LEVEL_BENCHMARK_TARGET}\")\n",
        "Line" : 133,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "#message(STATUS \"adding target ${BLAS_BENCHMARK_SIZE_TARGET}\")\n",
        "Line" : 137,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "apps/linear_algebra/src/CMakeLists.txt" : {
      "ObjectId" : "f22888cabff78708ae62244297fa599ae9721a5b",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define all our generators\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Function to reduce boilerplate\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# And now all the instantiaons\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apps/linear_algebra/tests/CMakeLists.txt" : {
      "ObjectId" : "d7def1e7c554967d20915f1d769750b16e6e09be",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# XXX fragile\n",
        "Line" : 22,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 1
    },
    "apps/linear_blur/CMakeLists.txt" : {
      "ObjectId" : "8f038899aba8ec491c657f366b6610d4ccbc1108",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For usage as a stub (via linear_blur), we don't need to specify\n\n# the type-and-dims explicitly, but for ahead-of-time compilation\n\n# (as used by run_linear_blur), the inputs must have\n\n# concrete type and dimensions. (The outputs must also have concrete\n\n# type-and-dimensions, too, but those can be inferred from the \n\n# outputs as filled in by user code.)\n",
        "Line" : 8,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : "# Emit the .stmt and .schedule files so we can \n\n# examine how the auto-scheduled results look\n",
        "Line" : 22,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 2
    },
    "apps/local_laplacian/CMakeLists.txt" : {
      "ObjectId" : "285b0a6ac3e624f2cdd680dd13a441241e7cbe93",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/local_laplacian/Makefile" : {
      "ObjectId" : "f7ac340fdc842da217ef77ee855c5df50b87e934",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Build rules for generating a visualization of the pipeline using HalideTraceViz\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/nl_means/CMakeLists.txt" : {
      "ObjectId" : "e746fc10b479a916a5d4d554434b7971890bd112",
      "LastModified" : "2017-11-30T17:55:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/nl_means/Makefile" : {
      "ObjectId" : "9350e394819d7695663d5a6ee6e91876dabe026b",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/nn_ops/Makefile" : {
      "ObjectId" : "6750f5d26581324d0ecec105043a12e1e24bdc6d",
      "LastModified" : "2018-12-11T17:49:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/onnx/Makefile" : {
      "ObjectId" : "c126c1d676c2399b708be710820bb3ffa2343094",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copy onnx.proto to $(BIN)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# protoc generates two files\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Simple unit test\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apps/opengl_demo/Makefile" : {
      "ObjectId" : "9018221ac421e4b7a233d83cacafa39044ffbc85",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This could be more DRY using some Makefile magic, but for the example\n\n# app will try to maximize clarity by making most rules explicit\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where to find Halide.\n\n#\n\n# If you are building this demo using Halide installed systemwide (e.g. on\n\n# OS X installed via homebrew), you can set:\n\n#\n\n#  HALIDE_TOOLS_DIR = /usr/local/share/halide/tools\n\n#  HALIDE_LIB_PATH =\n\n#  HALIDE_INC_PATH =\n\n#\n\n# These settings are for building within the Halide source tree:\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Platform-specific settings.\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are for OS X:\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# These are for Ubuntu Linux\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\n\n# General build settings.  Should be good cross-platform.\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Output directory.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Explicitly list the dependency on the generated filter header files,\n\n# to ensure that they are created first.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Rules to AOT-compile the halide filter for both CPU and OpenGL; the\n\n# compiled filters depend on $(BIN)/sample_filter.generator, which in turn\n\n# depends on the halide filter source in sample_filter.cpp\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Build in subdir using auto-dependency mechanism\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "apps/openglcompute/Makefile" : {
      "ObjectId" : "6f41e72031e0a7bae597898c96625a3fff3bb31a",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/openglcompute/build.xml" : {
      "ObjectId" : "1773fe07f12348e3e6030386a1a018d0b94b4826",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " version-tag: 21 ",
        "Line" : 18,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 1
    },
    "apps/resize/CMakeLists.txt" : {
      "ObjectId" : "dcca23eb65444849f645086fe64b5b65adce5cc8",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Building this app for x86 in VS seems to have issues\n\n# https://github.com/halide/Halide/pull/2740\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Make the small input used to test upsampling with our highest-quality downsampling method\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make a resize_all target that will run resize for each variant\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apps/resize/Makefile" : {
      "ObjectId" : "2299f5182946daac8714c3afe547ff52a15bd26f",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Make the small input used to test upsampling with our highest-quality downsampling method\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/resnet_50/Makefile" : {
      "ObjectId" : "e2eb7bde19a721d275bec10b2e8c8d31c3b4a0fa",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/simd_op_check/Makefile" : {
      "ObjectId" : "ffa5ec8084a2042a4a2b27f1b129d0fa89f07b8b",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Use the build/tools/make-standalone-toolchain.sh script inside the\n\n# android ndk to make a standalone toolchain to use for this app.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 34:65 token recognition error at: '\", &'$${n}'},'; done >> filters.h\\n\\techo '{NULL, NULL}};' >> $(BIN)/$*/filters.h\\n\\n$(BIN)/driver-%: driver.cpp $(BIN)/%/filters.h\\n\\t@mkdir -p $(@D)\\n\\t$(CXX-$*) $(CXXFLAGS-$*) -I ../../include -O3 -I $(BIN)/$* driver.cpp $(BIN)/$*/test_*.o $(BIN)/$*/simd_op_check_runtime.o -o $@ $(LDFLAGS-$*) $(HALIDE_SYSTEM_LIBS)\\n\\nclean:\\n\\trm -rf $(BIN)\\n\u0000'\n"
    },
    "apps/stencil_chain/CMakeLists.txt" : {
      "ObjectId" : "9aac3645cec2f281dda62c4f0d074f234ceb7e6a",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/stencil_chain/Makefile" : {
      "ObjectId" : "1d24b39d27bc7b9c92128210a00c787df2cb5def",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "apps/wavelet/CMakeLists.txt" : {
      "ObjectId" : "038f3b37124fb44f2de0345224cfb176fba16e0e",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# NOTE: Unlike all other CMakeLists.txt in the apps/ folder, this\n\n# is deliberately intended to be standalone (not included from the toplevel)\n\n# in order to show the minimum scaffolding necessary to use ahead-of-time\n\n# Generators in a simple app.\n\n#\n\n# To use:\n\n# mkdir cmake_build && cd cmake_build && cmake .. && make -j8 && ./bin/wavelet ../../images/gray.png .\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# halide.cmake requires that HALIDE_DISTRIB_DIR be set to point to the Halide distribution folder we use.\n\n# This assumes it's built at the toplevel via 'make distrib' (ironically, the CMake build isn't\n\n# yet capable of producing a distrib folder).\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# halide.cmake defaults to using the shared-library version of libHalide;\n\n# we can make it prefer the static-library version by setting this:\n\n# set(HALIDE_DISTRIB_USE_STATIC_LIBRARY TRUE)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define the wavelet app\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Define a halide_library() for each generator we have, and link each one into wavelet\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "apps/wavelet/Makefile" : {
      "ObjectId" : "8133d6bead93c059b97e609b08f0e0ef30ad587d",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# If HL_TARGET isn't set, use host\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default, %.generator is produced by building %_generator.cpp\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# By default, %.a/.h are produced by executing %.generator\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Don't auto-delete the generators.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "halide.cmake" : {
      "ObjectId" : "8ab402b65e9655e338ed9e913e6438e3acde0190",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------- Public Functions.\n\n# These are all documented in README_cmake.md.\n\n#\n\n# Note that certain CMake variables may need to be set correctly to use these rules:\n\n#\n\n# - If you are using a Halide distribution, simply set HALIDE_DISTRIB_DIR\n\n# to the path to the distrib directory.\n\n#\n\n# - More complex usages (mainly, internal-to-Halide users) may, instead, set some combination\n\n# of HALIDE_TOOLS_DIR, HALIDE_INCLUDE_DIR, and HALIDE_COMPILER_LIB.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the include paths and link dependencies for halide_image_io.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make a build target for a Generator.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We could precompile GenGen.cpp, but add_executable() requires\n\n# at least one source file, and this is the cheapest one we're going to have.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Don't create an empty object-library: that can cause quiet failures in MSVC builds.\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Use Shared Libraries for all Generators to ensure that the RegisterGenerator\n\n# code is not dead-stripped.\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Ensure that Halide.h is built prior to any Generator\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Use a Generator target to emit a code library.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# It's fine for EXTRA_OUTPUTS, GENERATOR_ARGS, FILTER_DEPS, HALIDE_TARGET_FEATURES to be empty\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Some sanity checking\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Note that this list isn't exhaustive, but will check enough of the likely\n\n# common cases to enforce proper usage.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Create a directory to contain generator specific intermediate files\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Append HALIDE_TARGET_FEATURES to the target(s)\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Select the runtime to use *before* adding no_runtime\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# GENERATOR_ARGS always come last\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# CMake has no map type, and no switch statement. Whee!\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Apparently CMake has no predefined variable for this suffix.\n",
        "Line" : 193,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Output everything (except for the generated .cpp file)\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# A separate invocation for the generated .cpp file,\n\n# since it's rarely used, and some code will fail at Generation\n\n# time at present (e.g. code with predicated loads or stores).\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Needs _lib_gen as well, to get the .h file\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Very few of the cc_libs are needed, so exclude from \"all\".\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Code to build the BASENAME.rungen target\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Not all Generators will build properly with RunGen (e.g., missing\n\n# external dependencies), so exclude them from the \"ALL\" targets\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# BASENAME.run simply runs the BASENAME.rungen target\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Rule to build and use a Generator; it's convenient sugar around\n\n# halide_generator() + halide_library_from_generator().\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ----------------------- Private Functions.\n\n# All functions, properties, variables, etc. that being with an underscore\n\n# should be assumed to be private implementation details; don't rely on them externally.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Set the C++ options necessary for using libHalide.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Get (and lazily create) the generated-files directory for Generators.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Given the target of a static library, return the path to the actual .a file\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Set to empty string since it could be \"DIR-NOTFOUND\"\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Adds features to a target string, canonicalizing the result.\n\n# If multitarget, features are added to all.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# If any of the (multi) targets have the feature specified, set outvar to true.\n\n# Otherwise set outvar to false.\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Split the target into base and feature lists.\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Join base and feature lists back into a target. Do not canonicalize.\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Alphabetizes the features part of the target to make sure they always match no\n\n# matter the concatenation order of the target string pieces. Remove duplicates.\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Given a HALIDE_TARGET, return the CMake target name for the runtime.\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# MULTITARGETS = HALIDE_TARGET.split(\",\")\n",
        "Line" : 410,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# HALIDE_TARGET = MULTITARGETS.final_element()\n",
        "Line" : 412,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Discard target features which do not affect the contents of the runtime.\n",
        "Line" : 416,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Now build up the name\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Windows systems still have limits of 260-character pathnames in\n\n# lots of situations, and CMake can replicate project names multiple times\n\n# in the same path, so long target strings can cause us to overflow\n\n# this limit, even if CMAKE_OBJECT_PATH_MAX is set. So here we make\n\n# algorithmically-generated abbreviations for all the feature strings\n\n# and use those for external cmaketarget/filenames.\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Halide Target Features we know about. (This need not be exact, but should\n\n# be close for best compression.)\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Synthesize a one-or-two-char abbreviation based on the feature's position\n\n# in the KNOWN_FEATURES list.\n",
        "Line" : 499,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# CMake has no map-like structure; we'll fake it using synthesized variable names.\n",
        "Line" : 511,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# Unknown features get appended to the end\n",
        "Line" : 521,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# Finally, convert from a list into a _ separated name\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Generate the runtime library for the given halide_target; return\n\n# its cmake target name in outvar.\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# By default, IMPORTED libraries are only visible to the declaration\n\n# directories (and subdirectories); since runtime libraries are declared\n\n# lazily, we need to ensure they are globally visible to avoid ordering issues.\n",
        "Line" : 556,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# It's hard to force specific system libraries to the end of link order\n\n# in CMake, because of course it is; to mitigate this, we do snooping\n\n# here for common targets with extra dependencies and add them to\n\n# the dependencies for runtime, to ensure that they get sorted into\n\n# an appropriate spot in link order.\n",
        "Line" : 564,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# opengl\n",
        "Line" : 571,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Linux systems need X11 for OpenGL as well\n",
        "Line" : 579,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# Ignore\n",
        "Line" : 603,
        "CharPositionInLine" : 6
      },
      "52" : {
        "Text" : "# LLVM may leak memory during generator execution. If projects are built with address sanitizer enabled,\n\n# this may cause generators to fail, making it hard to use Halide and address sanitizer at the same time.\n\n# To work around this, we execute generators with an environment setting to disable leak checking.\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# We need to ensure that the libraries are linked in with --whole-archive\n\n# (or the equivalent), to ensure that the Generator-registration code\n\n# isn't omitted. Sadly, there's no portable way to do this, so we do some\n\n# special-casing here:\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Note that this requires VS2015 R2+\n",
        "Line" : 650,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Assume Linux or similar\n",
        "Line" : 654,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# ----------------------- Configuration code\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# If paths to tools, include, and libHalide aren't specified, infer them\n\n# based on the path to the distrib folder. If the path to the distrib\n\n# folder isn't specified, fail.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# If HALIDE_SYSTEM_LIBS isn't defined, we are compiling against a Halide distribution\n\n# folder; this is normally captured in the halide_config.cmake file. If that file\n\n# exists in the same directory as this one, just include it here.\n",
        "Line" : 694,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 59
    },
    "python_bindings/Makefile" : {
      "ObjectId" : "99831dca893c357d28664fb671138e0a6f3c8af7",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# These are set by Halide's Makefile when built via that path.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 'python' or 'python3'\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# assume we are building for the MinGW environment\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Note that Python on OSX won't load .dylib; it requires .so\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Discover PyBind path from `python3 -m pybind11 --includes`\n\n# if it is pip/conda installed, which is a common case.\n\n# Cf. https://github.com/pybind/pybind11/blob/master/docs/compiling.rst#building-manually\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# defining DEBUG + undefining NDEBUG gives extra debug info in PyBind11\n\n# OPTIMIZE ?= -g -DDEBUG=1 -UNDEBUG\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compiling with -fvisibility=hidden saves ~80k on optimized x64 builds\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Filter out a pointless warning present in some Python installs\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DON'T link libpython* - leave those symbols to lazily resolve at load time\n\n# Cf. https://github.com/pybind/pybind11/blob/master/docs/compiling.rst#building-manually\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Keep OS X builds from complaining about missing libpython symbols\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We don't want any of this auto-deleted\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Produce a Python extension for the generator by compiling PyStub.cpp\n\n# (with HALIDE_PYSTUB_GENERATOR_NAME defined to the Generator's build name),\n\n# and linking with the generator's .o file, PyStubImpl.o, plus the same libHalide\n\n# being used by halide.so.\n\n#\n\n# You can optionally also define HALIDE_PYSTUB_MODULE_NAME if you want the Python\n\n# module name to be something other than the Generator build name.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Compile the generators:\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Special generator for generating a runtime:\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Generate a runtime:\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Which target features to use for which test targets.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Make the generator generate a Python extension:\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Compile the generated Python extension(s):\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The Python extension of the generator is already in $(BIN), and is named\n\n# the same, so put the Python extension of the function into ext/.\n\n# TODO: Python extensions of generators should have a _generator suffix.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Run the Python extension(s):\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TODO: In the optimal case, we'd do %.run on all our generators. Unfortunately,\n\n# every generator needs its own settings. See https://github.com/halide/Halide/issues/2977.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Send stdout (but not stderr) from these to /dev/null to reduce noise\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Send stdout (but not stderr) from these to /dev/null to reduce noise\n\n# We need \".\" in the PYTHONPATH for lesson_10_halide.so.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 23
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "beff0a9ac3bd347335be69b744b851de2e50d62c",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -g produces dwarf debugging info, which is not useful on windows\n\n#  (and fails to compile due to llvm bug 15393)\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ./ seems to confuse cmake on linux\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Commands to build initial module objects.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# win32 uses the stdcall calling convention, which is x86-specific\n",
        "Line" : 151,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# (The 'nacl' is a red herring. This is just a generic 32-bit little-endian target.)\n",
        "Line" : 154,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# generic 64-bit code\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# -std=gnu++98 is deliberate; we do NOT want c++11 here,\n\n# as we don't want static locals to get thread synchronization stuff.\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Make sure that the output of this command also depends\n\n# on the header files that ${SOURCE} uses\n\n# FIXME: Only works for makefile generator\n",
        "Line" : 175,
        "CharPositionInLine" : 25
      },
      "8" : {
        "Text" : "# This seems to be how you return values from functions in cmake.\n\n# I just threw up in my mouth a little.\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The externally-visible header files that go into making Halide.h.\n\n# Don't include anything here that includes llvm headers.\n\n# Keep this list sorted in alphabetical order.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Keep this list sorted in alphabetical order.\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We could expose the /MP flag to all targets, but that might end up saturating the build\n\n# since multiple MSBuild projects might get built in parallel, each of which compiling their\n\n# source files in parallel; the Halide library itself is a \"knot\" point of the build graph,\n\n# so compiling its files in parallel should not oversubscribe the system\n",
        "Line" : 607,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Define Halide_SHARED or Halide_STATIC depending on library type\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Ensure that these tools are build first\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# List of LLVM Components required\n\n# This list will be appended to depending on the targets we need to support\n\n# See the output of ``llvm-config --components`` for a list of possible components\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set definitions and compiler flags\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Note when PUBLIC or INTERFACE scope is used in target_compile_* then targets\n\n# that link against the Halide library inherit those options and definitions\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# TODO: For targets we can link against even fewer libraries by specifying\n\n# only the components we **REALLY** need (e.g. x86asmprinter;x86codegen rather than x86)\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Suppress some warnings\n\n# 4244: conversion, possible loss of data\n\n# 4267: conversion, possible loss of data\n\n# 4800: BOOL -> true or false\n\n# 4996: compiler encountered deprecated declaration\n",
        "Line" : 701,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Injected from recent LLVM:\n",
        "Line" : 707,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# 'inline' used more than once\n\n# unary minus applied to unsigned type\n\n# No matching operator delete found\n",
        "Line" : 708,
        "CharPositionInLine" : 49
      },
      "21" : {
        "Text" : "# To compile LLVM headers following was taken from LLVM CMake files:\n\n# Disable sized deallocation if the flag is supported. MSVC fails to compile\n\n# the operator new overload in LLVM/IR/Function.h and Instruction.h otherwise.\n\n# See LLVM PR: 23513 (https://llvm.org/bugs/show_bug.cgi?id=23513)\n",
        "Line" : 713,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Get the LLVM libraries we need\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# When building a shared library the LLVM libraries will be\n\n# embedded in the Halide library. When building a static library\n\n# LLVM is not embedded but CMake knows that when building an executable\n\n# against the Halide static library that it needs to link LLVM too so\n\n# PRIVATE scope is the correct choice here.\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "src/runtime/hexagon_remote/Makefile" : {
      "ObjectId" : "3f58b7d76047fc4a28570ea3b394340f118d95af",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This Makefile creates some pre-built glue code that is kept (in binary form)\n\n# in the Halide repo; this is intended to allow end users to compile for\n\n# Hexagon targets without requiring the Hexagon SDK to be present on the build\n\n# system. (The Hexagon SDK is of course required to build the glue code itself.)\n\n# At present, only Linux systems are supported for building and testing; this\n\n# could probably be made to work on Windows (via MinGW) with a little effort.\n\n#\n\n# In order to build this, you'll need to ensure that the following\n\n# env vars are set correctly:\n\n#\n\n# HEXAGON_SDK_ROOT   : path to Qualcom Hexagon SDK\n\n# HEXAGON_TOOLS_ROOT : path to Qualcomm Hexagon Tools\n\n# HEXAGON_QAIC       : path to Qualcomm qaic compiler\n\n#\n\n# Note that all build products are put in a subdirectory of a local bin/\n\n# directory (even machine-generated C++ files), to make clear which files\n\n# are \"real\" source vs machine-generated. This is a rare case in which\n\n# a bin/ folder is meant to be kept in source control.\n\n#\n\n# Note that -- despite the efforts above -- the Hexagon SDK *is* required\n\n# in order to *use* the simulator (which requires proprietary binary blobs\n\n# from the SDK that cannot be redistributed with Halide).\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# QAIC compiler may vary depending on your build env.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some SDK versions use \"inc/\", some use \"incs/\"\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Some SDK versions use \"lib/\", some use \"libs/\"\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build rules for the hexagon implementation.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build rules for the simulator implementation.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#$(CC-$*) -m$* -mG0lib -G0 -ldl -lc -lstandalone -lgcc  $^ $(LIBDL) -o $@\n",
        "Line" : 185,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "272c262214cc25f7b5a978f67f2d8b0cab59a6b4",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These shouldn't be part of run_tests, since they must be run with -j for timing purposes\n",
        "Line" : 43,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# Use vendor libraries even when legacy libs are also available\n\n# see: https://cmake.org/cmake/help/git-stage/policy/CMP0072.html\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find all the files of form \"foo_generator.cpp\" in test/generator\n\n# and declare a halide_generator() rule for them. Note that a few\n\n# have special-cases.\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Most generators have no extra deps...\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# ...but a few do. We'll special-case them.\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Most of our Generators are one-per-file...\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ...but some have multiple-per-file\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Define a nontrivial depedency for external_code.generator\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ------ Generator tests for just-in-time mode: ------\n\n# Find all the files of form \"foo_jittest.cpp\" in test/generator\n\n# and declare a rule for them, each of which depends on foo.generator.\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ------ Generator tests for ahead-of-time mode: ------\n\n# Find all the files of form \"foo_aottest.cpp\" in test/generator\n\n# and declare a rule for them, each of which depends on foo.generator.\n\n# Note that there are many special cases.\n\n# TODO(srj)\n\n# file(GLOB JITTEST_SRCS RELATIVE \"${GEN_TEST_DIR}\" \"${GEN_TEST_DIR}/*_aottest.cpp\")\n\n# foreach(FILE ${JITTEST_SRCS})\n\n#   string(REPLACE \"_aottest.cpp\" \"\" NAME \"${FILE}\")\n\n#   set(TARGET )\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#   add_executable(\"generator_aot_${NAME}\" \"${GEN_TEST_DIR}/${FILE}\")\n\n#   target_include_directories(\"generator_aot_${NAME}\" PRIVATE\n\n#                              \"${CMAKE_SOURCE_DIR}\"\n\n#                              \"${CMAKE_SOURCE_DIR}/tools\"\n\n#                              \"${CMAKE_SOURCE_DIR}/src/runtime\")\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#   if (NOT ${args_OMIT_DEFAULT_GENERATOR})\n\n#     halide_library_from_generator(\"${NAME}\"\n\n#                            GENERATOR \"${NAME}.generator\"\n\n#                            FUNCTION_NAME \"${args_FUNCTION_NAME}\"\n\n#                            HALIDE_TARGET \"${args_GENERATOR_HALIDE_TARGET}\"\n\n#                            GENERATOR_ARGS \"${args_GENERATOR_ARGS}\"\n\n#                            FILTER_DEPS \"${args_FILTER_DEPS}\")\n\n#     target_link_libraries(\"generator_aot_${NAME}\" PUBLIC \"${NAME}\")\n\n#   endif()\n\n# endforeach()\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Create tests for ahead of-time-compiled generators. This will produce two\n\n# executables, one containing the generator itself\n\n# (e.g. from example_generator.cpp) and used at build time, and the other, the\n\n# test that executes the generated code (e.g. from example_aottest.cpp).\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Tests with no special requirements\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Tests that require nonstandard targets, namespaces, args, etc.\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# gpu_object_lifetime can build with a variety of GPU targets (or none).\n\n# TODO: disable for now, as we currently run buildbot/Travis tests on machines\n\n# that don't have these available.\n\n# if(TARGET_PTX)\n\n#   halide_define_aot_test(gpu_object_lifetime\n\n#                          HALIDE_TARGET_FEATURES cuda debug)\n\n# elseif(TARGET_OPENCL)\n\n#   halide_define_aot_test(gpu_object_lifetime\n\n#                          HALIDE_TARGET_FEATURES opencl debug)\n\n# elseif(TARGET_METAL)\n\n#   halide_define_aot_test(gpu_object_lifetime\n\n#                          HALIDE_TARGET_FEATURES metal debug)\n\n# else()\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# endif()\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# stubtest has input and output funcs with undefined types; this is fine for stub\n\n# usage (the types can be inferred), but for AOT compilation, we must make the types\n\n# concrete via generator args.\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Tests that require additional dependencies, args, etc\n",
        "Line" : 316,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Needs an extra library from this Generator\n",
        "Line" : 357,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# The cxx_mangling library was already defined implicitly, above,\n\n# so just add a dependency on it\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 21
    },
    "tutorial/CMakeLists.txt" : {
      "ObjectId" : "f34bcf7b911cd8b5a32bb29f021c5d0681444f9e",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detect if we need supress -Wunused-but-set-variable warning.  This warning\n\n# might be emitted by gcc for the tutorials as they don't always use a result\n\n# when showing a demonstration of a computation in C code.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile anyway but supress warnings about unrecognised pragmas\n",
        "Line" : 39,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Declare tutorials\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tutorial 10 requires that we build generation code, then run it,\n\n# so we can build the final executable.\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# LLVM may leak memory during Halide compilation. If projects are built with address sanitizer enabled,\n\n# this may cause generators to fail, making it hard to use Halide and address sanitizer at the same time.\n\n# To work around this, we execute generators with an environment setting to disable leak checking.\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This will be linked with the code generated by\n\n# the generator (lesson_10_aot_compilation_generate)\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Needed to find HalideBuffer.h\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "util/CMakeLists.txt" : {
      "ObjectId" : "81bb979d7ceb7aeb838d1c456495933a2a9ed5d8",
      "LastModified" : "2019-04-10T19:53:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "MAKEFILE" : 29,
    "ANT" : 4
  },
  "ElapsedTime" : 1387
}