{
  "Repository" : "1431521",
  "Revision" : "HEAD",
  "ObjectId" : "8a771e5e7b8f5b6604d683e8c3c310e22fb733da",
  "CommitTime" : "2016-08-08T01:50:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1a63d5337cbb6d5cb6d8225bff08ebae1a9baa94",
      "LastModified" : "2015-10-04T20:09:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable use of std::chrono for timestamps for all platforms for now.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up the Boost dependency.\n\n# We only need to list the libraries that have libraries;\n\n# we assume that header-only libraries are available without checking.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Gather the build artifacts into common directories.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use bundled Lua and Luabind from source.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find LibYAML.\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# For Win32 builds, we include the bulk of the dependencies.\n\n# Boost is the exception since it's simply too big.\n",
        "Line" : 107,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Generate the initial app config file.\n\n# We only do very basic escaping of the path here.\n\n# In reality, if you have a sufficiently wacky source path, then some of the\n\n# other CMake modules are more likely to fail before even reaching here :)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "CMakeModules/CXX11.cmake" : {
      "ObjectId" : "4c851596a79f0e4dbdd1751b826a19b229290d84",
      "LastModified" : "2015-08-07T00:20:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013 Nathan Osman\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determines whether or not the compiler supports C++11\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sets the appropriate flag to enable C++11 support\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CMakeModules/CopyWrapperScript.cmake" : {
      "ObjectId" : "6fb7276daa2a68483bc221953bd906b45e93e199",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Process and install a launch script.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/CustomGettext.cmake" : {
      "ObjectId" : "5ad905b62470604880fb34193de531d724f7e1ea",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim:ts=3:sw=3:expandtab\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is a customized version of GETTEXT_CREATE_TRANSLATIONS from\n\n# FindGettext.cmake (bundled with CMake).\n\n#\n\n# We insert a cleanup step between the msgmerge and msgfmt steps:\n\n# Post-process the .po file to reduce the number of changes.\n\n#\n\n# Before, this step was appended to the list of commands, which had the\n\n# side-effect of modifying the .po file *after* msgfmt had already run,\n\n# so CMake would *always* rebuild the file every time since the .gmo file\n\n# would be older than the .po file.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make it a real variable, so we can modify it here\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "CMakeModules/FindXGettext.cmake" : {
      "ObjectId" : "797b67e0e750b04e641f0bc4c019c0cee66939c6",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 Canonical Ltd\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU Lesser General Public License version 3 as\n\n# published by the Free Software Foundation.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU Lesser General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU Lesser General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This package provides macros that wrap the xgettext program.\n\n# \n\n# An example of common usage is:\n\n#\n\n#    set(\n\n#        POT_FILE\n\n#        \"${CMAKE_CURRENT_SOURCE_DIR}/${GETTEXT_PACKAGE}.pot\"\n\n#    )\n\n#\n\n#    file(\n\n#        GLOB_RECURSE SRC_FILES\n\n#        RELATIVE ${CMAKE_SOURCE_DIR}\n\n#        ${SOURCE_DIR}/*.cpp\n\n#        ${SOURCE_DIR}/*.c\n\n#        ${SOURCE_DIR}/*.h\n\n#    )\n\n#\n\n#    xgettext_create_pot_file(\n\n#        ${POT_FILE}\n\n#        CPP\n\n#        QT\n\n#        INPUT ${SOURCES}\n\n#        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n\n#        ADD_COMMENTS \"TRANSLATORS\"\n\n#        KEYWORDS \"_\" \"N_\"\n\n#        PACKAGE_NAME ${GETTEXT_PACKAGE}\n\n#        COPYRIGHT_HOLDER \"Canonical Ltd.\"\n\n#    )\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindYAML.cmake" : {
      "ObjectId" : "e9d99d6f84e8da9a8e0149960f5cada3825157b4",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/SetWarningLevel.cmake" : {
      "ObjectId" : "df3435b20f73c5ed00f7265cda06c634ce10242e",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/cotire.cmake" : {
      "ObjectId" : "a4fb533c6c11289174dfd9979b222ab8ecd69c9f",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2015 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# process transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 394,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 416,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 423,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 455,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 467,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# platform specific flags\n",
        "Line" : 478,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# default include dirs\n",
        "Line" : 513,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 520,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 532,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# target include directories\n",
        "Line" : 544,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 556,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 626,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# target export define symbol\n",
        "Line" : 630,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 635,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# target compile definitions\n",
        "Line" : 644,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 653,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 662,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 678,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 911,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 955,
        "CharPositionInLine" : 3
      },
      "50" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 963,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 966,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# header is outside\n",
        "Line" : 980,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 991,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# check header file extension\n",
        "Line" : 1001,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1014,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1019,
        "CharPositionInLine" : 3
      },
      "57" : {
        "Text" : "# GCC like output\n",
        "Line" : 1028,
        "CharPositionInLine" : 3
      },
      "58" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1044,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1047,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1049,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# then separate lines\n",
        "Line" : 1051,
        "CharPositionInLine" : 1
      },
      "62" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1054,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1072,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# update stack\n",
        "Line" : 1082,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1098,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1100,
        "CharPositionInLine" : 5
      },
      "67" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1107,
        "CharPositionInLine" : 5
      },
      "68" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1116,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1128,
        "CharPositionInLine" : 5
      },
      "70" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1166,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1182,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1330,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# create empty log file\n",
        "Line" : 1371,
        "CharPositionInLine" : 3
      },
      "74" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1387,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1421,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# append to list\n",
        "Line" : 1430,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1433,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1437,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# append to list\n",
        "Line" : 1442,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1448,
        "CharPositionInLine" : 3
      },
      "81" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1455,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# append to list\n",
        "Line" : 1460,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1463,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1468,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# append to list\n",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1480,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1484,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# append to list\n",
        "Line" : 1489,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1495,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1514,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# append to list\n",
        "Line" : 1525,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1532,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1539,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# append to list\n",
        "Line" : 1548,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1551,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1559,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# append to list\n",
        "Line" : 1571,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1578,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1585,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# append to list\n",
        "Line" : 1596,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1605,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1622,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# append to list\n",
        "Line" : 1630,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1636,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1643,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# append to list\n",
        "Line" : 1645,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1648,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1653,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# append to list\n",
        "Line" : 1658,
        "CharPositionInLine" : 3
      },
      "110" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1661,
        "CharPositionInLine" : 3
      },
      "111" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1665,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# append to list\n",
        "Line" : 1671,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1674,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1680,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# append to list\n",
        "Line" : 1688,
        "CharPositionInLine" : 5
      },
      "116" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1694,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1701,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# append to list\n",
        "Line" : 1703,
        "CharPositionInLine" : 5
      },
      "119" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1706,
        "CharPositionInLine" : 5
      },
      "120" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1711,
        "CharPositionInLine" : 3
      },
      "121" : {
        "Text" : "# append to list\n",
        "Line" : 1720,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1726,
        "CharPositionInLine" : 5
      },
      "123" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1733,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# append to list\n",
        "Line" : 1735,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1738,
        "CharPositionInLine" : 5
      },
      "126" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1775,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1791,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1795,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1802,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1805,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1822,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1841,
        "CharPositionInLine" : 1
      },
      "133" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1884,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1895,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1898,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1969,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1974,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 1977,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1980,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 1983,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2015,
        "CharPositionInLine" : 1
      },
      "142" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2019,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2024,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2041,
        "CharPositionInLine" : 1
      },
      "145" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2054,
        "CharPositionInLine" : 1
      },
      "146" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2078,
        "CharPositionInLine" : 1
      },
      "147" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2083,
        "CharPositionInLine" : 3
      },
      "148" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2090,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2093,
        "CharPositionInLine" : 1
      },
      "150" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2098,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# generate target script file\n",
        "Line" : 2121,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2126,
        "CharPositionInLine" : 2
      },
      "153" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2140,
        "CharPositionInLine" : 2
      },
      "154" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2149,
        "CharPositionInLine" : 3
      },
      "155" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2151,
        "CharPositionInLine" : 3
      },
      "156" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2155,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2178,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2183,
        "CharPositionInLine" : 3
      },
      "159" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2190,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2196,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2203,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2206,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2213,
        "CharPositionInLine" : 1
      },
      "164" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2220,
        "CharPositionInLine" : 1
      },
      "165" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2222,
        "CharPositionInLine" : 1
      },
      "166" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2282,
        "CharPositionInLine" : 2
      },
      "167" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2293,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2304,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2312,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2316,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2320,
        "CharPositionInLine" : 3
      },
      "172" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2342,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2348,
        "CharPositionInLine" : 3
      },
      "174" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2357,
        "CharPositionInLine" : 3
      },
      "175" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2365,
        "CharPositionInLine" : 3
      },
      "176" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2401,
        "CharPositionInLine" : 1
      },
      "177" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2406,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2431,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2440,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2449,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2456,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2629,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2633,
        "CharPositionInLine" : 3
      },
      "184" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2647,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# use all available cores\n",
        "Line" : 2667,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2692,
        "CharPositionInLine" : 1
      },
      "187" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2699,
        "CharPositionInLine" : 1
      },
      "188" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2709,
        "CharPositionInLine" : 1
      },
      "189" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2714,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2716,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2725,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2735,
        "CharPositionInLine" : 4
      },
      "193" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2742,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2746,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2774,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2779,
        "CharPositionInLine" : 4
      },
      "197" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2794,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2805,
        "CharPositionInLine" : 3
      },
      "199" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2813,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2827,
        "CharPositionInLine" : 4
      },
      "201" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2839,
        "CharPositionInLine" : 1
      },
      "202" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2849,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2852,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2857,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2862,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# generate unity target\n",
        "Line" : 2869,
        "CharPositionInLine" : 1
      },
      "207" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2876,
        "CharPositionInLine" : 2
      },
      "208" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2879,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2889,
        "CharPositionInLine" : 3
      },
      "210" : {
        "Text" : "# copy output name\n",
        "Line" : 2914,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2922,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# copy compile features\n",
        "Line" : 2933,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2938,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2946,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2956,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 2959,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 2964,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 2978,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2986,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2991,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# trivial checks\n",
        "Line" : 3015,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# resolve alias\n",
        "Line" : 3021,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3029,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3045,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3050,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3084,
        "CharPositionInLine" : 3
      },
      "227" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3133,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3220,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# include target script if available\n",
        "Line" : 3232,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3234,
        "CharPositionInLine" : 2
      },
      "231" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3250,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3270,
        "CharPositionInLine" : 3
      },
      "233" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3273,
        "CharPositionInLine" : 3
      },
      "234" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3292,
        "CharPositionInLine" : 3
      },
      "235" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3295,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3361,
        "CharPositionInLine" : 3
      },
      "237" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3364,
        "CharPositionInLine" : 3
      },
      "238" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3387,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3424,
        "CharPositionInLine" : 3
      },
      "240" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3458,
        "CharPositionInLine" : 2
      },
      "241" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3472,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3479,
        "CharPositionInLine" : 1
      },
      "243" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3532,
        "CharPositionInLine" : 1
      },
      "244" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3604,
        "CharPositionInLine" : 1
      },
      "245" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3768,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 246
    },
    "client/CMakeLists.txt" : {
      "ObjectId" : "f264ac86188b391f4df971ae336e10352e38bcb9",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate version info.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Arrange the files in Visual Studio by directory.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Needed for the generated Game2.rc.\n",
        "Line" : 45,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : "# Bump the warning level.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Temporarily disable deprecation warnings; the warnings are coming\n\n# from the Luabind headers, which we're not touching for now.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Enable precompiled headers.\n\n# Note: Explicitly setting the language to fix misdetection in some cases.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install convenience wrapper scripts.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "compilers/CMakeLists.txt" : {
      "ObjectId" : "5e94646ae522268dd49e7680579e1bc967ec1998",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "compilers/MazeCompiler/CMakeLists.txt" : {
      "ObjectId" : "03c528a6dbfe44b4b2023deac1221912c175b458",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bump the warning level.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: Even though we have a standard StdAfx.h, we don't use bother with\n\n#       precompiled headers since there's only a single source file.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "compilers/ParcelDump/CMakeLists.txt" : {
      "ObjectId" : "1dc16fd1b94d81d4345d0378766d7dd15257070c",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bump the warning level.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: Even though we have a standard StdAfx.h, we don't use bother with\n\n#       precompiled headers since there's only a single source file.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "compilers/ResourceCompiler/CMakeLists.txt" : {
      "ObjectId" : "4ef421ef71750c288b44a47db76e8c958f655e0c",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bump the warning level.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable precompiled headers.\n\n# Note: Explicitly setting the language to fix misdetection in some cases.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "engine/CMakeLists.txt" : {
      "ObjectId" : "ba50945dc9398a4942c7f9f3af351daa0fa674eb",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Arrange the files in Visual Studio by directory.\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Use static linking for libYAML.\n",
        "Line" : 52,
        "CharPositionInLine" : 24
      },
      "2" : {
        "Text" : "# Install prebuilt bundled DLLs into the right locations.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# DLLs that have only release versions.\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# DLLs that have both debug and release versions.\n",
        "Line" : 63,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Bump the warning level.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Temporarily disable deprecation warnings; the warnings are coming\n\n# from the Luabind headers, which we're not touching for now.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Enable precompiled headers.\n\n# Note: Explicitly setting the language to fix misdetection in some cases.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "external/CMakeLists.txt" : {
      "ObjectId" : "dc01dce3e1365fdd42ba33b5f74d52e86d03bbc5",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/lua/CMakeLists.txt" : {
      "ObjectId" : "c88e0406bbdfedba2b259797becbc0ff6041569d",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2007-2013 LuaDist.\n\n# Created by Peter Drahoš, Peter Kapec\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HoverRace: Handling packaging in parent project.\n",
        "Line" : 9,
        "CharPositionInLine" : 11
      },
      "2" : {
        "Text" : "# HoverRace\n",
        "Line" : 11,
        "CharPositionInLine" : 9
      },
      "3" : {
        "Text" : "## CONFIGURATION\n\n# Default configuration (we assume POSIX by default)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#2DO: LUAI_* and LUAL_* settings, for now defaults are used.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This will set up relative paths to lib\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Direct path to installation\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Windows systems\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Paths (Double escapes ne  option needed)\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Posix systems (incl. Cygwin)\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Apple and Linux specific\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# HoverRace: Skip Readline and Curses checks (no CLI).\n",
        "Line" : 71,
        "CharPositionInLine" : 11
      },
      "12" : {
        "Text" : "## SETUP\n\n# Optional libraries\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# HoverRace\n",
        "Line" : 85,
        "CharPositionInLine" : 9
      },
      "14" : {
        "Text" : "# Setup needed variables and libraries\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# On POSIX Lua links to standard math library \"m\"\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Link to dynamic linker library \"dl\"\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Add readline\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Add curses\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "## SOURCES\n\n# Generate luaconf.h\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Sources and headers\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Use modified loadlib\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "## BUILD\n\n# Create lua library\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# HoverRace: Disable building and installing executables.\n",
        "Line" : 143,
        "CharPositionInLine" : 11
      },
      "24" : {
        "Text" : "# On windows a variant of the lua interpreter without console output needs to be built\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#install_lua_module ( strict etc/strict.lua )\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#install_test ( test/ )\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HoverRace\n",
        "Line" : 167,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 28
    },
    "external/lua/Makefile" : {
      "ObjectId" : "d2c7db4a2da841565b3f1f0e19a84b82dcaefe5e",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "external/lua/cmake/FindLua.cmake" : {
      "ObjectId" : "7fb7ca3f4f9de67e22efade7d6827f3ecdef6a51",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_EXECUTABLE, if found\n\n#  LUA_FOUND, if false, do not try to link to Lua \n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Modified to support Lua 5.2 by LuaDist 2012\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# The required version of Lua can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Lua 5.1)\n\n# Otherwise the module will search for any available Lua implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always search for non-versioned lua first (recommended)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine possible naming suffixes (there is no standard for this)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up possible search names and locations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the lua executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the lua header\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 69,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 70,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# Find the lua library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Determine Lua version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "external/lua/cmake/FindReadline.cmake" : {
      "ObjectId" : "5401a9b4273fa11de9abcf5c94b3e78f2a73c303",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Readline\n\n# Once done this will define\n\n#  READLINE_FOUND - System has readline\n\n#  READLINE_INCLUDE_DIRS - The readline include directories\n\n#  READLINE_LIBRARIES - The libraries needed to use readline\n\n#  READLINE_DEFINITIONS - Compiler switches required for using readline\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/lua/cmake/dist.cmake" : {
      "ObjectId" : "310ef94cc9ddf4880e577520fe6258cd3e2e4236",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library.\n\n# Provides sane project defaults and macros common to LuaDist CMake builds.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahoš\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Extract information from dist.info\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reads field `name` from dist.info string `DIST_INFO` into variable `var`.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## 2DO: Parse DIST_DEPENDS and try to install Dependencies with automatically using externalproject_add\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)\n\n# Primary paths\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Secondary paths\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tweaks and other defaults\n\n# Setting CMAKE to use loose block and search for find modules in source directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# In MSVC, prevent warnings that can occur when using standard libraries.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# RPath and relative linking\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## MACROS\n\n# Parser macro\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# install_executable ( executable_targets )\n\n# Installs any executables generated using \"add_executable\".\n\n# USE: install_executable ( lua )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# install_library ( library_targets )\n\n# Installs any libraries generated using \"add_library\" into apropriate places.\n\n# USE: install_library ( libexpat )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# helper function for various install_* functions, for PATTERN/REGEX args.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# install_header ( files/directories [INTO destination] )\n\n# Install a directories or files into header destination.\n\n# USE: install_header ( lua.h luaconf.h ) or install_header ( GL )\n\n# USE: install_header ( mylib.h INTO mylib )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# install_data ( files/directories [INTO destination] )\n\n# This installs additional data files or directories.\n\n# USE: install_data ( extra data.dat )\n\n# USE: install_data ( image1.png image2.png INTO images )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# INSTALL_DOC ( files/directories [INTO destination] )\n\n# This installs documentation content\n\n# USE: install_doc ( doc/ doc.pdf )\n\n# USE: install_doc ( index.html INTO html )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# install_example ( files/directories [INTO destination]  )\n\n# This installs additional examples\n\n# USE: install_example ( examples/ exampleA )\n\n# USE: install_example ( super_example super_data INTO super)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# install_test ( files/directories [INTO destination] )\n\n# This installs tests and test files, DOES NOT EXECUTE TESTS\n\n# USE: install_test ( my_test data.sql )\n\n# USE: install_test ( feature_x_test INTO x )\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# install_foo ( files/directories [INTO destination] )\n\n# This installs optional or otherwise unneeded content\n\n# USE: install_foo ( etc/ example.doc )\n\n# USE: install_foo ( icon.png logo.png INTO icons)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## CTest defaults\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## CPack defaults\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "external/lua/cmake/lua.cmake" : {
      "ObjectId" : "a0f3e67d1f90d70496efbd5b13843a4896176d58",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library for Lua.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahos\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of (Lua module name, file path) pairs.\n\n# Used internally by add_lua_test.  Built by add_lua_module.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# utility function: appends path `path` to path `basepath`, properly\n\n# handling cases when `path` may be relative or absolute.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install_lua_executable ( target source )\n\n# Automatically generate a binary wrapper for lua application and install it\n\n# The wrapper and the source of the application will be placed into /bin\n\n# If the application source did not have .lua suffix then it will be added\n\n# USE: lua_executable ( sputnik src/sputnik.lua )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# _target is CMake-compatible target name for module (e.g. socket_core).\n\n# _module is relative path of target (e.g. socket/core),\n\n#   without extension (e.g. .lua/.so/.dll).\n\n# _MODULE_SRC is list of module source files (e.g. .lua and .c files).\n\n# _MODULE_NAMES is list of module names (e.g. socket.core).\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Lua source module\n",
        "Line" : 194,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : "# Lua C binary module\n",
        "Line" : 211,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "# add_lua_module\n\n# Builds a Lua source module into a destination locatable by Lua\n\n# require syntax.\n\n# Binary modules are also supported where this function takes sources and\n\n# libraries to compile separated by LINK keyword.\n\n# USE: add_lua_module ( socket.http src/http.lua )\n\n# USE2: add_lua_module ( mime.core src/mime.c )\n\n# USE3: add_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n\n# USE4: add_lua_module ( ssl.context ssl.core ALL_IN_ONE src/context.c src/ssl.c )\n\n#   This form builds an \"all-in-one\" module (e.g. ssl.so or ssl.dll containing\n\n#   both modules ssl.context and ssl.core).  The CMake target name will be\n\n#   ssl_all_in_one.\n\n# Also sets variable _module_path (relative path where module typically\n\n# would be installed).\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install_lua_module\n\n# This is the same as `add_lua_module` but also installs the module.\n\n# USE: install_lua_module ( socket.http src/http.lua )\n\n# USE2: install_lua_module ( mime.core src/mime.c )\n\n# USE3: install_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds string representing Lua table mapping Lua modules names to file\n\n# paths.  Used internally.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# avoids cmake complaint\n",
        "Line" : 268,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : "# add_lua_test ( _testfile [ WORKING_DIRECTORY _working_dir ] )\n\n# Runs Lua script `_testfile` under CTest tester.\n\n# Optional named argument `WORKING_DIRECTORY` is current working directory to\n\n# run test under (defaults to ${CMAKE_CURRENT_BINARY_DIR}).\n\n# Both paths, if relative, are relative to ${CMAKE_CURRENT_SOURCE_DIR}.\n\n# Any modules previously defined with install_lua_module are automatically\n\n# preloaded (via package.preload) prior to running the test script.\n\n# Under LuaDist, set test=true in config.lua to enable testing.\n\n# USE: add_lua_test ( test/test1.lua [args...] [WORKING_DIRECTORY dir])\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Write wrapper script.\n\n# Note: One simple way to allow the script to find modules is\n\n# to just put them in package.preload.\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# note: CMake 2.6 (unlike 2.8) lacks WORKING_DIRECTORY parameter.\n",
        "Line" : 328,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# see also http://gdcm.svn.sourceforge.net/viewvc/gdcm/Sandbox/CMakeModules/UsePythonTest.cmake\n\n# Note: ${CMAKE_CFG_INTDIR} is a command-line argument to allow proper\n\n# expansion by the native build tool.\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Converts Lua source file `_source` to binary string embedded in C source\n\n# file `_target`.  Optionally compiles Lua source to byte code (not available\n\n# under LuaJIT2, which doesn't have a bytecode loader).  Additionally, Lua\n\n# versions of bin2c [1] and luac [2] may be passed respectively as additional\n\n# arguments.\n\n#\n\n# [1] http://lua-users.org/wiki/BinToCee\n\n# [2] http://lua-users.org/wiki/LuaCompilerInLua\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "external/lua/src/Makefile" : {
      "ObjectId" : "7b4b2b75420b876d0116b8af25c11ac44288ce10",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "external/luabind/CMakeLists.txt" : {
      "ObjectId" : "1f347c71fc9b51c132a3de7b09e58f6487a13809",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for LuaBind\n\n# Ryan Pavlik <rpavlik@iastate.edu>\n\n# http://academic.cleardefinition.com/\n\n# Iowa State University HCI Graduate Program/VRAC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove when CMake >= 2.8.4 is required\n",
        "Line" : 7,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# We are the top-level project\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "external/luabind/doc/CMakeLists.txt" : {
      "ObjectId" : "98453decdf029c444c5662bd190dad078c907bea",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Embedded build for LuaBind\n\n# 2009-2011 Ryan Pavlik <rpavlik@iastate.edu>\n\n# http://academic.cleardefinition.com/\n\n# Iowa State University HCI Graduate Program/VRAC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/luabind/doc/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "b06207530662c9a216aa2f953cb1b8f55d70d44c",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "external/luabind/src/CMakeLists.txt" : {
      "ObjectId" : "0c72c404d239cc906bd7c6d6bb70d0597cc82d91",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for LuaBind\n\n# Ryan Pavlik <rpavlik@iastate.edu>\n\n# http://academic.cleardefinition.com/\n\n# Iowa State University HCI Graduate Program/VRAC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/luabind/test/CMakeLists.txt" : {
      "ObjectId" : "f786c5ffa03507f1ffe7ee0a707a30df5686ab9a",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for LuaBind\n\n# Ryan Pavlik <rpavlik@iastate.edu>\n\n# http://academic.cleardefinition.com/\n\n# Iowa State University HCI Graduate Program/VRAC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ls test_*.cpp | sort | sed s/test_// | sed s/.cpp//\n\n# remove typetraits value_wrapper and has_get_pointer because they are\n\n# compile-only tests\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "7475c8f50629203d675b78b918a491c9d71b2821",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Post-process the .pot file to reduce the number of changes.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install the compiled locales into the resource directory so that they're\n\n# available during development.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy the compiled .mo file to where the client will find it when\n\n# debugging.\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Remove the copied .mo files on clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "po/CleanPo.cmake" : {
      "ObjectId" : "3c7c1123ce1cbb39b3e71a9c0a697d384d32af65",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PO_FILE:string is passed-in from CMakeLists.txt.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If a comment has more than one filename, split into multiple lines.\n\n# We assume that there are at most two filenames on a single line.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove the line number from the comment, leaving only the filename.\n\n# The line numbers change often so they clutter the history.\n\n# GNU gettext 0.19 has an --add-location=file option, but we're still on\n\n# 0.18 compatibility, so we'll do it ourselves.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove duplicate filename comments.\n\n# We split the filename into lines by inserting semicolons, then reconstruct\n\n# each line (since a line may already contain a semicolon).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "po/CleanPot.cmake" : {
      "ObjectId" : "8adcd0b8ccbf052a66767257784d27f126e45c2c",
      "LastModified" : "2016-08-04T00:44:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remove the creation date header since the .pot file is regenerated during\n\n# the build, and the updated header propagates to the .po files.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 28,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1469
}