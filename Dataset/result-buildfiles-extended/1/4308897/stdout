{
  "Repository" : "4308897",
  "Revision" : "HEAD",
  "ObjectId" : "d6da0a0157cf04c06a7102f852cd383fec1cffa6",
  "CommitTime" : "2018-07-20T12:40:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4b5b536448deeff0d65313d249ab5871d4e90764",
      "LastModified" : "2018-05-22T05:55:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set default build type to \"Release\".\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build option: enable test set.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build option: enable benchmarks.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build option: build the Python bindings.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build option: enable the Boost serialization format.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build option: enable the msgpack serialization format.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build option: enable zlib/gzip compression.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build option: enable bzip2 compression.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build option: enable support for the Boost stacktrace library.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build option: enable the installation of the library headers.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# A general-purpose option to signal that we intend to run Piranha under Valgrind.\n\n# At the moment it just disables tests involving long double that give problems in Valgrind,\n\n# in the future it might become a more general-purpose flag.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Make it an advanced option, not really interesting for non-developers.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Setup of the compilation flags.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Assemble the flags.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# NOTE: the idea here is to enable globally certain compiler options that always need to be activated\n\n# on a certain platform. Further compiler flags will be set for specific targets.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Disable the idiotic minmax macros on MSVC and enable the bigobj option (but not with clang).\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# clang-cl emits various warnings from the Boost/GMP/MPFR libraries, let's just silence them.\n\n# NOTE: at one point in the recent past, MSVC added an options similar to GCC's isystem:\n\n# https://blogs.msdn.microsoft.com/vcblog/2017/12/13/broken-warnings-theory/\n\n# We probably just need to wait for this to be picked up by CMake/clang-cl. Let's\n\n# revisit the issue in the future.\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Flag needed to deal with big binaries in MinGW.\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Concepts detection.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This is just a hackish way of detecting concepts, need to revisit once\n\n# more compilers support them.\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Threading setup.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Additional platform-specific setup.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Setup the piranha interface library.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Start to set up the list of mandatory targets for piranha to link to.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOTE: ideally we would want this inside the pyranha CMakeLists.txt, however\n\n# it seems like there's a strange interaction between the code for finding Boost.Python\n\n# and the CMake FindPythonLibs macro, and it does not work that way.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Boost libraries setup.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# At the moment we hard-code the following config for the\n\n# stacktrace library:\n\n# - on Windows, we use windbg,\n\n# - on Unix, we use libbacktrace.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# OSX apparently does not have libdl:\n\n# https://stackoverflow.com/questions/20169660/where-is-libdl-so-on-mac-os-x\n",
        "Line" : 188,
        "CharPositionInLine" : 3
      },
      "28" : {
        "Text" : "# Find mp++.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Finish setting up the piranha interface library.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Try to determine the git revision.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Configure config.hpp.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Configure the doc config file.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Installation.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Setup of the export.\n",
        "Line" : 251,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Take care of versioning.\n",
        "Line" : 280,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# NOTE: for the moment, set COMPATIBILITY to ExactVersion, as piranha is evolving fast.\n",
        "Line" : 282,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Installation of the header files.\n",
        "Line" : 287,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Tests and benchmarks setup.\n\n# This is just a simple counter variable, internal use only.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Check splitting options. These need to be set from the command line.\n\n# - PIRANHA_TEST_NSPLIT: number of chunks into which the unit tests will be divided (must be > 1).\n\n# - PIRANHA_TEST_SPLIT_NUM: 0-based index of the chunk to run.\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "4441e5e47519fe7c51d38caf5b000dc67c1ebfe0",
      "LastModified" : "2018-02-02T22:39:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup for the split compilation of benchmarks.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: this needs to be a macro since it is modifying the external variable _PIRANHA_TEST_NUM.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pass the current source dir as a definition, so we can load data for tests from the source dir.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindDbgEng.cmake" : {
      "ObjectId" : "f4243b9efbda8c12ec4ac21e0d7c49b0493ea3df",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# If we are using it directly, we must define an interface library,\n\n# as we do not have the full path to the shared library.\n",
        "Line" : 26,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Otherwise, we proceed as usual.\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "cmake_modules/FindMSGPACK-C.cmake" : {
      "ObjectId" : "4217ce8ecad612a92f81f0f64106b903672cf4e9",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2016-2017 Francesco Biscani, <bluescarni@gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# ------------------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We look only for the header-only version of msgpack-c for C++.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# NOTE: this has been adapted from CMake's FindPNG.cmake.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake_modules/Findlibbacktrace.cmake" : {
      "ObjectId" : "d80141688561bf2a2d3eb5bf1d5035fa3e630b35",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2016-2017 Francesco Biscani, <bluescarni@gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# ------------------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# NOTE: this has been adapted from CMake's FindPNG.cmake.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake_modules/PiranhaFindBZip2.cmake" : {
      "ObjectId" : "1a4ac5294a64d521c44696329e4c2891a4f89e59",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some older CMake versions do not provide the imported target for bzip2.\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake_modules/PiranhaFindBoost.cmake" : {
      "ObjectId" : "57ed01e78dcfec98fd7825fd4326c3ae150fd68f",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Init the list of required boost libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Optional Boost serialization.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optional Boost stacktrace.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Boost::iostreams is needed if any compression is enabled (in which case we need the iostreams filters).\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Boost::python.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Boost stacktrace is available since 1.65.\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Otherwise, we require at least 1.58 due to flat_set/flat_map API requirements.\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Might need to recreate these targets if they are missing (e.g., older CMake versions).\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOTE: CMake's Boost finding module will not provide imported targets for recent Boost versions, as it needs\n\n# an explicit mapping specifying the dependencies between the various Boost libs (and this is version-dependent).\n\n# If we are here, it means that Boost was correctly found with all the needed components, but the Boost version\n\n# found is too recent and imported targets are not available. We will reconstruct them here in order to be able\n\n# to link to targets rather than using the variables defined by the FindBoost.cmake module.\n\n# NOTE: in Piranha's case, we are lucky because all the Boost libs we need don't have any interdependency\n\n# with other boost libs.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# FindBoost.cmake marks regexp as a dependency for iostreams, but it is true only if one uses the iostreams\n\n# regexp filter (we don't). Remove the dependency.\n",
        "Line" : 86,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Cleanup.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake_modules/PiranhaPlatformSettings.cmake" : {
      "ObjectId" : "35095c42445d7dce76f3ebb3d6868adead213f34",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup for the machinery to detect cache line size in Windows. It's not supported everywhere, so we\n\n# check for the existence of the SYSTEM_LOGICAL_PROCESSOR_INFORMATION type.\n\n# http://msdn.microsoft.com/en-us/library/ms686694(v=vs.85).aspx\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clear the variable.\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake_modules/yacma/YACMACompilerLinkerSettings.cmake" : {
      "ObjectId" : "cf10a586e38bfb75ef45f480bc41a279d4217828",
      "LastModified" : "2018-07-20T08:54:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: we want to make sure the following variables are defined each time we include\n\n# this file, even when the file is re-included (e.g., from a parallel unrelated tree).\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang detection:\n\n# http://stackoverflow.com/questions/10046114/in-cmake-how-can-i-test-if-the-compiler-is-clang\n\n# http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:CMAKE_LANG_COMPILER_ID\n\n# NOTE: we use MATCHES here because on OSX sometimes the compiler calls itself \"AppleClang\".\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is an OS X specific setting that is suggested to be enabled. See:\n\n# https://blog.kitware.com/upcoming-in-cmake-2-8-12-osx-rpath-support/\n\n# http://stackoverflow.com/questions/31561309/cmake-warnings-under-os-x-macosx-rpath-is-not-specified-for-the-following-targe\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Helper function to print out the autodetected flags.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable conditionally a CXX flag, if supported by the compiler.\n\n# This is for flags intended to be enabled in all configurations.\n\n# NOTE: we use macros and go through temporary private variables\n\n# because it's apparently impossible to append to an internal\n\n# CACHEd list.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOTE: check_cxx_compiler stores variables in the cache.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Enable conditionally a debug CXX flag, is supported by the compiler.\n\n# This is for flags intended to be enabled in debug mode.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# What we want to avoid is to re-run the expensive flag checks. We will set cache variables\n\n# on the initial run and skip following CMake runs.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Init the flags lists.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Configuration bits specific for GCC.\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Configuration bits specific for clang.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# For now it seems like -Wshadow from clang behaves better than GCC's, just enable it here\n\n# for the time being.\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Clang is better at this flag than GCC.\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Common configuration for GCC, clang and Intel.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# This limit is supposed to be at least 1024 in C++11, but for some reason\n\n# clang sets this to 256, and gcc to 900.\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# NOTE: disable this for now, as it results in a lot of clutter from Boost.\n\n# _YACMA_CHECK_ENABLE_CXX_FLAG(-Wzero-as-null-pointer-constant)\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# This is useful when the compiler decides the template backtrace is too verbose.\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# A few suggestion flags.\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# From GCC 5.\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# From GCC 6.\n",
        "Line" : 131,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# From GCC 7.\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# From GCC 8.\n",
        "Line" : 140,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# This is supposed to produce a nice graphical visualization\n\n# of mismatching template errors.\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# NOTE: GCC >= 6 seems to be wrongly warning about visibility attributes\n\n# in some situations:\n\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80947\n\n# Let's just disable the warning for now.\n",
        "Line" : 146,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# The -Wmaybe-uninitialized flag is enabled by -Wall, but it is known\n\n# to emit a lot of possibly spurious warnings. Let's just disable it.\n",
        "Line" : 154,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# MSVC setup.\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Enable higher warning level than usual.\n",
        "Line" : 163,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# Treat warnings as errors.\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Set the cache variables.\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Final report.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Mark as included.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "cmake_modules/yacma/YACMAPythonSetup.cmake" : {
      "ObjectId" : "126fd1f3bc44ae22836251630dc8dfd7efe5e0df",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE: this is a heuristic to determine whether we need to link to the Python library.\n\n# In theory, Python extensions don't need to, as they are dlopened() by the Python process\n\n# and thus they don't need to be linked to the Python library at compile time. However,\n\n# the dependency on Boost.Python muddies the waters, as BP itself does link to the Python\n\n# library, at least on some platforms. The following configuration seems to be working fine\n\n# on various CI setups.\n\n# NOTE: apparently homebrew requires NOT to link to the Python library. We might want\n\n# to add a config option to accommodate that eventually.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find Python interpreter.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE: this will give us both the Python lib and the Python include dir.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: we need to determine the include dir on our own.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# An imported target to be used when building extension modules.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This flag is used to signal the need to override the default extension of the Python modules\n\n# depending on the architecture. Under Windows, for instance, CMake produces shared objects as\n\n# .dll files, but Python from 2.5 onwards requires .pyd files (hence the need to override).\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Platform-specific setup.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Apparently on OS X Python expects the .so extension for compiled modules.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# NOTE: here we use this contraption (instead of the simple method below for Win32) because like this we can\n\n# support installation into the CMake prefix (e.g., in the user's home dir).\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# On Windows, we will install directly into the install path of the Python interpreter.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Check the install path was actually detected.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If we need an explicit link to the Python library, we compile it as a normal shared library.\n\n# Otherwise, we compile it as a module.\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Any \"lib\" prefix normally added by CMake must be removed.\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If needed, set a custom extension for the module.\n",
        "Line" : 120,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# We need extra flags to be set when compiling Python modules, at least\n\n# with clang and gcc. See:\n\n# https://bugs.python.org/issue11149\n\n# http://www.python.org/dev/peps/pep-3123/\n\n# NOTE: not sure here how we should set flags up for MSVC or clang on windows, need\n\n# to check in the future.\n\n# NOTE: do not use the yacma compiler linker settings bits, so this module\n\n# can be used stand-alone.\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Mark as included.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake_modules/yacma/YACMAThreadingSetup.cmake" : {
      "ObjectId" : "c9e24f98eec40b5b5a1f3ccf2731c413d8f77067",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Initial thread setup. See FindThreads.cmake for an explanation.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup variable for threading-specific flags.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# POSIX thread setup. Intended both for UNIX and Windows (the latter when using some sort of\n\n# pthread emulation/wrapper like pthreads-win32).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Detect affinity setting primitives.\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Check if we have thread_local.\n\n# NOTE: we need to double check what happens with OSX's clang here.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Final report.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Mark as included.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "doc/Makefile" : {
      "ObjectId" : "327f3f49d089b532523e24b68f4bbdd5201d5163",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "pyranha/CMakeLists.txt" : {
      "ObjectId" : "bbe482557d1eaaeff11ff7e79ef832c95f121c69",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Python version check.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Helper file with version number.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General.\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Polynomials.\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Poisson series.\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Divisor series.\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Setup the installation path.\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Boost.Python version 1.64 (and possibly later?) has issues with default hidden visibility.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The name of the BP target to link to depends on the Python version.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The module needs Boost.Python and the mandatory libraries. Python libs and includes are already linked in\n\n# by YACMA_PYTHON_MODULE().\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# NOTE: for clang-cl, cmake tries to set -std=c++11 here, which makes\n\n# it error out. Disable it as MSVC 2015 is implicitly C++14 anyway.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Let's setup the target C++ standard, but only if the user did not provide it manually.\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Add the global init file and the additional submodules.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "0493d0b402a64f84cc2a88407fab926f0764335d",
      "LastModified" : "2018-03-24T02:04:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Increase by one the _PIRANHA_TEST_NUM variable in the parent scope.\n\n# NOTE: we do it here (rather than at the end of the function) because we may exit the\n\n# function earlier in the return() below.\n\n# NOTE: even though we updated the _PIRANHA_TEST_NUM variable in the parent scope,\n\n# the _PIRANHA_TEST_NUM in the *current* scope still contains the old value.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Add a special definition for the unit tests when the run-on-Valgrind\n\n# option is selected.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Pass down the current build directory to the tests as a definition\n\n# (this is used for the creation of temporary files).\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# NOTE: for clang-cl, cmake tries to set -std=c++11 here, which makes\n\n# it error out. Disable it as MSVC 2015 is implicitly C++14 anyway.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Let's setup the target C++ standard, but only if the user did not provide it manually.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# NOTE: the idea here is that we want to use C++14 if the compilers supports\n\n# concepts (as variable concepts are essentially template variables).\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "tools/sample_project/CMakeLists.txt" : {
      "ObjectId" : "5ea0679c85eeca858ac08fd132addf3d43b6fb68",
      "LastModified" : "2018-02-22T13:17:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 14,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1758
}