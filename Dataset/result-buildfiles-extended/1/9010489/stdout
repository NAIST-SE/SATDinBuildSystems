{
  "Repository" : "9010489",
  "Revision" : "HEAD",
  "ObjectId" : "9dd010dce29bdbbab818a447931112bbe7f27f2e",
  "CommitTime" : "2019-04-04T08:04:55Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c2a1a18a7083c45514003ff4b4be8142a0272ba6",
      "LastModified" : "2018-06-13T15:32:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright: (C) 2014 iCub Facility, Istituto Italiano di Tecnologia\n\n# Authors: Daniele E. Domenichelli <daniele.domenichelli@iit.it>\n\n# CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# icub_firmware_shared-config-version.cmake (build tree and installed) (use AnyNewerVersion or ExactVersion or SameMajorVersion)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# icub_firmware_shared-config.cmake (build tree)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# icub_firmware_shared-config.cmake (installed)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# # icub_firmware_shared-targets.cmake (build tree)\n\n# get_property(_targets GLOBAL PROPERTY icub_firmware_shared_TARGETS)\n\n# export(TARGETS ${_targets} ${manager_extra_libs}\n\n#        NAMESPACE ICUB_fw::\n\n#        FILE ${CMAKE_BINARY_DIR}/icub_firmware_shared-targets.cmake)\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# # icub_firmware_shared-targets.cmake (installed)\n\n# install(EXPORT ICUB_fw\n\n#         NAMESPACE ICUB_fw::\n\n#         DESTINATION ${icub_firmware_shared_CMAKE_DESTINATION}\n\n#         FILE icub_firmware_shared-targets.cmake)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "can/CMakeLists.txt" : {
      "ObjectId" : "9071e64a64cb1dbf4e428420c49fe017afc3b851",
      "LastModified" : "2017-01-18T17:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright: (C) 2014 iCub Facility, Istituto Italiano di Tecnologia\n\n# Authors: Daniele E. Domenichelli <daniele.domenichelli@iit.it>\n\n# CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/AddUninstallTarget.cmake" : {
      "ObjectId" : "36a1c5a3eb7c026078e7311f521ffd0bbf27c171",
      "LastModified" : "2014-04-18T08:11:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# AddUninstallTarget\n\n# ------------------\n\n#\n\n# Add the \"uninstall\" target for your project\n\n#\n\n# ::\n\n#\n\n#   include(AddUninstallTarget)\n\n#\n\n#\n\n# will create a file cmake_uninstall.cmake in the build directory and add a\n\n# custom target uninstall that will remove the files installed by your package\n\n# (using install_manifest.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2013 Kitware, Inc.\n\n# Copyright 2013  iCub Facility, Istituto Italiano di Tecnologia\n\n#     @author Daniele E. Domenichelli <daniele.domenichelli@iit.it>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CMakePackageConfigHelpers.cmake" : {
      "ObjectId" : "473bbe5c4e3b02ebffd80f5337c5a359bfd772cf",
      "LastModified" : "2014-04-30T09:18:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakePackageConfigHelpers\n\n# -------------------------\n\n#\n\n# CONFIGURE_PACKAGE_CONFIG_FILE(), WRITE_BASIC_PACKAGE_VERSION_FILE()\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#     CONFIGURE_PACKAGE_CONFIG_FILE(<input> <output> INSTALL_DESTINATION <path>\n\n#                                                    [PATH_VARS <var1> <var2> ... <varN>]\n\n#                                                    [NO_SET_AND_CHECK_MACRO]\n\n#                                                    [NO_CHECK_REQUIRED_COMPONENTS_MACRO])\n\n#\n\n#\n\n#\n\n# CONFIGURE_PACKAGE_CONFIG_FILE() should be used instead of the plain\n\n# configure_file() command when creating the <Name>Config.cmake or\n\n# <Name>-config.cmake file for installing a project or library.  It\n\n# helps making the resulting package relocatable by avoiding hardcoded\n\n# paths in the installed Config.cmake file.\n\n#\n\n# In a FooConfig.cmake file there may be code like this to make the\n\n# install destinations know to the using project:\n\n#\n\n# ::\n\n#\n\n#    set(FOO_INCLUDE_DIR   \"@CMAKE_INSTALL_FULL_INCLUDEDIR@\" )\n\n#    set(FOO_DATA_DIR   \"@CMAKE_INSTALL_PREFIX@/@RELATIVE_DATA_INSTALL_DIR@\" )\n\n#    set(FOO_ICONS_DIR   \"@CMAKE_INSTALL_PREFIX@/share/icons\" )\n\n#    ...logic to determine installedPrefix from the own location...\n\n#    set(FOO_CONFIG_DIR  \"${installedPrefix}/@CONFIG_INSTALL_DIR@\" )\n\n#\n\n# All 4 options shown above are not sufficient, since the first 3\n\n# hardcode the absolute directory locations, and the 4th case works only\n\n# if the logic to determine the installedPrefix is correct, and if\n\n# CONFIG_INSTALL_DIR contains a relative path, which in general cannot\n\n# be guaranteed.  This has the effect that the resulting FooConfig.cmake\n\n# file would work poorly under Windows and OSX, where users are used to\n\n# choose the install location of a binary package at install time,\n\n# independent from how CMAKE_INSTALL_PREFIX was set at build/cmake time.\n\n#\n\n# Using CONFIGURE_PACKAGE_CONFIG_FILE() helps.  If used correctly, it\n\n# makes the resulting FooConfig.cmake file relocatable.  Usage:\n\n#\n\n# ::\n\n#\n\n#    1. write a FooConfig.cmake.in file as you are used to\n\n#    2. insert a line containing only the string \"@PACKAGE_INIT@\"\n\n#    3. instead of set(FOO_DIR \"@SOME_INSTALL_DIR@\"), use set(FOO_DIR \"@PACKAGE_SOME_INSTALL_DIR@\")\n\n#       (this must be after the @PACKAGE_INIT@ line)\n\n#    4. instead of using the normal configure_file(), use CONFIGURE_PACKAGE_CONFIG_FILE()\n\n#\n\n#\n\n#\n\n# The <input> and <output> arguments are the input and output file, the\n\n# same way as in configure_file().\n\n#\n\n# The <path> given to INSTALL_DESTINATION must be the destination where\n\n# the FooConfig.cmake file will be installed to.  This can either be a\n\n# relative or absolute path, both work.\n\n#\n\n# The variables <var1> to <varN> given as PATH_VARS are the variables\n\n# which contain install destinations.  For each of them the macro will\n\n# create a helper variable PACKAGE_<var...>.  These helper variables\n\n# must be used in the FooConfig.cmake.in file for setting the installed\n\n# location.  They are calculated by CONFIGURE_PACKAGE_CONFIG_FILE() so\n\n# that they are always relative to the installed location of the\n\n# package.  This works both for relative and also for absolute\n\n# locations.  For absolute locations it works only if the absolute\n\n# location is a subdirectory of CMAKE_INSTALL_PREFIX.\n\n#\n\n# By default configure_package_config_file() also generates two helper\n\n# macros, set_and_check() and check_required_components() into the\n\n# FooConfig.cmake file.\n\n#\n\n# set_and_check() should be used instead of the normal set() command for\n\n# setting directories and file locations.  Additionally to setting the\n\n# variable it also checks that the referenced file or directory actually\n\n# exists and fails with a FATAL_ERROR otherwise.  This makes sure that\n\n# the created FooConfig.cmake file does not contain wrong references.\n\n# When using the NO_SET_AND_CHECK_MACRO, this macro is not generated\n\n# into the FooConfig.cmake file.\n\n#\n\n# check_required_components(<package_name>) should be called at the end\n\n# of the FooConfig.cmake file if the package supports components.  This\n\n# macro checks whether all requested, non-optional components have been\n\n# found, and if this is not the case, sets the Foo_FOUND variable to\n\n# FALSE, so that the package is considered to be not found.  It does\n\n# that by testing the Foo_<Component>_FOUND variables for all requested\n\n# required components.  When using the NO_CHECK_REQUIRED_COMPONENTS\n\n# option, this macro is not generated into the FooConfig.cmake file.\n\n#\n\n# For an example see below the documentation for\n\n# WRITE_BASIC_PACKAGE_VERSION_FILE().\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#   WRITE_BASIC_PACKAGE_VERSION_FILE( filename [VERSION major.minor.patch] COMPATIBILITY (AnyNewerVersion|SameMajorVersion|ExactVersion) )\n\n#\n\n#\n\n#\n\n# Writes a file for use as <package>ConfigVersion.cmake file to\n\n# <filename>.  See the documentation of find_package() for details on\n\n# this.\n\n#\n\n# ::\n\n#\n\n#     filename is the output filename, it should be in the build tree.\n\n#     major.minor.patch is the version number of the project to be installed\n\n#\n\n# If no ``VERSION`` is given, the :variable:`PROJECT_VERSION` variable\n\n# is used.  If this hasn't been set, it errors out.\n\n#\n\n# The COMPATIBILITY mode AnyNewerVersion means that the installed\n\n# package version will be considered compatible if it is newer or\n\n# exactly the same as the requested version.  This mode should be used\n\n# for packages which are fully backward compatible, also across major\n\n# versions.  If SameMajorVersion is used instead, then the behaviour\n\n# differs from AnyNewerVersion in that the major version number must be\n\n# the same as requested, e.g.  version 2.0 will not be considered\n\n# compatible if 1.0 is requested.  This mode should be used for packages\n\n# which guarantee backward compatibility within the same major version.\n\n# If ExactVersion is used, then the package is only considered\n\n# compatible if the requested version matches exactly its own version\n\n# number (not considering the tweak version).  For example, version\n\n# 1.2.3 of a package is only considered compatible to requested version\n\n# 1.2.3.  This mode is for packages without compatibility guarantees.\n\n# If your project has more elaborated version matching rules, you will\n\n# need to write your own custom ConfigVersion.cmake file instead of\n\n# using this macro.\n\n#\n\n# Internally, this macro executes configure_file() to create the\n\n# resulting version file.  Depending on the COMPATIBLITY, either the\n\n# file BasicConfigVersion-SameMajorVersion.cmake.in or\n\n# BasicConfigVersion-AnyNewerVersion.cmake.in is used.  Please note that\n\n# these two files are internal to CMake and you should not call\n\n# configure_file() on them yourself, but they can be used as starting\n\n# point to create more sophisticted custom ConfigVersion.cmake files.\n\n#\n\n#\n\n#\n\n# Example using both configure_package_config_file() and\n\n# write_basic_package_version_file(): CMakeLists.txt:\n\n#\n\n# ::\n\n#\n\n#    set(INCLUDE_INSTALL_DIR include/ ... CACHE )\n\n#    set(LIB_INSTALL_DIR lib/ ... CACHE )\n\n#    set(SYSCONFIG_INSTALL_DIR etc/foo/ ... CACHE )\n\n#    ...\n\n#    include(CMakePackageConfigHelpers)\n\n#    configure_package_config_file(FooConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\n\n#                                  INSTALL_DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake\n\n#                                  PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)\n\n#    write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n\n#                                     VERSION 1.2.3\n\n#                                     COMPATIBILITY SameMajorVersion )\n\n#    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n\n#            DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake )\n\n#\n\n#\n\n#\n\n# With a FooConfig.cmake.in:\n\n#\n\n# ::\n\n#\n\n#    set(FOO_VERSION x.y.z)\n\n#    ...\n\n#    @PACKAGE_INIT@\n\n#    ...\n\n#    set_and_check(FOO_INCLUDE_DIR \"@PACKAGE_INCLUDE_INSTALL_DIR@\")\n\n#    set_and_check(FOO_SYSCONFIG_DIR \"@PACKAGE_SYSCONFIG_INSTALL_DIR@\")\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    check_required_components(Foo)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle \"/usr move\" symlinks created by some Linux distros.\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/CMakeParseArguments.cmake" : {
      "ObjectId" : "4248176ad66488c41a2c1a6104c3bbb53765747a",
      "LastModified" : "2014-04-30T09:18:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n#\n\n#\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords>\n\n# <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions\n\n# for parsing the arguments given to that macro or function.  It\n\n# processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e.  keywords which can be used when calling the macro without any\n\n# value following, like e.g.  the OPTIONAL keyword of the install()\n\n# command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g.  DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this\n\n# macro which can be followed by more than one value, like e.g.  the\n\n# TARGETS or FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.  These\n\n# variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see\n\n# whether your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments\n\n# as the real install() command:\n\n#\n\n# ::\n\n#\n\n#    function(MY_INSTALL)\n\n#      set(options OPTIONAL FAST)\n\n#      set(oneValueArgs DESTINATION RENAME)\n\n#      set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#      cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN} )\n\n#      ...\n\n#\n\n#\n\n#\n\n# Assume my_install() has been called like this:\n\n#\n\n# ::\n\n#\n\n#    my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n#\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the\n\n# following variables:\n\n#\n\n# ::\n\n#\n\n#    MY_INSTALL_OPTIONAL = TRUE\n\n#    MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#    MY_INSTALL_DESTINATION = \"bin\"\n\n#    MY_INSTALL_RENAME = \"\" (was not used)\n\n#    MY_INSTALL_TARGETS = \"foo;bar\"\n\n#    MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#    MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n#\n\n#\n\n# You can then continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g.  if directly after a\n\n# one_value_keyword another recognized keyword follows, this is\n\n# interpreted as the beginning of the new option.  E.g.\n\n# my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION\n\n# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 122,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 123,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 124,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/FeatureSummary.cmake" : {
      "ObjectId" : "a72954c10fd7aa1fcf7c8a258115ba8937176224",
      "LastModified" : "2014-04-30T09:18:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FeatureSummary\n\n# --------------\n\n#\n\n# Macros for generating a summary of enabled/disabled features\n\n#\n\n#\n\n#\n\n# This module provides the macros feature_summary(),\n\n# set_package_properties() and add_feature_info().  For compatibility it\n\n# also still provides set_package_info(), set_feature_info(),\n\n# print_enabled_features() and print_disabled_features().\n\n#\n\n# These macros can be used to generate a summary of enabled and disabled\n\n# packages and/or feature for a build tree:\n\n#\n\n# ::\n\n#\n\n#     -- The following OPTIONAL packages have been found:\n\n#     LibXml2 (required version >= 2.4) , XML processing library. , <http://xmlsoft.org>\n\n#        * Enables HTML-import in MyWordProcessor\n\n#        * Enables odt-export in MyWordProcessor\n\n#     PNG , A PNG image library. , <http://www.libpng.org/pub/png/>\n\n#        * Enables saving screenshots\n\n#     -- The following OPTIONAL packages have not been found:\n\n#     Lua51 , The Lua scripting language. , <http://www.lua.org>\n\n#        * Enables macros in MyWordProcessor\n\n#     Foo , Foo provides cool stuff.\n\n#\n\n#\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#     FEATURE_SUMMARY( [FILENAME <file>]\n\n#                      [APPEND]\n\n#                      [VAR <variable_name>]\n\n#                      [INCLUDE_QUIET_PACKAGES]\n\n#                      [FATAL_ON_MISSING_REQUIRED_PACKAGES]\n\n#                      [DESCRIPTION \"Found packages:\"]\n\n#                      WHAT (ALL | PACKAGES_FOUND | PACKAGES_NOT_FOUND\n\n#                           | ENABLED_FEATURES | DISABLED_FEATURES]\n\n#                    )\n\n#\n\n#\n\n#\n\n# The FEATURE_SUMMARY() macro can be used to print information about\n\n# enabled or disabled packages or features of a project.  By default,\n\n# only the names of the features/packages will be printed and their\n\n# required version when one was specified.  Use SET_PACKAGE_PROPERTIES()\n\n# to add more useful information, like e.g.  a download URL for the\n\n# respective package or their purpose in the project.\n\n#\n\n# The WHAT option is the only mandatory option.  Here you specify what\n\n# information will be printed:\n\n#\n\n# ::\n\n#\n\n#     ALL: print everything\n\n#     ENABLED_FEATURES: the list of all features which are enabled\n\n#     DISABLED_FEATURES: the list of all features which are disabled\n\n#     PACKAGES_FOUND: the list of all packages which have been found\n\n#     PACKAGES_NOT_FOUND: the list of all packages which have not been found\n\n#     OPTIONAL_PACKAGES_FOUND: only those packages which have been found which have the type OPTIONAL\n\n#     OPTIONAL_PACKAGES_NOT_FOUND: only those packages which have not been found which have the type OPTIONAL\n\n#     RECOMMENDED_PACKAGES_FOUND: only those packages which have been found which have the type RECOMMENDED\n\n#     RECOMMENDED_PACKAGES_NOT_FOUND: only those packages which have not been found which have the type RECOMMENDED\n\n#     REQUIRED_PACKAGES_FOUND: only those packages which have been found which have the type REQUIRED\n\n#     REQUIRED_PACKAGES_NOT_FOUND: only those packages which have not been found which have the type REQUIRED\n\n#     RUNTIME_PACKAGES_FOUND: only those packages which have been found which have the type RUNTIME\n\n#     RUNTIME_PACKAGES_NOT_FOUND: only those packages which have not been found which have the type RUNTIME\n\n#\n\n# With the exception of the ``ALL`` value, these values can be combined\n\n# in order to customize the output. For example:\n\n#\n\n# ::\n\n#\n\n#    feature_summary(WHAT ENABLED_FEATURES DISABLED_FEATURES)\n\n#\n\n#\n\n#\n\n# If a FILENAME is given, the information is printed into this file.  If\n\n# APPEND is used, it is appended to this file, otherwise the file is\n\n# overwritten if it already existed.  If the VAR option is used, the\n\n# information is \"printed\" into the specified variable.  If FILENAME is\n\n# not used, the information is printed to the terminal.  Using the\n\n# DESCRIPTION option a description or headline can be set which will be\n\n# printed above the actual content.  If INCLUDE_QUIET_PACKAGES is given,\n\n# packages which have been searched with find_package(...  QUIET) will\n\n# also be listed.  By default they are skipped.  If\n\n# FATAL_ON_MISSING_REQUIRED_PACKAGES is given, CMake will abort if a\n\n# package which is marked as REQUIRED has not been found.\n\n#\n\n# Example 1, append everything to a file:\n\n#\n\n# ::\n\n#\n\n#    feature_summary(WHAT ALL\n\n#                    FILENAME ${CMAKE_BINARY_DIR}/all.log APPEND)\n\n#\n\n#\n\n#\n\n# Example 2, print the enabled features into the variable\n\n# enabledFeaturesText, including QUIET packages:\n\n#\n\n# ::\n\n#\n\n#    feature_summary(WHAT ENABLED_FEATURES\n\n#                    INCLUDE_QUIET_PACKAGES\n\n#                    DESCRIPTION \"Enabled Features:\"\n\n#                    VAR enabledFeaturesText)\n\n#    message(STATUS \"${enabledFeaturesText}\")\n\n#\n\n#\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#     SET_PACKAGE_PROPERTIES(<name> PROPERTIES [ URL <url> ]\n\n#                                              [ DESCRIPTION <description> ]\n\n#                                              [ TYPE (RUNTIME|OPTIONAL|RECOMMENDED|REQUIRED) ]\n\n#                                              [ PURPOSE <purpose> ]\n\n#                           )\n\n#\n\n#\n\n#\n\n# Use this macro to set up information about the named package, which\n\n# can then be displayed via FEATURE_SUMMARY().  This can be done either\n\n# directly in the Find-module or in the project which uses the module\n\n# after the find_package() call.  The features for which information can\n\n# be set are added automatically by the find_package() command.\n\n#\n\n# URL: this should be the homepage of the package, or something similar.\n\n# Ideally this is set already directly in the Find-module.\n\n#\n\n# DESCRIPTION: A short description what that package is, at most one\n\n# sentence.  Ideally this is set already directly in the Find-module.\n\n#\n\n# TYPE: What type of dependency has the using project on that package.\n\n# Default is OPTIONAL.  In this case it is a package which can be used\n\n# by the project when available at buildtime, but it also work without.\n\n# RECOMMENDED is similar to OPTIONAL, i.e.  the project will build if\n\n# the package is not present, but the functionality of the resulting\n\n# binaries will be severly limited.  If a REQUIRED package is not\n\n# available at buildtime, the project may not even build.  This can be\n\n# combined with the FATAL_ON_MISSING_REQUIRED_PACKAGES argument for\n\n# feature_summary().  Last, a RUNTIME package is a package which is\n\n# actually not used at all during the build, but which is required for\n\n# actually running the resulting binaries.  So if such a package is\n\n# missing, the project can still be built, but it may not work later on.\n\n# If set_package_properties() is called multiple times for the same\n\n# package with different TYPEs, the TYPE is only changed to higher TYPEs\n\n# ( RUNTIME < OPTIONAL < RECOMMENDED < REQUIRED ), lower TYPEs are\n\n# ignored.  The TYPE property is project-specific, so it cannot be set\n\n# by the Find-module, but must be set in the project.\n\n#\n\n# PURPOSE: This describes which features this package enables in the\n\n# project, i.e.  it tells the user what functionality he gets in the\n\n# resulting binaries.  If set_package_properties() is called multiple\n\n# times for a package, all PURPOSE properties are appended to a list of\n\n# purposes of the package in the project.  As the TYPE property, also\n\n# the PURPOSE property is project-specific, so it cannot be set by the\n\n# Find-module, but must be set in the project.\n\n#\n\n#\n\n#\n\n# Example for setting the info for a package:\n\n#\n\n# ::\n\n#\n\n#    find_package(LibXml2)\n\n#    set_package_properties(LibXml2 PROPERTIES DESCRIPTION \"A XML processing library.\"\n\n#                                              URL \"http://xmlsoft.org/\")\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    set_package_properties(LibXml2 PROPERTIES TYPE RECOMMENDED\n\n#                                              PURPOSE \"Enables HTML-import in MyWordProcessor\")\n\n#    ...\n\n#    set_package_properties(LibXml2 PROPERTIES TYPE OPTIONAL\n\n#                                              PURPOSE \"Enables odt-export in MyWordProcessor\")\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    find_package(DBUS)\n\n#    set_package_properties(DBUS PROPERTIES TYPE RUNTIME\n\n#                                              PURPOSE \"Necessary to disable the screensaver during a presentation\" )\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#     ADD_FEATURE_INFO(<name> <enabled> <description>)\n\n#\n\n# Use this macro to add information about a feature with the given\n\n# <name>.  <enabled> contains whether this feature is enabled or not,\n\n# <description> is a text describing the feature.  The information can\n\n# be displayed using feature_summary() for ENABLED_FEATURES and\n\n# DISABLED_FEATURES respectively.\n\n#\n\n# Example for setting the info for a feature:\n\n#\n\n# ::\n\n#\n\n#    option(WITH_FOO \"Help for foo\" ON)\n\n#    add_feature_info(Foo WITH_FOO \"The Foo feature provides very cool stuff.\")\n\n#\n\n#\n\n#\n\n#\n\n#\n\n# The following macros are provided for compatibility with previous\n\n# CMake versions:\n\n#\n\n# ::\n\n#\n\n#     SET_PACKAGE_INFO(<name> <description> [<url> [<purpose>] ] )\n\n#\n\n# Use this macro to set up information about the named package, which\n\n# can then be displayed via FEATURE_SUMMARY().  This can be done either\n\n# directly in the Find-module or in the project which uses the module\n\n# after the find_package() call.  The features for which information can\n\n# be set are added automatically by the find_package() command.\n\n#\n\n# ::\n\n#\n\n#     PRINT_ENABLED_FEATURES()\n\n#\n\n# Does the same as FEATURE_SUMMARY(WHAT ENABLED_FEATURES DESCRIPTION\n\n# \"Enabled features:\")\n\n#\n\n# ::\n\n#\n\n#     PRINT_DISABLED_FEATURES()\n\n#\n\n# Does the same as FEATURE_SUMMARY(WHAT DISABLED_FEATURES DESCRIPTION\n\n# \"Disabled features:\")\n\n#\n\n# ::\n\n#\n\n#     SET_FEATURE_INFO(<name> <description> [<url>] )\n\n#\n\n# Does the same as SET_PACKAGE_INFO(<name> <description> <url> )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# none\n",
        "Line" : 284,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# none\n",
        "Line" : 286,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "# handle the PURPOSE: use APPEND, since there can be multiple purposes for one package inside a project\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# handle the TYPE\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# List the supported types, according to their priority\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# make sure a previously set TYPE is not overridden with a lower new TYPE:\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# does this package belong to the type we currently want to list ?\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# check whether the current feature/package should be in the output depending on whether it was QUIET or not\n",
        "Line" : 377,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# skip QUIET packages, except if they are REQUIRED or INCLUDE_QUIET_PACKAGES has been set\n",
        "Line" : 379,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords> <multi_value_keywords> args...)\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The stuff below is only kept for compatibility\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/GNUInstallDirs.cmake" : {
      "ObjectId" : "d868cb31c34c111aca412c7168335aa43ee0e241",
      "LastModified" : "2014-04-30T09:18:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# GNUInstallDirs\n\n# --------------\n\n#\n\n# Define GNU standard installation directories\n\n#\n\n# Provides install directory variables as defined for GNU software:\n\n#\n\n# ::\n\n#\n\n#   http://www.gnu.org/prep/standards/html_node/Directory-Variables.html\n\n#\n\n# Inclusion of this module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_INSTALL_<dir>      - destination for files of a given type\n\n#   CMAKE_INSTALL_FULL_<dir> - corresponding absolute path\n\n#\n\n# where <dir> is one of:\n\n#\n\n# ::\n\n#\n\n#   BINDIR           - user executables (bin)\n\n#   SBINDIR          - system admin executables (sbin)\n\n#   LIBEXECDIR       - program executables (libexec)\n\n#   SYSCONFDIR       - read-only single-machine data (etc)\n\n#   SHAREDSTATEDIR   - modifiable architecture-independent data (com)\n\n#   LOCALSTATEDIR    - modifiable single-machine data (var)\n\n#   LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)\n\n#   INCLUDEDIR       - C header files (include)\n\n#   OLDINCLUDEDIR    - C header files for non-gcc (/usr/include)\n\n#   DATAROOTDIR      - read-only architecture-independent data root (share)\n\n#   DATADIR          - read-only architecture-independent data (DATAROOTDIR)\n\n#   INFODIR          - info documentation (DATAROOTDIR/info)\n\n#   LOCALEDIR        - locale-dependent data (DATAROOTDIR/locale)\n\n#   MANDIR           - man documentation (DATAROOTDIR/man)\n\n#   DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)\n\n#\n\n# Each CMAKE_INSTALL_<dir> value may be passed to the DESTINATION\n\n# options of install() commands for the corresponding file type.  If the\n\n# includer does not define a value the above-shown default will be used\n\n# and the value will appear in the cache for editing by the user.  Each\n\n# CMAKE_INSTALL_FULL_<dir> value contains an absolute path constructed\n\n# from the corresponding destination by prepending (if necessary) the\n\n# value of CMAKE_INSTALL_PREFIX.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Nikita Krupen'ko <krnekit@gmail.com>\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Installation directories\n\n#\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We check if the variable was manually set and not cached, in order to\n\n# allow projects to set the values as normal variables before including\n\n# GNUInstallDirs to avoid having the entries cached or user-editable. It\n\n# replaces the \"if(NOT DEFINED CMAKE_INSTALL_XXX)\" checks in all the\n\n# other cases.\n\n# If CMAKE_INSTALL_LIBDIR is defined, if _libdir_set is false, then the\n\n# variable is a normal one, otherwise it is a cache one.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If CMAKE_INSTALL_LIBDIR is not defined, it is always executed.\n\n# Otherwise:\n\n#  * if _libdir_set is false it is not executed (meaning that it is\n\n#    not a cache variable)\n\n#  * if _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX is not defined it is\n\n#    not executed\n\n#  * if _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX and\n\n#    CMAKE_INSTALL_PREFIX are the same string it is not executed.\n\n#    _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX is updated after the\n\n#    execution, of this part of code, therefore at the next inclusion\n\n#    of the file, CMAKE_INSTALL_LIBDIR is defined, and the 2 strings\n\n#    are equal, meaning that the if is not executed the code the\n\n#    second time.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Override this default 'lib' with 'lib64' iff:\n\n#  - we are on Linux system but NOT cross-compiling\n\n#  - we are NOT on debian\n\n#  - we are on a 64 bits system\n\n# reason is: amd64 ABI: http://www.x86-64.org/documentation/abi.pdf\n\n# For Debian with multiarch, use 'lib/${CMAKE_LIBRARY_ARCHITECTURE}' if\n\n# CMAKE_LIBRARY_ARCHITECTURE is set (which contains e.g. \"i386-linux-gnu\"\n\n# and CMAKE_INSTALL_PREFIX is \"/usr\"\n\n# See http://wiki.debian.org/Multiarch\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# __LAST_LIBDIR_DEFAULT is the default value that we compute from\n\n# _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX, not a cache entry for\n\n# the value that was last used as the default.\n\n# This value is used to figure out whether the user changed the\n\n# CMAKE_INSTALL_LIBDIR value manually, or if the value was the\n\n# default one. When CMAKE_INSTALL_PREFIX changes, the value is\n\n# updated to the new default, unless the user explicitly changed it.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# is this a debian system ?\n",
        "Line" : 135,
        "CharPositionInLine" : 38
      },
      "8" : {
        "Text" : "# not debian, rely on CMAKE_SIZEOF_VOID_P:\n",
        "Line" : 145,
        "CharPositionInLine" : 11
      },
      "9" : {
        "Text" : "# Save for next run\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Values whose defaults are relative to DATAROOTDIR.  Store empty values in\n\n# the cache and store the defaults in local variables if the cache values are\n\n# not set explicitly.  This auto-updates the defaults as DATAROOTDIR changes.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Result directories\n\n#\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "eth/CMakeLists.txt" : {
      "ObjectId" : "3933ba247769ad888ca205a0c98e7fd95bb27135",
      "LastModified" : "2017-01-18T17:14:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright: (C) 2014 iCub Facility, Istituto Italiano di Tecnologia\n\n# Authors: Daniele E. Domenichelli <daniele.domenichelli@iit.it>\n\n# CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "icub_firmware_shared-config-version.cmake" : {
      "ObjectId" : "410f6ff450a45395a7017bb7aba917b046e76deb",
      "LastModified" : "2017-01-18T17:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a basic version file for the Config-mode of find_package(), modified\n\n# to find icub_firmware_shared from the source directory.\n\n#\n\n# It is used by write_basic_package_version_file() as input file for configure_file()\n\n# to create a version-file which can be installed along a config.cmake file.\n\n#\n\n# The created file sets PACKAGE_VERSION_EXACT if the current version string and\n\n# the requested version string are exactly the same and it sets\n\n# PACKAGE_VERSION_COMPATIBLE if the current version is equal to the requested version.\n\n# The tweak version component is ignored.\n\n# The variable CVF_VERSION must be set before calling configure_file().\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# strip the tweak version\n",
        "Line" : 27,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : "# strip the tweak version\n",
        "Line" : 33,
        "CharPositionInLine" : 66
      },
      "3" : {
        "Text" : "# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check that the installed version has the same 32/64bit-ness as the one which is currently searching:\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "icub_firmware_shared-config.cmake" : {
      "ObjectId" : "dda575817632832c1c2f29fd17f99e014f48012b",
      "LastModified" : "2017-01-18T17:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright: (C) 2014, 2017 iCub Facility, Istituto Italiano di Tecnologia\n\n# Authors: Daniele E. Domenichelli <daniele.domenichelli@iit.it>\n\n# CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "####### Expanded from @PACKAGE_INIT@ by configure_package_config_file() #######\n\n####### Any changes to this file will be overwritten by the next CMake run ####\n\n####### The input file was icub_firmware_shared-config.cmake.in        ########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "####################################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if(NOT TARGET YARP_fw::embObj)\n\n#     include(${CMAKE_CURRENT_LIST_DIR}/icub_firmware_shared-targets.cmake)\n\n# endif()\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 10
  },
  "ElapsedTime" : 1161
}