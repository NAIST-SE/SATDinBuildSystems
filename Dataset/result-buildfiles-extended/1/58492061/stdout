{
  "Repository" : "58492061",
  "Revision" : "HEAD",
  "ObjectId" : "adb1396e4f167f1125a986fef0a675905d2b3d82",
  "CommitTime" : "2019-04-18T19:46:14Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "dae7bedffa6bc7c5f46521e4da1db7c34f232cf4",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we are not building as a part of LLVM, build Cling as an\n\n# standalone project, using LLVM as an external library:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need cmake to support exporting of symbols not only from libraries but\n\n# from executables too. This way cling can find symbols from its own\n\n# executable during runtime.\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Assertions should follow llvm-config's.\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# They are used as destination of target generators.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# DLL platform -- put DLLs into bin.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Check prebuilt llvm/utils.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Seek installed Lit.\n",
        "Line" : 148,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 162,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# From ROOT:\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add appropriate flags for GCC\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Lots of cling is needed at runtime (e.g. Value, or Interpreter::Evaluate()).\n\n# The JIT needs to be able to resolve these symbols from cling; unhide them.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The package needs to be compiler without RTTI information\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add the /std:c++14 flag for Visual Studio 2017 (and up)\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Building as part of ROOT.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Add public headers\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# It may contain unparsed unknown args.\n",
        "Line" : 296,
        "CharPositionInLine" : 32
      },
      "18" : {
        "Text" : "# On Windows exceptions aren’t as generic as an x64 ABI.\n\n# Stack unwinding code must be generated for every function between the\n\n# throw and catch blocks.\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# All of libClingInterpreter is compiled with exceptions, mostly because\n\n# llvm_unreachable throws an exception. Otherwise it could be reduced:\n\n#    Exception.cpp, Interpreter.cpp, IncrementalParser.cpp,\n\n#    IncrementalExecutor.cpp\n",
        "Line" : 308,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# For libClingUserInterface, only UserInterface.cpp uses exceptions.\n",
        "Line" : 314,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# needs to be on before llvm_add_library so flags can be set below\n",
        "Line" : 318,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# /EHs because cling_runtime_internal_throwIfInvalidPointer is extern “C”\n",
        "Line" : 327,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Add empty \"phony\" target\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Building as part of ROOT (CMake)\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Building as part of ROOT (classic)\n",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# and this when building Cling standalone:\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# All targets below may depend on all tablegen'd files.\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# And llvm-intrinsics.\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Add a global check rule now that all subdirectories have been traversed\n\n# and we know the total set of lit testsuites.\n",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Generate a list of CMake library targets so that other CMake projects can\n\n# link against them. LLVM calls its version of this file LLVMExports.cmake, but\n\n# the usual CMake convention seems to be ${Project}Targets.cmake.\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Install a <prefix>/lib/cmake/cling/ClingConfig.cmake file so that\n\n# find_package(Cling) works. Install the target list with it.\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Also copy ClingConfig.cmake to the build directory so that dependent projects\n\n# can build against a build directory of Cling more easily.\n",
        "Line" : 528,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 34
    },
    "cmake/modules/ClingConfig.cmake" : {
      "ObjectId" : "789de48cd82506010e8f466f841432af10f4fd12",
      "LastModified" : "2017-07-23T20:59:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file allows users to call find_package(Cling) and pick up our targets.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cling doesn't have any CMake configuration settings yet because it mostly\n\n# uses LLVM's. When it does, we should move this file to ClingConfig.cmake.in\n\n# and call configure_file() on it.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't just use any llvm / clang: cling needs its own:\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Provide all our library targets to users.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "4b2122ea961ae2bec25c9f503b1cb5c2e957abb8",
      "LastModified" : "2016-01-05T08:14:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "00c22081a6ab59daeb728d909c321051048ec023",
      "LastModified" : "2016-01-05T08:14:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Interpreter/CMakeLists.txt" : {
      "ObjectId" : "840cc0b818d068123a5879d5b0ab9db95cdd91b7",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clingInterpreter depends on Options.inc to be tablegen-ed\n\n# (target ClangDriverOptions) from in-tree builds.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clangSema will make sure all of the dependencies of clingInterpreter are met.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove all -I from CMAKE_CXX_FLAGS\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remove absolute path from CMAKE_CXX_COMPILER\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This should probably be more general...but how?\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FIXME: In some ccache setups we can have a soft link pointing to ccache\n\n# binary. Eg. /usr/local/gcc -> /usr/bin/ccache. Resolving the realpath\n\n# we will get to the ccache and not the intended compiler binary. This\n\n# could be fixed if we run 'gcc -###' which will give us the correct info.\n",
        "Line" : 195,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Test if path compiler is on PATH.\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# This adds a lot of unneccessary flags, but may be useful if there's\n\n# a flag that should be passed to cling.\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# FIXME: Perhaps CLING_CXX_RLTV should have a better name?\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We got nothing, just use whatever CMake is using.\n",
        "Line" : 218,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# If CMAKE_CXX_FLAGS contains --gcc-toolchain= then that should be passed on\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# TODO Refactor these two into common function\n",
        "Line" : 225,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# convert CMAKE_CXX_FLAGS to a list for execute_process\n",
        "Line" : 247,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# In modules builds we 'mount' our own stl modulemap for libstdc++. In order to do this,\n\n# we need to know where is ROOT/cling STL.\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# FIXME: We should use file(GENERATE) cmake command.\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Make sure this goes last so so we can pick up any changes that occured\n\n# Also means cling-compiledata.h.in should be edited never cling-compiledata.h\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "lib/MetaProcessor/CMakeLists.txt" : {
      "ObjectId" : "e753dca3c76cd49effa0b2d1f967cb04de57df80",
      "LastModified" : "2018-03-28T17:29:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/UserInterface/CMakeLists.txt" : {
      "ObjectId" : "a995b7d970874dda54072a88bd2158d0862a828c",
      "LastModified" : "2016-12-20T11:59:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For cling, install textinput *.h in include/cling/UserInterface/textinput.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "lib/UserInterface/textinput/Makefile" : {
      "ObjectId" : "e7105bc7a106200b02f13c333459a6c3fd16c9e4",
      "LastModified" : "2016-01-05T08:14:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##===- cling/lib/UserInterface/Makefile---------------------*- Makefile -*-===##\n\n#\n\n#                     The LLVM Compiler Infrastructure\n\n#\n\n# This file is distributed under the University of Illinois Open Source\n\n# License. See LICENSE.TXT for details.\n\n#\n\n##===----------------------------------------------------------------------===##\n\n#\n\n#  This implements the a C++ interpreter user frontend.\n\n#\n\n##===----------------------------------------------------------------------===##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Utils/CMakeLists.txt" : {
      "ObjectId" : "288857f2a1d08028bf0dbf8f2b38af073d6ef7a3",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "1dde4542414caae5b0a41c0b44ae38fe33182806",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Needed for '%shlibext'\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add a legacy target spelling: cling-test\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "67881875f36c60966aa350d05358ea1e1d392087",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/Jupyter/CMakeLists.txt" : {
      "ObjectId" : "d48e16cae70839fe8a6690b027bf29c7ff977233",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep symbols for JIT resolution\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Solve unresolved symbols bug in unix\n\n#See https://github.com/vgvassilev/cling/issues/114\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#FIXME: I don't know what flags are used in windows\n\n#to include all symbols from a static library\n\n#Maybe the bug is not present in windows and we leave it \n\n#as it is\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#Force all interpreter symbols to be present in the shared library\n\n#this will prevent missing symbol errors because we don't know at\n\n#link time what function calls will be made by the user of \n\n#the shared library\n",
        "Line" : 27,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "tools/demo/CMakeLists.txt" : {
      "ObjectId" : "992cac990a6dbc7ba61143d694f78cfb0795c0b7",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep symbols for JIT resolution\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cling needs at least C++11; so does this demo.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Building as part of cling; all CMake variables are set.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Building as separate project.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This project needs cling.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# The project has one binary:\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ...which links against clingInterpreter (and its dependencies).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Provide LLVMDIR to cling-demp.cpp:\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tools/driver/CMakeLists.txt" : {
      "ObjectId" : "5130933867daa51c7146dd9fab2109849711c880",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keep symbols for JIT resolution\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal string\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# RTTI/C++ symbols\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Compiler added symbols for static variables. NOT for VStudio < 2015\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# new/delete variants needed when linking to static msvc runtime (esp. Debug)\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#??2@YAPEAX_KPEBDH@Z  ## not used in cling\n\n#??_U@YAPEAX_KPEBDH@Z ## not used in cling\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Most (if not all) of these MSVC decided are inlines that aren't exported\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# List to '/EXPORT:sym0 /EXPORT:sym1 /EXPORT:sym2 ...'\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "tools/libcling/CMakeLists.txt" : {
      "ObjectId" : "143d3bdb3e99a4904a161587185c78e96c75894b",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#get_target_property(clingInterpSrc clingInterpreter SOURCES)\n\n#get_target_property(clingMetaSrc clingMetaProcessor SOURCES)\n\n#get_target_property(clingUtilsSrc clingUtils SOURCES)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We do C++...\n\n# set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/libclang.exports)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if(MSVC)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid LNK4197 not to spceify libclang.def here.\n\n# Each functions is exported as \"dllexport\" in include/clang-c.\n\n# KB835326\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#  set(LLVM_EXPORTED_SYMBOL_FILE)\n\n#endif()\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  DEPENDS clang-headers\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  Core\n\n#  Support\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tools/plugins/CMakeLists.txt" : {
      "ObjectId" : "5ca768120f59e22727c9d63f3cce1d64472b0161",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  # If we drop a compatible cmake project in this folder we should automatically\n\n#  # pick it up and build it.\n\n#  function(LISTSUBDIRS result curdir)\n\n#    file(GLOB children RELATIVE ${curdir} ${curdir}/*)\n\n#    set(dirlist \"\")\n\n#    foreach(child ${children})\n\n#      if(IS_DIRECTORY ${curdir}/${child})\n\n#        list(APPEND dirlist ${child})\n\n#      endif()\n\n#      endforeach()\n\n#      set(${result} ${dirlist} PARENT_SCOPE)\n\n#  endfunction()\n\n#\n\n#  LISTSUBDIRS(subdirs ${CMAKE_CURRENT_SOURCE_DIR}/plugins/)\n\n#  foreach(subdir ${SUBDIRS})\n\n#    add_subdirectory(${subdir})\n\n#  endforeach()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/plugins/clad/CMakeLists.txt" : {
      "ObjectId" : "8c184ed003f371e833c497bfe41deec94a7e2581",
      "LastModified" : "2019-04-08T18:59:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify include dirs for clad\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Clad Libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build byproducts only needed by Ninja\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Wrap download, configure and build steps in a script to log output\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# We need the target clangBasic to be built before building clad. However, we\n\n# support building prebuilt clang and adding clangBasic breaks this case.\n\n# Delegate the dependency resolution to the clingInterpreter target (which\n\n# will always depend on clangBasic).\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Wrap download, configure and build steps in a script to log output\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# We need the target clangBasic to be built before building clad. However, we\n\n# support building prebuilt clang and adding clangBasic breaks this case.\n\n# Delegate the dependency resolution to the clingInterpreter target (which\n\n# will always depend on clangBasic).\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Register cladPlugin, cladDifferentiator\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tools/plugins/example/CMakeLists.txt" : {
      "ObjectId" : "30dda3abafbf64805ccf169279366d747ebc1e4f",
      "LastModified" : "2019-03-17T07:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# CLING - the C++ LLVM-based InterpreterG :)\n\n#\n\n# This file is dual-licensed: you can choose to license it under the University\n\n# of Illinois Open Source License or the GNU Lesser General Public License. See\n\n# LICENSE.TXT for details.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure if we are running the testsuite to build clingDemoPlugin before.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1854
}