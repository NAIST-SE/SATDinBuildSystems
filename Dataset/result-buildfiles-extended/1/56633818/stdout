{
  "Repository" : "56633818",
  "Revision" : "HEAD",
  "ObjectId" : "dbd8e0b4bc258dac4c7aa93cf462da67edfdbd4b",
  "CommitTime" : "2018-07-30T01:16:49Z",
  "Files" : {
    "GameBackboneSln/CMakeLists.txt" : {
      "ObjectId" : "ec3a361cf4f50b3edfccf5b8783b89224cfee86f",
      "LastModified" : "2018-07-22T18:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeList.txt : Top-level CMake project file, do global configuration\n\n# and include sub-projects here.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# top project folder\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# project wide output directories\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# dependencies \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# setup keys\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# read file\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# search for sfml key\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# search for tgui key\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# search for boost key\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# SFML and TGUI install path from environment\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add dependencies to cmake module path\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# prepend function from https://stackoverflow.com/a/27630120\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# set posfix\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "GameBackboneSln/GameBackboneBoostUnitTest1/CMakeLists.txt" : {
      "ObjectId" : "e7d479b9aae6887efa48fd63afda2f58b7f1d0f4",
      "LastModified" : "2018-07-29T23:23:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneUnitTest executable \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link to SFML and TGUI\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# declares a test with all boost tests\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "GameBackboneSln/GameBackboneBoostUnitTest1/source/CMakeLists.txt" : {
      "ObjectId" : "5d03c33c0bb1964a4afc9b04815f7dff0bfc8949",
      "LastModified" : "2018-05-08T20:41:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneUnitTests source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneExe/CMakeLists.txt" : {
      "ObjectId" : "ff92b214fca107320a31099cec0317867952b25d",
      "LastModified" : "2018-07-12T05:11:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackbone demo executable \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# link to SFML and TGUI\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is how to link to GB if it was being built from a different CMake process\n\n# find_package(GameBackbone REQUIRED) \n\n# if(GB_FOUND) \n\n#   include_directories(${GB_INCLUDE_DIR}) \n\n#   target_link_libraries(GameBackboneDemo ${GB_LIBRARY}) \n\n# endif() \n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include own header files\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "GameBackboneSln/GameBackboneExe/header/CMakeLists.txt" : {
      "ObjectId" : "9157403de7bb5e61c1771a8fe6ad64055d6faaff",
      "LastModified" : "2018-05-08T20:41:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDemo's header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneExe/source/CMakeLists.txt" : {
      "ObjectId" : "31fc226be77e17d8a29745f09c5b97cb1ce4a20e",
      "LastModified" : "2018-05-08T20:41:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDemo's  source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/CMakeLists.txt" : {
      "ObjectId" : "e348ce1e13f7134480a26aafc0a2a7b3115e5c02",
      "LastModified" : "2018-07-01T22:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackbone library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/header/Backbone/CMakeLists.txt" : {
      "ObjectId" : "e3a29a0b798a51c083683aac4f1c2ffa3a3ce668",
      "LastModified" : "2018-05-08T20:41:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll's backbone header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/header/CMakeLists.txt" : {
      "ObjectId" : "e92ff864e24a8026b400ed3fc6ba3c6e8a68af8f",
      "LastModified" : "2018-05-08T20:41:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll's header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/header/Navigation/CMakeLists.txt" : {
      "ObjectId" : "0e3cecd31517be8d07f71191ddb7b63939f5494f",
      "LastModified" : "2018-05-27T19:03:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll Navigation Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/header/Util/CMakeLists.txt" : {
      "ObjectId" : "6963d64fc603d0c0929ee249d62d7435c8e19408",
      "LastModified" : "2018-05-27T19:03:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll Util Headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/source/Backbone/CMakeLists.txt" : {
      "ObjectId" : "8376810bb596cc0ac039327e5b1d3c61c28a35a0",
      "LastModified" : "2018-05-27T19:03:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll's Backbone source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/source/CMakeLists.txt" : {
      "ObjectId" : "9572da7b1af398f82ecaecbb38972af9170abac3",
      "LastModified" : "2018-05-27T19:03:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll's source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/source/Navigation/CMakeLists.txt" : {
      "ObjectId" : "c0d4c6c2785874b491ed45a22ab5ec570973fa2a",
      "LastModified" : "2018-05-27T19:03:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll's Navigation source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/GameBackboneLib/source/Util/CMakeLists.txt" : {
      "ObjectId" : "36e3ec1081413e8c0f052b093cdfc79d94637f13",
      "LastModified" : "2018-05-27T19:03:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists for GameBackboneDll's Util source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "GameBackboneSln/cmake/Modules/FindGameBackbone.cmake" : {
      "ObjectId" : "13f11cf5601a73d40ecaca6e7dda472d8026c49f",
      "LastModified" : "2018-07-01T22:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find the GB include directory\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# library found\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# if both are found, set TGUI_LIBRARY to contain both\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# error handling\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# fatal error\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# error but continue\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# handle success\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "GameBackboneSln/cmake/Modules/FindTGUI.cmake" : {
      "ObjectId" : "ce7049bacde50ecda48d0627b92e18bed5de5465",
      "LastModified" : "2018-07-01T22:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the TGUI library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# You can enforce a specific version, in the form of MAJOR.MINOR.\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n\n# example:\n\n#   find_package(TGUI)     // no specific version required\n\n#   find_package(TGUI 0.7) // version 0.7\n\n#\n\n# By default, the dynamic libraries of TGUI will be found. To find the static ones instead,\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(TGUI).\n\n# Note that it is SFML_STATIC_LIBRARIES and not TGUI_STATIC_LIBRARIES, since both libraries need to be linked in the same way.\n\n# example:\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(SFML 2 COMPONENTS system window graphics)\n\n#   find_package(TGUI 0.7)\n\n#\n\n# If TGUI is not installed in a standard path, you can use the TGUI_ROOT CMake (or environment) variable\n\n# to tell CMake where TGUI is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - TGUI_LIBRARY_DEBUG:   the name of the debug library (set to TGUI_LIBRARY_RELEASE is no debug version is found)\n\n# - TGUI_LIBRARY_RELEASE: the name of the release library (set to TGUI_LIBRARY_DEBUG is no release version is found)\n\n# - TGUI_LIBRARY:         the name of the library to link to (includes both debug and optimized names if necessary)\n\n# - TGUI_FOUND:           true if either the debug or release library is found\n\n# - TGUI_INCLUDE_DIR:     the path where TGUI headers are located (the directory containing the TGUI/Config.hpp file)\n\n#\n\n# example:\n\n#   find_package(SFML 2 COMPONENTS system window graphics REQUIRED)\n\n#   find_package(TGUI 0.7 REQUIRED)\n\n#   include_directories(${SFML_INCLUDE_DIR} ${TGUI_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES} ${TGUI_LIBRARY})\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the list of search paths for headers and libraries\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find the TGUI include directory\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check the version number\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extract the major and minor version numbers from TGUI/Config.hpp\n\n# we have to handle framework a little bit differently:\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# compare them\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# find the static debug library\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# find the static release library\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# find the dynamic debug library\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# find the dynamic release library\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# choose the entries that fit the requested link type\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# library found\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# if both are found, set TGUI_LIBRARY to contain both\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# debug and not release\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# release and not debug\n",
        "Line" : 154,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# library not found\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# mark variables as advanced so that they won't show up unless the 'advanced' option is checked\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# handle errors\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TGUI version not ok\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# fatal error\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# error but continue\n",
        "Line" : 187,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# handle success\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    }
  },
  "FileTypes" : {
    "CMAKE" : 17
  },
  "ElapsedTime" : 1359
}