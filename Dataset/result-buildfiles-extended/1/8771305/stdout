{
  "Repository" : "8771305",
  "Revision" : "HEAD",
  "ObjectId" : "3603b84d2cef68e1324ce63a3bc6a822c52c3bee",
  "CommitTime" : "2018-04-16T18:53:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f214082474b23e62d21dd0f182c3beb4341ccef7",
      "LastModified" : "2018-04-16T18:53:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# options\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The build system will search for system libs, if it can't find them (e.g. via pkg-config)\n\n# it will take those that are bundled under src/libs. If you don't want that for some reason,\n\n# you can set this to ON and the libs dir will not be taken into account at all.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# end options\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First for the generic no-config case (e.g. with mingw)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Second, for multi-config builds (e.g. msvc)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# variables\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# on mac it e.g. finds the gui launcher - this is not what we want - find a proper way to handle this\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tinclude(${CP_CMAKE_DIR}/windows.cmake)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tinclude(${CP_CMAKE_DIR}/haiku.cmake)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Packagers might want to remove this\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO move into lib cmakefiles\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/FindSDL2_image.cmake" : {
      "ObjectId" : "3fc99e45ab446ed965ec36c1726b8bc0844f81b1",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindSDL2_mixer.cmake" : {
      "ObjectId" : "64d4bbf205cd3c9b4aa3fa14108dbc17896e3949",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindSDL2_net.cmake" : {
      "ObjectId" : "719759381089e6b6263f239148ce37e61b3eca08",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findbox2d.cmake" : {
      "ObjectId" : "727589206b2aa56d0442ccaf3587132eeb7d3814",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findglm.cmake" : {
      "ObjectId" : "b059623b45c327913b16c3f6c2e1b255740036ca",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findgtest.cmake" : {
      "ObjectId" : "541f045b1ab8992cd0a20347bda729a9471de97d",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findlua5.2.cmake" : {
      "ObjectId" : "59c3d8cd1ed441b8609f01d6e186f6c7063f7d5d",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findsdl2.cmake" : {
      "ObjectId" : "8d2e09ce7dc3d80c530cb8b4dda764543a8ab7b1",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findsqlite3.cmake" : {
      "ObjectId" : "0c1a29fe5755b4bd07ac345ae6ae082ad2e486b9",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findtinyxml2.cmake" : {
      "ObjectId" : "5533f0204fd108be394767e000bcdb67c5117d10",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findyajl.cmake" : {
      "ObjectId" : "4328623ea27ad76b8d486ef97b124d6bac14f135",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Findzlib.cmake" : {
      "ObjectId" : "89451dc0d945f957f620586d1cd6fde6fd4a5aad",
      "LastModified" : "2015-12-27T08:17:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/android.cmake" : {
      "ObjectId" : "7921dec19fee03d2a19b5c445e8d3dbcea33a6be",
      "LastModified" : "2017-04-22T16:27:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find the ant tool\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/darwin.cmake" : {
      "ObjectId" : "8e545871a733879d6986bd4a571821794f7dc4cf",
      "LastModified" : "2016-03-08T06:42:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_OSX_ARCHITECTURES \"i386;x86_64\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: fimd sips and iconutil\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#cp_set_properties(${TARGET} MACOSX_BUNDLE TRUE)\n",
        "Line" : 76,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/emscripten.cmake" : {
      "ObjectId" : "89da310adf11fef3cf8724860bb85497087b1ec6",
      "LastModified" : "2015-12-03T19:22:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -s ALLOW_MEMORY_GROWTH=1 -s ASSERTIONS=1 --memory-init-file 0\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s WARN_ON_UNDEFINED_SYMBOLS=1\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=0\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s TOTAL_MEMORY=134217728\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s LABEL_DEBUG=1\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s GL_DEBUG=1\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s FS_LOG=1\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s ASSERTIONS=2\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -g4\")\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --closure 1\")\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s DEAD_FUNCTIONS=\\\"['_glPushClientAttrib','_glPopClientAttrib','_glPointSize']\\\"\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s LEGACY_GL_EMULATION=1\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -O2\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --js-library contrib/installer/html5/lua.js\")\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --memory-init-file 1\")\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/ios.cmake" : {
      "ObjectId" : "4e01fd7208f589e68dc1b3a0248511b9d856294c",
      "LastModified" : "2016-03-09T15:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: sizes for ios?\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# TODO: fimd sips and iconutil\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# TODO: find_host_program\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# TODO: find_host_program\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#cp_set_properties(${TARGET} XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET \"8.1\")\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#cp_set_properties(${TARGET} MACOSX_BUNDLE TRUE)\n",
        "Line" : 116,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/macros.cmake" : {
      "ObjectId" : "12b413848dcb1714ed8388ca1df9ff441d71e1da",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# macros\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#function(message)\n\n#\tlist(GET ARGV 0 TYPE)\n\n#\tif (TYPE STREQUAL FATAL_ERROR)\n\n#\t\tlist(REMOVE_AT ARGV 0)\n\n#\t\t_message(${TYPE} \"${ColorRed}${ARGV}${ColorReset}\")\n\n#\telseif(TYPE STREQUAL WARNING)\n\n#\t\tlist(REMOVE_AT ARGV 0)\n\n#\t\t_message(${TYPE} \"${ColorYellow}${ARGV}${ColorReset}\")\n\n#\telseif(TYPE STREQUAL STATUS)\n\n#\t\tlist(REMOVE_AT ARGV 0)\n\n#\t\t_message(${TYPE} \"${ColorGreen}${ARGV}${ColorReset}\")\n\n#\telseif (ARGV)\n\n#\t\t_message(\"${ARGV}\")\n\n#\tendif()\n\n#endfunction()\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# cp_cast needs this in debug builds\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#\n\n# Install android packages\n\n#\n\n# parameters:\n\n# PACKAGE The package id that you need to install\n\n#\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Prepare android workspace with assets and sdk/ndk commands.\n\n#\n\n# Also adds some helper targets:\n\n# * android-PROJECTNAME-uninstall uninstalls the application\n\n# * android-PROJECTNAME-install installs the application\n\n# * android-PROJECTNAME-start starts the application\n\n# * android-PROJECTNAME-backtrace creates a backtrace from a crash\n\n#\n\n# parameters:\n\n# PROJECTNAME: the project name in lower case letters - used for e.g. resolving the java classes and icons\n\n#              if this is a test project for a specific game, it should start with 'tests_' - as we then just\n\n#              reuse some of the game settings and assets for the tests.\n\n# APPNAME: the normal app name, must not contain whitespaces, but can contain upper case letters.\n\n# VERSION: the version code, e.g. 1.0\n\n# VERSION_CODE: the android version code needed for google play store\n\n#\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: add java activity classes to dependencies to recompile target on java class changes\n",
        "Line" : 263,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#install(DIRECTORY ${ROOT_DIR}/${GAME_BASE_DIR}/${CLEAN_PROJECTNAME} DESTINATION ${ANDROID_BIN_ROOT}/assets/${GAME_BASE_DIR})\n",
        "Line" : 301,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#add_custom_command(TARGET ${PROJECTNAME} POST_BUILD COMMAND ${ANDROID_ANT} uninstall ${ANT_INSTALL_TARGET} WORKING_DIRECTORY ${ANDROID_BIN_ROOT})\n\n#add_custom_command(TARGET ${PROJECTNAME} POST_BUILD COMMAND ${ANDROID_ADB} shell am start -n org.${PROJECTNAME}/org.${PROJECTNAME}.${APPNAME} WORKING_DIRECTORY ${ANDROID_BIN_ROOT})\n",
        "Line" : 348,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#\n\n# put a variable into the global namespace\n\n#\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Add external dependency. It will trigger a find_package and use the system wide install if found, otherwise the bundled version\n\n# If you set USE_BUILTIN the system wide is ignored.\n\n#\n\n# parameters:\n\n# LIB:\n\n# CFLAGS:\n\n# LINKERFLAGS:\n\n# SRCS: the list of source files for the bundled lib\n\n# DEFINES: a list of defines (without -D or /D)\n\n#\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#set(${PREFIX}_COMPILERFLAGS \"${_ADDLIB_DEFINES} ${_ADDLIB_CFLAGS}\")\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#var_global(${PREFIX}_COMPILERFLAGS)\n",
        "Line" : 411,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# mark this library as an external dependency.\n",
        "Line" : 417,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#\n\n# macro for the FindLibName.cmake files. If USE_BUILTIN is set we don't search for system wide installs at all.\n\n#\n\n# parameters:\n\n# LIB: the library we are trying to find\n\n# HEADER: the header we are trying to find\n\n# SUFFIX: suffix for the include dir\n\n# HEADERONLY: lib is a header only dependency\n\n# VERSION: the operator and version that is given to the pkg-config call (e.g. \">=1.0\")\n\n#\n\n# Example: cp_find(SDL2_image SDL_image.h SDL2 FALSE)\n\n#\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Fink\n",
        "Line" : 450,
        "CharPositionInLine" : 7
      },
      "15" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 451,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Blastwave\n",
        "Line" : 452,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "#cp_message(\"=> resolved dependency ${DEP} for ${LIB}\")\n",
        "Line" : 539,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#cp_message(\"=> resolved dependency ${DEP} for ${LIB}\")\n",
        "Line" : 548,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#\n\n# set up the binary for the application. This will also set up platform specific stuff for you\n\n#\n\n# Example: cp_add_executable(TARGET SomeTargetName SRCS Source.cpp Main.cpp WINDOWED APPNAME \"Some App Name\" VERSION 1.0 VERSION_CODE 1)\n\n#\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# tests have different install behaviour\n",
        "Line" : 675,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# TODO: broken\n",
        "Line" : 686,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# by default, put system related files into the current binary dir on install\n",
        "Line" : 725,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# by default, put data files into the current binary dir on install\n",
        "Line" : 727,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# by default, put the binary into a subdir with the target name\n",
        "Line" : 729,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "#set_target_properties(${_EXE_TARGET} PROPERTIES RESOURCE ${ROOT_DIR}/${GAME_BASE_DIR})\n",
        "Line" : 790,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# install relative to /usr/<APPNAME>\n",
        "Line" : 889,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "#\n\n# parameters:\n\n# The code to check must be the first argument\n\n# CXX|C: Defines which compiler should be used\n\n# FLAGS: The compiler flags to use\n\n# VAR: The cmake variable the result is exported into\n\n# INCLUDE_DIRS: a list of include dirs that should be used\n\n#\n\n# Example: cp_check_source_compiles(CXX FLAGS \"--some-compiler-flag --yet-another-one\" VAR HAVE_COMPILE_FLAGS \"int main(int argc, char *argv[]) {return 0;}\")\n\n#\n",
        "Line" : 902,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "cmake/pack.cmake" : {
      "ObjectId" : "b543f2b079aa16a87c42ee9b1d743b6c34704e18",
      "LastModified" : "2015-12-03T20:05:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE ON)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/sdks.cmake" : {
      "ObjectId" : "7f32c981ed24a75f2082ffb5b6c6f1ed81ac5452",
      "LastModified" : "2016-02-04T10:55:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: support 32 bit\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# TODO: install android sdk and ndk\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: install mxe\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/toolchains/android-toolchain.cmake" : {
      "ObjectId" : "e7b5d916aa4b8c0cf6bd9c4b22367730a6ebbdcd",
      "LastModified" : "2017-03-27T12:40:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# API level\n",
        "Line" : 2,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 1
    },
    "cmake/toolchains/darwin-toolchain.cmake" : {
      "ObjectId" : "65d466075de4a474446ac83fc2cdd1df57ba7af6",
      "LastModified" : "2015-12-03T19:22:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/toolchains/haiku-toolchain.cmake" : {
      "ObjectId" : "f83e626627e6d38c8b0d6712d1c84f891a513a51",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/toolchains/ios-toolchain.cmake" : {
      "ObjectId" : "9147030e013c853136a855612b7ee13e71f7dc1e",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR or SIMULATOR64\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Standard settings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Required as of cmake 2.8.10\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force the compilers to gcc for iOS\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Setup building for arm64 or not\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 121,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Setup iOS developer location unless specified manually with CMAKE_IOS_DEVELOPER_ROOT\n\n# Note Xcode 4.3 changed the installation location, choose the most recent one available\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# set the architecture for iOS\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This little macro lets you set any XCode specific property\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "cmake/toolchains/linux-toolchain.cmake" : {
      "ObjectId" : "143d4063084ee279a04794341f892ed79c6ead36",
      "LastModified" : "2018-04-16T18:53:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# might also be in libc\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "cmake/toolchains/nacl-toolchain.cmake" : {
      "ObjectId" : "903e24911801f97782d9d242f8a35930cad9767d",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/toolchains/steamlink-toolchain.cmake" : {
      "ObjectId" : "1d640fc21769338e3ee80e754f6301e8eae9e006",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# see https://cmake.org/Wiki/CMake_Useful_Variables\n\n# see https://cmake.org/Wiki/CMake_Cross_Compiling\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Workaround for http://www.cmake.org/Bug/view.php?id=14075\n",
        "Line" : 12,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 2
    },
    "cmake/toolchains/windows-toolchain.cmake" : {
      "ObjectId" : "9664b3ea835d2098f08d91158f5e68a76b168074",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/caveexpress/CMakeLists.txt" : {
      "ObjectId" : "cb52ea7b602f7b083b823007371256cac735cca6",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/caveexpress/client/CMakeLists.txt" : {
      "ObjectId" : "3ccd14903f3aaf9a67935ab7a1baaed3b8952699",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/caveexpress/main/CMakeLists.txt" : {
      "ObjectId" : "ff32417fc56c6f289f385c9bf36793760a362139",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/caveexpress/server/CMakeLists.txt" : {
      "ObjectId" : "5d5c205ced97a1753f0cc75841157bfa5930a027",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/caveexpress/shared/CMakeLists.txt" : {
      "ObjectId" : "b14b123f66bfe72d66468c8af70e07ea9cc1ec07",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/caveexpress/tests/CMakeLists.txt" : {
      "ObjectId" : "32aa203e0aaf555e6e5af2c51ea06c59bf377a9e",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/caveexpress/tools/CMakeLists.txt" : {
      "ObjectId" : "8f117f917704386187de330e943d72edaf32035e",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cavepacker/CMakeLists.txt" : {
      "ObjectId" : "cb52ea7b602f7b083b823007371256cac735cca6",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cavepacker/client/CMakeLists.txt" : {
      "ObjectId" : "aa65b88e509785510c2416751f8ca0feaf717ac2",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cavepacker/main/CMakeLists.txt" : {
      "ObjectId" : "2bd20574397cb18fa6f73fa4b1c0d73967f58d03",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cavepacker/server/CMakeLists.txt" : {
      "ObjectId" : "3fc7dc266e90e9045053279994d0f6a9ca526bb2",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cavepacker/shared/CMakeLists.txt" : {
      "ObjectId" : "06b31c9ccb0bdc8f68a0d1529b868600f30ee7b0",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cavepacker/tests/CMakeLists.txt" : {
      "ObjectId" : "250d3d944d0be9739395d50d7eb0a0b88d312b75",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cavepacker/tools/CMakeLists.txt" : {
      "ObjectId" : "9fa4d52fae496166395c1b07c8e3a434880b5087",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/CMakeLists.txt" : {
      "ObjectId" : "fa53504cb2e09cdb383fd675af2798685aa8b54d",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/SDL2_image/CMakeLists.txt" : {
      "ObjectId" : "6de730837087296fdc866175d41f55af76b415ea",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO\n\n#-O3 -fstrict-aliasing -fprefetch-loop-arrays\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libs/SDL2_mixer/CMakeLists.txt" : {
      "ObjectId" : "45ffc03056866c0e541e7c20f9f034010339d05d",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/SDL2_net/CMakeLists.txt" : {
      "ObjectId" : "43bc12277f8b7e7f7670103afb856c2a249f7926",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/box2d/CMakeLists.txt" : {
      "ObjectId" : "f1f762a030b03e35af05023c99a410482be2569a",
      "LastModified" : "2018-04-18T09:29:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# system wide lib must be checked for compatibility if not found via pkg-config\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If not found system wide, we have to include the bundled header directory.\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "src/libs/glm/CMakeLists.txt" : {
      "ObjectId" : "acdb895ca7b85809306e04bf9b41c97ae93de69c",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/gtest/CMakeLists.txt" : {
      "ObjectId" : "72d8405685a7d843caab24c3fb90f901d808cca7",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/lua5.2/CMakeLists.txt" : {
      "ObjectId" : "87c20d189fd22765c228a3586c59b6f24c44d7b0",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/sdl2/CMakeLists.txt" : {
      "ObjectId" : "231e7e830de4536ed1297c1cb62dba5215443539",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# General source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# General settings\n\n# Edit include/SDL_version.h and change the version, then:\n\n#   SDL_MICRO_VERSION += 1;\n\n#   SDL_INTERFACE_AGE += 1;\n\n#   SDL_BINARY_AGE += 1;\n\n# if any functions have been added, set SDL_INTERFACE_AGE to 0.\n\n# if backwards compatibility has been broken,\n\n# set SDL_BINARY_AGE and SDL_INTERFACE_AGE to 0.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Calculate a libtool-like version number\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# General settings & flags\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check for 64 or 32 bit\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Get the platform\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: iOS?\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Don't mistake osx for unix\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# JavaScript does not yet have threading support, so disable pthreads when building for Emscripten.\n",
        "Line" : 151,
        "CharPositionInLine" : 40
      },
      "9" : {
        "Text" : "# Default option knobs\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Compiler info\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# VisualStudio 8.0+\n",
        "Line" : 174,
        "CharPositionInLine" : 34
      },
      "12" : {
        "Text" : "#set(CMAKE_C_FLAGS \"/ZI /WX- /\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Default flags, if not set otherwise\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Hackish, but does the trick on Win32\n",
        "Line" : 192,
        "CharPositionInLine" : 37
      },
      "15" : {
        "Text" : "# Make sure /RTC1 is disabled, otherwise it will use functions from the CRT\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Those are used for pkg-config and friends, so that the SDL2.pc, sdl2-config,\n\n# etc. are created correctly.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Emscripten toolchain has a nonempty default value for this, and the checks \n\n# in this file need to change that, so remember the original value, and \n\n# restore back to that afterwards. For check_function_exists() to work in\n\n# Emscripten, this value must be at its default value.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# We build SDL on cygwin without the UNIX emulation layer\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# General includes\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# All these ENABLED_BY_DEFAULT vars will default to ON if not specified, so\n\n#  you only need to have a platform override them if they are disabling.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Set up default values for the currently supported set of subsystems:\n\n# Emscripten/Javascript does not have assembly support, a dynamic library \n\n# loading architecture, low-level CPU inspection or multithreading.\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#set_option(DEPENDENCY_TRACKING \"Use gcc -MMD -MT dependency tracking\" ON)\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO: We should (should we?) respect cmake's ${BUILD_SHARED_LIBS} flag here\n\n# The options below are for compatibility to configure's default behaviour.\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Do nada - use optimization settings to determine the assertion level\n",
        "Line" : 348,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Compiler option evaluation\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Check for -Wall first, so later things can override pieces of it.\n",
        "Line" : 364,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#set(CMAKE_REQUIRED_FLAGS \"-Wl,--no-undefined\")\n\n#check_c_compiler_flag(\"\" HAVE_NO_UNDEFINED)\n\n#set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\n\n#if(HAVE_NO_UNDEFINED)\n\n#  list(APPEND EXTRA_LDFLAGS \"-Wl,--no-undefined\")\n\n#endif()\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# TODO: Those all seem to be quite GCC specific - needs to be\n\n# reworked for better compiler support\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if only HAVE_ALTIVEC_H_HDR is set\n",
        "Line" : 578,
        "CharPositionInLine" : 31
      },
      "30" : {
        "Text" : "# TODO: SDL_cpuinfo.h needs to support the user's configuration wish\n\n# for MSVC - right now it is always activated\n",
        "Line" : 587,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# TODO:\n\n#else()\n\n#  if(USE_GCC OR USE_CLANG)\n\n#    list(APPEND EXTRA_CFLAGS \"-mno-sse\" \"-mno-sse2\" \"-mno-sse3\" \"-mno-mmx\")\n\n#  endif()\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# TODO: Can't deactivate on FreeBSD? w/o LIBC, SDL_stdinc.h can't define\n\n# anything.\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# needed for M_PI\n",
        "Line" : 629,
        "CharPositionInLine" : 41
      },
      "34" : {
        "Text" : "# TODO: refine the mprotect check\n",
        "Line" : 647,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Enable/disable various subsystems of the SDL library\n",
        "Line" : 703,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Haptic requires some private functions from the joystick subsystem.\n",
        "Line" : 716,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# TODO: in configure.in, the test for LOADSO and SDL_DLOPEN is a bit weird:\n\n# if LOADSO is not wanted, SDL_LOADSO_DISABLED is set\n\n# If however on Unix or APPLE dlopen() is detected via CheckDLOPEN(),\n\n# SDL_LOADSO_DISABLED will not be set, regardless of the LOADSO settings\n",
        "Line" : 726,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# General SDL subsystem options, valid for all platforms\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# CheckDummyAudio/CheckDiskAudio - valid for all platforms\n",
        "Line" : 733,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Relevant for Unix/Darwin only\n",
        "Line" : 749,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#enable gles\n",
        "Line" : 800,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Platform-specific options and settings\n",
        "Line" : 811,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Hide noisy warnings that intend to aid mostly during initial stages of porting a new\n\n# project. Uncomment at will for verbose cross-compiling -I/../ path info.\n",
        "Line" : 813,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "#enable gles\n",
        "Line" : 856,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Need to check for Raspberry PI first and add platform specific compiler flags, otherwise the test for GLES fails!\n",
        "Line" : 894,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# seems to be BSD specific - limit the test to BSD only?\n",
        "Line" : 977,
        "CharPositionInLine" : 20
      },
      "47" : {
        "Text" : "# Prevent codegen that would use the VC runtime libraries.\n",
        "Line" : 1058,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Check for DirectX\n",
        "Line" : 1065,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# xinput.h may need windows.h, but doesn't include it itself.\n",
        "Line" : 1078,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# TODO: change $ENV{DXSDL_DIR} to get the path from the include checks\n",
        "Line" : 1098,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "# requires SDL_LOADSO on Windows (IME, DX, etc.)\n",
        "Line" : 1132,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Libraries for Win32 native and MinGW\n",
        "Line" : 1175,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# TODO: in configure.in the check for timers is set on\n\n# cygwin | mingw32* - does this include mingw32CE?\n",
        "Line" : 1178,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# TODO: rework this for proper MacOS X, iOS and Darwin support\n",
        "Line" : 1259,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Requires the darwin file implementation\n",
        "Line" : 1261,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Actually load the frameworks at the end so we don't duplicate include.\n",
        "Line" : 1345,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# iOS hack needed - http://code.google.com/p/ios-cmake/ ?\n",
        "Line" : 1393,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# TODO: Use FIND_PACKAGE(OpenGL) instead\n",
        "Line" : 1430,
        "CharPositionInLine" : 6
      },
      "59" : {
        "Text" : "# Dummies\n\n# configure.in does it differently:\n\n# if not have X\n\n#   if enable_X {  SDL_X_DISABLED = 1 }\n\n#   [add dummy sources]\n\n# so it always adds a dummy, without checking, if it was actually requested.\n\n# This leads to missing internal references on building, since the\n\n# src/X/*.c does not get included.\n",
        "Line" : 1442,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# results in unresolved symbols on OSX\n",
        "Line" : 1452,
        "CharPositionInLine" : 33
      },
      "61" : {
        "Text" : "# We always need to have threads and timers around\n",
        "Line" : 1474,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Append the -MMD -MT flags\n\n# if(DEPENDENCY_TRACKING)\n\n#   if(COMPILER_IS_GNUCC)\n\n#     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -MMD -MT \\$@\")\n\n#   endif()\n\n# endif()\n",
        "Line" : 1490,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Prepare the flags and remove duplicates\n",
        "Line" : 1504,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Compat helpers for the configuration files\n",
        "Line" : 1517,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Clean up the different lists\n",
        "Line" : 1529,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 66
    },
    "src/libs/sdl2/cmake/macros.cmake" : {
      "ObjectId" : "61c70bc9ad7bd9e3126b61dc26378dac426bca0b",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Message Output\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix for each element\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Do not use string(REPLACE \";\" \" \") here to avoid messing up list\n\n# entries\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/libs/sdl2/cmake/sdlchecks.cmake" : {
      "ObjectId" : "6f56d910ec927c93ff3a2f3aa55cad7334aed2cd",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# reduce the library name for shared linking\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# resolves symlinks\n",
        "Line" : 9,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ALSA_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - PULSEAUDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - ESD_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ARTS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO\n",
        "Line" : 212,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - NAS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: set include paths properly, so the NAS headers are found\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - SNDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: set include paths properly, so the sndio headers are found\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - FUSIONSOUND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Requires:\n\n# - LIBSAMPLERATE\n\n# Optional:\n\n# - LIBSAMPLERATE_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - X11_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check for multitouch\n",
        "Line" : 467,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Requires:\n\n# - EGL\n\n# - PkgCheckModules\n\n# Optional:\n\n# - MIR_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Requires:\n\n# - EGL\n\n# - PkgCheckModules\n\n# Optional:\n\n# - WAYLAND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# We have to generate some protocol interface code for some various Wayland features.\n",
        "Line" : 595,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# We have to generate some protocol interface code for some unstable Wayland features.\n",
        "Line" : 651,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Requires:\n\n# - n/a\n\n#\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Apple always has Cocoa.\n",
        "Line" : 694,
        "CharPositionInLine" : 14
      },
      "22" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - DIRECTFB_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 707,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 768,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 787,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Requires:\n\n# - nada\n\n# Optional:\n\n# - THREADS opt\n\n# Sets:\n\n# PTHREAD_CFLAGS\n\n# PTHREAD_LIBS\n",
        "Line" : 820,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# causes Carbon.p complaints?\n\n# set(PTHREAD_CFLAGS \"-D_REENTRANT -D_THREAD_SAFE\")\n",
        "Line" : 837,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Run some tests\n",
        "Line" : 869,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Can be faked, if necessary\n\n# Can be faked, if necessary\n",
        "Line" : 937,
        "CharPositionInLine" : 65
      },
      "30" : {
        "Text" : "# Requires\n\n# - nada\n\n# Optional:\n\n# Sets:\n\n# USB_LIBS\n\n# USB_CFLAGS\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 1093,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "src/libs/sdl2/include/SDL_config.h.cmake" : {
      "ObjectId" : "7c82e528db7c2f191380d1c897e6c6a29a1fd244",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2017 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C language features */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Useful headers */",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* C library functions */",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable system power support */",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable dynamic libsamplerate support */",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "src/libs/sqlite3/CMakeLists.txt" : {
      "ObjectId" : "b3a128fcbc66f0be5df095640bb5cd3feb82efc0",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/yajl/CMakeLists.txt" : {
      "ObjectId" : "608b20caeac1102ee80a073f2418185f08e92746",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libs/zlib/CMakeLists.txt" : {
      "ObjectId" : "27aaaa8034c7eba8275bbda5e52b83dd32c41cbf",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/miniracer/CMakeLists.txt" : {
      "ObjectId" : "7a92b3361b96183cd702ce7912a3fc578b1d447e",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/miniracer/client/CMakeLists.txt" : {
      "ObjectId" : "f0624d75d697016ea5f393d2df10f27f9debf68d",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/miniracer/main/CMakeLists.txt" : {
      "ObjectId" : "36bd201c161c953da6a82364d5cbbff5a31556ed",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/miniracer/server/CMakeLists.txt" : {
      "ObjectId" : "b6c318e862c7c22a67193fc66fa8c345439dc334",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/miniracer/shared/CMakeLists.txt" : {
      "ObjectId" : "f7475309102b52e6267bef9dd7769127fa00ea39",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/miniracer/tests/CMakeLists.txt" : {
      "ObjectId" : "5922f3d07e0a70cb1b70b2182d9af2776dff8d6a",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/CMakeLists.txt" : {
      "ObjectId" : "307a5a6111182410b1a5707cc6d4ac053313b0cb",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/campaign/CMakeLists.txt" : {
      "ObjectId" : "6f93dc2031059d0e99357b5ef62bdc45377c87af",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/client/CMakeLists.txt" : {
      "ObjectId" : "fb5f576b669209642db3a4935f7b6414e7db8378",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/common/CMakeLists.txt" : {
      "ObjectId" : "c6e0d9e4e2ba0fcde343e4db1fd43f7972ec2b72",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/game/CMakeLists.txt" : {
      "ObjectId" : "80270ace53a5620330aa845b674ee4d4b1c82dfb",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/gfx/CMakeLists.txt" : {
      "ObjectId" : "5a14fe3f511eb96fba0f115336465a412f1ee8fe",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/mainloop/CMakeLists.txt" : {
      "ObjectId" : "f6ec4c2651ff8368309fb81555aae1a3602595cd",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/network/CMakeLists.txt" : {
      "ObjectId" : "1bcbb1e9ed816a08e4ee79f32b09d79e45369243",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/particles/CMakeLists.txt" : {
      "ObjectId" : "a8fc03837435b83cc54f0d1a79656d36ca8c38a8",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/physics/CMakeLists.txt" : {
      "ObjectId" : "80b64b6200353ca01554ac5c345bb0be723e92e8",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/service/CMakeLists.txt" : {
      "ObjectId" : "90d10b91a423a4f564e851f86b33733cad1b40af",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/sound/CMakeLists.txt" : {
      "ObjectId" : "49c2fb26072bb47d2a92bb44007456b5ca6a0daa",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/sprites/CMakeLists.txt" : {
      "ObjectId" : "e97aa5757742bd9e5b20dc9f8237de3d56235579",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/textures/CMakeLists.txt" : {
      "ObjectId" : "ebffd00b4e787cc7e750cd75c60df95927119c86",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/ui/CMakeLists.txt" : {
      "ObjectId" : "b65d4486c2aa0debdfc0bc86de805763883391d3",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/CMakeLists.txt" : {
      "ObjectId" : "d8bb30973fb23043833550d5e727c4dc42323146",
      "LastModified" : "2017-12-12T20:13:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 78,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 4399
}