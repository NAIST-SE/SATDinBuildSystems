{
  "Repository" : "13619629",
  "Revision" : "HEAD",
  "ObjectId" : "3935b6205145ed4e7000239ea04497081699f48c",
  "CommitTime" : "2018-12-13T20:31:16Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b8341b9ce34e4b745bd23482ad841aaf7ecc3d4b",
      "LastModified" : "2018-08-09T00:28:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2011-16 DyND Developers\n\n# BSD 2-Clause License, see LICENSE.txt\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only add these options if this is the top level CMakeLists.txt\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################\n\n# Some options configurable from the CMAKE command execution\n\n#\n\n# -DDYND_SHARED_LIB=ON/OFF, whether to build a shared or a static library.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -DDYND_LLVM=ON/OFF, whether to build libdynd with or without LLVM support\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# -DDYND_INSTALL_LIB=ON/OFF, whether to install libdynd into the\n\n#   CMAKE_INSTALL_PREFIX. Its main purpose is to allow dynd-python and\n\n#   libdynd to be built inside the source tree of another project, like\n\n#   in the libraries/libdynd subdirectory of dynd-python.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# -DDYND_BUILD_TESTS=ON/OFF, whether to build the googletest unit tests.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# -DDYND_BUILD_BENCHMARKS=ON/OFF, whether to build the Google benchmarks\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -DDYND_BUILD_PLUGINS=ON/OFF, whether to build the DyND plugins\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# -DDYND_BUILD_DOCS=ON/OFF, whether or not to build the documentation.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# -DDYND_COVERAGE=ON/OFF, whether to generate test coverage information\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n################################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# -WX: Treat warnings as errors\n\n# -bigobj: Allow lots of symbols (assignment_kernels.cpp and assignment_kernels.cu need this flag)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If this is the clang-cl compiler.\n\n# Don't enable -WX here yet.\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# LLVM, disabled for now\n\n#add_definitions(${LLVM_DEFINITIONS})\n\n#include_directories(${LLVM_INCLUDE_DIRS})\n\n#llvm_map_components_to_libnames(LLVM_LINK_LIBS core option target bitreader support profiledata codegen irreader linker instrumentation objcarcopts lto)\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Get the git revision\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Extract the version number from the version string\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Eval\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Types\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Memory blocks\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Main\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Included here for ease of editing in IDEs\n",
        "Line" : 255,
        "CharPositionInLine" : 32
      },
      "21" : {
        "Text" : "# Types\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Callables\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Kernels\n",
        "Line" : 298,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Main\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Included here for ease of editing in IDEs\n",
        "Line" : 403,
        "CharPositionInLine" : 37
      },
      "26" : {
        "Text" : "#set_source_files_properties(include/dynd/kernels/compare_kernels.hpp PROPERTIES COMPILE_FLAGS -Wno-sign-compare)\n\n#set_source_files_properties(src/dynd/func/comparison.cpp PROPERTIES COMPILE_FLAGS -Wno-sign-compare)\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#if(DYND_LLVM)\n\n#  if(LLVM_FOUND)\n\n#    add_subdirectory(plugin)\n\n#\n\n#    add_dependencies(dynd_OBJ dynd_plugin)\n\n#    set_target_properties(dynd_OBJ PROPERTIES COMPILE_FLAGS \"-Xclang -load -Xclang plugin/libdynd_plugin.so\")\n\n#  endif()\n\n#endif()\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# xcode doesn't like when all cpp files are contained in an OBJECT library\n",
        "Line" : 481,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Add preprocessor definitions from CMake\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# The rpath stuff is confusing, and this is our attempt to get it right.\n\n# It's been complicated by a bug in certain versions of CMake that plays\n\n# particularly badly with CUDA. If anyone knows the \"right\" way to do this,\n\n# that would be great.\n\n#\n\n# See http://stackoverflow.com/questions/22885207/opencv-and-pcl-builds-on-osx-result-in-malformed-object-load-command-cmdsize\n\n#\n",
        "Line" : 529,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# If we're not making an installable static library,\n\n# link the sublibraries normally\n",
        "Line" : 549,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Create a libdynd-config script\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Install the libdyndt binary\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Install the libdynd binary\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Install the libdynd headers\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Install the libdynd-config script\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "0f691a6e7a165e777688fa4ebd37fc57cc57e25b",
      "LastModified" : "2017-12-23T20:42:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2011-16 DyND Developers\n\n# BSD 2-Clause License, see LICENSE.txt\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    benchmark_dispatch_map.cpp\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    func/benchmark_apply.cpp\n\n#    func/benchmark_arithmetic.cpp\n\n#    func/benchmark_random.cpp\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#        profiler\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If installation is requested, install the program\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/CMakeParseArguments.cmake" : {
      "ObjectId" : "8553f38f5f090a2305c095ba5a8ef34427c19ed5",
      "LastModified" : "2015-03-07T21:02:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n#\n\n#\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords>\n\n# <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions\n\n# for parsing the arguments given to that macro or function.  It\n\n# processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e.  keywords which can be used when calling the macro without any\n\n# value following, like e.g.  the OPTIONAL keyword of the install()\n\n# command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g.  DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this\n\n# macro which can be followed by more than one value, like e.g.  the\n\n# TARGETS or FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.  These\n\n# variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see\n\n# whether your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments\n\n# as the real install() command:\n\n#\n\n# ::\n\n#\n\n#    function(MY_INSTALL)\n\n#      set(options OPTIONAL FAST)\n\n#      set(oneValueArgs DESTINATION RENAME)\n\n#      set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#      cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\"\n\n#                            \"${multiValueArgs}\" ${ARGN} )\n\n#      ...\n\n#\n\n#\n\n#\n\n# Assume my_install() has been called like this:\n\n#\n\n# ::\n\n#\n\n#    my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n#\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the\n\n# following variables:\n\n#\n\n# ::\n\n#\n\n#    MY_INSTALL_OPTIONAL = TRUE\n\n#    MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#    MY_INSTALL_DESTINATION = \"bin\"\n\n#    MY_INSTALL_RENAME = \"\" (was not used)\n\n#    MY_INSTALL_TARGETS = \"foo;bar\"\n\n#    MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#    MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n#\n\n#\n\n# You can then continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g.  if directly after a\n\n# one_value_keyword another recognized keyword follows, this is\n\n# interpreted as the beginning of the new option.  E.g.\n\n# my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION\n\n# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 123,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 124,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 125,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/CodeCoverage.cmake" : {
      "ObjectId" : "ec555454b61ac28b77b8f2a916af596bbfbfb7fd",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This plugin is based on one downloaded from:\n\n#\n\n#  https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake\n\n#\n\n# and then modified for use with libdynd\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#        cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#        make\n\n#        make my_coverage_target\n\n#\n\n#\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check prereqs\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 93,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#                                               MUST return ZERO always, even on errors.\n\n#                                               If not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 134,
        "CharPositionInLine" : 16
      },
      "10" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 138,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : "# Setup target\n",
        "Line" : 140,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Run tests\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 164,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 17
    },
    "cmake/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "c433fa8ed4e1d9e7fb8d5ecb026c3536c9449050",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "abdd3079e13e2f5f44556c6b393844747042b36a",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 69,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 73,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 76,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# string\n",
        "Line" : 77,
        "CharPositionInLine" : 33
      },
      "22" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 139,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 141,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Echo the command\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Run the command\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Delete the target file\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Note that this will remove all occurances of -G.\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Generate the code\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 49
    },
    "cmake/FindCUDA_DyND.cmake" : {
      "ObjectId" : "c4065cec7aea5b9620f1f76b9cd3fdd2d96f54f5",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\n\n# windows, and mac and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard find_package arguments of\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\n\n#      the command is run from withing VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must preceed configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alterative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 338,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 353,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 382,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 396,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 398,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 400,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 405,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 410,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 416,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n",
        "Line" : 457,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 516,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 518,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\n",
        "Line" : 551,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\n",
        "Line" : 554,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 561,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Now search default paths\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 581,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Compute the version.\n",
        "Line" : 607,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 614,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Support for arm cross compilation with CUDA 5.5\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Target CPU architecture\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 641,
        "CharPositionInLine" : 21
      },
      "52" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 662,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 673,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 693,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 706,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 740,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 747,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\n",
        "Line" : 756,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 765,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 801,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 803,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 828,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 843,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 867,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 873,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "##############################################################################\n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 887,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 911,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 918,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 924,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 929,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 940,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 959,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 985,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 989,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1000,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1003,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1005,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1009,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1012,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1018,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1021,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1039,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1044,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1048,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# Emulation.\n",
        "Line" : 1050,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1053,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# $(VCInstallDir)/bin.\n",
        "Line" : 1079,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1089,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1099,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n\n# Remove duplicate entries which may be present since include_directories\n\n# in CMake >= 2.8.8 does not remove them.\n",
        "Line" : 1101,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1112,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1122,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1125,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# STATIC\n",
        "Line" : 1131,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1137,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1139,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1145,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1154,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1157,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1161,
        "CharPositionInLine" : 6
      },
      "119" : {
        "Text" : "# nvcc should not propagate -std=c++11 to the host compiler, as it causes warnings and errors\n",
        "Line" : 1180,
        "CharPositionInLine" : 6
      },
      "120" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1188,
        "CharPositionInLine" : 4
      },
      "121" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 1194,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1206,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the CUDA source files.\n",
        "Line" : 1209,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1212,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# Override the file extension for any file marked as a CUDA_SOURCE_FILE\n",
        "Line" : 1214,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# Force nvcc to process this file as CUDA source\n",
        "Line" : 1217,
        "CharPositionInLine" : 6
      },
      "127" : {
        "Text" : "# Allow per source file overrides of the format.\n",
        "Line" : 1220,
        "CharPositionInLine" : 6
      },
      "128" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1242,
        "CharPositionInLine" : 8
      },
      "129" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1250,
        "CharPositionInLine" : 6
      },
      "130" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1263,
        "CharPositionInLine" : 6
      },
      "131" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1281,
        "CharPositionInLine" : 6
      },
      "132" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1291,
        "CharPositionInLine" : 6
      },
      "133" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1295,
        "CharPositionInLine" : 31
      },
      "134" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1299,
        "CharPositionInLine" : 6
      },
      "135" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1311,
        "CharPositionInLine" : 6
      },
      "136" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1314,
        "CharPositionInLine" : 6
      },
      "137" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1321,
        "CharPositionInLine" : 6
      },
      "138" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1329,
        "CharPositionInLine" : 6
      },
      "139" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1332,
        "CharPositionInLine" : 6
      },
      "140" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1349,
        "CharPositionInLine" : 6
      },
      "141" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1357,
        "CharPositionInLine" : 6
      },
      "142" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1360,
        "CharPositionInLine" : 8
      },
      "143" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1364,
        "CharPositionInLine" : 8
      },
      "144" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1377,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1382,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1390,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1405,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1411,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1423,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1429,
        "CharPositionInLine" : 27
      },
      "151" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1434,
        "CharPositionInLine" : 4
      },
      "152" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1442,
        "CharPositionInLine" : 4
      },
      "153" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1449,
        "CharPositionInLine" : 4
      },
      "154" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1454,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1464,
        "CharPositionInLine" : 4
      },
      "156" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1471,
        "CharPositionInLine" : 4
      },
      "157" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1476,
        "CharPositionInLine" : 4
      },
      "158" : {
        "Text" : "# VS 2010 and 2012 have this problem.  If future versions fix this issue,\n\n# it should still work, it just won't be as nice as the other method.\n",
        "Line" : 1482,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1508,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1517,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1520,
        "CharPositionInLine" : 2
      },
      "162" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1525,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# Add the library.\n",
        "Line" : 1529,
        "CharPositionInLine" : 2
      },
      "164" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1536,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1545,
        "CharPositionInLine" : 2
      },
      "166" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1555,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1564,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1566,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1569,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# Add the library.\n",
        "Line" : 1573,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1580,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1589,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1599,
        "CharPositionInLine" : 0
      },
      "174" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1606,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1608,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1616,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1625,
        "CharPositionInLine" : 0
      },
      "178" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1634,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1643,
        "CharPositionInLine" : 0
      },
      "180" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1653,
        "CharPositionInLine" : 0
      },
      "181" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1666,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1679,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1685,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1696,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 185
    },
    "cmake/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "2de1fb373cd0c2b99d0cd3edb27f60ecd2d80446",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageHandleStandardArgs\n\n# -----------------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ...  )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to\n\n# find_package().  It also sets the <packagename>_FOUND variable.  The\n\n# package is considered found if all variables <var1>...  listed contain\n\n# valid results, e.g.  valid filepaths.\n\n#\n\n# There are two modes of this function.  The first argument in both\n\n# modes is the name of the Find-module where it is called (in original\n\n# casing).\n\n#\n\n# The first simple mode looks like this:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name>\n\n#       (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n#\n\n# If the variables <var1> to <varN> are all valid, then\n\n# <UPPERCASED_NAME>_FOUND will be set to TRUE.  If DEFAULT_MSG is given\n\n# as second argument, then the function will generate itself useful\n\n# success and error messages.  You can also supply a custom error\n\n# message for the failure case.  This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#\n\n# ::\n\n#\n\n#     FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME\n\n#       [FOUND_VAR <resultVar>]\n\n#       [REQUIRED_VARS <var1>...<varN>]\n\n#       [VERSION_VAR   <versionvar>]\n\n#       [HANDLE_COMPONENTS]\n\n#       [CONFIG_MODE]\n\n#       [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# In this mode, the name of the result-variable can be set either to\n\n# either <UPPERCASED_NAME>_FOUND or <OriginalCase_Name>_FOUND using the\n\n# FOUND_VAR option.  Other names for the result-variable are not\n\n# allowed.  So for a Find-module named FindFooBar.cmake, the two\n\n# possible names are FooBar_FOUND and FOOBAR_FOUND.  It is recommended\n\n# to use the original case version.  If the FOUND_VAR option is not\n\n# used, the default is <UPPERCASED_NAME>_FOUND.\n\n#\n\n# As in the simple mode, if <var1> through <varN> are all valid,\n\n# <packagename>_FOUND will be set to TRUE.  After REQUIRED_VARS the\n\n# variables which are required for this package are listed.  Following\n\n# VERSION_VAR the name of the variable can be specified which holds the\n\n# version of the package which has been found.  If this is done, this\n\n# version will be checked against the (potentially) specified required\n\n# version used in the find_package() call.  The EXACT keyword is also\n\n# handled.  The default messages include information about the required\n\n# version and the version which has been actually found, both if the\n\n# version is ok or not.  If the package supports components, use the\n\n# HANDLE_COMPONENTS option to enable handling them.  In this case,\n\n# find_package_handle_standard_args() will report which components have\n\n# been found and which are missing, and the <packagename>_FOUND variable\n\n# will be set to FALSE if any of the required components (i.e.  not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.  Use the option\n\n# CONFIG_MODE if your FindXXX.cmake module is a wrapper for a\n\n# find_package(...  NO_MODULE) call.  In this case VERSION_VAR will be\n\n# set to <NAME>_VERSION and the macro will automatically check whether\n\n# the Config module was found.  Via FAIL_MESSAGE a custom failure\n\n# message can be specified, if this is not used, the default message\n\n# will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXml2  DEFAULT_MSG\n\n#       LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n#\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid.  Then also LIBXML2_FOUND is set to\n\n# TRUE.  If it is not found and REQUIRED was used, it fails with\n\n# FATAL_ERROR, independent whether QUIET was used or not.  If it is\n\n# found, success will be reported, including the content of <var1>.  On\n\n# repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package_handle_standard_args(LibXslt\n\n#       FOUND_VAR LibXslt_FOUND\n\n#       REQUIRED_VARS LibXslt_LIBRARIES LibXslt_INCLUDE_DIRS\n\n#       VERSION_VAR LibXslt_VERSION_STRING)\n\n#\n\n# In this case, LibXslt is considered to be found if the variable(s)\n\n# listed after REQUIRED_VAR are all valid, i.e.  LibXslt_LIBRARIES and\n\n# LibXslt_INCLUDE_DIRS in this case.  The result will then be stored in\n\n# LibXslt_FOUND .  Also the version of LibXslt will be checked by using\n\n# the version contained in LibXslt_VERSION_STRING.  Since no\n\n# FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n# ::\n\n#\n\n#     find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#     find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\n#\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4\n\n# NO_MODULE) and adds an additional search directory for automoc4.  Here\n\n# the result will be stored in AUTOMOC4_FOUND.  The following\n\n# FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 210,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# exact version required\n",
        "Line" : 295,
        "CharPositionInLine" : 44
      },
      "16" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 301,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 331,
        "CharPositionInLine" : 17
      },
      "20" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 342,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# print the result:\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/FindPackageMessage.cmake" : {
      "ObjectId" : "a0349d3db99a3b446c421d9bdc14142ab278e72f",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/GetGitRevisionDescriptionDyND.cmake" : {
      "ObjectId" : "ee1f22c0047c49a072b80ea5b0659bdd8c2b15a1",
      "LastModified" : "2016-03-16T23:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<dir> <refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<dir> <var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the specified source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<dir> <var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Modified for DyND in 2013 to accept a directory as a parameter (was choosing\n\n# the wrong directory for a particular setup.)\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 48,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 52,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&amp;&amp;\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#message(STATUS \"Hash found: ${hash}\")\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\t\t${hash}\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "4f83f0ac934889497421ef787c3b5ac4fc4535c3",
      "LastModified" : "2017-12-23T20:42:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2011-16 DyND Developers\n\n# BSD 2-Clause License, see LICENSE.txt\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugin/CMakeLists.txt" : {
      "ObjectId" : "b47be86397c2c7dfe1932c78735840c27b1cf2ae",
      "LastModified" : "2016-04-02T04:03:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2011-16 DyND Developers\n\n# BSD 2-Clause License, see LICENSE.txt\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/mkl/CMakeLists.txt" : {
      "ObjectId" : "c09c174a3ae59d94e05663e2603ead64db2fe37d",
      "LastModified" : "2017-12-23T20:42:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2011-16 DyND Developers\n\n# BSD 2-Clause License, see LICENSE.txt\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# There is no FindMKL, but this will find Intel's MKL\n\n#set(BLA_VENDOR Intel10_64lp)\n\n#find_package(BLAS REQUIRED)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "fdbfbc66c3bf4d399260e669fb0b4a75103ea850",
      "LastModified" : "2017-12-23T20:42:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2011-16 DyND Developers\n\n# BSD 2-Clause License, see LICENSE.txt\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable optimizations so the tests build quicker\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# _VARIADIC_MAX=10 is for VS2012\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The gtest macro GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_\n\n# doesn't work to suppress unreachable code warnings with recent versions\n\n# of clang, so disable that warning for the tests so they compile properly.\n\n# Do this except when using clang on windows since the google test\n\n# preprocessor defines prevent compiling with clang while using the\n\n# MSVC standard library headers.\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#    types/test_adapt_type.cpp\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    types/test_categorical_kind_type.cpp\n\n#    types/test_categorical_type.cpp\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    types/test_type_assign.cpp\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#    types/test_type_promotion.cpp\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#    func/test_fft.cpp\n\n#    func/test_index.cpp\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#    func/test_neighborhood.cpp\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#    test_mkl.cpp\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#    test_parse.cpp\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Copy libdynd.dll to the directory containing test_libdynd so the tests\n\n# can find it when they are run.\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "#    set_target_properties(test_libdynd\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#       PROPERTIES\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#      BUILD_WITH_INSTALL_RPATH TRUE\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#     )\n",
        "Line" : 171,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "#-Wno-unnamed-type-template-args\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#-Wno-unnamed-type-template-args\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# If installation is requested, install the program\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Compile-time tests: test code that is supposed to produce compile errors\n\n# I couldn't find a properly specified way to do this, so hacked together\n\n# this function.\n\n#set(TEST_BUILDERROR_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/../include)\n\n#include(TestExpectedCompileError.cmake)\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#test_expected_compile_succeed(builderror_includendarray.cpp)\n\n#test_expected_compile_error(builderror_badassignment.cpp)\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    }
  },
  "FileTypes" : {
    "CMAKE" : 15
  },
  "ElapsedTime" : 2328
}