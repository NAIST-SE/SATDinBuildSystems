{
  "Repository" : "41401",
  "Revision" : "HEAD",
  "ObjectId" : "86be3520705785123cd46c3ad16fbcf883307ca1",
  "CommitTime" : "2019-04-15T17:36:05Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b3743c8012796cfd1404a2137c4a5e0888d9c1e2",
      "LastModified" : "2019-04-06T09:53:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake's built-in Android support requires 3.7\n",
        "Line" : 2,
        "CharPositionInLine" : 41
      },
      "1" : {
        "Text" : "# Can be at most 3.5.1 as long as Ubuntu 16.04 is supported\n",
        "Line" : 4,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : "# Use new RPATH behavior on macOS (CMake 3.9 and newer)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Don't warn about existence of SFML_ROOT variable (CMake 3.12 and newer)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set a default build type\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set CMAKE_MODULE_PATH to find SFML < 2.5 without manually having to specify a module path\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Project name and version\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Include the configuration file\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add an option for choosing the build type (shared or static)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add option to build the examples\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Define the install directory for miscellaneous files\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Install pkg-config files by default on Linux and BSD\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Define an option for choosing between static and dynamic C runtime\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The following combination of flags is not valid\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Mac OS X specific options\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add an option to build framework instead of dylib (release only)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Only the default architecture (i.e. 64-bit) is supported\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Enable to use of rpath according to CMake Policy CMP0042\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Frameworks are only available for release (because cmake currently doesn't allow specifying a custom framework name so TGUI-d is not possible)\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Frameworks only work with TGUI_SHARED_LIBS enabled\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Android options\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Make sure there's the android library available\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# CMake doesn't support defining the STL to be used with Nsight Tegra, so warn the user\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Install everything in $NDK/sources/third_party by default\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# We install libs in a subdirectory named after the ABI (e.g. lib/armeabi/libtgui.so)\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Link SFML in the same way as TGUI, unless SFML_STATIC_LIBRARIES is manually specified\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Attempt to find the SFML dependencies when linking statically\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# older than VC++14\n",
        "Line" : 163,
        "CharPositionInLine" : 66
      },
      "28" : {
        "Text" : "# VC++14 or newer\n",
        "Line" : 165,
        "CharPositionInLine" : 43
      },
      "29" : {
        "Text" : "# gcc\n",
        "Line" : 167,
        "CharPositionInLine" : 23
      },
      "30" : {
        "Text" : "# older than VC++14\n",
        "Line" : 171,
        "CharPositionInLine" : 66
      },
      "31" : {
        "Text" : "# VC++14 or newer\n",
        "Line" : 173,
        "CharPositionInLine" : 43
      },
      "32" : {
        "Text" : "# gcc\n",
        "Line" : 175,
        "CharPositionInLine" : 23
      },
      "33" : {
        "Text" : "# Find sfml\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Also look for the main component when using Visual Studio\n",
        "Line" : 191,
        "CharPositionInLine" : 43
      },
      "35" : {
        "Text" : "# Search for SFML in the android NDK (if no other directory is specified)\n",
        "Line" : 193,
        "CharPositionInLine" : 25
      },
      "36" : {
        "Text" : "# Use the find_host_package macro from the toolchain on iOS\n",
        "Line" : 195,
        "CharPositionInLine" : 21
      },
      "37" : {
        "Text" : "# find_package couldn't find SFML\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Set the path for the libraries\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Jump to the CMakeLists.txt file in the source folder\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Build the documentation when requested\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Build the examples if requested\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Build the tests if requested\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Build the GUI Builder if requested\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Install include files\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Install miscellaneous files\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46
    },
    "cmake/Config.cmake" : {
      "ObjectId" : "6eb362777f5d47399b6a9bc8c54c3663c9882186",
      "LastModified" : "2018-08-13T20:52:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect the OS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# detect the architecture (note: this test won't work for cross-compilation)\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# detect OS X version. (use '/usr/bin/sw_vers -productVersion' to extract V from '10.V.x'.)\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# detect the compiler and its version\n\n# Note: on some platforms (OS X), CMAKE_COMPILER_IS_GNUCXX is true\n\n# even when CLANG is used, therefore the Clang test is done first\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMAKE_CXX_COMPILER_ID is an internal CMake variable subject to change,\n\n# but there is no other way to detect CLang at the moment\n",
        "Line" : 50,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Set pkgconfig install directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Macros.cmake" : {
      "ObjectId" : "a12b33b37a936e6daa880f89cdbb592721d52dea",
      "LastModified" : "2018-10-11T18:03:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro that helps defining an option\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the compile options used by all targets\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the appropriate standard library on each platform for the given target\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use libc++ on macOS\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Apply the TGUI_USE_STATIC_STD_LIBS option on windows\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Generate a TGUIConfig.cmake file (and associated files)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindSFML.cmake" : {
      "ObjectId" : "535f5e647184d2b730a66e0fcab64e58ffd8f320",
      "LastModified" : "2019-04-09T18:07:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script locates the SFML library\r\n\n# ------------------------------------\r\n\n#\r\n\n# Usage\r\n\n# -----\r\n\n#\r\n\n# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\r\n\n# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\r\n\n# example:\r\n\n#   find_package(SFML COMPONENTS graphics window system) // find the graphics, window and system modules\r\n\n#\r\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\r\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\r\n\n# example:\r\n\n#   find_package(SFML COMPONENTS ...)     // no specific version required\r\n\n#   find_package(SFML 2 COMPONENTS ...)   // any 2.x version\r\n\n#   find_package(SFML 2.4 COMPONENTS ...) // version 2.4 or greater\r\n\n#\r\n\n# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\r\n\n# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\r\n\n# Since you have to link yourself all the SFML dependencies when you link it statically, the following\r\n\n# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed\r\n\n# description below).\r\n\n# In case of static linking, the SFML_STATIC macro will also be defined by this script.\r\n\n# example:\r\n\n#   set(SFML_STATIC_LIBRARIES TRUE)\r\n\n#   find_package(SFML 2 COMPONENTS network system)\r\n\n#\r\n\n# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\r\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\r\n\n# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\r\n\n# are available for both release and debug modes.\r\n\n#\r\n\n# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\r\n\n# to tell CMake where SFML is.\r\n\n#\r\n\n# Output\r\n\n# ------\r\n\n#\r\n\n# This script defines the following variables:\r\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\r\n\n#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\r\n\n#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\r\n\n#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\r\n\n#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\r\n\n#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\r\n\n# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules\r\n\n# - SFML_FOUND:        true if all the required modules are found\r\n\n# - SFML_INCLUDE_DIR:  the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\r\n\n# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking\r\n\n#\r\n\n# example:\r\n\n#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\r\n\n#   include_directories(${SFML_INCLUDE_DIR})\r\n\n#   add_executable(myapp ...)\r\n\n#   target_link_libraries(myapp ${SFML_LIBRARIES})\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the SFML_STATIC macro if static build was chosen\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the list of search paths for headers and libraries\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the SFML include directory\r\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the version number\r\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract the major and minor version numbers from SFML/Config.hpp\r\n\n# we have to handle framework a little bit differently:\r\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if we could extract them, compare with the requested version number\r\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# transform version numbers to an integer\r\n",
        "Line" : 106,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# compare them\r\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SFML version is < 2.0\r\n",
        "Line" : 114,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# find the requested modules\r\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# will be set to false if one of the required modules is not found\r\n",
        "Line" : 125,
        "CharPositionInLine" : 21
      },
      "12" : {
        "Text" : "# no suffix for sfml-main, it is always a static library\r\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# release library\r\n",
        "Line" : 133,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# debug library\r\n",
        "Line" : 139,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# static release library\r\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# static debug library\r\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dynamic release library\r\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# dynamic debug library\r\n",
        "Line" : 163,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# choose the entries that fit the requested link type\r\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# library found\r\n",
        "Line" : 188,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# if both are found, set SFML_XXX_LIBRARY to contain both\r\n",
        "Line" : 191,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\r\n",
        "Line" : 197,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# debug and not release\r\n",
        "Line" : 199,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# release and not debug\r\n",
        "Line" : 204,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# library not found\r\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# mark as advanced\r\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to the global list of libraries\r\n",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in case of static linking, we must also define the list of all the dependencies of SFML libraries\r\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# detect the OS\r\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# start with an empty list\r\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# macro that searches for a 3rd-party library\r\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# No lookup in environment variables (PATH on Windows), as they may contain wrong library versions\r\n",
        "Line" : 249,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# sfml-system\r\n",
        "Line" : 257,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\r\n",
        "Line" : 261,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# sfml-network\r\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\r\n",
        "Line" : 278,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# sfml-window\r\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# find libraries\r\n",
        "Line" : 289,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# update the list\r\n",
        "Line" : 306,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# sfml-graphics\r\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# find libraries\r\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# update the list\r\n",
        "Line" : 331,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# sfml-audio\r\n",
        "Line" : 340,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# find libraries\r\n",
        "Line" : 344,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# update the list\r\n",
        "Line" : 352,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# handle errors\r\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# SFML version not ok\r\n",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# include directory or library not found\r\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# fatal error\r\n",
        "Line" : 373,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# error but continue\r\n",
        "Line" : 376,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# handle success\r\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 52
    },
    "cmake/toolchains/iOS.toolchain.cmake" : {
      "ObjectId" : "c697857fa5a92dbae88c904a225d5619366a9630",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2016, Bogdan Cristea <cristeab@gmail.com>\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86_64 arch.\n\n#\n\n# IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Standard settings\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Required as of cmake 2.8.10\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Setup iOS developer location unless specified manually with IOS_DEVELOPER_ROOT\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with IOS_SDK_ROOT\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# set the architecture for iOS \n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "a4854ea45a2e3cfaba540b6e001a3bdeaa72d059",
      "LastModified" : "2018-04-01T13:38:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find doxygen\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add some path to search doxygen in more directories.\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# set the input and output documentation paths\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# see if we can generate the CHM documentation\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if HHC is found, we can generate the CHM (compressed HTML) output\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# configure the source Doxyfile by copying it and replacing all @variables@\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# target setup\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# setup install rules\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "3eb0af3af340d1bf5f02bb4675184c8516719cd8",
      "LastModified" : "2018-12-09T10:52:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro to build the examples\n\n# Usage: tgui_add_example(example-folder-name SUOURCES source.cpp)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# parse the arguments\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# SFML found via FindSFML.cmake\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# SFML found via SFMLConfig.cmake\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Link to sfml-main (only when SFMLConfig.cmake is used, this is done through the tgui target if FindSFML.cmake is used)\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Set the RPATH of the executable on Linux and BSD\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add the install rule for the executable\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Build the examples\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install the examples\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "examples/android/app/proguard-rules.pro" : {
      "ObjectId" : "f1b424510da51fd82143bc74a0a801ae5a1e2fcd",
      "LastModified" : "2018-12-09T10:52:16Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# You can control the set of applied configuration files using the\n\n# proguardFiles setting in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/iOS/CMakeLists.txt" : {
      "ObjectId" : "3ab32b4fc740c9431abd98f1f0085d2b89f024b9",
      "LastModified" : "2018-12-09T10:52:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The app needs an identifier and signing to work correctly\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/many_different_widgets/CMakeLists.txt" : {
      "ObjectId" : "2ce12c43be405f26552c1c4fd0f28cf19dec75b2",
      "LastModified" : "2018-12-09T10:52:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/scalable_login_screen/CMakeLists.txt" : {
      "ObjectId" : "084f520c8597ef1d911a2135775595fa87275b85",
      "LastModified" : "2018-12-09T10:52:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gui-builder/CMakeLists.txt" : {
      "ObjectId" : "3e400068be13588b891d61fa139939a56b9ef8bc",
      "LastModified" : "2019-02-18T07:02:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make a GUI application on windows (without having the command line window)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SFML found via FindSFML.cmake\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# SFML found via SFMLConfig.cmake\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Link to sfml-main (only when SFMLConfig.cmake is used, this is done through the tgui target if FindSFML.cmake is used)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Copy the executable to the gui-builder folder\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the RPATH of the executable on Linux and BSD\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the install rule for the executable\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Install the resources next to the test executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/TGUI/Android/CMakeLists.txt" : {
      "ObjectId" : "fed49600dfa399ba0f3593788781388bdaad71bb",
      "LastModified" : "2018-12-09T10:52:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create the target\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the export symbol of the module\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add a -d suffix when in debug mode\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Hide public symbols by default (exported ones are explicitly marked)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install Android.mk so the NDK knows how to set up TGUI\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/TGUI/CMakeLists.txt" : {
      "ObjectId" : "2f6fb5e76484a45b5597af972e6072841754c9ce",
      "LastModified" : "2019-04-06T09:53:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Determine library suffixes depending on static/shared configuration\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the version and soversion of the target (for compatible systems -- mostly Linuxes)\n\n# Except for Android which strips soversion suffixes\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# on Windows/gcc get rid of \"lib\" prefix for shared libraries,\n\n# and transform the \".dll.a\" suffix into \".a\" for import libraries\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Add <project>/include as public include directory\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link to SFML\n\n# Altough we could use PUBLIC here instead of PRIVATE, it causes the files in lib/cmake/TGUI to\n\n# hardcode the SFML directories, making it harder to distribute them with the precompiled libs.\n\n# You will thus have to link to SFML yourself, but you were likely to already do this anyway.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# SFML found via FindSFML.cmake\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# SFML found via SFMLConfig.cmake\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# define TGUI_USE_CPP17 if requested\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We need to link to an extra library on android (to use the asset manager)\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Enable automatic reference counting on iOS\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Hide public symbols by default (exported ones are explicitly marked)\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Build frameworks or dylibs\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Adapt target to build frameworks instead of dylibs\n",
        "Line" : 200,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Install the header files to the framework\n",
        "Line" : 208,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# The framework has to be with a capital letter (because it includes the header files which must be found in a \"TGUI\" directory)\n",
        "Line" : 215,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Adapt install directory to allow distributing dylibs/frameworks in user’s frameworks/application bundle but only if cmake rpath options aren't set\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Build tgui-activity on android\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Install library\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Generate the TGUIConfig.cmake file\n\n# This has to happen here instead of in the root CMakeLists.txt because otherwise\n\n# it might try to write to the macOS framework before the framework is installed.\n\n# This is because the order of install rules is undefined between directories.\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "89062b51f0b353a80a8fdc9bde88fa68d185d7fa",
      "LastModified" : "2019-04-06T09:53:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SFML found via FindSFML.cmake\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# SFML found via SFMLConfig.cmake\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Copy the resources folder to the build directory to execute the tests without installing them\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the RPATH of the executable on Linux and BSD\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the install rule for the executable\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install the resources next to the test executable\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/cmake/CMakeLists.txt" : {
      "ObjectId" : "77a4fd273bf0c8439895b5dfc93c688b5123c399",
      "LastModified" : "2018-12-09T10:52:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "QMAKE" : 1
  },
  "ElapsedTime" : 3219
}