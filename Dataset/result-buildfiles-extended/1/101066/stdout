{
  "Repository" : "101066",
  "Revision" : "HEAD",
  "ObjectId" : "d9d92b3b4710da7a41d2f19d491c028a96fd20df",
  "CommitTime" : "2019-02-03T20:18:40Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d82bde85a034a6ef727242f83c7ba9775b6b3f1c",
      "LastModified" : "2018-07-23T21:05:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Name\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Version\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Variables\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO(wisk): check if the module if correct\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Options\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Tools\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Tests\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Features\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## C++\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO(wisk): set default visiblity as hidden on ELF\n\n## CHECK_CXX_COMPILER_FLAG(-fvisibility=hidden HAVE_VISIBILITY_HIDDEN)\n\n## if (HAVE_VISIBILITY_HIDDEN)\n\n##   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\n\n## endif()\n\n## CHECK_CXX_COMPILER_FLAG(-fvisibility-inlines-hidden HAVE_VISIBILITY_INLINES_HIDDEN)\n\n## if (HAVE_VISIBILITY_INLINES_HIDDEN)\n\n##   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden\")\n\n## endif()\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# src: ogdf cmake\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Sources\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Packaging\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "a4fb533c6c11289174dfd9979b222ab8ecd69c9f",
      "LastModified" : "2016-01-17T12:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2015 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# process transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 394,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 416,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 423,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 455,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 467,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# platform specific flags\n",
        "Line" : 478,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# default include dirs\n",
        "Line" : 513,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 520,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 532,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# target include directories\n",
        "Line" : 544,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 556,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 626,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# target export define symbol\n",
        "Line" : 630,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 635,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# target compile definitions\n",
        "Line" : 644,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 653,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 662,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 678,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 911,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 955,
        "CharPositionInLine" : 3
      },
      "50" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 963,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 966,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# header is outside\n",
        "Line" : 980,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 991,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# check header file extension\n",
        "Line" : 1001,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1014,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1019,
        "CharPositionInLine" : 3
      },
      "57" : {
        "Text" : "# GCC like output\n",
        "Line" : 1028,
        "CharPositionInLine" : 3
      },
      "58" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1044,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1047,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1049,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# then separate lines\n",
        "Line" : 1051,
        "CharPositionInLine" : 1
      },
      "62" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1054,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1072,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# update stack\n",
        "Line" : 1082,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1098,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1100,
        "CharPositionInLine" : 5
      },
      "67" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1107,
        "CharPositionInLine" : 5
      },
      "68" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1116,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1128,
        "CharPositionInLine" : 5
      },
      "70" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1166,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1182,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1330,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# create empty log file\n",
        "Line" : 1371,
        "CharPositionInLine" : 3
      },
      "74" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1387,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1421,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# append to list\n",
        "Line" : 1430,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1433,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1437,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# append to list\n",
        "Line" : 1442,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1448,
        "CharPositionInLine" : 3
      },
      "81" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1455,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# append to list\n",
        "Line" : 1460,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1463,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1468,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# append to list\n",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1480,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1484,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# append to list\n",
        "Line" : 1489,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1495,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1514,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# append to list\n",
        "Line" : 1525,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1532,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1539,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# append to list\n",
        "Line" : 1548,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1551,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1559,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# append to list\n",
        "Line" : 1571,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1578,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1585,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# append to list\n",
        "Line" : 1596,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1605,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1622,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# append to list\n",
        "Line" : 1630,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1636,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1643,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# append to list\n",
        "Line" : 1645,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1648,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1653,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# append to list\n",
        "Line" : 1658,
        "CharPositionInLine" : 3
      },
      "110" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1661,
        "CharPositionInLine" : 3
      },
      "111" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1665,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# append to list\n",
        "Line" : 1671,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1674,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1680,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# append to list\n",
        "Line" : 1688,
        "CharPositionInLine" : 5
      },
      "116" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1694,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1701,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# append to list\n",
        "Line" : 1703,
        "CharPositionInLine" : 5
      },
      "119" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1706,
        "CharPositionInLine" : 5
      },
      "120" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1711,
        "CharPositionInLine" : 3
      },
      "121" : {
        "Text" : "# append to list\n",
        "Line" : 1720,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1726,
        "CharPositionInLine" : 5
      },
      "123" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1733,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# append to list\n",
        "Line" : 1735,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1738,
        "CharPositionInLine" : 5
      },
      "126" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1775,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1791,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1795,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1802,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1805,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1822,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1841,
        "CharPositionInLine" : 1
      },
      "133" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1884,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1895,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1898,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1969,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1974,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 1977,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1980,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 1983,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2015,
        "CharPositionInLine" : 1
      },
      "142" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2019,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2024,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2041,
        "CharPositionInLine" : 1
      },
      "145" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2054,
        "CharPositionInLine" : 1
      },
      "146" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2078,
        "CharPositionInLine" : 1
      },
      "147" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2083,
        "CharPositionInLine" : 3
      },
      "148" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2090,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2093,
        "CharPositionInLine" : 1
      },
      "150" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2098,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# generate target script file\n",
        "Line" : 2121,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2126,
        "CharPositionInLine" : 2
      },
      "153" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2140,
        "CharPositionInLine" : 2
      },
      "154" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2149,
        "CharPositionInLine" : 3
      },
      "155" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2151,
        "CharPositionInLine" : 3
      },
      "156" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2155,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2178,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2183,
        "CharPositionInLine" : 3
      },
      "159" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2190,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2196,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2203,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2206,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2213,
        "CharPositionInLine" : 1
      },
      "164" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2220,
        "CharPositionInLine" : 1
      },
      "165" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2222,
        "CharPositionInLine" : 1
      },
      "166" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2282,
        "CharPositionInLine" : 2
      },
      "167" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2293,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2304,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2312,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2316,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2320,
        "CharPositionInLine" : 3
      },
      "172" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2342,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2348,
        "CharPositionInLine" : 3
      },
      "174" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2357,
        "CharPositionInLine" : 3
      },
      "175" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2365,
        "CharPositionInLine" : 3
      },
      "176" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2401,
        "CharPositionInLine" : 1
      },
      "177" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2406,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2431,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2440,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2449,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2456,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2629,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2633,
        "CharPositionInLine" : 3
      },
      "184" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2647,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# use all available cores\n",
        "Line" : 2667,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2692,
        "CharPositionInLine" : 1
      },
      "187" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2699,
        "CharPositionInLine" : 1
      },
      "188" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2709,
        "CharPositionInLine" : 1
      },
      "189" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2714,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2716,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2725,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2735,
        "CharPositionInLine" : 4
      },
      "193" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2742,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2746,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2774,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2779,
        "CharPositionInLine" : 4
      },
      "197" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2794,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2805,
        "CharPositionInLine" : 3
      },
      "199" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2813,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2827,
        "CharPositionInLine" : 4
      },
      "201" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2839,
        "CharPositionInLine" : 1
      },
      "202" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2849,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2852,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2857,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2862,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# generate unity target\n",
        "Line" : 2869,
        "CharPositionInLine" : 1
      },
      "207" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2876,
        "CharPositionInLine" : 2
      },
      "208" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2879,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2889,
        "CharPositionInLine" : 3
      },
      "210" : {
        "Text" : "# copy output name\n",
        "Line" : 2914,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2922,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# copy compile features\n",
        "Line" : 2933,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2938,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2946,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2956,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 2959,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 2964,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 2978,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2986,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2991,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# trivial checks\n",
        "Line" : 3015,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# resolve alias\n",
        "Line" : 3021,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3029,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3045,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3050,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3084,
        "CharPositionInLine" : 3
      },
      "227" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3133,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3220,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# include target script if available\n",
        "Line" : 3232,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3234,
        "CharPositionInLine" : 2
      },
      "231" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3250,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3270,
        "CharPositionInLine" : 3
      },
      "233" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3273,
        "CharPositionInLine" : 3
      },
      "234" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3292,
        "CharPositionInLine" : 3
      },
      "235" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3295,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3361,
        "CharPositionInLine" : 3
      },
      "237" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3364,
        "CharPositionInLine" : 3
      },
      "238" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3387,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3424,
        "CharPositionInLine" : 3
      },
      "240" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3458,
        "CharPositionInLine" : 2
      },
      "241" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3472,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3479,
        "CharPositionInLine" : 1
      },
      "243" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3532,
        "CharPositionInLine" : 1
      },
      "244" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3604,
        "CharPositionInLine" : 1
      },
      "245" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3768,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 246
    },
    "cmake/medusa.cmake" : {
      "ObjectId" : "b8519cb08e4d95449e5168959f2088675c271b87",
      "LastModified" : "2016-12-13T17:07:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# target_include_directories(${MEDUSA_MODULE} PRIVATE ${include_files})\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "package/CMakeLists.txt" : {
      "ObjectId" : "969426cdc9016f74472817c84eb664b839d0d259",
      "LastModified" : "2016-06-22T16:45:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "3092542bb7cfa5001c97fb1172158a0d8b739bc1",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# architectures\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ARM\n",
        "Line" : 19,
        "CharPositionInLine" : 51
      },
      "2" : {
        "Text" : "#medusa_include_module_if_needed(arch avr8)         # AVR8\n\n# medusa_include_module_if_needed(arch st62)         # ST62\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# X86\n",
        "Line" : 22,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : "# medusa_include_module_if_needed(arch z80)          # Zilog80 (GameBoy)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# binding\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Python\n",
        "Line" : 27,
        "CharPositionInLine" : 51
      },
      "7" : {
        "Text" : "# compilation\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# LLVM\n",
        "Line" : 31,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "# database\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# medusa_include_module_if_needed(db soci)           # SOCI\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# SQLite3\n\n# Memory\n",
        "Line" : 36,
        "CharPositionInLine" : 51
      },
      "12" : {
        "Text" : "# emulation\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Interpreter\n\n# LLVM\n",
        "Line" : 41,
        "CharPositionInLine" : 51
      },
      "14" : {
        "Text" : "# loader\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# BootSector\n\n# ELF\n",
        "Line" : 46,
        "CharPositionInLine" : 51
      },
      "16" : {
        "Text" : "# medusa_include_module_if_needed(ldr gb)            # GameBoy ROM\n\n# medusa_include_module_if_needed(ldr mach-o)        # Mach-O\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# PE\n\n# Raw\n",
        "Line" : 50,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# medusa_include_module_if_needed(ldr st62)          # ST62\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# operating system\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# UNIX\n",
        "Line" : 56,
        "CharPositionInLine" : 51
      },
      "21" : {
        "Text" : "# medusa_include_module_if_needed(os windows)        # Windows\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# tool\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# test\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "src/arch/arm/CMakeLists.txt" : {
      "ObjectId" : "76c777247e5c79f07c986f21f5e3643c13bcc1b4",
      "LastModified" : "2016-08-29T15:32:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/arch/avr8/CMakeLists.txt" : {
      "ObjectId" : "736b72b3b7ec914aac91a93a80df625bd7fa46e3",
      "LastModified" : "2016-08-28T21:57:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/arch/st62/CMakeLists.txt" : {
      "ObjectId" : "0eb2eed98615fc0fa315dbe3814817337cb5a8fe",
      "LastModified" : "2016-11-14T20:36:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/arch/x86/CMakeLists.txt" : {
      "ObjectId" : "2cecb42867b951506134fab30a856f1cdb0aee9e",
      "LastModified" : "2016-08-29T15:32:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/arch/z80/CMakeLists.txt" : {
      "ObjectId" : "a79cbebcb9329702723c78640aa8af8ccc55d28c",
      "LastModified" : "2016-08-29T15:32:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/bind/python/CMakeLists.txt" : {
      "ObjectId" : "054309dc4ba1362d135fbd7952efee401db6ec57",
      "LastModified" : "2018-07-23T21:05:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/compil/llvm/CMakeLists.txt" : {
      "ObjectId" : "7582f1a48b6c095ccf5eab2807943f5a3d599dda",
      "LastModified" : "2018-07-23T21:05:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(KS): Probably not the optimal solution, but it works, so who cares?\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -L should not be here, but link_directories doesn't seem to work...\n",
        "Line" : 31,
        "CharPositionInLine" : 88
      },
      "2" : {
        "Text" : "# Start with the debug configuration\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# This configuration is common (debug/release)\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# I have no idea what I'm doing\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "3f63feb557aef775e306daa6cafc7da3fd5eceec",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Boost\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Fmt\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## PEGTL\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## OGDF\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# define medusa architecture target\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# src: https://github.com/libssh2/libssh2/blob/master/src/CMakeLists.txt#L127\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Thank ogre, I would never find this myself\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# generate export file\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/db/memory/CMakeLists.txt" : {
      "ObjectId" : "3d7c5694b26f5d367b4e1ed22ee94f3b97369b3a",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define db memory target\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/db/soci/CMakeLists.txt" : {
      "ObjectId" : "69357017155c190467a7210768bf62a87a68010f",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include(\"${SOCI_ROOT}/cmake/SOCI.cmake\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HACK(wisk): INTERFACE_INCLUDE_DIRECTORIES shoud be used instead\n",
        "Line" : 18,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : "# define db soci target\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/db/sqlite3/CMakeLists.txt" : {
      "ObjectId" : "72b531313e6e04008f94510b3444fa4919081c92",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define db sqlite3 target\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/db/text/CMakeLists.txt" : {
      "ObjectId" : "1de2c7ca6ebb84aa7403b321108028f75cfe06c9",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/emul/interpreter/CMakeLists.txt" : {
      "ObjectId" : "a28e06c2b7f011de6a7c72dc8c4c12eab4d363e1",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/emul/llvm/CMakeLists.txt" : {
      "ObjectId" : "06e7b133435eea2c2fc40696491a804213529ed0",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(KS): Probably not the optimal solution, but it works, so who cares?\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -L should not be here, but link_directories doesn't seem to work...\n",
        "Line" : 31,
        "CharPositionInLine" : 86
      },
      "2" : {
        "Text" : "# Start with the debug configuration\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# This configuration is common (debug/release)\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# I have no idea what I'm doing\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/ldr/bs/CMakeLists.txt" : {
      "ObjectId" : "a9a95ae7cbcdf7ff13132fd9ff01a8a0054cba78",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ldr/elf/CMakeLists.txt" : {
      "ObjectId" : "5b82b85f3f5114ef7fcbc88a4c86b781c2283ced",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ldr/gb/CMakeLists.txt" : {
      "ObjectId" : "a3934db3fbceb51f69536cd1609ecb8a7a178215",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ldr/mach-o/CMakeLists.txt" : {
      "ObjectId" : "660b5efb8479b9a59d9e38b819f6d14a120057a3",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ldr/pe/CMakeLists.txt" : {
      "ObjectId" : "6d93124e6e59af6a75ed1c7464ded344b27418a0",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ldr/raw/CMakeLists.txt" : {
      "ObjectId" : "d3f087cf301046d2e65faae6a10678c7957ce0a9",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ldr/st62/CMakeLists.txt" : {
      "ObjectId" : "f154719ac8ce57c9de8563c2832bd76ed5a57299",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/os/unix/CMakeLists.txt" : {
      "ObjectId" : "c6d7dd03975c1c44e5766b9a80c3b807a113715c",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/os/windows/CMakeLists.txt" : {
      "ObjectId" : "f45d6bc84c15bb23c253a71bc1c0507e18dca031",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "c4591e6ba6ef824d38254c8a8d1e23b7d8a5dc09",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Core\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Architecture\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Binding\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Compilation\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Database\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Emulation\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Expression\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Loader\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Operating System\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "14489f527c7c15527c4c371403dda8d7042eb491",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(text)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tools/pydusa/CMakeLists.txt" : {
      "ObjectId" : "0838b93f94b3c166af1178398bdb0f69f9736496",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/qt/CMakeLists.txt" : {
      "ObjectId" : "d30fa0bc4a034753a18a05fe05a7b59e192158d8",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We require qt5 widgets\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Qt user interface files\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Qt resource files\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# src: https://stackoverflow.com/questions/41193584/deploy-all-qt-dependencies-when-building\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# execute windeployqt in a tmp directory after build\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# copy deployment directory during installation\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "src/tools/text/CMakeLists.txt" : {
      "ObjectId" : "aeac7ad91b429005ef36370c48e2fa234aee60aa",
      "LastModified" : "2018-12-24T11:26:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 33
  },
  "ElapsedTime" : 1909
}