{
  "Repository" : "65671608",
  "Revision" : "HEAD",
  "ObjectId" : "d0fc6d3ddf3e57f7d97da01db16b64dde8c35f41",
  "CommitTime" : "2019-04-19T06:53:27Z",
  "Files" : {
    "build.xml" : {
      "ObjectId" : "dc7bc1dd8c602616a071ff0d08d304542b47be52",
      "LastModified" : "2018-11-01T06:26:04Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be\n    used for execution of your tasks. These targets are usually executed\n    before and after some main targets. They are:\n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported\n    nbproject/build-impl.xml file.\n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are:\n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project\n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"usb2aemon-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on\n    the compile target as the regular run target does. Again, for a list of available\n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file.\n\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : " override clean to not delete dist dir, because this messes up svn ",
        "Line" : 69,
        "CharPositionInLine" : 79
      },
      "5" : {
        "Text" : "\n        https://blog.alejandrocelaya.com/2014/02/22/dependency-management-in-java-projects-with-ant-and-ivy/ \n    https://ant.apache.org/ivy/ \n    http://wiki.netbeans.org/FaqIvy \n    see ivy.xml \n    <target name=\"retrieve-dependencies\"\n            description=\"Retrieve dependencies with Apache IVY\">\n        <ivy:retrieve type=\"jar\" />\n    </target>\n    \n    <path id=\"ivy.lib.path\">\n        <fileset dir=\"jars\" includes=\"ivy-2.4.0.jar\"/>\n    </path>\n    <taskdef resource=\"org/apache/ivy/ant/antlib.xml\"\n             uri=\"antlib:org.apache.ivy.ant\" classpathref=\"ivy.lib.path\"/>\n    \n    <target name=\"-ivy-cleancache\">\n        <ivy:cleancache />\n    </target>\n    \n    <target name=\"-ivy-retrieve\">\n        <ivy:retrieve/>  Load dependencies to the project \n        <pathconvert property=\"ivy.classpath.computed\" dirsep=\"/\" pathsep=\":\">\n            <path>\n                <fileset dir=\"lib\" includes=\"*.jar\"/>\n            </path>\n            <map from=\"${basedir}${file.separator}\" to=\"\"/>\n        </pathconvert>\n        <propertyfile file=\"nbproject/project.properties\">\n            <entry operation=\"=\" key=\"ivy.classpath\" value=\"${ivy.classpath.computed}\"/>\n        </propertyfile>\n    </target>",
        "Line" : 106,
        "CharPositionInLine" : 17
      },
      "6" : {
        "Text" : "    <target name=\"-pre-compile\" depends=\"-ivy-retrieve\"/>",
        "Line" : 109,
        "CharPositionInLine" : 69
      },
      "7" : {
        "Text" : "    <target name=\"-post-clean\">\n        <delete dir=\"lib\"/>\n    </target>",
        "Line" : 115,
        "CharPositionInLine" : 17
      },
      "8" : {
        "Text" : "ivy download and configure, from https://gist.github.com/snipsnipsnip/3284453 ",
        "Line" : 117,
        "CharPositionInLine" : 90
      },
      "9" : {
        "Text" : "<delete dir=\"${ivy.jar.dir}\"/>",
        "Line" : 165,
        "CharPositionInLine" : 46
      },
      "10" : {
        "Text" : "<ivy:cleancache/>",
        "Line" : 166,
        "CharPositionInLine" : 33
      },
      "11" : {
        "Text" : " makes sure that the build version is written to the jar ",
        "Line" : 184,
        "CharPositionInLine" : 69
      },
      "12" : {
        "Text" : "    copy splash image to src tree so that it gets into main jar",
        "Line" : 199,
        "CharPositionInLine" : 75
      },
      "13" : {
        "Text" : "    The exe4j launcher target to build jAERViewer.exe with integrated java 6 splash screen.\n            http://www.ej-technologies.com/products/exe4j/overview.html\n    ",
        "Line" : 206,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "        <subant failonerror=\"false\" target=\"jaer-exe4jx86\">\n            <fileset dir=\".\" includes=\"build.xml\"/>\n        </subant>",
        "Line" : 211,
        "CharPositionInLine" : 21
      },
      "15" : {
        "Text" : "    \n    Your license key for exe4j 4.x is:\n    L-TOBI_DELBRUCK#50022033010001-1evjjgm42c2fj#2311\n    ",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "    <target name=\"jaer-exe4jx86\" depends=\"checkos\" if=\"isWindows\" >\n        <echo message=\"Building jaer-exe4j jAERViewer.exe 32-bit Windows launcher for 32-bit Java Virtual Machines - embedding ico and setting SplashScreen in jAERViewer.exe. ${line.separator} Don't worry if this task fails for you unless you have changed the classpath. ${line.separator}jAERViewer.exe does not normally need to be rebuilt.\"/>\n        <taskdef name=\"jaer-exe4j\" classname=\"com.jaer-exe4j.Exe4JTask\" classpath=\"exe4j-launcher/exe4j_x86/bin/ant.jar\" onerror=\"ignore\" />\n        <exe4j projectfile=\"jaer1.5_win_jre_x86.exe4j\" requirelicense=\"true\"/>\n    </target>",
        "Line" : 226,
        "CharPositionInLine" : 17
      },
      "17" : {
        "Text" : " builds the windows executable .exe launcher files ",
        "Line" : 236,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : " builds a zip of all the javadoc ",
        "Line" : 241,
        "CharPositionInLine" : 45
      },
      "19" : {
        "Text" : " builds a runtime archive for end users who don't want to develop ",
        "Line" : 251,
        "CharPositionInLine" : 78
      },
      "20" : {
        "Text" : "depends=\"jaer-runtime-archive\"",
        "Line" : 269,
        "CharPositionInLine" : 42
      },
      "21" : {
        "Text" : "\n    <target name=\"javadoc-ftp\" depends=\"javadoc\">\n        <ftp server=\"upload.sourceforge.net\" remotedir=\"upload\" binary=\"true\" userid=\"anonymous\" password=\"jaer-project\">\n            <fileset dir=\"${dist.dir}\">\n            <include name=\"jaer-javadoc.zip\" />\n            </fileset>\n        </ftp>\n    </target>\n    ",
        "Line" : 291,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : " scp the javadoc to the project web pages at sourceforge.\n    This uses a private key file and trusts the host explicitly. The SF username is prompted for and then all javadoc is uploaded.\n    The link to the generated javadoc is http://jaer.sourceforge.net/javadoc\n    The key can be generated under linux with ssh-keygen -t dsa -Cusername@shell.sf.net\n    and then must be uploaded via SF's key managment system.\n    ",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "        <input message=\"SourceForge password?\" addproperty=\"javadoc.upload.password\"/> ",
        "Line" : 302,
        "CharPositionInLine" : 103
      },
      "24" : {
        "Text" : " builds a file with the output of svnversion that is used for the About dialogs ",
        "Line" : 314,
        "CharPositionInLine" : 92
      },
      "25" : {
        "Text" : "TODO fix to get rev info from git",
        "Line" : 315,
        "CharPositionInLine" : 45
      },
      "26" : {
        "Text" : " run version command to get revision numnber ",
        "Line" : 326,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 27
    },
    "subprojects/JSpikeStack/build.xml" : {
      "ObjectId" : "be3579e1c6b98f370118c636a6346e91c534969c",
      "LastModified" : "2013-11-28T13:53:01Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"jSpikeStack-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "ANT" : 2
  },
  "ElapsedTime" : 6263
}