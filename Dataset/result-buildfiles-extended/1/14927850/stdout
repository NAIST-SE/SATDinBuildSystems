{
  "Repository" : "14927850",
  "Revision" : "HEAD",
  "ObjectId" : "44292a1d9e2027c68f43ccfe3f1c3919538b9a8a",
  "CommitTime" : "2019-04-03T19:41:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f2f8eaa5c1917c930794e77d675bdf561b6cf9d9",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Initialize before ThirdParty\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need to include third-party CMake modules before we configure our own\n\n# settings so that we don't apply our settings to third-party code.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if BOND_GBC_PATH is set we must copy over that gbc to the install location\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Bond.cmake" : {
      "ObjectId" : "9fb770c4b597e0cb656fba36f7441490413605d8",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# add_bond_codegen (file.bond [file2.bond ...]\n\n#   [ENUM_HEADER]\n\n#   [GRPC]\n\n#   [OUTPUT_DIR dir]\n\n#   [IMPORT_DIR dir [dir2, ...]]\n\n#   [OPTIONS opt [opt2 ...]])\n\n#   [TARGET name]\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if BOND_GBC_PATH is not set we must add a dependency on the \"gbc\" target to build it\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#\n\n# add_bond_executable (name\n\n#   [schem.bond [schema2.bond]]\n\n#   source.cpp [source2.cpp]\n\n#   [GRPC])\n\n#\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# add_bond_test (name\n\n#   [schem.bond [schema2.bond]]\n\n#   source.cpp [source2.cpp]\n\n#   [BUILD_ONLY]\n\n#   [GRPC])\n\n#\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# add_bond_python_module (name\n\n#   [schem.bond [schema2.bond]]\n\n#   source.cpp [source2.cpp])\n\n#\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Compiler.cmake" : {
      "ObjectId" : "e4ab0ef9290fe885e976691e59bd36101175e9fd",
      "LastModified" : "2017-03-17T19:42:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Config.cmake" : {
      "ObjectId" : "56f014b338ff3d583a0da040fffefeeb667cbc2b",
      "LastModified" : "2019-01-10T00:25:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We only want to look for gbc if the user explicitly set the\n\n# environment variable BOND_GBC_PATH. (If they set the CMake variable\n\n# BOND_GBC_PATH explicitly, find_program won't change it, allowing it to\n\n# take precedence.) We don't want CMake to go looking elsewhere, so we\n\n# turn off all its default search paths.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# MSVC needs this because of how template-heavy our code is.\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# inject disabling of some MSVC warnings for versions prior to MSVC14\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# turn up warning level\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Enable SDL recommended warnings that aren't enabled by /W4\n\n# 4242: 'identifier': conversion from 'type1' to 'type2', possible loss of data\n\n# 4302: 'conversion': truncation from 'type1' to 'type2'\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# use secure CRT functions via template overloads to avoid polluting\n\n# Bond with MSVC CRT-specific code too much. More details at\n\n# https://msdn.microsoft.com/en-us/library/ms175759.aspx\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Disable code analysis warnings about constant constant comparisons. A\n\n# lot of our template functions trigger this when they do things like:\n\n#\n\n# if (T == traits<U>::some_value) { ... } else { ... }\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Enable standards-conformance mode for MSVC compilers that support this\n\n# flag (Visual C++ 2017 and later).\n\n#\n\n# Our minimum required version of CMake doesn't have GREATER_EQUAL, so\n\n# we invert a less-than comparison instead. CMake 3.7 added\n\n# GREATER_EQUAL.\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If C# has been built we will also run C# compatibility tests\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# find Java libraries and programs\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# find python interpreter, library and boost python library.\n\n# to specify a different version, invoke cmake with:\n\n# -DPYTHON_EXECUTABLE=/path/to/python\n\n# -DPYTHON_LIBRARY=/path/to/libpython.so\n\n# -DBoost_PYTHON_LIBRARY_RELEASE=/path/to/libboost-python.so\n\n# (or Boost_PYTHON_LIBRARY_DEBUG if CMAKE_BUILD_TYPE=Debug)\n\n# and optionally with:\n\n# -DPython_ADDITIONAL_VERSIONS=Major.Minor\n\n# if your python version is not implicitly supported by cmake\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# find_package (PythonLibs) doesn't find libpython in /usr/local/Cellar,\n\n# so if PYTHON_LIBRARY wasn't passed as a cmake -D, we have to set it\n\n# here.\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Make sure AppVeyor CI runs fail when unit test dependencies are not found\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# disable Boost auto-linking\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# VS2015U2 fixed a bug with atomics and emits a warning without this definition.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Suppress warnings in Boost about using deprecated types like std::auto_ptr\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 16
    },
    "cmake/FindJavaBuildTools.cmake" : {
      "ObjectId" : "089625c5d5c47425b1c1e3c7510f3daa2e80e745",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindStack.cmake" : {
      "ObjectId" : "15060eeed22d97ce21c7e380b27a7b7a48fe7045",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Folders.cmake" : {
      "ObjectId" : "badc50f4880d68077c22ece6bd5ba5b227e5f6d4",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Add the target to \"current\" folder\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# add_subfolder (subdirectory folder)\n\n# similar to built-in add_subdirectory but groups targets in specified folder\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/HaskellUtil.cmake" : {
      "ObjectId" : "07e418506957c28792322d92bab62e7151c294f7",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Java.cmake" : {
      "ObjectId" : "12202d6f79926b96fdf110fe120e19902c145246",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This function intentionally doesn't accept or configure SOURCES. cmake should\n\n# call gradle unconditionally, and gradle will take care of up-to-dateness.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/NoDebug.cmake" : {
      "ObjectId" : "b7bc6aa199cabeca0ac5f642da4a33a45f1887de",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/PythonTest.cmake" : {
      "ObjectId" : "1f10b7d8779769691a1cf77c1288813a81a8d415",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/RunPythonTest.cmake" : {
      "ObjectId" : "c66bd9cad584bdb10d5ba04be00ea426fa8b860f",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "compiler/CMakeLists.txt" : {
      "ObjectId" : "1dff9d010b3e7dd927ced3242b74dff76ea22187",
      "LastModified" : "2019-01-10T00:25:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If unspecified, turn off optimizations\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "compiler/stack_build.cmake" : {
      "ObjectId" : "3e3b1afc3e8f1f4e9da32923b7598887c750acb9",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a workaround for Windows quirks.\n\n# CMake Visual Studio generator translates add_custom_command into a batch file\n\n# embedded in Visual Studio project. Batch files have problems with paths that\n\n# contain non-ascii characters because they are limited to DOS encoding. It so\n\n# happens that stack is quite likely to be installed in such a path because by\n\n# default stack install uses directory under %APPDATA% which contains user name.\n\n# As a workaround we execute this .cmake script as a custom command and use CMake\n\n# cache to get access to variables set during configuration.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get proper behavior for if condition with error variable\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy results to builddir\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/CMakeLists.txt" : {
      "ObjectId" : "b45078e73a8ed44124e5e92083bee53662539404",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate again into intermediate dir so that we can build libraries\n\n# concurrently.\n\n# Despite what documentation says, there doesn't seem to be a way to build\n\n# multiple targets from one set of generated files without serializing them.\n\n# Even when using add_custom_target to define an intermediate target the custom\n\n# command rules are added to each target and VS forces execution of all rules\n\n# in a clean build, leading to collisions in multi-processor build.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# grpc-specific headers\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Boost thread is only needed if the C++ standard library doesn't support\n\n# std::call_once. However std::once seems problematic on Linux\n\n# (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60662) so for now we use\n\n# std::call_once only on MSVC.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/test/CMakeLists.txt" : {
      "ObjectId" : "17185aad4d655a504283bb0f1340a63b36e80b85",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Core unit tests don't build under VS2013 without this.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/test/compat/core/CMakeLists.txt" : {
      "ObjectId" : "078997d1347859ff2a9952461630aec9596c45e1",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# disable generation of debug symbols to speed up build\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/test/compat/core/compat.cmake" : {
      "ObjectId" : "3155e4d5a691b94a45cefab1fdcb88198141876d",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gbc schema compat comes through here, so it isn't enough to avoid\n\n# creating java schema tests in this directory's CMakeLists.txt.\n",
        "Line" : 26,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "cpp/test/compat/grpc/CMakeLists.txt" : {
      "ObjectId" : "57002ec26b9329730a176e5dc7b185653d4000a0",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# driver executable\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# shared generated code\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# server and client executables\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# disable generation of debug symbols to speed up build\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cpp/test/core/CMakeLists.txt" : {
      "ObjectId" : "00cb22d9213a41d7c5349d3a37b2d7d1c0d14d16",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To add a new unit test suite, call add_unit_test at the bottom of this file on\n\n# all of the files you want built into your test suite. The name of the suite\n\n# will be derived from the name of the file that is given first.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#       -DENABLE_TEST_CASE=0x20010000\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Build common code into its own library.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#       -DENABLE_TEST_CASE=0x20010000\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Need a custom output path so the generated #include paths line up\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Full unit test is too big, .pdb files exceed compiler limit;\n\n# Since debugging such large executable is not practical anyways,\n\n# we disable .pdb generation.\n\n# TODO: add support for selecting individual test case via ENABLE_TEST_CASE macro.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cpp/test/grpc/CMakeLists.txt" : {
      "ObjectId" : "88e4e9ac28c8f13178903178c71ed33db09ccb05",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To add a new unit test suite, call add_unit_test at the bottom of this file on\n\n# all of the files you want built into your test suite. The name of the suite\n\n# will be derived from the name of the file that is given first.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build common code into its own library.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "b1a109404da754d1befeadea70bc5c9ca915a721",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build the compiler when doc directory is build by itself\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# add_pandoc_markdown (file.md [file2.md ...]\n\n#   [CODE code]\n\n#   [OUTPUT_DIR dir]\n\n#   [OUTPUT_NAME name]\n\n#   [TEMPLATE template]\n\n#   [OPTIONS opt [opt2 ...]])\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/doxygen/doxygen.cmake" : {
      "ObjectId" : "997693373f6ca27d2755d58ac114de280bfc8e59",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Doxygen doesn't allow specifying output directory via command line arguments\n\n# so we need this silly workaround to set environment variable that is then\n\n# used in the .doxygen file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "fe781dfe00c7feb681e4eea3213f6eb18ba31767",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/CMakeLists.txt" : {
      "ObjectId" : "651eb69b4187795e151be6292413a920b29a96a4",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/CMakeLists.txt" : {
      "ObjectId" : "11a371d6ab3e628adc661db1526c0ef5fd7bcd43",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/access_control/CMakeLists.txt" : {
      "ObjectId" : "9a8f1d4d1ac6818bd803cf825caa7826c5188d94",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/attributes/CMakeLists.txt" : {
      "ObjectId" : "834f7f3f30a32de3f57bfa07e55a38bfeaa5a29e",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/bf/CMakeLists.txt" : {
      "ObjectId" : "e238e5c359dbfb9a4599158b0dd500f4ce3d919a",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# bf was excluded from the all target, so it cannot be installed\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "examples/cpp/core/bf/bf_test.cmake" : {
      "ObjectId" : "ce6e7a78b017c3d051fc373e9bc1f5cfd5fec9c7",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/capped_allocator/CMakeLists.txt" : {
      "ObjectId" : "daa372ee6577e9285b193a7e26f5f2d94f886565",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVC has bugs in some containers (e.g. std::string) where constructors\n\n# accepting an allocator are marked as `noexcept` while they do allocate\n\n# data when checked iterators are enabled (Debug builds by default). This\n\n# terminates the application when `bond::ext::capped_allocator` throws.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/cpp/core/compile_time_schema/CMakeLists.txt" : {
      "ObjectId" : "1c5fd600fab8a6e1488c335c996ae1c87c39ba4b",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/container_of_pointers/CMakeLists.txt" : {
      "ObjectId" : "ca7eb32acb751bf3beb19c46c7921470a75b233f",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/dll/CMakeLists.txt" : {
      "ObjectId" : "4bb1b7ea059395b0938d0b4e07c004f9c6296e4f",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/enumerations/CMakeLists.txt" : {
      "ObjectId" : "336a7fd9581abbaa7991e1dfb26b6ceb7e8b4e97",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/generic_tree/CMakeLists.txt" : {
      "ObjectId" : "ce9835a888f9909a4373c4f7082fa81855b9ecdb",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/generics/CMakeLists.txt" : {
      "ObjectId" : "ea44e8672db180de515c25b6c83eaa89002cf519",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/import/CMakeLists.txt" : {
      "ObjectId" : "9904cd2ce9062698d444791bd9d117c472766dec",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/inheritance/CMakeLists.txt" : {
      "ObjectId" : "b9427c2f9113d18691f8802333a0c5cab220e860",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/marshaling/CMakeLists.txt" : {
      "ObjectId" : "50c3fb79322a36ad85572ab4b29cb998754ea7e3",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/merge/CMakeLists.txt" : {
      "ObjectId" : "1da2e6a947cdb8c18d2c81e1eb83c46b4fa7de45",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/modifying_transform/CMakeLists.txt" : {
      "ObjectId" : "b41f77b94fd0f1f077b45547857a0df3ea7ba2bf",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/move_semantics/CMakeLists.txt" : {
      "ObjectId" : "bb5df77360272683044e5b512ab235b281415c21",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/multiprecision/CMakeLists.txt" : {
      "ObjectId" : "5a9bb20a5af78a31465e1ce3121acad017a3281b",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Deep in the guts of Boost we get a warning about not using a \"secure\"\n\n# routine. Suppress them for this example.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/cpp/core/nothing_default/CMakeLists.txt" : {
      "ObjectId" : "116d574694e5e2d0124d3d19494bd26963c54689",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/output_stream_allocator/CMakeLists.txt" : {
      "ObjectId" : "883f57116348dbb8fdece801ccb8c54f4b3adde4",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/polymorphic_container/CMakeLists.txt" : {
      "ObjectId" : "7612b3c088073af9f63cf6ec8490b4ece10ef592",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/polymorphic_container_visitor/CMakeLists.txt" : {
      "ObjectId" : "ce50c80e92f2e7da77dcf1544447d2cfa2fac087",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/protocol_transcoding/CMakeLists.txt" : {
      "ObjectId" : "12bb186ebe2b2bd57566729516a7a371eedb2e21",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/protocol_versions/CMakeLists.txt" : {
      "ObjectId" : "a20ca4dd146c9396eeb2561ebf704c84f8777d4c",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/record_streaming/CMakeLists.txt" : {
      "ObjectId" : "5278f154cc810ee4a88b059ad2e3b662e6c32208",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/runtime_binding/CMakeLists.txt" : {
      "ObjectId" : "014be54ca029bf73508e5bfda674a5a982e1c4b7",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/runtime_schema/CMakeLists.txt" : {
      "ObjectId" : "774b43eeb14bcd5de7f906f29214deec67e24ce5",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/schema_view/CMakeLists.txt" : {
      "ObjectId" : "c9f1411e66c51b7fd3230a2a2f5c892991f5b8f0",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/scoped_allocator/CMakeLists.txt" : {
      "ObjectId" : "6d63ac2828cad6ac23aba7fdf5f6229403f2700c",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/serialization/CMakeLists.txt" : {
      "ObjectId" : "d53e16ab3439074735874c1b33262babbeaf5979",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/simple_json/CMakeLists.txt" : {
      "ObjectId" : "d65e2f35cf5348edd3a2a3408c555be943de1eb0",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/static_array/CMakeLists.txt" : {
      "ObjectId" : "8e18f30bc9f72fc5d0cbcf0cba94800677e102a0",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/static_library/CMakeLists.txt" : {
      "ObjectId" : "9775e9f23c684ac844059c30cd8c9ec2c4fb3ae6",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/string_ref/CMakeLists.txt" : {
      "ObjectId" : "b93f3ac4aed034f1a383a7e32316ce03aa8f0129",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/time_alias/CMakeLists.txt" : {
      "ObjectId" : "bf2c2e9192910a71e468b2e9ff855af127ccb2cc",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/trace/CMakeLists.txt" : {
      "ObjectId" : "20ebf4b37f709aa1218c15db04d33f3b0451f7e8",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/transform/CMakeLists.txt" : {
      "ObjectId" : "d4a273c09eddd12b0b467c81cf554eff7a66b4c0",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/core/variadic/CMakeLists.txt" : {
      "ObjectId" : "c5ae42cf7f91b2cc4dc438e175352f22ac0ef3df",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/grpc/CMakeLists.txt" : {
      "ObjectId" : "8ff74c3b70cfc6b212a2fb3f4c940a8b91cfb809",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/grpc/async-server/CMakeLists.txt" : {
      "ObjectId" : "7ddcba04b7ef0643cd068450dfbb8d60a2833cac",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/grpc/grpc_dll/CMakeLists.txt" : {
      "ObjectId" : "e40839d41e891a482989c49648d5ce158d1de0ae",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/grpc/grpc_static_library/CMakeLists.txt" : {
      "ObjectId" : "8057615a275ffad10a3a889e01eb73e25ee73df1",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/grpc/helloworld/CMakeLists.txt" : {
      "ObjectId" : "2ba75d971a2c44aba4fbe94cdfaa2fa00b5470ad",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/grpc/pingpong/CMakeLists.txt" : {
      "ObjectId" : "f15d0e1544af8dfc074ff3af19a2bfeb1b863aa6",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cpp/grpc/scalar/CMakeLists.txt" : {
      "ObjectId" : "553f31a754299f216be2f55ca850ea02ff47b930",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/python/CMakeLists.txt" : {
      "ObjectId" : "353665b00de297590aaae03f26217eebc3135c01",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/python/core/CMakeLists.txt" : {
      "ObjectId" : "6f8a7be160c1b5bc599558668a9965c05915ce05",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/python/core/extension/CMakeLists.txt" : {
      "ObjectId" : "a06b862828cded27dabb690bc3aa4ca1b2085c2f",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "java/CMakeLists.txt" : {
      "ObjectId" : "97a1266a0efba6abd4430f3fa00f3ed71c536e8c",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Top-level meta-target to build the entire Java world. Implicitly depends on\n\n# all targets created by add_gradle_build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "java/compat/CMakeLists.txt" : {
      "ObjectId" : "5e20d59866e9c0bfe64abcca653f44272e7e1290",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "java/core/CMakeLists.txt" : {
      "ObjectId" : "4ad6fdd805621616468391323cb39733a7e52c3e",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "java/gradle-plugin/CMakeLists.txt" : {
      "ObjectId" : "bf067bf6cf122cb0dcbf15a792333f723b942a40",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "4a1328972ecc2d4a682aefd9bd3a7c2ac38e959c",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/test/CMakeLists.txt" : {
      "ObjectId" : "afdbb25c9dc99195003f7dea8a3af319395628a0",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/test/compat/CMakeLists.txt" : {
      "ObjectId" : "7582c9126252632353d44491b17e6611f3dcd0ff",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# disable generation of debug symbols to speed up build\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "python/test/compat/compat.cmake" : {
      "ObjectId" : "f1306f2bc681f4b2dfc4dab346297d8c20ea5723",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/test/core/CMakeLists.txt" : {
      "ObjectId" : "b4ba93f7e102653cb483685e8638d3abb789f50b",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# disable generation of debug symbols to speed up build\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty/CMakeLists.txt" : {
      "ObjectId" : "f8c7bf3d6e7fe7b1d87151de2ab92a04c1339b48",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/cmake-modules/FindWindowsSDK.cmake" : {
      "ObjectId" : "665a87f04aab968aa0e6dee04fc3396d955c6d74",
      "LastModified" : "2018-06-27T20:24:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Windows SDK aka Platform SDK\n\n#\n\n# Relevant Wikipedia article: http://en.wikipedia.org/wiki/Microsoft_Windows_SDK\n\n#\n\n# Variables:\n\n#  WINDOWSSDK_FOUND - if any version of the windows or platform SDK was found that is usable with the current version of visual studio\n\n#  WINDOWSSDK_LATEST_DIR\n\n#  WINDOWSSDK_LATEST_NAME\n\n#  WINDOWSSDK_FOUND_PREFERENCE - if we found an entry indicating a \"preferred\" SDK listed for this visual studio version\n\n#  WINDOWSSDK_PREFERRED_DIR\n\n#  WINDOWSSDK_PREFERRED_NAME\n\n#\n\n#  WINDOWSSDK_DIRS - contains no duplicates, ordered most recent first.\n\n#  WINDOWSSDK_PREFERRED_FIRST_DIRS - contains no duplicates, ordered with preferred first, followed by the rest in descending recency\n\n#\n\n# Functions:\n\n#  windowssdk_name_lookup(<directory> <output variable>) - Find the name corresponding with the SDK directory you pass in, or\n\n#     NOTFOUND if not recognized. Your directory must be one of WINDOWSSDK_DIRS for this to work.\n\n#\n\n#  get_windowssdk_from_component(<file or dir> <output variable>) - Given a library or include dir,\n\n#     find the Windows SDK root dir corresponding to it, or NOTFOUND if unrecognized.\n\n#\n\n#  get_windowssdk_library_dirs(<directory> <output variable>) - Find the architecture-appropriate\n\n#     library directories corresponding to the SDK directory you pass in (or NOTFOUND if none)\n\n#\n\n#  get_windowssdk_include_dirs(<directory> <output variable>) - Find the\n\n#     include directories corresponding to the SDK directory you pass in (or NOTFOUND if none)\n\n#\n\n# Requires these CMake modules:\n\n#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)\n\n#\n\n# Original Author:\n\n# 2012 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2012.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Newer than VS .NET/VS Toolkit 2003\n",
        "Line" : 45,
        "CharPositionInLine" : 30
      },
      "2" : {
        "Text" : "# Environment variable for SDK dir\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Per-user current Windows SDK for VS2005/2008\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# System-wide current Windows SDK for VS2005/2008\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# VC 10 and older has broad target support\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# VC 11 by default targets Vista and later only, so we can add a few more SDKs that (might?) only work on vista+\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# This is the XP-compatible v110 toolset\n",
        "Line" : 77,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# This is the VS2010 toolset\n",
        "Line" : 79,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# These versions have no XP (and possibly Vista pre-SP1) support\n",
        "Line" : 84,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Windows Software Development Kit (SDK) for Windows 8.1\n\n# http://msdn.microsoft.com/en-gb/windows/desktop/bg162891\n",
        "Line" : 88,
        "CharPositionInLine" : 5
      },
      "11" : {
        "Text" : "# Included in Visual Studio 2012\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Microsoft Windows SDK for Windows 8 and .NET Framework 4.5\n\n# This is the first version to also include the DirectX SDK\n\n# http://msdn.microsoft.com/en-US/windows/desktop/hh852363.aspx\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Microsoft Windows SDK for Windows 7 and .NET Framework 4\n\n# http://www.microsoft.com/downloads/en/details.aspx?FamilyID=6b6c21d2-2006-4afa-9702-529fa782d63b\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Included in Visual Studio 2013\n\n# Includes the v120_xp toolset\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Included with VS 2012 Update 1 or later\n\n# Introduces v110_xp toolset\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Included with VS 2010\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Windows SDK for Windows 7 and .NET Framework 3.5 SP1\n\n# Works with VC9\n\n#http://www.microsoft.com/en-us/download/details.aspx?id=18950\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Two versions call themselves \"v6.1\":\n\n# Older:\n\n# Windows Vista Update & .NET 3.0 SDK\n\n# http://www.microsoft.com/en-us/download/details.aspx?id=14477\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Newer:\n\n# Windows Server 2008 & .NET 3.5 SDK\n\n# may have broken VS9SP1? they recommend v7.0 instead, or a KB...\n\n# http://www.microsoft.com/en-us/download/details.aspx?id=24826\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Included in VS 2008\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Microsoft Windows Software Development Kit for Windows Vista and .NET Framework 3.0 Runtime Components\n\n# http://blogs.msdn.com/b/stanley/archive/2006/11/08/microsoft-windows-software-development-kit-for-windows-vista-and-net-framework-3-0-runtime-components.aspx\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Remove duplicates\n",
        "Line" : 193,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# In case a preferred dir was found that isn't found otherwise\n\n#set(WINDOWSSDK_DIRS ${WINDOWSSDK_DIRS} ${WINDOWSSDK_PREFERRED_FIRST_DIRS})\n\n#list(REMOVE_DUPLICATES WINDOWSSDK_DIRS)\n",
        "Line" : 210,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Internal: Architecture-appropriate library directory names.\n",
        "Line" : 241,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n",
        "Line" : 243,
        "CharPositionInLine" : 29
      },
      "26" : {
        "Text" : "# what the architecture used to be called\n",
        "Line" : 244,
        "CharPositionInLine" : 24
      },
      "27" : {
        "Text" : "# what the WDK for Win8+ calls this architecture\n",
        "Line" : 245,
        "CharPositionInLine" : 25
      },
      "28" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n",
        "Line" : 248,
        "CharPositionInLine" : 30
      },
      "29" : {
        "Text" : "# what the architecture used to be called\n",
        "Line" : 249,
        "CharPositionInLine" : 27
      },
      "30" : {
        "Text" : "# what the WDK for Win8+ calls this architecture\n",
        "Line" : 250,
        "CharPositionInLine" : 26
      },
      "31" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n\n# what the architecture used to be called\n\n# what the WDK for Win8+ calls this architecture\n",
        "Line" : 252,
        "CharPositionInLine" : 26
      },
      "32" : {
        "Text" : "# If we don't have any \"parent directory\" items...\n",
        "Line" : 265,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# Fail.\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# SDKs like 7.1A\n",
        "Line" : 277,
        "CharPositionInLine" : 28
      },
      "35" : {
        "Text" : "# Win2k min requirement\n\n# WinXP min requirement\n",
        "Line" : 278,
        "CharPositionInLine" : 29
      },
      "36" : {
        "Text" : "# Win Server 2003 min requirement\n",
        "Line" : 280,
        "CharPositionInLine" : 30
      },
      "37" : {
        "Text" : "# Win Vista (\"Long Horn\") min requirement\n",
        "Line" : 281,
        "CharPositionInLine" : 29
      },
      "38" : {
        "Text" : "# Win Vista (\"Long Horn\") min requirement\n",
        "Line" : 282,
        "CharPositionInLine" : 33
      },
      "39" : {
        "Text" : "# Win 7 min requirement\n",
        "Line" : 283,
        "CharPositionInLine" : 30
      },
      "40" : {
        "Text" : "# Win 7 min requirement\n\n# Win 8 min requirement\n\n# Win 8 min requirement\n",
        "Line" : 284,
        "CharPositionInLine" : 34
      },
      "41" : {
        "Text" : "# Win 8.1 min requirement\n\n# Win 8.1 min requirement\n",
        "Line" : 287,
        "CharPositionInLine" : 37
      },
      "42" : {
        "Text" : "# Check to see if a library actually exists here.\n",
        "Line" : 290,
        "CharPositionInLine" : 3
      },
      "43" : {
        "Text" : "# Check to see if a header file actually exists here.\n",
        "Line" : 311,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 44
    }
  },
  "FileTypes" : {
    "CMAKE" : 85
  },
  "ElapsedTime" : 1682
}