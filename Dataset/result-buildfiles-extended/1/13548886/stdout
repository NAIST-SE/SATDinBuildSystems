{
  "Repository" : "13548886",
  "Revision" : "HEAD",
  "ObjectId" : "61d68c38d3e89198f06eb255461ebafe4240738d",
  "CommitTime" : "2016-05-06T11:20:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "044bba545951aa7b4eacef5c000f272b203a4903",
      "LastModified" : "2016-05-06T11:20:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sets build type to release if no build type is specified in a single-configuration generator.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC flags\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# GCC / Clang flags\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Directories\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# SkipIfZero Common\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include directories\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Source files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Main executable\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Linking libraries to main executable\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Specifies directory where generated binary and assets will be placed.\n\n# Assets copying is currently only run when CMakeLists.txt is invoked.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Xcode specific file copying\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# MSVC specific file copying\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Create assets symlinks batch file\n",
        "Line" : 194,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Runtime DLLs\n",
        "Line" : 197,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Create assets symlinks bash script (for non windows platforms)\n",
        "Line" : 205,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 16
    },
    "externals/SkipIfZeroCommon/CMakeLists.txt" : {
      "ObjectId" : "188b7aeb1bf0c773e50dfe8802f9434c6f03a513",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sets build type to release if no build type is specified in a single-configuration generator.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC flags\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# GCC / Clang flags\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Directories\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Adds our cmake modules to module path.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Finds SDL2 and SDL2_image, will make use of $SDL2 environment variable on Windows.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ${SDL2_INCLUDE_DIR}, ${SDL2_LIBRARY}\n",
        "Line" : 36,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : "# Finds SDL2_mixer, will make use of $SDL2 environment variable on Windows.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ${SDL2_MIXER_INCLUDE_DIRS}, ${SDL2_MIXER_LIBRARIES}\n",
        "Line" : 39,
        "CharPositionInLine" : 34
      },
      "10" : {
        "Text" : "# stb nothings\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# tinyobjloader\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# GLEW\n\n# find_package(GLEW REQUIRED) # ${GLEW_INCLUDE_DIRS}, ${GLEW_LIBRARIES}\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Links OpenGL\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ${OPENGL_INCLUDE_DIR}, ${OPENGL_LIBRARIES}\n",
        "Line" : 53,
        "CharPositionInLine" : 30
      },
      "15" : {
        "Text" : "# Catch\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Include directories\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Sources and headers needed to compile library\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Library compile target\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Linking libraries\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Variables for linking library\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Test addding function\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Tests\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "externals/SkipIfZeroCommon/cmake/FindSDL2.cmake" : {
      "ObjectId" : "d9a59ba61115d4aba5d917aa770510e2a8252585",
      "LastModified" : "2016-03-05T13:56:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2 is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2\n\n# used in building SDL2.\n\n# l.e.galup 9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n\n#\n\n# Note that on windows this will only search for the 32bit libraries, to search\n\n# for 64bit change x86/i686-w64 to x64/x86_64-w64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# CMake - Cross Platform Makefile Generator\n\n# Copyright 2000-2014 Kitware, Inc.\n\n# Copyright 2000-2011 Insight Software Consortium\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n# License text for the above reference.)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 118,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 119,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 120,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Lookup the 64 bit libs on x64\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On 32bit build find the 32bit libs\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n\n# Lookup the 64 bit libs on x64\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# On 32bit build find the 32bit libs\n",
        "Line" : 178,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For SDL2main\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# For MinGW library\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "externals/SkipIfZeroCommon/cmake/FindSDL2_mixer.cmake" : {
      "ObjectId" : "46646e853dc8a8a57d846731f13fc5b4b77b2c97",
      "LastModified" : "2016-03-05T13:56:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_mixer library (modified from Cmake's FindSDL_mixer.cmake)\n\n# This module defines:\n\n#  SDL2_MIXER_LIBRARIES, the name of the library to link against\n\n#  SDL2_MIXER_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_MIXER_FOUND, if false, do not try to link against\n\n#  SDL2_MIXER_VERSION_STRING - human-readable string containing the version of SDL2_mixer\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#  SDL2MIXER_LIBRARY (same value as SDL2_MIXER_LIBRARIES)\n\n#  SDL2MIXER_INCLUDE_DIR (same value as SDL2_MIXER_INCLUDE_DIRS)\n\n#  SDL2MIXER_FOUND (same value as SDL2_MIXER_FOUND)\n\n#\n\n# Modified 2016-03-04 by Peter Hillerström (https://github.com/PetorSFZ)\n\n# - Changed environment variable to SDL2\n\n# - Added lib/x64 path suffix\n\n#\n\n#\n\n# $SDL2 is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2\n\n# used in building SDL.\n\n#\n\n#=============================================================================\n\n# Copyright 2014 Justin Jacobs\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for backward compatiblity\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "externals/SkipIfZeroCommon/externals/catch/CMakeLists.txt" : {
      "ObjectId" : "ca2a7b3dde1f536123c8ff82df5b49a5c73a2e39",
      "LastModified" : "2016-03-05T13:56:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/SkipIfZeroCommon/externals/glew/CMakeLists.txt" : {
      "ObjectId" : "063b55c90e99e280ca7a397b23820f302fab3176",
      "LastModified" : "2016-03-05T13:56:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ${OPENGL_INCLUDE_DIR}, ${OPENGL_LIBRARIES}\n",
        "Line" : 5,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# Compile glew\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Variables for linking\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "externals/SkipIfZeroCommon/externals/stb/CMakeLists.txt" : {
      "ObjectId" : "6b5f276c9aa73c8c243c23351ab586fafd571102",
      "LastModified" : "2016-03-05T13:56:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/SkipIfZeroCommon/externals/tinyobjloader/CMakeLists.txt" : {
      "ObjectId" : "e23288c921cb89becf9d246aea98fc275eb995f6",
      "LastModified" : "2016-03-05T13:56:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compile tinyobjloader\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Variables for linking\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 1711
}