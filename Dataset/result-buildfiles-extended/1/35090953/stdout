{
  "Repository" : "35090953",
  "Revision" : "HEAD",
  "ObjectId" : "183f24b45f51d4c1299f2430c987fa78b91a67b0",
  "CommitTime" : "2019-03-31T09:58:59Z",
  "Files" : {
    "plugins/miscellanea/ampswitch/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/backo2/Makefile" : {
      "ObjectId" : "9987df81aae366edffe9f845b048f7fe8a0c90db",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/component-bind/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/component-inherit/Makefile" : {
      "ObjectId" : "ebbc52a3df3bf5bd55c578ef664efbf555a3d822",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/debug/Makefile" : {
      "ObjectId" : "db71cafc4b6bd8b134d03f4f3e03b1a78af6a860",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "plugins/miscellanea/ampswitch/node_modules/epoll/build/Makefile" : {
      "ObjectId" : "83a5a2985bcdddb3f6791403b915a3721c317b36",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "plugins/miscellanea/ampswitch/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/has-cors/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/object-component/Makefile" : {
      "ObjectId" : "b6b98504ec9ce79a7abfb6b8b7c10426c234c963",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/parsejson/Makefile" : {
      "ObjectId" : "2fbcce992e108fff2d1999bfa4fa5a9be8e4b6b9",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/parseqs/Makefile" : {
      "ObjectId" : "2fbcce992e108fff2d1999bfa4fa5a9be8e4b6b9",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/parseuri/Makefile" : {
      "ObjectId" : "2fbcce992e108fff2d1999bfa4fa5a9be8e4b6b9",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/socket.io-parser/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/ampswitch/node_modules/socket.io-parser/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "plugins/miscellanea/remotepi/node_modules/epoll/build/Makefile" : {
      "ObjectId" : "02812a065f8ccf5bd75fb3cbb707bec92c240eb6",
      "LastModified" : "2018-06-25T17:31:33Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "plugins/miscellanea/remotepi/node_modules/sleep/build/Makefile" : {
      "ObjectId" : "02fb75cedd2b536206b880d0902de70091f0d081",
      "LastModified" : "2018-06-25T17:31:33Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "plugins/miscellanea/rfampswitch/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/backo2/Makefile" : {
      "ObjectId" : "9987df81aae366edffe9f845b048f7fe8a0c90db",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/component-bind/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/component-inherit/Makefile" : {
      "ObjectId" : "ebbc52a3df3bf5bd55c578ef664efbf555a3d822",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/debug/Makefile" : {
      "ObjectId" : "584da8bf938e639ece3ba2bd4105c215c2b1ff51",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Path\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# applications\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "plugins/miscellanea/rfampswitch/node_modules/epoll/build/Makefile" : {
      "ObjectId" : "b27e8c9a306f92286ab50825b471e7ca526df495",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "plugins/miscellanea/rfampswitch/node_modules/has-cors/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/object-component/Makefile" : {
      "ObjectId" : "b6b98504ec9ce79a7abfb6b8b7c10426c234c963",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/parseqs/Makefile" : {
      "ObjectId" : "2fbcce992e108fff2d1999bfa4fa5a9be8e4b6b9",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/parseuri/Makefile" : {
      "ObjectId" : "2fbcce992e108fff2d1999bfa4fa5a9be8e4b6b9",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/miscellanea/rfampswitch/node_modules/sleep/build/Makefile" : {
      "ObjectId" : "f059b7e717819358881dd00c81a7abe24c777f46",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "plugins/music_service/personal_radio/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/music_service/personal_radio/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "db845189ad1ba05a37c881e06b8c6e082420148d",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "plugins/music_service/personal_radio/node_modules/isarray/Makefile" : {
      "ObjectId" : "787d56e1e982e48588bc199f36f0d50cb4724066",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/music_service/personal_radio/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/music_service/personal_radio/node_modules/request/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/music_service/personal_radio/node_modules/sntp/Makefile" : {
      "ObjectId" : "417fd93708605f0a88b4cf36f0eab46d9eb653ca",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/music_service/personal_radio/node_modules/unirest/Makefile" : {
      "ObjectId" : "5ce1c488f808a38d52982dc1dd220e91ca5d2bc4",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/music_service/personal_radio/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "plugins/system_controller/volsmartpower/node_modules/epoll/build/Makefile" : {
      "ObjectId" : "0b135933aa84084cd9a0e37b0842368d00e7d894",
      "LastModified" : "2018-06-20T23:27:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Due to circular dependencies between libraries :(, we wrap the\n\n# special \"figure out circular dependencies\" flags around the entire\n\n# input list during linking.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We support two kinds of shared objects (.so):\n\n# 1) shared_library, which is just bundling together many dependent libraries\n\n# into a link line.\n\n# 2) loadable_module, which is generating a module intended for dlopen().\n\n#\n\n# They differ only slightly:\n\n# In the former case, we want to package all dependent code into the .so.\n\n# In the latter case, we want to package just the API exposed by the\n\n# outermost module.\n\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n\n# (Note that --whole-archive is incompatible with the --start-group used in\n\n# normal linking.)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Other shared-object link notes:\n\n# - Set SONAME to the library filename so our binaries don't reference\n\n# the local, absolute paths used on the link command-line.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 45
  },
  "ElapsedTime" : 2677
}