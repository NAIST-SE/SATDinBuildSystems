{
  "Repository" : "8464919",
  "Revision" : "HEAD",
  "ObjectId" : "2d20d4e8ac28adfcede7a9bd231ea0d9d12d0bbb",
  "CommitTime" : "2019-04-11T07:43:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4b5ab620e7d420d0730f516e70c9a3a8db525123",
      "LastModified" : "2019-03-12T09:13:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verbosity\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################\n\n# Installation directories\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Place all .exe and .dll in one directory\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configuration we need everywhere\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the core Prolog system\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install a prolog script to run tests on target device\n\n# in which ctest is not available\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Move test db to installation\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add the packages\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for environment variables that may cause the build to fail\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Packaging\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/AlignOf.cmake" : {
      "ObjectId" : "13e4dd4702e9e3883e546a8e87f0f300481eb95a",
      "LastModified" : "2019-03-12T09:13:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define variables for alignment of int64, void*, and double\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile alignment checker source\n",
        "Line" : 5,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Match 1,4, 8,16,32 or 64 alignments\n",
        "Line" : 14,
        "CharPositionInLine" : 9
      },
      "3" : {
        "Text" : "# Read patterns from compiled executable\n",
        "Line" : 17,
        "CharPositionInLine" : 9
      },
      "4" : {
        "Text" : "# Extract alignments from patterns and assign them to the variables\n",
        "Line" : 27,
        "CharPositionInLine" : 9
      },
      "5" : {
        "Text" : "# Cache the results\n",
        "Line" : 32,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : "# Report the results\n",
        "Line" : 37,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 7
    },
    "cmake/AndroidTargets.cmake" : {
      "ObjectId" : "eac645a47b48e9d8e9324251b6b4712246f6a871",
      "LastModified" : "2019-03-12T09:13:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set target options for Android\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Minizip needs USE_FILE32API on Android\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/BuildType.cmake" : {
      "ObjectId" : "827cc56e7e884602bd56b197d77b47a1136e2f7b",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set a default build type if none was specified\n\n# Based on https://blog.kitware.com/cmake-and-the-default-build-type/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Using gdwarf-2 -g3 allows using macros in gdb, which helps a lot\n\n# when debugging the Prolog internals.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CStack.cmake" : {
      "ObjectId" : "7850503c41ab7bbf3f95275c47d07ae9a340f31d",
      "LastModified" : "2018-09-22T15:12:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CheckEnv.cmake" : {
      "ObjectId" : "f4a71d261667158dbf9fbee97d2bc98dfdbd47a9",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CheckFloatingPointFormat.cmake" : {
      "ObjectId" : "89029ee770d392dee884811c55acc4d73e1751f7",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CheckInstallation.cmake" : {
      "ObjectId" : "1c605183fc0b3e0d03730904bfdd5fab7b07ad77",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build check_installation.pl in the home directory\n\n# it is calles by InstallSource.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Config.cmake" : {
      "ObjectId" : "525a0aa0f591ecd3c9fa9c8cf4cead6ed7d7d54d",
      "LastModified" : "2019-04-08T19:49:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n\n#  set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -Wno-builtin-declaration-mismatch)\n\n#endif()\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################\n\n# Types\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################\n\n# Functions\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Misc\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# files\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Strings and locale\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# processes\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# environment, config\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# dynamic linking\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# signals\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Allocation\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# terminal\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# math\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# check_function_exists(fpclassify HAVE_FPCLASSIFY)\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# time and sleep\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# threads and scheduling\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Windows\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# GMP\n\n# check_function_exists(gmp_randinit_mt HAVE_GMP_RANDINIT_MT)\n\n# Requires <gmp.h> as this is a macro\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Don't test BSD signals on EMSCRIPTEN - hangs the process.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "################\n\n# Set of features compatible with the old config tools\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "################\n\n# Stuff we do not need to define is below such that findmacros.pl does\n\n# not complain about them.\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# HAVE_VISITED (locally defined and used)\n\n# HAVE_SIGNALS (locally defined and used)\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/Documentation.cmake" : {
      "ObjectId" : "f44af6b42c04e93724b666f8fa87da693c029d58",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Conversion programs from various formats to LaTeX\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tex_byproducts(base var)\n\n# Fill var with a list of all LaTeX byproducts when emitting ${base}\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/EmscriptenTargets.cmake" : {
      "ObjectId" : "b5a0945157bfdeb4de53f82e73d881dbeac469a0",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make console binaries runnable through Node.js.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create the preload data containing the libraries. Note that\n\n# alternatively we can put the library in the resource file and\n\n# link the resource file into the main executable.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the browser-deployed binary with a bit different linker flags.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindGMP.cmake" : {
      "ObjectId" : "6adfd2c3b17a2b916b5c48e8800be7f61552df2d",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# - Find GMP/MPIR libraries and headers\n\n# This module defines the following variables:\n\n#\n\n# GMP_FOUND         - true if GMP/MPIR was found\n\n# GMP_INCLUDE_DIRS  - include search path\n\n# GMP_LIBRARIES      - libraries to link with\n\n# GMP_LIBRARY_DLL    - library DLL to install. Only available on WIN32.\n\n# GMP_LIBRARIES_DIR - the directory the library we link with is found in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#use GMP, notice that there are two cases, everything is the same directory, or everything is in\n\n#its proper places\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIET and REQUIRED arguments and set GMP_FOUND to TRUE if\n\n# all listed variables are true\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/GCCBuiltins.cmake" : {
      "ObjectId" : "2e2d9ab16bfaf820b5d5b6a9ec8cec4540e859cc",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler features\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Builtin functions that lead to conflicts\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Install.cmake" : {
      "ObjectId" : "c5c45c74db227d6ac9cbd15b2fc38a9804c1932e",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/InstallSource.cmake" : {
      "ObjectId" : "d352906550e51c519cae71ccc900ab71130b745b",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Installation of SWI-Prolog data files that are literally\n\n# copied from the sources to their installation location.\n\n#\n\n# We want to use this to create a shadow data tree in the\n\n# CMAKE_BINARY_DIRECTORY such that we can run the full system\n\n# without installing it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ${SWIPL_BUILD_HOME} holds the direcory where we link the Prolog\n\n# resource files.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create_directory(dir)\n\n#\n\n# Creates a custom target to create   a directory. Multiple projects may\n\n# try to generate the same target. Using make, each such target will end\n\n# up in its own directory Makefile while using ninja all are in one file\n\n# and we must avoid duplication of these rules. Note that multiple rules\n\n# racing to create a directory are fine.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Locations.cmake" : {
      "ObjectId" : "24565896bed60e42d378fc930ea05d0cdbc44e64",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the installation prefix from $SWIPL_INSTALL_PREFIX.  If this\n\n# environment variable ends in /@builddir@, replace @builddir@ with\n\n# the name of the binary build directory, so we can easily install\n\n# multiple different versions in the same filesystem\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set well-known locations. Should be merged as  they are now at various\n\n# places.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Pack.cmake" : {
      "ObjectId" : "dd27062744c564321ec7b636ee898232b958e6f2",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup package generation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We don't want an additional page when attacking the dmg\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Stripping on apple complains about dynamic symbols that cannot be\n\n# stripped\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# see https://crascit.com/2015/08/07/cmake_cpack_nsis_shortcuts_with_parameters/\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/PackageSelection.cmake" : {
      "ObjectId" : "a308caa4bdc7c17bd035e6197f653e768f9de7d7",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Can we get spaces in component names?\n\n# Do not change the titles as these are the COMPONENT names\n\n# and used by modular install scripts\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The pckages below do not depend on external libraries except for\n\n# the zlib package, but the core system already depends on zlib.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Each of the package sets below depend on additional external libraries\n\n# and are typically distributed in separate .deb or .rpm files.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# swipl_package_component(pkg var)\n\n#\n\n# Set ${var} to the package group to which ${pkg} belongs\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Package dependencies as computed using script/xref_packages.pl\n\n# FIXME: Some dependencies should be avoided, for example:\n\n#   - term//2 should move from `pengines` to `http`\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Explicitly requested packages\n",
        "Line" : 135,
        "CharPositionInLine" : 27
      },
      "6" : {
        "Text" : "# Required packages\n",
        "Line" : 136,
        "CharPositionInLine" : 28
      },
      "7" : {
        "Text" : "# has_package(name var)\n\n#\n\n# Set var to ON if the package  name   is  included in the targets. Note\n\n# that as of cmake 3.3. we can use if(\"string\" IN_LIST list).\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# del_package(name reason)\n\n#\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# swipl_add_packages([EXPLICIT]\n\n#\t\t     [DEPENDENCY]\n\n#\t\t     PACKAGES ...\n\n#\t\t     [COMMENT ...])\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################\n\n# Assemble the package list\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################\n\n# Add dependent packages\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/Params.cmake" : {
      "ObjectId" : "73cbeeb8c32a6d32b621c5b52512ee8037ad6e7e",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Populate parms.h\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Ports.cmake" : {
      "ObjectId" : "3a3edd55ef729c3b4f08ed9319f0a7b0285e5505",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Architecture id (Prolog flag `arch`, architecture subdirs)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup cross compiling.  As discussed with _erlanger_ in\n\n# https://github.com/SWI-Prolog/swipl-devel/issues/358#issuecomment-439675854\n\n# we distinguish three scenarios for building:\n\n#\n\n#   1. Native compilation\n\n#   2. Cross compilation with a good emulator (Wine for Windows, Node.js\n\n#      for WASM)\n\n#   3. Cross compilation without a usable emulator.\n\n#\n\n# In case #3 we need to make two builds:\n\n#   1. Compile SWI-Prolog on the build host with a compatible pointer size\n\n#   2. Cross-compile to the final target\n\n#\n\n# The first step is used to produce build artifacts that are needed\n\n# by the cross-compilation step. SWIPL_NATIVE_FRIEND points to the directory\n\n# which contains the build for step #1.\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ${SWIPL_NATIVE_FRIEND}, is  either  the  name  of  a  sibling  build\n\n# directory  containing  a compatible native SWI-Prolog or an absolute   path\n\n# pointing at such a directory.  By compatible we mean that the pointer size\n\n# is the same.\n\n#\n\n# The following variables are set, and can be used elsewhere:\n\n#\n\n#   - ${PROG_SWIPL} is a native or friend Prolog executable that can\n\n#                   be used for general Prolog tasks such as generating\n\n#                   the library index or documentation\n\n#\n\n#   - ${PROG_SWIPL_FOR_BOOT} is a native or friend Prolog executable that can\n\n#                            be used for compiling boot.prc and .qlf files.\n\n#                            These used to be platform specific.  Now,\n\n#\t\t\t     ${PROG_SWIPL} should do. We keep a separate\n\n#\t\t\t     variable for the time being.\n\n#\n\n# Note: The helper tools mkvmi and  defatoms   (see  src  directory) are built\n\n# using ${CMAKE_HOST_CC} when cross-compiling, and do not need SWIPL_NATIVE_FRIEND.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################\n\n# Misc tests\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/QLF.cmake" : {
      "ObjectId" : "c057ae9b136070abf3ff1f11688763988fa8be68",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# compile_qlf spec ...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_swipl_target(name\n\n#\t\t   OUTPUT output\n\n#                  COMMAND command\n\n#\t           [OPTIONS ...]\n\n#\t           [SCRIPT ...]\n\n#\t           [QUIET]\n\n#\t           [COMMENT comment]\n\n#\t\t   [DEPENDS ...])\n\n#\n\n# Add a custom target that runs Prolog to create output in the locally created\n\n# Prolog home ${SWIPL_BUILD_HOME}.  The created product is added to the installation\n\n# target at the same location.\n\n#\n\n# Variables:\n\n#   - ${SWIPL_COMMAND_DEPENDS} is added to the dependencies\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_qcompile_target(\n\n#     target\n\n#     [SOURCES ...]\n\n#     [DEPENDS ...]\n\n#     [PRELOAD ...]\n\n#\n\n# Preloading a library is written as e.g. PRELOAD lib:pldoc to load\n\n# library(pldoc).\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# run_installed_swipl(command\n\n#\t\t      [QUIET]\n\n#\t\t      [SCRIPT script ...]\n\n#\t\t      [PACKAGES pkg ...]\n\n#\t\t      [COMMENT comment])\n\n#\n\n# Run the compiled Prolog system with its home set to the installed system.\n\n# This is used for post installation tasks\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# qcompile(spec ...)\n\n# Generate QLF files for the given libraries.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/TestBSDSignals.cmake" : {
      "ObjectId" : "e55ab36cc6cfaa699866c2eb6c2f9453c2addc3a",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TestGNUQsortR.cmake" : {
      "ObjectId" : "539055969846fa6155235563dcbabe35eb10b119",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TestHeaderTime.cmake" : {
      "ObjectId" : "0ac9ecb00db2da1b0ad5d9e073f9ee12ad172ffb",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get TIME_WITH_SYS_TIME, compatible with autoconf AC_HEADER_TIME\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/TestRecursiveMutex.cmake" : {
      "ObjectId" : "094b0b4c048bdeb8e6a2265def06cb33e78e05d3",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TestSCNProcessors.cmake" : {
      "ObjectId" : "709db5a94a765c2d00e39c2969ce2bae88cb02bf",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TestSignalType.cmake" : {
      "ObjectId" : "29ce64a39c12b165734f0144d4dffdf078db2b10",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake/TestSignalType.cmake\n\n#\n\n# Test for the return type of signal defined in <signal.h>\n\n#\n\n# Copyright (C) 2006  Andrew Ross\n\n#\n\n# This file is part of PLplot.\n\n#\n\n# PLplot is free software; you can redistribute it and/or modify\n\n# it under the terms of the GNU Library General Public License as published\n\n# by the Free Software Foundation; version 2 of the License.\n\n#\n\n# PLplot is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU Library General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU Library General Public License\n\n# along with the file PLplot; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If signal.h defines signal as returning a pointer to a function \n\n# returning void RETSIGTYPE is defined as void. Otherwise RETSIGTYPE is\n\n# defined as int.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "d4186177de919ba991ad27750e328cf0512d421e",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prepend(out prefix ...)\n\n# assign ${out} with all arguments from ... after prepending prefix to\n\n# it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# join_list(out set element ...)\n\n#\n\n# Modern cmake has list(JOIN ...), but older do not.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ilink(from to)\n\n# Install ${from} in ${to} using a relative symbolic link\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Some autoconf utilities\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Prolog parts\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Version.cmake" : {
      "ObjectId" : "43029879bb395b6832d18c717d5ba443d3b579bc",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set SWIPL_VERSION_MAJOR, SWIPL_VERSION_MINOR and SWIPL_VERSION_PATCH\n\n# from the VERSION file in the project root\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/WindowsTargets.cmake" : {
      "ObjectId" : "7be9e11eb6101142e4bbafb979896c07849ad993",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup the additional targets for Windows: swipl-win.exe and plterm.dll\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build plterm.dll\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build swipl-win.exe\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/cross/linux_i386.cmake" : {
      "ObjectId" : "8c3c2ff888b8888fdf9f4669e2041f1890fe8ee7",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is supposed to be a TOOLCHAIN file for compiling a 32-bit version\n\n# on 64-bit Linux, but that doesn't work  somehow. The work around is to\n\n# configure using\n\n#\n\n#     cmake -DSWIPL_M32=ON ...\n\n#\n\n# Note that all packages, gcc and g++ need to be installed for i386,\n\n# e.g.\n\n#\n\n#     apt install gcc-multilib g++-multilib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# apt install \\\n\n#\tlibarchive-dev:i386 libc6-dev:i386 libc6-dev-i386 \\\n\n#\tlibdb-dev:i386 libedit-dev:i386 libgmp-dev:i386 \\\n\n#\tlibice-dev:i386 libjpeg-dev:i386 libjpeg8-dev:i386 \\\n\n#\tlibncurses5-dev:i386 libossp-uuid-dev:i386 \\\n\n#\tlibpcre3-dev:i386 libssl1.0-dev:i386 \\\n\n#\tlibstdc++-7-dev:i386 libxext-dev:i386 libxft-dev:i386 \\\n\n#\tlibxinerama-dev:i386 libxpm-dev:i386 libxt-dev:i386 \\\n\n#\tlibyaml-dev:i386 zlib1g-dev:i386\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the name of the target operating system (if TOOLCHAIN works)\n\n# set(CMAKE_SYSTEM_NAME Linux)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tell gcc and g++ to generate i386 binaries\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get this right\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Search in /usr/lib/i386-linux-gnu for the multi archive\n\n# libraries\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make pkg-config search in /usr/lib/i386-linux-gnu/pkgconfig\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/cross/linux_win32.cmake" : {
      "ObjectId" : "a8a00160c2b2373940b8afb7a72a4a2b8e60c330",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/cross/linux_win64.cmake" : {
      "ObjectId" : "1958a27ba2a4df75f67250c19ecdf64f5fc8a44d",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/port/Android.cmake" : {
      "ObjectId" : "eeb80178cf5646d52c481702390f2c091247cde3",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/port/Darwin.cmake" : {
      "ObjectId" : "f8f5e9678ff0304d283f8bb21da9b5c7a671211b",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prefer sem_open() over deprecated sem_init()\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/port/Emscripten.cmake" : {
      "ObjectId" : "b1595326f432ebd032fb313eaba31a6c59c9d2b9",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We could set set linker flags for all excutables if we\n\n# could override them for the browser binary.\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s ASSERTIONS=2 -s NODERAWFS=1 -s EXIT_RUNTIME=1\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# AlignOf.cmake doesn't work for Emscripten\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/port/MinGW.cmake" : {
      "ObjectId" : "5f406b1eea19bd69ce2979fe19dfa5cc37200a31",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/port/Windows.cmake" : {
      "ObjectId" : "f0ae67f199e2a0cb7a8722e977d75b87e390daed",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Separator for swipl -p alias=dir<sep>dir...\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "man/CMakeLists.txt" : {
      "ObjectId" : "b5a740ba7e363071840efeb58ae07766cee34be1",
      "LastModified" : "2019-03-26T16:06:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Libraries documented in .doc files\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Main files\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: we should reduce dependencies\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# pldoc(tex input\n\n#\t[OPTIONS ...]\n\n#\t[DEPENDS ...]\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Specify how to generate tex files from PlDoc\n\n# NOTE: all files must be included from lib/library.doc and\n\n# NOTE: lib/libsummary.doc\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check that we do not have both a .doc file and extract from the\n\n# Prolog source\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create SWI-Prolog-<version>.tex\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Collect all input files\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Collect LaTeX aux files\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Demand copied files (figures, etc)\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Create the HTML manual\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################\n\n# Windows and MacOS platform guides\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "packages/cmake/PackageDoc.cmake" : {
      "ObjectId" : "b5e0e921cc36c2dc3c9f9939b14f8421a1a10398",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# pldoc file.pl [out.tex] [library(lib)]\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# pkg_doc(pkg\n\n#\t  [ SOURCE file.pl [out.tex] [library(...)] ]*\n\n#\t  [ SOURCES file.pl file.doc ... ])\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Some packages rely on man/pl.bib rather than a local bibliography\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "packages/cmake/PrologPackage.cmake" : {
      "ObjectId" : "79a844ace90b54f94a76a992ce53c0f6029c3daf",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include in all Prolog packages\n\n#\n\n# This CMAKE file is used to make   handling  the packages as uniform as\n\n# possible such that we can perform   all  global package reorganization\n\n# centrally.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get cmake files from this package, the package infrastructure and\n\n# SWI-Prolog overall\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake modules we always need\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Arity is of size_t.  This should now be the case for all packages\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: packages should use O_PLMT\n",
        "Line" : 23,
        "CharPositionInLine" : 22
      },
      "5" : {
        "Text" : "# get SWI-Prolog.h and SWI-Stream.h\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On ELF systems there is no need for   the  modules to link against the\n\n# core system. Dropping this has two advantages: the result is easier to\n\n# relocate and building  the  packages  can   for  a  large  part happen\n\n# concurrently with the main system.\n\n#\n\n# The Android linker does not make  symbols globally visibly (unless the\n\n# library is loaded using LD_PRELOAD) so   we  are linking the libraries\n\n# here.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# swipl_plugin(name\n\n#\t       [MODULE name]\n\n#\t       [C_SOURCES file ...]\n\n#\t       [C_LIBS lib ...]\n\n#\t       [C_INCLUDE_DIR dir ...]\n\n#\t       [PL_GENERATED_LIBRARIES ...]\n\n#\t       {[PL_LIB_SUBDIR subdir]\n\n#\t           [PL_LIBS file ...])}*\n\n#\n\n# Define a plugin. A  plugin  consists   optionally  of  a shared object\n\n# (module) and a number of Prolog sources  that must be installed in the\n\n# library or a subdirectory thereof. It   creates  a target ${name} that\n\n# creates the shared object, make sure  the Prolog sources are installed\n\n# in our shadow home and the `install` target is extended to install the\n\n# module and Prolog files.\n\n#\n\n# A SWI-Prolog package (directory under `packages`) may provide multiple\n\n# plugins.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# current subdir\n",
        "Line" : 83,
        "CharPositionInLine" : 21
      },
      "9" : {
        "Text" : "# list of subdirs\n",
        "Line" : 84,
        "CharPositionInLine" : 22
      },
      "10" : {
        "Text" : "# list of subdirs (generated files)\n",
        "Line" : 85,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : "# install_dll(file ...)\n\n#\n\n# Install support DLL files.  This function is normally passes the link\n\n# library used to build the dll.  It determines the dll from this link\n\n# library and copies this both to the current binary and final installation\n\n# tree.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# swipl_examples(file ... [SUBDIR dir])\n\n#\n\n# Install the examples\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# test_lib(name\n\n#\t   [PACKAGES ...]\n\n#\t   [PARENT_LIB]\n\n#\t   [TEST_FILES ...]\n\n#          [TEST_DIRS ...])\n\n#\n\n# Run test_${name} in test_${name}.pl\n\n#\n\n# TEST_FILES_REGEX is only needed if the test files are *not* under a\n\n# directory named test[s] or Test[s]. It is one regular expression\n\n# which will be matched against the full path of the package source\n\n# and build directories.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Write db with lists of tests to be used with -DINSTALL_TESTS\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Install files needed for testing at run time\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# test_libs(name ...\n\n#\t    [PACKAGES package ...]\n\n#\t    [PARENT_LIB])\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Documentation support\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "packages/cmake/Sockets.cmake" : {
      "ObjectId" : "85ca2777e93c31d5289ecfa144a61629075c771c",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "a0f15814bbc08b980014300e1a82e6b3bbaf5c81",
      "LastModified" : "2019-03-26T16:06:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Is this still needed?\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Source locations\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tools (swipl-ld)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Installation\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################\n\n# C files\n\n################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################\n\n# Prolog data files\n\n################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ${PL_LIB_FILES_ALL} holds all files from the library that are indexed\n\n# ${PL_LIB_INDEX} holds the index file\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################\n\n# Custom targets and commands\n\n################\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# build helpers\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# FIXME: we should create these in the build directory\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Precompile some popular larger libraries to .QLF\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The C config file\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Configure some data files.  Uses a function because these\n\n# files use old-style variable names and we want to avoid these\n\n# leaking into the cmake environment.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set swipl.home above binaries to a relative path to the root\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Final swipl.home for installed system\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Establish libraries\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# build swipl\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# build the library\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "################\n\n# PGO (profile guided optimization)\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#     requires cmake 3.13\n\n#     target_link_options(${t} PRIVATE ${PGO_GENERATE_FLAGS})\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#     target_link_options(${t} PRIVATE ${PGO_USE_FLAGS})\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Does not work.  Please use scripts/pgo-compile.sh\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cannot use the target `swipl` as that causes a build before we run\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "################\n\n# Testing\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#Copy core tests to the installation\n",
        "Line" : 462,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# Populate parms.h, making the compilation environment known to Prolog\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "################\n\n# Installation\n\n################\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Make sure tmp directory exists\n\n#\n\n# This is used on Android, where there  is normally no TMP directory and\n\n# the choosen location is not shared  with   any  other  users, since on\n\n# Android every application is its own user.\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Create symbolic link from public installation dir to executables\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "src/config.h.cmake" : {
      "ObjectId" : "7d4b6dccbb531d866bf000578676902c833f6084",
      "LastModified" : "2019-04-07T06:54:12Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "src/minizip/Makefile.am" : {
      "ObjectId" : "d343011ebc3b3fd78d2bc3a29801a083c038cf0c",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/parms.h.cmake" : {
      "ObjectId" : "c992aa053d181413103b3b6809b56ab8e1448288",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "src/win32/console/CMakeLists.txt" : {
      "ObjectId" : "9c8b2c1225ad466263db937ef67ac27d1c4b3a0d",
      "LastModified" : "2019-03-13T13:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 44,
    "CMAKESOURCE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2463
}