{
  "Repository" : "4996980",
  "Revision" : "HEAD",
  "ObjectId" : "3670278342d2f4faa49d95b46d86642d7875b47c",
  "CommitTime" : "2016-09-21T02:41:26Z",
  "Files" : {
    "src/CMakeLists.txt" : {
      "ObjectId" : "5699653f276b4a50586b07d9aea71061e7a070df",
      "LastModified" : "2016-09-20T02:57:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# IGNORE_SORRY is a tempory option (hack). It allows us to build\n\n# a version of Lean that does not report when 'sorry' is used.\n\n# This is useful for suppressing warning messages in the nightly builds.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When cross-compiling, we do not compile the standard library since\n\n# the executable will not work on the host machine\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When ON we try to minimize the amount of memory needed to compile Lean using gcc.\n\n# We use this flag when compiling at Travis.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include MSYS2 required DLLs and binaries in the binary distribution package\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# When ON we add lean binary dependency to standard and HOTT libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# When ON we include githash in the version string\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# When ON thread storage is automatically finalized, it assumes platform support pthreads.\n\n# This option is important when using Lean as library that is invoked from a different programming language (e.g., Haskell).\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Directory that include lean emacs mode dependecies\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# emacs site-lisp dir\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# library dir\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Added for CTest\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Windows does not support ulimit -s unlimited. So, we reserve a lot of stack space: 100Mb\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# See https://github.com/leanprover/lean/issues/930#issuecomment-172555475\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Set Module Path\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Initialize CXXFLAGS.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# OSX .dmg generation (this is working in progress)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##################\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set a consistent MACOSX_RPATH default across all CMake versions.\n\n# When CMake 2.8.12 is required, change this default to 1.\n\n# When CMake 3.0.0 is required, remove this block (see CMP0042).\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The following options is needed to generate a shared library\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# SPLIT_STACK\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Test coverage\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Compiler-specific C++11 activation.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# In OSX, clang requires \"-stdlib=libc++\" to support C++11\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# BOOST\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Hide warnings when using Boost and g++ on OSX\n",
        "Line" : 199,
        "CharPositionInLine" : 5
      },
      "25" : {
        "Text" : "# MPFR\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# GMP\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# TRACK_MEMORY_USAGE\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# jemalloc\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# tcmalloc\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Readline\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Check malloc_usable_size\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Python\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Git HASH\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Version\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# leanemacs file\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# linja\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# The DLL (shared library) is not being generated correctly when we use cross-compilation (i.e., generate the Windows DLL using Linux).\n\n# For some strange reason, it contains a copy of pthread_equal.\n\n# Remark: this problem does not happen when we generate the DLL using msys2 on Windows.\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Compatibility Checks using https://github.com/foonathan/compatibility\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# The DLL (shared library) is not being generated correctly when we use cross-compilation (i.e., generate the Windows DLL using Linux).\n\n# For some strange reason, it contains a copy of pthread_equal.\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Include style check\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Set PROCESSOR_COUNT\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Unknown:\n",
        "Line" : 411,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Linux:\n",
        "Line" : 414,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Mac:\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Windows:\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# add_custom_target(\n\n#   hott_lib ALL\n\n#   COMMAND \"${PYTHON_EXECUTABLE}\" \"${LEAN_SOURCE_DIR}/../bin/linja\" all\n\n#   DEPENDS \"${CMAKE_BINARY_DIR}/shell/lean\"\n\n#   WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../hott\"\n\n#   )\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# TODO(Leo): do not use hardlinks to required DLLs.\n\n# For example, we can try to use ldd to retrieve the list of required DLLs.\n",
        "Line" : 502,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# CPack\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# CPack -- Debian\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 50
    },
    "src/CTestConfig.cmake" : {
      "ObjectId" : "7e827c937300bf94aec754db2da73b1aaff3be4e",
      "LastModified" : "2013-11-25T08:14:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify MEMCHECK Option: http://valgrind.org/docs/manual/mc-manual.html\n\n# Note: We use \"--trace-children=yes\" to valgrind-ise child processes (follow execve)\n\n# Note: We turn off \"--show-reachable=yes\" option.\n\n#set(MEMORYCHECK_SUPPRESSIONS_FILE ${CMAKE_SOURCE_DIR}/memcheck.supp)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/api/CMakeLists.txt" : {
      "ObjectId" : "9d40b6456cbcb0481ebbed4b33f3dff3ea8572bb",
      "LastModified" : "2015-09-08T23:44:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/Modules/CleanOlean.cmake" : {
      "ObjectId" : "957cade82c091da43c4385e9d721e23c3d1b277f",
      "LastModified" : "2015-07-21T06:21:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "9941c3a7d5c41a2af0dcc2cd645bec871ddc22db",
      "LastModified" : "2013-11-10T03:19:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Iowa State University 2009-2011\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n# https://github.com/bilke/cmake-modules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#        SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#        SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#        cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#        make\n\n#        make my_coverage_target\n\n#\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 82,
        "CharPositionInLine" : 16
      },
      "10" : {
        "Text" : "# Setup target\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 87,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 90,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 93,
        "CharPositionInLine" : 16
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 109,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 120,
        "CharPositionInLine" : 16
      },
      "18" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 124,
        "CharPositionInLine" : 16
      },
      "19" : {
        "Text" : "# Run tests\n",
        "Line" : 128,
        "CharPositionInLine" : 16
      },
      "20" : {
        "Text" : "# Running gcovr\n",
        "Line" : 131,
        "CharPositionInLine" : 16
      },
      "21" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 137,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA",
        "Line" : 143,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 23
    },
    "src/cmake/Modules/CompBase.cmake" : {
      "ObjectId" : "736b06e71e25d1defc84184e9ad087c8416741a3",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2015-2016 Jonathan Müller <jonathanmueller.dev@gmail.com>\n\n# This file is subject to the license terms in the LICENSE file\n\n# found in the top-level directory of this distribution.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# comp_base.cmake - base functionality for all compatibility files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EXTERNAL\n\n# the current API version\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# EXTERNAL\n\n# download location for feature files, the feature file name will be appended\n\n# to circumvent download process, manually place the files at the CMAKE_PATH\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# EXTERNAL; feature module\n\n# requires a certain API version\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# INTERNAL\n\n# gets name, followed by flag, name, flag, name, flag...\n\n# checks flags in order of occurence\n\n# first matching flag will be used!\n\n# result is written into named cache option\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# INTERNAL\n\n# parses arguments for comp_compile_features\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# no arg\n",
        "Line" : 66,
        "CharPositionInLine" : 68
      },
      "8" : {
        "Text" : "# single arg\n",
        "Line" : 67,
        "CharPositionInLine" : 74
      },
      "9" : {
        "Text" : "# INTERNAL\n\n# translates feature names\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# note: triple underscore at beginning!\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# INTERNAL\n\n# downloads the file for a feature\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# INTERNAL\n\n# writes the header and testing code, if needed\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# INTERNAL\n\n# handles a feature file\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# EXTERNAL; user\n\n# setups certain features for a target\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# these variables are modified/accessed by the feature modules\n\n# deprecated\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# first explicit option, then implicit; 17 over 14 over 11\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# EXTERNAL; feature module\n\n# checks for a feature with ${name} by compiling ${test_code}\n\n# standard is COMP_CPPXX_FLAG and will be used for testing\n\n# additional arguments are required other features, if they are not supported, it will be neither\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# EXTERNAL; feature module\n\n# writes workaround code\n\n# test result is available via macro ${COMP_PREFIX}HAS_${name in uppercase}\n\n# standard is COMP_CPPXX_FLAG required for the workaround code\n\n# if the test succeds, the standard of the test is also activated\n\n# additional arguments are required other features, their headers are also included then\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# EXTERNAL; feature module\n\n# generates a unit test file for workaround of feature ${name}\n\n# the include for the feature is available as is the Catch library\n\n# ${code} will be placed inside a Catch TEST_CASE, ${global} in the global scope in front of it\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# EXTERNAL; feature module\n\n# writes SD-6 feature macro with given name and value\n\n# overrides existing value if given one is greater or macro COMP_OVERRIDE_SD6 is defined\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# EXTERNAL; umbrella feature module\n\n# downloads and includes a feature named ${feature}\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# DEPRECATED, use comp_workaround\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# DEPRECATED, use comp_feature()\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "src/cmake/Modules/FindGMP.cmake" : {
      "ObjectId" : "795c2cdcde1affa93ec0dd324762a76acb05b419",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#find_library(GMPXX_LIBRARIES NAMES gmpxx libgmpxx )\n\n#MESSAGE(STATUS \"GMP: \" ${GMP_LIBRARIES}) # \" \" ${GMPXX_LIBRARIES} )\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/Modules/FindJemalloc.cmake" : {
      "ObjectId" : "03c2774efadab13f2b28b524645bf8bd93899a59",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Print out version number\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/Modules/FindMPFR.cmake" : {
      "ObjectId" : "15667405f03f4db301ff8dc78c51db422a5d0db3",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the MPFR library\n\n# See http://www.mpfr.org/\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(MPFR 2.3.0)\n\n# to require version 2.3.0 to newer of MPFR.\n\n#\n\n# Once done this will define\n\n#\n\n#  MPFR_FOUND - system has MPFR lib with correct version\n\n#  MPFR_INCLUDES - the MPFR include directory\n\n#  MPFR_LIBRARIES - the MPFR library\n\n#  MPFR_VERSION - MPFR version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2010 Jitse Niesen, <jitse@maths.leeds.ac.uk>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set MPFR_INCLUDES\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set MPFR_FIND_VERSION to 1.0.0 if no minimum version is specified\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set MPFR_VERSION\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check whether found version exceeds minimum version\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set MPFR_LIBRARIES\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Epilogue\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/cmake/Modules/FindMSize.cmake" : {
      "ObjectId" : "faed2a37224000d67bbcffd8f0893c06b3a2266b",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If it's cross-compilation and target is windows, first compile MSIZE_CHECK.exe\n",
        "Line" : 5,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# Check whether \"wine\" exists to run \"MSIZE_CHECK.exe\"\n",
        "Line" : 12,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# NOTE: We can compile a progrm with _msize, but we can't test\n\n# it due to the lack of wine. We assume that it is usable\n",
        "Line" : 20,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# It's cross-compilation but the target is not Windows\n",
        "Line" : 29,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "src/cmake/Modules/FindMallocSize.cmake" : {
      "ObjectId" : "9840f3bb32d85793346f56d9f7b07f17e32c70a7",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/Modules/FindMallocUsableSize.cmake" : {
      "ObjectId" : "d50d34e8663af51f1558f2bcf917091915b1577b",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "ede882c15ef662ba3423535ca7f2506836f05726",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to FIND_PACKAGE().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call, in this case all the information\n\n# provided by the config-mode of find_package() will be evaluated\n\n# automatically.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    FIND_PACKAGE(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to FIND_PACKAGE(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# version handling:\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# exact version required\n",
        "Line" : 201,
        "CharPositionInLine" : 44
      },
      "14" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 209,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# print the result:\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "src/cmake/Modules/FindReadline.cmake" : {
      "ObjectId" : "48b292ee5a90370ecef62eb69b96f7488315aca8",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmake/Modules/FindTcmalloc.cmake" : {
      "ObjectId" : "3b907485b08c62697fb1a35045d6431af2853733",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Print out version number\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/Modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "c8d27f2e8ce494c96404086ce58982239916a44c",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "src/cmake/Modules/StyleCheck.cmake" : {
      "ObjectId" : "df44bcf17b972fb54ea883f693fb9811b430e022",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 Daniel Scharrer\n\n#\n\n# This software is provided 'as-is', without any express or implied\n\n# warranty.  In no event will the author(s) be held liable for any damages\n\n# arising from the use of this software.\n\n#\n\n# Permission is granted to anyone to use this software for any purpose,\n\n# including commercial applications, and to alter it and redistribute it\n\n# freely, subject to the following restrictions:\n\n#\n\n# 1. The origin of this software must not be misrepresented; you must not\n\n#    claim that you wrote the original software. If you use this software\n\n#    in a product, an acknowledgment in the product documentation would be\n\n#    appreciated but is not required.\n\n# 2. Altered source versions must be plainly marked as such, and must not be\n\n#    misrepresented as being the original software.\n\n# 3. This notice may not be removed or altered from any source distribution.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parameters:\n\n# - TARGET_NAME the name of the target to add\n\n# - SOURCES_LIST a complete list of source and include files to check\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/emacs/CMakeLists.txt" : {
      "ObjectId" : "5267bb812d90251e22fd579cb8e14a9f00ad869f",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/emacs/Makefile" : {
      "ObjectId" : "dcdf9350d8fa0125a1c37ffd63a4371e6d3d613b",
      "LastModified" : "2016-06-02T18:52:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/frontends/lean/CMakeLists.txt" : {
      "ObjectId" : "1ad7cf994a0e54ae3c7a3f8d7cc6415b38711b8c",
      "LastModified" : "2016-09-20T04:19:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LEGACY\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/frontends/smt2/CMakeLists.txt" : {
      "ObjectId" : "03737e9ef5ad33d9527125b14a2d0b16ae375126",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/init/CMakeLists.txt" : {
      "ObjectId" : "f8c1052a31e0d17da718285c3ded9cb5ee41d471",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kernel/CMakeLists.txt" : {
      "ObjectId" : "d23cba946a864aca58abb2ae8015b4f6035aaf24",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kernel/hits/CMakeLists.txt" : {
      "ObjectId" : "6e447bec0eb0dd2c866dc8e452955f21f3d404c8",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kernel/inductive/CMakeLists.txt" : {
      "ObjectId" : "4dbca65d2a843e2622a3aaf6e49ef6b5a6e6f78b",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kernel/quotient/CMakeLists.txt" : {
      "ObjectId" : "d8d4daf577cdf20352d611fd0498906a726fabbc",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/CMakeLists.txt" : {
      "ObjectId" : "72b049fb4a25ab375ce2fb9600cddc1f8c05ae24",
      "LastModified" : "2016-09-20T15:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/compiler/CMakeLists.txt" : {
      "ObjectId" : "c1bcd500ce856855e3dd023435f65677a51afdef",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/constructions/CMakeLists.txt" : {
      "ObjectId" : "b84c1e8f400fe1d653eca89f9f0e2da342277a94",
      "LastModified" : "2016-09-10T21:22:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/equations_compiler/CMakeLists.txt" : {
      "ObjectId" : "db6c6d15985b1c11ddfb7f51a1b6564850bd3405",
      "LastModified" : "2016-09-20T02:57:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/inductive_compiler/CMakeLists.txt" : {
      "ObjectId" : "880312c02f9d4953582b36c7848e92fa6514eae0",
      "LastModified" : "2016-09-20T02:57:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/tactic/CMakeLists.txt" : {
      "ObjectId" : "0e3e6060fad74c69e207ed933f49b518072feb77",
      "LastModified" : "2016-09-20T02:57:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/tactic/backward/CMakeLists.txt" : {
      "ObjectId" : "4a3debcd7b6b4119bad6d35bdd35ad20cc5ab2de",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/tactic/simplifier/CMakeLists.txt" : {
      "ObjectId" : "7616ebde02d81a315712b5c1b43924c46ad01bce",
      "LastModified" : "2016-09-10T21:22:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/library/vm/CMakeLists.txt" : {
      "ObjectId" : "e1eb6812138782d122a7a7aa8f5b6f7d66152b53",
      "LastModified" : "2016-09-10T21:22:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/shell/CMakeLists.txt" : {
      "ObjectId" : "778c2347d02a975b01dd299fa70d64e3fb93d32e",
      "LastModified" : "2016-09-20T02:57:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_test(example1_stdin1 ${LEAN_SOURCE_DIR}/cmake/redirect.sh ${CMAKE_CURRENT_BINARY_DIR}/lean \"${LEAN_SOURCE_DIR}/../tests/lean/single.lean\")\n\n# add_test(example1_stdin2 ${LEAN_SOURCE_DIR}/cmake/redirect.sh ${CMAKE_CURRENT_BINARY_DIR}/lean \"-l\" \"${LEAN_SOURCE_DIR}/../tests/lean/single.lean\")\n\n# add_test(example1_stdin3 ${LEAN_SOURCE_DIR}/cmake/redirect.sh ${CMAKE_CURRENT_BINARY_DIR}/lean \"--lean\" \"${LEAN_SOURCE_DIR}/../tests/lean/single.lean\")\n\n# add_test(lean_export ${CMAKE_CURRENT_BINARY_DIR}/lean \"-o simple.olean\" \"${LEAN_SOURCE_DIR}/../tests/lean/run/simple.lean\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The following test needs new elaborator to support match\n\n# add_test(NAME \"lean_eqn_macro\"\n\n#         WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#         COMMAND bash \"./test_eqn_macro.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_test(NAME \"issue_597\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./issue_597.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"issue_616\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./issue_616.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"show_goal\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./show_goal.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"issue_755\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./issue_755.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"print_info\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./print_info.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\")\n\n# add_test(NAME \"dir_option\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND \"${LEAN_SOURCE_DIR}/../bin/lean\" \"--dir=${LEAN_SOURCE_DIR}/../library/data/nat\" \"dir_option.lean\")\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The following test cannot be executed on Windows because of the\n\n# bash script timeout.sh\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# We need to cache failures at type_context to be able to process the following test in a reasonable amount of time\n\n# add_test(NAME \"normalizer_perf\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/extra\"\n\n#          COMMAND bash \"./timeout.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" \"1\" \"slow1.lean\")\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# LEAN TESTS\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# # SMT2 TESTS\n\n# file(GLOB SMT2TESTS \"${LEAN_SOURCE_DIR}/../tests/lean/smt2/*.smt2\")\n\n# FOREACH(T ${SMT2TESTS})\n\n#   GET_FILENAME_COMPONENT(T_NAME ${T} NAME)\n\n#   add_test(NAME \"smt2test_${T_NAME}\"\n\n#            WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/smt2/\"\n\n#            COMMAND bash \"./test_single.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" ${T_NAME})\n\n# ENDFOREACH(T)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LEAN RUN TESTS\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# SMT2 RUN TESTS\n\n# file(GLOB SMT2RUNTESTS \"${LEAN_SOURCE_DIR}/../tests/lean/smt2/run/*.smt2\")\n\n# FOREACH(T ${SMT2RUNTESTS})\n\n#   GET_FILENAME_COMPONENT(T_NAME ${T} NAME)\n\n#   add_test(NAME \"smt2runtest_${T_NAME}\"\n\n#            WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/smt2/run/\"\n\n#            COMMAND bash \"./test_single.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" ${T_NAME})\n\n# ENDFOREACH(T)\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# LEAN TESTS using --trust=0\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LEAN TESTS using --trust=10\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The new elaborator needs to populate the info_manager for the following tests\n\n# if(\"${MULTI_THREAD}\" MATCHES \"ON\")\n\n# # LEAN INTERACTIVE TESTS\n\n# file(GLOB LEANITTESTS \"${LEAN_SOURCE_DIR}/../tests/lean/interactive/*.input\")\n\n# FOREACH(T ${LEANITTESTS})\n\n#   GET_FILENAME_COMPONENT(T_NAME ${T} NAME)\n\n#   add_test(NAME \"leanittest_${T_NAME}\"\n\n#            WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../tests/lean/interactive\"\n\n#            COMMAND bash \"./test_single.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" ${T_NAME})\n\n# ENDFOREACH(T)\n\n# endif()\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# LEAN SLOW TESTS\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# # LEAN DOCS\n\n# file(GLOB LEANDOCS \"${LEAN_SOURCE_DIR}/../doc/lean/*.org\")\n\n# FOREACH(T ${LEANDOCS})\n\n#   GET_FILENAME_COMPONENT(T_NAME ${T} NAME)\n\n#   add_test(NAME \"leandoc_${T_NAME}\"\n\n#            WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/../doc/lean\"\n\n#            COMMAND bash \"./test_single.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/lean\" ${T})\n\n# ENDFOREACH(T)\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# # Create the script lean.sh\n\n# # This is used to create a soft dependency on the Lean executable\n\n# # Some rules can only be applied if the lean executable exists,\n\n# # but we don't want a dependency on the executable because\n\n# # the rules would be applied whenever the executable is rebuilt.\n\n# # These are the rules for automatically generating .olean files and\n\n# # C++/Lean interface files.\n\n# add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lean.sh\n\n#     COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/mk_lean_sh.sh ${CMAKE_CURRENT_BINARY_DIR}\n\n#     DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lean)\n\n# add_custom_target(lean_sh DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lean.sh)\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/tests/frontends/lean/CMakeLists.txt" : {
      "ObjectId" : "ec6d1274227492e7e3edbe927d81b978ad7ee1d3",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_executable(lean_parser parser.cpp)\n\n# target_link_libraries(lean_parser ${ALL_LIBS})\n\n# add_test(lean_parser \"${CMAKE_CURRENT_BINARY_DIR}/lean_parser\")\n\n# # add_executable(lean_pp pp.cpp)\n\n# target_link_libraries(lean_pp ${ALL_LIBS})\n\n# add_test(lean_pp \"${CMAKE_CURRENT_BINARY_DIR}/lean_pp\")\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/kernel/CMakeLists.txt" : {
      "ObjectId" : "16301ada7f4ce94ffb9202d7e945aedff2814614",
      "LastModified" : "2016-09-20T05:21:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/library/CMakeLists.txt" : {
      "ObjectId" : "9a101dc4901b6b0bc2d9cf350a10adec7e983529",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/library/rewriter/CMakeLists.txt" : {
      "ObjectId" : "6c24e7eed20f5269f15575227e46c032baf39841",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/library/tactic/CMakeLists.txt" : {
      "ObjectId" : "66a1591f31db04ae05c017c3f405fc99f2f1cad7",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/shared/CMakeLists.txt" : {
      "ObjectId" : "46bc4099dc328fd0b581a3b41a0485891781bab5",
      "LastModified" : "2016-09-20T05:21:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_executable(c_env_test env.c)\n\n# target_link_libraries(c_env_test ${EXTRA_LIBS} leanshared)\n\n# add_test(NAME c_env_test\n\n#          WORKING_DIRECTORY \"${LEAN_BINARY_DIR}\"\n\n#          COMMAND \"${CMAKE_CURRENT_BINARY_DIR}/c_env_test\")\n\n# SET_TESTS_PROPERTIES(c_env_test\n\n#   PROPERTIES ENVIRONMENT \"LEAN_PATH=${LEAN_SOURCE_DIR}/../library\")\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/shell/CMakeLists.txt" : {
      "ObjectId" : "e402feeebb63746ddea2638406366d4b83a99cb6",
      "LastModified" : "2016-09-20T05:21:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(Leo): add after stdlib is activated again\n\n# add_test(NAME \"emscripten_test\"\n\n#          WORKING_DIRECTORY \"${LEAN_SOURCE_DIR}/tests/shell\"\n\n#          COMMAND bash \"${LEAN_SOURCE_DIR}/tests/shell/test.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/shell_test\")\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/util/CMakeLists.txt" : {
      "ObjectId" : "eee65268e1e6246900f26a34b5f9759012b6a9d0",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# thread.cpp used import_test.lua\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/util/interval/CMakeLists.txt" : {
      "ObjectId" : "3037973b1efc1472df6f77a3a789a04dcfa41610",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/util/lp/CMakeLists.txt" : {
      "ObjectId" : "72bb4ac65b76aa96cbf16b542fde42c5c1278ac8",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_test(double_compare ${CMAKE_CURRENT_BINARY_DIR}/double_compare)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/util/numerics/CMakeLists.txt" : {
      "ObjectId" : "c5c1e0bd3bb493bac52497e601861ad04a044c41",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "906eda4a0b29e2ce82242279d4d833e42a22b381",
      "LastModified" : "2016-09-20T05:21:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/interval/CMakeLists.txt" : {
      "ObjectId" : "bba3ca26c3caf06ecfd73402bd2c29f4c5107b63",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/lp/CMakeLists.txt" : {
      "ObjectId" : "6b0d811e4147b521217c34cff67f8d956d6de8e3",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LP_DBG_FILES include files that are only needed in DEBUG mode.\n\n# We use this trick to avoid warning messages when compiling in Release mode on OSX.\n\n# These files are empty in Release mode.\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/util/numerics/CMakeLists.txt" : {
      "ObjectId" : "2006ed0ee68819aacecd0a9287910b722f216e67",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/sexpr/CMakeLists.txt" : {
      "ObjectId" : "c2a1fa07eb587ac73367c67bc12871ca23d8da79",
      "LastModified" : "2016-07-29T17:44:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 51,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 4028
}