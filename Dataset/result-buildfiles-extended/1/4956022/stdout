{
  "Repository" : "4956022",
  "Revision" : "HEAD",
  "ObjectId" : "98fa03e8db0481c63554dd2720164ee463e1402b",
  "CommitTime" : "2018-09-24T15:44:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "31f7f54f5e95c6811bd3a5d8bbcd55c320fbdcd9",
      "LastModified" : "2018-08-14T19:24:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Announce ourselves\n\n###############################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Load up extra CMake packages\n\n###############################################################################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include(cotire)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set install paths ============================================================\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO this matches Automake value, should be adjusted to the convention: share/mpqc/${MPQC_VERSION}/doc\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n# Options\n\n###############################################################################\n\n# boolean\n\n# non-boolean\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# How to check memory use (see mpqc_config.h for details)\n",
        "Line" : 53,
        "CharPositionInLine" : 28
      },
      "7" : {
        "Text" : "# How to implement assertions (see mpqc_config.h for details)\n",
        "Line" : 58,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : "# convert string value of TA_POLICY to numerical values as TA_DEFAULT_POLICY\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##########################\n\n# Standard build variables\n\n##########################\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Get standard build variables from the environment if they have not already been set\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################\n\n# How to compile\n\n###############################################################################\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "### RPATH config to ensure full path is used\n\n### see https://cmake.org/Wiki/CMake_RPATH_handling#Always_full_RPATH\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# use RPATH if possible\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# MacOS specific\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# look for frameworks and appbundles last\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# may need this to link in MPI library via MADWorld dependency alone\n\n# e.g. when MADNESS is configured with non-throwing asserts there is no direct mention of MPI\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# by default, use same type of BLAS/LAPACK libs (shared/static) as we are using for MPQC\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# look for ccache\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "###############################################################################\n\n# Compiler/library features\n\n###############################################################################\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Check compiler feature support ===============================================\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# need for C++14 will be inherited from madness\n\n# but insist on strict standard\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#find_package(ExecInfo)\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "###############################################################################\n\n# Dependencies\n\n###############################################################################\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "##### TiledArray #####\n\n# search for TA first, other packages can be found with it\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "##### Boost #####\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "##### TBB #####\n\n# TiledArray and MADNESS set search path for TBB to TBB_ROOT_DIR, KitWare's FindTBB expects TBB_ROOT\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# set up an interface library for TBB a la https://github.com/justusc/FindTBB\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "##### Eigen3 #####\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "##### BTAS #####\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "##### Libint2 #####\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# pass on some info to pkg-config\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "###############################################################################\n\n# Descend into the source tree and build component libraries and MPQC exec\n\n###############################################################################\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "###############################################################################\n\n# Declare MPQC program\n\n###############################################################################\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "###############################################################################\n\n# Declare MPQC tests, examples, and docs\n\n###############################################################################\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "##########################\n\n# pkg-config variables\n\n##########################\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "##########################\n\n# Get the git revision tag information\n\n##########################\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "###############################################################################\n\n# Wrap up\n\n###############################################################################\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Force cache refresh for compile flags\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# sample CMakeLists.txt\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# install config files\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Create the version file\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Create the targets file\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Create the configure file\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Install config, version, and target files\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "###############################################################################\n\n# appendix: misc details\n\n###############################################################################\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "cmake/modules/AddMPQCLibrary.cmake" : {
      "ObjectId" : "5d2136ec810cfcedb4f01df3b6e3d70e677e69c4",
      "LastModified" : "2017-08-30T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message (STATUS \"in add_mpqc_library: name=${_name} source_files=${_source_files} public_header_files=${_public_header_files} deps=${_dep_mpqc_comp} include_dir=${_include_dir}\")\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# no sources given?\n",
        "Line" : 17,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "#cotire(${_libname}-obj)\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Pass the private ${_libname} compile flags to ${_libname}-obj  \n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# this does not work with hierarchies of header files\n\n# see here for possible workaround if frameworks are really needed:\n\n#     http://cmake.3232098.n2.nabble.com/Install-header-directory-hierarchy-td5638507.html\n\n# set_target_properties(${_libname} PROPERTIES PUBLIC_HEADER \"${_public_header_files}\")\n\n# install manually\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add library to the list of installed components\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Create a target to install the component\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# for MPQC dependencies make sure they have been processed already!\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# import LINK_FLAGS from dependent, unless it's an interface library\n",
        "Line" : 89,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Use current CMAKE_CXX_FLAGS to compile targets dependent on this library\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# make INTERFACE library\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# PUBLIC_HEADER property is not supported on INTERFACE targets, and do not work\n\n# with hierarchies of headers\n\n# hence have to do install manually\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Add library to the list of installed components\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Create a target to install the component\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Use current CMAKE_CXX_FLAGS to compile targets dependent on this library\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "cmake/modules/AppendFlags.cmake" : {
      "ObjectId" : "e52b8ec7d7525f35152c5c5407065b3ab969157f",
      "LastModified" : "2015-01-14T02:37:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/CheckCFortranFunctionExists.cmake" : {
      "ObjectId" : "0ca2c85e8c8defdbf263c402763fc1acdd62e6df",
      "LastModified" : "2015-01-14T02:37:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/CheckCXX11Support.cmake" : {
      "ObjectId" : "af6633c9b182466053bfc2dfcc5faeb69031758e",
      "LastModified" : "2016-11-27T22:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check for default C++11 support\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Check for C++11 support (Add additional test flags as necessary)\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set the test compile (and link) flags\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# OS X 10.8 requires additional compile flags\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Check for default C++11 support with _cxx11_test_flag\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# C++11 compile (and linker) flags were found\n\n# Process the results\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# OS X 10.8 requires additional compile flags\n",
        "Line" : 119,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindLIBINT2.cmake" : {
      "ObjectId" : "3d9ce5fb17139791f98af479dad1f70e81eefbf9",
      "LastModified" : "2018-07-11T19:11:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# force linking against shared Libint only if building shared MPQC libs\n\n# to avoid linking errors (best case) or multiple instances of libint global data (worst case ... looking at you MacOS)\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# CODA\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# validate version, etc. by compiling tests\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# sanity check\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# make sure libint2 version is up to date\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# make sure libint2 is properly configured\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindTBB.cmake" : {
      "ObjectId" : "5293984b50180d94c0d02094e74f334cc4b2283e",
      "LastModified" : "2017-08-30T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# modified to give preference to TBB_ROOT over all system paths\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find ThreadingBuildingBlocks include dirs and libraries\n\n# Use this module by invoking find_package with the form:\n\n#  find_package(TBB\n\n#    [REQUIRED]             # Fail with error if TBB is not found\n\n#    )                      #\n\n# Once done, this will define\n\n#\n\n#  TBB_FOUND - system has TBB\n\n#  TBB_INCLUDE_DIRS - the TBB include directories\n\n#  TBB_LIBRARIES - TBB libraries to be lined, doesn't include malloc or\n\n#                  malloc proxy\n\n#\n\n#  TBB_VERSION_MAJOR - Major Product Version Number\n\n#  TBB_VERSION_MINOR - Minor Product Version Number\n\n#  TBB_INTERFACE_VERSION - Engineering Focused Version Number\n\n#  TBB_COMPATIBLE_INTERFACE_VERSION - The oldest major interface version\n\n#                                     still supported. This uses the engineering\n\n#                                     focused interface version numbers.\n\n#\n\n#  TBB_MALLOC_FOUND - system has TBB malloc library\n\n#  TBB_MALLOC_INCLUDE_DIRS - the TBB malloc include directories\n\n#  TBB_MALLOC_LIBRARIES - The TBB malloc libraries to be lined\n\n#\n\n#  TBB_MALLOC_PROXY_FOUND - system has TBB malloc proxy library\n\n#  TBB_MALLOC_PROXY_INCLUDE_DIRS = the TBB malloc proxy include directories\n\n#  TBB_MALLOC_PROXY_LIBRARIES - The TBB malloc proxy libraries to be lined\n\n#\n\n#\n\n# This module reads hints about search locations from variables:\n\n#  ENV TBB_ARCH_PLATFORM - for eg. set it to \"mic\" for Xeon Phi builds\n\n#  ENV TBB_ROOT or just TBB_ROOT - root directory of tbb installation\n\n#  ENV TBB_BUILD_PREFIX - specifies the build prefix for user built tbb\n\n#                         libraries. Should be specified with ENV TBB_ROOT\n\n#                         and optionally...\n\n#  ENV TBB_BUILD_DIR - if build directory is different than ${TBB_ROOT}/build\n\n#\n\n#\n\n# Modified by Robert Maynard from the original OGRE source\n\n#\n\n#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n\n#\n\n#=============================================================================\n\n# Copyright 2010-2012 Kitware, Inc.\n\n# Copyright 2012      Rolf Eike Beer <eike@sf-mail.de>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n#  FindTBB helper functions and macros\n\n#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#===============================================\n\n# Do the final processing for the package find.\n\n#===============================================\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#mark the following variables as internal variables\n",
        "Line" : 86,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#===============================================\n\n# Generate debug names from given release names\n\n#===============================================\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#===============================================\n\n# See if we have env vars to help us find tbb\n\n#===============================================\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 108,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#===============================================\n\n# Couple a set of release AND debug libraries\n\n#===============================================\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#=============================================================================\n\n#  Now to actually find TBB\n\n#\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# initialize search paths\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If user built from sources\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# include directory under ${ENV_TBB_ROOT}/include\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For Windows, let's assume that the user might be using the precompiled\n\n# TBB packages from the main website. These use a rather awkward directory\n\n# structure (at least for automatically finding the right files) depending\n\n# on platform and compiler, but we'll do our best to accommodate it.\n\n# Not adding the same effort for the precompiled linux builds, though. Those\n\n# have different versions for CC compiler versions and linux kernels which\n\n# will never adequately match the user's setup, so there is no feasible way\n\n# to detect the \"best\" version to use. The user will have to manually\n\n# select the right files. (Chances are the distributions are shipping their\n\n# custom version of tbb, anyway, so the problem is probably nonexistent.)\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# for each prefix path, add ia32/64\\${COMPILER_PREFIX}\\lib to the lib search path\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# For OS X binary distribution, choose libc++ based libraries for Mavericks (10.9)\n\n# and above and AppleClang\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# check compiler ABI\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Assume compatibility with 4.4 for other compilers\n",
        "Line" : 236,
        "CharPositionInLine" : 7
      },
      "20" : {
        "Text" : "# if platform architecture is explicitly specified\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# add general search paths\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# if user provided TBB_ROOT etc. use them preferentially by searching first with NO_DEFAULT_PATH\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#if we haven't found TBB no point on going any further\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#=============================================================================\n\n# Look for TBB's malloc package\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#=============================================================================\n\n# Look for TBB's malloc proxy package\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#=============================================================================\n\n#parse all the version numbers from tbb\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#only read the start of the file\n",
        "Line" : 351,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 28
    },
    "cmake/modules/ImportTBB.cmake" : {
      "ObjectId" : "7ac541c046e76b357aa0987ddea1b2065ba8bfca",
      "LastModified" : "2017-08-30T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# based on https://github.com/justusc/FindTBB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS \"TBB_INCLUDE_DIRS=${TBB_INCLUDE_DIRS}\")\n\n#message(STATUS \"TBB_LIBRARIES=${TBB_LIBRARIES}\")\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/modules/ValidateTiledArray.cmake" : {
      "ObjectId" : "27269c79496f1d06bfb8acda55d9b73b568ec4f0",
      "LastModified" : "2018-07-30T17:09:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################\n\n# sanity check: try compiling a simple program\n\n##############################################\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "##########################\n\n# ensure it's fresh enough\n\n##########################\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# first make sure TiledArray_Eigen and TiledArray_BTAS targets are defined\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# basic version check\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# some version checks will result in failed compilation ... to avoid confusing users\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "##########################\n\n# ensure madness::World::get_default is disabled\n\n##########################\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/modules/cotire.cmake" : {
      "ObjectId" : "55b8286a936216f2a72a8acf284bd027529f5f03",
      "LastModified" : "2017-08-30T15:24:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2016 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 28
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 32
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 16
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 16
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 16
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 16
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 16
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 16
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 16
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 412,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 421,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 434,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 452,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 473,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 485,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# platform specific flags\n",
        "Line" : 496,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# default include dirs\n",
        "Line" : 531,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 538,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 550,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# target include directories\n",
        "Line" : 562,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 574,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 582,
        "CharPositionInLine" : 16
      },
      "42" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 659,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# target export define symbol\n",
        "Line" : 663,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 668,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# target compile definitions\n",
        "Line" : 677,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 686,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 695,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 711,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 863,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 952,
        "CharPositionInLine" : 16
      },
      "51" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 996,
        "CharPositionInLine" : 12
      },
      "52" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1004,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1007,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# header is outside\n",
        "Line" : 1021,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1032,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# check header file extension\n",
        "Line" : 1042,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1055,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1060,
        "CharPositionInLine" : 12
      },
      "59" : {
        "Text" : "# GCC like output\n",
        "Line" : 1069,
        "CharPositionInLine" : 12
      },
      "60" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1085,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1088,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1090,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# then separate lines\n",
        "Line" : 1092,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1095,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1113,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# update stack\n",
        "Line" : 1123,
        "CharPositionInLine" : 16
      },
      "67" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1139,
        "CharPositionInLine" : 16
      },
      "68" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1141,
        "CharPositionInLine" : 20
      },
      "69" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1148,
        "CharPositionInLine" : 20
      },
      "70" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1157,
        "CharPositionInLine" : 32
      },
      "71" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1169,
        "CharPositionInLine" : 20
      },
      "72" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1207,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1223,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1371,
        "CharPositionInLine" : 8
      },
      "75" : {
        "Text" : "# create empty log file\n",
        "Line" : 1412,
        "CharPositionInLine" : 12
      },
      "76" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1428,
        "CharPositionInLine" : 8
      },
      "77" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1464,
        "CharPositionInLine" : 8
      },
      "78" : {
        "Text" : "# append to list\n",
        "Line" : 1473,
        "CharPositionInLine" : 12
      },
      "79" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1476,
        "CharPositionInLine" : 12
      },
      "80" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1480,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "# append to list\n",
        "Line" : 1485,
        "CharPositionInLine" : 12
      },
      "82" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1491,
        "CharPositionInLine" : 12
      },
      "83" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1498,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# append to list\n",
        "Line" : 1503,
        "CharPositionInLine" : 12
      },
      "85" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1506,
        "CharPositionInLine" : 12
      },
      "86" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1511,
        "CharPositionInLine" : 12
      },
      "87" : {
        "Text" : "# append to list\n",
        "Line" : 1520,
        "CharPositionInLine" : 16
      },
      "88" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1523,
        "CharPositionInLine" : 16
      },
      "89" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1527,
        "CharPositionInLine" : 12
      },
      "90" : {
        "Text" : "# append to list\n",
        "Line" : 1532,
        "CharPositionInLine" : 16
      },
      "91" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1538,
        "CharPositionInLine" : 16
      },
      "92" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1557,
        "CharPositionInLine" : 8
      },
      "93" : {
        "Text" : "# append to list\n",
        "Line" : 1568,
        "CharPositionInLine" : 12
      },
      "94" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1575,
        "CharPositionInLine" : 12
      },
      "95" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1582,
        "CharPositionInLine" : 8
      },
      "96" : {
        "Text" : "# append to list\n",
        "Line" : 1591,
        "CharPositionInLine" : 12
      },
      "97" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1594,
        "CharPositionInLine" : 12
      },
      "98" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1602,
        "CharPositionInLine" : 12
      },
      "99" : {
        "Text" : "# append to list\n",
        "Line" : 1614,
        "CharPositionInLine" : 16
      },
      "100" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1621,
        "CharPositionInLine" : 16
      },
      "101" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1628,
        "CharPositionInLine" : 12
      },
      "102" : {
        "Text" : "# append to list\n",
        "Line" : 1639,
        "CharPositionInLine" : 16
      },
      "103" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1648,
        "CharPositionInLine" : 16
      },
      "104" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1665,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "# append to list\n",
        "Line" : 1673,
        "CharPositionInLine" : 16
      },
      "106" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1679,
        "CharPositionInLine" : 16
      },
      "107" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1686,
        "CharPositionInLine" : 12
      },
      "108" : {
        "Text" : "# append to list\n",
        "Line" : 1688,
        "CharPositionInLine" : 16
      },
      "109" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1691,
        "CharPositionInLine" : 16
      },
      "110" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1696,
        "CharPositionInLine" : 8
      },
      "111" : {
        "Text" : "# append to list\n",
        "Line" : 1701,
        "CharPositionInLine" : 12
      },
      "112" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1704,
        "CharPositionInLine" : 12
      },
      "113" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1708,
        "CharPositionInLine" : 8
      },
      "114" : {
        "Text" : "# append to list\n",
        "Line" : 1714,
        "CharPositionInLine" : 12
      },
      "115" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1717,
        "CharPositionInLine" : 12
      },
      "116" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1723,
        "CharPositionInLine" : 12
      },
      "117" : {
        "Text" : "# append to list\n",
        "Line" : 1731,
        "CharPositionInLine" : 20
      },
      "118" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1737,
        "CharPositionInLine" : 20
      },
      "119" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1744,
        "CharPositionInLine" : 16
      },
      "120" : {
        "Text" : "# append to list\n",
        "Line" : 1746,
        "CharPositionInLine" : 20
      },
      "121" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1749,
        "CharPositionInLine" : 20
      },
      "122" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1754,
        "CharPositionInLine" : 12
      },
      "123" : {
        "Text" : "# append to list\n",
        "Line" : 1763,
        "CharPositionInLine" : 20
      },
      "124" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1769,
        "CharPositionInLine" : 20
      },
      "125" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1776,
        "CharPositionInLine" : 16
      },
      "126" : {
        "Text" : "# append to list\n",
        "Line" : 1778,
        "CharPositionInLine" : 20
      },
      "127" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1781,
        "CharPositionInLine" : 20
      },
      "128" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1818,
        "CharPositionInLine" : 8
      },
      "129" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1834,
        "CharPositionInLine" : 8
      },
      "130" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1838,
        "CharPositionInLine" : 8
      },
      "131" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1845,
        "CharPositionInLine" : 8
      },
      "132" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1848,
        "CharPositionInLine" : 8
      },
      "133" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1866,
        "CharPositionInLine" : 8
      },
      "134" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1885,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1928,
        "CharPositionInLine" : 16
      },
      "136" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1939,
        "CharPositionInLine" : 8
      },
      "137" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1942,
        "CharPositionInLine" : 8
      },
      "138" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2013,
        "CharPositionInLine" : 16
      },
      "139" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2018,
        "CharPositionInLine" : 16
      },
      "140" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2021,
        "CharPositionInLine" : 16
      },
      "141" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2024,
        "CharPositionInLine" : 16
      },
      "142" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2027,
        "CharPositionInLine" : 16
      },
      "143" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2059,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2063,
        "CharPositionInLine" : 8
      },
      "145" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2068,
        "CharPositionInLine" : 8
      },
      "146" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2085,
        "CharPositionInLine" : 4
      },
      "147" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2098,
        "CharPositionInLine" : 4
      },
      "148" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2123,
        "CharPositionInLine" : 4
      },
      "149" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2128,
        "CharPositionInLine" : 12
      },
      "150" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2135,
        "CharPositionInLine" : 4
      },
      "151" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2138,
        "CharPositionInLine" : 4
      },
      "152" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2143,
        "CharPositionInLine" : 4
      },
      "153" : {
        "Text" : "# generate target script file\n",
        "Line" : 2166,
        "CharPositionInLine" : 4
      },
      "154" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2171,
        "CharPositionInLine" : 8
      },
      "155" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2185,
        "CharPositionInLine" : 8
      },
      "156" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2194,
        "CharPositionInLine" : 12
      },
      "157" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2196,
        "CharPositionInLine" : 12
      },
      "158" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2200,
        "CharPositionInLine" : 8
      },
      "159" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2227,
        "CharPositionInLine" : 8
      },
      "160" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2232,
        "CharPositionInLine" : 12
      },
      "161" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2239,
        "CharPositionInLine" : 12
      },
      "162" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2245,
        "CharPositionInLine" : 12
      },
      "163" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2252,
        "CharPositionInLine" : 12
      },
      "164" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2255,
        "CharPositionInLine" : 8
      },
      "165" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2262,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2269,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2271,
        "CharPositionInLine" : 4
      },
      "168" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2335,
        "CharPositionInLine" : 8
      },
      "169" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2346,
        "CharPositionInLine" : 12
      },
      "170" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2357,
        "CharPositionInLine" : 8
      },
      "171" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2365,
        "CharPositionInLine" : 8
      },
      "172" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2369,
        "CharPositionInLine" : 8
      },
      "173" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2373,
        "CharPositionInLine" : 12
      },
      "174" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2395,
        "CharPositionInLine" : 8
      },
      "175" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2401,
        "CharPositionInLine" : 12
      },
      "176" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2410,
        "CharPositionInLine" : 12
      },
      "177" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2418,
        "CharPositionInLine" : 12
      },
      "178" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2462,
        "CharPositionInLine" : 4
      },
      "179" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2467,
        "CharPositionInLine" : 8
      },
      "180" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2492,
        "CharPositionInLine" : 8
      },
      "181" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2501,
        "CharPositionInLine" : 8
      },
      "182" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2510,
        "CharPositionInLine" : 8
      },
      "183" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2517,
        "CharPositionInLine" : 8
      },
      "184" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2690,
        "CharPositionInLine" : 12
      },
      "185" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2694,
        "CharPositionInLine" : 12
      },
      "186" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2708,
        "CharPositionInLine" : 12
      },
      "187" : {
        "Text" : "# use all available cores\n",
        "Line" : 2728,
        "CharPositionInLine" : 12
      },
      "188" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2753,
        "CharPositionInLine" : 4
      },
      "189" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2760,
        "CharPositionInLine" : 4
      },
      "190" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2770,
        "CharPositionInLine" : 4
      },
      "191" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2775,
        "CharPositionInLine" : 4
      },
      "192" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2777,
        "CharPositionInLine" : 8
      },
      "193" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2786,
        "CharPositionInLine" : 8
      },
      "194" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2796,
        "CharPositionInLine" : 16
      },
      "195" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2803,
        "CharPositionInLine" : 12
      },
      "196" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2807,
        "CharPositionInLine" : 4
      },
      "197" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2835,
        "CharPositionInLine" : 8
      },
      "198" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2840,
        "CharPositionInLine" : 16
      },
      "199" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2855,
        "CharPositionInLine" : 8
      },
      "200" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2866,
        "CharPositionInLine" : 12
      },
      "201" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2874,
        "CharPositionInLine" : 12
      },
      "202" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2888,
        "CharPositionInLine" : 16
      },
      "203" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2900,
        "CharPositionInLine" : 4
      },
      "204" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2910,
        "CharPositionInLine" : 4
      },
      "205" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2913,
        "CharPositionInLine" : 4
      },
      "206" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2918,
        "CharPositionInLine" : 8
      },
      "207" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2923,
        "CharPositionInLine" : 4
      },
      "208" : {
        "Text" : "# generate unity target\n",
        "Line" : 2930,
        "CharPositionInLine" : 4
      },
      "209" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2937,
        "CharPositionInLine" : 8
      },
      "210" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2940,
        "CharPositionInLine" : 4
      },
      "211" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2950,
        "CharPositionInLine" : 12
      },
      "212" : {
        "Text" : "# copy output name\n",
        "Line" : 2975,
        "CharPositionInLine" : 4
      },
      "213" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2983,
        "CharPositionInLine" : 4
      },
      "214" : {
        "Text" : "# copy compile features\n",
        "Line" : 2994,
        "CharPositionInLine" : 4
      },
      "215" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2999,
        "CharPositionInLine" : 4
      },
      "216" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3007,
        "CharPositionInLine" : 4
      },
      "217" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3017,
        "CharPositionInLine" : 4
      },
      "218" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3020,
        "CharPositionInLine" : 4
      },
      "219" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3026,
        "CharPositionInLine" : 4
      },
      "220" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3040,
        "CharPositionInLine" : 4
      },
      "221" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3048,
        "CharPositionInLine" : 4
      },
      "222" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3053,
        "CharPositionInLine" : 4
      },
      "223" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3077,
        "CharPositionInLine" : 4
      },
      "224" : {
        "Text" : "# resolve alias\n",
        "Line" : 3089,
        "CharPositionInLine" : 4
      },
      "225" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3097,
        "CharPositionInLine" : 4
      },
      "226" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3113,
        "CharPositionInLine" : 4
      },
      "227" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3118,
        "CharPositionInLine" : 4
      },
      "228" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3161,
        "CharPositionInLine" : 16
      },
      "229" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3221,
        "CharPositionInLine" : 4
      },
      "230" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3308,
        "CharPositionInLine" : 4
      },
      "231" : {
        "Text" : "# include target script if available\n",
        "Line" : 3320,
        "CharPositionInLine" : 4
      },
      "232" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3322,
        "CharPositionInLine" : 8
      },
      "233" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3338,
        "CharPositionInLine" : 4
      },
      "234" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3358,
        "CharPositionInLine" : 12
      },
      "235" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3361,
        "CharPositionInLine" : 12
      },
      "236" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3380,
        "CharPositionInLine" : 12
      },
      "237" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3383,
        "CharPositionInLine" : 12
      },
      "238" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3451,
        "CharPositionInLine" : 12
      },
      "239" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3454,
        "CharPositionInLine" : 12
      },
      "240" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3477,
        "CharPositionInLine" : 4
      },
      "241" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3514,
        "CharPositionInLine" : 12
      },
      "242" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3548,
        "CharPositionInLine" : 8
      },
      "243" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3562,
        "CharPositionInLine" : 12
      },
      "244" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3569,
        "CharPositionInLine" : 4
      },
      "245" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3622,
        "CharPositionInLine" : 4
      },
      "246" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3694,
        "CharPositionInLine" : 4
      },
      "247" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3858,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 248
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "06962e1a4968b5caf73dd3bc115f878239113db9",
      "LastModified" : "2018-09-24T15:44:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  This file is a part of TiledArray.\n\n#  Copyright (C) 2013  Virginia Tech\n\n#\n\n#  This program is free software: you can redistribute it and/or modify\n\n#  it under the terms of the GNU General Public License as published by\n\n#  the Free Software Foundation, either version 3 of the License, or\n\n#  (at your option) any later version.\n\n#\n\n#  This program is distributed in the hope that it will be useful,\n\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n#  GNU General Public License for more details.\n\n#\n\n#  You should have received a copy of the GNU General Public License\n\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n#  Justus Calvin\n\n#  Department of Chemistry, Virginia Tech\n\n#\n\n#  CMakeLists.txt\n\n#  Jul 19, 2013\n\n#\n\n#  Copied from TiledArray on June 21 2015, by Drew Lewis\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "df6175562cf4fdba8d3a1aac4b36a276c9d94da5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/btas.cmake" : {
      "ObjectId" : "e810344cb0fdc0bf6a5832271150f1d3f342aa63",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Import BTAS provided by TiledArray\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure TiledAerray has been found\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# import TiledArray_BTAS as MPQC_BTAS\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "external/eigen.cmake" : {
      "ObjectId" : "4f2c29d02c2e62725d4cde424a89a659a9d2a313",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Import Eigen provided by TiledArray\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure TiledAerray has been found\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# import TiledArray_Eigen as MPQC_Eigen\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "39d6f2713fe227577d3f95dbfca6cccfe1b8b3b9",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bin/CMakeLists.txt" : {
      "ObjectId" : "cb73e5cacf04e45f26020912026d3d0e1bd9a1b9",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bin/mpqc/CMakeLists.txt" : {
      "ObjectId" : "1833e30048894351a7d6c5ba7c2c3ce47fd31f42",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################### MPQCmpqc library ###########################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################## libmpqc super-library #########################\n\n# libmpqc is an interface to the *entire* top-level MPQC functionality\n\n# this target is useful to create a standalone executable that augments the MPQC functionality\n\n# N.B. To force linking in of these libs into the executqble use ForceLink mechanism (see the top of mpqc.cpp)\n\n# N.B. due to transitive dependencies this could be shortened to: set (mpqc_features \"lcao_f12;lcao_ci\")\n\n#      *but* this would break introspection of MPQC capabilities later (e.g. in validation suite)\n\n#      that may actually be *the* desired behavior; by adding only lcao_cc you will skip all non-CC tests\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# N.B. developers will want to trim this list down to the minimum needed, e.g. down to \"lcao_scf\" to test HF only\n\n#set (mpqc_features \"lcao_scf\" )\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# transform MPQC_FEATURES to the list of library targets and associated preprocessor definitions\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# create libmpqc, an interface to MPQC_FEATURE_LIBS\n\n# linking libmpqc in will link in ALL MPQC functionality\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################## MPQCmain useful to develop plugins #########################\n\n# MPQCmain (see below) also depends on MPQC_FEATURE_LIBS functionality ... can't use libmpqc since it's just an INTERFACE\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##################### MPQC executable ###########################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# note above an ad hoc treatment of PIE until CMake allows to do it properly ... specifically, need CMake to:\n\n# 1. force non-PIE for compilers that default to PIE\n\n# 2. allow clean specification of PIE/non-PIE properties for library targets\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#cotire(mpqc)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# multiworld test is broken now, only run 1 MPI rank for now\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/mpqc/CMakeLists.txt" : {
      "ObjectId" : "f542c44bc13456945cb6a5bda34eec01bf3e7a4b",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/CMakeLists.txt" : {
      "ObjectId" : "73796d0a9182c47b635d40dff22a31d3d083763f",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/molecule/CMakeLists.txt" : {
      "ObjectId" : "cbd2766f0cc0e6033d679611ed7a3d44d3021b8f",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/CMakeLists.txt" : {
      "ObjectId" : "74f7838998a37509c93d0231c2d41ba89762b71c",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_SUBDIRECTORY(mra)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/mpqc/chemistry/qc/cc/CMakeLists.txt" : {
      "ObjectId" : "401892e165cb48133350730eb3874059f0a6c700",
      "LastModified" : "2018-07-30T17:09:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/CMakeLists.txt" : {
      "ObjectId" : "89ce9f4d6c3e8f7362377c0c22006c73b9414f0c",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/basis/CMakeLists.txt" : {
      "ObjectId" : "88579c2389b20d07c3bef74d6c816cc624ecccbb",
      "LastModified" : "2018-07-30T17:09:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/cc/CMakeLists.txt" : {
      "ObjectId" : "d5466bdb247ef37c50cbf9b24091cc14bf8486ee",
      "LastModified" : "2018-07-30T17:09:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/ci/CMakeLists.txt" : {
      "ObjectId" : "c82aecc3691982aa9234ae6afe77eb55925b4e5f",
      "LastModified" : "2018-07-30T17:09:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/expression/CMakeLists.txt" : {
      "ObjectId" : "7e5e872dc6f0c21f1451b390e7fc91bd67803038",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/f12/CMakeLists.txt" : {
      "ObjectId" : "cf73d2b57e966d5cc3540dc3e2333e84d1e3b1ad",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/factory/CMakeLists.txt" : {
      "ObjectId" : "634ed566b64113267c0c22b134b3a0bfdcbaf0f2",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/integrals/CMakeLists.txt" : {
      "ObjectId" : "b25351c546f9b3ae85649419236663bc2cb4e888",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#        screening/qqr_screening.cpp\n\n#        screening/qqr_screening.h\n\n#        screening/qvl_screening.cpp\n\n#        screening/qvl_screening.h\n\n#        screening/qvl_shell_info.cpp\n\n#        screening/qvl_shell_info.h\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/mpqc/chemistry/qc/lcao/mbpt/CMakeLists.txt" : {
      "ObjectId" : "e97d6d1bc7c9cd05c87b354ab262169fc5e64351",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/pno/CMakeLists.txt" : {
      "ObjectId" : "5a96f91d61d5e0249b267e861f35d1b79fea414a",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/scf/CMakeLists.txt" : {
      "ObjectId" : "3ba14e4376899c4deef47a52f5c9ca7c908103d1",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/lcao/wfn/CMakeLists.txt" : {
      "ObjectId" : "6997284b1d2eb8c99f93f8bbdcc61bf7db847fac",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/properties/CMakeLists.txt" : {
      "ObjectId" : "8f7cc7d8db30c80a4ebd51c5ece903fb997adcb4",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/qc/wfn/CMakeLists.txt" : {
      "ObjectId" : "ac346cca618443b6bad3c26d1839187b885bf894",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/chemistry/units/CMakeLists.txt" : {
      "ObjectId" : "fc6ac088202f577f7858653d7962c60e31c860bf",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/CMakeLists.txt" : {
      "ObjectId" : "d2837430814b7288207369c30e57f2a32f8b7ae7",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/clustering/CMakeLists.txt" : {
      "ObjectId" : "9f7a827603c1837a43824521c63df9a11705ca69",
      "LastModified" : "2018-02-13T15:28:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/external/CMakeLists.txt" : {
      "ObjectId" : "5b8c16f21ac6a341170b4e50828532bd2341a4ba",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/external/eigen/CMakeLists.txt" : {
      "ObjectId" : "120da03ee2c86f08a29f3b1cdad6378ac85e379a",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/external/lapack/CMakeLists.txt" : {
      "ObjectId" : "aa90ba8effaa5246f946607595b68e4721b455b6",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/external/tiledarray/CMakeLists.txt" : {
      "ObjectId" : "51284107c441899a15ac2571bd521720850e59ae",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/function/CMakeLists.txt" : {
      "ObjectId" : "a14dab975adb6479384e7bce5257022b18de5cd4",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/groups/CMakeLists.txt" : {
      "ObjectId" : "6be66b47c71c833d99046daaa7557f9b56103a2c",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/linalg/CMakeLists.txt" : {
      "ObjectId" : "4b0271fb7709b23fa79bb7f49cf1913823efa2f1",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/quadrature/CMakeLists.txt" : {
      "ObjectId" : "9a46f3312410d6239500c5afa3ec685fb88107cf",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/tensor/CMakeLists.txt" : {
      "ObjectId" : "9d4e5211f79cc7912e47c618056efea3f4a0f227",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/math/tensor/clr/CMakeLists.txt" : {
      "ObjectId" : "043b30db129545904d961111bf25c49febb903cf",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/CMakeLists.txt" : {
      "ObjectId" : "92ad84c16025a90879ff48e335d2a09d8671100d",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/core/CMakeLists.txt" : {
      "ObjectId" : "86d37dbaae7453ef1cfdaddda0d79494b5dc6aea",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/external/CMakeLists.txt" : {
      "ObjectId" : "8f86ba81b1fdaf95af59c0dc18681a82fdc47112",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/external/boost/CMakeLists.txt" : {
      "ObjectId" : "97ca55e399c3ec8d36cf384d28184b5ed51cda7d",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/external/c++/CMakeLists.txt" : {
      "ObjectId" : "3e69d6e12ec8ca051070b6da7cbb297b85d6ae76",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/external/madworld/CMakeLists.txt" : {
      "ObjectId" : "f43e9c36eb1b268feb2a1d7fa6056233293aaf39",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/keyval/CMakeLists.txt" : {
      "ObjectId" : "ea285d60c0f10811ddf901370fd913eb02ab09b7",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/meta/CMakeLists.txt" : {
      "ObjectId" : "78004f29c0ab7265ba7e8cdc80dbae071d2cc4a5",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mpqc/util/misc/CMakeLists.txt" : {
      "ObjectId" : "9d19c2acff2bbe0521c1e81a0491a97df8447929",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# since FindTBB does not create an interface target, we can't just use it as a dependence in add_mpqc_library call\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/mpqc/util/options/CMakeLists.txt" : {
      "ObjectId" : "ccf1e7309455242d03d4a03439396bcbbd5cd7b3",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "effd1e18f34fa3e31cd7032016f2a393bd87614a",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/unit/CMakeLists.txt" : {
      "ObjectId" : "147b330ed00be67cedc97ac1e4bfd27e9d1ea1d4",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO install xyz file to bin directory\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/validation/CMakeLists.txt" : {
      "ObjectId" : "ab4e6c74f500d5b95627ec75c28f647a27312089",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find all the input files under ${REF_INPUT_PATH}\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# filter out tests based on the available MPQC features\n\n# TODO also filter based on the default TA policy\n\n# skip CP-CCSD tests until fixed\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tests/validation/test.cmake" : {
      "ObjectId" : "b036d81aef70c3dfa764f9157e02deaf39782d88",
      "LastModified" : "2018-08-06T17:26:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if (NOT EXISTS \"${OUTPUT_FILE_NAME}\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Retrieve the list of DescribedClass classes registered with this current executable\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# filter out tests based on the registered classes\n\n# parse the wfn type from the input file, make sure it has a match in the registered class list\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 63
  },
  "ElapsedTime" : 2206
}