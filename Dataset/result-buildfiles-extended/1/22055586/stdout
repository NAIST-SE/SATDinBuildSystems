{
  "Repository" : "22055586",
  "Revision" : "HEAD",
  "ObjectId" : "8cea3e32944bddc4231bbda5be89f1f6a60858a1",
  "CommitTime" : "2019-04-10T23:03:24Z",
  "Files" : {
    "arduino/doc/Makefile" : {
      "ObjectId" : "02032a01b6a7dbfba2c0b96b30152119127ddaf3",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "arduino/sketchbook/hardware/Microduino/avr/bootloaders/digitecoboot/Makefile" : {
      "ObjectId" : "f57d50df26c72561bc03d0b9ed0436692ec1db92",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Main configuration\n\n#----------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Data Register of the SD CS pin\n",
        "Line" : 4,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Data Direction Register of the SD CS pin\n",
        "Line" : 5,
        "CharPositionInLine" : 22
      },
      "3" : {
        "Text" : "# Bit of the SD CS pin\n\n# Debug with two (defined in asmfunc.S)\n\n# Enable Fat16 support, disabled by default. If enabled, disable Fat32 to keep size of bootloader within limits\n\n# Enable Fat32 support, enabled by default to allow the use of sd cards > 2GB\n",
        "Line" : 6,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------\n\n# Other configuration\n\n#----------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------\n\n# Generic build instructions\n\n#---------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# --- make bin just to check size :)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "arduino/sketchbook/hardware/Microduino/avr/bootloaders/optiboot/Makefile" : {
      "ObjectId" : "575d5e291513c27311b87f1463863e5277f081b6",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#######################################################\n\n#Modified for Microduino by zcb\n\n#beijing,16.12.2012\n\n#omake Micro_328p_16M\n\n#omake Micro_328p_8M\n\n#omake Micro_168pa_16M\n\n#omake Micro_168pa_8M\n\n########################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The default behavior is to build using tools that are in the users\n\n# current path variables, but we can also build using an installed\n\n# Arduino user IDE setup, or the Arduino source tree.\n\n# Uncomment this next lines to build within the arduino environment,\n\n# using the arduino-included avrgcc toolset (mac and pc)\n\n# ENV ?= arduino\n\n# ENV ?= arduinodev\n\n# OS ?= macosx\n\n# OS ?= windows\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build environments\n\n# Start of some ugly makefile-isms to allow optiboot to be built\n\n# in several different environments.  See the README.TXT file for\n\n# details.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# default\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# For Arduino, we assume that we're connected to the optiboot directory\n\n# included with the arduino distribution, which means that the full set\n\n# of avr-tools are \"right up there\" in standard places.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# On windows, SOME of the tool paths will need to have backslashes instead\n\n# of forward slashes (because they use windows cmd.exe for execution instead\n\n# of a unix/mingw shell?)  We also have to ensure that a consistent shell\n\n# is used even if a unix shell is installed (ie as part of WINAVR)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Arduino IDE source code environment.  Use the unpacked compilers created\n\n# by the build (you'll need to do \"ant build\" first.)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# End of build environment code.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x2f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12,
      "Errorlog" : "line 114:9 token recognition error at: '\"C:\\P'\nline 114:26 token recognition error at: '\\A'\nline 114:32 token recognition error at: '\\A'\nline 114:42 token recognition error at: '\\S'\nline 114:49 token recognition error at: '\\S'\nline 312:65 token recognition error at: '\" for\\n# backward compatibility of makefile\\n#\\natmega168: TARGET = atmega168\\natmega168: MCU_TARGET = atmega168\\natmega168: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega168: AVR_FREQ = 16000000L \\natmega168: $(PROGRAM)_atmega168.hex\\natmega168: $(PROGRAM)_atmega168.lst\\n\\natmega168_isp: atmega168\\natmega168_isp: TARGET = atmega168\\n# 2.7V brownout\\natmega168_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega168_isp: LFUSE = FF\\n# 512 byte boot\\natmega168_isp: EFUSE = 04\\natmega168_isp: isp\\n\\ndiecimila: TARGET = diecimila\\ndiecimila: MCU_TARGET = atmega168\\ndiecimila: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\ndiecimila: AVR_FREQ = 16000000L \\ndiecimila: $(PROGRAM)_diecimila.hex\\ndiecimila: $(PROGRAM)_diecimila.lst\\n\\ndiecimila_isp: diecimila\\ndiecimila_isp: TARGET = diecimila\\n# 2.7V brownout\\ndiecimila_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\ndiecimila_isp: LFUSE = FF\\n# 512 byte boot\\ndiecimila_isp: EFUSE = 04\\ndiecimila_isp: isp\\n\\natmega328: TARGET = atmega328\\natmega328: MCU_TARGET = atmega328p\\natmega328: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega328: AVR_FREQ = 16000000L\\natmega328: LDSECTIONS  = -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\\natmega328: $(PROGRAM)_atmega328.hex\\natmega328: $(PROGRAM)_atmega328.lst\\n\\natmega328_isp: atmega328\\natmega328_isp: TARGET = atmega328\\natmega328_isp: MCU_TARGET = atmega328p\\n# 512 byte boot, SPIEN\\natmega328_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega328_isp: LFUSE = FF\\n# 2.7V brownout\\natmega328_isp: EFUSE = 05\\natmega328_isp: isp\\n\\n# Sanguino has a minimum boot size of 1024 bytes, so enable extra functions\\n#\\nsanguino: TARGET = atmega644p\\nsanguino: MCU_TARGET = atmega644p\\nsanguino: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200' '-DBIGBOOT'\\nsanguino: AVR_FREQ = 16000000L\\nsanguino: LDSECTIONS  = -Wl,--section-start=.text=0xfc00\\nsanguino: $(PROGRAM)_atmega644p.hex\\nsanguino: $(PROGRAM)_atmega644p.lst\\n\\nsanguino_isp: sanguino\\nsanguino_isp: TARGET = atmega644p\\nsanguino_isp: MCU_TARGET = atmega644p\\n# 1024 byte boot\\nsanguino_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\nsanguino_isp: LFUSE = FF\\n# 2.7V brownout\\nsanguino_isp: EFUSE = FD\\nsanguino_isp: isp\\n\\n# Mega has a minimum boot size of 1024 bytes, so enable extra functions\\n#mega: TARGET = atmega1280\\nmega: MCU_TARGET = atmega1280\\nmega: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200' '-DBIGBOOT'\\nmega: AVR_FREQ = 16000000L\\nmega: LDSECTIONS  = -Wl,--section-start=.text=0x1fc00\\nmega: $(PROGRAM)_atmega1280.hex\\nmega: $(PROGRAM)_atmega1280.lst\\n\\nmega_isp: mega\\nmega_isp: TARGET = atmega1280\\nmega_isp: MCU_TARGET = atmega1280\\n# 1024 byte boot\\nmega_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\nmega_isp: LFUSE = FF\\n# 2.7V brownout\\nmega_isp: EFUSE = 05\\nmega_isp: isp\\n\\n# ATmega8\\n#\\natmega8: TARGET = atmega8\\natmega8: MCU_TARGET = atmega8\\natmega8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega8: AVR_FREQ = 16000000L \\natmega8: LDSECTIONS  = -Wl,--section-start=.text=0x1e00 -Wl,--section-start=.version=0x1ffe\\natmega8: $(PROGRAM)_atmega8.hex\\natmega8: $(PROGRAM)_atmega8.lst\\n\\natmega8_isp: atmega8\\natmega8_isp: TARGET = atmega8\\natmega8_isp: MCU_TARGET = atmega8\\n# SPIEN, CKOPT, Bootsize=512B\\natmega8_isp: HFUSE = CC\\n# 2.7V brownout, Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega8_isp: LFUSE = BF\\natmega8_isp: isp\\n\\n# ATmega88\\n#\\natmega88: TARGET = atmega88\\natmega88: MCU_TARGET = atmega88\\natmega88: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega88: AVR_FREQ = 16000000L \\natmega88: LDSECTIONS  = -Wl,--section-start=.text=0x1e00 -Wl,--section-start=.version=0x1ffe\\natmega88: $(PROGRAM)_atmega88.hex\\natmega88: $(PROGRAM)_atmega88.lst\\n\\natmega88_isp: atmega88\\natmega88_isp: TARGET = atmega88\\natmega88_isp: MCU_TARGET = atmega88\\n# 2.7V brownout\\natmega88_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natemga88_isp: LFUSE = FF\\n# 512 byte boot\\natmega88_isp: EFUSE = 04\\natmega88_isp: isp\\n\\n\\n# 8MHz clocked platforms\\n#\\n# These are capable of 115200 baud\\n#\\n\\nlilypad: TARGET = lilypad\\nlilypad: MCU_TARGET = atmega168\\nlilypad: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\nlilypad: AVR_FREQ = 8000000L\\nlilypad: $(PROGRAM)_lilypad.hex\\nlilypad: $(PROGRAM)_lilypad.lst\\n\\nlilypad_isp: lilypad\\nlilypad_isp: TARGET = lilypad\\n# 2.7V brownout\\nlilypad_isp: HFUSE = DD\\n# Internal 8MHz osc (8MHz) Slow rising power\\nlilypad_isp: LFUSE = E2\\n# 512 byte boot\\nlilypad_isp: EFUSE = 04\\nlilypad_isp: isp\\n\\nlilypad_resonator: TARGET = lilypad_resonator\\nlilypad_resonator: MCU_TARGET = atmega168\\nlilypad_resonator: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\nlilypad_resonator: AVR_FREQ = 8000000L\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.hex\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.lst\\n\\nlilypad_resonator_isp: lilypad_resonator\\nlilypad_resonator_isp: TARGET = lilypad_resonator\\n# 2.7V brownout\\nlilypad_resonator_isp: HFUSE = DD\\n# Full swing xtal (20MHz) 258CK/14CK+4.1ms\\nlilypad_resonator_isp: LFUSE = C6\\n# 512 byte boot\\nlilypad_resonator_isp: EFUSE = 04\\nlilypad_resonator_isp: isp\\n\\npro8: TARGET = pro_8MHz\\npro8: MCU_TARGET = atmega168\\npro8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\npro8: AVR_FREQ = 8000000L\\npro8: $(PROGRAM)_pro_8MHz.hex\\npro8: $(PROGRAM)_pro_8MHz.lst\\n\\npro8_isp: pro8\\npro8_isp: TARGET = pro_8MHz\\n# 2.7V brownout\\npro8_isp: HFUSE = DD\\n# Full swing xtal (20MHz) 258CK/14CK+4.1ms\\npro8_isp: LFUSE = C6\\n# 512 byte boot\\npro8_isp: EFUSE = 04\\npro8_isp: isp\\n\\natmega328_pro8: TARGET = atmega328_pro_8MHz\\natmega328_pro8: MCU_TARGET = atmega328p\\natmega328_pro8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega328_pro8: AVR_FREQ = 8000000L\\natmega328_pro8: LDSECTIONS = -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.hex\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.lst\\n\\natmega328_pro8_isp: atmega328_pro8\\natmega328_pro8_isp: TARGET = atmega328_pro_8MHz\\natmega328_pro8_isp: MCU_TARGET = atmega328p\\n# 512 byte boot, SPIEN\\natmega328_pro8_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega328_pro8_isp: LFUSE = FF\\n# 2.7V brownout\\natmega328_pro8_isp: EFUSE = 05\\natmega328_pro8_isp: isp\\n\\n# 1MHz clocked platforms\\n#\\n# These are capable of 9600 baud\\n#\\n\\nluminet: TARGET = luminet\\nluminet: MCU_TARGET = attiny84\\nluminet: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=9600'\\nluminet: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nluminet: AVR_FREQ = 1000000L\\nluminet: LDSECTIONS = -Wl,--section-start=.text=0x1d00 -Wl,--section-start=.version=0x1efe\\nluminet: $(PROGRAM)_luminet.hex\\nluminet: $(PROGRAM)_luminet.lst\\n\\nluminet_isp: luminet\\nluminet_isp: TARGET = luminet\\nluminet_isp: MCU_TARGET = attiny84\\n# Brownout disabled\\nluminet_isp: HFUSE = DF\\n# 1MHz internal oscillator, slowly rising power\\nluminet_isp: LFUSE = 62\\n# Self-programming enable\\nluminet_isp: EFUSE = FE\\nluminet_isp: isp\\n\\n#\\n# Generic build instructions\\n#\\n#\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\t$(SIZE) $@\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O binary $< $@\\n\u0000'\n"
    },
    "arduino/sketchbook/libraries/ArduinoJson/CMakeLists.txt" : {
      "ObjectId" : "61113a3290387d8a5cba6d91f9bbe1b59d3fc8f1",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/fuzzing/Makefile" : {
      "ObjectId" : "f3ed397f54e7615f1281cc0fe092bca5219af158",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CAUTION: this file is invoked by https://github.com/google/oss-fuzz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/CMakeLists.txt" : {
      "ObjectId" : "39f78c57787482b45ae2787f0c127d3b35218e7c",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n#\n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the flag exists in 4.4 but is buggy\n",
        "Line" : 47,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "# Set warning level\n\n# Treats all compiler warnings as errors.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/DynamicJsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "665fc82b291913accd216438735e805cdd4af5d9",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/IntegrationTests/CMakeLists.txt" : {
      "ObjectId" : "16e42897f475e35b3e9cfaf6f9a879ee8a8fef77",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# issue 544\n",
        "Line" : 16,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 2
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/JsonArray/CMakeLists.txt" : {
      "ObjectId" : "fa3d6e836ca52a23d3390d33c3b379e797767694",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/JsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "5d4d572b463c0fce0d374ecfe58e02a7e33a9619",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/JsonObject/CMakeLists.txt" : {
      "ObjectId" : "d9b97e45026db86a91bd69e20301bb92df004610",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/JsonVariant/CMakeLists.txt" : {
      "ObjectId" : "ede0e98d6b92ad7a7fac2c5e7c1dc461eaf15174",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/JsonWriter/CMakeLists.txt" : {
      "ObjectId" : "e1ae81cccffe97ae0eeaf34cd0514efee5e6f17a",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/Misc/CMakeLists.txt" : {
      "ObjectId" : "531df655f7121fd0f3e3078dd5e78b935b81592a",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/Polyfills/CMakeLists.txt" : {
      "ObjectId" : "bbc9165c3fe296a08eb4e253aaaab09f29a67981",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/test/StaticJsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "780678beea33e514918e725cd5f3ba2a6549951f",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/ArduinoJson/third-party/catch/CMakeLists.txt" : {
      "ObjectId" : "be172d5a198fc8f6a52b6a2dbcc4b02dbdc2e6ee",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Benoit Blanchon 2014-2017\n\n# MIT License\n\n# \n\n# Arduino JSON library\n\n# https://bblanchon.github.io/ArduinoJson/\n\n# If you like this project, please add a star!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arduino/sketchbook/libraries/IRremoteESP8266/test/Makefile" : {
      "ObjectId" : "17b8611b985af4604e74d4b8f68bc50c18397732",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# SYNOPSIS:\n\n#\n\n#   make [all]               - makes everything.\n\n#   make TARGET              - makes the given target.\n\n#   make run                 - makes everything and runs all the tests.\n\n#   make clean               - removes all files generated by make.\n\n#   make install-googletest  - install the googletest code suite\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build and run all the tests.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10,
      "Errorlog" : "line 60:8 token recognition error at: '\"PASS: \\o'\nline 60:19 token recognition error at: '\\o'\nline 60:46 token recognition error at: '\\o'\nline 60:50 token recognition error at: '\\o'\nline 60:53 token recognition error at: '\"; \\\\n\\tfi\\n\\nrun_tests : run\\n\\ninstall-googletest :\\n\\tgit clone https://github.com/google/googletest.git ../lib/googletest\\n\\n# Builds gtest.a and gtest_main.a.\\n\\n# Usually you shouldn't tweak such internal variables, indicated by a\\n# trailing _.\\nGTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)\\n\\n# All the IR protocol object files.\\nPROTOCOLS = ir_NEC.o ir_Sony.o ir_Samsung.o ir_JVC.o ir_RCMM.o ir_RC5_RC6.o \\\\n    ir_LG.o ir_Mitsubishi.o ir_Fujitsu.o ir_Sharp.o ir_Sanyo.o ir_Denon.o ir_Dish.o \\\\n\\t\\tir_Panasonic.o ir_Whynter.o ir_Coolix.o ir_Aiwa.o ir_Sherwood.o \\\\n\\t\\tir_Kelvinator.o ir_Daikin.o ir_Gree.o ir_Pronto.o ir_Nikai.o ir_Toshiba.o \\\\n\\t\\tir_Midea.o ir_Magiquest.o ir_Lasertag.o ir_Carrier.o ir_Haier.o \\\\n\\t\\tir_Hitachi.o ir_GICable.o\\n\\n# Common object files\\nCOMMON_OBJ = IRutils.o IRtimer.o IRsend.o IRrecv.o ir_GlobalCache.o \\\\n             $(PROTOCOLS) gtest_main.a\\n# Common dependencies\\nCOMMON_DEPS = $(USER_DIR)/IRrecv.h $(USER_DIR)/IRsend.h $(USER_DIR)/IRtimer.h \\\\n              $(USER_DIR)/IRutils.h $(USER_DIR)/IRremoteESP8266.h\\n# Common test dependencies\\nCOMMON_TEST_DEPS = $(COMMON_DEPS) IRrecv_test.h IRsend_test.h\\n\\n# For simplicity and to avoid depending on Google Test's\\n# implementation details, the dependencies specified below are\\n# conservative and not optimized.  This is fine as Google Test\\n# compiles fast and for ordinary users its source rarely changes.\\ngtest-all.o : $(GTEST_SRCS_)\\n\\t$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \\\\n        $(GTEST_DIR)/src/gtest-all.cc\\n\\ngtest_main.o : $(GTEST_SRCS_)\\n\\t$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \\\\n        $(GTEST_DIR)/src/gtest_main.cc\\n\\ngtest.a : gtest-all.o\\n\\t$(AR) $(ARFLAGS) $@ $^\\n\\ngtest_main.a : gtest-all.o gtest_main.o\\n\\t$(AR) $(ARFLAGS) $@ $^\\n\\n# Builds our test.  A test should link with either gtest.a or\\n# gtest_main.a, depending on whether it defines its own main()\\n# function.\\n\\nIRutils.o : $(USER_DIR)/IRutils.cpp $(USER_DIR)/IRutils.h $(USER_DIR)/IRremoteESP8266.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRutils.cpp\\n\\nIRutils_test.o : IRutils_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c IRutils_test.cpp\\n\\nIRutils_test : IRutils_test.o ir_NEC.o ir_Nikai.o ir_Toshiba.o $(COMMON_OBJ) gtest_main.a\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nIRtimer.o : $(USER_DIR)/IRtimer.cpp $(USER_DIR)/IRtimer.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRtimer.cpp\\n\\nIRsend.o : $(USER_DIR)/IRsend.cpp $(USER_DIR)/IRsend.h $(USER_DIR)/IRremoteESP8266.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRsend.cpp\\n\\nIRsend_test.o : IRsend_test.cpp $(USER_DIR)/IRsend.h $(USER_DIR)/IRrecv.h IRsend_test.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c IRsend_test.cpp\\n\\nIRsend_test : IRsend_test.o $(COMMON_OBJ)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nIRrecv.o : $(USER_DIR)/IRrecv.cpp $(USER_DIR)/IRrecv.h $(USER_DIR)/IRremoteESP8266.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRrecv.cpp\\n\\nIRrecv_test.o : IRrecv_test.cpp $(USER_DIR)/IRsend.h $(USER_DIR)/IRrecv.h IRsend_test.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c IRrecv_test.cpp\\n\\nIRrecv_test : IRrecv_test.o $(COMMON_OBJ)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_NEC.o : $(USER_DIR)/ir_NEC.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_NEC.cpp\\n\\nir_NEC_test.o : ir_NEC_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_NEC_test.cpp\\n\\nir_NEC_test : $(COMMON_OBJ) ir_NEC_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_GlobalCache.o : $(USER_DIR)/ir_GlobalCache.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_GlobalCache.cpp\\n\\nir_GlobalCache_test.o : ir_GlobalCache_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_GlobalCache_test.cpp\\n\\nir_GlobalCache_test : $(COMMON_OBJ) ir_GlobalCache_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sherwood.o : $(USER_DIR)/ir_Sherwood.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sherwood.cpp\\n\\nir_Sherwood_test.o : ir_Sherwood_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sherwood_test.cpp\\n\\nir_Sherwood_test : $(COMMON_OBJ) ir_Sherwood_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sony.o : $(USER_DIR)/ir_Sony.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sony.cpp\\n\\nir_Sony_test.o : ir_Sony_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sony_test.cpp\\n\\nir_Sony_test : $(COMMON_OBJ) ir_Sony_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Samsung.o : $(USER_DIR)/ir_Samsung.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Samsung.cpp\\n\\nir_Samsung_test.o : ir_Samsung_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Samsung_test.cpp\\n\\nir_Samsung_test : $(COMMON_OBJ) ir_Samsung_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Kelvinator.o : $(USER_DIR)/ir_Kelvinator.cpp $(USER_DIR)/ir_Kelvinator.h $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Kelvinator.cpp\\n\\nir_Kelvinator_test.o : ir_Kelvinator_test.cpp $(USER_DIR)/ir_Kelvinator.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Kelvinator_test.cpp\\n\\nir_Kelvinator_test : $(COMMON_OBJ) ir_Kelvinator_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_JVC.o : $(USER_DIR)/ir_JVC.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_JVC.cpp\\n\\nir_JVC_test.o : ir_JVC_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_JVC_test.cpp\\n\\nir_JVC_test : $(COMMON_OBJ) ir_JVC_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_RCMM.o : $(USER_DIR)/ir_RCMM.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_RCMM.cpp\\n\\nir_RCMM_test.o : ir_RCMM_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_RCMM_test.cpp\\n\\nir_RCMM_test : $(COMMON_OBJ) ir_RCMM_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_LG.o : $(USER_DIR)/ir_LG.h $(USER_DIR)/ir_LG.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_LG.cpp\\n\\nir_LG_test.o : ir_LG_test.cpp $(USER_DIR)/ir_LG.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_LG_test.cpp\\n\\nir_LG_test : $(COMMON_OBJ) ir_LG_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Mitsubishi.o : $(USER_DIR)/ir_Mitsubishi.h $(USER_DIR)/ir_Mitsubishi.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Mitsubishi.cpp\\n\\nir_Mitsubishi_test.o : ir_Mitsubishi_test.cpp $(USER_DIR)/ir_Mitsubishi.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Mitsubishi_test.cpp\\n\\nir_Mitsubishi_test : $(COMMON_OBJ) ir_Mitsubishi_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Fujitsu.o : $(USER_DIR)/ir_Fujitsu.h $(USER_DIR)/ir_Fujitsu.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Fujitsu.cpp\\n\\nir_Fujitsu_test.o : ir_Fujitsu_test.cpp $(USER_DIR)/ir_Fujitsu.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Fujitsu_test.cpp\\n\\nir_Fujitsu_test : $(COMMON_OBJ) ir_Fujitsu_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sharp.o : $(USER_DIR)/ir_Sharp.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sharp.cpp\\n\\nir_Sharp_test.o : ir_Sharp_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sharp_test.cpp\\n\\nir_Sharp_test : $(COMMON_OBJ) ir_Sharp_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_RC5_RC6.o : $(USER_DIR)/ir_RC5_RC6.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_RC5_RC6.cpp\\n\\nir_RC5_RC6_test.o : ir_RC5_RC6_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_RC5_RC6_test.cpp\\n\\nir_RC5_RC6_test : $(COMMON_OBJ) ir_RC5_RC6_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Panasonic.o : $(USER_DIR)/ir_Panasonic.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Panasonic.cpp\\n\\nir_Panasonic_test.o : ir_Panasonic_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Panasonic_test.cpp\\n\\nir_Panasonic_test : $(COMMON_OBJ) ir_Panasonic_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Dish.o : $(USER_DIR)/ir_Dish.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Dish.cpp\\n\\nir_Dish_test.o : ir_Dish_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Dish_test.cpp\\n\\nir_Dish_test : $(COMMON_OBJ) ir_Dish_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Whynter.o : $(USER_DIR)/ir_Whynter.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Whynter.cpp\\n\\nir_Whynter_test.o : ir_Whynter_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Whynter_test.cpp\\n\\nir_Whynter_test : $(COMMON_OBJ) ir_Whynter_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Coolix.o : $(USER_DIR)/ir_Coolix.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Coolix.cpp\\n\\nir_Coolix_test.o : ir_Coolix_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Coolix_test.cpp\\n\\nir_Coolix_test : $(COMMON_OBJ) ir_Coolix_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Aiwa.o : $(USER_DIR)/ir_Aiwa.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Aiwa.cpp\\n\\nir_Aiwa_test.o : ir_Aiwa_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Aiwa_test.cpp\\n\\nir_Aiwa_test : $(COMMON_OBJ) ir_Aiwa_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Denon.o : $(USER_DIR)/ir_Denon.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Denon.cpp\\n\\nir_Denon_test.o : ir_Denon_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Denon_test.cpp\\n\\nir_Denon_test : $(COMMON_OBJ) ir_Denon_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sanyo.o : $(USER_DIR)/ir_Sanyo.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sanyo.cpp\\n\\nir_Sanyo_test.o : ir_Sanyo_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sanyo_test.cpp\\n\\nir_Sanyo_test : $(COMMON_OBJ) ir_Sanyo_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Daikin.o : $(USER_DIR)/ir_Daikin.cpp $(USER_DIR)/ir_Daikin.h $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Daikin.cpp\\n\\nir_Daikin_test.o : ir_Daikin_test.cpp $(USER_DIR)/ir_Daikin.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Daikin_test.cpp\\n\\nir_Daikin_test : $(COMMON_OBJ) ir_Daikin_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Gree.o : $(USER_DIR)/ir_Gree.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Gree.cpp\\n\\nir_Gree_test.o : ir_Gree_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Gree_test.cpp\\n\\nir_Gree_test : $(COMMON_OBJ) ir_Gree_test.o ir_Kelvinator.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Pronto.o : $(USER_DIR)/ir_Pronto.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Pronto.cpp\\n\\nir_Pronto_test.o : ir_Pronto_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Pronto_test.cpp\\n\\nir_Pronto_test : $(COMMON_OBJ) ir_Pronto_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Nikai.o : $(USER_DIR)/ir_Nikai.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Nikai.cpp\\n\\nir_Nikai_test.o : ir_Nikai_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Nikai_test.cpp\\n\\nir_Nikai_test : $(COMMON_OBJ) ir_Nikai_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Toshiba.o : $(USER_DIR)/ir_Toshiba.cpp $(USER_DIR)/ir_Toshiba.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Toshiba.cpp\\n\\nir_Toshiba_test.o : ir_Toshiba_test.cpp $(USER_DIR)/ir_Toshiba.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Toshiba_test.cpp\\n\\nir_Toshiba_test : $(COMMON_OBJ) ir_Toshiba_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Midea.o : $(USER_DIR)/ir_Midea.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Midea.cpp\\n\\nir_Midea_test.o : ir_Midea_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Midea_test.cpp\\n\\nir_Midea_test : $(COMMON_OBJ) ir_Midea_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Magiquest.o : $(USER_DIR)/ir_Magiquest.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Magiquest.cpp\\n\\nir_Magiquest_test.o : ir_Magiquest_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Magiquest_test.cpp\\n\\nir_Magiquest_test : $(COMMON_OBJ) ir_Magiquest_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Lasertag.o : $(USER_DIR)/ir_Lasertag.cpp $(USER_DIR)/ir_RC5_RC6.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Lasertag.cpp\\n\\nir_Lasertag_test.o : ir_Lasertag_test.cpp $(USER_DIR)/ir_RC5_RC6.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Lasertag_test.cpp\\n\\nir_Lasertag_test : $(COMMON_OBJ) ir_Lasertag_test.o ir_RC5_RC6.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Carrier.o : $(USER_DIR)/ir_Carrier.cpp $(COMMON_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Carrier.cpp\\n\\nir_Carrier_test.o : ir_Carrier_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Carrier_test.cpp\\n\\nir_Carrier_test : $(COMMON_OBJ) ir_Carrier_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Haier.o : $(USER_DIR)/ir_Haier.cpp $(USER_DIR)/ir_Haier.h $(COMMON_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Haier.cpp\\n\\nir_Haier_test.o : ir_Haier_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Haier_test.cpp\\n\\nir_Haier_test : $(COMMON_OBJ) ir_Haier_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Hitachi.o : $(USER_DIR)/ir_Hitachi.cpp $(COMMON_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Hitachi.cpp\\n\\nir_Hitachi_test.o : ir_Hitachi_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Hitachi_test.cpp\\n\\nir_Hitachi_test : $(COMMON_OBJ) ir_Hitachi_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_GICable.o : $(USER_DIR)/ir_GICable.cpp $(COMMON_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_GICable.cpp\\n\\nir_GICable_test.o : ir_GICable_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_GICable_test.cpp\\n\\nir_GICable_test : $(COMMON_OBJ) ir_GICable_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\u0000'\n"
    },
    "arduino/sketchbook/libraries/IRremoteESP8266/tools/Makefile" : {
      "ObjectId" : "abf11fcd30a3ba12faac7fc7a1872f41322d4897",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find test code.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 36:7 token recognition error at: '\"PASS: \\o'\nline 36:18 token recognition error at: '\\o'\nline 36:45 token recognition error at: '\\o'\nline 36:49 token recognition error at: '\\o'\nline 36:52 token recognition error at: '\"; \\\\n\\tfi\\n\\nclean :\\n\\trm -f  *.o *.pyc gc_decode\\n\\n\\n# All the IR protocol object files.\\nPROTOCOLS = ir_NEC.o ir_Sony.o ir_Samsung.o ir_JVC.o ir_RCMM.o ir_RC5_RC6.o \\\\n            ir_LG.o ir_Mitsubishi.o ir_Fujitsu.o ir_Sharp.o ir_Sanyo.o \\\\n            ir_Denon.o ir_Dish.o ir_Panasonic.o ir_Whynter.o ir_Coolix.o \\\\n            ir_Aiwa.o ir_Sherwood.o ir_Kelvinator.o ir_Daikin.o ir_Gree.o \\\\n            ir_Pronto.o ir_GlobalCache.o ir_Nikai.o ir_Toshiba.o ir_Midea.o \\\\n            ir_Magiquest.o ir_Lasertag.o ir_Carrier.o ir_Haier.o ir_Hitachi.o \\\\n\\t\\t\\t\\t\\t\\tir_GICable.o\\n\\n# Common object files\\nCOMMON_OBJ = IRutils.o IRtimer.o IRsend.o IRrecv.o $(PROTOCOLS)\\n\\n# Common dependencies\\nCOMMON_DEPS = $(USER_DIR)/IRrecv.h $(USER_DIR)/IRsend.h $(USER_DIR)/IRtimer.h \\\\n              $(USER_DIR)/IRutils.h $(USER_DIR)/IRremoteESP8266.h\\n# Common test dependencies\\nCOMMON_TEST_DEPS = $(COMMON_DEPS) $(TEST_DIR)/IRsend_test.h\\n\\ngc_decode.o : gc_decode.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -I$(TEST_DIR) -c gc_decode.cpp\\n\\ngc_decode : $(COMMON_OBJ) gc_decode.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\n\\nIRutils.o : $(USER_DIR)/IRutils.cpp $(USER_DIR)/IRutils.h $(USER_DIR)/IRremoteESP8266.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRutils.cpp\\n\\nIRtimer.o : $(USER_DIR)/IRtimer.cpp $(USER_DIR)/IRtimer.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRtimer.cpp\\n\\nIRsend.o : $(USER_DIR)/IRsend.cpp $(USER_DIR)/IRsend.h $(USER_DIR)/IRremoteESP8266.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRsend.cpp\\n\\nIRrecv.o : $(USER_DIR)/IRrecv.cpp $(USER_DIR)/IRrecv.h $(USER_DIR)/IRremoteESP8266.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRrecv.cpp\\n\\n\\nir_NEC.o : $(USER_DIR)/ir_NEC.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_NEC.cpp\\n\\nir_GlobalCache.o : $(USER_DIR)/ir_GlobalCache.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_GlobalCache.cpp\\n\\nir_Sherwood.o : $(USER_DIR)/ir_Sherwood.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sherwood.cpp\\n\\nir_Sony.o : $(USER_DIR)/ir_Sony.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sony.cpp\\n\\nir_Samsung.o : $(USER_DIR)/ir_Samsung.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Samsung.cpp\\n\\nir_Kelvinator.o : $(USER_DIR)/ir_Kelvinator.cpp $(USER_DIR)/ir_Kelvinator.h $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Kelvinator.cpp\\n\\nir_JVC.o : $(USER_DIR)/ir_JVC.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_JVC.cpp\\n\\nir_RCMM.o : $(USER_DIR)/ir_RCMM.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_RCMM.cpp\\n\\nir_LG.o : $(USER_DIR)/ir_LG.h $(USER_DIR)/ir_LG.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_LG.cpp\\n\\nir_Mitsubishi.o : $(USER_DIR)/ir_Mitsubishi.h $(USER_DIR)/ir_Mitsubishi.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Mitsubishi.cpp\\n\\nir_Fujitsu.o : $(USER_DIR)/ir_Fujitsu.h $(USER_DIR)/ir_Fujitsu.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Fujitsu.cpp\\n\\nir_Sharp.o : $(USER_DIR)/ir_Sharp.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sharp.cpp\\n\\nir_RC5_RC6.o : $(USER_DIR)/ir_RC5_RC6.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_RC5_RC6.cpp\\n\\nir_Panasonic.o : $(USER_DIR)/ir_Panasonic.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Panasonic.cpp\\n\\nir_Dish.o : $(USER_DIR)/ir_Dish.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Dish.cpp\\n\\nir_Whynter.o : $(USER_DIR)/ir_Whynter.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Whynter.cpp\\n\\nir_Coolix.o : $(USER_DIR)/ir_Coolix.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Coolix.cpp\\n\\nir_Aiwa.o : $(USER_DIR)/ir_Aiwa.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Aiwa.cpp\\n\\nir_Denon.o : $(USER_DIR)/ir_Denon.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Denon.cpp\\n\\nir_Sanyo.o : $(USER_DIR)/ir_Sanyo.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sanyo.cpp\\n\\nir_Daikin.o : $(USER_DIR)/ir_Daikin.cpp $(USER_DIR)/ir_Daikin.h $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Daikin.cpp\\n\\nir_Gree.o : $(USER_DIR)/ir_Gree.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Gree.cpp\\n\\nir_Pronto.o : $(USER_DIR)/ir_Pronto.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Pronto.cpp\\n\\nir_Nikai.o : $(USER_DIR)/ir_Nikai.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Nikai.cpp\\n\\nir_Toshiba.o : $(USER_DIR)/ir_Toshiba.h $(USER_DIR)/ir_Toshiba.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Toshiba.cpp\\n\\nir_Midea.o : $(USER_DIR)/ir_Midea.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Midea.cpp\\n\\nir_Magiquest.o : $(USER_DIR)/ir_Magiquest.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Magiquest.cpp\\n\\nir_Lasertag.o : $(USER_DIR)/ir_Lasertag.cpp $(USER_DIR)/ir_RC5_RC6.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Lasertag.cpp\\n\\nir_Carrier.o : $(USER_DIR)/ir_Carrier.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Carrier.cpp\\n\\nir_Haier.o : $(USER_DIR)/ir_Haier.cpp $(USER_DIR)/ir_Haier.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Haier.cpp\\n\\nir_Hitachi.o : $(USER_DIR)/ir_Hitachi.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Hitachi.cpp\\n\\nir_GICable.o : $(USER_DIR)/ir_GICable.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_GICable.cpp\\n\u0000'\n"
    },
    "arduino/sketchbook/libraries/PubSubClient/tests/Makefile" : {
      "ObjectId" : "1f7163675fd513448fa3260d8e9f7d4d58199c7e",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "arduino/sketchbook/libraries/RF24/Makefile" : {
      "ObjectId" : "9b5e4d856372522af680c2b7877e920157b914d9",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24-bcm on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  Charles-Henri Hallard \n\n# Date:    2013/03/13 \n\n#\n\n# Description:\n\n# ------------\n\n# use make all and mak install to install the library \n\n# You can change the install directory by editing the LIBDIR line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library parameters\n\n# where to put the lib\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lib name \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# shared library name\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to put the header files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The base location of support files for different devices\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The default objects to compile\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Detect the Raspberry Pi from cpuinfo\n\n# Allow users to override the use of BCM2835 driver and force use of SPIDEV by specifying \" sudo make install -B RF24_SPIDEV=1 \"\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Count the matches for BCM2708 or BCM2709 in cpuinfo\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# make all\n\n# reinstall the library after each recompilation\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Make the library\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Library parts\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# clear build files\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Install the library to LIBPATH\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "arduino/sketchbook/libraries/RF24/examples_RPi/Makefile" : {
      "ObjectId" : "0cc63e6075dac12ce263d5f843ec8d64a9ef78f6",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24 examples on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  gnulnulf <arco@appeltaart.mine.nu>\n\n# Date:    2013/02/07 (version 1.0)\n\n#\n\n# Description:\n\n# ------------\n\n# use make all and make install to install the examples\n\n# You can change the install directory by editing the prefix line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect the Raspberry Pi by the existence of the bcm_host.h file\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define all programs\n\n#PROGRAMS = scanner pingtest gettingstarted\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "arduino/sketchbook/libraries/RF24/examples_RPi/extra/Makefile" : {
      "ObjectId" : "c313b5bb80e94d6db034aa0d064de31f0f5b7cb0",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24 examples on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  gnulnulf <arco@appeltaart.mine.nu>\n\n# Date:    2013/02/07 (version 1.0)\n\n#\n\n# Description:\n\n# ------------\n\n# use make all and make install to install the examples\n\n# You can change the install directory by editing the prefix line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CCFLAGS=\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define all programs\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "arduino/sketchbook/libraries/RF24Network/Makefile" : {
      "ObjectId" : "b1097c72b896121d43996f63be78f059643dd81f",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24network-bcm on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  Charles-Henri Hallard \n\n# Date:    2013/03/13 \n\n#\n\n# Description:\n\n# ------------\n\n# use make all and mak install to install the library \n\n# You can change the install directory by editing the LIBDIR line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library parameters\n\n# where to put the lib\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lib name \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# shared library name\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Detect the Raspberry Pi from cpuinfo\n\n#Count the matches for BCM2708 or BCM2709 in cpuinfo\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# make all\n\n# reinstall the library after each recompilation\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make the library\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Library parts\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# clear build files\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Install the library to LIBPATH\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "arduino/sketchbook/libraries/RF24Network/examples_RPi/Makefile" : {
      "ObjectId" : "e4f61852bb56cb5838798ccedc3fc7100a824be5",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24 examples on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  gnulnulf <arco@appeltaart.mine.nu>\n\n# Date:    2013/02/07 (version 1.0)\n\n#\n\n# Description:\n\n# ------------\n\n# use make all and make install to install the examples\n\n# You can change the install directory by editing the prefix line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect the Raspberry Pi from cpuinfo\n\n#Count the matches for BCM2708 or BCM2709 in cpuinfo\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define all programs\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "arduino/sketchbook/libraries/RadioHead/examples/raspi/Makefile" : {
      "ObjectId" : "bb24a0ae36051b0e8e416a206e7fe1ac9176a9fc",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile\n\n# Sample for RH_NRF24 on Raspberry Pi\n\n# Caution: requires bcm2835 library to be already installed\n\n# http://www.airspayce.com/mikem/bcm2835/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kicad/r-map_v2/base/base.pro" : {
      "ObjectId" : "ad8199f9cfab3abb529f0aebc4c1fb93020973ec",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/breakout_board/NO2-CO/NO2.pro" : {
      "ObjectId" : "8cb5f75f6d065d97f84c8f1fda7fe2863e8b1c60",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/breakout_board/NO2/NO2.pro" : {
      "ObjectId" : "f5eb768b808dad5df46bd095fa9bb6a17446acfb",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/breakout_board/Stima_AirQuality_Connector/Stima_AirQuality_Connector.pro" : {
      "ObjectId" : "0afeb319ba1aa62e30fd4a5a64be7ccd475eec89",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/breakout_board/temperature_humidity/temperature_humidity.pro" : {
      "ObjectId" : "4f9ac437a046f688ac95ee42150be65c82dddb32",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/i2c_hub/$i2c_hub.pro" : {
      "ObjectId" : "f5795a5b16b74b67a05d08b34c81cb84aea5413f",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/i2c_hub/_autosave-i2c_hub.pro" : {
      "ObjectId" : "804cf83d727f34d041e3710ef0c94734008208ff",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/i2c_hub/i2c_hub.pro" : {
      "ObjectId" : "2a700d19245569303b95bf6438799487c98e9b88",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/master/master.pro" : {
      "ObjectId" : "a246f7333d6e16895f656de794c646ac5aeed79b",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/microduino/_autosave-.pro" : {
      "ObjectId" : "f5795a5b16b74b67a05d08b34c81cb84aea5413f",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/microduino/_autosave-microduino.pro" : {
      "ObjectId" : "804cf83d727f34d041e3710ef0c94734008208ff",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/microduino/microduino.pro" : {
      "ObjectId" : "bb48d3c0ca360db39b3ebbd6b04ce3924ec1753a",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/microduino_bt/micrduino_bt.pro" : {
      "ObjectId" : "90f51e0725b584ffe293618c538ccbf5cf883a3d",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/microduino_bt/microduino_bt.pro" : {
      "ObjectId" : "bc95246c39c1f3337080b41c404f7ceddba6099b",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/microduino_cc1101/microduino_cc1101.pro" : {
      "ObjectId" : "f28a598743086d6bdcabad623e75bb34642e3444",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/r-map_v2/microduino_lora/microduino_lora.pro" : {
      "ObjectId" : "c05b12585c0b808230a94c86cf3e60cb2053ae12",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_BASE_DE/Microduino_Base_DE.pro" : {
      "ObjectId" : "72b3a6345573062fcd72641fac35942d4d92c6ca",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_Core+_DE/Microduino_Core+_DE.pro" : {
      "ObjectId" : "e3378a7c9e634241fe68c93cb6d81115533a6de7",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_DIGITALE_DE/Microduino_Digitale_DE.pro" : {
      "ObjectId" : "c7e217e535472f37bc8c0daceb03c308a3c010f9",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_FT232R_DE/Microduino_FT232R_DE.pro" : {
      "ObjectId" : "299a884e7d782f308a5b528ffbf574119fa09210",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_GSM_DE/SIM800C_DE/Microduino_SIM800C_DE.pro" : {
      "ObjectId" : "093307da4144c1f5d23dea83193dbd0ebf8c470b",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_GSM_DE/SIM_shield_DE/Microduino_SIM_shield_DE.pro" : {
      "ObjectId" : "afc3de934af0c0a3fc2eb8d0bd1d8303d11f756b",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_HUB_DE/Microduino_HUB_DE.pro" : {
      "ObjectId" : "81d1d203261391d54c290f04e450651a9a5bcab8",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_RTC_DE/Microduino_RTC_DE.pro" : {
      "ObjectId" : "6dee547c5fdf07cabcf3a962c01d0a805116deb0",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_SD_DE/Microduino_SD_DE.pro" : {
      "ObjectId" : "72d66969ad10e6d4469513adf8cee2787640a597",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "kicad/stima_v3/Microduino_SUPPORTO_DE/Microduino_Supporto_DE.pro" : {
      "ObjectId" : "e671dd4a2fb1d1707c46b55df56c7cb286591c5e",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "mqtt2bufr/Makefile.am" : {
      "ObjectId" : "00fbe5cf9668e5037a48894914799cbe71b3b56c",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "raspberry/RF24Network_RPi/RF24Network/Makefile" : {
      "ObjectId" : "ed01fd0b89c165f71307beef756821b5001d0b3f",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24-bcm on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  Charles-Henri Hallard \n\n# Date:    2013/03/13 \n\n#\n\n# Description:\n\n# ------------\n\n# use make all and mak install to install the library \n\n# You can change the install directory by editing the LIBDIR line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library parameters\n\n# where to put the lib\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lib name \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# shared library name\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# shared library name\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# make all\n\n# reinstall the library after each recompilation\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make the library\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Library parts\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# clear build files\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Install the library to LIBPATH\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "raspberry/RF24Network_RPi/RF24Network/examples/Makefile" : {
      "ObjectId" : "af3fd6bcce4ac55756d7b1b2dfa852ea024f2ffe",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24 examples on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  gnulnulf <arco@appeltaart.mine.nu>\n\n# Date:    2013/02/07 (version 1.0)\n\n#\n\n# Description:\n\n# ------------\n\n# use make all and make install to install the examples\n\n# You can change the install directory by editing the prefix line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CCFLAGS=\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define all programs\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "raspberry/RF24_RPi/RF24/Makefile" : {
      "ObjectId" : "c2ae37d95121e4c368822aad908ffece6e750d1d",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24-bcm on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  Charles-Henri Hallard \n\n# Date:    2013/03/13 \n\n#\n\n# Description:\n\n# ------------\n\n# use make all and mak install to install the library \n\n# You can change the install directory by editing the LIBDIR line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library parameters\n\n# where to put the lib\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lib name \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# shared library name\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# make all\n\n# reinstall the library after each recompilation\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make the library\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Library parts\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clear build files\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Install the library to LIBPATH\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#@install -m 0755 ${LIB}.a ${LIBDIR}\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 11
    },
    "raspberry/RF24_RPi/RF24/examples/Makefile" : {
      "ObjectId" : "73da217497f95ce3ea43e8b5434cbc2df3faf307",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24 examples on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  gnulnulf <arco@appeltaart.mine.nu>\n\n# Date:    2013/02/07 (version 1.0)\n\n#\n\n# Description:\n\n# ------------\n\n# use make all and make install to install the examples\n\n# You can change the install directory by editing the prefix line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CCFLAGS=\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define all programs\n\n#PROGRAMS = scanner pingtest gettingstarted\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "raspberry/RF24_RPi/RF24/examples/extra/Makefile" : {
      "ObjectId" : "c313b5bb80e94d6db034aa0d064de31f0f5b7cb0",
      "LastModified" : "2018-11-14T16:56:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#############################################################################\n\n#\n\n# Makefile for librf24 examples on Raspberry Pi\n\n#\n\n# License: GPL (General Public License)\n\n# Author:  gnulnulf <arco@appeltaart.mine.nu>\n\n# Date:    2013/02/07 (version 1.0)\n\n#\n\n# Description:\n\n# ------------\n\n# use make all and make install to install the examples\n\n# You can change the install directory by editing the prefix line\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The recommended compiler flags for the Raspberry Pi\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CCFLAGS=\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define all programs\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "QMAKE" : 26,
    "MAKEFILE" : 18,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 4557
}