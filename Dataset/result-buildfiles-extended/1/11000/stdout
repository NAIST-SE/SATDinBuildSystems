{
  "Repository" : "11000",
  "Revision" : "HEAD",
  "ObjectId" : "0c88d6236758409d950b1858c22a44ef28774b70",
  "CommitTime" : "2019-04-01T21:04:03Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "349753d1d6ec68ba550337af46bbaaeef9732ce8",
      "LastModified" : "2015-05-01T19:36:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# OS X has trouble launching the executable via the symlink, gets a \"Couldn't\n\n# load XPCOM\" error, so resolve the symlink first. Do not generically use\n\n# readlink on all platforms, since it behaves slightly differently, and only\n\n# the OS X platform seems to exhibit this problem.\n",
        "Line" : 79,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Best effort use RUNMOZ if its available otherwise ignore it.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Common test running logic.  Some test files are for both IMAP and ActiveSync.\n\n# Some test files are just for one or the other.  xpcshell has a mechanism for\n\n# specifying constraings on test files in xpcshell.ini, and we are using that.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# run all the tests listed in a test config file\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# $(call run-tests)\n",
        "Line" : 104,
        "CharPositionInLine" : 18
      },
      "5" : {
        "Text" : "# run one test\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "######################\n\n# All tests\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If our package.json has been updated, run npm install\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# wrap one-test with gdb flags to RUNMOZ.  Abstraction so I don't have to\n\n# remember this and because when we shift to using mach or such then it can\n\n# be a transparent change, etc.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# turn off the JIT's auto-segfault magic.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "######################\n\n# Bundle up all the tests!\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "logic-inspector/Makefile" : {
      "ObjectId" : "f5e513b3226ea0cf432873c0c06a635205ab385f",
      "LastModified" : "2015-03-31T20:41:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Rebuild when JS files change.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If our package.json has been updated, run npm install\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1620
}