{
  "Repository" : "65589",
  "Revision" : "HEAD",
  "ObjectId" : "0511c9a5d6f7c0aaa728041945b8638dd9232d00",
  "CommitTime" : "2018-05-06T19:44:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "175557b6993a8d0aeb259ab8a61b14e6b5b08436",
      "LastModified" : "2018-01-31T15:35:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Request C++11 standard, using new CMake variables.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set symbol visibility defaults for all targets.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up our version.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Handle installation prefix for Mac bundles...\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This is necessary for tests, includes etc.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "103157745a96170ac19621964cee90487feb94c8",
      "LastModified" : "2012-04-30T15:29:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/BuildLocation.cmake" : {
      "ObjectId" : "3521c5459299f42b54b2aad1b67109bc612d6bb0",
      "LastModified" : "2012-05-02T12:26:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set up our directory structure for output libraries and binaries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/BuildPackageTest.cmake" : {
      "ObjectId" : "6c6a8a09f33419720b062c781c775106cb320f29",
      "LastModified" : "2012-05-07T19:12:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Not a dashboard, do not add BuildPackage* tests by default:\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Dashboard, do add BuildPackage* tests by default:\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use the NAME/COMMAND form of add_test and pass $<CONFIGURATION>.\n\n# However, using this form requires passing -C when running ctest\n\n# from the command line, or setting CTEST_CONFIGURATION_TYPE\n\n# in a -S script.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/BuildType.cmake" : {
      "ObjectId" : "0c720a2f85540dc80434db6ebe44793f64403070",
      "LastModified" : "2012-05-07T19:12:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/CompilerFlags.cmake" : {
      "ObjectId" : "fa3f596965bf08de2fe7529536571fc4295da04f",
      "LastModified" : "2012-05-07T19:12:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Addtional warnings for GCC\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This flag is useful as not returning from a non-void function is an error\n\n# with MSVC, but it is not supported on all GCC compiler versions\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If we are compiling on Linux then set some extra linker flags too\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Set up the debug CXX_FLAGS for extra warnings\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/DeployQt5.cmake" : {
      "ObjectId" : "d92109e8a5f10ba3bbf762deabe108b9f1c0ca16",
      "LastModified" : "2016-11-08T17:59:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# DeployQt5\n\n# ---------\n\n#\n\n# Functions to help assemble a standalone Qt5 executable.\n\n#\n\n# A collection of CMake utility functions useful for deploying Qt5\n\n# executables.\n\n#\n\n# The following functions are provided by this module:\n\n#\n\n# ::\n\n#\n\n#    write_qt5_conf\n\n#    resolve_qt5_paths\n\n#    fixup_qt5_executable\n\n#    install_qt5_plugin_path\n\n#    install_qt5_plugin\n\n#    install_qt5_executable\n\n#\n\n# Requires CMake 2.8.9 or greater because Qt 5 does.\n\n# Also depends on BundleUtilities.cmake.\n\n#\n\n# ::\n\n#\n\n#   WRITE_QT5_CONF(<qt_conf_dir> <qt_conf_contents>)\n\n#\n\n# Writes a qt.conf file with the <qt_conf_contents> into <qt_conf_dir>.\n\n#\n\n# ::\n\n#\n\n#   RESOLVE_QT5_PATHS(<paths_var> [<executable_path>])\n\n#\n\n# Loop through <paths_var> list and if any don't exist resolve them\n\n# relative to the <executable_path> (if supplied) or the\n\n# CMAKE_INSTALL_PREFIX.\n\n#\n\n# ::\n\n#\n\n#   FIXUP_QT5_EXECUTABLE(<executable> [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf>])\n\n#\n\n# Copies Qt plugins, writes a Qt configuration file (if needed) and\n\n# fixes up a Qt5 executable using BundleUtilities so it is standalone\n\n# and can be drag-and-drop copied to another machine as long as all of\n\n# the system libraries are compatible.\n\n#\n\n# <executable> should point to the executable to be fixed-up.\n\n#\n\n# <qtplugins> should contain a list of the names or paths of any Qt\n\n# plugins to be installed.\n\n#\n\n# <libs> will be passed to BundleUtilities and should be a list of any\n\n# already installed plugins, libraries or executables to also be\n\n# fixed-up.\n\n#\n\n# <dirs> will be passed to BundleUtilities and should contain and\n\n# directories to be searched to find library dependencies.\n\n#\n\n# <plugins_dir> allows an custom plugins directory to be used.\n\n#\n\n# <request_qt_conf> will force a qt.conf file to be written even if not\n\n# needed.\n\n#\n\n# ::\n\n#\n\n#   INSTALL_QT5_PLUGIN_PATH(plugin executable copy installed_plugin_path_var <plugins_dir> <component> <configurations>)\n\n#\n\n# Install (or copy) a resolved <plugin> to the default plugins directory\n\n# (or <plugins_dir>) relative to <executable> and store the result in\n\n# <installed_plugin_path_var>.\n\n#\n\n# If <copy> is set to TRUE then the plugins will be copied rather than\n\n# installed.  This is to allow this module to be used at CMake time\n\n# rather than install time.\n\n#\n\n# If <component> is set then anything installed will use this COMPONENT.\n\n#\n\n# ::\n\n#\n\n#   INSTALL_QT5_PLUGIN(plugin executable copy installed_plugin_path_var <plugins_dir> <component>)\n\n#\n\n# Install (or copy) an unresolved <plugin> to the default plugins\n\n# directory (or <plugins_dir>) relative to <executable> and store the\n\n# result in <installed_plugin_path_var>.  See documentation of\n\n# INSTALL_QT5_PLUGIN_PATH.\n\n#\n\n# ::\n\n#\n\n#   INSTALL_QT5_EXECUTABLE(<executable> [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf> <component>])\n\n#\n\n# Installs Qt plugins, writes a Qt configuration file (if needed) and\n\n# fixes up a Qt5 executable using BundleUtilities so it is standalone\n\n# and can be drag-and-drop copied to another machine as long as all of\n\n# the system libraries are compatible.  The executable will be fixed-up\n\n# at install time.  <component> is the COMPONENT used for bundle fixup\n\n# and plugin installation.  See documentation of FIXUP_QT5_BUNDLE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Mike McQuaid <mike@mikemcquaid.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The functions defined in this file depend on the fixup_bundle function\n\n# (and others) found in BundleUtilities.cmake\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/DetermineVersion.cmake" : {
      "ObjectId" : "b5a87206a33f6a372353a6dde3fa7f88b4069792",
      "LastModified" : "2013-03-28T18:14:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Used to determine the version for OpenChemistry source using \"git describe\", if git\n\n# is found. On success sets following variables in caller's scope:\n\n#   ${var_prefix}_VERSION\n\n#   ${var_prefix}_VERSION_MAJOR\n\n#   ${var_prefix}_VERSION_MINOR\n\n#   ${var_prefix}_VERSION_PATCH\n\n#   ${var_prefix}_VERSION_PATCH_EXTRA\n\n#   ${var_prefix}_VERSION_IS_RELEASE is patch-extra is empty.\n\n#\n\n# If git is not found, or git describe cannot be run successfully, then these\n\n# variables are left unchanged and status message is printed.\n\n#\n\n# Arguments are:\n\n#   source_dir : Source directory\n\n#   git_command : git executable\n\n#   var_prefix : prefix for variables e.g. \"AvogadroApp\".\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindZeroMQ.cmake" : {
      "ObjectId" : "305f6f4bf8494985230bf5509ee20cd95bd3517e",
      "LastModified" : "2013-03-28T18:14:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ZeroMQ headers and libraries\n\n# - THANKS CUBIT FOR THIS FIND MODULE\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(ZeroMQ)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  ZeroMQ_ROOT_DIR  Set this variable to the root installation of\n\n#                            ZeroMQ if the module has problems finding\n\n#                            the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  ZEROMQ_FOUND              System has ZeroMQ libs/headers\n\n#  ZeroMQ_LIBRARIES          The ZeroMQ libraries\n\n#  ZeroMQ_INCLUDE_DIR        The location of ZeroMQ headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/InstallLocation.cmake" : {
      "ObjectId" : "ca9e375a49bd12273352af83bec184bcec9f96f1",
      "LastModified" : "2013-07-03T19:28:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some default installation locations. These should be global, with any project\n\n# specific locations added to the end. These paths are all relative to the\n\n# install prefix.\n\n#\n\n# These paths attempt to adhere to the FHS, and are similar to those provided\n\n# by autotools and used in many Linux distributions.\n\n#\n\n# Use GNU install directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up RPATH for the project too.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/MoleQueueCPack.cmake" : {
      "ObjectId" : "4c519fb2163acbe828b2eebcf3d7483949cedf66",
      "LastModified" : "2018-01-31T15:35:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/SilenceWarnings.cmake" : {
      "ObjectId" : "fca83e547a9a6811149a2d9c7ae566553f430d0a",
      "LastModified" : "2013-03-28T18:14:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file provides a macro to disable compiler warnings on source files.\n\n#\n\n# usage: silence_warnings(${source_files})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some specific MSVC warnings:\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Unknown pragma\n",
        "Line" : 18,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 3
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "78d5a99ed2badc2f34daf66740454ffc0ef7b50e",
      "LastModified" : "2013-04-10T00:46:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "molequeue/CMakeLists.txt" : {
      "ObjectId" : "4d2e50b843e3ca2a02954894141bf6a0baabe0f3",
      "LastModified" : "2013-07-03T19:28:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Are we using ZeroMQ\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Client library\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Keep \"add_subdirectory(lastinstall)\" last: fixup_bundle needs to be\n\n# *after* all other install(TARGETS and install(FILES calls\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "molequeue/app/CMakeLists.txt" : {
      "ObjectId" : "f857a8df309f10f347c049be5b3f66399033d046",
      "LastModified" : "2018-05-06T19:42:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Provide some simple API to find the plugins, scripts, etc.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# It is a special case, the app bundle logic breaks the relative pathing.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find a python 2.x interpreter.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# multi configuration build? Needed for plugin search path\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disable warnings for KDSoap generate file for most platforms\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# install the SSL certificates\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# copy to build tree so things will work when running from build tree\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Handle Mac OS X specific icons etc.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Config file for build options.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only run tests if building both client and app:\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "molequeue/app/testing/CMakeLists.txt" : {
      "ObjectId" : "f79a17a18ae0b3109c6cb4d6cf5aa43263fecffd",
      "LastModified" : "2018-04-17T12:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This test is currently only configured to run on unix\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "molequeue/app/testing/clienttestsrc/CMakeLists.txt" : {
      "ObjectId" : "7377e3c9ebf6a0923845d0535c2d88692400e27a",
      "LastModified" : "2018-04-17T12:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "molequeue/client/CMakeLists.txt" : {
      "ObjectId" : "c614aea77a35a5b2ee08f0e0c361514b37b69086",
      "LastModified" : "2018-04-17T12:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "molequeue/lastinstall/CMakeLists.txt" : {
      "ObjectId" : "1c632bef7067e7b833572c4131bdeccbadcbd6ef",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get_property(location TARGET ${plugin} PROPERTY LOCATION)\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "molequeue/plugins/CMakeLists.txt" : {
      "ObjectId" : "f3f3e80d64107dc82039175c9ac94ebfb54f3c02",
      "LastModified" : "2018-01-31T15:35:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do not generate manifests for the plugins - caused issues loading plugins\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "molequeue/plugins/localsocketserver/CMakeLists.txt" : {
      "ObjectId" : "80018c36363d15a16196d0d348e007d529940102",
      "LastModified" : "2018-04-17T12:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "molequeue/plugins/zeromqserver/CMakeLists.txt" : {
      "ObjectId" : "9d5b0adcb976379e487b423c473e53bdb279b396",
      "LastModified" : "2018-01-31T15:35:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "molequeue/servercore/CMakeLists.txt" : {
      "ObjectId" : "eee1bfd68280aeaa5d51dd1d6f9eec3d21cd8e47",
      "LastModified" : "2018-04-17T12:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(MoleQueueServerCore)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "molequeue/zeromq/CMakeLists.txt" : {
      "ObjectId" : "451c0ec05beb4b14cfe736c4fa4bb6cf6da0765d",
      "LastModified" : "2018-04-17T12:53:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "c1bf08c901a8cc19700b76434e28b08c7d9dbe57",
      "LastModified" : "2013-07-03T19:28:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 25
  },
  "ElapsedTime" : 1533
}