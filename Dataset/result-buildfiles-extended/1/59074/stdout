{
  "Repository" : "59074",
  "Revision" : "HEAD",
  "ObjectId" : "8880b55c9471528ee6abc9be7c282cccab9a866c",
  "CommitTime" : "2018-08-28T22:18:51Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "19c4b900b62ef84b3f17d9859fca511d8a492911",
      "LastModified" : "2014-07-30T20:15:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE that this CMake file doesn't current build all of avian.\n\n# It only builds what's required for example/kaleidoscope.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sadly, we can't use the 'test' target, as that's coopted by ctest\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "android.pro" : {
      "ObjectId" : "00941ff8740e7658aa45872a9fed77070d74d620",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# these are referenced in JniConstants.cpp:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# referenced from libcore native code\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# called from the VM\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# loaded reflectively to handle embedded resources:\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Platform.cmake" : {
      "ObjectId" : "20116488a77771b97f89e01ffe0315d20e04b361",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openjdk.pro" : {
      "ObjectId" : "8054c52812a0040a1a01c9b521306ff187de58c5",
      "LastModified" : "2017-05-22T18:58:09Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# proguard include file (http://proguard.sourceforge.net)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is for use in combination with vm.pro when ProGuarding\n\n# OpenJDK-based builds\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the following methods and fields are refered to by name in the VM:\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# these class names are used to disambiguate JNI method lookups:\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the following methods and fields are refered to by name in the OpenJDK\n\n# native code:\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# changed in native code via sun.misc.Unsafe (todo: handle other\n\n# Atomic* classes)\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# avoid inlining due to access check using a fixed offset into call stack:\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# accessed reflectively via an AtomicReferenceFieldUpdater:\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# avoid inlining due to access check using fixed offset into call stack:\n",
        "Line" : 196,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# called from jni_util.c:\n",
        "Line" : 198,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# refered to by name from native code:\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# avoid inlining due to access check using fixed offset into call stack:\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# called from jni_util.c:\n",
        "Line" : 229,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# Charsets are loaded via reflection.  If you need others besides\n\n# UTF-8, you'll need to add them (e.g. sun.nio.cs.ISO_8859_1).\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# loaded reflectively to handle embedded resources:\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# loaded reflectively by sun.misc.Launcher:\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# refered to symbolically in MethodAccessorGenerator:\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# referred to by name in LocaleData to load resources:\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# loaded via reflection from DefaultFileSystemProvider:\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# loaded via JNI in UnixNativeDispatcher.c:\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# These concurrent classes refer to certain members reflectively in their static initializers\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# These classes are accessed via bytecode generated on the fly.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Don't strip special enum members.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Needed to create temporary file paths, amongst other things.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Character set codecs\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Accessed from native code\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "c949643c0a7ad59316babbbc852069864d8fe66a",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/codegen/CMakeLists.txt" : {
      "ObjectId" : "001a8681d3d12e2402e906cb0151c7e168f2a5ca",
      "LastModified" : "2014-12-09T20:54:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/codegen/target/CMakeLists.txt" : {
      "ObjectId" : "55edb6b112e7806b79fda04461c8566e14ad6937",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/codegen/target/arm/CMakeLists.txt" : {
      "ObjectId" : "23faf6694faea611e96ed81463885f3db1d7e444",
      "LastModified" : "2014-12-30T22:56:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/codegen/target/x86/CMakeLists.txt" : {
      "ObjectId" : "eb5d5b1554f1db244460096b736a66bd291a44e0",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/heap/CMakeLists.txt" : {
      "ObjectId" : "5c6ae4177dc0ce25b2260828c54be4d4be35d6a1",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/system/CMakeLists.txt" : {
      "ObjectId" : "5c6f2a58faad5993fd30ec8eb69a3d75627bf60b",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#todo: support mingw compiler\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "9825129a2c63f7b0e13ec7f9c17979719a1d0847",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/binary-to-object/CMakeLists.txt" : {
      "ObjectId" : "1de4e5f9e4cd1f79a2b5bb8b13303210b9c42a3e",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/object-writer/CMakeLists.txt" : {
      "ObjectId" : "1437bf1d6759980bb48d62fd8115afcf9f5c6aa8",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/type-generator/CMakeLists.txt" : {
      "ObjectId" : "53bb7cabb14b090ad3fbb662696f64da5247cfe0",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "d4311a7b7f8567e4828a685059f6048908844ebd",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittest/CMakeLists.txt" : {
      "ObjectId" : "d810e3ffbacf3faedab793cf41305dfe4d7f842a",
      "LastModified" : "2014-08-07T16:44:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vm.pro" : {
      "ObjectId" : "6ead35b18b7cc08e89a769234c45fec635edea44",
      "LastModified" : "2017-05-22T18:58:09Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# proguard include file (http://proguard.sourceforge.net)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enums have methods and members that are called reflectively in both Avian and OpenJDK.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the VM depends on the fixed layout of the following classes:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the VM may throw instances of the following:\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ClassLoader.getSystemClassloader() depends on the existence of this class:\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the VM references these classes by name, so protect them from obfuscation:\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Don't optimize calls to ResourceBundle\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# musn't obfuscate native method names:\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Thread.run is called by name in the VM\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# when continuations are enabled, the VM may call these methods by name:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# the above methods include these classes in their signatures:\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Proguard gets confused about clone() and array classes (http://sourceforge.net/tracker/index.php?func=detail&aid=2851344&group_id=54750&atid=474704):\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# called by name in the VM:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "QMAKE" : 3
  },
  "ElapsedTime" : 2214
}