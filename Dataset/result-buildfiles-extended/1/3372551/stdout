{
  "Repository" : "3372551",
  "Revision" : "HEAD",
  "ObjectId" : "deb0397995aff5f622a4d0aee9c4b0e505c0b1f7",
  "CommitTime" : "2019-04-16T02:45:09Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "24b4fa00a4872b4c5d318600d49dbf233bfd86b4",
      "LastModified" : "2019-03-25T19:18:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Apple doesn't build with an install_name starting with @rpath, and\n\n# neither do we with autotools; don't do so with CMake, either, and\n\n# suppress warnings about that.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Squelch noise about quoted strings in if() statements.\n\n# WE KNOW WHAT WE'RE DOING, WE'RE DOING EVERYTHING THE WAY THAT NEWER\n\n# VERSIONS OF CMAKE EXPECT BY DEFAULT, DON'T WASTE OUR TIME WITH NOISE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Try to enable as many C99 features as we can.\n\n# At minimum, we want C++/C99-style // comments.\n\n#\n\n# Newer versions of compilers might default to supporting C99, but older\n\n# versions may require a special flag.\n\n#\n\n# Prior to CMake 3.1, setting CMAKE_C_STANDARD will not have any effect,\n\n# so, unless and until we require CMake 3.1 or later, we have to do it\n\n# ourselves on pre-3.1 CMake, so we just do it ourselves on all versions\n\n# of CMake.\n\n#\n\n# Note: with CMake 3.1 through 3.5, the only compilers for which CMake\n\n# handles CMAKE_C_STANDARD are GCC and Clang.  3.6 adds support only\n\n# for Intel C; 3.9 adds support for PGI C, Sun C, and IBM XL C, and\n\n# 3.10 adds support for Cray C and IAR C, but no version of CMake has\n\n# support for HP C.  Therefore, even if we use CMAKE_C_STANDARD with\n\n# compilers for which CMake supports it, we may still have to do it\n\n# ourselves on other compilers.\n\n#\n\n# See the CMake documentation for the CMAKE_<LANG>_COMPILER_ID variables\n\n# for a list of compiler IDs.\n\n#\n\n# We don't worry about MSVC; it doesn't have such a flag - either it\n\n# doesn't support the C99 features we need at all, or it supports them\n\n# regardless of the compiler flag.\n\n#\n\n# XXX - this just tests whether the option works and adds it if it does.\n\n# We don't test whether it's necessary in order to get the C99 features\n\n# that we use; if we ever have a user who tries to compile with a compiler\n\n# that can't be made to support those features, we can add a test to make\n\n# sure we actually *have* C99 support.\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# We want support for extensions picked up for GNU C compatibility,\n\n# so we use -qlanglvl=extc99.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# Build all runtimes in the top-level binary directory; that way,\n\n# on Windows, the executables will be in the same directory as\n\n# the DLLs, so the system will find pcap.dll when any of the\n\n# executables are run.\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################################################################\n\n#   Parameters\n\n###################################################################\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# On Windows, allow the library name to be overridden, for the\n\n# benefit of projects that combine libpcap with their own\n\n# kernel-mode code to support capturing.\n\n#\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#\n\n# On UN*X, it's always been libpcap.\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# To pacify those who hate the protochain instruction\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Start out with the capture mechanism type unspecified; the user\n\n# can explicitly specify it and, if they don't, we'll pick an\n\n# appropriate one.\n\n#\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Default to having remote capture support on Windows and, for now, to\n\n# not having it on UN*X.\n\n#\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Additional capture modules.\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# We don't support D-Bus sniffing on macOS; see\n\n#\n\n# https://bugs.freedesktop.org/show_bug.cgi?id=74029\n\n#\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# Debugging options.\n\n#\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "###################################################################\n\n#   Versioning\n\n###################################################################\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get, parse, format and set pcap's version string from [pcap_root]/VERSION\n\n# for later use.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Get MAJOR, MINOR, PATCH & SUFFIX\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Read only the first line\n",
        "Line" : 190,
        "CharPositionInLine" : 18
      },
      "18" : {
        "Text" : "# Get \"just\" MAJOR\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Get MAJOR, MINOR & PATCH\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Convert PCAP_VERSION_NOSUFFIX to Windows preferred version format\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Append NANO (used for Windows internal versioning) to PCAP_VERSION_PREDLL\n\n# 0 means unused.\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "######################################\n\n# Project settings\n\n######################################\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# Check whether we have the NPcap PacketIsLoopbackAdapter()\n\n# function.\n\n#\n",
        "Line" : 235,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "###################################################################\n\n#   Detect available platform features\n\n###################################################################\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# Tests are a bit expensive with Visual Studio on Windows, so, on\n\n# Windows, we skip tests for UN*X-only headers and functions.\n\n#\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# Header files.\n\n#\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\n\n# Check for various PF actions.\n\n#\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "#\n\n# linux/if_bonding.h requires sys/socket.h.\n\n#\n",
        "Line" : 321,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "#\n\n# Check for the eventfd header.\n\n#\n",
        "Line" : 326,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "#\n\n# Functions.\n\n#\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\n\n# We have strerror_r; if we define _GNU_SOURCE, is it a\n\n# POSIX-compliant strerror_r() or a GNU strerror_r()?\n\n#\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#\n\n# We don't have strerror_r; do we have strerror_s?\n\n#\n",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "#\n\n# These tests are for network applications that need socket functions\n\n# and getaddrinfo()/getnameinfo()-ish functions.  We now require\n\n# getaddrinfo() and getnameinfo().  On UN*X systems, we also prefer\n\n# versions of recvmsg() that conform to the Single UNIX Specification,\n\n# so that we can check whether a datagram received with recvmsg() was\n\n# truncated when received due to the buffer being too small.\n\n#\n\n# On Windows, getaddrinfo() is in the ws2_32 library.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# On most UN*X systems, they're available in the system library.\n\n#\n\n# Under Solaris, we need to link with libsocket and libnsl to get\n\n# getaddrinfo() and getnameinfo() and, if we have libxnet, we need to\n\n# link with libxnet before libsocket to get a version of recvmsg()\n\n# that conforms to the Single UNIX Specification.\n\n#\n\n# We use getaddrinfo() because we want a portable thread-safe way\n\n# of getting information for a host name or port; there exist _r\n\n# versions of gethostbyname() and getservbyname() on some platforms,\n\n# but not on all platforms.\n\n#\n\n# NOTE: if you hand check_library_exists as its last argument a variable\n\n# that's been set, it skips the test, so we need different variables.\n\n#\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\n\n# We need winsock2.h and ws2tcpip.h.\n\n#\n",
        "Line" : 406,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#\n\n# UN*X.  First try the system libraries, then try the libraries\n\n# for Solaris and possibly other systems that picked up the\n\n# System V library split.\n\n#\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "#\n\n# Not found in the standard system libraries.\n\n# Try libsocket, which requires libnsl.\n\n#\n",
        "Line" : 426,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "#\n\n# OK, we found it in libsocket.\n\n#\n",
        "Line" : 435,
        "CharPositionInLine" : 12
      },
      "39" : {
        "Text" : "#\n\n# OK, we found it in libnetwork (Haiku).\n\n#\n",
        "Line" : 442,
        "CharPositionInLine" : 16
      },
      "40" : {
        "Text" : "#\n\n# We didn't find it.\n\n#\n",
        "Line" : 447,
        "CharPositionInLine" : 16
      },
      "41" : {
        "Text" : "#\n\n# OK, do we have recvmsg() in libxnet?\n\n# We also link with libsocket and libnsl.\n\n#\n",
        "Line" : 454,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "#\n\n# Yes - link with it as well.\n\n#\n",
        "Line" : 463,
        "CharPositionInLine" : 12
      },
      "43" : {
        "Text" : "# DLPI needs putmsg under HPUX so test for -lstr while we're at it\n",
        "Line" : 470,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#\n\n# Check for reentrant versions of getnetbyname_r(), as provided by\n\n# Linux (glibc), Solaris/IRIX, and AIX (with three different APIs!).\n\n# If we don't find one, we just use getnetbyname(), which uses\n\n# thread-specific data on many platforms, but doesn't use it on\n\n# NetBSD or OpenBSD, and may not use it on older versions of other\n\n# platforms.\n\n#\n\n# Only do the check if we have a declaration of getnetbyname_r();\n\n# without it, we can't check which API it has.  (We assume that\n\n# if there's a declaration, it has a prototype, so that the API\n\n# can be checked.)\n\n#\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n\n# Check for reentrant versions of getprotobyname_r(), as provided by\n\n# Linux (glibc), Solaris/IRIX, and AIX (with three different APIs!).\n\n# If we don't find one, we just use getprotobyname(), which uses\n\n# thread-specific data on many platforms, but doesn't use it on\n\n# NetBSD or OpenBSD, and may not use it on older versions of other\n\n# platforms.\n\n#\n\n# Only do the check if we have a declaration of getprotobyname_r();\n\n# without it, we can't check which API it has.  (We assume that\n\n# if there's a declaration, it has a prototype, so that the API\n\n# can be checked.)\n\n#\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#\n\n# Data types.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#\n\n# Structure fields.\n\n#\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#\n\n# Do we have ffs(), and is it declared in <strings.h>?\n\n#\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#\n\n# OK, we have ffs().  Is it declared in <strings.h>?\n\n#\n\n# This test fails if we don't have <strings.h> or if we do\n\n# but it doesn't declare ffs().\n\n#\n",
        "Line" : 640,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "#\n\n# This requires the libraries that we require, as ether_hostton might be\n\n# in one of those libraries.  That means we have to do this after\n\n# we check for those libraries.\n\n#\n\n# You are in a twisty little maze of UN*Xes, all different.\n\n# Some might not have ether_hostton().\n\n# Some might have it and declare it in <net/ethernet.h>.\n\n# Some might have it and declare it in <netinet/ether.h>\n\n# Some might have it and declare it in <sys/ethernet.h>.\n\n# Some might have it and declare it in <arpa/inet.h>.\n\n# Some might have it and declare it in <netinet/if_ether.h>.\n\n# Some might have it and not declare it in any header file.\n\n#\n\n# Before you is a C compiler.\n\n#\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#\n\n# OK, we have ether_hostton().  Is it declared in <net/ethernet.h>?\n\n#\n\n# This test fails if we don't have <net/ethernet.h> or if we do\n\n# but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 669,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 677,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 682,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "#\n\n# No - how about <netinet/ether.h>, as on Linux?\n\n#\n\n# This test fails if we don't have <netinet/ether.h>\n\n# or if we do but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 686,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 694,
        "CharPositionInLine" : 12
      },
      "56" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 700,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "#\n\n# No - how about <sys/ethernet.h>, as on Solaris 10 and later?\n\n#\n\n# This test fails if we don't have <sys/ethernet.h>\n\n# or if we do but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 704,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 712,
        "CharPositionInLine" : 12
      },
      "59" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 718,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "#\n\n# No, how about <arpa/inet.h>, as on AIX?\n\n#\n\n# This test fails if we don't have <arpa/inet.h>\n\n# or if we do but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 722,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 730,
        "CharPositionInLine" : 12
      },
      "62" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 736,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "#\n\n# No, how about <netinet/if_ether.h>?\n\n# On some platforms, it requires <net/if.h> and\n\n# <netinet/in.h>, and we always include it with\n\n# both of them, so test it with both of them.\n\n#\n\n# This test fails if we don't have <netinet/if_ether.h>\n\n# and the headers we include before it, or if we do but\n\n# <netinet/if_ether.h> doesn't declare ether_hostton().\n\n#\n",
        "Line" : 740,
        "CharPositionInLine" : 8
      },
      "64" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 752,
        "CharPositionInLine" : 12
      },
      "65" : {
        "Text" : "#\n\n# After all that, is ether_hostton() declared?\n\n#\n",
        "Line" : 758,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "#\n\n# No, we'll have to declare it ourselves.\n\n# Do we have \"struct ether_addr\" if we include <netinet/if_ether.h>?\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 762,
        "CharPositionInLine" : 8
      },
      "67" : {
        "Text" : "#\n\n# Large file support on UN*X, a/k/a LFS.\n\n#\n",
        "Line" : 778,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#\n\n# Add the required #defines.\n\n#\n",
        "Line" : 784,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "#\n\n# Check for fseeko as well.\n\n#\n",
        "Line" : 790,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "#\n\n# Add the required #defines.\n\n#\n",
        "Line" : 797,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "#\n\n# Pthreads.\n\n# We might need them, because some libraries we use might use them,\n\n# but we don't necessarily need them.\n\n# That's only on UN*X; on Windows, if they use threads, we assume\n\n# they're native Windows threads.\n\n#\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#\n\n# If it's not pthreads, we won't use it; we use it for libraries\n\n# that require it.\n\n#\n",
        "Line" : 819,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "#\n\n# Based on\n\n#\n\n#    https://github.com/commonmark/cmark/blob/master/FindAsan.cmake\n\n#\n\n# The MIT License (MIT)\n\n#\n\n# Copyright (c) 2013 Matthew Arsenault\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n\n#\n\n# Test if the each of the sanitizers in the ENABLE_SANITIZERS list are\n\n# supported by the compiler, and, if so, adds the appropriate flags to\n\n# CMAKE_C_FLAGS, CMAKE_CXX_FLAGS, and SANITIZER_FLAGS.  If not, it fails.\n\n#\n\n# Do this last, in the hope that it will prevent configuration on Linux\n\n# from somehow deciding it doesn't need -lpthread when building rpcapd\n\n# (it does require it, but somehow, in some mysterious fashion that no\n\n# obvious CMake debugging flag reveals, it doesn't realize that if we\n\n# turn sanitizer stuff on).\n\n#\n",
        "Line" : 827,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Set -Werror to catch \"argument unused during compilation\" warnings\n",
        "Line" : 866,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "#\n\n# Try the versions supported prior to Clang 3.2.\n\n# If the sanitizer is \"address\", try -fsanitize-address.\n\n# If it's \"undefined\", try -fcatch-undefined-behavior.\n\n# Otherwise, give up.\n\n#\n",
        "Line" : 876,
        "CharPositionInLine" : 8
      },
      "76" : {
        "Text" : "#\n\n# OpenSSL/libressl.\n\n#\n",
        "Line" : 914,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#\n\n# We have OpenSSL.\n\n#\n",
        "Line" : 919,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "######################################\n\n# Input files\n\n######################################\n",
        "Line" : 927,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "#\n\n# For now, we assume we don't have snprintf() or that it's not one\n\n# that behaves enough like C99's snprintf() for our purposes (i.e.,\n\n# it doesn't null-terminate the string if it truncates it to fit in\n\n# the buffer), so we have to provide our own (a wrapper around\n\n# _snprintf() that null-terminates the buffer).\n\n#\n\n# We also assume we don't have asprintf(), and provide an implementation\n\n# that uses _vscprintf() to determine how big the string needs to be.\n\n#\n",
        "Line" : 948,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "#\n\n# Either:\n\n#\n\n#\twe have snprintf() and vsnprintf(), and have asprintf() and\n\n#\tvasprintf();\n\n#\n\n#\twe have snprintf() and vsnprintf(), but don't have asprintf()\n\n#\tor vasprintf();\n\n#\n\n#\twe have neither snprintf() nor vsnprintf(), and don't have\n\n#\tasprintf() or vasprintf(), either.\n\n#\n\n# We assume that if we have asprintf() we have vasprintf(), as well\n\n# as snprintf() and vsnprintf(), and that if we have snprintf() we\n\n# have vsnprintf().\n\n#\n\n# For the first case, we don't need any replacement routines.\n\n# For the second case, we need replacement asprintf()/vasprintf()\n\n# routines.\n\n# For the third case, we need replacement snprintf()/vsnprintf() and\n\n# asprintf()/vasprintf() routines.\n\n#\n",
        "Line" : 961,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "#\n\n# We assume we have none of them; missing/snprintf.c supplies\n\n# all of them.\n\n#\n",
        "Line" : 984,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "#\n\n# We assume we have snprintf()/vsnprintf() but lack\n\n# asprintf()/vasprintf(); missing/asprintf.c supplies\n\n# the latter (using vsnprintf()).\n\n#\n",
        "Line" : 990,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "#\n\n# Determine the main pcap-XXX.c file to use, and the libraries with\n\n# which we need to link libpcap, if any.\n\n#\n",
        "Line" : 1008,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#\n\n# Windows.\n\n#\n\n# Has the user explicitly specified a capture type?\n\n#\n",
        "Line" : 1013,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "#\n\n# The user didn't explicitly specify a capture mechanism.\n\n# Check whether we have packet.dll.\n\n#\n",
        "Line" : 1019,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "#\n\n# We have packet.dll.\n\n# Set the capture type to NPF.\n\n#\n",
        "Line" : 1024,
        "CharPositionInLine" : 12
      },
      "87" : {
        "Text" : "#\n\n# We don't have any capture type we know about, so just use\n\n# the null capture type, and only support reading (and writing)\n\n# capture files.\n\n#\n",
        "Line" : 1030,
        "CharPositionInLine" : 12
      },
      "88" : {
        "Text" : "#\n\n# UN*X.\n\n#\n\n# Figure out what type of packet capture mechanism we have, and\n\n# what libraries we'd need to link libpcap with, if any.\n\n#\n",
        "Line" : 1039,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "#\n\n# Has the user explicitly specified a capture type?\n\n#\n",
        "Line" : 1046,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "#\n\n# Check for a bunch of headers for various packet capture mechanisms.\n\n#\n",
        "Line" : 1050,
        "CharPositionInLine" : 8
      },
      "91" : {
        "Text" : "#\n\n# Does it define BIOCSETIF?\n\n# I.e., is it a header for an LBL/BSD-style capture\n\n# mechanism, or is it just a header for a BPF filter\n\n# engine?  Some versions of Arch Linux, for example,\n\n# have a net/bpf.h that doesn't define BIOCSETIF;\n\n# as it's a Linux, it should use packet sockets,\n\n# instead.\n\n#\n\n# We need:\n\n#\n\n#  sys/types.h, because FreeBSD 10's net/bpf.h\n\n#  requires that various BSD-style integer types\n\n#  be defined;\n\n#\n\n#  sys/time.h, because AIX 5.2 and 5.3's net/bpf.h\n\n#  doesn't include it but does use struct timeval\n\n#  in ioctl definitions;\n\n#\n\n#  sys/ioctl.h and, if we have it, sys/ioccom.h,\n\n#  because net/bpf.h defines ioctls;\n\n#\n\n#  net/if.h, because it defines some structures\n\n#  used in ioctls defined by net/bpf.h;\n\n#\n\n#  sys/socket.h, because OpenBSD 5.9's net/bpf.h\n\n#  defines some structure fields as being\n\n#  struct sockaddrs;\n\n#\n\n# and net/bpf.h doesn't necessarily include all\n\n# of those headers itself.\n\n#\n",
        "Line" : 1055,
        "CharPositionInLine" : 12
      },
      "92" : {
        "Text" : "#\n\n# BPF.\n\n# Check this before DLPI, so that we pick BPF on\n\n# Solaris 11 and later.\n\n#\n",
        "Line" : 1103,
        "CharPositionInLine" : 12
      },
      "93" : {
        "Text" : "#\n\n# No prizes for guessing this one.\n\n#\n",
        "Line" : 1110,
        "CharPositionInLine" : 12
      },
      "94" : {
        "Text" : "#\n\n# DEC OSF/1, Digital UNIX, Tru64 UNIX\n\n#\n",
        "Line" : 1115,
        "CharPositionInLine" : 12
      },
      "95" : {
        "Text" : "#\n\n# Stanford Enetfilter.\n\n#\n",
        "Line" : 1120,
        "CharPositionInLine" : 12
      },
      "96" : {
        "Text" : "#\n\n# SunOS 4.x STREAMS NIT.\n\n#\n",
        "Line" : 1125,
        "CharPositionInLine" : 12
      },
      "97" : {
        "Text" : "#\n\n# Pre-SunOS 4.x non-STREAMS NIT.\n\n#\n",
        "Line" : 1130,
        "CharPositionInLine" : 12
      },
      "98" : {
        "Text" : "#\n\n# IRIX snoop.\n\n#\n",
        "Line" : 1135,
        "CharPositionInLine" : 12
      },
      "99" : {
        "Text" : "#\n\n# DLPI on pre-Solaris 11 SunOS 5, HP-UX, possibly others.\n\n#\n",
        "Line" : 1140,
        "CharPositionInLine" : 12
      },
      "100" : {
        "Text" : "#\n\n# Haiku.\n\n#\n",
        "Line" : 1145,
        "CharPositionInLine" : 12
      },
      "101" : {
        "Text" : "#\n\n# Nothing we support.\n\n#\n",
        "Line" : 1150,
        "CharPositionInLine" : 12
      },
      "102" : {
        "Text" : "#\n\n# Do capture-mechanism-dependent tests.\n\n#\n",
        "Line" : 1159,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "#\n\n# Link with packet.dll before WinSock2.\n\n#\n",
        "Line" : 1164,
        "CharPositionInLine" : 8
      },
      "104" : {
        "Text" : "#\n\n# Needed for common functions used by pcap-[dlpi,libdlpi].c\n\n#\n",
        "Line" : 1174,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "#\n\n# Checks for some header files.\n\n#\n",
        "Line" : 1179,
        "CharPositionInLine" : 8
      },
      "106" : {
        "Text" : "#\n\n# Checks to see if Solaris has the public libdlpi(3LIB) library.\n\n# Note: The existence of /usr/include/libdlpi.h does not mean it is the\n\n# public libdlpi(3LIB) version. Before libdlpi was made public, a\n\n# private version also existed, which did not have the same APIs.\n\n# Due to a gcc bug, the default search path for 32-bit libraries does\n\n# not include /lib, we add it explicitly here.\n\n# [http://bugs.opensolaris.org/view_bug.do?bug_id=6619485].\n\n# Also, due to the bug above applications that link to libpcap with\n\n# libdlpi will have to add \"-L/lib\" option to \"configure\".\n\n#\n",
        "Line" : 1185,
        "CharPositionInLine" : 8
      },
      "107" : {
        "Text" : "#\n\n# XXX - add -L/lib\n\n#\n",
        "Line" : 1202,
        "CharPositionInLine" : 12
      },
      "108" : {
        "Text" : "#\n\n# This check is for Solaris with DLPI support for passive modes.\n\n# See dlpi(7P) for more details.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 1209,
        "CharPositionInLine" : 8
      },
      "109" : {
        "Text" : "#\n\n# Do we have the wireless extensions?\n\n# linux/wireless.h requires sys/socket.h.\n\n#\n",
        "Line" : 1222,
        "CharPositionInLine" : 8
      },
      "110" : {
        "Text" : "#\n\n# Do we have libnl?\n\n#\n",
        "Line" : 1228,
        "CharPositionInLine" : 8
      },
      "111" : {
        "Text" : "#\n\n# Try libnl 3.x first.\n\n#\n",
        "Line" : 1232,
        "CharPositionInLine" : 12
      },
      "112" : {
        "Text" : "#\n\n# Yes, we have libnl 3.x.\n\n#\n",
        "Line" : 1240,
        "CharPositionInLine" : 16
      },
      "113" : {
        "Text" : "#\n\n# Try libnl 2.x.\n\n#\n",
        "Line" : 1249,
        "CharPositionInLine" : 16
      },
      "114" : {
        "Text" : "#\n\n# Yes, we have libnl 2.x.\n\n#\n",
        "Line" : 1257,
        "CharPositionInLine" : 20
      },
      "115" : {
        "Text" : "#\n\n# No, we don't; do we have libnl 1.x?\n\n#\n",
        "Line" : 1265,
        "CharPositionInLine" : 20
      },
      "116" : {
        "Text" : "#\n\n# Checks to see if tpacket_stats is defined in linux/if_packet.h\n\n# If so then pcap-linux.c can use this to report proper statistics.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 1281,
        "CharPositionInLine" : 8
      },
      "117" : {
        "Text" : "#\n\n# Check whether we have the *BSD-style ioctls.\n\n#\n",
        "Line" : 1296,
        "CharPositionInLine" : 8
      },
      "118" : {
        "Text" : "#\n\n# Check whether we have struct BPF_TIMEVAL.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 1301,
        "CharPositionInLine" : 8
      },
      "119" : {
        "Text" : "#\n\n# Check for some headers just in case.\n\n#\n",
        "Line" : 1318,
        "CharPositionInLine" : 8
      },
      "120" : {
        "Text" : "#\n\n# Now figure out how we get a list of interfaces and addresses,\n\n# if we support capturing.  Don't bother if we don't support\n\n# capturing.\n\n#\n",
        "Line" : 1335,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "#\n\n# UN*X - figure out what type of interface list mechanism we\n\n# have.\n\n#\n\n# If the capture type is null, that means we can't capture,\n\n# so we can't open any capture devices, so we won't return\n\n# any interfaces.\n\n#\n",
        "Line" : 1341,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "#\n\n# It's not in the libraries that, at this point, we've\n\n# found we need to link libpcap with.\n\n#\n\n# It's in libsocket on Solaris and possibly other OSes;\n\n# as long as we're not linking with libxnet, check there.\n\n#\n\n# NOTE: if you hand check_library_exists as its last\n\n# argument a variable that's been set, it skips the test,\n\n# so we need different variables.\n\n#\n",
        "Line" : 1355,
        "CharPositionInLine" : 12
      },
      "123" : {
        "Text" : "#\n\n# We have \"getifaddrs()\"; make sure we have <ifaddrs.h>\n\n# as well, just in case some platform is really weird.\n\n# It may require that sys/types.h be included first,\n\n# so include it first.\n\n#\n",
        "Line" : 1375,
        "CharPositionInLine" : 12
      },
      "124" : {
        "Text" : "#\n\n# We have the header, so we use \"getifaddrs()\" to\n\n# get the list of interfaces.\n\n#\n",
        "Line" : 1383,
        "CharPositionInLine" : 16
      },
      "125" : {
        "Text" : "#\n\n# We don't have the header - give up.\n\n# XXX - we could also fall back on some other\n\n# mechanism, but, for now, this'll catch this\n\n# problem so that we can at least try to figure\n\n# out something to do on systems with \"getifaddrs()\"\n\n# but without \"ifaddrs.h\", if there is something\n\n# we can do on those systems.\n\n#\n",
        "Line" : 1389,
        "CharPositionInLine" : 16
      },
      "126" : {
        "Text" : "#\n\n# Well, we don't have \"getifaddrs()\", at least not with the\n\n# libraries with which we've decided we need to link\n\n# libpcap with, so we have to use some other mechanism.\n\n#\n\n# Note that this may happen on Solaris, which has\n\n# getifaddrs(), but in -lsocket, not in -lxnet, so we\n\n# won't find it if we link with -lxnet, which we want\n\n# to do for other reasons.\n\n#\n\n# For now, we use either the SIOCGIFCONF ioctl or the\n\n# SIOCGLIFCONF ioctl, preferring the latter if we have\n\n# it; the latter is a Solarisism that first appeared\n\n# in Solaris 8.  (Solaris's getifaddrs() appears to\n\n# be built atop SIOCGLIFCONF; using it directly\n\n# avoids a not-all-that-useful middleman.)\n\n#\n",
        "Line" : 1401,
        "CharPositionInLine" : 12
      },
      "127" : {
        "Text" : "# Check for hardware timestamp support.\n",
        "Line" : 1430,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "#\n\n# Check for additional native sniffing capabilities.\n\n#\n",
        "Line" : 1435,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# Check for USB sniffing support on Linux.\n\n# On FreeBSD, it uses BPF, so we don't need to do anything special here.\n",
        "Line" : 1439,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "#\n\n# Do we have a version of <linux/compiler.h> available?\n\n# If so, we might need it for <linux/usbdevice_fs.h>.\n\n#\n",
        "Line" : 1446,
        "CharPositionInLine" : 8
      },
      "131" : {
        "Text" : "#\n\n# Yes - include it when testing for <linux/usbdevice_fs.h>.\n\n#\n",
        "Line" : 1452,
        "CharPositionInLine" : 12
      },
      "132" : {
        "Text" : "#\n\n# OK, does it define bRequestType?  Older versions of the kernel\n\n# define fields with names like \"requesttype, \"request\", and\n\n# \"value\", rather than \"bRequestType\", \"bRequest\", and\n\n# \"wValue\".\n\n#\n",
        "Line" : 1460,
        "CharPositionInLine" : 12
      },
      "133" : {
        "Text" : "# Check for netfilter sniffing support.\n",
        "Line" : 1475,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "#\n\n# Life's too short to deal with trying to get this to compile\n\n# if you don't get the right types defined with\n\n# __KERNEL_STRICT_NAMES getting defined by some other include.\n\n#\n\n# Check whether the includes Just Work.  If not, don't turn on\n\n# netfilter support.\n\n#\n",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# Check for netmap sniffing support.\n",
        "Line" : 1508,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "#\n\n# Check whether net/netmap_user.h is usable if NETMAP_WITH_LIBS is\n\n# defined; it's not usable on DragonFly BSD 4.6 if NETMAP_WITH_LIBS\n\n# is defined, for example, as it includes a non-existent malloc.h\n\n# header.\n\n#\n",
        "Line" : 1510,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# Check for DPDK sniffing support\n",
        "Line" : 1532,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "#\n\n# We include rte_bus.h, and older versions of DPDK didn't have\n\n# it, so check for it.\n\n#\n",
        "Line" : 1536,
        "CharPositionInLine" : 8
      },
      "139" : {
        "Text" : "# Check for Bluetooth sniffing support\n",
        "Line" : 1557,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "#\n\n# OK, does struct sockaddr_hci have an hci_channel\n\n# member?\n\n#\n",
        "Line" : 1564,
        "CharPositionInLine" : 12
      },
      "141" : {
        "Text" : "#\n\n# OK, is HCI_CHANNEL_MONITOR defined?\n\n#\n",
        "Line" : 1570,
        "CharPositionInLine" : 16
      },
      "142" : {
        "Text" : "#\n\n# Yes, so we can also support Bluetooth monitor\n\n# sniffing.\n\n#\n",
        "Line" : 1586,
        "CharPositionInLine" : 19
      },
      "143" : {
        "Text" : "# Check for Bluetooth sniffing support\n",
        "Line" : 1597,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "#\n\n# We don't support D-Bus sniffing on macOS; see\n\n#\n\n# https://bugs.freedesktop.org/show_bug.cgi?id=74029\n\n#\n",
        "Line" : 1599,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "#\n\n# This \"helpfully\" supplies DBUS_LIBRARIES as a bunch of\n\n# library names - not paths - and DBUS_LIBRARY_DIRS as\n\n# a bunch of directories.\n\n#\n\n# CMake *really* doesn't like the notion of specifying \"here are\n\n# the directories in which to look for libraries\" except in\n\n# find_library() calls; it *really* prefers using full paths to\n\n# library files, rather than library names.\n\n#\n\n# Find the libraries and add their full paths.\n\n#\n",
        "Line" : 1613,
        "CharPositionInLine" : 8
      },
      "146" : {
        "Text" : "#\n\n# Try to find this library, so we get its full path.\n\n#\n",
        "Line" : 1627,
        "CharPositionInLine" : 12
      },
      "147" : {
        "Text" : "# Check for RDMA sniffing support\n",
        "Line" : 1637,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "#\n\n# Check for sniffing capabilities using third-party APIs.\n\n#\n",
        "Line" : 1652,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "# Check for Endace DAG card support.\n",
        "Line" : 1656,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "#\n\n# Try to find the DAG header file and library.\n\n#\n",
        "Line" : 1658,
        "CharPositionInLine" : 4
      },
      "151" : {
        "Text" : "#\n\n# Did we succeed?\n\n#\n",
        "Line" : 1663,
        "CharPositionInLine" : 4
      },
      "152" : {
        "Text" : "#\n\n# Yes.\n\n# Check for various DAG API functions.\n\n#\n",
        "Line" : 1667,
        "CharPositionInLine" : 8
      },
      "153" : {
        "Text" : "# Check for Septel card support.\n",
        "Line" : 1698,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "#\n\n# Do we have the msg.h header?\n\n#\n",
        "Line" : 1701,
        "CharPositionInLine" : 4
      },
      "155" : {
        "Text" : "#\n\n# Yes.\n\n#\n",
        "Line" : 1710,
        "CharPositionInLine" : 8
      },
      "156" : {
        "Text" : "# Check for Myricom SNF support.\n",
        "Line" : 1720,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "#\n\n# Try to find the SNF header file and library.\n\n#\n",
        "Line" : 1722,
        "CharPositionInLine" : 4
      },
      "158" : {
        "Text" : "#\n\n# Did we succeed?\n\n#\n",
        "Line" : 1727,
        "CharPositionInLine" : 4
      },
      "159" : {
        "Text" : "#\n\n# Yes.\n\n#\n",
        "Line" : 1731,
        "CharPositionInLine" : 8
      },
      "160" : {
        "Text" : "# Check for Riverbed TurboCap support.\n",
        "Line" : 1741,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "#\n\n# Try to find the TurboCap header file and library.\n\n#\n",
        "Line" : 1743,
        "CharPositionInLine" : 4
      },
      "162" : {
        "Text" : "#\n\n# Did we succeed?\n\n#\n",
        "Line" : 1748,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "#\n\n# Yes.\n\n#\n",
        "Line" : 1752,
        "CharPositionInLine" : 8
      },
      "164" : {
        "Text" : "#\n\n# Remote capture support.\n\n#\n",
        "Line" : 1762,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "#\n\n# Check for various members of struct msghdr.\n\n# We need to include ftmacros.h on some platforms, to make sure we\n\n# get the POSIX/Single USER Specification version of struct msghdr,\n\n# which has those members, rather than the backwards-compatible\n\n# version, which doesn't.  That's not a system header file, and\n\n# at least some versions of CMake include it as <ftmacros.h>, which\n\n# won't check the current directory, so we add the top-level\n\n# source directory to the list of include directories when we do\n\n# the check.\n\n#\n",
        "Line" : 1767,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "###################################################################\n\n#   Warning options\n\n###################################################################\n",
        "Line" : 1787,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "#\n\n# Check and add warning options if we have a .devel file.\n\n#\n",
        "Line" : 1791,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "#\n\n# Warning options.\n\n#\n",
        "Line" : 1795,
        "CharPositionInLine" : 4
      },
      "169" : {
        "Text" : "#\n\n# MSVC, with Microsoft's front end and code generator.\n\n# \"MSVC\" is also set for Microsoft's compiler with a Clang\n\n# front end and their code generator (\"Clang/C2\"), so we\n\n# check for clang.exe and treat that differently.\n\n#\n",
        "Line" : 1799,
        "CharPositionInLine" : 8
      },
      "170" : {
        "Text" : "#\n\n# Disable some pointless warnings that /Wall turns on.\n\n#\n\n# Unfortunately, MSVC does not appear to have an equivalent\n\n# to \"__attribute__((unused))\" to mark a particular function\n\n# parameter as being known to be unused, so that the compiler\n\n# won't warn about it (for example, the function might have\n\n# that parameter because a pointer to it is being used, and\n\n# the signature of that function includes that parameter).\n\n# C++ lets you give a parameter a type but no name, but C\n\n# doesn't have that.\n\n#\n",
        "Line" : 1806,
        "CharPositionInLine" : 8
      },
      "171" : {
        "Text" : "#\n\n# In theory, we care whether somebody uses f() rather than\n\n# f(void) to declare a function with no arguments, but, in\n\n# practice, there are places in the Windows header files\n\n# that appear to do that, so we squelch that warning.\n\n#\n",
        "Line" : 1819,
        "CharPositionInLine" : 8
      },
      "172" : {
        "Text" : "#\n\n# Windows FD_SET() generates this, so we suppress it.\n\n#\n",
        "Line" : 1826,
        "CharPositionInLine" : 8
      },
      "173" : {
        "Text" : "#\n\n# Perhaps testing something #defined to be 0 with #ifdef is an\n\n# error, and it should be tested with #if, but perhaps it's\n\n# not, and Microsoft does that in its headers, so we squelch\n\n# that warning.\n\n#\n",
        "Line" : 1830,
        "CharPositionInLine" : 8
      },
      "174" : {
        "Text" : "#\n\n# The Windows headers also test not-defined values in #if, so\n\n# we don't want warnings about that, either.\n\n#\n",
        "Line" : 1837,
        "CharPositionInLine" : 8
      },
      "175" : {
        "Text" : "#\n\n# We do *not* care whether some function is, or isn't, going to be\n\n# expanded inline.\n\n#\n",
        "Line" : 1842,
        "CharPositionInLine" : 8
      },
      "176" : {
        "Text" : "#\n\n# We do *not* care whether we're adding padding bytes after\n\n# structure members.\n\n#\n",
        "Line" : 1848,
        "CharPositionInLine" : 8
      },
      "177" : {
        "Text" : "#\n\n# Other compilers, including MSVC with a Clang front end and\n\n# Microsoft's code generator.  We currently treat them as if\n\n# they might support GCC-style -W options.\n\n#\n",
        "Line" : 1854,
        "CharPositionInLine" : 8
      },
      "178" : {
        "Text" : "# Warns about safeguards added in case the enums are extended\n\n# check_and_add_compiler_option(-Wcovered-switch-default)\n",
        "Line" : 1861,
        "CharPositionInLine" : 8
      },
      "179" : {
        "Text" : "#\n\n# Suppress some warnings we get with MSVC even without /Wall.\n\n#\n",
        "Line" : 1878,
        "CharPositionInLine" : 0
      },
      "180" : {
        "Text" : "#\n\n# Yes, we have some functions that never return but that\n\n# have a non-void return type.  That's because, on some\n\n# platforms, they *do* return values but, on other\n\n# platforms, including Windows, they just fail and\n\n# longjmp out by calling bpf_error().\n\n#\n",
        "Line" : 1882,
        "CharPositionInLine" : 4
      },
      "181" : {
        "Text" : "#\n\n# Try to have the compiler default to hiding symbols, so that only\n\n# symbols explicitly exported with PCAP_API will be visible outside\n\n# (shared) libraries.\n\n#\n\n# Not necessary with MSVC, as that's the default.\n\n#\n\n# XXX - we don't use ADD_COMPILER_EXPORT_FLAGS, because, as of CMake\n\n# 2.8.12.2, it doesn't know about Sun C/Oracle Studio, and, as of\n\n# CMake 2.8.6, it only sets the C++ compiler flags, rather than\n\n# allowing an arbitrary variable to be set with the \"hide symbols\n\n# not explicitly exported\" flag.\n\n#\n",
        "Line" : 1897,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "#\n\n# Sun C/Oracle Studio.\n\n#\n",
        "Line" : 1912,
        "CharPositionInLine" : 8
      },
      "183" : {
        "Text" : "#\n\n# Try this for all other compilers; it's what GCC uses,\n\n# and a number of other compilers, such as Clang and Intel C,\n\n# use it as well.\n\n#\n",
        "Line" : 1917,
        "CharPositionInLine" : 8
      },
      "184" : {
        "Text" : "#\n\n# Flex/Lex and YACC/Berkeley YACC/Bison.\n\n# From a mail message to the CMake mailing list by Andy Cedilnik of\n\n# Kitware.\n\n#\n",
        "Line" : 1926,
        "CharPositionInLine" : 0
      },
      "185" : {
        "Text" : "#\n\n# Try to find Flex, a Windows version of Flex, or Lex.\n\n#\n",
        "Line" : 1932,
        "CharPositionInLine" : 0
      },
      "186" : {
        "Text" : "#\n\n# Since scanner.c does not exist yet when cmake is run, mark\n\n# it as generated.\n\n#\n\n# Since scanner.c includes grammar.h, mark that as a dependency.\n\n#\n",
        "Line" : 1948,
        "CharPositionInLine" : 0
      },
      "187" : {
        "Text" : "#\n\n# Add scanner.c to the list of sources.\n\n#\n\n#set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} ${CMAKE_CURRENT_BINARY_DIR}/scanner.c)\n",
        "Line" : 1959,
        "CharPositionInLine" : 0
      },
      "188" : {
        "Text" : "#\n\n# Try to find YACC or Bison.\n\n#\n",
        "Line" : 1964,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "#\n\n# Create custom command for the scanner.\n\n# Find out whether it's Bison or not by looking at the last component\n\n# of the path (without a .exe extension, if this is Windows).\n\n#\n",
        "Line" : 1973,
        "CharPositionInLine" : 0
      },
      "190" : {
        "Text" : "#\n\n# Since grammar.c does not exists yet when cmake is run, mark\n\n# it as generated.\n\n#\n",
        "Line" : 1989,
        "CharPositionInLine" : 0
      },
      "191" : {
        "Text" : "#\n\n# Add grammar.c to the list of sources.\n\n#\n\n#set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} ${CMAKE_CURRENT_BINARY_DIR}/grammar.c)\n",
        "Line" : 1998,
        "CharPositionInLine" : 0
      },
      "192" : {
        "Text" : "#\n\n# Assume, by default, no support for shared libraries and V7/BSD\n\n# convention for man pages (devices in section 4, file formats in\n\n# section 5, miscellaneous info in section 7, administrative commands\n\n# and daemons in section 8).  Individual cases can override this.\n\n# Individual cases can override this.\n\n#\n",
        "Line" : 2003,
        "CharPositionInLine" : 0
      },
      "193" : {
        "Text" : "# Workaround to enable certain features\n",
        "Line" : 2015,
        "CharPositionInLine" : 4
      },
      "194" : {
        "Text" : "#\n\n# If we're using BPF, we need libodm and libcfg, as\n\n# we use them to load the BPF module.\n\n#\n",
        "Line" : 2018,
        "CharPositionInLine" : 8
      },
      "195" : {
        "Text" : "#\n\n# HP-UX 9.x.\n\n#\n",
        "Line" : 2026,
        "CharPositionInLine" : 8
      },
      "196" : {
        "Text" : "#\n\n# HP-UX 10.0.\n\n#\n",
        "Line" : 2031,
        "CharPositionInLine" : 8
      },
      "197" : {
        "Text" : "#\n\n# HP-UX 10.1.\n\n#\n",
        "Line" : 2035,
        "CharPositionInLine" : 8
      },
      "198" : {
        "Text" : "#\n\n# HP-UX 10.20 and later.\n\n#\n",
        "Line" : 2039,
        "CharPositionInLine" : 8
      },
      "199" : {
        "Text" : "#\n\n# Use System V conventions for man pages.\n\n#\n",
        "Line" : 2045,
        "CharPositionInLine" : 4
      },
      "200" : {
        "Text" : "#\n\n# Use IRIX conventions for man pages; they're the same as the\n\n# System V conventions, except that they use section 8 for\n\n# administrative commands and daemons.\n\n#\n",
        "Line" : 2052,
        "CharPositionInLine" : 4
      },
      "201" : {
        "Text" : "#\n\n# DEC OSF/1, a/k/a Digial UNIX, a/k/a Tru64 UNIX.\n\n# Use Tru64 UNIX conventions for man pages; they're the same as the\n\n# System V conventions except that they use section 8 for\n\n# administrative commands and daemons.\n\n#\n",
        "Line" : 2060,
        "CharPositionInLine" : 4
      },
      "202" : {
        "Text" : "#\n\n# SunOS 5.x.\n\n#\n",
        "Line" : 2070,
        "CharPositionInLine" : 4
      },
      "203" : {
        "Text" : "#\n\n# Make sure errno is thread-safe, in case we're called in\n\n# a multithreaded program.  We don't guarantee that two\n\n# threads can use the *same* pcap_t safely, but the\n\n# current version does guarantee that you can use different\n\n# pcap_t's in different threads, and even that pcap_compile()\n\n# is thread-safe (it wasn't thread-safe in some older versions).\n\n#\n",
        "Line" : 2074,
        "CharPositionInLine" : 4
      },
      "204" : {
        "Text" : "#\n\n# Use System V conventions for man pages.\n\n#\n",
        "Line" : 2086,
        "CharPositionInLine" : 8
      },
      "205" : {
        "Text" : "#\n\n# Haiku needs _BSD_SOURCE for the _IO* macros because it doesn't use them.\n\n#\n",
        "Line" : 2095,
        "CharPositionInLine" : 4
      },
      "206" : {
        "Text" : "#\n\n# Add pcap-dll.rc to the list of sources.\n\n#\n",
        "Line" : 2105,
        "CharPositionInLine" : 4
      },
      "207" : {
        "Text" : "#\n\n# Add subdirectories after we've set various variables, so they pick up\n\n# pick up those variables.\n\n#\n",
        "Line" : 2111,
        "CharPositionInLine" : 0
      },
      "208" : {
        "Text" : "######################################\n\n# Register targets\n\n######################################\n",
        "Line" : 2120,
        "CharPositionInLine" : 0
      },
      "209" : {
        "Text" : "#\n\n# Special target to serialize the building of the generated source.\n\n#\n\n# See\n\n#\n\n#  http://public.kitware.com/pipermail/cmake/2013-August/055510.html\n\n#\n",
        "Line" : 2124,
        "CharPositionInLine" : 0
      },
      "210" : {
        "Text" : "#\n\n# No matter what the library is called - it might be called \"wpcap\"\n\n# in a Windows build - the symbol to define to indicate that we're\n\n# building the library, rather than a program using the library,\n\n# and thus that we're exporting functions defined in our public\n\n# header files, rather than importing those functions, is\n\n# pcap_EXPORTS.\n\n#\n",
        "Line" : 2150,
        "CharPositionInLine" : 4
      },
      "211" : {
        "Text" : "# only MAJOR and MINOR are needed\n",
        "Line" : 2179,
        "CharPositionInLine" : 48
      },
      "212" : {
        "Text" : "# XXX For DLLs, the TARGET_PDB_FILE generator expression can be used to locate\n\n# its PDB file's output directory for installation.\n\n# cmake doesn't offer a generator expression for PDB files generated by the\n\n# compiler (static libraries).\n\n# So instead of considering any possible output there is (there are many),\n\n# this will search for the PDB file in the compiler's initial output directory,\n\n# which is always ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles\\wpcap_static.dir\n\n# regardless of architecture, build generator etc.\n\n# Quite hackish indeed.\n",
        "Line" : 2183,
        "CharPositionInLine" : 8
      },
      "213" : {
        "Text" : "#\n\n# For compatibility, build the shared library without the \"lib\" prefix on\n\n# MinGW as well.\n\n#\n",
        "Line" : 2198,
        "CharPositionInLine" : 8
      },
      "214" : {
        "Text" : "# UN*X\n",
        "Line" : 2210,
        "CharPositionInLine" : 12
      },
      "215" : {
        "Text" : "#\n\n# On macOS, build libpcap for the appropriate architectures, if\n\n# CMAKE_OSX_ARCHITECTURES isn't set (if it is, let that control\n\n# the architectures for which to build it).\n\n#\n",
        "Line" : 2240,
        "CharPositionInLine" : 0
      },
      "216" : {
        "Text" : "#\n\n# Get the major version of Darwin.\n\n#\n",
        "Line" : 2246,
        "CharPositionInLine" : 4
      },
      "217" : {
        "Text" : "#\n\n# Pre-Tiger.  Build only for 32-bit PowerPC.\n\n#\n",
        "Line" : 2252,
        "CharPositionInLine" : 8
      },
      "218" : {
        "Text" : "#\n\n# Tiger.  Is this prior to, or with, Intel support?\n\n#\n\n# Get the minor version of Darwin.\n\n#\n",
        "Line" : 2257,
        "CharPositionInLine" : 8
      },
      "219" : {
        "Text" : "#\n\n# Prior to Intel support.  Build for 32-bit\n\n# PowerPC and 64-bit PowerPC, with 32-bit PowerPC\n\n# first.  (I'm guessing that's what Apple does.)\n\n#\n",
        "Line" : 2265,
        "CharPositionInLine" : 12
      },
      "220" : {
        "Text" : "#\n\n# With Intel support but prior to x86-64 support.\n\n# Build for 32-bit PowerPC, 64-bit PowerPC, and 32-bit x86,\n\n# with 32-bit PowerPC first.\n\n# (I'm guessing that's what Apple does.)\n\n#\n",
        "Line" : 2272,
        "CharPositionInLine" : 12
      },
      "221" : {
        "Text" : "#\n\n# With Intel support including x86-64 support.\n\n# Build for 32-bit PowerPC, 64-bit PowerPC, 32-bit x86,\n\n# and x86-64, with 32-bit PowerPC first.\n\n# (I'm guessing that's what Apple does.)\n\n#\n",
        "Line" : 2280,
        "CharPositionInLine" : 12
      },
      "222" : {
        "Text" : "#\n\n# Leopard.  Build for 32-bit PowerPC, 64-bit\n\n# PowerPC, 32-bit x86, and x86-64, with 32-bit PowerPC\n\n# first.  (That's what Apple does.)\n\n#\n",
        "Line" : 2289,
        "CharPositionInLine" : 8
      },
      "223" : {
        "Text" : "#\n\n# Snow Leopard.  Build for x86-64, 32-bit x86, and\n\n# 32-bit PowerPC, with x86-64 first.  (That's\n\n# what Apple does, even though Snow Leopard\n\n# doesn't run on PPC, so PPC libpcap runs under\n\n# Rosetta, and Rosetta doesn't support BPF\n\n# ioctls, so PPC programs can't do live\n\n# captures.)\n\n#\n",
        "Line" : 2296,
        "CharPositionInLine" : 8
      },
      "224" : {
        "Text" : "#\n\n# Post-Snow Leopard.  Build for x86-64 and 32-bit x86,\n\n# with x86-64 first.  (That's what Apple does)\n\n# XXX - update if and when Apple drops support\n\n# for 32-bit x86 code and if and when Apple adds\n\n# ARM-based Macs.  (You're on your own for iOS etc.)\n\n#\n\n# First, check whether we're building with OpenSSL.\n\n# If so, don't bother trying to build fat.\n\n#\n",
        "Line" : 2307,
        "CharPositionInLine" : 8
      },
      "225" : {
        "Text" : "#\n\n# Now, check whether we *can* build for i386.\n\n#\n",
        "Line" : 2322,
        "CharPositionInLine" : 10
      },
      "226" : {
        "Text" : "#\n\n# We can't build fat; suggest that the user install the\n\n# /usr/include headers if they want to build fat.\n\n#\n",
        "Line" : 2340,
        "CharPositionInLine" : 14
      },
      "227" : {
        "Text" : "#\n\n# Pre-Mojave; the command-line tools should be sufficient to\n\n# enable 32-bit x86 builds.\n\n#\n",
        "Line" : 2345,
        "CharPositionInLine" : 18
      },
      "228" : {
        "Text" : "######################################\n\n# Write out the config.h file\n\n######################################\n",
        "Line" : 2364,
        "CharPositionInLine" : 0
      },
      "229" : {
        "Text" : "######################################\n\n# Install pcap library, include files, and man pages\n\n######################################\n",
        "Line" : 2370,
        "CharPositionInLine" : 0
      },
      "230" : {
        "Text" : "#\n\n# \"Define GNU standard installation directories\", which actually\n\n# are also defined, to some degree, by autotools, and at least\n\n# some of which are general UN*X conventions.\n\n#\n",
        "Line" : 2374,
        "CharPositionInLine" : 0
      },
      "231" : {
        "Text" : "#\n\n# Install 64-bit code built with MSVC in the amd64 subdirectories,\n\n# as that's where it expects it to be.\n\n#\n",
        "Line" : 2487,
        "CharPositionInLine" : 8
      },
      "232" : {
        "Text" : "#\n\n# Install 32-bit code, and 64-bit code not built with MSVC\n\n# in the top-level directories, as those are where they\n\n# expect it to be.\n\n#\n",
        "Line" : 2504,
        "CharPositionInLine" : 8
      },
      "233" : {
        "Text" : "# On UN*X, and on Windows when not using MSVC, generate libpcap.pc and\n\n# pcap-config and process man pages and arrange that they be installed.\n",
        "Line" : 2531,
        "CharPositionInLine" : 0
      },
      "234" : {
        "Text" : "#\n\n# Platforms where the linker is the GNU linker\n\n# or accepts command-line arguments like\n\n# those the GNU linker accepts.\n\n#\n",
        "Line" : 2545,
        "CharPositionInLine" : 8
      },
      "235" : {
        "Text" : "#\n\n# SunOS 5.x.\n\n#\n\n# XXX - this assumes GCC is using the Sun linker,\n\n# rather than the GNU linker.\n\n#\n",
        "Line" : 2552,
        "CharPositionInLine" : 8
      },
      "236" : {
        "Text" : "#\n\n# No option needed to set the RPATH.\n\n#\n",
        "Line" : 2560,
        "CharPositionInLine" : 8
      },
      "237" : {
        "Text" : "#\n\n# Man pages.\n\n#\n\n# For each section of the manual for which we have man pages\n\n# that require macro expansion, do the expansion.\n\n#\n",
        "Line" : 2574,
        "CharPositionInLine" : 4
      },
      "238" : {
        "Text" : "# uninstall target\n",
        "Line" : 2630,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 239
    },
    "cmake/Modules/FindDAG.cmake" : {
      "ObjectId" : "ef13528445585663cf927b02e77113556ec495b1",
      "LastModified" : "2018-05-17T02:42:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the Endace DAG library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Try to find the libraries\n\n#\n\n# We assume that if we have libdag we have libdagconf, as they're\n\n# installed at the same time from the same package.\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindFseeko.cmake" : {
      "ObjectId" : "ca53a5a6142513f93ae6e9e22c3d55aaf19ccab2",
      "LastModified" : "2017-10-06T01:36:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake support for fseeko\n\n#\n\n# Based on FindLFS.cmake by\n\n# Copyright (C) 2016 Julian Andres Klode <jak@debian.org>.\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# This defines the following variables\n\n#\n\n# FSEEKO_DEFINITIONS - List of definitions to pass to add_definitions()\n\n# FSEEKO_COMPILE_OPTIONS - List of definitions to pass to add_compile_options()\n\n# FSEEKO_LIBRARIES - List of libraries and linker flags\n\n# FSEEKO_FOUND - If there is Large files support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check for the availability of fseeko()\n\n# The cases handled are:\n\n#\n\n#  * Native fseeko()\n\n#  * Preprocessor flag -D_LARGEFILE_SOURCE\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# See if it's available with _LARGEFILE_SOURCE.\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLFS.cmake" : {
      "ObjectId" : "be5f0d4875a805255b8c5a021c066d56e456b917",
      "LastModified" : "2017-10-06T01:36:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake support for large files\n\n#\n\n# Copyright (C) 2016 Julian Andres Klode <jak@debian.org>.\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# This defines the following variables\n\n#\n\n# LFS_DEFINITIONS - List of definitions to pass to add_definitions()\n\n# LFS_COMPILE_OPTIONS - List of definitions to pass to add_compile_options()\n\n# LFS_LIBRARIES - List of libraries and linker flags\n\n# LFS_FOUND - If there is Large files support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Test program to check for LFS. Requires that off_t has at least 8 byte large\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check if the given options are needed\n\n#\n\n# This appends to the variables _lfs_cppflags, _lfs_cflags, and _lfs_ldflags,\n\n# it also sets LFS_FOUND to 1 if it works.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for the availability of LFS.\n\n# The cases handled are:\n\n#\n\n#  * Native LFS\n\n#  * Output of getconf LFS_CFLAGS; getconf LFS_LIBS; getconf LFS_LDFLAGS\n\n#  * Preprocessor flag -D_FILE_OFFSET_BITS=64\n\n#  * Preprocessor flag -D_LARGE_FILES\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check using getconf. If getconf fails, don't worry, the check in\n\n# _lfs_check_compiler_option will fail as well.\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Move -D flags to the place they are supposed to be\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check if the flags we received (if any) produce working LFS support\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# IRIX stuff\n",
        "Line" : 133,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# Linux and friends\n",
        "Line" : 136,
        "CharPositionInLine" : 23
      },
      "9" : {
        "Text" : "# AIX\n",
        "Line" : 139,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 10
    },
    "cmake/Modules/FindPacket.cmake" : {
      "ObjectId" : "f114875bf87331ad20d669d2acba8dddfad45bc6",
      "LastModified" : "2018-09-13T21:00:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2017 Ali Abdulkadir <autostart.ini@gmail.com>.\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sub-license, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# FindPacket\n\n# ==========\n\n#\n\n# Find the Packet library and include files.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# PACKET_INCLUDE_DIR     - absolute path to the directory containing Packet32.h.\n\n#\n\n# PACKET_LIBRARY         - relative or absolute path to the Packet library to\n\n#                          link with. An absolute path is will be used if the\n\n#                          Packet library is not located in the compiler's\n\n#                          default search path. See e.g. PACKET_DLL_DIR\n\n#                          variable below.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PACKET_FOUND           - TRUE if the Packet library *and* header are found.\n\n#\n\n# Hints and Backward Compatibility\n\n# ================================\n\n#\n\n# To tell this module where to look, a user may set the environment variable\n\n# PACKET_DLL_DIR to point cmake to the *root* of a directory with include and\n\n# lib subdirectories for packet.dll (e.g WpdPack/npcap-sdk).\n\n# Alternatively, PACKET_DLL_DIR may also be set from cmake command line or GUI\n\n# (e.g cmake -DPACKET_DLL_DIR=/path/to/packet [...])\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The 64-bit Packet.lib is located under /x64\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# For the WinPcap and Npcap SDKs, the Lib subdirectory of the top-level\n\n# directory contains 32-bit libraries; the 64-bit libraries are in the\n\n# Lib/x64 directory.\n\n#\n\n# The only way to *FORCE* CMake to look in the Lib/x64 directory\n\n# without searching in the Lib directory first appears to be to set\n\n# CMAKE_LIBRARY_ARCHITECTURE to \"x64\".\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Find the header\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the library\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set PACKET_FOUND to TRUE if PACKET_INCLUDE_DIR and PACKET_LIBRARY are TRUE.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindSNF.cmake" : {
      "ObjectId" : "76dcced417fea7fdf95164118b69f386738f92a2",
      "LastModified" : "2018-01-23T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the Myricom SNF library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find the library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindTC.cmake" : {
      "ObjectId" : "bb24c6671aa3c3ec34ddaf0bb0f7873b47cdbb08",
      "LastModified" : "2018-01-23T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the Riverbed TurboCap library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find the library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/Finddpdk.cmake" : {
      "ObjectId" : "ec960ead0c122d88edb1eddd334e5a7b0fafea5c",
      "LastModified" : "2019-01-10T19:49:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find dpdk\n\n#\n\n# Once done, this will define\n\n#\n\n# dpdk_FOUND\n\n# dpdk_INCLUDE_DIRS\n\n# dpdk_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rpcapd/CMakeLists.txt" : {
      "ObjectId" : "294611eeeafb1b7a6ac03c478f7a1bb36818741b",
      "LastModified" : "2019-01-10T19:49:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# On UN*X, we need pthreads and crypt().\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Do we have getspnam()?\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#\n\n# Find library needed for getaddrinfo.\n\n# NOTE: if you hand check_library_exists as its last argument a variable\n\n# that's been set, it skips the test, so we need different variables.\n\n#\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# By default, build rpcapd universal with the appropriate set of\n\n# architectures for the OS on which we're doing the build.\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n# Get the major version of Darwin.\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n# Leopard.  Build for 32-bit x86 and 32-bit PowerPC, with\n\n# 32-bit x86 first.\n\n#\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#\n\n# Snow Leopard.  Build for x86-64 and 32-bit x86, with\n\n# x86-64 first.\n\n#\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#\n\n# Post-Snow Leopard.  Build only for x86-64.\n\n# XXX - update if and when Apple adds ARM-based Macs.\n\n# (You're on your own for iOS etc.)\n\n#\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "######################################\n\n# Install rpcap daemon and man pages\n\n######################################\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#\n\n# \"Define GNU standard installation directories\", which actually\n\n# are also defined, to some degree, by autotools, and at least\n\n# some of which are general UN*X conventions.\n\n#\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# On UN*X, and on Windows when not using MSVC, generate process man\n\n# pages and arrange that they be installed.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#\n\n# Man pages.\n\n#\n\n# For each section of the manual for which we have man pages\n\n# that require macro expansion, do the expansion.\n\n#\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "testprogs/CMakeLists.txt" : {
      "ObjectId" : "b9863eec2596d86e0619e4daeb1fd2810f438bde",
      "LastModified" : "2019-01-10T19:49:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "testprogs/fuzz/CMakeLists.txt" : {
      "ObjectId" : "4a2862f98d62e690d8eb653635cafb083306d0cb",
      "LastModified" : "2019-01-10T19:49:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 11
  },
  "ElapsedTime" : 2034
}