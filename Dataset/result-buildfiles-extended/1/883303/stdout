{
  "Repository" : "883303",
  "Revision" : "HEAD",
  "ObjectId" : "3cab2cdd368bccba7cc1e75e9eca8b1edecd80e4",
  "CommitTime" : "2018-02-26T22:12:00Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4c366c2ab07036c38bf0eecc050b9062f300517f",
      "LastModified" : "2018-02-22T21:34:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Cross platform build environment for the libraries and regression tests of\n\n# the Under Sea Modeling Library (USML).\n\n#\n\n# This script traverses the active modules and collects all library source\n\n# files and headers into a single add_library() call for the usml target.\n\n# It then collects all regression tests into a single add_executable()\n\n# call for the usml_test target. Several of these tests require data\n\n# files to be generated, and many of these require the use of NCKS.\n\n# Finally, it builds the USML studies.\n\n#\n\n# The source_group() command is used to organize the files into\n\n# subgroups in IDE's such as Visual C++ and Eclipse.  Note that the\n\n# Code::Blocks generator does not currently support the source_group()\n\n# command.\n\n#\n\n# The install target sets up USMLConfig.cmake and the other files\n\n# needed for users to successfully execute a find_packages( USML ).\n\n# This includes a USMLUse.cmake file that sets of Boost and NetCDF.\n\n#\n\n# The uninstall target removes the files and directories created by\n\n# the install process.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "######################################################################\n\n# setup USML\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# work around for missing netcdf_c++ on windows\n",
        "Line" : 34,
        "CharPositionInLine" : 11
      },
      "3" : {
        "Text" : "# ignore warnings in Boost and NetCDF includes\n",
        "Line" : 43,
        "CharPositionInLine" : 24
      },
      "4" : {
        "Text" : "######################################################################\n\n# macro: searches a module list for headers and sources\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "######################################################################\n\n# USML shared libraries\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# work around for missing netcdf_c++ on windows\n",
        "Line" : 70,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "######################################################################\n\n# Install config files for find_package()\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "######################################################################\n\n# Add uninstall target to project\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "######################################################################\n\n# USML Tests\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "######################################################################\n\n# USML studies\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "######################################################################\n\n# generate RPM installation package\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "config/FindNetCDF.cmake" : {
      "ObjectId" : "6f40c7e5047099da34723d050a7bf45b68321c14",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find NetCDF\n\n# Find the native NetCDF includes and library\n\n#\n\n#  NETCDF_INCLUDES    - where to find netcdf.h, etc\n\n#  NETCDF_LIBRARIES   - Link these libraries when using NetCDF\n\n#  NETCDF_FOUND       - True if NetCDF found including required interfaces (see below)\n\n#\n\n# Your package can require certain interfaces to be FOUND by setting these\n\n#\n\n#  NETCDF_CXX         - require the C++ interface and link the C++ library\n\n#  NETCDF_F77         - require the F77 interface and link the fortran library\n\n#  NETCDF_F90         - require the F90 interface and link the fortran library\n\n#\n\n# The following are not for general use and are included in\n\n# NETCDF_LIBRARIES if the corresponding option above is set.\n\n#\n\n#  NETCDF_LIBRARIES_C    - Just the C interface\n\n#  NETCDF_LIBRARIES_CXX  - C++ interface, if available\n\n#  NETCDF_LIBRARIES_F77  - Fortran 77 interface, if available\n\n#  NETCDF_LIBRARIES_F90  - Fortran 90 interface, if available\n\n#\n\n# Normal usage would be:\n\n#  set (NETCDF_F90 \"YES\")\n\n#  find_package (NetCDF REQUIRED)\n\n#  target_link_libraries (uses_f90_interface ${NETCDF_LIBRARIES})\n\n#  target_link_libraries (only_uses_c_interface ${NETCDF_LIBRARIES_C})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# will be set to NO if we're missing any interfaces\n",
        "Line" : 39,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# prepend so that -lnetcdf is last\n",
        "Line" : 52,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NETCDF_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "config/USMLUse.cmake" : {
      "ObjectId" : "6e5151e9b4f1676e4b003d044d1dc343f7bd405a",
      "LastModified" : "2018-02-26T22:12:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common CMake options for compiling the Under Sea Modeling Library (USML)\n\n# and systems based on USML.  Currently it sets up:\n\n#\n\n#  - CMake option variables for BUILD_SHARED_LIBS and USML_PEDANTIC \n\n#  - Compiler options for MSVC and GNUCXX\n\n#  - Configuration options for Boost C++ utility libraries\n\n#  - Configuration options for NetCDF data access library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "######################################################################\n\n# CMake option variables for USML\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################################################\n\n# Visual C++ compiler options\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# fast floating point math\n\n# multi-processor compilation\n",
        "Line" : 19,
        "CharPositionInLine" : 36
      },
      "4" : {
        "Text" : "# symbols like M_PI\n",
        "Line" : 21,
        "CharPositionInLine" : 43
      },
      "5" : {
        "Text" : "# quiet some harmless warning\n",
        "Line" : 22,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "# workaround for error in\n",
        "Line" : 26,
        "CharPositionInLine" : 36
      },
      "7" : {
        "Text" : "# boost::geometry 1.58\n",
        "Line" : 27,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "######################################################################\n\n# GNU C++ options\n\n#\n\n# Warning: Some compilers, at -O0 optimization levels, fail to properly \n\n# chain multiple boost::ublas operations into a single evaluation.  \n\n# When this happens, the result is equal to the first operation.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# min optimizations\n",
        "Line" : 48,
        "CharPositionInLine" : 49
      },
      "10" : {
        "Text" : "# max optimizations\n",
        "Line" : 50,
        "CharPositionInLine" : 41
      },
      "11" : {
        "Text" : "# standards compliance\n",
        "Line" : 53,
        "CharPositionInLine" : 41
      },
      "12" : {
        "Text" : "# prefer static libraries\n",
        "Line" : 58,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : "######################################################################\n\n# Boost C++ utility libraries for ublas and unit_test_framework\n\n#\n\n# The BOOST_ROOT variable can be used to over-ride default Boost version,\n\n# but it must be set immediately after the cache is cleared, and before\n\n# the FindBoost script is executed.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# use version suffix in *.so name\n",
        "Line" : 76,
        "CharPositionInLine" : 29
      },
      "15" : {
        "Text" : "# for usml_test.exe\n",
        "Line" : 83,
        "CharPositionInLine" : 28
      },
      "16" : {
        "Text" : "# for usml_test.exe\n",
        "Line" : 92,
        "CharPositionInLine" : 28
      },
      "17" : {
        "Text" : "# fix bug in boost/numeric/ublas/vector_expression.hpp lines 1409 through 1417\n\n# function: operator/( vector, scalar )\n\n#\n\n# Should be using the enable_if<> macros just like the operator*() in lines\n\n# 1397 through 1407 (just above it).  Doing so allows further overloading of\n\n# operator/() for other types.  Same idea applies to matrix_expression.hpp.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "######################################################################\n\n# NetCDF data access library\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "######################################################################\n\n# POSIX thread libraries\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "config/usmlBuildStudies.cmake" : {
      "ObjectId" : "e06eeb10f1dd805bd49362c174d1f49a430d1b42",
      "LastModified" : "2015-09-22T00:28:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################################################################\n\n# USML studies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "config/usmlBuildTest.cmake" : {
      "ObjectId" : "34c621c3df3de6a6a35ef2cce31531e7d3fce4ed",
      "LastModified" : "2014-12-15T21:35:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################################################################\n\n# USML_TEST regression test suite\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define standard input and output data files for USML regression tests\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# generated data files for bathymetry tests\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# generated data files for profile tests\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# build the USML regression tests\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 5
  },
  "ElapsedTime" : 2414
}