{
  "Repository" : "46456",
  "Revision" : "HEAD",
  "ObjectId" : "7f827bbe410ccfdb0446f7d6a91acc2199c9cc8d",
  "CommitTime" : "2018-11-20T00:19:41Z",
  "Files" : {
    "archive/spotify/CMakeLists.txt" : {
      "ObjectId" : "1a8f53371ced314421edfbdc9621bde0344009e5",
      "LastModified" : "2014-10-27T23:18:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "archive/spotify/breakpad/CMakeLists.txt" : {
      "ObjectId" : "446175f3c48fddf78d6e51d9c1d3163563a05904",
      "LastModified" : "2014-10-27T23:18:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#         client/mac/Framework/Breakpad.mm\n\n#         client/mac/Framework/OnDemandServer.mm\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "archive/spotify/breakpad/third_party/protobuf/protobuf/gtest/CMakeLists.txt" : {
      "ObjectId" : "7910b5df2a2ca0d051ab376aaa2c04d8fe563353",
      "LastModified" : "2014-10-27T23:18:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# Experimental CMake build script for Google Test.\n\n#\n\n# Consider this a prototype.  It will change drastically.  For now,\n\n# this is only for people on the cutting edge.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For hermetic builds, we may need to tell CMake to use compiler in a\n\n# specific location.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# In hermetic build environments, tests may not have access to MS runtime\n\n# DLLs, so this replaces /MD (CRT libraries in DLLs) with /MT (static CRT\n\n# libraries).\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Where gtest's .h files can be found.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Where the gtest libraries can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Defines the compiler/linker flags used to build gtest.  You can\n\n# tweak these definitions to suit your need.  A variable's value is\n\n# empty before it's explicitly assigned to.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# The pthreads library is available.\n",
        "Line" : 99,
        "CharPositionInLine" : 30
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# TODO(vladl@google.com): Make static/shared a user option.\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Static versions of Google Test libraries.  We build them using more\n\n# strict warnings than what are used for other targets, to ensure that\n\n# gtest can be compiled by a user aggressive about warnings.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# build_gtest_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dbuild_gtest_samples=ON flag when running cmake.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags lib srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given library and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given lib and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# Most of the tests are not built by default.  To build them, set the\n\n# build_all_gtest_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dbuild_all_gtest_tests=ON flag when running cmake.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Disables the \"class 'X' needs to have dll-interface to be used\n\n# by clients of class 'Y'\" warning. This particularly concerns generic\n\n# classes like vector that MS doesn't mark as exported.\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# TODO(vladl): This and the next tests may not run in the hermetic\n\n# environment on Windows. Re-evaluate and possibly make them\n\n# platform-conditional after implementing hermetic builds.\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# ${gtest_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 40
    },
    "archive/spotify/breakpad/third_party/protobuf/protobuf/java/pom.xml" : {
      "ObjectId" : "e28d6db5d36f69a9693811d86d37368e0e72ba3d",
      "LastModified" : "2014-10-27T23:18:40Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "archive/spotify/cmake/FindQJSON.cmake" : {
      "ObjectId" : "733626d91f20ff24772d28705e1b230bdfd83fc3",
      "LastModified" : "2014-10-27T23:18:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find QJSON - JSON handling library for Qt\n\n#\n\n# This module defines\n\n#  QJSON_FOUND - whether the qsjon library was found\n\n#  QJSON_LIBRARIES - the qjson library\n\n#  QJSON_INCLUDE_DIR - the include path of the qjson library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use pkg-config to get the values of QJSON_INCLUDE_DIRS\n\n# and QJSON_LIBRARY_DIRS to add as hints to the find commands.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "archive/spotify/cmake/Findlibspotify.cmake" : {
      "ObjectId" : "4e08e4aeda3fd3729a99dc9ee78821fb9bc99e62",
      "LastModified" : "2014-10-27T23:18:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - find Find the official Spotify library\n\n# LIBSPOTIFY_INCLUDE_DIR - Where to find Find the official Spotify library header files (directory)\n\n# LIBSPOTIFY_LIBRARIES - Find the official Spotify library libraries\n\n# LIBSPOTIFY_LIBRARY_RELEASE - Where the release library is\n\n# LIBSPOTIFY_LIBRARY_DEBUG - Where the debug library is\n\n# LIBSPOTIFY_FOUND - Set to TRUE if we found everything (library, includes and executable)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2010 Pau Garcia i Quiles, <pgquiles@elpauer.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "archive/spotify/qxtweb-standalone/CMakeLists.txt" : {
      "ObjectId" : "d29e7b989470d93f4496c707429585ad966c6f5b",
      "LastModified" : "2014-10-27T23:18:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QxtWeb:\n",
        "Line" : 27,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Ripped bits of QxtCore:\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# QxtWeb:\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#        ${qxtweb}/qxthtmltemplate.h\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#        ${qxtweb}/qxtweb.h\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#        ${qxtweb}/qxtwebevent.h\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Ripped bits of QxtCore:\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#        ${qxtweb}/qxtmetaobject.h\n\n#        ${qxtweb}/qxtnullable.h\n\n#        ${qxtweb}/qxtnull.h\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#        ${qxtweb}/qxtboundfunctionbase.h\n\n#        ${qxtweb}/qxtboundcfunction.h\n\n#        ${qxtweb}/qxtmetatype.h\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DLL on windows due to linker issues, otherwise static\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Also build small example app from qxt demos:\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#qt4_wrap_cpp( mocex \"example/myservice.h\" )\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#ADD_EXECUTABLE( example-webserver\n\n#    ${mocex}\n\n#    example/main.cpp\n\n#    example/myservice.h\n\n#    )\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#TARGET_LINK_LIBRARIES( example-webserver\n\n#    ${QT_LIBRARIES}\n\n#    \"${CMAKE_CURRENT_SOURCE_DIR}/libqxtweb-standalone.a\"\n\n#    )\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "spotify/native/CMakeLists.txt" : {
      "ObjectId" : "b0a0076cc36642b47f82e48d134821ff26c864be",
      "LastModified" : "2014-11-02T10:00:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We want as many as possible warnings\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the \"resolver\" target\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "spotify/native/CMakeModules/FindMicrohttpd.cmake" : {
      "ObjectId" : "a7eb73da5d31cecab75aa0ed9c9fe834d2ae1f5e",
      "LastModified" : "2014-11-02T08:12:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "spotify/native/CMakeModules/FindSpotify.cmake" : {
      "ObjectId" : "8fda243e2fe4b6841e7048f275b3080e187bf8be",
      "LastModified" : "2014-11-02T10:00:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "MAVEN" : 1
  },
  "ElapsedTime" : 2088
}