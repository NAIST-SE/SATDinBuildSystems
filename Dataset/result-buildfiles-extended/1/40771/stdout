{
  "Repository" : "40771",
  "Revision" : "HEAD",
  "ObjectId" : "1a2316a67640d5a534bdb1efbc26247cc6bbccb6",
  "CommitTime" : "2019-03-28T20:19:49Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "9939097f743ee3fd97aaf9792bdc43d8a51d4e94",
      "LastModified" : "2018-08-01T00:15:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if this is a in tree build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where is LLVM installed?\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Add the llvm header path.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Sources available, too?\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Enable unit tests if available.\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The build tree already exports the gtest target, which we can reuse\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# LLVM Doesn't export gtest's include directorys, so do that here\n",
        "Line" : 32,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Make sure the isl c files are built as fPIC\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Set directory for polly-isl-test.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add appropriate flags for GCC\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# FIXME: Turn off exceptions, RTTI:\n\n# -fno-exceptions -fno-rtti\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Do not require CUDA/OpenCL, as GPU code generation test cases can be run\n\n# without a CUDA/OpenCL library.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Support GPGPU code generation if the library is available.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# TODO: docs.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add target to check formatting of polly files\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "211f95512717e216eeaabaf1dc043e1ecfca057f",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Keep this in sync with llvm/cmake/CMakeLists.txt!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# avoid conflicts in the build-tree when changing configuration\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# LLVMPolly is a dummy target on Win\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Get the target type for every exported target\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# generate the import code for bundled/undbundled libisl versions\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate PollyConfig.cmake for the build tree.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set locations for imported targets\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# PollyConfig holds the target definitions and general settings, PollyExports\n\n# the imported locations\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate PollyConfig.cmake for the install tree.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# set locations for imported targets. The path is constructed to be relative to\n\n# the config file\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindISL.cmake" : {
      "ObjectId" : "613e86da943b1be40abae2f2cb3937a042020282",
      "LastModified" : "2017-02-27T17:54:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/polly_macros.cmake" : {
      "ObjectId" : "e48203871884833857332a8f7e02b27a9f099d0a",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# klduge: pass different values for MODULE with multiple targets in same dir\n\n# this allows building shared-lib and module in same dir\n\n# there must be a cleaner way to achieve this....\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Darwin-specific linker flags for loadable modules.\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use C99-compatible compile mode for all C source files of a target.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "a1ef5ce5277f7ac4f91b2282c2f97fea6590cee2",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If asked, configure doxygen for the creation of a Qt Compressed Help file.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "include/polly/Config/config.h.cmake" : {
      "ObjectId" : "aaa101f5b8d707fa4898c250e3b167295f857c79",
      "LastModified" : "2019-01-19T08:50:56Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "//===- polly/Config.h ------------ Configuration of Polly -------*- C++ -*-===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// Configuration of Polly.\n//\n//===----------------------------------------------------------------------===//",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "41f19087c971f4e5c4f24723a10fc18630255fb4",
      "LastModified" : "2019-03-19T03:18:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compile ISL into a separate library.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use an object-library to add the same files to multiple libs without requiring\n\n# the sources them to be recompiled for each of them.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create the library that can be linked into LLVM's tools and Polly's unittests.\n\n# It depends on all library it needs, such that with\n\n# LLVM_POLLY_LINK_INTO_TOOLS=ON, its dependencies like PollyISL are linked as\n\n# well.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Additional dependencies for Polly-ACC.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Polly-ACC requires the NVPTX backend to work. Ask LLVM about its libraries.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This call emits an error if they NVPTX backend is not enable.\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# The shlib/dylib contains all the LLVM components\n\n# (including NVPTX is enabled) already. Adding them to target_link_libraries\n\n# would cause them being twice in the address space\n\n# (their LLVM*.a/so and their copies in libLLVM.so)\n\n# which results in errors when the two instances try to register the same\n\n# command-line switches.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# The libraries below are required for darwin: http://PR26392\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Create a loadable module Polly.so that can be loaded using\n\n# LLVM's/clang's \"-load\" option.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add dummy target, because loadable modules are not supported on Windows\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Only add the dependencies that are not part of LLVM. The latter are assumed\n\n# to be already available in the address space the module is loaded into.\n\n# Adding them once more would have the effect that both copies try to register\n\n# the same command line options, to which LLVM reacts with an error.\n\n# If Polly-ACC is enabled, the NVPTX target is also expected to reside in the\n\n# hosts. This is not the case for bugpoint. Use LLVM_POLLY_LINK_INTO_TOOLS=ON\n\n# instead which will automatically resolve the additional dependencies by\n\n# Polly.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Check if we are building as part of an LLVM build\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "lib/External/CMakeLists.txt" : {
      "ObjectId" : "8ffd984e542b2a14ae879bf4ab2e709bef690977",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# External: Integer Set Library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine version of isl\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# The source comes from a 'make dist' archive\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The source directory is preconfigured\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Unknown revision\n\n# TODO: We could look for a .git and get the revision from HEAD\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Enable small integer optimization and imath\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Determine compiler characteristics\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Like check_c_source_compiles, but sets the result to either\n\n# 0 (error while compiling) or 1 (compiled successfully)\n\n# Required for compatibility with autotool's AC_CHECK_DECLS\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Check for the existance of a type\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Write configure result\n\n# configure_file(... COPYONLY) avoids that the time stamp changes if the file is identical\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# ISL files to compile\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# ISL requires at least C99 to compile. gcc < 5.0 use -std=gnu89 as default.\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Determine version of ppcg\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The source comes from a 'make dist' archive\n",
        "Line" : 305,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# The source directory is preconfigured\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Unknown revision\n\n# TODO: We could look for a .git and get the revision from HEAD\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Disable warnings for upstream projects.\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# 'expression' : signed/unsigned mismatch\n\n# 'operation' : different 'modifier' qualifiers\n\n# nonstandard extension used: zero-sized array in struct/union\n\n# nonstandard extension used: nameless struct/union\n\n# 'operator': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)\n\n# nonstandard extension used : 'identifier' : cannot be initialized using address of automatic variable\n",
        "Line" : 356,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# In the Windows API (with some exceptions), the maximum length for a path is\n\n# MAX_PATH, which is defined as 260 characters.\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "lib/External/isl/Makefile.am" : {
      "ObjectId" : "6c1729b84cddf1dca7860a69f392ea98309f563f",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# dummy library that captures the dependencies on all headers\n\n# that are relevant for the bindings\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 544:23 token recognition error at: '\"; then \\\\n\\t\\trm -f $(DESTDIR)$(libdir)/$$libisl-gdb.py; \\\\n\\tfi\\n\u0000'\n"
    },
    "lib/External/isl/doc/Makefile.am" : {
      "ObjectId" : "1d61dd7775a487929a6b89cc888502c1bbad4f5d",
      "LastModified" : "2017-02-27T17:54:25Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "lib/External/isl/interface/Makefile.am" : {
      "ObjectId" : "fa09ce46c3045b22423d72f24dd6ec8eb0ef1b93",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "lib/External/isl_config.h.cmake" : {
      "ObjectId" : "036dc4fd8f761630a17219627bb89a44d90e560e",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* define if your compiler has __attribute__ */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* most gcc compilers know a function __attribute__((__warn_unused_result__)) */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 if you have the declaration of `ffs', and to 0 if you don't. */",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 if you have the declaration of `__builtin_ffs', and to 0 if you\n   don't. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the declaration of `_BitScanForward', and to 0 if\n   you don't. */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the declaration of `strcasecmp', and to 0 if you\n   don't. */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to 1 if you have the declaration of `_stricmp', and to 0 if you\n   don't. */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the declaration of `strncasecmp', and to 0 if you\n   don't. */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the declaration of `_strnicmp', and to 0 if you\n   don't. */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the declaration of `snprintf', and to 0 if you\n   don't. */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the declaration of `_snprintf', and to 0 if you\n   don't. */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* use gmp to implement isl_int */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* use imath to implement isl_int */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Use small integer optimization */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "lib/External/isl_srcdir.c.cmake" : {
      "ObjectId" : "34ef890f51ee17e63cebd605e295e8166f738f49",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "lib/External/ppcg/Makefile.am" : {
      "ObjectId" : "7c12da3af09dfdedb566898e10940a75e8a85604",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0,
      "Errorlog" : "line 77:59 token recognition error at: '\"' > $@\\n\u0000'\n"
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "cf6efd12beb0ba745357416a434d20593ae0de13",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Run regression and unit tests\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run only unit tests\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Run polly-check-format as part of polly-check only if we are compiling with\n\n# clang, so clang-format is available.\n\n# if (TARGET clang-format) would be preferable, but this target is only added\n\n# after Polly, i.e. there is no such target yet at this point. The CMake cache\n\n# entry LLVM_TOOL_CLANG_BUILD will only be defined after clang has been\n\n# configured at least once, i.e. format will be checked only after a rerun of\n\n# CMake's configure.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add a legacy target spelling: polly-test\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "7c89ed549421a2ee747c14044116c3534d5644b9",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/GPURuntime/CMakeLists.txt" : {
      "ObjectId" : "4e17c276a11bace99e34ede49068c27baf506124",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CMakeLists.txt" : {
      "ObjectId" : "fac70383de948c241ac15a7ce2bfabba77709327",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_polly_unittest(test_dirname file1.cpp file2.cpp)\n\n#\n\n# Will compile the list of files together and link against Polly and its dependences.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/DeLICM/CMakeLists.txt" : {
      "ObjectId" : "d83c08a0a9076c4d4a88c6a392a3bd584de0fc38",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Flatten/CMakeLists.txt" : {
      "ObjectId" : "db7eaae4bd97bdf6cdb31020fc918009f5c698ad",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Isl/CMakeLists.txt" : {
      "ObjectId" : "3aedabba2f37e261c737868425e1f2ab4713dc86",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ScheduleOptimizer/CMakeLists.txt" : {
      "ObjectId" : "75adea671517814caa36f87d069c1cfc262e6148",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/ScopPassManager/CMakeLists.txt" : {
      "ObjectId" : "59c5a4a717a51ed5c247f43c5cd5f3d3496d8817",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Support/CMakeLists.txt" : {
      "ObjectId" : "3cc52c14f2bb3c362c00ab948b811bd5c78849ae",
      "LastModified" : "2018-11-06T15:18:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "CMAKESOURCE" : 3,
    "AUTOMAKE" : 4
  },
  "ElapsedTime" : 5283
}