{
  "Repository" : "6317697",
  "Revision" : "HEAD",
  "ObjectId" : "9269d118ff6c641829ddfb380de9f8ba81e9957e",
  "CommitTime" : "2014-02-07T08:20:10Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "4c9724974b2f61af7c816740c788ed70bb31fc3c",
      "LastModified" : "2014-02-06T13:34:15Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Ganeti makefile\n\n# - Indent with tabs only.\n\n# - Keep files sorted; one line per file.\n\n# - Directories in lib/ must have their own *dir variable (see hypervisor).\n\n# - All directories must be listed DIRS.\n\n# - Use autogen.sh to generate Makefile.in and configure script.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automake doesn't export these variables before version 1.10.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Helper values for calling builtin functions\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Helper function to strip src/ and test/hs/ from a list\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use bash in order to be able to use pipefail\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Enable colors in shelltest\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# starting as of Ganeti 2.10, all files are stored in two directories,\n\n# with only symbolic links added at other places.\n\n#\n\n# $(versiondir) contains most of Ganeti and all architecture-dependent files\n\n# $(versionedsharedir) contains only architecture-independent files; all python\n\n# executables need to go directly to $(versionedsharedir), as all ganeti python\n\n# mdules are installed outside the usual python path, i.e., as private modules.\n\n#\n\n# $(defaultversiondir) and $(defaultversionedsharedir) are the corresponding\n\n# directories for \"the currently running\" version of Ganeti. We never install\n\n# there, but all symbolic links go there, rather than directory to $(versiondir)\n\n# or $(versionedsharedir). Note that all links to $(default*dir) need to be stable;\n\n# so, if some currently architecture-independent executable is replaced by an\n\n# architecture-dependent one (and hence has to go under $(versiondir)), add a link\n\n# under $(versionedsharedir) but do not change the external links.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Note: these are automake-specific variables, and must be named after\n\n# the directory + 'dir' suffix\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Delete output file if an error occurred while building it\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Haskell directories without the roots (src, test/hs)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# some helper vars\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generating the RPC wrappers depends on many things, so make sure\n\n# it's built at the end of the built sources\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# these are all built from the underlying %.in sources\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Generates file names such as \"doc/man-gnt-instance.rst\"\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Haskell programs to be installed in $PREFIX/bin\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Haskell programs to be installed in the MYEXECLIB dir\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Haskell programs to be compiled by \"make really-all\"\n",
        "Line" : 600,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# All Haskell non-test programs to be compiled but not automatically installed\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Haskell programs that cannot be disabled at configure (e.g., unlike\n\n# 'mon-collector')\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# extra flags that can be overriden on the command line (e.g. -Wwarn, etc.)\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# internal extra flags (used for test/hs/htest mainly)\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# exclude options for coverage reports\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Note: we use here an order-only prerequisite, as the contents of\n\n# _constants.py are not actually influencing the html build output: it\n\n# has to exist in order for the sphinx module to be loaded\n\n# successfully, but we certainly don't want the docs to be rebuilt if\n\n# it changes\n",
        "Line" : 835,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Sphinx provides little control over what content should be included. Some\n\n## mechanisms exist, but they all have drawbacks or actual issues. Since we\n\n## build two different versions of the documentation--once without man pages and\n\n## once, if enabled, with them--some control is necessary. xmpp-wrapper provides\n\n## us with this, but requires running in a temporary directory. It moves the\n\n## correct files into place depending on environment variables.\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Things to build but not to install (add it to EXTRA_DIST if it should be\n\n# distributed)\n",
        "Line" : 924,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# FIXME: this is a hardcoded logic, instead of auto-resolving\n",
        "Line" : 999,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# for the test/hs/htest binary, we need to enable profiling/coverage\n",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# we compile the hpc-htools binary with the program coverage\n",
        "Line" : 1043,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# we compile the hpc-mon-collector binary with the program coverage\n",
        "Line" : 1046,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# test dependency\n",
        "Line" : 1049,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# rule for building profiling-enabled versions of the haskell programs\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# strip path prefixes off the sbin scripts\n",
        "Line" : 1067,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# compute the basenames of the myexeclib_scripts\n",
        "Line" : 1144,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Remove extensions from all filenames in man_MANS\n",
        "Line" : 1245,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Environment for all tests\n",
        "Line" : 1561,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Environment for tests run by automake\n",
        "Line" : 1568,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "## Extract constant names from 'Constants.hs' by extracting the left\n\n## side of all lines containing an equal sign (i.e., '=') and\n\n## prepending the apostrophe sign (i.e., \"'\").\n\n##\n\n## For example, the constant\n\n##   adminstDown = ...\n\n## becomes\n\n##   'adminstDown\n",
        "Line" : 1791,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "## Writes sed script to replace placeholders with build-time values. The\n\n## additional quotes after the first @ sign are necessary to stop configure\n\n## from replacing those values as well.\n",
        "Line" : 1938,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Using deferred evaluation\n",
        "Line" : 1981,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# We need to create symlinks because \"make distcheck\" will not install Python\n\n# files when building.\n",
        "Line" : 2035,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# E111: indentation is not a multiple of four\n\n# E121: continuation line indentation is not a multiple of four\n\n#       (since our indent level is not 4)\n\n# E125: continuation line does not distinguish itself from next logical line\n\n#       (since our indent level is not 4)\n\n# E123: closing bracket does not match indentation of opening bracket's line\n\n# E127: continuation line over-indented for visual indent\n\n#       (since our indent level is not 4)\n\n# note: do NOT add E128 here; it's a valid style error in most cases!\n\n# I've seen real errors, but also some cases were we indent wrongly\n\n# due to line length; try to rework the cases where it is triggered,\n\n# instead of silencing it\n\n# E261: at least two spaces before inline comment\n\n# E501: line too long (80 characters)\n",
        "Line" : 2141,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For excluding pep8 expects filenames only, not whole paths\n",
        "Line" : 2157,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# FIXME: lint all test code, not just the newly added test support\n",
        "Line" : 2182,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# a dist hook rule for updating the vcs-version file; this is\n\n# hardcoded due to where it needs to build the file...\n",
        "Line" : 2213,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# a distcheck hook rule for catching revision control directories\n",
        "Line" : 2220,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Empty files or directories should not be distributed. They can cause\n\n# unnecessary warnings for packagers. Directories used by automake during\n\n# distcheck must be excluded.\n",
        "Line" : 2234,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Backwards compatible distcheck-release target\n",
        "Line" : 2248,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "##src/}; \\\n\t  f_notst=$${f_nosrc##test/hs/}; \\\n\t  f_html=$${f_notst%%.hs}.html; \\\n\t  $(HSCOLOUR) -css -anchor $$file > $(APIDOC_HS_DIR)/$$f_html ; \\\n\tdone ; \\\n\t$(HADDOCK) --odir $(APIDOC_HS_DIR) --html --hoogle --ignore-all-exports -w \\\n\t  -t ganeti -p src/haddock-prologue \\\n\t  --source-module=\"%{MODULE/.//}.html\" \\\n\t  --source-entity=\"%{MODULE/.//}.html#%{NAME}\" \\\n\t  $$OPTGHC \\\n\t  $(HS_LIBTESTBUILT_SRCS)\n",
        "Line" : 2350,
        "CharPositionInLine" : 18
      },
      "48" : {
        "Text" : "# Special \"kind-of-QA\" target for htools, needs special setup (all\n\n# tools compiled with -fhpc)\n",
        "Line" : 2415,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# target to rebuild all man pages (both groff and html output)\n",
        "Line" : 2446,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Target that builds all binaries (including those that are not\n\n# rebuilt except when running the tests)\n",
        "Line" : 2450,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# we don't need the ancient implicit rules:\n",
        "Line" : 2455,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# vim: set noet :\n",
        "Line" : 2464,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53,
      "Errorlog" : "line 1800:13 token recognition error at: '\"/=/ s/\\(.*\\) =.*/    '\\1'\nline 1889:67 token recognition error at: '\"\\1'\nline 1889:70 token recognition error at: '\",\\2'\n"
    }
  },
  "FileTypes" : {
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1616
}